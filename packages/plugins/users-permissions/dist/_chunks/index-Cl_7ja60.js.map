{"version":3,"file":"index-Cl_7ja60.js","sources":["../../admin/src/pages/AdvancedSettings/utils/layout.js","../../admin/src/pages/AdvancedSettings/utils/schema.js","../../admin/src/pages/AdvancedSettings/index.jsx"],"sourcesContent":["import { getTrad } from '../../../utils';\n\nconst layout = [\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email'),\n      defaultMessage: 'One account per email address',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email'),\n      defaultMessage:\n        'Disallow the user to create multiple accounts using the same email address with different authentication providers.',\n    },\n    name: 'unique_email',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.sign-up'),\n      defaultMessage: 'Enable sign-ups',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.sign-up'),\n      defaultMessage:\n        'When disabled (OFF), the registration process is forbidden. No one can subscribe anymore no matter the used provider.',\n    },\n    name: 'allow_register',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-reset-password'),\n      defaultMessage: 'Reset password page',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-reset-password'),\n      defaultMessage: \"URL of your application's reset password page.\",\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-reset-password'),\n      defaultMessage: 'ex: https://youtfrontend.com/reset-password',\n    },\n    name: 'email_reset_password',\n    type: 'string',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation'),\n      defaultMessage: 'Enable email confirmation',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation'),\n      defaultMessage: 'When enabled (ON), new registered users receive a confirmation email.',\n    },\n    name: 'email_confirmation',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation-redirection'),\n      defaultMessage: 'Redirection url',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation-redirection'),\n      defaultMessage: 'After you confirmed your email, choose where you will be redirected.',\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-confirmation-redirection'),\n      defaultMessage: 'ex: https://youtfrontend.com/email-confirmation',\n    },\n    name: 'email_confirmation_redirection',\n    type: 'string',\n    size: 12,\n  },\n];\n\nexport default layout;\n","import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\n// eslint-disable-next-line prefer-regex-literals\nconst URL_REGEX = new RegExp('(^$)|((.+:\\\\/\\\\/.*)(d*)\\\\/?(.*))');\n\nconst schema = yup.object().shape({\n  email_confirmation_redirection: yup.mixed().when('email_confirmation', {\n    is: true,\n    then: yup.string().matches(URL_REGEX).required(),\n    otherwise: yup.string().nullable(),\n  }),\n  email_reset_password: yup\n    .string(translatedErrors.string)\n    .matches(URL_REGEX, {\n      id: translatedErrors.regex.id,\n      defaultMessage: 'This is not a valid URL',\n    })\n    .nullable(),\n});\n\nexport default schema;\n","import React from 'react';\r\n\r\nimport { Box, Button, Flex, Grid, Typography, useNotifyAT } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport {\r\n  useAPIErrorHandler,\r\n  Page,\r\n  Form,\r\n  InputRenderer,\r\n  useNotification,\r\n  useFetchClient,\r\n  useRBAC,\r\n  Layouts,\r\n} from '@strapi/strapi/admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\r\n\r\nimport { PERMISSIONS } from '../../constants';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport layout from './utils/layout';\r\nimport schema from './utils/schema';\r\n\r\nconst ProtectedAdvancedSettingsPage = () => (\r\n  <Page.Protect permissions={PERMISSIONS.readAdvancedSettings}>\r\n    <AdvancedSettingsPage />\r\n  </Page.Protect>\r\n);\r\n\r\nconst AdvancedSettingsPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { notifyStatus } = useNotifyAT();\r\n  const queryClient = useQueryClient();\r\n  const { get, put } = useFetchClient();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n\r\n  const {\r\n    isLoading: isLoadingForPermissions,\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC({ update: PERMISSIONS.updateAdvancedSettings });\r\n\r\n  const { isLoading: isLoadingData, data } = useQuery(\r\n    ['users-permissions', 'advanced'],\r\n    async () => {\r\n      const { data } = await get('/users-permissions/advanced');\r\n\r\n      return data;\r\n    },\r\n    {\r\n      onSuccess() {\r\n        notifyStatus(\r\n          formatMessage({\r\n            id: getTrad('Form.advancedSettings.data.loaded'),\r\n            defaultMessage: 'Advanced settings data has been loaded',\r\n          })\r\n        );\r\n      },\r\n      onError() {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: getTrad('notification.error'),\r\n            defaultMessage: 'An error occured',\r\n          }),\r\n        });\r\n      },\r\n    }\r\n  );\r\n\r\n  const isLoading = isLoadingForPermissions || isLoadingData;\r\n\r\n  const submitMutation = useMutation((body) => put('/users-permissions/advanced', body), {\r\n    async onSuccess() {\r\n      await queryClient.invalidateQueries(['users-permissions', 'advanced']);\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTrad('notification.success.saved'),\r\n          defaultMessage: 'Saved',\r\n        }),\r\n      });\r\n    },\r\n    onError(error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    },\r\n    refetchActive: true,\r\n  });\r\n\r\n  const { isLoading: isSubmittingForm } = submitMutation;\r\n\r\n  const handleSubmit = async (body) => {\r\n    submitMutation.mutate({\r\n      ...body,\r\n      email_confirmation_redirection: body.email_confirmation\r\n        ? body.email_confirmation_redirection\r\n        : '',\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Page.Main aria-busy={isSubmittingForm}>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: formatMessage({\r\n              id: getTrad('HeaderNav.link.advancedSettings'),\r\n              defaultMessage: 'Advanced Settings',\r\n            }),\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Form onSubmit={handleSubmit} initialValues={data.settings} validationSchema={schema}>\r\n        {({ values, isSubmitting, modified }) => {\r\n          return (\r\n            <>\r\n              <Layouts.Header\r\n                title={formatMessage({\r\n                  id: getTrad('HeaderNav.link.advancedSettings'),\r\n                  defaultMessage: 'Advanced Settings',\r\n                })}\r\n                primaryAction={\r\n                  <Button\r\n                    loading={isSubmitting}\r\n                    type=\"submit\"\r\n                    disabled={!modified || !canUpdate}\r\n                    startIcon={<Check />}\r\n                    size=\"S\"\r\n                  >\r\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n                  </Button>\r\n                }\r\n              />\r\n              <Layouts.Content>\r\n                <Box\r\n                  background=\"neutral0\"\r\n                  hasRadius\r\n                  shadow=\"filterShadow\"\r\n                  paddingTop={6}\r\n                  paddingBottom={6}\r\n                  paddingLeft={7}\r\n                  paddingRight={7}\r\n                >\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                    <Typography variant=\"delta\" tag=\"h2\">\r\n                      {formatMessage({\r\n                        id: 'global.settings',\r\n                        defaultMessage: 'Settings',\r\n                      })}\r\n                    </Typography>\r\n                    <Grid.Root gap={6}>\r\n                      {[\r\n                        {\r\n                          label: {\r\n                            id: getTrad('EditForm.inputSelect.label.role'),\r\n                            defaultMessage: 'Default role for authenticated users',\r\n                          },\r\n                          hint: {\r\n                            id: getTrad('EditForm.inputSelect.description.role'),\r\n                            defaultMessage:\r\n                              'It will attach the new authenticated user to the selected role.',\r\n                          },\r\n                          options: data.roles.map((role) => ({\r\n                            label: role.name,\r\n                            value: role.type,\r\n                          })),\r\n                          name: 'default_role',\r\n                          size: 6,\r\n                          type: 'enumeration',\r\n                        },\r\n                        ...layout,\r\n                      ].map(({ size, ...field }) => (\r\n                        <Grid.Item\r\n                          key={field.name}\r\n                          col={size}\r\n                          direction=\"column\"\r\n                          alignItems=\"stretch\"\r\n                        >\r\n                          <InputRenderer\r\n                            {...field}\r\n                            disabled={\r\n                              field.name === 'email_confirmation_redirection' &&\r\n                              values.email_confirmation === false\r\n                            }\r\n                            label={formatMessage(field.label)}\r\n                            hint={field.hint ? formatMessage(field.hint) : undefined}\r\n                            placeholder={\r\n                              field.placeholder ? formatMessage(field.placeholder) : undefined\r\n                            }\r\n                          />\r\n                        </Grid.Item>\r\n                      ))}\r\n                    </Grid.Root>\r\n                  </Flex>\r\n                </Box>\r\n              </Layouts.Content>\r\n            </>\r\n          );\r\n        }}\r\n      </Form>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nexport { ProtectedAdvancedSettingsPage, AdvancedSettingsPage };\r\n"],"names":["getTrad","yup","translatedErrors","jsx","Page","PERMISSIONS","useIntl","useNotification","useNotifyAT","useQueryClient","useFetchClient","useAPIErrorHandler","useRBAC","useQuery","data","useMutation","jsxs","Form","Fragment","Layouts","Button","Check","Box","Flex","Typography","Grid","InputRenderer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,SAAS;AAAA,EACb;AAAA,IACE,OAAO;AAAA,MACL,IAAIA,MAAO,QAAC,kCAAkC;AAAA,MAC9C,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,MACJ,IAAIA,MAAO,QAAC,wCAAwC;AAAA,MACpD,gBACE;AAAA,IACH;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACP;AAAA,EACD;AAAA,IACE,OAAO;AAAA,MACL,IAAIA,MAAO,QAAC,oCAAoC;AAAA,MAChD,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,MACJ,IAAIA,MAAO,QAAC,0CAA0C;AAAA,MACtD,gBACE;AAAA,IACH;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACP;AAAA,EACD;AAAA,IACE,OAAO;AAAA,MACL,IAAIA,MAAO,QAAC,iDAAiD;AAAA,MAC7D,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,MACJ,IAAIA,MAAO,QAAC,uDAAuD;AAAA,MACnE,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAIA,MAAO,QAAC,uDAAuD;AAAA,MACnE,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACP;AAAA,EACD;AAAA,IACE,OAAO;AAAA,MACL,IAAIA,MAAO,QAAC,+CAA+C;AAAA,MAC3D,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,MACJ,IAAIA,MAAO,QAAC,qDAAqD;AAAA,MACjE,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACP;AAAA,EACD;AAAA,IACE,OAAO;AAAA,MACL,IAAIA,MAAO,QAAC,2DAA2D;AAAA,MACvE,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,MACJ,IAAIA,MAAO,QAAC,iEAAiE;AAAA,MAC7E,gBAAgB;AAAA,IACjB;AAAA,IACD,aAAa;AAAA,MACX,IAAIA,MAAO,QAAC,iEAAiE;AAAA,MAC7E,gBAAgB;AAAA,IACjB;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACP;AACH;AC1EA,MAAM,YAAY,IAAI,OAAO,kCAAkC;AAE/D,MAAM,SAASC,eAAI,OAAQ,EAAC,MAAM;AAAA,EAChC,gCAAgCA,eAAI,QAAQ,KAAK,sBAAsB;AAAA,IACrE,IAAI;AAAA,IACJ,MAAMA,eAAI,OAAM,EAAG,QAAQ,SAAS,EAAE,SAAU;AAAA,IAChD,WAAWA,eAAI,OAAQ,EAAC,SAAU;AAAA,EACtC,CAAG;AAAA,EACD,sBAAsBA,eACnB,OAAOC,MAAgB,iBAAC,MAAM,EAC9B,QAAQ,WAAW;AAAA,IAClB,IAAIA,MAAAA,iBAAiB,MAAM;AAAA,IAC3B,gBAAgB;AAAA,EACjB,CAAA,EACA,SAAU;AACf,CAAC;ACIK,MAAA,gCAAgC,MACpCC,2BAAA,IAACC,WAAK,SAAL,EAAa,aAAaC,kBAAY,sBACrC,UAACF,2BAAAA,IAAA,sBAAA,CAAqB,CAAA,EACxB,CAAA;AAGF,MAAM,uBAAuB,MAAM;AAC3B,QAAA,EAAE,cAAc,IAAIG,kBAAQ;AAC5B,QAAA,EAAE,mBAAmB,IAAIC,sBAAgB;AACzC,QAAA,EAAE,aAAa,IAAIC,yBAAY;AACrC,QAAM,cAAcC,WAAAA,eAAe;AACnC,QAAM,EAAE,KAAK,IAAI,IAAIC,qBAAe;AAC9B,QAAA,EAAE,eAAe,IAAIC,yBAAmB;AAExC,QAAA;AAAA,IACJ,WAAW;AAAA,IACX,gBAAgB,EAAE,UAAU;AAAA,MAC1BC,MAAQ,QAAA,EAAE,QAAQP,MAAA,YAAY,wBAAwB;AAE1D,QAAM,EAAE,WAAW,eAAe,KAAS,IAAAQ,WAAA;AAAA,IACzC,CAAC,qBAAqB,UAAU;AAAA,IAChC,YAAY;AACV,YAAM,EAAE,MAAAC,MAAS,IAAA,MAAM,IAAI,6BAA6B;AAEjDA,aAAAA;AAAAA,IACT;AAAA,IACA;AAAA,MACE,YAAY;AACV;AAAA,UACE,cAAc;AAAA,YACZ,IAAId,cAAQ,mCAAmC;AAAA,YAC/C,gBAAgB;AAAA,UACjB,CAAA;AAAA,QACH;AAAA,MACF;AAAA,MACA,UAAU;AACW,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,cAAc;AAAA,YACrB,IAAIA,cAAQ,oBAAoB;AAAA,YAChC,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA,CACF;AAAA,MAAA;AAAA,IACH;AAAA,EAEJ;AAEA,QAAM,YAAY,2BAA2B;AAE7C,QAAM,iBAAiBe,WAAAA,YAAY,CAAC,SAAS,IAAI,+BAA+B,IAAI,GAAG;AAAA,IACrF,MAAM,YAAY;AAChB,YAAM,YAAY,kBAAkB,CAAC,qBAAqB,UAAU,CAAC;AAElD,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc;AAAA,UACrB,IAAIf,cAAQ,4BAA4B;AAAA,UACxC,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA,CACF;AAAA,IACH;AAAA,IACA,QAAQ,OAAO;AACM,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,KAAK;AAAA,MAAA,CAC9B;AAAA,IACH;AAAA,IACA,eAAe;AAAA,EAAA,CAChB;AAEK,QAAA,EAAE,WAAW,iBAAA,IAAqB;AAElC,QAAA,eAAe,OAAO,SAAS;AACnC,mBAAe,OAAO;AAAA,MACpB,GAAG;AAAA,MACH,gCAAgC,KAAK,qBACjC,KAAK,iCACL;AAAA,IAAA,CACL;AAAA,EACH;AAEA,MAAI,WAAW;AACN,WAAAG,+BAACC,MAAAA,KAAK,SAAL,EAAa;AAAA,EAAA;AAGvB,SACGY,2BAAAA,KAAAZ,MAAAA,KAAK,MAAL,EAAU,aAAW,kBACpB,UAAA;AAAA,IAACD,2BAAAA,IAAAC,MAAA,KAAK,OAAL,EACE,UAAA;AAAA,MACC,EAAE,IAAI,sBAAsB,gBAAgB,oBAAoB;AAAA,MAChE;AAAA,QACE,MAAM,cAAc;AAAA,UAClB,IAAIJ,cAAQ,iCAAiC;AAAA,UAC7C,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IACH,GAEJ;AAAA,IACCG,2BAAA,IAAAc,MAAA,MAAA,EAAK,UAAU,cAAc,eAAe,KAAK,UAAU,kBAAkB,QAC3E,UAAC,CAAA,EAAE,QAAQ,cAAc,eAAe;AACvC,aAEID,2BAAA,KAAAE,qBAAA,EAAA,UAAA;AAAA,QAAAf,2BAAA;AAAA,UAACgB,MAAAA,QAAQ;AAAA,UAAR;AAAA,YACC,OAAO,cAAc;AAAA,cACnB,IAAInB,cAAQ,iCAAiC;AAAA,cAC7C,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,eACEG,2BAAA;AAAA,cAACiB,aAAA;AAAA,cAAA;AAAA,gBACC,SAAS;AAAA,gBACT,MAAK;AAAA,gBACL,UAAU,CAAC,YAAY,CAAC;AAAA,gBACxB,0CAAYC,MAAM,OAAA,EAAA;AAAA,gBAClB,MAAK;AAAA,gBAEJ,wBAAc,EAAE,IAAI,eAAe,gBAAgB,OAAQ,CAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAC9D;AAAA,QAEJ;AAAA,QACAlB,2BAAAA,IAACgB,MAAQ,QAAA,SAAR,EACC,UAAAhB,2BAAA;AAAA,UAACmB,aAAA;AAAA,UAAA;AAAA,YACC,YAAW;AAAA,YACX,WAAS;AAAA,YACT,QAAO;AAAA,YACP,YAAY;AAAA,YACZ,eAAe;AAAA,YACf,aAAa;AAAA,YACb,cAAc;AAAA,YAEd,0CAACC,mBAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,cAAApB,+BAACqB,aAAAA,YAAW,EAAA,SAAQ,SAAQ,KAAI,MAC7B,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cACjB,CAAA,GACH;AAAA,cACCrB,2BAAA,IAAAsB,aAAA,KAAK,MAAL,EAAU,KAAK,GACb,UAAA;AAAA,gBACC;AAAA,kBACE,OAAO;AAAA,oBACL,IAAIzB,cAAQ,iCAAiC;AAAA,oBAC7C,gBAAgB;AAAA,kBAClB;AAAA,kBACA,MAAM;AAAA,oBACJ,IAAIA,cAAQ,uCAAuC;AAAA,oBACnD,gBACE;AAAA,kBACJ;AAAA,kBACA,SAAS,KAAK,MAAM,IAAI,CAAC,UAAU;AAAA,oBACjC,OAAO,KAAK;AAAA,oBACZ,OAAO,KAAK;AAAA,kBAAA,EACZ;AAAA,kBACF,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,gBACR;AAAA,gBACA,GAAG;AAAA,gBACH,IAAI,CAAC,EAAE,MAAM,GAAG,MAChB,MAAAG,2BAAA;AAAA,gBAACsB,aAAAA,KAAK;AAAA,gBAAL;AAAA,kBAEC,KAAK;AAAA,kBACL,WAAU;AAAA,kBACV,YAAW;AAAA,kBAEX,UAAAtB,2BAAA;AAAA,oBAACuB,MAAA;AAAA,oBAAA;AAAA,sBACE,GAAG;AAAA,sBACJ,UACE,MAAM,SAAS,oCACf,OAAO,uBAAuB;AAAA,sBAEhC,OAAO,cAAc,MAAM,KAAK;AAAA,sBAChC,MAAM,MAAM,OAAO,cAAc,MAAM,IAAI,IAAI;AAAA,sBAC/C,aACE,MAAM,cAAc,cAAc,MAAM,WAAW,IAAI;AAAA,oBAAA;AAAA,kBAAA;AAAA,gBAE3D;AAAA,gBAhBK,MAAM;AAAA,cAAA,CAkBd,EACH,CAAA;AAAA,YAAA,EACF,CAAA;AAAA,UAAA;AAAA,QAAA,EAEJ,CAAA;AAAA,MAAA,GACF;AAAA,IAAA,EAGN,CAAA;AAAA,EAAA,GACF;AAEJ;;;"}