{"version":3,"file":"index-B0NijiBB.mjs","sources":["../../admin/src/pluginId.ts","../../admin/src/utils/getTranslation.ts","../../admin/src/components/CheckboxConfirmation.tsx","../../admin/src/utils/fields.ts","../../admin/src/utils/strings.ts","../../admin/src/hooks/useI18n.ts","../../admin/src/services/api.ts","../../admin/src/services/locales.ts","../../admin/src/services/relations.ts","../../admin/src/utils/clean.ts","../../admin/src/components/BulkLocaleActionModal.tsx","../../admin/src/components/CMHeaderActions.tsx","../../admin/src/components/CMListViewModalsAdditionalInformation.tsx","../../admin/src/components/LocalePicker.tsx","../../admin/src/constants.ts","../../admin/src/contentManagerHooks/editView.tsx","../../admin/src/components/LocaleListCell.tsx","../../admin/src/contentManagerHooks/listView.tsx","../../admin/src/contentReleasesHooks/releaseDetailsView.ts","../../admin/src/middlewares/extendCTBAttributeInitialData.ts","../../admin/src/middlewares/extendCTBInitialData.ts","../../admin/src/middlewares/rbac-middleware.ts","../../admin/src/utils/prefixPluginTranslations.ts","../../admin/src/utils/schemas.ts","../../admin/src/index.ts"],"sourcesContent":["export const pluginId = 'i18n';\r\n","import { pluginId } from '../pluginId';\r\n\r\nconst getTranslation = (id: string) => `${pluginId}.${id}`;\r\n\r\nexport { getTranslation };\r\n","import * as React from 'react';\r\n\r\nimport { Button, Checkbox, Dialog, Field, Flex, Typography } from '@strapi/design-system';\r\nimport { WarningCircle } from '@strapi/icons';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nconst TextAlignTypography = styled(Typography)`\r\n  text-align: center;\r\n`;\r\n\r\ninterface IntlMessage extends MessageDescriptor {\r\n  values: object;\r\n}\r\n\r\ninterface CheckboxConfirmationProps {\r\n  description: IntlMessage;\r\n  intlLabel: IntlMessage;\r\n  isCreating?: boolean;\r\n  name: string;\r\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\r\n  value: boolean;\r\n}\r\n\r\nconst CheckboxConfirmation = ({\r\n  description,\r\n  isCreating = false,\r\n  intlLabel,\r\n  name,\r\n  onChange,\r\n  value,\r\n}: CheckboxConfirmationProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  const handleChange = (value: boolean) => {\r\n    if (isCreating || value) {\r\n      return onChange({ target: { name, value, type: 'checkbox' } });\r\n    }\r\n\r\n    if (!value) {\r\n      return setIsOpen(true);\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    onChange({ target: { name, value: false, type: 'checkbox' } });\r\n  };\r\n\r\n  const label = intlLabel.id\r\n    ? formatMessage(\r\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n        { ...intlLabel.values }\r\n      )\r\n    : name;\r\n\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { ...description.values }\r\n      )\r\n    : '';\r\n\r\n  return (\r\n    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\r\n      <Field.Root hint={hint} name={name}>\r\n        <Checkbox onCheckedChange={handleChange} checked={value}>\r\n          {label}\r\n        </Checkbox>\r\n        <Field.Hint />\r\n      </Field.Root>\r\n      <Dialog.Content>\r\n        <Dialog.Header>\r\n          {formatMessage({\r\n            id: getTranslation('CheckboxConfirmation.Modal.title'),\r\n            defaultMessage: 'Disable localization',\r\n          })}\r\n        </Dialog.Header>\r\n        <Dialog.Body icon={<WarningCircle />}>\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n            <Flex justifyContent=\"center\">\r\n              <TextAlignTypography>\r\n                {formatMessage({\r\n                  id: getTranslation('CheckboxConfirmation.Modal.content'),\r\n                  defaultMessage:\r\n                    'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\r\n                })}\r\n              </TextAlignTypography>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\">\r\n              <Typography fontWeight=\"semiBold\">\r\n                {formatMessage({\r\n                  id: getTranslation('CheckboxConfirmation.Modal.body'),\r\n                  defaultMessage: 'Do you want to disable it?',\r\n                })}\r\n              </Typography>\r\n            </Flex>\r\n          </Flex>\r\n        </Dialog.Body>\r\n        <Dialog.Footer>\r\n          <Dialog.Cancel>\r\n            <Button variant=\"tertiary\">\r\n              {formatMessage({\r\n                id: 'components.popUpWarning.button.cancel',\r\n                defaultMessage: 'No, cancel',\r\n              })}\r\n            </Button>\r\n          </Dialog.Cancel>\r\n          <Dialog.Action>\r\n            <Button variant=\"danger-light\" onClick={handleConfirm}>\r\n              {formatMessage({\r\n                id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\r\n                defaultMessage: 'Yes, disable',\r\n              })}\r\n            </Button>\r\n          </Dialog.Action>\r\n        </Dialog.Footer>\r\n      </Dialog.Content>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\nexport { CheckboxConfirmation };\r\n","const LOCALIZED_FIELDS = [\r\n  'biginteger',\r\n  'boolean',\r\n  'component',\r\n  'date',\r\n  'datetime',\r\n  'decimal',\r\n  'dynamiczone',\r\n  'email',\r\n  'enumeration',\r\n  'float',\r\n  'integer',\r\n  'json',\r\n  'media',\r\n  'number',\r\n  'password',\r\n  'richtext',\r\n  'blocks',\r\n  'string',\r\n  'text',\r\n  'time',\r\n];\r\n\r\nconst doesPluginOptionsHaveI18nLocalized = (\r\n  opts?: object\r\n): opts is { i18n: { localized: boolean } } =>\r\n  typeof opts === 'object' &&\r\n  opts !== null &&\r\n  'i18n' in opts &&\r\n  typeof opts.i18n === 'object' &&\r\n  opts.i18n !== null &&\r\n  'localized' in opts.i18n &&\r\n  typeof opts.i18n.localized === 'boolean';\r\n\r\nexport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized };\r\n","const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nexport { capitalize };\r\n","import * as React from 'react';\r\n\r\nimport { useAuth } from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\r\nimport { capitalize } from '../utils/strings';\r\n\r\ntype UseI18n = () => {\r\n  hasI18n: boolean;\r\n  canCreate: string[];\r\n  canRead: string[];\r\n  canUpdate: string[];\r\n  canDelete: string[];\r\n  canPublish: string[];\r\n};\r\n\r\n/**\r\n * @alpha\r\n * @description This hook is used to get the i18n status of a content type.\r\n * Also returns the CRUDP permission locale properties for the content type\r\n * so we know which locales the user can perform actions on.\r\n */\r\nconst useI18n: UseI18n = () => {\r\n  // Extract the params from the URL to pass to our useDocument hook\r\n  const params = useParams<{ collectionType: string; slug: string; model: string }>();\r\n\r\n  const userPermissions = useAuth('useI18n', (state) => state.permissions);\r\n  const actions = React.useMemo(() => {\r\n    const permissions = userPermissions.filter((permission) => permission.subject === params.slug);\r\n\r\n    return permissions.reduce<Omit<ReturnType<UseI18n>, 'hasI18n'>>(\r\n      (acc, permission) => {\r\n        const [actionShorthand] = permission.action.split('.').slice(-1);\r\n\r\n        return {\r\n          ...acc,\r\n          [`can${capitalize(actionShorthand)}`]: permission.properties?.locales ?? [],\r\n        };\r\n      },\r\n      { canCreate: [], canRead: [], canUpdate: [], canDelete: [], canPublish: [] }\r\n    );\r\n  }, [params.slug, userPermissions]);\r\n\r\n  // TODO: use specific hook to get schema only\r\n  const { schema } = useDocument(\r\n    {\r\n      // We can non-null assert these because below we skip the query if they are not present\r\n      collectionType: params.collectionType!,\r\n      model: params.slug!,\r\n    },\r\n    {\r\n      skip: true,\r\n    }\r\n  );\r\n\r\n  if (doesPluginOptionsHaveI18nLocalized(schema?.pluginOptions)) {\r\n    return {\r\n      hasI18n: schema.pluginOptions.i18n.localized,\r\n      ...actions,\r\n    };\r\n  }\r\n\r\n  return {\r\n    hasI18n: false,\r\n    ...actions,\r\n  };\r\n};\r\n\r\nexport { useI18n };\r\n","import { adminApi } from '@strapi/admin/strapi-admin';\r\n\r\nconst i18nApi = adminApi.enhanceEndpoints({\r\n  addTagTypes: ['Locale'],\r\n});\r\n\r\nexport { i18nApi };\r\n","import { i18nApi } from './api';\r\n\r\nimport type { GetISOLocales } from '../../../shared/contracts/iso-locales';\r\nimport type {\r\n  GetLocales,\r\n  CreateLocale,\r\n  DeleteLocale,\r\n  UpdateLocale,\r\n} from '../../../shared/contracts/locales';\r\n\r\nconst localesApi = i18nApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    createLocale: builder.mutation<CreateLocale.Response, CreateLocale.Request['body']>({\r\n      query: (data) => ({\r\n        url: '/i18n/locales',\r\n        method: 'POST',\r\n        data,\r\n      }),\r\n      invalidatesTags: [{ type: 'Locale', id: 'LIST' }],\r\n    }),\r\n    deleteLocale: builder.mutation<DeleteLocale.Response, DeleteLocale.Params['id']>({\r\n      query: (id) => ({\r\n        url: `/i18n/locales/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: (result, error, id) => [{ type: 'Locale', id }],\r\n    }),\r\n    getLocales: builder.query<GetLocales.Response, void>({\r\n      query: () => '/i18n/locales',\r\n      providesTags: (res) => [\r\n        { type: 'Locale', id: 'LIST' },\r\n        ...(Array.isArray(res)\r\n          ? res.map((locale) => ({\r\n              type: 'Locale' as const,\r\n              id: locale.id,\r\n            }))\r\n          : []),\r\n      ],\r\n    }),\r\n    getDefaultLocales: builder.query<GetISOLocales.Response, void>({\r\n      query: () => '/i18n/iso-locales',\r\n    }),\r\n    updateLocale: builder.mutation<\r\n      UpdateLocale.Response,\r\n      UpdateLocale.Request['body'] & UpdateLocale.Params\r\n    >({\r\n      query: ({ id, ...data }) => ({\r\n        url: `/i18n/locales/${id}`,\r\n        method: 'PUT',\r\n        data,\r\n      }),\r\n      invalidatesTags: (result, error, { id }) => [{ type: 'Locale', id }],\r\n    }),\r\n  }),\r\n});\r\n\r\nconst {\r\n  useCreateLocaleMutation,\r\n  useDeleteLocaleMutation,\r\n  useGetLocalesQuery,\r\n  useGetDefaultLocalesQuery,\r\n  useUpdateLocaleMutation,\r\n} = localesApi;\r\n\r\nexport {\r\n  useCreateLocaleMutation,\r\n  useDeleteLocaleMutation,\r\n  useGetLocalesQuery,\r\n  useGetDefaultLocalesQuery,\r\n  useUpdateLocaleMutation,\r\n};\r\n","import { i18nApi } from './api';\r\n\r\nimport type { CountManyEntriesDraftRelations } from '../../../shared/contracts/content-manager';\r\n\r\nconst relationsApi = i18nApi.injectEndpoints({\r\n  overrideExisting: true,\r\n  endpoints: (builder) => ({\r\n    getManyDraftRelationCount: builder.query<\r\n      CountManyEntriesDraftRelations.Response['data'],\r\n      CountManyEntriesDraftRelations.Request['query'] & {\r\n        model: string;\r\n      }\r\n    >({\r\n      query: ({ model, ...params }) => ({\r\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\r\n        method: 'GET',\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\r\n    }),\r\n  }),\r\n});\r\n\r\nconst { useGetManyDraftRelationCountQuery } = relationsApi;\r\n\r\nexport { useGetManyDraftRelationCountQuery };\r\n","import type { Schema } from '@strapi/types';\r\n\r\ntype Data = Record<keyof Schema.ContentType['attributes'], any>;\r\n\r\nconst cleanData = (\r\n  data: Data,\r\n  schema: Schema.ContentType,\r\n  components: Record<string, Schema.Component>\r\n) => {\r\n  const cleanedData = removeFields(data, [\r\n    'createdAt',\r\n    'createdBy',\r\n    'updatedAt',\r\n    'updatedBy',\r\n    'id',\r\n    'documentId',\r\n    'publishedAt',\r\n    'strapi_stage',\r\n    'strapi_assignee',\r\n    'locale',\r\n    'status',\r\n  ]);\r\n\r\n  const cleanedDataWithoutPasswordAndRelation = recursiveRemoveFieldTypes(\r\n    cleanedData,\r\n    schema,\r\n    components,\r\n    ['relation', 'password']\r\n  );\r\n\r\n  return cleanedDataWithoutPasswordAndRelation;\r\n};\r\n\r\nconst removeFields = (data: Data, fields: Array<keyof Schema.ContentType['attributes']>) => {\r\n  return Object.keys(data).reduce((acc, current) => {\r\n    if (fields.includes(current)) {\r\n      return acc;\r\n    }\r\n    acc[current] = data[current];\r\n    return acc;\r\n  }, {} as Data);\r\n};\r\n\r\nconst recursiveRemoveFieldTypes = (\r\n  data: Data,\r\n  schema: Schema.Schema,\r\n  components: Record<string, Schema.Component>,\r\n  fields: Array<keyof Schema.ContentType['attributes']>\r\n) => {\r\n  return Object.keys(data).reduce((acc, current) => {\r\n    const attribute = schema.attributes[current] ?? { type: undefined };\r\n\r\n    if (fields.includes(attribute.type)) {\r\n      return acc;\r\n    }\r\n\r\n    if (attribute.type === 'dynamiczone') {\r\n      acc[current] = data[current].map((componentValue: any, index: number) => {\r\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\r\n          componentValue,\r\n          components[componentValue.__component],\r\n          components,\r\n          fields\r\n        );\r\n\r\n        return {\r\n          ...rest,\r\n          __temp_key__: index + 1,\r\n        };\r\n      });\r\n    } else if (attribute.type === 'component') {\r\n      const { repeatable, component } = attribute;\r\n\r\n      if (repeatable) {\r\n        acc[current] = (data[current] ?? []).map((compoData: any, index: number) => {\r\n          const { id: _, ...rest } = recursiveRemoveFieldTypes(\r\n            compoData,\r\n            components[component],\r\n            components,\r\n            fields\r\n          );\r\n\r\n          return {\r\n            ...rest,\r\n            __temp_key__: index + 1,\r\n          };\r\n        });\r\n      } else {\r\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\r\n          data[current] ?? {},\r\n          components[component],\r\n          components,\r\n          fields\r\n        );\r\n\r\n        acc[current] = rest;\r\n      }\r\n    } else {\r\n      acc[current] = data[current];\r\n    }\r\n\r\n    return acc;\r\n  }, {} as any);\r\n};\r\n\r\nexport { cleanData };\r\n","import * as React from 'react';\r\n\r\nimport { FormErrors, Table, useTable } from '@strapi/admin/strapi-admin';\r\nimport { Box, Typography, IconButton, Flex, Tooltip, Status, Modal } from '@strapi/design-system';\r\nimport { Pencil, CheckCircle, CrossCircle, ArrowsCounterClockwise } from '@strapi/icons';\r\nimport { Modules } from '@strapi/types';\r\nimport { stringify } from 'qs';\r\nimport { type MessageDescriptor, useIntl, PrimitiveType } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Locale } from '../../../shared/contracts/locales';\r\nimport { getTranslation } from '../utils/getTranslation';\r\nimport { capitalize } from '../utils/strings';\r\n\r\nimport { LocaleStatus } from './CMHeaderActions';\r\n\r\ntype Status = Modules.Documents.Params.PublicationStatus.Kind | 'modified';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EntryValidationText\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EntryValidationTextProps {\r\n  status: Status;\r\n  validationErrors: FormErrors[string] | null;\r\n  action: 'bulk-publish' | 'bulk-unpublish';\r\n}\r\n\r\ninterface TranslationMessage extends MessageDescriptor {\r\n  values?: Record<string, PrimitiveType>;\r\n}\r\n\r\nconst isErrorMessageDescriptor = (object?: string | object): object is TranslationMessage => {\r\n  return (\r\n    typeof object === 'object' && object !== null && 'id' in object && 'defaultMessage' in object\r\n  );\r\n};\r\n\r\nconst EntryValidationText = ({\r\n  status = 'draft',\r\n  validationErrors,\r\n  action,\r\n}: EntryValidationTextProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  /**\r\n   * TODO: Should this be extracted an made into a factory to recursively get\r\n   * error messages??\r\n   */\r\n  const getErrorStr = (key: string, value?: FormErrors[string]): string => {\r\n    if (typeof value === 'string') {\r\n      return `${key}: ${value}`;\r\n    } else if (isErrorMessageDescriptor(value)) {\r\n      return `${key}: ${formatMessage(value)}`;\r\n    } else if (Array.isArray(value)) {\r\n      return value.map((v) => getErrorStr(key, v)).join(' ');\r\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\r\n      return Object.entries(value)\r\n        .map(([k, v]) => getErrorStr(k, v))\r\n        .join(' ');\r\n    } else {\r\n      /**\r\n       * unlikely to happen, but we need to return something\r\n       */\r\n      return '';\r\n    }\r\n  };\r\n\r\n  if (validationErrors) {\r\n    const validationErrorsMessages = Object.entries(validationErrors)\r\n      .map(([key, value]) => {\r\n        return getErrorStr(key, value);\r\n      })\r\n      .join(' ');\r\n\r\n    return (\r\n      <Flex gap={2}>\r\n        <CrossCircle fill=\"danger600\" />\r\n        <Tooltip label={validationErrorsMessages}>\r\n          <Typography\r\n            maxWidth={'30rem'}\r\n            textColor=\"danger600\"\r\n            variant=\"omega\"\r\n            fontWeight=\"semiBold\"\r\n            ellipsis\r\n          >\r\n            {validationErrorsMessages}\r\n          </Typography>\r\n        </Tooltip>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  const getStatusMessage = () => {\r\n    if (action === 'bulk-publish') {\r\n      if (status === 'published') {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'content-manager.bulk-publish.already-published',\r\n            defaultMessage: 'Already Published',\r\n          }),\r\n          textColor: 'success600',\r\n          fontWeight: 'bold',\r\n        };\r\n      } else if (status === 'modified') {\r\n        return {\r\n          icon: <ArrowsCounterClockwise fill=\"alternative600\" />,\r\n          text: formatMessage({\r\n            id: 'app.utils.ready-to-publish-changes',\r\n            defaultMessage: 'Ready to publish changes',\r\n          }),\r\n        };\r\n      } else {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'app.utils.ready-to-publish',\r\n            defaultMessage: 'Ready to publish',\r\n          }),\r\n        };\r\n      }\r\n    } else {\r\n      if (status === 'draft') {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'content-manager.bulk-unpublish.already-unpublished',\r\n            defaultMessage: 'Already Unpublished',\r\n          }),\r\n          textColor: 'success600',\r\n          fontWeight: 'bold',\r\n        };\r\n      } else {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'app.utils.ready-to-unpublish-changes',\r\n            defaultMessage: 'Ready to unpublish',\r\n          }),\r\n          textColor: 'success600',\r\n          fontWeight: 'bold',\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  const { icon, text, textColor = 'success600', fontWeight = 'normal' } = getStatusMessage();\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      {icon}\r\n      <Typography textColor={textColor} fontWeight={fontWeight}>\r\n        {text}\r\n      </Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BoldChunk\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocaleActionModal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface BulkLocaleActionModalProps {\r\n  rows: LocaleStatus[];\r\n  headers: {\r\n    label: string;\r\n    name: string;\r\n  }[];\r\n  localesMetadata: Locale[];\r\n  validationErrors?: FormErrors;\r\n  action: 'bulk-publish' | 'bulk-unpublish';\r\n}\r\n\r\nconst BulkLocaleActionModal = ({\r\n  headers,\r\n  rows,\r\n  localesMetadata,\r\n  validationErrors = {},\r\n  action,\r\n}: BulkLocaleActionModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const selectedRows = useTable<LocaleStatus[]>(\r\n    'BulkLocaleActionModal',\r\n    (state) => state.selectedRows\r\n  );\r\n\r\n  const getFormattedCountMessage = () => {\r\n    const currentStatusByLocale = rows.reduce<Record<string, string>>((acc, { locale, status }) => {\r\n      acc[locale] = status;\r\n      return acc;\r\n    }, {});\r\n    const localesWithErrors = Object.keys(validationErrors);\r\n\r\n    const publishedCount = selectedRows.filter(\r\n      ({ locale }) => currentStatusByLocale[locale] === 'published'\r\n    ).length;\r\n\r\n    const draftCount = selectedRows.filter(\r\n      ({ locale }) =>\r\n        (currentStatusByLocale[locale] === 'draft' ||\r\n          currentStatusByLocale[locale] === 'modified') &&\r\n        !localesWithErrors.includes(locale)\r\n    ).length;\r\n\r\n    const withErrorsCount = localesWithErrors.length;\r\n    const messageId =\r\n      action === 'bulk-publish'\r\n        ? 'content-manager.containers.list.selectedEntriesModal.selectedCount.publish'\r\n        : 'content-manager.containers.list.selectedEntriesModal.selectedCount.unpublish';\r\n\r\n    const defaultMessage =\r\n      action === 'bulk-publish'\r\n        ? '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.'\r\n        : '<b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} already unpublished. <b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} ready to unpublish.';\r\n\r\n    return formatMessage(\r\n      {\r\n        id: messageId,\r\n        defaultMessage,\r\n      },\r\n      {\r\n        withErrorsCount,\r\n        draftCount,\r\n        publishedCount,\r\n        b: BoldChunk,\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal.Body>\r\n      <Typography>{getFormattedCountMessage()}</Typography>\r\n      <Box marginTop={5}>\r\n        <Table.Content>\r\n          <Table.Head>\r\n            <Table.HeaderCheckboxCell />\r\n            {headers.map((head) => (\r\n              <Table.HeaderCell key={head.name} {...head} />\r\n            ))}\r\n          </Table.Head>\r\n          <Table.Body>\r\n            {rows.map(({ locale, status }, index) => {\r\n              const error = validationErrors?.[locale] ?? null;\r\n\r\n              const statusVariant =\r\n                status === 'draft' ? 'primary' : status === 'published' ? 'success' : 'alternative';\r\n\r\n              return (\r\n                <Table.Row key={index}>\r\n                  <Table.CheckboxCell id={locale} aria-label={`Select ${locale}`} />\r\n                  <Table.Cell>\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {Array.isArray(localesMetadata)\r\n                        ? localesMetadata.find((localeEntry) => localeEntry.code === locale)?.name\r\n                        : locale}\r\n                    </Typography>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <Box display=\"flex\">\r\n                      <Status\r\n                        display=\"flex\"\r\n                        paddingLeft=\"6px\"\r\n                        paddingRight=\"6px\"\r\n                        paddingTop=\"2px\"\r\n                        paddingBottom=\"2px\"\r\n                        size={'S'}\r\n                        variant={statusVariant}\r\n                      >\r\n                        <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\r\n                          {capitalize(status)}\r\n                        </Typography>\r\n                      </Status>\r\n                    </Box>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <EntryValidationText validationErrors={error} status={status} action={action} />\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <IconButton\r\n                      tag={Link}\r\n                      to={{\r\n                        search: stringify({ plugins: { i18n: { locale } } }),\r\n                      }}\r\n                      label={formatMessage(\r\n                        {\r\n                          id: getTranslation('Settings.list.actions.edit'),\r\n                          defaultMessage: 'Edit {name} locale',\r\n                        },\r\n                        {\r\n                          name: locale,\r\n                        }\r\n                      )}\r\n                      variant=\"ghost\"\r\n                    >\r\n                      <Pencil />\r\n                    </IconButton>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              );\r\n            })}\r\n          </Table.Body>\r\n        </Table.Content>\r\n      </Box>\r\n    </Modal.Body>\r\n  );\r\n};\r\n\r\nexport { BulkLocaleActionModal };\r\nexport type { BulkLocaleActionModalProps };\r\n","import * as React from 'react';\r\n\r\nimport { skipToken } from '@reduxjs/toolkit/query';\r\nimport {\r\n  useNotification,\r\n  useQueryParams,\r\n  Table,\r\n  useAPIErrorHandler,\r\n  FormErrors,\r\n  useForm,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  type DocumentActionComponent,\r\n  type DocumentActionProps,\r\n  unstable_useDocument as useDocument,\r\n  unstable_useDocumentActions as useDocumentActions,\r\n  buildValidParams,\r\n  HeaderActionProps,\r\n} from '@strapi/content-manager/strapi-admin';\r\nimport {\r\n  Flex,\r\n  Status,\r\n  Typography,\r\n  Button,\r\n  Modal,\r\n  Field,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Dialog,\r\n  type StatusVariant,\r\n} from '@strapi/design-system';\r\nimport { WarningCircle, ListPlus, Trash, Download, Cross, Plus } from '@strapi/icons';\r\nimport { Modules } from '@strapi/types';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useI18n } from '../hooks/useI18n';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\nimport { useGetManyDraftRelationCountQuery } from '../services/relations';\r\nimport { cleanData } from '../utils/clean';\r\nimport { getTranslation } from '../utils/getTranslation';\r\nimport { capitalize } from '../utils/strings';\r\n\r\nimport { BulkLocaleActionModal } from './BulkLocaleActionModal';\r\n\r\nimport type { Locale } from '../../../shared/contracts/locales';\r\nimport type { I18nBaseQuery } from '../types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LocalePickerAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface LocaleOptionProps {\r\n  isDraftAndPublishEnabled: boolean;\r\n  locale: Locale;\r\n  status: 'draft' | 'published' | 'modified';\r\n  entryExists: boolean;\r\n}\r\n\r\nconst statusVariants: Record<LocaleOptionProps['status'], StatusVariant> = {\r\n  draft: 'secondary',\r\n  published: 'success',\r\n  modified: 'alternative',\r\n};\r\n\r\nconst LocaleOption = ({\r\n  isDraftAndPublishEnabled,\r\n  locale,\r\n  status,\r\n  entryExists,\r\n}: LocaleOptionProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!entryExists) {\r\n    return formatMessage(\r\n      {\r\n        id: getTranslation('CMEditViewLocalePicker.locale.create'),\r\n        defaultMessage: 'Create <bold>{locale}</bold> locale',\r\n      },\r\n      {\r\n        bold: (locale: React.ReactNode) => <b>{locale}</b>,\r\n        locale: locale.name,\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex width=\"100%\" gap={1} justifyContent=\"space-between\">\r\n      <Typography>{locale.name}</Typography>\r\n      {isDraftAndPublishEnabled ? (\r\n        <Status\r\n          display=\"flex\"\r\n          paddingLeft=\"6px\"\r\n          paddingRight=\"6px\"\r\n          paddingTop=\"2px\"\r\n          paddingBottom=\"2px\"\r\n          size=\"S\"\r\n          variant={statusVariants[status]}\r\n        >\r\n          <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\r\n            {capitalize(status)}\r\n          </Typography>\r\n        </Status>\r\n      ) : null}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst LocalePickerAction = ({\r\n  document,\r\n  meta,\r\n  model,\r\n  collectionType,\r\n  documentId,\r\n}: HeaderActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>();\r\n  const { hasI18n, canCreate, canRead } = useI18n();\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n  const { schema } = useDocument({\r\n    model,\r\n    collectionType,\r\n    documentId,\r\n    params: { locale: currentDesiredLocale },\r\n  });\r\n\r\n  const handleSelect = React.useCallback(\r\n    (value: string) => {\r\n      setQuery({\r\n        plugins: {\r\n          ...query.plugins,\r\n          i18n: {\r\n            locale: value,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    [query.plugins, setQuery]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!Array.isArray(locales) || !hasI18n) {\r\n      return;\r\n    }\r\n    /**\r\n     * Handle the case where the current locale query param doesn't exist\r\n     * in the list of available locales, so we redirect to the default locale.\r\n     */\r\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\r\n    const defaultLocale = locales.find((locale) => locale.isDefault);\r\n    if (!doesLocaleExist && defaultLocale?.code) {\r\n      handleSelect(defaultLocale.code);\r\n    }\r\n  }, [handleSelect, hasI18n, locales, currentDesiredLocale]);\r\n\r\n  const currentLocale = Array.isArray(locales)\r\n    ? locales.find((locale) => locale.code === currentDesiredLocale)\r\n    : undefined;\r\n\r\n  const allCurrentLocales = [\r\n    { status: getDocumentStatus(document, meta), locale: currentLocale?.code },\r\n    ...(meta?.availableLocales ?? []),\r\n  ];\r\n\r\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const displayedLocales = locales.filter((locale) => {\r\n    /**\r\n     * If you can read we allow you to see the locale exists\r\n     * otherwise the locale is hidden.\r\n     */\r\n    return canRead.includes(locale.code);\r\n  });\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: getTranslation('Settings.locales.modal.locales.label'),\r\n      defaultMessage: 'Locales',\r\n    }),\r\n    options: displayedLocales.map((locale) => {\r\n      const entryWithLocaleExists = allCurrentLocales.some((doc) => doc.locale === locale.code);\r\n\r\n      const currentLocaleDoc = allCurrentLocales.find((doc) =>\r\n        'locale' in doc ? doc.locale === locale.code : false\r\n      );\r\n\r\n      const permissionsToCheck = currentLocaleDoc ? canRead : canCreate;\r\n\r\n      return {\r\n        disabled: !permissionsToCheck.includes(locale.code),\r\n        value: locale.code,\r\n        label: (\r\n          <LocaleOption\r\n            isDraftAndPublishEnabled={!!schema?.options?.draftAndPublish}\r\n            locale={locale}\r\n            status={currentLocaleDoc?.status}\r\n            entryExists={entryWithLocaleExists}\r\n          />\r\n        ),\r\n        startIcon: !entryWithLocaleExists ? <Plus /> : null,\r\n      };\r\n    }),\r\n    customizeContent: () => currentLocale?.name,\r\n    onSelect: handleSelect,\r\n    value: currentLocale,\r\n  };\r\n};\r\n\r\ntype UseDocument = typeof useDocument;\r\n\r\nconst getDocumentStatus = (\r\n  document: ReturnType<UseDocument>['document'],\r\n  meta: ReturnType<UseDocument>['meta']\r\n): 'draft' | 'published' | 'modified' => {\r\n  const docStatus = document?.status;\r\n  const statuses = meta?.availableStatus ?? [];\r\n\r\n  /**\r\n   * Creating an entry\r\n   */\r\n  if (!docStatus) {\r\n    return 'draft';\r\n  }\r\n\r\n  /**\r\n   * We're viewing a draft, but the document could have a published version\r\n   */\r\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\r\n    return 'published';\r\n  }\r\n\r\n  return docStatus;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * FillFromAnotherLocaleAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst FillFromAnotherLocaleAction = ({\r\n  documentId,\r\n  meta,\r\n  model,\r\n  collectionType,\r\n}: HeaderActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\r\n  const { hasI18n } = useI18n();\r\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n  const [localeSelected, setLocaleSelected] = React.useState<string | null>(null);\r\n  const setValues = useForm('FillFromAnotherLocale', (state) => state.setValues);\r\n\r\n  const { getDocument } = useDocumentActions();\r\n  const { schema, components } = useDocument({\r\n    model,\r\n    documentId,\r\n    collectionType,\r\n    params: { locale: currentDesiredLocale },\r\n  });\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n\r\n  const availableLocales = Array.isArray(locales)\r\n    ? locales.filter((locale) => meta?.availableLocales.some((l) => l.locale === locale.code))\r\n    : [];\r\n\r\n  const fillFromLocale = (onClose: () => void) => async () => {\r\n    const response = await getDocument({\r\n      collectionType,\r\n      model,\r\n      documentId,\r\n      params: { locale: localeSelected },\r\n    });\r\n    if (!response || !schema) {\r\n      return;\r\n    }\r\n\r\n    const { data } = response;\r\n\r\n    const cleanedData = cleanData(data, schema, components);\r\n\r\n    setValues(cleanedData);\r\n\r\n    onClose();\r\n  };\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    type: 'icon',\r\n    icon: <Download />,\r\n    disabled: availableLocales.length === 0,\r\n    label: formatMessage({\r\n      id: getTranslation('CMEditViewCopyLocale.copy-text'),\r\n      defaultMessage: 'Fill in from another locale',\r\n    }),\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: getTranslation('CMEditViewCopyLocale.dialog.title'),\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: ({ onClose }: { onClose: () => void }) => (\r\n        <>\r\n          <Dialog.Body>\r\n            <Flex direction=\"column\" gap={3}>\r\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n              <Typography textAlign=\"center\">\r\n                {formatMessage({\r\n                  id: getTranslation('CMEditViewCopyLocale.dialog.body'),\r\n                  defaultMessage:\r\n                    'Your current content will be erased and filled by the content of the selected locale:',\r\n                })}\r\n              </Typography>\r\n              <Field.Root width=\"100%\">\r\n                <Field.Label>\r\n                  {formatMessage({\r\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.label'),\r\n                    defaultMessage: 'Locale',\r\n                  })}\r\n                </Field.Label>\r\n                <SingleSelect\r\n                  value={localeSelected}\r\n                  placeholder={formatMessage({\r\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.placeholder'),\r\n                    defaultMessage: 'Select one locale...',\r\n                  })}\r\n                  // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\r\n                  onChange={(value) => setLocaleSelected(value)}\r\n                >\r\n                  {availableLocales.map((locale) => (\r\n                    <SingleSelectOption key={locale.code} value={locale.code}>\r\n                      {locale.name}\r\n                    </SingleSelectOption>\r\n                  ))}\r\n                </SingleSelect>\r\n              </Field.Root>\r\n            </Flex>\r\n          </Dialog.Body>\r\n          <Dialog.Footer>\r\n            <Flex gap={2} width=\"100%\">\r\n              <Button flex=\"auto\" variant=\"tertiary\" onClick={onClose}>\r\n                {formatMessage({\r\n                  id: getTranslation('CMEditViewCopyLocale.cancel-text'),\r\n                  defaultMessage: 'No, cancel',\r\n                })}\r\n              </Button>\r\n              <Button flex=\"auto\" variant=\"success\" onClick={fillFromLocale(onClose)}>\r\n                {formatMessage({\r\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\r\n                  defaultMessage: 'Yes, fill in',\r\n                })}\r\n              </Button>\r\n            </Flex>\r\n          </Dialog.Footer>\r\n        </>\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DeleteLocaleAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst DeleteLocaleAction: DocumentActionComponent = ({\r\n  document,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const { delete: deleteAction } = useDocumentActions();\r\n  const { hasI18n, canDelete } = useI18n();\r\n\r\n  // Get the current locale object, using the URL instead of document so it works while creating\r\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n  const locale = !('error' in locales) && locales.find((loc) => loc.code === currentDesiredLocale);\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    disabled:\r\n      (document?.locale && !canDelete.includes(document.locale)) || !document || !document.id,\r\n    position: ['header', 'table-row'],\r\n    label: formatMessage(\r\n      {\r\n        id: getTranslation('actions.delete.label'),\r\n        defaultMessage: 'Delete entry ({locale})',\r\n      },\r\n      { locale: locale && locale.name }\r\n    ),\r\n    icon: <StyledTrash />,\r\n    variant: 'danger',\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: getTranslation('actions.delete.dialog.title'),\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: (\r\n        <Flex direction=\"column\" gap={2}>\r\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\r\n            {formatMessage({\r\n              id: getTranslation('actions.delete.dialog.body'),\r\n              defaultMessage: 'Are you sure?',\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n      ),\r\n      onConfirm: async () => {\r\n        const unableToDelete =\r\n          // We are unable to delete a collection type without a document ID\r\n          // & unable to delete generally if there is no document locale\r\n          (collectionType !== 'single-types' && !documentId) || !document?.locale;\r\n\r\n        if (unableToDelete) {\r\n          console.error(\r\n            \"You're trying to delete a document without an id or locale, this is likely a bug with Strapi. Please open an issue.\"\r\n          );\r\n\r\n          toggleNotification({\r\n            message: formatMessage({\r\n              id: getTranslation('actions.delete.error'),\r\n              defaultMessage: 'An error occurred while trying to delete the document locale.',\r\n            }),\r\n            type: 'danger',\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        const res = await deleteAction({\r\n          documentId,\r\n          model,\r\n          collectionType,\r\n          params: { locale: document.locale },\r\n        });\r\n\r\n        if (!('error' in res)) {\r\n          navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\r\n        }\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport type LocaleStatus = {\r\n  locale: string;\r\n  status: Modules.Documents.Params.PublicationStatus.Kind | 'modified';\r\n};\r\n\r\ninterface ExtendedDocumentActionProps extends DocumentActionProps {\r\n  action?: 'bulk-publish' | 'bulk-unpublish';\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocaleAction\r\n *\r\n * This component is used to handle bulk publish and unpublish actions on locales.\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BulkLocaleAction: DocumentActionComponent = ({\r\n  document: baseDocument,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n  action,\r\n}: ExtendedDocumentActionProps) => {\r\n  const baseLocale = baseDocument?.locale ?? null;\r\n\r\n  const [{ query }] = useQueryParams<{ status: 'draft' | 'published' }>();\r\n\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n  const isOnPublishedTab = query.status === 'published';\r\n\r\n  const { formatMessage } = useIntl();\r\n  const { hasI18n, canPublish } = useI18n();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const [selectedRows, setSelectedRows] = React.useState<any[]>([]);\r\n  const [isDraftRelationConfirmationOpen, setIsDraftRelationConfirmationOpen] =\r\n    React.useState<boolean>(false);\r\n\r\n  const { publishMany: publishManyAction, unpublishMany: unpublishManyAction } =\r\n    useDocumentActions();\r\n\r\n  const {\r\n    document,\r\n    meta: documentMeta,\r\n    schema,\r\n    validate,\r\n  } = useDocument(\r\n    {\r\n      model,\r\n      collectionType,\r\n      documentId,\r\n      params: {\r\n        locale: baseLocale,\r\n      },\r\n    },\r\n    {\r\n      skip: !hasI18n || !baseLocale,\r\n    }\r\n  );\r\n\r\n  const { data: localesMetadata = [] } = useGetLocalesQuery(hasI18n ? undefined : skipToken);\r\n\r\n  const headers = [\r\n    {\r\n      label: formatMessage({\r\n        id: 'global.name',\r\n        defaultMessage: 'Name',\r\n      }),\r\n      name: 'name',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: getTranslation('CMEditViewBulkLocale.status'),\r\n        defaultMessage: 'Status',\r\n      }),\r\n      name: 'status',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: getTranslation('CMEditViewBulkLocale.publication-status'),\r\n        defaultMessage: 'Publication Status',\r\n      }),\r\n      name: 'publication-status',\r\n    },\r\n  ];\r\n\r\n  // Extract the rows for the bulk locale publish modal and any validation\r\n  // errors per locale\r\n  const [rows, validationErrors] = React.useMemo(() => {\r\n    if (!document || !documentMeta?.availableLocales) {\r\n      // If we don't have a document or available locales, we return empty rows\r\n      // and no validation errors\r\n      return [[], {}];\r\n    }\r\n\r\n    // Build the rows for the bulk locale publish modal by combining the current\r\n    // document with all the available locales from the document meta\r\n    const rowsFromMeta: LocaleStatus[] = documentMeta?.availableLocales.map((doc) => {\r\n      const { locale, status } = doc;\r\n\r\n      return { locale, status };\r\n    });\r\n\r\n    rowsFromMeta.unshift({\r\n      locale: document.locale,\r\n      status: document.status,\r\n    });\r\n\r\n    // Build the validation errors for each locale.\r\n    const allDocuments = [document, ...(documentMeta?.availableLocales ?? [])];\r\n    const errors = allDocuments.reduce<FormErrors>((errs, document) => {\r\n      if (!document) {\r\n        return errs;\r\n      }\r\n\r\n      // Validate each locale entry via the useDocument validate function and store any errors in a dictionary\r\n      const validation = validate(document as Modules.Documents.AnyDocument);\r\n      if (validation !== null) {\r\n        errs[document.locale] = validation;\r\n      }\r\n      return errs;\r\n    }, {});\r\n\r\n    return [rowsFromMeta, errors];\r\n  }, [document, documentMeta?.availableLocales, validate]);\r\n\r\n  const isBulkPublish = action === 'bulk-publish';\r\n  const localesForAction = selectedRows.reduce((acc: string[], selectedRow: LocaleStatus) => {\r\n    const isValidLocale =\r\n      // Validation errors are irrelevant if we are trying to unpublish\r\n      !isBulkPublish || !Object.keys(validationErrors).includes(selectedRow.locale);\r\n\r\n    const shouldAddLocale = isBulkPublish\r\n      ? selectedRow.status !== 'published' && isValidLocale\r\n      : selectedRow.status !== 'draft' && isValidLocale;\r\n\r\n    if (shouldAddLocale) {\r\n      acc.push(selectedRow.locale);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\r\n  // see https://www.notion.so/strapi/Count-draft-relations-56901b492efb45ab90d42fe975b32bd8?pvs=4\r\n  const enableDraftRelationsCount = false;\r\n  const {\r\n    data: draftRelationsCount = 0,\r\n    isLoading: isDraftRelationsLoading,\r\n    error: isDraftRelationsError,\r\n  } = useGetManyDraftRelationCountQuery(\r\n    {\r\n      model,\r\n      documentIds: [documentId!],\r\n      locale: localesForAction,\r\n    },\r\n    {\r\n      skip: !enableDraftRelationsCount || !documentId || localesForAction.length === 0,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (isDraftRelationsError) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(isDraftRelationsError),\r\n      });\r\n    }\r\n  }, [isDraftRelationsError, toggleNotification, formatAPIError]);\r\n\r\n  if (!schema?.options?.draftAndPublish) {\r\n    return null;\r\n  }\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  if (!documentId) {\r\n    return null;\r\n  }\r\n\r\n  // This document action can be enabled given that draft and publish and i18n are\r\n  // enabled and we can publish the current locale.\r\n\r\n  const publish = async () => {\r\n    await publishManyAction({\r\n      model,\r\n      documentIds: [documentId],\r\n      params: {\r\n        ...params,\r\n        locale: localesForAction,\r\n      },\r\n    });\r\n\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  const unpublish = async () => {\r\n    await unpublishManyAction({\r\n      model,\r\n      documentIds: [documentId],\r\n      params: {\r\n        ...params,\r\n        locale: localesForAction,\r\n      },\r\n    });\r\n\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  const handleAction = async () => {\r\n    if (draftRelationsCount > 0) {\r\n      setIsDraftRelationConfirmationOpen(true);\r\n    } else if (isBulkPublish) {\r\n      await publish();\r\n    } else {\r\n      await unpublish();\r\n    }\r\n  };\r\n\r\n  if (isDraftRelationConfirmationOpen) {\r\n    return {\r\n      label: formatMessage({\r\n        id: 'app.components.ConfirmDialog.title',\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      variant: 'danger',\r\n      dialog: {\r\n        onCancel: () => {\r\n          setIsDraftRelationConfirmationOpen(false);\r\n        },\r\n        onConfirm: async () => {\r\n          await publish();\r\n\r\n          setIsDraftRelationConfirmationOpen(false);\r\n        },\r\n        type: 'dialog',\r\n        title: formatMessage({\r\n          id: getTranslation('actions.publish.dialog.title'),\r\n          defaultMessage: 'Confirmation',\r\n        }),\r\n        content: (\r\n          <Flex direction=\"column\" alignItems=\"center\" gap={2}>\r\n            <WarningCircle width=\"2.4rem\" height=\"2.4rem\" fill=\"danger600\" />\r\n            <Typography textAlign=\"center\">\r\n              {formatMessage({\r\n                id: getTranslation('CMEditViewBulkLocale.draft-relation-warning'),\r\n                defaultMessage:\r\n                  'Some locales are related to draft entries. Publishing them could leave broken links in your app.',\r\n              })}\r\n            </Typography>\r\n            <Typography textAlign=\"center\">\r\n              {formatMessage({\r\n                id: getTranslation('CMEditViewBulkLocale.continue-confirmation'),\r\n                defaultMessage: 'Are you sure you want to continue?',\r\n              })}\r\n            </Typography>\r\n          </Flex>\r\n        ),\r\n      },\r\n    };\r\n  }\r\n\r\n  const hasPermission = selectedRows\r\n    .map(({ locale }) => locale)\r\n    .every((locale) => canPublish.includes(locale));\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\r\n      defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\r\n    }),\r\n    variant: isBulkPublish ? 'secondary' : 'danger',\r\n    icon: isBulkPublish ? <ListPlus /> : <Cross />,\r\n    disabled: isOnPublishedTab || canPublish.length === 0,\r\n    position: ['panel'],\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\r\n        defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\r\n      }),\r\n      content: () => {\r\n        return (\r\n          <Table.Root\r\n            headers={headers}\r\n            rows={rows.map((row) => ({\r\n              ...row,\r\n              id: row.locale,\r\n            }))}\r\n            selectedRows={selectedRows}\r\n            onSelectedRowsChange={(tableSelectedRows) => setSelectedRows(tableSelectedRows)}\r\n          >\r\n            <BulkLocaleActionModal\r\n              validationErrors={validationErrors}\r\n              headers={headers}\r\n              rows={rows}\r\n              localesMetadata={localesMetadata as Locale[]}\r\n              action={action ?? 'bulk-publish'}\r\n            />\r\n          </Table.Root>\r\n        );\r\n      },\r\n      footer: () => (\r\n        <Modal.Footer justifyContent=\"flex-end\">\r\n          <Button\r\n            loading={isDraftRelationsLoading}\r\n            disabled={!hasPermission || localesForAction.length === 0}\r\n            variant=\"default\"\r\n            onClick={handleAction}\r\n          >\r\n            {formatMessage({\r\n              id: isBulkPublish ? 'app.utils.publish' : 'app.utils.unpublish',\r\n              defaultMessage: isBulkPublish ? 'Publish' : 'Unpublish',\r\n            })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocalePublishAction\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst BulkLocalePublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\r\n  return BulkLocaleAction({ action: 'bulk-publish', ...props });\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocaleUnpublishAction\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst BulkLocaleUnpublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\r\n  return BulkLocaleAction({ action: 'bulk-unpublish', ...props });\r\n};\r\n\r\n/**\r\n * Because the icon system is completely broken, we have to do\r\n * this to remove the fill from the cog.\r\n */\r\nconst StyledTrash = styled(Trash)`\r\n  path {\r\n    fill: currentColor;\r\n  }\r\n`;\r\n\r\nexport {\r\n  BulkLocalePublishAction,\r\n  BulkLocaleUnpublishAction,\r\n  DeleteLocaleAction,\r\n  LocalePickerAction,\r\n  FillFromAnotherLocaleAction,\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useI18n } from '../hooks/useI18n';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nconst Emphasis = (chunks: React.ReactNode) => {\r\n  return (\r\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\r\n      {chunks}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst DeleteModalAdditionalInfo = () => {\r\n  const { hasI18n } = useI18n();\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"danger500\">\r\n      {formatMessage(\r\n        {\r\n          id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\r\n          defaultMessage:\r\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\r\n        },\r\n        {\r\n          em: Emphasis,\r\n        }\r\n      )}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst PublishModalAdditionalInfo = () => {\r\n  const { hasI18n } = useI18n();\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"danger500\">\r\n      {formatMessage(\r\n        {\r\n          id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\r\n          defaultMessage:\r\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\r\n        },\r\n        {\r\n          em: Emphasis,\r\n        }\r\n      )}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst UnpublishModalAdditionalInfo = () => {\r\n  const { hasI18n } = useI18n();\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"danger500\">\r\n      {formatMessage(\r\n        {\r\n          id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\r\n          defaultMessage:\r\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\r\n        },\r\n        {\r\n          em: Emphasis,\r\n        }\r\n      )}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport { DeleteModalAdditionalInfo, PublishModalAdditionalInfo, UnpublishModalAdditionalInfo };\r\n","import * as React from 'react';\r\n\r\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { SingleSelect, SingleSelectOption } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useI18n } from '../hooks/useI18n';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { I18nBaseQuery } from '../types';\r\n\r\ninterface Query extends I18nBaseQuery {\r\n  page?: number;\r\n}\r\n\r\nconst LocalePicker = () => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }, setQuery] = useQueryParams<Query>();\r\n\r\n  const { hasI18n, canRead, canCreate } = useI18n();\r\n  const { data: locales = [] } = useGetLocalesQuery(undefined, {\r\n    skip: !hasI18n,\r\n  });\r\n\r\n  const handleChange = React.useCallback(\r\n    (code: string, replace = false) => {\r\n      setQuery(\r\n        {\r\n          page: 1,\r\n          plugins: { ...query.plugins, i18n: { locale: code } },\r\n        },\r\n        'push',\r\n        replace\r\n      );\r\n    },\r\n    [query.plugins, setQuery]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!Array.isArray(locales) || !hasI18n) {\r\n      return;\r\n    }\r\n    /**\r\n     * Handle the case where the current locale query param doesn't exist\r\n     * in the list of available locales, so we redirect to the default locale.\r\n     */\r\n    const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\r\n    const defaultLocale = locales.find((locale) => locale.isDefault);\r\n    if (!doesLocaleExist && defaultLocale?.code) {\r\n      handleChange(defaultLocale.code, true);\r\n    }\r\n  }, [hasI18n, handleChange, locales, query.plugins?.i18n?.locale]);\r\n\r\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const displayedLocales = locales.filter((locale) => {\r\n    /**\r\n     * If you can create or read we allow you to see the locale exists\r\n     * this is because in the ListView, you may be able to create a new entry\r\n     * in a locale you can't read.\r\n     */\r\n    return canCreate.includes(locale.code) || canRead.includes(locale.code);\r\n  });\r\n\r\n  return (\r\n    <SingleSelect\r\n      size=\"S\"\r\n      aria-label={formatMessage({\r\n        id: getTranslation('actions.select-locale'),\r\n        defaultMessage: 'Select locale',\r\n      })}\r\n      value={query.plugins?.i18n?.locale || locales.find((locale) => locale.isDefault)?.code}\r\n      // @ts-expect-error – This can be removed in V2 of the DS.\r\n      onChange={handleChange}\r\n    >\r\n      {displayedLocales.map((locale) => (\r\n        <SingleSelectOption key={locale.id} value={locale.code}>\r\n          {locale.name}\r\n        </SingleSelectOption>\r\n      ))}\r\n    </SingleSelect>\r\n  );\r\n};\r\n\r\nexport { LocalePicker };\r\n","export const PERMISSIONS = {\r\n  accessMain: [{ action: 'plugin::i18n.locale.read', subject: null }],\r\n  create: [{ action: 'plugin::i18n.locale.create', subject: null }],\r\n  delete: [{ action: 'plugin::i18n.locale.delete', subject: null }],\r\n  update: [{ action: 'plugin::i18n.locale.update', subject: null }],\r\n  read: [{ action: 'plugin::i18n.locale.read', subject: null }],\r\n};\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { Flex, VisuallyHidden } from '@strapi/design-system';\r\nimport { Earth, EarthStriked } from '@strapi/icons';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { EditFieldLayout, EditLayout } from '@strapi/content-manager/strapi-admin';\r\n\r\ninterface MutateEditViewArgs {\r\n  layout: EditLayout;\r\n}\r\n\r\nconst mutateEditViewHook = ({ layout }: MutateEditViewArgs): MutateEditViewArgs => {\r\n  // If i18n isn't explicitly enabled on the content type, then no field can be localized\r\n  if (\r\n    !('i18n' in layout.options) ||\r\n    (typeof layout.options.i18n === 'object' &&\r\n      layout.options.i18n !== null &&\r\n      'localized' in layout.options.i18n &&\r\n      !layout.options.i18n.localized)\r\n  ) {\r\n    return { layout };\r\n  }\r\n\r\n  const components = Object.entries(layout.components).reduce<EditLayout['components']>(\r\n    (acc, [key, componentLayout]) => {\r\n      return {\r\n        ...acc,\r\n        [key]: {\r\n          ...componentLayout,\r\n          layout: componentLayout.layout.map((row) => row.map(addLabelActionToField)),\r\n        },\r\n      };\r\n    },\r\n    {}\r\n  );\r\n\r\n  return {\r\n    layout: {\r\n      ...layout,\r\n      components,\r\n      layout: layout.layout.map((panel) => panel.map((row) => row.map(addLabelActionToField))),\r\n    },\r\n  } satisfies Pick<MutateEditViewArgs, 'layout'>;\r\n};\r\n\r\nconst addLabelActionToField = (field: EditFieldLayout) => {\r\n  const isFieldLocalized = doesFieldHaveI18nPluginOpt(field.attribute.pluginOptions)\r\n    ? field.attribute.pluginOptions.i18n.localized\r\n    : true || ['uid', 'relation'].includes(field.attribute.type);\r\n\r\n  const labelActionProps = {\r\n    title: {\r\n      id: isFieldLocalized\r\n        ? getTranslation('Field.localized')\r\n        : getTranslation('Field.not-localized'),\r\n      defaultMessage: isFieldLocalized\r\n        ? 'This value is unique for the selected locale'\r\n        : 'This value is the same across all locales',\r\n    },\r\n    icon: isFieldLocalized ? <Earth /> : <EarthStriked />,\r\n  };\r\n\r\n  return {\r\n    ...field,\r\n    labelAction: <LabelAction {...labelActionProps} />,\r\n  };\r\n};\r\n\r\nconst doesFieldHaveI18nPluginOpt = (\r\n  pluginOpts?: object\r\n): pluginOpts is { i18n: { localized: boolean } } => {\r\n  if (!pluginOpts) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    'i18n' in pluginOpts &&\r\n    typeof pluginOpts.i18n === 'object' &&\r\n    pluginOpts.i18n !== null &&\r\n    'localized' in pluginOpts.i18n\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LabelAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface LabelActionProps {\r\n  title: MessageDescriptor;\r\n  icon: React.ReactNode;\r\n}\r\n\r\nconst LabelAction = ({ title, icon }: LabelActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Span tag=\"span\">\r\n      <VisuallyHidden tag=\"span\">{formatMessage(title)}</VisuallyHidden>\r\n      {React.cloneElement(icon as React.ReactElement, {\r\n        'aria-hidden': true,\r\n        focusable: false, // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable\r\n      })}\r\n    </Span>\r\n  );\r\n};\r\n\r\nconst Span = styled(Flex)`\r\n  svg {\r\n    width: 12px;\r\n    height: 12px;\r\n\r\n    fill: ${({ theme }) => theme.colors.neutral500};\r\n\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n`;\r\n\r\nexport { mutateEditViewHook };\r\n","import { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\r\nimport { Box, Flex, Popover, Typography, useCollator, Button } from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Locale } from '../../../shared/contracts/locales';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\n\r\ninterface LocaleListCellProps {\r\n  documentId: string;\r\n  collectionType: string;\r\n  locale: string;\r\n  model: string;\r\n}\r\n\r\nconst LocaleListCell = ({\r\n  documentId,\r\n  locale: currentLocale,\r\n  collectionType,\r\n  model,\r\n}: LocaleListCellProps) => {\r\n  // TODO: avoid loading availableLocales for each row but get that from the BE\r\n  const { meta, isLoading } = useDocument({\r\n    documentId,\r\n    collectionType,\r\n    model,\r\n    params: {\r\n      locale: currentLocale,\r\n    },\r\n  });\r\n\r\n  const { locale: language } = useIntl();\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n  const formatter = useCollator(language, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  if (!Array.isArray(locales) || isLoading) {\r\n    return null;\r\n  }\r\n\r\n  const availableLocales = meta?.availableLocales.map((doc) => doc.locale) ?? [];\r\n  const localesForDocument = locales\r\n    .reduce<Locale[]>((acc, locale) => {\r\n      const createdLocale = [currentLocale, ...availableLocales].find((loc) => {\r\n        return loc === locale.code;\r\n      });\r\n\r\n      if (createdLocale) {\r\n        acc.push(locale);\r\n      }\r\n\r\n      return acc;\r\n    }, [])\r\n    .map((locale) => {\r\n      if (locale.isDefault) {\r\n        return `${locale.name} (default)`;\r\n      }\r\n\r\n      return locale.name;\r\n    })\r\n    .toSorted((a, b) => formatter.compare(a, b));\r\n\r\n  return (\r\n    <Popover.Root>\r\n      <Popover.Trigger>\r\n        <Button variant=\"ghost\" type=\"button\" onClick={(e) => e.stopPropagation()}>\r\n          <Flex minWidth=\"100%\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"regular\">\r\n            <Typography textColor=\"neutral800\" ellipsis marginRight={2}>\r\n              {localesForDocument.join(', ')}\r\n            </Typography>\r\n            <Flex>\r\n              <CaretDown width=\"1.2rem\" height=\"1.2rem\" />\r\n            </Flex>\r\n          </Flex>\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <Popover.Content sideOffset={16}>\r\n        <ul>\r\n          {localesForDocument.map((name) => (\r\n            <Box key={name} padding={3} tag=\"li\">\r\n              <Typography>{name}</Typography>\r\n            </Box>\r\n          ))}\r\n        </ul>\r\n      </Popover.Content>\r\n    </Popover.Root>\r\n  );\r\n};\r\n\r\nexport { LocaleListCell };\r\nexport type { LocaleListCellProps };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport { LocaleListCell } from '../components/LocaleListCell';\r\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addColumnToTableHook\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface AddColumnToTableHookArgs {\r\n  layout: ListLayout;\r\n  displayedHeaders: ListFieldLayout[];\r\n}\r\n\r\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\r\n  const { options } = layout;\r\n\r\n  const isFieldLocalized = doesPluginOptionsHaveI18nLocalized(options)\r\n    ? options.i18n.localized\r\n    : false;\r\n\r\n  if (!isFieldLocalized) {\r\n    return { displayedHeaders, layout };\r\n  }\r\n\r\n  return {\r\n    displayedHeaders: [\r\n      ...displayedHeaders,\r\n      {\r\n        attribute: { type: 'string' },\r\n        label: {\r\n          id: getTranslation('list-view.table.header.label'),\r\n          defaultMessage: 'Available in',\r\n        },\r\n        searchable: false,\r\n        sortable: false,\r\n        name: 'locales',\r\n        // @ts-expect-error – ID is seen as number | string; this will change when we move the type over.\r\n        cellFormatter: (props, _header, meta) => <LocaleListCell {...props} {...meta} />,\r\n      },\r\n    ],\r\n    layout,\r\n  };\r\n};\r\n\r\nexport { addColumnToTableHook };\r\n","import { Schema } from '@strapi/types';\r\n/* -------------------------------------------------------------------------------------------------\r\n * addLocaleToReleasesHook\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface AddLocaleToReleasesHookArgs {\r\n  displayedHeaders: {\r\n    key: string;\r\n    fieldSchema: Schema.Attribute.Kind | 'custom';\r\n    metadatas: {\r\n      label: { id: string; defaultMessage: string };\r\n      searchable: boolean;\r\n      sortable: boolean;\r\n    };\r\n    name: string;\r\n  }[];\r\n  hasI18nEnabled: boolean;\r\n}\r\n\r\nconst addLocaleToReleasesHook = ({ displayedHeaders = [] }: AddLocaleToReleasesHookArgs) => {\r\n  return {\r\n    displayedHeaders: [\r\n      ...displayedHeaders,\r\n      {\r\n        label: {\r\n          id: 'content-releases.page.ReleaseDetails.table.header.label.locale',\r\n          defaultMessage: 'locale',\r\n        },\r\n        name: 'locale',\r\n      },\r\n    ],\r\n    hasI18nEnabled: true,\r\n  };\r\n};\r\n\r\nexport { addLocaleToReleasesHook };\r\n","import get from 'lodash/get';\r\n\r\nimport type { Middleware } from '@reduxjs/toolkit';\r\nimport type { Store } from '@strapi/admin/strapi-admin';\r\n\r\nconst extendCTBAttributeInitialDataMiddleware: () => Middleware<\r\n  object,\r\n  ReturnType<Store['getState']>\r\n> = () => {\r\n  return ({ getState }) =>\r\n    (next) =>\r\n    (action) => {\r\n      const enhanceAction = () => {\r\n        // the block here is to catch the error when trying to access the state\r\n        // of the ctb when the plugin is not mounted\r\n        try {\r\n          const store = getState();\r\n\r\n          const hasi18nEnabled = get(\r\n            store,\r\n            [\r\n              'content-type-builder_dataManagerProvider',\r\n              'modifiedData',\r\n              'contentType',\r\n              'schema',\r\n              'pluginOptions',\r\n              'i18n',\r\n              'localized',\r\n            ],\r\n            false\r\n          );\r\n\r\n          if (hasi18nEnabled) {\r\n            const pluginOptions = action.options\r\n              ? { ...action.options.pluginOptions, i18n: { localized: true } }\r\n              : { i18n: { localized: true } };\r\n\r\n            return next({\r\n              ...action,\r\n              options: {\r\n                pluginOptions,\r\n              },\r\n            });\r\n          }\r\n\r\n          return next(action);\r\n        } catch (err) {\r\n          return next(action);\r\n        }\r\n      };\r\n\r\n      if (\r\n        action.type === 'ContentTypeBuilder/FormModal/SET_ATTRIBUTE_DATA_SCHEMA' &&\r\n        action.forTarget === 'contentType' &&\r\n        !['relation', 'component'].includes(action.attributeType) &&\r\n        !action.isEditing\r\n      ) {\r\n        return enhanceAction();\r\n      }\r\n\r\n      if (\r\n        action.type === 'ContentTypeBuilder/FormModal/SET_CUSTOM_FIELD_DATA_SCHEMA' &&\r\n        action.forTarget === 'contentType' &&\r\n        !action.isEditing\r\n      ) {\r\n        return enhanceAction();\r\n      }\r\n\r\n      if (\r\n        (action.type ===\r\n          'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO' ||\r\n          action.type === 'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SAVE_CURRENT_DATA') &&\r\n        action.forTarget === 'contentType'\r\n      ) {\r\n        return enhanceAction();\r\n      }\r\n\r\n      return next(action);\r\n    };\r\n};\r\n\r\nexport { extendCTBAttributeInitialDataMiddleware };\r\n","import type { Middleware } from '@reduxjs/toolkit';\r\nimport type { Store } from '@strapi/admin/strapi-admin';\r\n\r\nconst extendCTBInitialDataMiddleware: () => Middleware<\r\n  object,\r\n  ReturnType<Store['getState']>\r\n> = () => {\r\n  return () => (next) => (action) => {\r\n    if (\r\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\r\n      action.modalType === 'contentType'\r\n    ) {\r\n      const i18n = { localized: false };\r\n\r\n      const pluginOptions = action.data.pluginOptions\r\n        ? { ...action.data.pluginOptions, i18n }\r\n        : { i18n };\r\n\r\n      const data = { ...action.data, pluginOptions };\r\n\r\n      if (action.actionType === 'create') {\r\n        return next({ ...action, data });\r\n      }\r\n\r\n      // Override the action if the pluginOption config does not contain i18n\r\n      // In this case we need to set the proper initialData shape\r\n      if (!action.data.pluginOptions?.i18n?.localized) {\r\n        return next({ ...action, data });\r\n      }\r\n    }\r\n\r\n    // action is not the one we want to override\r\n    return next(action);\r\n  };\r\n};\r\n\r\nexport { extendCTBInitialDataMiddleware };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport * as qs from 'qs';\r\nimport { matchPath } from 'react-router-dom';\r\n\r\nimport type { RBACMiddleware } from '@strapi/admin/strapi-admin';\r\n\r\nconst localeMiddleware: RBACMiddleware = (ctx) => (next) => (permissions) => {\r\n  const match = matchPath('/content-manager/:collectionType/:model?/:id', ctx.pathname);\r\n\r\n  if (!match) {\r\n    return next(permissions);\r\n  }\r\n\r\n  const search = qs.parse(ctx.search);\r\n\r\n  if (typeof search !== 'object') {\r\n    return next(permissions);\r\n  }\r\n\r\n  if (!('plugins' in search && typeof search.plugins === 'object')) {\r\n    return next(permissions);\r\n  }\r\n\r\n  if (\r\n    !(\r\n      'i18n' in search.plugins &&\r\n      typeof search.plugins.i18n === 'object' &&\r\n      !Array.isArray(search.plugins.i18n)\r\n    )\r\n  ) {\r\n    return next(permissions);\r\n  }\r\n\r\n  const { locale } = search.plugins.i18n;\r\n\r\n  if (typeof locale !== 'string') {\r\n    return next(permissions);\r\n  }\r\n\r\n  const revisedPermissions = permissions.filter(\r\n    (permission) =>\r\n      !permission.properties?.locales || permission.properties.locales.includes(locale)\r\n  );\r\n\r\n  return next(revisedPermissions);\r\n};\r\n\r\nexport { localeMiddleware };\r\n","type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n","import omit from 'lodash/omit';\r\n\r\nimport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized } from './fields';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * mutateCTBContentTypeSchema\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst mutateCTBContentTypeSchema = (\r\n  nextSchema: Schema.ContentType,\r\n  prevSchema?: {\r\n    apiID?: string;\r\n    schema?: Schema.ContentType;\r\n    uid?: string;\r\n  }\r\n) => {\r\n  // Don't perform mutations components\r\n  if (!doesPluginOptionsHaveI18nLocalized(nextSchema.pluginOptions)) {\r\n    return nextSchema;\r\n  }\r\n\r\n  const isNextSchemaLocalized = nextSchema.pluginOptions.i18n.localized;\r\n  const isPrevSchemaLocalized = doesPluginOptionsHaveI18nLocalized(\r\n    prevSchema?.schema?.pluginOptions\r\n  )\r\n    ? prevSchema?.schema?.pluginOptions.i18n.localized\r\n    : false;\r\n\r\n  // No need to perform modification on the schema, if the i18n feature was not changed\r\n  // at the ct level\r\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\r\n    return nextSchema;\r\n  }\r\n\r\n  if (isNextSchemaLocalized) {\r\n    const attributes = addLocalisationToFields(nextSchema.attributes);\r\n\r\n    return { ...nextSchema, attributes };\r\n  }\r\n\r\n  // Remove the i18n object from the pluginOptions\r\n  if (!isNextSchemaLocalized) {\r\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\r\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\r\n\r\n    return { ...nextSchema, pluginOptions, attributes };\r\n  }\r\n\r\n  return nextSchema;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addLocalisationToFields\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst addLocalisationToFields = (attributes: Schema.ContentType['attributes']) =>\r\n  Object.keys(attributes).reduce<Schema.ContentType['attributes']>((acc, current) => {\r\n    const currentAttribute = attributes[current];\r\n\r\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\r\n      const i18n = { localized: true };\r\n\r\n      const pluginOptions = currentAttribute.pluginOptions\r\n        ? { ...currentAttribute.pluginOptions, i18n }\r\n        : { i18n };\r\n\r\n      acc[current] = { ...currentAttribute, pluginOptions };\r\n\r\n      return acc;\r\n    }\r\n\r\n    acc[current] = currentAttribute;\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * disableAttributesLocalisation\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype OmitByPath<T extends object, K extends string[]> = Pick<T, Exclude<keyof T, K[number]>>;\r\n\r\nconst disableAttributesLocalisation = (attributes: Schema.ContentType['attributes']) =>\r\n  Object.keys(attributes).reduce<\r\n    Record<string, OmitByPath<Schema.ContentType['attributes'][string], ['pluginOptions', 'i18n']>>\r\n  >((acc, current) => {\r\n    acc[current] = omit(attributes[current], 'pluginOptions.i18n');\r\n\r\n    return acc;\r\n  }, {});\r\n\r\nexport { mutateCTBContentTypeSchema };\r\n","import get from 'lodash/get';\r\nimport * as yup from 'yup';\r\n\r\nimport { CheckboxConfirmation } from './components/CheckboxConfirmation';\r\nimport {\r\n  BulkLocalePublishAction,\r\n  BulkLocaleUnpublishAction,\r\n  DeleteLocaleAction,\r\n  LocalePickerAction,\r\n  FillFromAnotherLocaleAction,\r\n} from './components/CMHeaderActions';\r\nimport {\r\n  DeleteModalAdditionalInfo,\r\n  PublishModalAdditionalInfo,\r\n  UnpublishModalAdditionalInfo,\r\n} from './components/CMListViewModalsAdditionalInformation';\r\nimport { LocalePicker } from './components/LocalePicker';\r\nimport { PERMISSIONS } from './constants';\r\nimport { mutateEditViewHook } from './contentManagerHooks/editView';\r\nimport { addColumnToTableHook } from './contentManagerHooks/listView';\r\nimport { addLocaleToReleasesHook } from './contentReleasesHooks/releaseDetailsView';\r\nimport { extendCTBAttributeInitialDataMiddleware } from './middlewares/extendCTBAttributeInitialData';\r\nimport { extendCTBInitialDataMiddleware } from './middlewares/extendCTBInitialData';\r\nimport { localeMiddleware } from './middlewares/rbac-middleware';\r\nimport { pluginId } from './pluginId';\r\nimport { i18nApi } from './services/api';\r\nimport { LOCALIZED_FIELDS } from './utils/fields';\r\nimport { getTranslation } from './utils/getTranslation';\r\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\r\nimport { mutateCTBContentTypeSchema } from './utils/schemas';\r\n\r\nimport type { DocumentActionComponent } from '@strapi/content-manager/strapi-admin';\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default {\r\n  register(app: any) {\r\n    app.addMiddlewares([extendCTBAttributeInitialDataMiddleware, extendCTBInitialDataMiddleware]);\r\n    app.addMiddlewares([() => i18nApi.middleware]);\r\n    app.addReducers({\r\n      [i18nApi.reducerPath]: i18nApi.reducer,\r\n    });\r\n    app.addRBACMiddleware([localeMiddleware]);\r\n    app.registerPlugin({\r\n      id: pluginId,\r\n      name: pluginId,\r\n    });\r\n  },\r\n  bootstrap(app: any) {\r\n    // // Hook that adds a column into the CM's LV table\r\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\r\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewHook);\r\n    // Hooks that checks if the locale is present in the release\r\n    app.registerHook(\r\n      'ContentReleases/pages/ReleaseDetails/add-locale-in-releases',\r\n      addLocaleToReleasesHook\r\n    );\r\n\r\n    // Add the settings link\r\n    app.addSettingsLink('global', {\r\n      intlLabel: {\r\n        id: getTranslation('plugin.name'),\r\n        defaultMessage: 'Internationalization',\r\n      },\r\n      id: 'internationalization',\r\n      to: 'internationalization',\r\n      Component: () =>\r\n        import('./pages/SettingsPage').then((mod) => ({ default: mod.ProtectedSettingsPage })),\r\n      permissions: PERMISSIONS.accessMain,\r\n    });\r\n\r\n    const contentManager = app.getPlugin('content-manager');\r\n\r\n    contentManager.apis.addDocumentHeaderAction([LocalePickerAction, FillFromAnotherLocaleAction]);\r\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\r\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\r\n      actions.splice(indexOfDeleteAction, 0, DeleteLocaleAction);\r\n      return actions;\r\n    });\r\n\r\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\r\n      // When enabled the bulk locale publish action should be the first action\r\n      // in 'More Document Actions' and therefore the third action in the array\r\n      actions.splice(2, 0, BulkLocalePublishAction);\r\n      actions.splice(5, 0, BulkLocaleUnpublishAction);\r\n      return actions;\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'actions', {\r\n      name: 'i18n-locale-filter',\r\n      Component: LocalePicker,\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'publishModalAdditionalInfos', {\r\n      name: 'i18n-publish-bullets-in-modal',\r\n      Component: PublishModalAdditionalInfo,\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'unpublishModalAdditionalInfos', {\r\n      name: 'i18n-unpublish-bullets-in-modal',\r\n      Component: UnpublishModalAdditionalInfo,\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'deleteModalAdditionalInfos', {\r\n      name: 'i18n-delete-bullets-in-modal',\r\n      Component: DeleteModalAdditionalInfo,\r\n    });\r\n\r\n    const ctbPlugin = app.getPlugin('content-type-builder');\r\n\r\n    if (ctbPlugin) {\r\n      const ctbFormsAPI = ctbPlugin.apis.forms;\r\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\r\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\r\n\r\n      ctbFormsAPI.extendContentType({\r\n        validator: () => ({\r\n          i18n: yup.object().shape({\r\n            localized: yup.bool(),\r\n          }),\r\n        }),\r\n        form: {\r\n          advanced() {\r\n            return [\r\n              {\r\n                name: 'pluginOptions.i18n.localized',\r\n                description: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.description-content-type'),\r\n                  defaultMessage: 'Allows translating an entry into different languages',\r\n                },\r\n                type: 'checkboxConfirmation',\r\n                intlLabel: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.label-content-type'),\r\n                  defaultMessage: 'Localization',\r\n                },\r\n              },\r\n            ];\r\n          },\r\n        },\r\n      });\r\n\r\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\r\n        validator: (args: any) => ({\r\n          i18n: yup.object().shape({\r\n            localized: yup.bool().test({\r\n              name: 'ensure-unique-localization',\r\n              message: getTranslation('plugin.schema.i18n.ensure-unique-localization'),\r\n              test(value) {\r\n                if (value === undefined || value) {\r\n                  return true;\r\n                }\r\n\r\n                const unique = get(args, ['3', 'modifiedData', 'unique'], null);\r\n\r\n                // Unique fields must be localized\r\n                if (unique && !value) {\r\n                  return false;\r\n                }\r\n\r\n                return true;\r\n              },\r\n            }),\r\n          }),\r\n        }),\r\n        form: {\r\n          advanced({ contentTypeSchema, forTarget, type, step }: any) {\r\n            if (forTarget !== 'contentType') {\r\n              return [];\r\n            }\r\n\r\n            const hasI18nEnabled = get(\r\n              contentTypeSchema,\r\n              ['schema', 'pluginOptions', 'i18n', 'localized'],\r\n              false\r\n            );\r\n\r\n            if (!hasI18nEnabled) {\r\n              return [];\r\n            }\r\n\r\n            if (type === 'component' && step === '1') {\r\n              return [];\r\n            }\r\n\r\n            return [\r\n              {\r\n                name: 'pluginOptions.i18n.localized',\r\n                description: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.description-field'),\r\n                  defaultMessage: 'The field can have different values in each locale',\r\n                },\r\n                type: 'checkbox',\r\n                intlLabel: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.label-field'),\r\n                  defaultMessage: 'Enable localization for this field',\r\n                },\r\n              },\r\n            ];\r\n          },\r\n        },\r\n      });\r\n    }\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, pluginId),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n"],"names":["value","useDocument","index","locale","useDocumentActions","document","pluginId"],"mappings":"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"}