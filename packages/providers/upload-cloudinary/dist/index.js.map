{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import type { ReadStream } from 'node:fs';\r\nimport { v2 as cloudinary, ConfigOptions, UploadApiOptions } from 'cloudinary';\r\nimport intoStream from 'into-stream';\r\nimport * as utils from '@strapi/utils';\r\n\r\ninterface File {\r\n  name: string;\r\n  alternativeText?: string;\r\n  caption?: string;\r\n  width?: number;\r\n  height?: number;\r\n  formats?: Record<string, unknown>;\r\n  hash: string;\r\n  ext?: string;\r\n  mime: string;\r\n  size: number;\r\n  sizeInBytes: number;\r\n  url: string;\r\n  previewUrl?: string;\r\n  path?: string;\r\n  provider?: string;\r\n  provider_metadata?: Record<string, unknown>;\r\n  stream?: ReadStream;\r\n  buffer?: Buffer;\r\n}\r\n\r\nexport default {\r\n  init(options: ConfigOptions) {\r\n    cloudinary.config(options);\r\n\r\n    const upload = (file: File, customConfig = {}): Promise<void> => {\r\n      return new Promise((resolve, reject) => {\r\n        const config: Partial<UploadApiOptions> = {\r\n          resource_type: 'auto',\r\n          public_id: file.hash,\r\n        };\r\n\r\n        if (file.ext) {\r\n          config.filename = `${file.hash}${file.ext}`;\r\n        }\r\n\r\n        if (file.path) {\r\n          config.folder = file.path;\r\n        }\r\n\r\n        // For files smaller than 99 MB use regular upload as it tends to be faster\r\n        // and fallback to chunked upload for larger files as that's required by Cloudinary.\r\n        // https://support.cloudinary.com/hc/en-us/community/posts/360009586100-Upload-movie-video-with-large-size?page=1#community_comment_360002140099\r\n        // The Cloudinary's max limit for regular upload is actually 100 MB but add some headroom\r\n        // for size counting shenanigans. (Strapi provides the size in kilobytes rounded to two decimal places here).\r\n        const uploadMethod =\r\n          file.size && file.size < 1000 * 99\r\n            ? cloudinary.uploader.upload_stream\r\n            : cloudinary.uploader.upload_chunked_stream;\r\n\r\n        const uploadStream = uploadMethod({ ...config, ...customConfig }, (err, image) => {\r\n          if (err) {\r\n            if (err.message.includes('File size too large')) {\r\n              reject(new utils.errors.PayloadTooLargeError());\r\n            } else {\r\n              reject(new Error(`Error uploading to cloudinary: ${err.message}`));\r\n            }\r\n            return;\r\n          }\r\n\r\n          if (!image) {\r\n            return;\r\n          }\r\n\r\n          if (image.resource_type === 'video') {\r\n            file.previewUrl = cloudinary.url(`${image.public_id}.gif`, {\r\n              video_sampling: 6,\r\n              delay: 200,\r\n              width: 250,\r\n              crop: 'scale',\r\n              resource_type: 'video',\r\n            });\r\n          }\r\n\r\n          file.url = image.secure_url;\r\n          file.provider_metadata = {\r\n            public_id: image.public_id,\r\n            resource_type: image.resource_type,\r\n          };\r\n\r\n          resolve();\r\n        });\r\n\r\n        if (file.stream) {\r\n          file.stream.pipe(uploadStream);\r\n        } else if (file.buffer) {\r\n          intoStream(file.buffer).pipe(uploadStream);\r\n        } else {\r\n          throw new Error('Missing file stream or buffer');\r\n        }\r\n      });\r\n    };\r\n\r\n    return {\r\n      uploadStream(file: File, customConfig = {}) {\r\n        return upload(file, customConfig);\r\n      },\r\n      upload(file: File, customConfig = {}) {\r\n        return upload(file, customConfig);\r\n      },\r\n      async delete(file: File, customConfig = {}) {\r\n        try {\r\n          const { resource_type: resourceType, public_id: publicId } = file.provider_metadata ?? {};\r\n          const deleteConfig = {\r\n            resource_type: (resourceType || 'image') as string,\r\n            invalidate: true,\r\n            ...customConfig,\r\n          };\r\n\r\n          const response = await cloudinary.uploader.destroy(`${publicId}`, deleteConfig);\r\n\r\n          if (response.result !== 'ok' && response.result !== 'not found') {\r\n            throw new Error(response.result);\r\n          }\r\n        } catch (error) {\r\n          if (error instanceof Error) {\r\n            throw new Error(`Error deleting on cloudinary: ${error.message}`);\r\n          }\r\n\r\n          throw error;\r\n        }\r\n      },\r\n    };\r\n  },\r\n};\r\n"],"names":["cloudinary","utils","intoStream"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAe,QAAA;AAAA,EACb,KAAK,SAAwB;AAC3BA,eAAA,GAAW,OAAO,OAAO;AAEzB,UAAM,SAAS,CAAC,MAAY,eAAe,CAAA,MAAsB;AAC/D,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAM,SAAoC;AAAA,UACxC,eAAe;AAAA,UACf,WAAW,KAAK;AAAA,QAClB;AAEA,YAAI,KAAK,KAAK;AACZ,iBAAO,WAAW,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG;AAAA,QAAA;AAG3C,YAAI,KAAK,MAAM;AACb,iBAAO,SAAS,KAAK;AAAA,QAAA;AAQjB,cAAA,eACJ,KAAK,QAAQ,KAAK,OAAO,MAAO,KAC5BA,WAAW,GAAA,SAAS,gBACpBA,WAAA,GAAW,SAAS;AAEpB,cAAA,eAAe,aAAa,EAAE,GAAG,QAAQ,GAAG,aAAa,GAAG,CAAC,KAAK,UAAU;AAChF,cAAI,KAAK;AACP,gBAAI,IAAI,QAAQ,SAAS,qBAAqB,GAAG;AAC/C,qBAAO,IAAIC,iBAAM,OAAO,qBAAA,CAAsB;AAAA,YAAA,OACzC;AACL,qBAAO,IAAI,MAAM,kCAAkC,IAAI,OAAO,EAAE,CAAC;AAAA,YAAA;AAEnE;AAAA,UAAA;AAGF,cAAI,CAAC,OAAO;AACV;AAAA,UAAA;AAGE,cAAA,MAAM,kBAAkB,SAAS;AACnC,iBAAK,aAAaD,WAAAA,GAAW,IAAI,GAAG,MAAM,SAAS,QAAQ;AAAA,cACzD,gBAAgB;AAAA,cAChB,OAAO;AAAA,cACP,OAAO;AAAA,cACP,MAAM;AAAA,cACN,eAAe;AAAA,YAAA,CAChB;AAAA,UAAA;AAGH,eAAK,MAAM,MAAM;AACjB,eAAK,oBAAoB;AAAA,YACvB,WAAW,MAAM;AAAA,YACjB,eAAe,MAAM;AAAA,UACvB;AAEQ,kBAAA;AAAA,QAAA,CACT;AAED,YAAI,KAAK,QAAQ;AACV,eAAA,OAAO,KAAK,YAAY;AAAA,QAAA,WACpB,KAAK,QAAQ;AACtBE,8BAAAA,QAAW,KAAK,MAAM,EAAE,KAAK,YAAY;AAAA,QAAA,OACpC;AACC,gBAAA,IAAI,MAAM,+BAA+B;AAAA,QAAA;AAAA,MACjD,CACD;AAAA,IACH;AAEO,WAAA;AAAA,MACL,aAAa,MAAY,eAAe,IAAI;AACnC,eAAA,OAAO,MAAM,YAAY;AAAA,MAClC;AAAA,MACA,OAAO,MAAY,eAAe,IAAI;AAC7B,eAAA,OAAO,MAAM,YAAY;AAAA,MAClC;AAAA,MACA,MAAM,OAAO,MAAY,eAAe,IAAI;AACtC,YAAA;AACI,gBAAA,EAAE,eAAe,cAAc,WAAW,aAAa,KAAK,qBAAqB,CAAC;AACxF,gBAAM,eAAe;AAAA,YACnB,eAAgB,gBAAgB;AAAA,YAChC,YAAY;AAAA,YACZ,GAAG;AAAA,UACL;AAEM,gBAAA,WAAW,MAAMF,WAAAA,GAAW,SAAS,QAAQ,GAAG,QAAQ,IAAI,YAAY;AAE9E,cAAI,SAAS,WAAW,QAAQ,SAAS,WAAW,aAAa;AACzD,kBAAA,IAAI,MAAM,SAAS,MAAM;AAAA,UAAA;AAAA,iBAE1B,OAAO;AACd,cAAI,iBAAiB,OAAO;AAC1B,kBAAM,IAAI,MAAM,iCAAiC,MAAM,OAAO,EAAE;AAAA,UAAA;AAG5D,gBAAA;AAAA,QAAA;AAAA,MACR;AAAA,IAEJ;AAAA,EAAA;AAEJ;;"}