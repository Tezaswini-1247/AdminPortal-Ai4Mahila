{"version":3,"file":"index-CD3IaMB6.js","sources":["../../admin/src/utils/getTrad.ts","../../admin/src/contexts/DataManagerContext.ts","../../admin/src/hooks/useDataManager.ts","../../admin/src/contexts/FormModalNavigationContext.ts","../../admin/src/hooks/useFormModalNavigation.ts","../../admin/src/components/ContentTypeBuilderNav/useContentTypeBuilderMenu.ts","../../admin/src/components/ContentTypeBuilderNav/ContentTypeBuilderNav.tsx","../../admin/src/utils/isAllowedContentTypesForRelations.ts","../../admin/src/utils/findAttribute.ts","../../admin/src/utils/getYupInnerErrors.ts","../../admin/src/components/AllowedTypesSelect.tsx","../../admin/src/components/AttributeIcon.tsx","../../admin/src/components/AttributeOptions/OptionBoxWrapper.tsx","../../admin/src/components/AttributeOptions/AttributeOption.tsx","../../admin/src/components/AttributeOptions/AttributeList.tsx","../../admin/src/components/AttributeOptions/CustomFieldOption.tsx","../../admin/src/components/AttributeOptions/EmptyAttributes.tsx","../../admin/src/components/AttributeOptions/CustomFieldsList.tsx","../../admin/src/components/AttributeOptions/AttributeOptions.tsx","../../admin/src/components/BooleanDefaultValueSelect.tsx","../../admin/src/components/CustomRadioGroup/Styles.tsx","../../admin/src/components/CustomRadioGroup/CustomRadioGroup.tsx","../../admin/src/components/BooleanRadioGroup.tsx","../../admin/src/components/CheckboxWithNumberField.tsx","../../admin/src/components/ContentTypeRadioGroup.tsx","../../admin/src/components/DraftAndPublishToggle.tsx","../../admin/src/components/FormModalEndActions.tsx","../../admin/src/components/FormModalHeader.tsx","../../admin/src/components/FormModalSubHeader.tsx","../../admin/src/components/IconPicker/constants.ts","../../admin/src/components/IconPicker/IconPicker.tsx","../../admin/src/components/PluralName.tsx","../../admin/src/utils/parseDateValue.ts","../../admin/src/utils/timeFormat.ts","../../admin/src/components/GenericInputs.tsx","../../admin/src/components/Relation/RelationField/RelationTargetPicker/RelationTargetPicker.tsx","../../admin/src/components/Relation/RelationField/RelationField.tsx","../../admin/src/components/Relation/RelationNaturePicker/Components.tsx","../../admin/src/components/Relation/RelationNaturePicker/RelationNaturePicker.tsx","../../admin/src/components/Relation/Relation.tsx","../../admin/src/components/SelectCategory.tsx","../../admin/src/utils/getMaxDepth.ts","../../admin/src/components/SelectComponent.tsx","../../admin/src/components/SelectComponents.tsx","../../admin/src/components/SelectDateType.tsx","../../admin/src/components/SelectNumber.tsx","../../admin/src/components/SingularName.tsx","../../admin/src/components/TabForm.tsx","../../admin/src/components/TextareaEnum.tsx","../../admin/src/components/FormModal/attributes/nameField.ts","../../admin/src/components/FormModal/attributes/commonBaseForm.ts","../../admin/src/components/FormModal/component/componentForm.ts","../../admin/src/components/FormModal/attributes/attributeOptions.ts","../../admin/src/components/FormModal/attributes/advancedForm.ts","../../admin/src/components/FormModal/component/componentField.ts","../../admin/src/components/FormModal/attributes/baseForm.ts","../../admin/src/components/FormModal/attributes/form.ts","../../admin/src/utils/toRegressedEnumValue.ts","../../admin/src/components/FormModal/attributes/validation/common.ts","../../admin/src/components/FormModal/attributes/types.ts","../../admin/src/components/FormModal/category/regex.ts","../../admin/src/components/FormModal/category/createCategorySchema.ts","../../admin/src/components/FormModal/category/form.ts","../../admin/src/components/FormModal/component/createComponentSchema.ts","../../admin/src/components/FormModal/contentType/contentTypeForm.ts","../../admin/src/components/FormModal/contentType/createContentTypeSchema.ts","../../admin/src/components/FormModal/dynamiczoneForm.ts","../../admin/src/components/FormModal/forms/utils/addItemsToFormSection.ts","../../admin/src/components/FormModal/forms/utils/createCollectionName.ts","../../admin/src/components/FormModal/forms/utils/getUsedAttributeNames.ts","../../admin/src/components/FormModal/forms/forms.ts","../../admin/src/components/FormModal/selectors.ts","../../admin/src/components/FormModal/utils/canEditContentType.ts","../../admin/src/components/FormModal/utils/getAttributesToDisplay.ts","../../admin/src/components/FormModal/utils/getFormInputNames.ts","../../admin/src/components/FormModal/FormModal.tsx","../../admin/src/components/DataManagerProvider/selectors.ts","../../admin/src/components/DataManagerProvider/utils/cleanData.ts","../../admin/src/components/DataManagerProvider/utils/createDataObject.ts","../../admin/src/components/DataManagerProvider/utils/createModifiedDataSchema.ts","../../admin/src/components/DataManagerProvider/utils/formatSchemas.ts","../../admin/src/components/DataManagerProvider/utils/retrieveComponentsThatHaveComponents.ts","../../admin/src/components/DataManagerProvider/utils/retrieveNestedComponents.ts","../../admin/src/components/DataManagerProvider/utils/retrieveSpecificInfoFromComponents.ts","../../admin/src/components/DataManagerProvider/utils/serverRestartWatcher.ts","../../admin/src/components/DataManagerProvider/utils/validateSchema.ts","../../admin/src/components/DataManagerProvider/DataManagerProvider.tsx","../../admin/src/components/FormModalNavigationProvider/constants.ts","../../admin/src/components/FormModalNavigationProvider/FormModalNavigationProvider.tsx","../../admin/src/pages/RecursivePath/RecursivePath.tsx","../../admin/src/pages/App/index.tsx"],"sourcesContent":["import { pluginId } from '../pluginId';\r\n\r\nexport const getTrad = (id: string) => `${pluginId}.${id}`;\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport { createContext } from 'react';\r\n\r\nimport type { SchemaType, Component } from '../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\n// TODO V5 Convert this any types to real types\r\nexport interface CustomFieldAttributeParams {\r\n  attributeToSet: Record<string, any>;\r\n  forTarget: SchemaType;\r\n  targetUid: Internal.UID.Schema;\r\n  initialAttribute: Record<string, any>;\r\n}\r\nexport interface DataManagerContextValue {\r\n  addAttribute: (\r\n    attributeToSet: Record<string, any>,\r\n    forTarget: SchemaType,\r\n    targetUid: Internal.UID.Schema,\r\n    isEditing?: boolean,\r\n    initialAttribute?: Record<string, any>,\r\n    shouldAddComponentToData?: boolean\r\n  ) => void;\r\n  addCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\r\n  editCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\r\n  addCreatedComponentToDynamicZone: (dynamicZoneTarget: string, componentsToAdd: string[]) => void;\r\n  createSchema: (\r\n    data: Record<string, any>,\r\n    schemaType: SchemaType,\r\n    uid: Internal.UID.Schema,\r\n    componentCategory?: string,\r\n    shouldAddComponentToData?: boolean\r\n  ) => void;\r\n  changeDynamicZoneComponents: (dynamicZoneTarget: string, newComponents: string[]) => void;\r\n  removeAttribute: (\r\n    mainDataKey: string,\r\n    attributeToRemoveName: string,\r\n    componentUid?: string\r\n  ) => void;\r\n  deleteCategory: (categoryUid: string) => void;\r\n  deleteData: () => void;\r\n  editCategory: (categoryUid: string, body: any) => void;\r\n  removeComponentFromDynamicZone: (dzName: string, componentToRemoveIndex: number) => void;\r\n  setModifiedData: () => void;\r\n  sortedContentTypesList: any[]; // Define the actual type\r\n  submitData: (additionalContentTypeData?: Record<string, any>) => Promise<void>;\r\n  updateSchema: (\r\n    data: Record<string, any>,\r\n    schemaType: SchemaType,\r\n    componentUID: Internal.UID.Component\r\n  ) => void;\r\n  components: Record<Internal.UID.Component, Component>;\r\n  componentsGroupedByCategory: Record<string, Component[]>;\r\n  componentsThatHaveOtherComponentInTheirAttributes: any[]; // Define the actual type\r\n  contentTypes: Record<string, any>;\r\n  initialData: Record<string, any>;\r\n  isInContentTypeView: boolean;\r\n  isInDevelopmentMode?: boolean;\r\n  modifiedData: Record<string, any>;\r\n  nestedComponents: any[]; // Define the actual type\r\n  reservedNames: {\r\n    models: string[];\r\n    attributes: string[];\r\n  };\r\n  allComponentsCategories: any[];\r\n}\r\n\r\n// @ts-expect-error need to pass initial value to params\r\nexport const DataManagerContext = createContext<DataManagerContextValue>();\r\n","import { useContext } from 'react';\r\n\r\nimport { DataManagerContext } from '../contexts/DataManagerContext';\r\n\r\nexport const useDataManager = () => useContext(DataManagerContext);\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { INITIAL_STATE_DATA } from '../components/FormModalNavigationProvider/constants';\r\n\r\nimport type {\r\n  ModalEventProps,\r\n  State,\r\n} from '../components/FormModalNavigationProvider/FormModalNavigationProvider';\r\nimport type { SchemaType } from '../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\nexport interface FormModalNavigationContextValue {\r\n  onCloseModal: () => void;\r\n  onOpenModalAddField: (options: {\r\n    forTarget: SchemaType;\r\n    targetUid?: Internal.UID.Schema;\r\n  }) => void;\r\n  onClickSelectField: (option: ModalEventProps) => void;\r\n  onClickSelectCustomField: (option: ModalEventProps) => void;\r\n  onNavigateToChooseAttributeModal: (options: ModalEventProps) => void;\r\n  onNavigateToAddCompoToDZModal: (options: ModalEventProps) => void;\r\n  onOpenModalAddComponentsToDZ: (options: ModalEventProps) => void;\r\n  onNavigateToCreateComponentStep2: () => void;\r\n  onOpenModalCreateSchema: (options: State) => void;\r\n  onOpenModalEditCategory: (categoryName: string) => void;\r\n  onOpenModalEditField: (options: ModalEventProps) => void;\r\n  onOpenModalEditCustomField: (options: ModalEventProps) => void;\r\n  onOpenModalEditSchema: (options: ModalEventProps) => void;\r\n  setFormModalNavigationState: (value: React.SetStateAction<typeof INITIAL_STATE_DATA>) => void;\r\n  actionType: string;\r\n  attributeName: string;\r\n  attributeType: string;\r\n  customFieldUid: string;\r\n  categoryName: string;\r\n  dynamicZoneTarget: string;\r\n  forTarget: SchemaType;\r\n  modalType: string;\r\n  isOpen: boolean;\r\n  showBackLink: boolean;\r\n  kind: string;\r\n  step: string;\r\n  targetUid: Internal.UID.Schema;\r\n  activeTab: string;\r\n  setActiveTab: (value: React.SetStateAction<string>) => void;\r\n}\r\n\r\n// @ts-expect-error need to pass initial value to params\r\nexport const FormModalNavigationContext = React.createContext<FormModalNavigationContextValue>();\r\n","import { useContext } from 'react';\r\n\r\nimport { FormModalNavigationContext } from '../contexts/FormModalNavigationContext';\r\n\r\nexport const useFormModalNavigation = () => useContext(FormModalNavigationContext);\r\n","import { useState, MouseEvent } from 'react';\r\n\r\nimport { useTracking, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { useCollator, useFilter } from '@strapi/design-system';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDataManager } from '../../hooks/useDataManager';\r\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\r\nimport { pluginId } from '../../pluginId';\r\nimport { getTrad } from '../../utils/getTrad';\r\n\r\nimport type { Internal } from '@strapi/types';\r\n\r\nexport const useContentTypeBuilderMenu = () => {\r\n  const {\r\n    components,\r\n    componentsGroupedByCategory,\r\n    contentTypes,\r\n    isInDevelopmentMode,\r\n    sortedContentTypesList,\r\n    modifiedData,\r\n    initialData,\r\n  } = useDataManager();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const [search, setSearch] = useState('');\r\n  const { onOpenModalCreateSchema, onOpenModalEditCategory } = useFormModalNavigation();\r\n  const { locale } = useIntl();\r\n\r\n  const { startsWith } = useFilter(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const canOpenModalCreateCTorComponent =\r\n    !Object.keys(contentTypes).some((ct) => contentTypes[ct].isTemporary === true) &&\r\n    !Object.keys(components).some(\r\n      (component) => components[component as Internal.UID.Component].isTemporary === true\r\n    ) &&\r\n    isEqual(modifiedData, initialData);\r\n\r\n  const handleClickOpenModalCreateCollectionType = () => {\r\n    if (canOpenModalCreateCTorComponent) {\r\n      trackUsage(`willCreateContentType`);\r\n\r\n      const nextState = {\r\n        modalType: 'contentType',\r\n        kind: 'collectionType',\r\n        actionType: 'create',\r\n        forTarget: 'contentType',\r\n      };\r\n\r\n      onOpenModalCreateSchema(nextState);\r\n    } else {\r\n      toggleNotificationCannotCreateSchema();\r\n    }\r\n  };\r\n\r\n  const handleClickOpenModalCreateSingleType = () => {\r\n    if (canOpenModalCreateCTorComponent) {\r\n      trackUsage(`willCreateSingleType`);\r\n\r\n      const nextState = {\r\n        modalType: 'contentType',\r\n        kind: 'singleType',\r\n        actionType: 'create',\r\n        forTarget: 'contentType',\r\n      };\r\n\r\n      onOpenModalCreateSchema(nextState);\r\n    } else {\r\n      toggleNotificationCannotCreateSchema();\r\n    }\r\n  };\r\n\r\n  const handleClickOpenModalCreateComponent = () => {\r\n    if (canOpenModalCreateCTorComponent) {\r\n      trackUsage('willCreateComponent');\r\n\r\n      const nextState = {\r\n        modalType: 'component',\r\n        kind: null,\r\n        actionType: 'create',\r\n        forTarget: 'component',\r\n      };\r\n\r\n      onOpenModalCreateSchema(nextState);\r\n    } else {\r\n      toggleNotificationCannotCreateSchema();\r\n    }\r\n  };\r\n\r\n  const toggleNotificationCannotCreateSchema = () => {\r\n    toggleNotification({\r\n      type: 'info',\r\n      message: formatMessage({\r\n        id: getTrad('notification.info.creating.notSaved'),\r\n        defaultMessage: 'Please save your work before creating a new collection type or component',\r\n      }),\r\n    });\r\n  };\r\n\r\n  const componentsData = Object.entries(componentsGroupedByCategory)\r\n    .map(([category, components]) => ({\r\n      name: category,\r\n      title: category,\r\n      isEditable: isInDevelopmentMode,\r\n      onClickEdit(e: MouseEvent, data: any) {\r\n        e.stopPropagation();\r\n\r\n        if (canOpenModalCreateCTorComponent) {\r\n          onOpenModalEditCategory(data.name);\r\n        } else {\r\n          toggleNotificationCannotCreateSchema();\r\n        }\r\n      },\r\n      links: components\r\n        .map((component) => ({\r\n          name: component.uid,\r\n          to: `/plugins/${pluginId}/component-categories/${category}/${component.uid}`,\r\n          title: component.schema.displayName,\r\n        }))\r\n        .sort((a, b) => formatter.compare(a.title, b.title)),\r\n    }))\r\n    .sort((a, b) => formatter.compare(a.title, b.title));\r\n\r\n  const displayedContentTypes = sortedContentTypesList.filter((obj) => obj.visible);\r\n\r\n  const data = [\r\n    {\r\n      name: 'models',\r\n      title: {\r\n        id: `${getTrad('menu.section.models.name')}`,\r\n        defaultMessage: 'Collection Types',\r\n      },\r\n      customLink: isInDevelopmentMode && {\r\n        id: `${getTrad('button.model.create')}`,\r\n        defaultMessage: 'Create new collection type',\r\n        onClick: handleClickOpenModalCreateCollectionType,\r\n      },\r\n      links: displayedContentTypes.filter((contentType) => contentType.kind === 'collectionType'),\r\n    },\r\n    {\r\n      name: 'singleTypes',\r\n      title: {\r\n        id: `${getTrad('menu.section.single-types.name')}`,\r\n        defaultMessage: 'Single Types',\r\n      },\r\n      customLink: isInDevelopmentMode && {\r\n        id: `${getTrad('button.single-types.create')}`,\r\n        defaultMessage: 'Create new single type',\r\n        onClick: handleClickOpenModalCreateSingleType,\r\n      },\r\n      links: displayedContentTypes.filter((singleType) => singleType.kind === 'singleType'),\r\n    },\r\n    {\r\n      name: 'components',\r\n      title: {\r\n        id: `${getTrad('menu.section.components.name')}`,\r\n        defaultMessage: 'Components',\r\n      },\r\n      customLink: isInDevelopmentMode && {\r\n        id: `${getTrad('button.component.create')}`,\r\n        defaultMessage: 'Create a new component',\r\n        onClick: handleClickOpenModalCreateComponent,\r\n      },\r\n      links: componentsData,\r\n    },\r\n  ].map((section) => {\r\n    const hasChild = section.links.some((l) => Array.isArray(l.links));\r\n\r\n    if (hasChild) {\r\n      let filteredLinksCount = 0;\r\n\r\n      return {\r\n        ...section,\r\n        links: section.links\r\n          .map((link) => {\r\n            const filteredLinks = link.links.filter((link: any) => startsWith(link.title, search));\r\n\r\n            if (filteredLinks.length === 0) {\r\n              return null;\r\n            }\r\n\r\n            filteredLinksCount += filteredLinks.length;\r\n\r\n            return {\r\n              ...link,\r\n              links: filteredLinks.sort((a: any, b: any) => formatter.compare(a.title, b.title)),\r\n            };\r\n          })\r\n          .filter(Boolean),\r\n        linksCount: filteredLinksCount,\r\n      };\r\n    }\r\n\r\n    const filteredLinks = section.links\r\n      .filter((link) => startsWith(link.title, search))\r\n      .sort((a, b) => formatter.compare(a.title, b.title));\r\n\r\n    return {\r\n      ...section,\r\n      links: filteredLinks,\r\n      linksCount: filteredLinks.length,\r\n    };\r\n  });\r\n\r\n  return {\r\n    menu: data,\r\n    searchValue: search,\r\n    onSearchChange: setSearch,\r\n  };\r\n};\r\n","import { Fragment } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  TextButton,\r\n  SubNav,\r\n  SubNavHeader,\r\n  SubNavLink,\r\n  SubNavLinkSection,\r\n  SubNavSection,\r\n  SubNavSections,\r\n} from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTrad } from '../../utils/getTrad';\r\n\r\nimport { useContentTypeBuilderMenu } from './useContentTypeBuilderMenu';\r\n\r\nconst SubNavLinkCustom = styled(SubNavLink)`\r\n  div {\r\n    width: inherit;\r\n    span:nth-child(2) {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      width: inherit;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ContentTypeBuilderNav = () => {\r\n  const { menu, searchValue, onSearchChange } = useContentTypeBuilderMenu();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const pluginName = formatMessage({\r\n    id: getTrad('plugin.name'),\r\n    defaultMessage: 'Content-Type Builder',\r\n  });\r\n\r\n  return (\r\n    <SubNav aria-label={pluginName}>\r\n      <SubNavHeader\r\n        searchable\r\n        value={searchValue}\r\n        onClear={() => onSearchChange('')}\r\n        onChange={(e) => onSearchChange(e.target.value)}\r\n        label={pluginName}\r\n        searchLabel={formatMessage({\r\n          id: 'global.search',\r\n          defaultMessage: 'Search',\r\n        })}\r\n      />\r\n      <SubNavSections>\r\n        {menu.map((section) => (\r\n          <Fragment key={section.name}>\r\n            <SubNavSection\r\n              label={formatMessage({\r\n                id: section.title.id,\r\n                defaultMessage: section.title.defaultMessage,\r\n              })}\r\n              collapsable\r\n              badgeLabel={section.linksCount.toString()}\r\n            >\r\n              {section.links.map((link) => {\r\n                if (link.links) {\r\n                  return (\r\n                    <SubNavLinkSection key={link.name} label={upperFirst(link.title)}>\r\n                      {link.links.map((subLink: any) => (\r\n                        <SubNavLink\r\n                          tag={NavLink}\r\n                          to={subLink.to}\r\n                          active={subLink.active}\r\n                          key={subLink.name}\r\n                          isSubSectionChild\r\n                        >\r\n                          {upperFirst(\r\n                            formatMessage({ id: subLink.name, defaultMessage: subLink.title })\r\n                          )}\r\n                        </SubNavLink>\r\n                      ))}\r\n                    </SubNavLinkSection>\r\n                  );\r\n                }\r\n\r\n                return (\r\n                  <SubNavLinkCustom\r\n                    tag={NavLink}\r\n                    to={link.to}\r\n                    active={link.active}\r\n                    key={link.name}\r\n                    width=\"100%\"\r\n                  >\r\n                    {upperFirst(formatMessage({ id: link.name, defaultMessage: link.title }))}\r\n                  </SubNavLinkCustom>\r\n                );\r\n              })}\r\n            </SubNavSection>\r\n            {section.customLink && (\r\n              <Box paddingLeft={7}>\r\n                <TextButton\r\n                  onClick={section.customLink.onClick}\r\n                  startIcon={<Plus width=\"0.8rem\" height=\"0.8rem\" />}\r\n                  marginTop={2}\r\n                  cursor=\"pointer\"\r\n                >\r\n                  {formatMessage({\r\n                    id: section.customLink.id,\r\n                    defaultMessage: section.customLink.defaultMessage,\r\n                  })}\r\n                </TextButton>\r\n              </Box>\r\n            )}\r\n          </Fragment>\r\n        ))}\r\n      </SubNavSections>\r\n    </SubNav>\r\n  );\r\n};\r\n","import type { ContentType } from '../types';\r\n\r\nexport const isAllowedContentTypesForRelations = (contentType: ContentType) => {\r\n  return (\r\n    contentType.kind === 'collectionType' &&\r\n    (contentType.restrictRelationsTo === null ||\r\n      (Array.isArray(contentType.restrictRelationsTo) &&\r\n        contentType.restrictRelationsTo.length > 0))\r\n  );\r\n};\r\n","import { AttributeType } from '../types';\r\n\r\nexport const findAttribute = (attributes: AttributeType[], attributeToFind: string) => {\r\n  return attributes.find(({ name }) => name === attributeToFind);\r\n};\r\n","import type { MessageDescriptor, PrimitiveType } from 'react-intl';\r\nimport type { ValidationError } from 'yup';\r\n\r\ninterface TranslationMessage extends MessageDescriptor {\r\n  values?: Record<string, PrimitiveType>;\r\n}\r\n\r\nconst extractValuesFromYupError = (\r\n  errorType?: string | undefined,\r\n  errorParams?: Record<string, any> | undefined\r\n) => {\r\n  if (!errorType || !errorParams) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    [errorType]: errorParams[errorType],\r\n  };\r\n};\r\n\r\nconst getYupInnerErrors = (error: ValidationError) =>\r\n  (error?.inner || []).reduce<Record<string, TranslationMessage>>((acc, currentError) => {\r\n    if (currentError.path) {\r\n      acc[currentError.path.split('[').join('.').split(']').join('')] = {\r\n        id: currentError.message,\r\n        defaultMessage: currentError.message,\r\n        values: extractValuesFromYupError(currentError?.type, currentError?.params),\r\n      };\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n\r\nexport { getYupInnerErrors };\r\n","import { Field, MultiSelectNested } from '@strapi/design-system';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { IntlLabel } from '../types';\r\n\r\ninterface AllowedTypesSelectProps {\r\n  intlLabel: IntlLabel;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  value?: any;\r\n}\r\n\r\nconst options = [\r\n  {\r\n    label: 'All',\r\n    children: [\r\n      { label: 'images (JPEG, PNG, GIF, SVG, TIFF, ICO, DVU)', value: 'images' },\r\n      { label: 'videos (MPEG, MP4, Quicktime, WMV, AVI, FLV)', value: 'videos' },\r\n      { label: 'audios (MP3, WAV, OGG)', value: 'audios' },\r\n      { label: 'files (CSV, ZIP, PDF, Excel, JSON, ...)', value: 'files' },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const AllowedTypesSelect = ({\r\n  intlLabel,\r\n  name,\r\n  onChange,\r\n  value = null,\r\n}: AllowedTypesSelectProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  /* eslint-disable indent */\r\n  const displayedValue =\r\n    value === null || value?.length === 0\r\n      ? formatMessage({ id: 'global.none', defaultMessage: 'None' })\r\n      : [...value]\r\n          .sort()\r\n          .map((v) => upperFirst(v))\r\n          .join(', ');\r\n\r\n  /* eslint-enable indent */\r\n\r\n  const label = intlLabel.id\r\n    ? formatMessage({ id: intlLabel.id, defaultMessage: intlLabel.defaultMessage })\r\n    : name;\r\n\r\n  return (\r\n    <Field.Root name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <MultiSelectNested\r\n        customizeContent={() => displayedValue}\r\n        onChange={(values: any[]) => {\r\n          if (values.length > 0) {\r\n            onChange({ target: { name, value: values, type: 'allowed-types-select' } });\r\n          } else {\r\n            onChange({ target: { name, value: null, type: 'allowed-types-select' } });\r\n          }\r\n        }}\r\n        options={options}\r\n        value={value || []}\r\n      />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { ComponentType, SVGProps } from 'react';\r\n\r\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\r\nimport { Box } from '@strapi/design-system';\r\nimport {\r\n  BooleanField,\r\n  CollectionType,\r\n  ComponentField,\r\n  DateField,\r\n  DynamicZoneField,\r\n  EmailField,\r\n  EnumerationField,\r\n  JsonField,\r\n  MediaField,\r\n  NumberField,\r\n  PasswordField,\r\n  RelationField,\r\n  MarkdownField,\r\n  SingleType,\r\n  TextField,\r\n  UidField,\r\n  BlocksField,\r\n} from '@strapi/icons/symbols';\r\nimport { styled } from 'styled-components';\r\n\r\nconst iconByTypes: Record<string, ComponentType<SVGProps<SVGSVGElement>>> = {\r\n  biginteger: NumberField,\r\n  blocks: BlocksField,\r\n  boolean: BooleanField,\r\n  collectionType: CollectionType,\r\n  component: ComponentField,\r\n  contentType: CollectionType,\r\n  date: DateField,\r\n  datetime: DateField,\r\n  decimal: NumberField,\r\n  dynamiczone: DynamicZoneField,\r\n  email: EmailField,\r\n  enum: EnumerationField,\r\n  enumeration: EnumerationField,\r\n  file: MediaField,\r\n  files: MediaField,\r\n  float: NumberField,\r\n  integer: NumberField,\r\n  json: JsonField,\r\n  JSON: JsonField,\r\n  media: MediaField,\r\n  number: NumberField,\r\n  password: PasswordField,\r\n  relation: RelationField,\r\n  richtext: MarkdownField,\r\n  singleType: SingleType,\r\n  string: TextField,\r\n  text: TextField,\r\n  time: DateField,\r\n  timestamp: DateField,\r\n  uid: UidField,\r\n};\r\n\r\nconst IconBox = styled(Box)`\r\n  svg {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport type IconByType = keyof typeof iconByTypes;\r\n\r\ntype AttributeIconProps = {\r\n  type: IconByType;\r\n  customField?: string | null;\r\n};\r\n\r\nexport const AttributeIcon = ({ type, customField = null, ...rest }: AttributeIconProps) => {\r\n  const getCustomField = useStrapiApp('AttributeIcon', (state) => state.customFields.get);\r\n\r\n  let Compo: any = iconByTypes[type];\r\n\r\n  if (customField) {\r\n    const customFieldObject = getCustomField(customField);\r\n    const icon = customFieldObject?.icon;\r\n    if (icon) {\r\n      Compo = icon;\r\n    }\r\n  }\r\n\r\n  if (!iconByTypes[type]) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <IconBox width=\"3.2rem\" shrink={0} {...rest} aria-hidden>\r\n      <Box tag={Compo} />\r\n    </IconBox>\r\n  );\r\n};\r\n","import { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nexport const OptionBoxWrapper = styled(Box)`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\r\n  text-align: left;\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: ${({ theme }) => theme.colors.primary100};\r\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\r\n  }\r\n`;\r\n","/**\r\n *\r\n * AttributeOption\r\n *\r\n */\r\n\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { Sparkle } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\r\nimport { getTrad } from '../../utils/getTrad';\r\nimport { AttributeIcon, IconByType } from '../AttributeIcon';\r\n\r\nimport { OptionBoxWrapper } from './OptionBoxWrapper';\r\n\r\nconst newAttributes: string[] = [];\r\n\r\nconst NewBadge = () => (\r\n  <Flex grow={1} justifyContent=\"flex-end\">\r\n    <Flex gap={1} hasRadius background=\"alternative100\" padding={`0.2rem 0.4rem`}>\r\n      <Sparkle width={`1rem`} height={`1rem`} fill=\"alternative600\" />\r\n      <Typography textColor=\"alternative600\" variant=\"sigma\">\r\n        New\r\n      </Typography>\r\n    </Flex>\r\n  </Flex>\r\n);\r\n\r\ntype AttributeOptionProps = {\r\n  type: IconByType;\r\n};\r\n\r\nexport const AttributeOption = ({ type = 'text' }: AttributeOptionProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { onClickSelectField } = useFormModalNavigation();\r\n\r\n  const handleClick = () => {\r\n    const step = type === 'component' ? '1' : null;\r\n\r\n    onClickSelectField({\r\n      attributeType: type,\r\n      step,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <OptionBoxWrapper padding={4} tag=\"button\" hasRadius type=\"button\" onClick={handleClick}>\r\n      <Flex>\r\n        <AttributeIcon type={type} />\r\n        <Box paddingLeft={4} width=\"100%\">\r\n          <Flex justifyContent=\"space-between\">\r\n            <Typography fontWeight=\"bold\" textColor=\"neutral800\">\r\n              {formatMessage({ id: getTrad(`attribute.${type}`), defaultMessage: type })}\r\n            </Typography>\r\n            {newAttributes.includes(type) && <NewBadge />}\r\n          </Flex>\r\n          <Flex>\r\n            <Typography variant=\"pi\" textColor=\"neutral600\">\r\n              {formatMessage({\r\n                id: getTrad(`attribute.${type}.description`),\r\n                defaultMessage: 'A type for modeling data',\r\n              })}\r\n            </Typography>\r\n          </Flex>\r\n        </Box>\r\n      </Flex>\r\n    </OptionBoxWrapper>\r\n  );\r\n};\r\n","import { Flex, Grid, KeyboardNavigable } from '@strapi/design-system';\r\n\r\nimport { IconByType } from '../AttributeIcon';\r\n\r\nimport { AttributeOption } from './AttributeOption';\r\n\r\ntype AttributeListProps = {\r\n  attributes: IconByType[][];\r\n};\r\n\r\nexport const AttributeList = ({ attributes }: AttributeListProps) => (\r\n  <KeyboardNavigable tagName=\"button\">\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={8}>\r\n      {attributes.map((attributeRow, index) => {\r\n        return (\r\n          // eslint-disable-next-line react/no-array-index-key\r\n          <Grid.Root key={index} gap={3}>\r\n            {attributeRow.map((attribute) => (\r\n              <Grid.Item key={attribute} col={6} direction=\"column\" alignItems=\"stretch\">\r\n                <AttributeOption type={attribute} />\r\n              </Grid.Item>\r\n            ))}\r\n          </Grid.Root>\r\n        );\r\n      })}\r\n    </Flex>\r\n  </KeyboardNavigable>\r\n);\r\n","import * as React from 'react';\r\n\r\nimport { StrapiAppContextValue } from '@strapi/admin/strapi-admin';\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\r\nimport { AttributeIcon, IconByType } from '../AttributeIcon';\r\n\r\nimport { OptionBoxWrapper } from './OptionBoxWrapper';\r\n\r\nexport type CustomFieldOption = {\r\n  name: string;\r\n  type: IconByType;\r\n  icon: React.ComponentType;\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n  };\r\n  intlDescription: {\r\n    id: string;\r\n    defaultMessage: string;\r\n  };\r\n};\r\n\r\ntype CustomFieldOptionProps = {\r\n  customFieldUid: string;\r\n  customField: NonNullable<ReturnType<StrapiAppContextValue['customFields']['get']>>;\r\n};\r\n\r\nexport const CustomFieldOption = ({ customFieldUid, customField }: CustomFieldOptionProps) => {\r\n  const { type, intlLabel, intlDescription } = customField;\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { onClickSelectCustomField } = useFormModalNavigation();\r\n\r\n  const handleClick = () => {\r\n    onClickSelectCustomField({\r\n      attributeType: type,\r\n      customFieldUid,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <OptionBoxWrapper padding={4} tag=\"button\" hasRadius type=\"button\" onClick={handleClick}>\r\n      <Flex>\r\n        <AttributeIcon type={type} customField={customFieldUid} />\r\n        <Box paddingLeft={4}>\r\n          <Flex>\r\n            <Typography fontWeight=\"bold\" textColor=\"neutral800\">\r\n              {formatMessage(intlLabel)}\r\n            </Typography>\r\n          </Flex>\r\n          <Flex>\r\n            <Typography variant=\"pi\" textColor=\"neutral600\">\r\n              {formatMessage(intlDescription)}\r\n            </Typography>\r\n          </Flex>\r\n        </Box>\r\n      </Flex>\r\n    </OptionBoxWrapper>\r\n  );\r\n};\r\n","import { Box, Flex, Typography, LinkButton } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport * as qs from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTrad } from '../../utils';\r\n\r\nconst EmptyCard = styled(Box)`\r\n  background: ${({ theme }) =>\r\n    `linear-gradient(180deg, rgba(234, 234, 239, 0) 0%, ${theme.colors.neutral150} 100%)`};\r\n  opacity: 0.33;\r\n`;\r\n\r\nexport const EmptyCardGrid = () => {\r\n  return (\r\n    <Flex wrap=\"wrap\" gap={4}>\r\n      {[...Array(4)].map((_, idx) => {\r\n        return (\r\n          <EmptyCard\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            key={`empty-card-${idx}`}\r\n            height=\"138px\"\r\n            width=\"375px\"\r\n            hasRadius\r\n          />\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport const EmptyAttributes = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <EmptyCardGrid />\r\n      <Box position=\"absolute\" top={6} width=\"100%\">\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" direction=\"column\">\r\n          <EmptyDocuments width=\"160px\" height=\"88px\" />\r\n          <Box paddingTop={6} paddingBottom={4}>\r\n            <Box textAlign=\"center\">\r\n              <Typography variant=\"delta\" tag=\"p\" textColor=\"neutral600\">\r\n                {formatMessage({\r\n                  id: getTrad('modalForm.empty.heading'),\r\n                  defaultMessage: 'Nothing in here yet.',\r\n                })}\r\n              </Typography>\r\n              <Box paddingTop={4}>\r\n                <Typography variant=\"delta\" tag=\"p\" textColor=\"neutral600\">\r\n                  {formatMessage({\r\n                    id: getTrad('modalForm.empty.sub-heading'),\r\n                    defaultMessage:\r\n                      'Find what you are looking for through a wide range of extensions.',\r\n                  })}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n          <LinkButton\r\n            tag={Link}\r\n            to={`/marketplace?${qs.stringify({ categories: ['Custom fields'] })}`}\r\n            variant=\"secondary\"\r\n            startIcon={<Plus />}\r\n          >\r\n            {formatMessage({\r\n              id: getTrad('modalForm.empty.button'),\r\n              defaultMessage: 'Add custom fields',\r\n            })}\r\n          </LinkButton>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStrapiApp } from '@strapi/admin/strapi-admin';\r\nimport { Flex, Grid, KeyboardNavigable, Link } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../utils';\r\n\r\nimport { CustomFieldOption } from './CustomFieldOption';\r\nimport { EmptyAttributes } from './EmptyAttributes';\r\n\r\nexport const CustomFieldsList = () => {\r\n  const { formatMessage } = useIntl();\r\n  const getAllCustomFields = useStrapiApp('CustomFieldsList', (state) => state.customFields.getAll);\r\n  // TODO change this once useCustomFields is typed (helper-plugin types are solved)\r\n  const registeredCustomFields = Object.entries(getAllCustomFields());\r\n\r\n  if (!registeredCustomFields.length) {\r\n    return <EmptyAttributes />;\r\n  }\r\n\r\n  // Sort the array alphabetically by customField name\r\n  const sortedCustomFields = registeredCustomFields.sort((a, b) =>\r\n    a[1].name > b[1].name ? 1 : -1\r\n  );\r\n\r\n  return (\r\n    <KeyboardNavigable tagName=\"button\">\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3}>\r\n        <Grid.Root gap={3}>\r\n          {sortedCustomFields.map(([uid, customField]) => (\r\n            <Grid.Item key={uid} col={6} direction=\"column\" alignItems=\"stretch\">\r\n              <CustomFieldOption key={uid} customFieldUid={uid} customField={customField} />\r\n            </Grid.Item>\r\n          ))}\r\n        </Grid.Root>\r\n        <Link\r\n          href=\"https://docs.strapi.io/developer-docs/latest/development/custom-fields.html\"\r\n          isExternal\r\n        >\r\n          {formatMessage({\r\n            id: getTrad('modalForm.tabs.custom.howToLink'),\r\n            defaultMessage: 'How to add custom fields',\r\n          })}\r\n        </Link>\r\n      </Flex>\r\n    </KeyboardNavigable>\r\n  );\r\n};\r\n","/**\r\n *\r\n * AttributeOptions\r\n *\r\n */\r\n\r\nimport { Divider, Flex, Modal, Tabs, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../utils';\r\nimport { IconByType } from '../AttributeIcon';\r\n\r\nimport { AttributeList } from './AttributeList';\r\nimport { CustomFieldsList } from './CustomFieldsList';\r\n\r\ntype AttributeOptionsProps = {\r\n  attributes: IconByType[][];\r\n  forTarget: string;\r\n  kind: string;\r\n};\r\n\r\nexport const AttributeOptions = ({ attributes, forTarget, kind }: AttributeOptionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const defaultTabId = getTrad('modalForm.tabs.default');\r\n  const customTabId = getTrad('modalForm.tabs.custom');\r\n\r\n  const titleIdSuffix = forTarget.includes('component') ? 'component' : kind;\r\n  const titleId = getTrad(`modalForm.sub-header.chooseAttribute.${titleIdSuffix}`);\r\n\r\n  return (\r\n    <Modal.Body>\r\n      <Tabs.Root variant=\"simple\" defaultValue=\"default\">\r\n        <Flex justifyContent=\"space-between\">\r\n          <Typography variant=\"beta\" tag=\"h2\">\r\n            {formatMessage({ id: titleId, defaultMessage: 'Select a field' })}\r\n          </Typography>\r\n          <Tabs.List>\r\n            <Tabs.Trigger value=\"default\">\r\n              {formatMessage({ id: defaultTabId, defaultMessage: 'Default' })}\r\n            </Tabs.Trigger>\r\n            <Tabs.Trigger value=\"custom\">\r\n              {formatMessage({ id: customTabId, defaultMessage: 'Custom' })}\r\n            </Tabs.Trigger>\r\n          </Tabs.List>\r\n        </Flex>\r\n        <Divider marginBottom={6} />\r\n        <Tabs.Content value=\"default\">\r\n          <AttributeList attributes={attributes} />\r\n        </Tabs.Content>\r\n        <Tabs.Content value=\"custom\">\r\n          <CustomFieldsList />\r\n        </Tabs.Content>\r\n      </Tabs.Root>\r\n    </Modal.Body>\r\n  );\r\n};\r\n","import { Field, SingleSelect, SingleSelectOption } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { IntlLabel } from '../types';\r\n\r\ninterface Metadata {\r\n  intlLabel: IntlLabel;\r\n  disabled?: boolean;\r\n  hidden?: boolean;\r\n}\r\n\r\ninterface Option {\r\n  metadatas: Metadata;\r\n  key: string | number;\r\n  value: string | number;\r\n}\r\n\r\ninterface BooleanDefaultValueSelectProps {\r\n  intlLabel: IntlLabel;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  options: Option[];\r\n  value?: any;\r\n}\r\n\r\nexport const BooleanDefaultValueSelect = ({\r\n  intlLabel,\r\n  name,\r\n  options,\r\n  onChange,\r\n  value = null,\r\n}: BooleanDefaultValueSelectProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const label = intlLabel.id\r\n    ? formatMessage(\r\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n        { ...intlLabel.values }\r\n      )\r\n    : name;\r\n\r\n  const handleChange = (value: any) => {\r\n    let nextValue: boolean | string = '';\r\n\r\n    if (value === 'true') {\r\n      nextValue = true;\r\n    }\r\n\r\n    if (value === 'false') {\r\n      nextValue = false;\r\n    }\r\n\r\n    onChange({ target: { name, value: nextValue, type: 'select-default-boolean' } });\r\n  };\r\n\r\n  return (\r\n    <Field.Root name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <SingleSelect onChange={handleChange} value={(value === null ? '' : value).toString()}>\r\n        {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\r\n          return (\r\n            <SingleSelectOption key={key} value={value} disabled={disabled} hidden={hidden}>\r\n              {/* No need to translate the options */}\r\n              {intlLabel.defaultMessage}\r\n            </SingleSelectOption>\r\n          );\r\n        })}\r\n      </SingleSelect>\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { Flex, inputFocusStyle } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst Wrapper = styled(Flex)`\r\n  position: relative;\r\n  align-items: stretch;\r\n\r\n  label {\r\n    border-radius: 4px;\r\n    max-width: 50%;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    flex: 1;\r\n    border-radius: 4px;\r\n    border: 1px solid ${({ theme }) => theme.colors.neutral200};\r\n\r\n    ${inputFocusStyle()}\r\n  }\r\n\r\n  input {\r\n    position: absolute;\r\n    opacity: 0;\r\n  }\r\n\r\n  .option {\r\n    height: 100%;\r\n    border-radius: 4px;\r\n    will-change: transform, opacity;\r\n    background: ${({ theme }) => theme.colors.neutral0};\r\n\r\n    .checkmark {\r\n      position: relative;\r\n      display: block;\r\n      will-change: transform;\r\n      background: ${({ theme }) => theme.colors.neutral0};\r\n      width: ${({ theme }) => theme.spaces[5]};\r\n      height: ${({ theme }) => theme.spaces[5]};\r\n      border: solid 1px ${({ theme }) => theme.colors.neutral300};\r\n      border-radius: 50%;\r\n\r\n      &:before,\r\n      &:after {\r\n        content: '';\r\n        display: block;\r\n        border-radius: 50%;\r\n        width: ${({ theme }) => theme.spaces[3]};\r\n        height: ${({ theme }) => theme.spaces[3]};\r\n        position: absolute;\r\n        top: 3px;\r\n        left: 3px;\r\n      }\r\n\r\n      &:after {\r\n        transform: scale(0);\r\n        transition: inherit;\r\n        will-change: transform;\r\n      }\r\n    }\r\n  }\r\n\r\n  .container input:checked ~ div {\r\n    background: ${({ theme }) => theme.colors.primary100};\r\n    color: ${({ theme }) => theme.colors.primary600};\r\n    .checkmark {\r\n      border: solid 1px ${({ theme }) => theme.colors.primary600};\r\n      &::after {\r\n        background: ${({ theme }) => theme.colors.primary600};\r\n        transform: scale(1);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Wrapper };\r\n","import { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Wrapper } from './Styles';\r\n\r\nimport type { IntlLabel } from '../../types';\r\n\r\ninterface Radio {\r\n  title: IntlLabel;\r\n  description: IntlLabel;\r\n  value: any;\r\n}\r\n\r\ninterface CustomRadioGroupProps {\r\n  intlLabel: IntlLabel;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  radios?: Radio[];\r\n  value?: string | boolean;\r\n}\r\n\r\nexport const CustomRadioGroup = ({\r\n  intlLabel,\r\n  name,\r\n  onChange,\r\n  radios = [],\r\n  value,\r\n}: CustomRadioGroupProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\" htmlFor={name} tag=\"label\">\r\n        {formatMessage(intlLabel)}\r\n      </Typography>\r\n      <Wrapper gap={4} alignItems=\"stretch\">\r\n        {radios.map((radio) => {\r\n          return (\r\n            <label htmlFor={radio.value.toString()} key={radio.value} className=\"container\">\r\n              <input\r\n                id={radio.value.toString()}\r\n                name={name}\r\n                className=\"option-input\"\r\n                checked={radio.value === value}\r\n                value={radio.value}\r\n                key={radio.value}\r\n                onChange={onChange}\r\n                type=\"radio\"\r\n              />\r\n              <Box className=\"option\" padding={4}>\r\n                <Flex>\r\n                  <Box paddingRight={4}>\r\n                    <span className=\"checkmark\" />\r\n                  </Box>\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n                    <Typography fontWeight=\"bold\">{formatMessage(radio.title)}</Typography>\r\n                    <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                      {formatMessage(radio.description)}\r\n                    </Typography>\r\n                  </Flex>\r\n                </Flex>\r\n              </Box>\r\n            </label>\r\n          );\r\n        })}\r\n      </Wrapper>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { IntlLabel } from '../types';\r\n\r\nimport { CustomRadioGroup } from './CustomRadioGroup';\r\n\r\ninterface BooleanRadioGroupProps {\r\n  intlLabel: IntlLabel;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n}\r\n\r\nexport const BooleanRadioGroup = ({\r\n  onChange,\r\n  name,\r\n  intlLabel,\r\n  ...rest\r\n}: BooleanRadioGroupProps) => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const checked = e.target.value !== 'false';\r\n\r\n    onChange({ target: { name, value: checked, type: 'boolean-radio-group' } });\r\n  };\r\n\r\n  return <CustomRadioGroup {...rest} name={name} onChange={handleChange} intlLabel={intlLabel} />;\r\n};\r\n","import { Box, Checkbox, Field, Flex, NumberInput, TextInput } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { IntlLabel } from '../types';\r\n\r\ninterface CheckboxWithNumberFieldProps {\r\n  error?: string;\r\n  intlLabel: IntlLabel;\r\n  modifiedData: Record<string, any>;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  value?: any;\r\n}\r\n\r\nexport const CheckboxWithNumberField = ({\r\n  error,\r\n  intlLabel,\r\n  modifiedData,\r\n  name,\r\n  onChange,\r\n  value = null,\r\n}: CheckboxWithNumberFieldProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const label = intlLabel.id\r\n    ? formatMessage(\r\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n        { ...intlLabel.values }\r\n      )\r\n    : name;\r\n\r\n  const type = modifiedData.type === 'biginteger' ? 'text' : 'number';\r\n\r\n  const disabled = !modifiedData.type;\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <Checkbox\r\n        id={name}\r\n        name={name}\r\n        onCheckedChange={(value) => {\r\n          const initValue = type === 'text' ? '0' : 0;\r\n          const nextValue = value ? initValue : null;\r\n\r\n          onChange({ target: { name, value: nextValue } });\r\n        }}\r\n        checked={value !== null}\r\n      >\r\n        {label}\r\n      </Checkbox>\r\n      {value !== null && (\r\n        <Box paddingLeft={6} style={{ maxWidth: '200px' }}>\r\n          {type === 'text' ? (\r\n            <Field.Root error={errorMessage} name={name}>\r\n              <TextInput\r\n                aria-label={label}\r\n                disabled={disabled}\r\n                onChange={onChange}\r\n                value={value === null ? '' : value}\r\n              />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          ) : (\r\n            <Field.Root error={errorMessage} name={name}>\r\n              <NumberInput\r\n                aria-label={label}\r\n                disabled={disabled}\r\n                onValueChange={(value: any) => {\r\n                  onChange({ target: { name, value: value ?? 0, type } });\r\n                }}\r\n                value={value || 0}\r\n              />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n","import { useNotification } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../utils';\r\n\r\nimport { CustomRadioGroup } from './CustomRadioGroup';\r\n\r\nimport type { IntlLabel } from '../types';\r\n\r\ninterface Radio {\r\n  title: IntlLabel;\r\n  description: IntlLabel;\r\n  value: any;\r\n}\r\n\r\ninterface ContentTypeRadioGroupProps {\r\n  intlLabel: IntlLabel;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  radios?: Radio[];\r\n  value?: string | boolean;\r\n}\r\n\r\nexport const ContentTypeRadioGroup = ({ onChange, ...rest }: ContentTypeRadioGroupProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n\r\n  const handleChange = (e: any) => {\r\n    toggleNotification({\r\n      type: 'info',\r\n      message: formatMessage({\r\n        id: getTrad('contentType.kind.change.warning'),\r\n        defaultMessage:\r\n          'You just changed the kind of a content type: API will be reset (routes, controllers, and services will be overwritten).',\r\n      }),\r\n    });\r\n\r\n    onChange(e);\r\n  };\r\n\r\n  return <CustomRadioGroup {...rest} onChange={handleChange} />;\r\n};\r\n","/**\r\n *\r\n * DraftAndPublishToggle\r\n *\r\n */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport { ConfirmDialog } from '@strapi/admin/strapi-admin';\r\nimport { Button, Checkbox, CheckboxProps, Dialog, Field } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../utils';\r\n\r\nimport type { IntlLabel } from '../types';\r\n\r\ninterface Description {\r\n  id: string;\r\n  defaultMessage: string;\r\n  values?: Record<string, any>;\r\n}\r\n\r\ninterface DraftAndPublishToggleProps {\r\n  description?: Description;\r\n  disabled?: boolean;\r\n  intlLabel: IntlLabel;\r\n  isCreating: boolean;\r\n  name: string;\r\n  onChange: (value: { target: { name: string; value: boolean } }) => void;\r\n  value?: boolean;\r\n}\r\n\r\nexport const DraftAndPublishToggle = ({\r\n  description,\r\n  disabled = false,\r\n  intlLabel,\r\n  isCreating,\r\n  name,\r\n  onChange,\r\n  value = false,\r\n}: DraftAndPublishToggleProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [showWarning, setShowWarning] = useState(false);\r\n  const label = intlLabel.id\r\n    ? formatMessage(\r\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n        { ...intlLabel.values }\r\n      )\r\n    : name;\r\n\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { ...description.values }\r\n      )\r\n    : '';\r\n\r\n  const handleConfirm = () => {\r\n    onChange({ target: { name, value: false } });\r\n\r\n    setShowWarning(false);\r\n  };\r\n\r\n  const handleChange: CheckboxProps['onCheckedChange'] = (checked) => {\r\n    if (!checked && !isCreating) {\r\n      setShowWarning(true);\r\n\r\n      return;\r\n    }\r\n\r\n    onChange({ target: { name, value: !!checked } });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Field.Root hint={hint} name={name}>\r\n        <Checkbox checked={value} disabled={disabled} onCheckedChange={handleChange}>\r\n          {label}\r\n        </Checkbox>\r\n        <Field.Hint />\r\n      </Field.Root>\r\n\r\n      <Dialog.Root open={showWarning} onOpenChange={(isOpen) => setShowWarning(isOpen)}>\r\n        <ConfirmDialog\r\n          endAction={\r\n            <Button onClick={handleConfirm} variant=\"danger\" width=\"100%\" justifyContent=\"center\">\r\n              {formatMessage({\r\n                id: getTrad('popUpWarning.draft-publish.button.confirm'),\r\n                defaultMessage: 'Yes, disable',\r\n              })}\r\n            </Button>\r\n          }\r\n        >\r\n          {formatMessage({\r\n            id: getTrad('popUpWarning.draft-publish.message'),\r\n            defaultMessage: 'If you disable the draft & publish, your drafts will be deleted.',\r\n          })}\r\n        </ConfirmDialog>\r\n      </Dialog.Root>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n *\r\n * FormModalEndActions\r\n *\r\n */\r\n\r\nimport { SyntheticEvent } from 'react';\r\n\r\nimport { Button, Flex } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../utils';\r\n\r\ntype FormModalEndActionsProps = {\r\n  categoryName?: string;\r\n  deleteCategory: (categoryName: string) => void;\r\n  deleteComponent: () => void;\r\n  deleteContentType: () => void;\r\n  isAttributeModal: boolean;\r\n  isCustomFieldModal: boolean;\r\n  isComponentAttribute: boolean;\r\n  isComponentModal: boolean;\r\n  isComponentToDzModal: boolean;\r\n  isContentTypeModal: boolean;\r\n  isCreatingComponent: boolean;\r\n  isCreatingComponentAttribute: boolean;\r\n  isCreatingComponentInDz: boolean;\r\n  isCreatingComponentWhileAddingAField: boolean;\r\n  isCreatingContentType: boolean;\r\n  isCreatingDz: boolean;\r\n  isDzAttribute: boolean;\r\n  isEditingAttribute: boolean;\r\n  isEditingCategory: boolean;\r\n  isInFirstComponentStep: boolean;\r\n  onSubmitAddComponentAttribute: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitAddComponentToDz: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitCreateContentType: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitCreateComponent: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitCreateDz: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitEditAttribute: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitEditCategory: (e: SyntheticEvent) => void;\r\n  onSubmitEditComponent: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitEditContentType: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitEditCustomFieldAttribute: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onSubmitEditDz: (e: SyntheticEvent, shouldContinue: boolean) => void;\r\n  onClickFinish: () => void;\r\n};\r\n\r\nexport const FormModalEndActions = ({\r\n  categoryName,\r\n  deleteCategory,\r\n  deleteComponent,\r\n  deleteContentType,\r\n  isAttributeModal,\r\n  isCustomFieldModal,\r\n  isComponentAttribute,\r\n  isComponentToDzModal,\r\n  isContentTypeModal,\r\n  isCreatingComponent,\r\n  isCreatingComponentAttribute,\r\n  isCreatingComponentInDz,\r\n  isCreatingComponentWhileAddingAField,\r\n  isCreatingContentType,\r\n  isCreatingDz,\r\n  isComponentModal,\r\n  isDzAttribute,\r\n  isEditingAttribute,\r\n  isEditingCategory,\r\n  isInFirstComponentStep,\r\n  onSubmitAddComponentAttribute,\r\n  onSubmitAddComponentToDz,\r\n  onSubmitCreateContentType,\r\n  onSubmitCreateComponent,\r\n  onSubmitCreateDz,\r\n  onSubmitEditAttribute,\r\n  onSubmitEditCategory,\r\n  onSubmitEditComponent,\r\n  onSubmitEditContentType,\r\n  onSubmitEditCustomFieldAttribute,\r\n  onSubmitEditDz,\r\n  onClickFinish,\r\n}: FormModalEndActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (isComponentToDzModal) {\r\n    if (isCreatingComponentInDz) {\r\n      return (\r\n        <Button\r\n          variant=\"secondary\"\r\n          type=\"submit\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitAddComponentToDz(e, true);\r\n          }}\r\n          startIcon={<Plus />}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad('form.button.add-first-field-to-created-component'),\r\n            defaultMessage: 'Add first field to the component',\r\n          })}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        variant=\"default\"\r\n        type=\"submit\"\r\n        onClick={(e: SyntheticEvent) => {\r\n          e.preventDefault();\r\n\r\n          onSubmitAddComponentToDz(e, false);\r\n        }}\r\n      >\r\n        {formatMessage({\r\n          id: 'global.finish',\r\n          defaultMessage: 'Finish',\r\n        })}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  if (isAttributeModal && isDzAttribute && !isCreatingDz) {\r\n    return (\r\n      <Button\r\n        variant=\"default\"\r\n        type=\"submit\"\r\n        onClick={(e: SyntheticEvent) => {\r\n          e.preventDefault();\r\n\r\n          onClickFinish();\r\n          onSubmitEditDz(e, false);\r\n        }}\r\n      >\r\n        {formatMessage({\r\n          id: 'global.finish',\r\n          defaultMessage: 'Finish',\r\n        })}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  if (isAttributeModal && isDzAttribute && isCreatingDz) {\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"secondary\"\r\n          type=\"submit\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitCreateDz(e, true);\r\n          }}\r\n          startIcon={<Plus />}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad('form.button.add-components-to-dynamiczone'),\r\n            defaultMessage: 'Add components to the zone',\r\n          })}\r\n        </Button>\r\n        {/* // TO FIX fix doesnt close the modal */}\r\n        {/* <Button\r\n          variant=\"default\"\r\n          type=\"button\"\r\n          onClick={e => {\r\n            e.preventDefault();\r\n\r\n            onSubmitCreateDz(e, false);\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'global.finish',\r\n            defaultMessage: 'Finish',\r\n          })}\r\n        </Button> */}\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (isAttributeModal && isComponentAttribute) {\r\n    if (isInFirstComponentStep) {\r\n      return (\r\n        <Button\r\n          variant=\"secondary\"\r\n          type=\"submit\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitAddComponentAttribute(e, true);\r\n          }}\r\n        >\r\n          {isCreatingComponentAttribute\r\n            ? formatMessage({\r\n                id: getTrad('form.button.configure-component'),\r\n                defaultMessage: 'Configure the component',\r\n              })\r\n            : formatMessage({\r\n                id: getTrad('form.button.select-component'),\r\n                defaultMessage: 'Configure the component',\r\n              })}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Flex gap={2}>\r\n        <Button\r\n          variant=\"secondary\"\r\n          type=\"submit\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitAddComponentAttribute(e, true);\r\n          }}\r\n          startIcon={<Plus />}\r\n        >\r\n          {isCreatingComponentWhileAddingAField\r\n            ? formatMessage({\r\n                id: getTrad('form.button.add-first-field-to-created-component'),\r\n                defaultMessage: 'Add first field to the component',\r\n              })\r\n            : formatMessage({\r\n                id: getTrad('form.button.add-field'),\r\n                defaultMessage: 'Add another field',\r\n              })}\r\n        </Button>\r\n        <Button\r\n          variant=\"default\"\r\n          type=\"button\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onClickFinish();\r\n            onSubmitAddComponentAttribute(e, false);\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'global.finish',\r\n            defaultMessage: 'Finish',\r\n          })}\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (isAttributeModal && !isComponentAttribute && !isDzAttribute) {\r\n    return (\r\n      <Flex gap={2}>\r\n        <Button\r\n          type={isEditingAttribute ? 'button' : 'submit'}\r\n          variant=\"secondary\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitEditAttribute(e, true);\r\n          }}\r\n          startIcon={<Plus />}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad('form.button.add-field'),\r\n            defaultMessage: 'Add another field',\r\n          })}\r\n        </Button>\r\n        <Button\r\n          type={isEditingAttribute ? 'submit' : 'button'}\r\n          variant=\"default\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onClickFinish();\r\n            onSubmitEditAttribute(e, false);\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'global.finish',\r\n            defaultMessage: 'Finish',\r\n          })}\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (isContentTypeModal) {\r\n    return (\r\n      <Flex gap={2}>\r\n        {!isCreatingContentType && (\r\n          <>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"danger\"\r\n              onClick={(e: SyntheticEvent) => {\r\n                e.preventDefault();\r\n                deleteContentType();\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'global.delete',\r\n                defaultMessage: 'Delete',\r\n              })}\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"default\"\r\n              onClick={(e: SyntheticEvent) => {\r\n                e.preventDefault();\r\n\r\n                onSubmitEditContentType(e, false);\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'global.finish',\r\n                defaultMessage: 'Finish',\r\n              })}\r\n            </Button>\r\n          </>\r\n        )}\r\n        {isCreatingContentType && (\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            onClick={(e: SyntheticEvent) => {\r\n              e.preventDefault();\r\n\r\n              onSubmitCreateContentType(e, true);\r\n            }}\r\n          >\r\n            {formatMessage({\r\n              id: 'global.continue',\r\n              defaultMessage: 'Continue',\r\n            })}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (isComponentModal) {\r\n    return (\r\n      <Flex gap={2}>\r\n        {!isCreatingComponent && (\r\n          <>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"danger\"\r\n              onClick={(e: SyntheticEvent) => {\r\n                e.preventDefault();\r\n                deleteComponent();\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'global.delete',\r\n                defaultMessage: 'Delete',\r\n              })}\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"default\"\r\n              onClick={(e: SyntheticEvent) => {\r\n                e.preventDefault();\r\n\r\n                onSubmitEditComponent(e, false);\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'global.finish',\r\n                defaultMessage: 'Finish',\r\n              })}\r\n            </Button>\r\n          </>\r\n        )}\r\n        {isCreatingComponent && (\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            onClick={(e: SyntheticEvent) => {\r\n              e.preventDefault();\r\n\r\n              onSubmitCreateComponent(e, true);\r\n            }}\r\n          >\r\n            {formatMessage({\r\n              id: 'global.continue',\r\n              defaultMessage: 'Continue',\r\n            })}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (isEditingCategory) {\r\n    return (\r\n      <Flex gap={2}>\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"danger\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n            if (categoryName) {\r\n              deleteCategory(categoryName);\r\n            }\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'global.delete',\r\n            defaultMessage: 'Delete',\r\n          })}\r\n        </Button>\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"default\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitEditCategory(e);\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'global.finish',\r\n            defaultMessage: 'finish',\r\n          })}\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (isCustomFieldModal) {\r\n    return (\r\n      <Flex gap={2}>\r\n        <Button\r\n          type={isEditingAttribute ? 'button' : 'submit'}\r\n          variant=\"secondary\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onSubmitEditCustomFieldAttribute(e, true);\r\n          }}\r\n          startIcon={<Plus />}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad('form.button.add-field'),\r\n            defaultMessage: 'Add another field',\r\n          })}\r\n        </Button>\r\n        <Button\r\n          type={isEditingAttribute ? 'submit' : 'button'}\r\n          variant=\"default\"\r\n          onClick={(e: SyntheticEvent) => {\r\n            e.preventDefault();\r\n\r\n            onClickFinish();\r\n            onSubmitEditCustomFieldAttribute(e, false);\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'global.finish',\r\n            defaultMessage: 'Finish',\r\n          })}\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n","/**\r\n *\r\n * FormModalHeader\r\n *\r\n */\r\nimport { Box, Flex, Breadcrumbs, Crumb, Link, Modal } from '@strapi/design-system';\r\nimport { ArrowLeft } from '@strapi/icons';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\nimport { useFormModalNavigation } from '../hooks/useFormModalNavigation';\r\nimport { getTrad } from '../utils';\r\n\r\nimport { AttributeIcon, IconByType } from './AttributeIcon';\r\n\r\nimport type { SchemaType } from '../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\ninterface Header {\r\n  label: string;\r\n  info?: { category: string; name: string };\r\n}\r\n\r\ninterface FormModalHeaderProps {\r\n  actionType?: string | null;\r\n  attributeName: string;\r\n  attributeType: IconByType;\r\n  categoryName: string;\r\n  contentTypeKind: IconByType;\r\n  dynamicZoneTarget: string;\r\n  forTarget: SchemaType;\r\n  modalType: string | null;\r\n  targetUid: Internal.UID.Schema;\r\n  customFieldUid?: string | null;\r\n  showBackLink?: boolean;\r\n}\r\n\r\nexport const FormModalHeader = ({\r\n  actionType = null,\r\n  attributeName,\r\n  attributeType,\r\n  categoryName,\r\n  contentTypeKind,\r\n  dynamicZoneTarget,\r\n  forTarget,\r\n  modalType = null,\r\n  targetUid,\r\n  customFieldUid = null,\r\n  showBackLink = false,\r\n}: FormModalHeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { modifiedData } = useDataManager();\r\n  const { onOpenModalAddField } = useFormModalNavigation();\r\n\r\n  let icon: IconByType = 'component';\r\n  let headers: Header[] = [];\r\n\r\n  const schema = modifiedData?.[forTarget]?.[targetUid] || modifiedData?.[forTarget] || null;\r\n  const displayName = schema?.schema.displayName;\r\n\r\n  if (modalType === 'contentType') {\r\n    icon = contentTypeKind;\r\n  }\r\n\r\n  if (['component', 'editCategory'].includes(modalType || '')) {\r\n    icon = 'component';\r\n  }\r\n\r\n  const isCreatingMainSchema = ['component', 'contentType'].includes(modalType || '');\r\n\r\n  if (isCreatingMainSchema) {\r\n    let headerId = getTrad(`modalForm.component.header-${actionType}`);\r\n\r\n    if (modalType === 'contentType') {\r\n      headerId = getTrad(`modalForm.${contentTypeKind}.header-create`);\r\n    }\r\n\r\n    if (actionType === 'edit') {\r\n      headerId = getTrad(`modalForm.header-edit`);\r\n    }\r\n\r\n    return (\r\n      <Modal.Header>\r\n        <Flex>\r\n          <Box>\r\n            <AttributeIcon type={icon} />\r\n          </Box>\r\n          <Box paddingLeft={3}>\r\n            <Modal.Title>{formatMessage({ id: headerId }, { name: displayName })}</Modal.Title>\r\n          </Box>\r\n        </Flex>\r\n      </Modal.Header>\r\n    );\r\n  }\r\n\r\n  headers = [\r\n    {\r\n      label: displayName,\r\n      info: { category: schema?.category || null, name: schema?.schema.displayName },\r\n    },\r\n  ];\r\n\r\n  if (modalType === 'chooseAttribute') {\r\n    icon = ['component', 'components'].includes(forTarget) ? 'component' : schema.schema.kind;\r\n  }\r\n\r\n  if (modalType === 'addComponentToDynamicZone') {\r\n    icon = 'dynamiczone';\r\n    headers.push({ label: dynamicZoneTarget });\r\n  }\r\n\r\n  if (modalType === 'attribute' || modalType === 'customField') {\r\n    icon = attributeType;\r\n    headers.push({ label: attributeName });\r\n  }\r\n\r\n  if (modalType === 'editCategory') {\r\n    const label = formatMessage({\r\n      id: getTrad('modalForm.header.categories'),\r\n      defaultMessage: 'Categories',\r\n    });\r\n\r\n    headers = [{ label }, { label: categoryName }];\r\n  }\r\n\r\n  return (\r\n    <Modal.Header>\r\n      <Flex gap={3}>\r\n        {showBackLink && (\r\n          // This is a workaround and should use the LinkButton with a variant that currently doesn't exist\r\n          <Link\r\n            aria-label={formatMessage({\r\n              id: getTrad('modalForm.header.back'),\r\n              defaultMessage: 'Back',\r\n            })}\r\n            startIcon={<ArrowLeft />}\r\n            onClick={() => onOpenModalAddField({ forTarget, targetUid })}\r\n            href=\"#back\"\r\n            isExternal={false}\r\n          />\r\n        )}\r\n        <AttributeIcon type={icon} customField={customFieldUid} />\r\n\r\n        <Breadcrumbs label={headers.map(({ label }) => label).join(',')}>\r\n          {headers.map(({ label, info }, index, arr) => {\r\n            label = upperFirst(label);\r\n\r\n            if (!label) {\r\n              return null;\r\n            }\r\n\r\n            const key = `${label}.${index}`;\r\n\r\n            if (info?.category) {\r\n              label = `${label} (${upperFirst(info.category)} - ${upperFirst(info.name)})`;\r\n            }\r\n\r\n            return (\r\n              <Crumb isCurrent={index === arr.length - 1} key={key}>\r\n                {label}\r\n              </Crumb>\r\n            );\r\n          })}\r\n        </Breadcrumbs>\r\n      </Flex>\r\n    </Modal.Header>\r\n  );\r\n};\r\n","import { StrapiAppContextValue } from '@strapi/admin/strapi-admin';\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../utils';\r\n\r\nimport type { SchemaType } from '../types';\r\n\r\ntype ModalTitleProps = {\r\n  forTarget?: SchemaType;\r\n  step?: string;\r\n  kind?: string;\r\n  modalType?: string;\r\n  actionType?: string;\r\n};\r\n\r\nexport const getModalTitleSubHeader = ({\r\n  modalType,\r\n  forTarget,\r\n  kind,\r\n  actionType,\r\n  step,\r\n}: ModalTitleProps) => {\r\n  switch (modalType) {\r\n    case 'chooseAttribute':\r\n      return getTrad(\r\n        `modalForm.sub-header.chooseAttribute.${\r\n          forTarget?.includes('component') ? 'component' : kind || 'collectionType'\r\n        }`\r\n      );\r\n    case 'attribute': {\r\n      return getTrad(\r\n        `modalForm.sub-header.attribute.${actionType}${\r\n          step !== 'null' && step !== null && actionType !== 'edit' ? '.step' : ''\r\n        }`\r\n      );\r\n    }\r\n    case 'customField': {\r\n      return getTrad(`modalForm.sub-header.attribute.${actionType}`);\r\n    }\r\n    case 'addComponentToDynamicZone':\r\n      return getTrad('modalForm.sub-header.addComponentToDynamicZone');\r\n    default:\r\n      return getTrad('configurations');\r\n  }\r\n};\r\n\r\ntype FormModalSubHeaderProps = {\r\n  actionType: string;\r\n  modalType: string;\r\n  forTarget: SchemaType;\r\n  kind?: string;\r\n  step?: string;\r\n  attributeType: string;\r\n  attributeName: string;\r\n  customField?: ReturnType<StrapiAppContextValue['customFields']['get']>;\r\n};\r\n\r\nexport const FormModalSubHeader = ({\r\n  actionType,\r\n  modalType,\r\n  forTarget,\r\n  kind,\r\n  step,\r\n  attributeType,\r\n  attributeName,\r\n  customField,\r\n}: FormModalSubHeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const intlLabel =\r\n    modalType === 'customField'\r\n      ? customField?.intlLabel\r\n      : { id: getTrad(`attribute.${attributeType}`) };\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingBottom={1} gap={1}>\r\n      <Typography tag=\"h2\" variant=\"beta\">\r\n        {formatMessage(\r\n          {\r\n            id: getModalTitleSubHeader({\r\n              actionType,\r\n              forTarget,\r\n              kind,\r\n              step,\r\n              modalType,\r\n            }),\r\n            defaultMessage: 'Add new field',\r\n          },\r\n          {\r\n            type: intlLabel ? upperFirst(formatMessage(intlLabel)) : '',\r\n            name: upperFirst(attributeName),\r\n            step,\r\n          }\r\n        )}\r\n      </Typography>\r\n      <Typography variant=\"pi\" textColor=\"neutral600\">\r\n        {formatMessage({\r\n          id: getTrad(`attribute.${attributeType}.description`),\r\n          defaultMessage: 'A type for modeling data',\r\n        })}\r\n      </Typography>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as Icons from '@strapi/icons';\r\nimport * as Symbols from '@strapi/icons/symbols';\r\n\r\nexport type Icon = (typeof Icons)[keyof typeof Icons] | (typeof Symbols)[keyof typeof Symbols];\r\n\r\nconst COMPONENT_ICONS: Record<string, Icon> = {\r\n  alien: Icons.Alien,\r\n  apps: Icons.GridNine,\r\n  archive: Icons.Archive,\r\n  arrowDown: Icons.ArrowDown,\r\n  arrowLeft: Icons.ArrowLeft,\r\n  arrowRight: Icons.ArrowRight,\r\n  arrowUp: Icons.ArrowUp,\r\n  attachment: Icons.Paperclip,\r\n  bell: Icons.Bell,\r\n  bold: Icons.Bold,\r\n  book: Icons.Book,\r\n  briefcase: Icons.Briefcase,\r\n  brush: Icons.PaintBrush,\r\n  bulletList: Icons.BulletList,\r\n  calendar: Icons.Calendar,\r\n  car: Icons.Car,\r\n  cast: Icons.Cast,\r\n  chartBubble: Icons.ChartBubble,\r\n  chartCircle: Icons.ChartCircle,\r\n  chartPie: Icons.ChartPie,\r\n  check: Icons.Check,\r\n  clock: Icons.Clock,\r\n  cloud: Icons.Cloud,\r\n  code: Icons.Code,\r\n  cog: Icons.Cog,\r\n  collapse: Icons.Collapse,\r\n  command: Icons.Command,\r\n  connector: Icons.Faders,\r\n  crop: Icons.Crop,\r\n  crown: Icons.Crown,\r\n  cup: Icons.Coffee,\r\n  cursor: Icons.Cursor,\r\n  dashboard: Icons.SquaresFour,\r\n  database: Icons.Database,\r\n  discuss: Icons.Discuss,\r\n  doctor: Icons.Stethoscope,\r\n  earth: Icons.Earth,\r\n  emotionHappy: Icons.EmotionHappy,\r\n  emotionUnhappy: Icons.EmotionUnhappy,\r\n  envelop: Icons.Mail,\r\n  exit: Icons.SignOut,\r\n  expand: Icons.Expand,\r\n  eye: Icons.Eye,\r\n  feather: Icons.Feather,\r\n  file: Icons.File,\r\n  fileError: Icons.FileError,\r\n  filePdf: Icons.FilePdf,\r\n  filter: Icons.Filter,\r\n  folder: Icons.Folder,\r\n  gate: Icons.CastleTurret,\r\n  gift: Icons.Gift,\r\n  globe: Icons.Globe,\r\n  grid: Icons.GridFour,\r\n  handHeart: Icons.HandHeart,\r\n  hashtag: Icons.Hashtag,\r\n  headphone: Icons.Headphones,\r\n  heart: Icons.Heart,\r\n  house: Icons.House,\r\n  information: Icons.Information,\r\n  italic: Icons.Italic,\r\n  key: Icons.Key,\r\n  landscape: Icons.Images,\r\n  layer: Icons.ListPlus,\r\n  layout: Icons.Layout,\r\n  lightbulb: Icons.Lightbulb,\r\n  link: Icons.Link,\r\n  lock: Icons.Lock,\r\n  magic: Icons.Magic,\r\n  manyToMany: Icons.ManyToMany,\r\n  manyToOne: Icons.ManyToOne,\r\n  manyWays: Icons.ManyWays,\r\n  medium: Symbols.Medium,\r\n  message: Icons.Message,\r\n  microphone: Icons.Microphone,\r\n  monitor: Icons.Monitor,\r\n  moon: Icons.Moon,\r\n  music: Icons.MusicNotes,\r\n  oneToMany: Icons.OneToMany,\r\n  oneToOne: Icons.OneToOne,\r\n  oneWay: Icons.OneWay,\r\n  paint: Icons.PaintBrush,\r\n  paintBrush: Icons.PaintBrush,\r\n  paperPlane: Icons.PaperPlane,\r\n  pencil: Icons.Pencil,\r\n  phone: Icons.Phone,\r\n  picture: Icons.Image,\r\n  pin: Icons.Pin,\r\n  pinMap: Icons.PinMap,\r\n  plane: Icons.Plane,\r\n  play: Icons.Play,\r\n  plus: Icons.Plus,\r\n  priceTag: Icons.PriceTag,\r\n  puzzle: Icons.PuzzlePiece,\r\n  question: Icons.Question,\r\n  quote: Icons.Quotes,\r\n  refresh: Icons.ArrowClockwise,\r\n  restaurant: Icons.Restaurant,\r\n  rocket: Icons.Rocket,\r\n  rotate: Icons.ArrowsCounterClockwise,\r\n  scissors: Icons.Scissors,\r\n  search: Icons.Search,\r\n  seed: Icons.Plant,\r\n  server: Icons.Server,\r\n  shield: Icons.Shield,\r\n  shirt: Icons.Shirt,\r\n  shoppingCart: Icons.ShoppingCart,\r\n  slideshow: Icons.PresentationChart,\r\n  stack: Icons.Stack,\r\n  star: Icons.Star,\r\n  store: Icons.Store,\r\n  strikeThrough: Icons.StrikeThrough,\r\n  sun: Icons.Sun,\r\n  television: Icons.Television,\r\n  thumbDown: Icons.ThumbDown,\r\n  thumbUp: Icons.ThumbUp,\r\n  train: Icons.Train,\r\n  twitter: Symbols.X,\r\n  typhoon: Icons.Typhoon,\r\n  underline: Icons.Underline,\r\n  user: Icons.User,\r\n  volumeMute: Icons.VolumeMute,\r\n  volumeUp: Icons.VolumeUp,\r\n  walk: Icons.Walk,\r\n  wheelchair: Icons.Wheelchair,\r\n  write: Icons.Feather,\r\n};\r\n\r\nexport { COMPONENT_ICONS };\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Field,\r\n  Flex,\r\n  IconButton,\r\n  inputFocusStyle,\r\n  Searchbar,\r\n  Tooltip,\r\n  Typography,\r\n  VisuallyHidden,\r\n} from '@strapi/design-system';\r\nimport { Search, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTrad } from '../../utils';\r\n\r\nimport { COMPONENT_ICONS } from './constants';\r\n\r\nimport type { IntlLabel } from '../../types';\r\n\r\nconst IconPickerWrapper = styled(Flex)`\r\n  label {\r\n    ${inputFocusStyle()}\r\n    border-radius: ${({ theme }) => theme.borderRadius};\r\n    border: 1px solid ${({ theme }) => theme.colors.neutral100};\r\n  }\r\n`;\r\n\r\ntype Icons = keyof typeof COMPONENT_ICONS;\r\n\r\ninterface IconPickProps {\r\n  iconKey: Icons;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  isSelected: boolean;\r\n  ariaLabel: string;\r\n}\r\n\r\nconst IconPick = ({ iconKey, name, onChange, isSelected, ariaLabel }: IconPickProps) => {\r\n  const Icon = COMPONENT_ICONS[iconKey];\r\n\r\n  return (\r\n    <Field.Root name={name} required={false}>\r\n      <Field.Label>\r\n        <VisuallyHidden>\r\n          {ariaLabel}\r\n          <Field.Input\r\n            type=\"radio\"\r\n            checked={isSelected}\r\n            onChange={onChange}\r\n            value={iconKey}\r\n            aria-checked={isSelected}\r\n          />\r\n        </VisuallyHidden>\r\n        <Flex\r\n          padding={2}\r\n          cursor=\"pointer\"\r\n          hasRadius\r\n          background={isSelected ? 'primary200' : undefined}\r\n        >\r\n          <Icon fill={isSelected ? 'primary600' : 'neutral300'} />\r\n        </Flex>\r\n      </Field.Label>\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nexport interface IconPickerProps {\r\n  intlLabel: IntlLabel;\r\n  name: string;\r\n  onChange: (value: { target: { name: string; value: string } }) => void;\r\n  value?: string;\r\n}\r\n\r\nexport const IconPicker = ({ intlLabel, name, onChange, value = '' }: IconPickerProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const [search, setSearch] = useState('');\r\n  const allIcons = Object.keys(COMPONENT_ICONS) as Icons[];\r\n  const [icons, setIcons] = useState(allIcons);\r\n  const searchIconRef = useRef(null);\r\n  const searchBarRef = useRef(null);\r\n\r\n  const toggleSearch = () => {\r\n    setShowSearch(!showSearch);\r\n  };\r\n\r\n  const onChangeSearch = ({ target: { value } }: { target: { value: string } }) => {\r\n    setSearch(value);\r\n    setIcons(() => allIcons.filter((icon) => icon.toLowerCase().includes(value.toLowerCase())));\r\n  };\r\n\r\n  const onClearSearch = () => {\r\n    toggleSearch();\r\n    setSearch('');\r\n    setIcons(allIcons);\r\n  };\r\n\r\n  const removeIconSelected = () => {\r\n    onChange({ target: { name, value: '' } });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showSearch) {\r\n      (searchBarRef.current as unknown as HTMLInputElement)?.focus();\r\n    }\r\n  }, [showSearch]);\r\n\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\" paddingBottom={2}>\r\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\" tag=\"label\">\r\n          {formatMessage(intlLabel)}\r\n        </Typography>\r\n        <Flex gap={1}>\r\n          {showSearch ? (\r\n            <Searchbar\r\n              ref={searchBarRef}\r\n              name=\"searchbar\"\r\n              placeholder={formatMessage({\r\n                id: getTrad('ComponentIconPicker.search.placeholder'),\r\n                defaultMessage: 'Search for an icon',\r\n              })}\r\n              onBlur={() => {\r\n                if (!search) {\r\n                  toggleSearch();\r\n                }\r\n              }}\r\n              onChange={onChangeSearch}\r\n              value={search}\r\n              onClear={onClearSearch}\r\n              clearLabel={formatMessage({\r\n                id: getTrad('IconPicker.search.clear.label'),\r\n                defaultMessage: 'Clear the icon search',\r\n              })}\r\n            >\r\n              {formatMessage({\r\n                id: getTrad('IconPicker.search.placeholder.label'),\r\n                defaultMessage: 'Search for an icon',\r\n              })}\r\n            </Searchbar>\r\n          ) : (\r\n            <IconButton\r\n              ref={searchIconRef}\r\n              onClick={toggleSearch}\r\n              withTooltip={false}\r\n              label={formatMessage({\r\n                id: getTrad('IconPicker.search.button.label'),\r\n                defaultMessage: 'Search icon button',\r\n              })}\r\n              variant=\"ghost\"\r\n            >\r\n              <Search />\r\n            </IconButton>\r\n          )}\r\n          {value && (\r\n            <Tooltip\r\n              label={formatMessage({\r\n                id: getTrad('IconPicker.remove.tooltip'),\r\n                defaultMessage: 'Remove the selected icon',\r\n              })}\r\n            >\r\n              <IconButton\r\n                onClick={removeIconSelected}\r\n                withTooltip={false}\r\n                label={formatMessage({\r\n                  id: getTrad('IconPicker.remove.button'),\r\n                  defaultMessage: 'Remove the selected icon',\r\n                })}\r\n                variant=\"ghost\"\r\n              >\r\n                <Trash />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n      <IconPickerWrapper\r\n        position=\"relative\"\r\n        padding={1}\r\n        background=\"neutral100\"\r\n        hasRadius\r\n        wrap=\"wrap\"\r\n        gap={2}\r\n        maxHeight=\"126px\"\r\n        overflow=\"auto\"\r\n        textAlign=\"center\"\r\n      >\r\n        {icons.length > 0 ? (\r\n          icons.map((iconKey) => (\r\n            <IconPick\r\n              key={iconKey}\r\n              iconKey={iconKey}\r\n              name={name}\r\n              onChange={onChange}\r\n              isSelected={iconKey === value}\r\n              ariaLabel={formatMessage(\r\n                {\r\n                  id: getTrad('IconPicker.icon.label'),\r\n                  defaultMessage: 'Select {icon} icon',\r\n                },\r\n                { icon: iconKey }\r\n              )}\r\n            />\r\n          ))\r\n        ) : (\r\n          <Box padding={4} grow={2}>\r\n            <Typography variant=\"delta\" textColor=\"neutral600\" textAlign=\"center\">\r\n              {formatMessage({\r\n                id: getTrad('IconPicker.emptyState.label'),\r\n                defaultMessage: 'No icon found',\r\n              })}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </IconPickerWrapper>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nimport { Field, TextInput } from '@strapi/design-system';\r\nimport pluralize from 'pluralize';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { nameToSlug } from '../utils/nameToSlug';\r\n\r\nimport type { IntlLabel } from '../types';\r\n\r\ninterface Description {\r\n  id: string;\r\n  defaultMessage: string;\r\n  values?: Record<string, any>;\r\n}\r\n\r\ninterface PluralNameProps {\r\n  description?: Description;\r\n  error?: string;\r\n  intlLabel: IntlLabel;\r\n  modifiedData: Record<string, any>;\r\n  name: string;\r\n  onChange: (value: { target: { name: string; value: string } }) => void;\r\n  value?: string;\r\n}\r\n\r\nexport const PluralName = ({\r\n  description,\r\n  error,\r\n  intlLabel,\r\n  modifiedData,\r\n  name,\r\n  onChange,\r\n  value,\r\n}: PluralNameProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const onChangeRef = useRef(onChange);\r\n  const displayName = modifiedData?.displayName || '';\r\n\r\n  useEffect(() => {\r\n    if (displayName) {\r\n      const value = nameToSlug(displayName);\r\n\r\n      try {\r\n        const plural = pluralize(value, 2);\r\n        onChangeRef.current({ target: { name, value: plural } });\r\n      } catch (err) {\r\n        onChangeRef.current({ target: { name, value } });\r\n      }\r\n    } else {\r\n      onChangeRef.current({ target: { name, value: '' } });\r\n    }\r\n  }, [displayName, name]);\r\n\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { ...description.values }\r\n      )\r\n    : '';\r\n  const label = formatMessage(intlLabel);\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} hint={hint} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <TextInput onChange={onChange} value={value || ''} />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n","export const parseDateValue = (value: unknown): Date | undefined => {\r\n  if (value instanceof Date && isValidDate(value)) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === 'string' || typeof value === 'number') {\r\n    const date = new Date(value);\r\n    if (isValidDate(date)) {\r\n      return date;\r\n    }\r\n  }\r\n};\r\n\r\nconst isValidDate = (date: Date): boolean => !isNaN(date.getTime());\r\n","type TimeChangeHandler = (params: {\r\n  target: { name: string; value: string | undefined; type: string };\r\n}) => void;\r\n\r\ntype TimeChangeParams = {\r\n  value?: string;\r\n  onChange: TimeChangeHandler;\r\n  name: string;\r\n  type: string;\r\n};\r\n\r\n// The backend sends a value which has the following format: '00:45:00.000'\r\n// but the time picker only supports hours & minutes so we need to mutate the value\r\nconst removeSeconds = (time: string): string => {\r\n  const [hours, minutes] = time.split(':');\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\n// we need to send back the value with the same '00:45:00.000' format\r\nconst addSecondsAndMilliseconds = (time: string): string => {\r\n  return time.split(':').length === 2 ? `${time}:00.000` : time;\r\n};\r\n\r\nconst formatTimeForInput = (value?: string): string | undefined => {\r\n  if (!value) return;\r\n  return value.split(':').length > 2 ? removeSeconds(value) : value;\r\n};\r\n\r\nconst formatTimeForOutput = (value?: string): string | undefined => {\r\n  if (!value) return undefined;\r\n  return addSecondsAndMilliseconds(value);\r\n};\r\n\r\nexport const handleTimeChange = ({ value }: TimeChangeParams): string | undefined => {\r\n  const formattedInputTime = formatTimeForInput(value);\r\n\r\n  return formattedInputTime;\r\n};\r\n\r\nexport const handleTimeChangeEvent = (\r\n  onChange: TimeChangeHandler,\r\n  name: string,\r\n  type: string,\r\n  time?: string\r\n): void => {\r\n  const formattedOutputTime = formatTimeForOutput(time);\r\n\r\n  onChange({\r\n    target: {\r\n      name,\r\n      value: formattedOutputTime,\r\n      type,\r\n    },\r\n  });\r\n};\r\n","/**\r\n * TODO: we should be using the FormRenderer from the admin to do this,\r\n * but the CTB has no tests or types, so we can't refactor it safely.\r\n * So we're just adding this to the tech debt.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Checkbox,\r\n  DatePicker,\r\n  DateTimePicker,\r\n  Field,\r\n  JSONInput,\r\n  NumberInput,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Textarea,\r\n  TextInput,\r\n  TimePicker,\r\n  Toggle,\r\n} from '@strapi/design-system';\r\nimport { Eye, EyeStriked } from '@strapi/icons';\r\nimport formatISO from 'date-fns/formatISO';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { type MessageDescriptor, type PrimitiveType, useIntl } from 'react-intl';\r\n\r\nimport { parseDateValue } from '../utils/parseDateValue';\r\nimport { handleTimeChange, handleTimeChangeEvent } from '../utils/timeFormat';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\ninterface TranslationMessage extends MessageDescriptor {\r\n  values?: Record<string, PrimitiveType>;\r\n}\r\n\r\ninterface InputOption {\r\n  metadatas: {\r\n    intlLabel: TranslationMessage;\r\n    disabled: boolean;\r\n    hidden: boolean;\r\n  };\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\ninterface CustomInputProps<TAttribute extends Schema.Attribute.AnyAttribute>\r\n  extends Omit<GenericInputProps<TAttribute>, 'customInputs'> {\r\n  ref?: React.Ref<HTMLElement>;\r\n  hint?: string | React.JSX.Element | (string | React.JSX.Element)[];\r\n}\r\n\r\ninterface GenericInputProps<\r\n  TAttribute extends Schema.Attribute.AnyAttribute = Schema.Attribute.AnyAttribute,\r\n> {\r\n  attribute?: TAttribute;\r\n  autoComplete?: string;\r\n  customInputs?: Record<string, React.ComponentType<CustomInputProps<TAttribute>>>;\r\n  description?: TranslationMessage;\r\n  disabled?: boolean;\r\n  error?: string | TranslationMessage;\r\n  intlLabel: TranslationMessage;\r\n  labelAction?: React.ReactNode;\r\n  name: string;\r\n  onChange: (\r\n    payload: {\r\n      target: {\r\n        name: string;\r\n        value: Schema.Attribute.Value<TAttribute>;\r\n        type?: string;\r\n      };\r\n    },\r\n    shouldSetInitialValue?: boolean\r\n  ) => void;\r\n  options?: InputOption[];\r\n  placeholder?: TranslationMessage;\r\n  required?: boolean;\r\n  step?: number;\r\n  type: string;\r\n  // TODO: The value depends on the input type, too complicated to handle all cases here\r\n  value?: Schema.Attribute.Value<TAttribute>;\r\n  isNullable?: boolean;\r\n}\r\n\r\nconst GenericInput = ({\r\n  autoComplete,\r\n  customInputs,\r\n  description,\r\n  disabled,\r\n  intlLabel,\r\n  labelAction,\r\n  error,\r\n  name,\r\n  onChange,\r\n  options = [],\r\n  placeholder,\r\n  required,\r\n  step,\r\n  type,\r\n  value: defaultValue,\r\n  isNullable,\r\n  attribute,\r\n  ...rest\r\n}: GenericInputProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  // TODO: Workaround to get the field hint values if they exist on the type\r\n  const getFieldHintValue = (\r\n    attribute?: Schema.Attribute.AnyAttribute,\r\n    key?: keyof FieldSchema\r\n  ) => {\r\n    if (!attribute) return;\r\n\r\n    if (key === 'minLength' && key in attribute) {\r\n      return attribute[key];\r\n    }\r\n\r\n    if (key === 'maxLength' && key in attribute) {\r\n      return attribute[key];\r\n    }\r\n\r\n    if (key === 'max' && key in attribute) {\r\n      return attribute[key];\r\n    }\r\n\r\n    if (key === 'min' && key in attribute) {\r\n      return attribute[key];\r\n    }\r\n  };\r\n\r\n  const { hint } = useFieldHint({\r\n    description,\r\n    fieldSchema: {\r\n      minLength: getFieldHintValue(attribute, 'minLength'),\r\n      maxLength: getFieldHintValue(attribute, 'maxLength'),\r\n      max: getFieldHintValue(attribute, 'max'),\r\n      min: getFieldHintValue(attribute, 'min'),\r\n    },\r\n    type: attribute?.type || type,\r\n  });\r\n\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n  const CustomInput = customInputs ? customInputs[type] : null;\r\n\r\n  // the API always returns null, which throws an error in React,\r\n  // therefore we cast this case to undefined\r\n  const value = defaultValue ?? undefined;\r\n\r\n  /*\r\n   TODO: ideally we should pass in `defaultValue` and `value` for\r\n   inputs, in order to make them controlled components. This variable\r\n   acts as a fallback for now, to prevent React errors in devopment mode\r\n\r\n   See: https://github.com/strapi/strapi/pull/12861\r\n  */\r\n  const valueWithEmptyStringFallback = value ?? '';\r\n\r\n  function getErrorMessage(error: string | TranslationMessage | undefined) {\r\n    if (!error) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof error === 'string') {\r\n      return formatMessage({ id: error, defaultMessage: error });\r\n    }\r\n\r\n    const values = {\r\n      ...error.values,\r\n    };\r\n\r\n    return formatMessage(\r\n      {\r\n        id: error.id,\r\n        defaultMessage: error?.defaultMessage ?? error.id,\r\n      },\r\n      values\r\n    );\r\n  }\r\n\r\n  const errorMessage = getErrorMessage(error) ?? undefined;\r\n\r\n  if (CustomInput) {\r\n    return (\r\n      <CustomInput\r\n        {...rest}\r\n        attribute={attribute}\r\n        description={description}\r\n        hint={hint}\r\n        disabled={disabled}\r\n        intlLabel={intlLabel}\r\n        labelAction={labelAction}\r\n        error={errorMessage || ''}\r\n        name={name}\r\n        onChange={onChange}\r\n        options={options}\r\n        required={required}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        value={value}\r\n      />\r\n    );\r\n  }\r\n\r\n  const label = intlLabel.id\r\n    ? formatMessage(\r\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n        { ...intlLabel.values }\r\n      )\r\n    : name;\r\n\r\n  const formattedPlaceholder = placeholder\r\n    ? formatMessage(\r\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\r\n        { ...placeholder.values }\r\n      )\r\n    : '';\r\n\r\n  const getComponent = () => {\r\n    switch (type) {\r\n      case 'json': {\r\n        return (\r\n          <JSONInput\r\n            value={value}\r\n            disabled={disabled}\r\n            onChange={(json) => {\r\n              // Default to null when the field is not required and there is no input value\r\n              const value =\r\n                attribute && 'required' in attribute && !attribute?.required && !json.length\r\n                  ? null\r\n                  : json;\r\n              onChange({ target: { name, value } }, false);\r\n            }}\r\n            minHeight=\"25.2rem\"\r\n            maxHeight=\"50.4rem\"\r\n          />\r\n        );\r\n      }\r\n      case 'bool': {\r\n        return (\r\n          <Toggle\r\n            checked={defaultValue === null ? null : defaultValue || false}\r\n            disabled={disabled}\r\n            offLabel={formatMessage({\r\n              id: 'app.components.ToggleCheckbox.off-label',\r\n              defaultMessage: 'False',\r\n            })}\r\n            onLabel={formatMessage({\r\n              id: 'app.components.ToggleCheckbox.on-label',\r\n              defaultMessage: 'True',\r\n            })}\r\n            onChange={(e) => {\r\n              onChange({ target: { name, value: e.target.checked } });\r\n            }}\r\n          />\r\n        );\r\n      }\r\n      case 'checkbox': {\r\n        return (\r\n          <Checkbox\r\n            disabled={disabled}\r\n            onCheckedChange={(value) => {\r\n              onChange({ target: { name, value } });\r\n            }}\r\n            checked={Boolean(value)}\r\n          >\r\n            {label}\r\n          </Checkbox>\r\n        );\r\n      }\r\n      case 'datetime': {\r\n        const dateValue = parseDateValue(value);\r\n        return (\r\n          <DateTimePicker\r\n            clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\r\n            disabled={disabled}\r\n            onChange={(date) => {\r\n              // check if date is not null or undefined\r\n              const formattedDate = date ? date.toISOString() : null;\r\n\r\n              onChange({ target: { name, value: formattedDate, type } });\r\n            }}\r\n            onClear={() => onChange({ target: { name, value: null, type } })}\r\n            placeholder={formattedPlaceholder}\r\n            value={dateValue}\r\n          />\r\n        );\r\n      }\r\n      case 'date': {\r\n        const dateValue = parseDateValue(value);\r\n        return (\r\n          <DatePicker\r\n            clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\r\n            disabled={disabled}\r\n            onChange={(date) => {\r\n              onChange({\r\n                target: {\r\n                  name,\r\n                  value: date ? formatISO(date, { representation: 'date' }) : null,\r\n                  type,\r\n                },\r\n              });\r\n            }}\r\n            onClear={() => onChange({ target: { name, value: null, type } })}\r\n            placeholder={formattedPlaceholder}\r\n            value={dateValue}\r\n          />\r\n        );\r\n      }\r\n      case 'number': {\r\n        return (\r\n          <NumberInput\r\n            disabled={disabled}\r\n            onValueChange={(value) => {\r\n              onChange({ target: { name, value, type } });\r\n            }}\r\n            placeholder={formattedPlaceholder}\r\n            step={step}\r\n            value={value}\r\n          />\r\n        );\r\n      }\r\n      case 'email': {\r\n        return (\r\n          <TextInput\r\n            autoComplete={autoComplete}\r\n            disabled={disabled}\r\n            onChange={(e) => {\r\n              onChange({ target: { name, value: e.target.value, type } });\r\n            }}\r\n            placeholder={formattedPlaceholder}\r\n            type=\"email\"\r\n            value={valueWithEmptyStringFallback}\r\n          />\r\n        );\r\n      }\r\n      case 'timestamp':\r\n      case 'text':\r\n      case 'string': {\r\n        return (\r\n          <TextInput\r\n            autoComplete={autoComplete}\r\n            disabled={disabled}\r\n            onChange={(e) => {\r\n              onChange({ target: { name, value: e.target.value, type } });\r\n            }}\r\n            placeholder={formattedPlaceholder}\r\n            type=\"text\"\r\n            value={valueWithEmptyStringFallback}\r\n          />\r\n        );\r\n      }\r\n      case 'password': {\r\n        return (\r\n          <TextInput\r\n            autoComplete={autoComplete}\r\n            disabled={disabled}\r\n            endAction={\r\n              <button\r\n                aria-label={formatMessage({\r\n                  id: 'Auth.form.password.show-password',\r\n                  defaultMessage: 'Show password',\r\n                })}\r\n                onClick={() => {\r\n                  setShowPassword((prev) => !prev);\r\n                }}\r\n                style={{\r\n                  border: 'none',\r\n                  padding: 0,\r\n                  background: 'transparent',\r\n                }}\r\n                type=\"button\"\r\n              >\r\n                {showPassword ? <Eye fill=\"neutral500\" /> : <EyeStriked fill=\"neutral500\" />}\r\n              </button>\r\n            }\r\n            onChange={(e) => {\r\n              onChange({ target: { name, value: e.target.value, type } });\r\n            }}\r\n            placeholder={formattedPlaceholder}\r\n            type={showPassword ? 'text' : 'password'}\r\n            value={valueWithEmptyStringFallback}\r\n          />\r\n        );\r\n      }\r\n      case 'select': {\r\n        return (\r\n          <SingleSelect\r\n            disabled={disabled}\r\n            onChange={(value) => {\r\n              onChange({ target: { name, value, type: 'select' } });\r\n            }}\r\n            placeholder={formattedPlaceholder}\r\n            value={value}\r\n          >\r\n            {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\r\n              return (\r\n                <SingleSelectOption key={key} value={value} disabled={disabled} hidden={hidden}>\r\n                  {formatMessage(intlLabel)}\r\n                </SingleSelectOption>\r\n              );\r\n            })}\r\n          </SingleSelect>\r\n        );\r\n      }\r\n      case 'textarea': {\r\n        return (\r\n          <Textarea\r\n            disabled={disabled}\r\n            onChange={(event) => onChange({ target: { name, value: event.target.value, type } })}\r\n            placeholder={formattedPlaceholder}\r\n            value={valueWithEmptyStringFallback}\r\n          />\r\n        );\r\n      }\r\n      case 'time': {\r\n        const formattedValue = handleTimeChange({ value, onChange, name, type });\r\n\r\n        return (\r\n          <TimePicker\r\n            clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\r\n            disabled={disabled}\r\n            onChange={(time) => handleTimeChangeEvent(onChange, name, type, time)}\r\n            onClear={() => handleTimeChangeEvent(onChange, name, type, undefined)}\r\n            value={formattedValue}\r\n          />\r\n        );\r\n      }\r\n      default: {\r\n        /**\r\n         * If there's no component for the given type, we return a disabled text input\r\n         * showing a \"Not supported\" title to illustrate the issue.\r\n         */\r\n        return <TextInput disabled placeholder=\"Not supported\" type=\"text\" value=\"\" />;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} name={name} hint={hint} required={required}>\r\n      {type !== 'checkbox' ? <Field.Label action={labelAction}>{label}</Field.Label> : null}\r\n      {getComponent()}\r\n      <Field.Error />\r\n      <Field.Hint />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\ntype FieldSchema = {\r\n  minLength?: number | string;\r\n  maxLength?: number | string;\r\n  max?: number | string;\r\n  min?: number | string;\r\n};\r\ninterface UseFieldHintProps {\r\n  description?: MessageDescriptor & { values?: Record<string, PrimitiveType> };\r\n  fieldSchema?: FieldSchema;\r\n  type?: string;\r\n}\r\n\r\n/**\r\n * @description\r\n * A hook for generating the hint for a field\r\n */\r\nconst useFieldHint = ({ description, fieldSchema, type }: UseFieldHintProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const buildDescription = () =>\r\n    description?.id\r\n      ? formatMessage(\r\n          { id: description.id, defaultMessage: description.defaultMessage },\r\n          { ...description.values }\r\n        )\r\n      : '';\r\n\r\n  const buildHint = () => {\r\n    const { maximum, minimum } = getMinMax(fieldSchema);\r\n    const units = getFieldUnits({\r\n      type,\r\n      minimum,\r\n      maximum,\r\n    });\r\n\r\n    const minIsNumber = typeof minimum === 'number';\r\n    const maxIsNumber = typeof maximum === 'number';\r\n    const hasMinAndMax = maxIsNumber && minIsNumber;\r\n    const hasMinOrMax = maxIsNumber || minIsNumber;\r\n\r\n    if (!description?.id && !hasMinOrMax) {\r\n      return '';\r\n    }\r\n\r\n    return formatMessage(\r\n      {\r\n        id: 'content-manager.form.Input.hint.text',\r\n        defaultMessage:\r\n          '{min, select, undefined {} other {min. {min}}}{divider}{max, select, undefined {} other {max. {max}}}{unit}{br}{description}',\r\n      },\r\n      {\r\n        min: minimum,\r\n        max: maximum,\r\n        description: buildDescription(),\r\n        unit: units?.message && hasMinOrMax ? formatMessage(units.message, units.values) : null,\r\n        divider: hasMinAndMax\r\n          ? formatMessage({\r\n              id: 'content-manager.form.Input.hint.minMaxDivider',\r\n              defaultMessage: ' / ',\r\n            })\r\n          : null,\r\n        br: hasMinOrMax ? <br /> : null,\r\n      }\r\n    );\r\n  };\r\n\r\n  return { hint: buildHint() };\r\n};\r\n\r\nconst getFieldUnits = ({\r\n  type,\r\n  minimum,\r\n  maximum,\r\n}: {\r\n  type?: string;\r\n  minimum?: number;\r\n  maximum?: number;\r\n}) => {\r\n  if (type && ['biginteger', 'integer', 'number'].includes(type)) {\r\n    return {};\r\n  }\r\n  const maxValue = Math.max(minimum || 0, maximum || 0);\r\n\r\n  return {\r\n    message: {\r\n      id: 'content-manager.form.Input.hint.character.unit',\r\n      defaultMessage: '{maxValue, plural, one { character} other { characters}}',\r\n    },\r\n    values: {\r\n      maxValue,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMinMax = (fieldSchema?: FieldSchema) => {\r\n  if (!fieldSchema) {\r\n    return { maximum: undefined, minimum: undefined };\r\n  }\r\n\r\n  const { minLength, maxLength, max, min } = fieldSchema;\r\n\r\n  let minimum;\r\n  let maximum;\r\n\r\n  const parsedMin = Number(min);\r\n  const parsedMinLength = Number(minLength);\r\n\r\n  if (!Number.isNaN(parsedMin)) {\r\n    minimum = parsedMin;\r\n  } else if (!Number.isNaN(parsedMinLength)) {\r\n    minimum = parsedMinLength;\r\n  }\r\n\r\n  const parsedMax = Number(max);\r\n  const parsedMaxLength = Number(maxLength);\r\n\r\n  if (!Number.isNaN(parsedMax)) {\r\n    maximum = parsedMax;\r\n  } else if (!Number.isNaN(parsedMaxLength)) {\r\n    maximum = parsedMaxLength;\r\n  }\r\n\r\n  return { maximum, minimum };\r\n};\r\n\r\n/**\r\n * we've memoized this component because we use a context to store all the data in our form in the content-manager.\r\n * This then causes _every_ component to re-render because there are no selects incurring performance issues\r\n * in content-types as the content-type gets more complicated.\r\n */\r\nconst MemoizedGenericInput = React.memo(GenericInput, isEqual);\r\n\r\nexport type { GenericInputProps, CustomInputProps };\r\nexport { MemoizedGenericInput as GenericInput };\r\n","import { Menu } from '@strapi/design-system';\r\nimport { useDispatch } from 'react-redux';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../../../../hooks/useDataManager';\r\nimport { isAllowedContentTypesForRelations } from '../../../../utils';\r\nimport { ON_CHANGE_RELATION_TARGET } from '../../../FormModal/constants';\r\n\r\ninterface RelationTargetPickerProps {\r\n  oneThatIsCreatingARelationWithAnother: string;\r\n  target: string;\r\n}\r\n\r\nexport const RelationTargetPicker = ({\r\n  oneThatIsCreatingARelationWithAnother,\r\n  target,\r\n}: RelationTargetPickerProps) => {\r\n  const { contentTypes, sortedContentTypesList } = useDataManager();\r\n  const dispatch = useDispatch();\r\n  // TODO: replace with an obj { relation: 'x', bidirctional: true|false }\r\n  const allowedContentTypesForRelation = sortedContentTypesList.filter(\r\n    isAllowedContentTypesForRelations\r\n  );\r\n\r\n  const { plugin = null, schema: { displayName } = { displayName: 'error' } } =\r\n    contentTypes?.[target] ?? {};\r\n\r\n  const handleSelect =\r\n    ({\r\n      uid,\r\n      plugin,\r\n      title,\r\n      restrictRelationsTo,\r\n    }: {\r\n      uid: string;\r\n      plugin: boolean;\r\n      title: string;\r\n      restrictRelationsTo: any;\r\n    }) =>\r\n    () => {\r\n      const selectedContentTypeFriendlyName = plugin ? `${plugin}_${title}` : title;\r\n\r\n      dispatch({\r\n        type: ON_CHANGE_RELATION_TARGET,\r\n        target: {\r\n          value: uid,\r\n          oneThatIsCreatingARelationWithAnother,\r\n          selectedContentTypeFriendlyName,\r\n          targetContentTypeAllowedRelations: restrictRelationsTo,\r\n        },\r\n      });\r\n    };\r\n\r\n  /**\r\n   * TODO: This should be a Select but the design doesn't match the\r\n   * styles of the select component and there isn't the ability to\r\n   * change it correctly.\r\n   */\r\n  return (\r\n    <Menu.Root>\r\n      <MenuTrigger>{`${displayName} ${plugin ? `(from: ${plugin})` : ''}`}</MenuTrigger>\r\n      <Menu.Content zIndex=\"popover\">\r\n        {allowedContentTypesForRelation.map(({ uid, title, restrictRelationsTo, plugin }) => (\r\n          <Menu.Item key={uid} onSelect={handleSelect({ uid, plugin, title, restrictRelationsTo })}>\r\n            {title}&nbsp;\r\n            {plugin && <>(from: {plugin})</>}\r\n          </Menu.Item>\r\n        ))}\r\n      </Menu.Content>\r\n    </Menu.Root>\r\n  );\r\n};\r\n\r\nconst MenuTrigger = styled(Menu.Trigger)`\r\n  max-width: 16.8rem;\r\n  span {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n`;\r\n","import { Box, Divider, Flex, Typography } from '@strapi/design-system';\r\n\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { GenericInput } from '../../GenericInputs';\r\n\r\nimport { RelationTargetPicker } from './RelationTargetPicker/RelationTargetPicker';\r\n\r\ninterface RelationFormBoxProps {\r\n  disabled?: boolean;\r\n  error?: Record<string, any>;\r\n  header?: string;\r\n  isMain?: boolean;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  oneThatIsCreatingARelationWithAnother?: string;\r\n  target?: string;\r\n  value?: string;\r\n}\r\n\r\nexport const RelationFormBox = ({\r\n  disabled = false,\r\n  error,\r\n  header,\r\n  isMain = false,\r\n  name,\r\n  onChange,\r\n  oneThatIsCreatingARelationWithAnother = '',\r\n  target = '',\r\n  value = '',\r\n}: RelationFormBoxProps) => {\r\n  return (\r\n    <Box background=\"neutral100\" hasRadius borderColor=\"neutral200\">\r\n      <Flex paddingTop={isMain ? 4 : 1} paddingBottom={isMain ? 3 : 1} justifyContent=\"center\">\r\n        {isMain ? (\r\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\">\r\n            {header}\r\n          </Typography>\r\n        ) : (\r\n          <RelationTargetPicker\r\n            target={target}\r\n            oneThatIsCreatingARelationWithAnother={oneThatIsCreatingARelationWithAnother}\r\n          />\r\n        )}\r\n      </Flex>\r\n      <Divider background=\"neutral200\" />\r\n      <Box padding={4}>\r\n        <GenericInput\r\n          disabled={disabled}\r\n          error={error?.id || null}\r\n          intlLabel={{\r\n            id: getTrad('form.attribute.item.defineRelation.fieldName'),\r\n            defaultMessage: 'Field name',\r\n          }}\r\n          name={name}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          value={value}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, BoxComponent, Flex, FlexComponent } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst Wrapper = styled<BoxComponent>(Box)`\r\n  position: relative;\r\n  width: 100%;\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: calc(50% - 0px);\r\n    height: 2px;\r\n    width: 100%;\r\n    background-color: ${({ theme }) => theme.colors.primary600};\r\n    z-index: 0;\r\n  }\r\n`;\r\n\r\nconst IconWrapper = styled<BoxComponent<'button'>>(Box)<{ $isSelected: boolean }>`\r\n  background: ${({ theme, $isSelected }) => theme.colors[$isSelected ? 'primary100' : 'neutral0']};\r\n  border: 1px solid\r\n    ${({ theme, $isSelected }) => theme.colors[$isSelected ? 'primary700' : 'neutral200']};\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  z-index: 1;\r\n  flex: 0 0 2.4rem;\r\n  svg {\r\n    width: 2.4rem;\r\n    height: 2.4rem;\r\n    max-width: unset;\r\n    path {\r\n      fill: ${({ theme, $isSelected }) => theme.colors[$isSelected ? 'primary700' : 'neutral500']};\r\n    }\r\n  }\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst InfosWrapper = styled<FlexComponent>(Flex)`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n`;\r\n\r\nexport { IconWrapper, InfosWrapper, Wrapper };\r\n","import { Flex, KeyboardNavigable, Typography } from '@strapi/design-system';\r\nimport {\r\n  ManyToMany,\r\n  ManyToOne,\r\n  ManyWays as ManyWay,\r\n  OneToMany,\r\n  OneToOne,\r\n  OneWay,\r\n} from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport truncate from 'lodash/truncate';\r\nimport pluralize from 'pluralize';\r\nimport { useIntl } from 'react-intl';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { useDataManager } from '../../../hooks/useDataManager';\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { ON_CHANGE_RELATION_TYPE } from '../../FormModal/constants';\r\n\r\nimport { IconWrapper, InfosWrapper, Wrapper } from './Components';\r\n\r\nconst relations = {\r\n  oneWay: OneWay,\r\n  oneToOne: OneToOne,\r\n  oneToMany: OneToMany,\r\n  manyToOne: ManyToOne,\r\n  manyToMany: ManyToMany,\r\n  manyWay: ManyWay,\r\n};\r\n\r\ntype RelationType = keyof typeof relations;\r\n\r\ninterface RelationNaturePickerProps {\r\n  naturePickerType: string;\r\n  oneThatIsCreatingARelationWithAnother: string;\r\n  relationType: string;\r\n  target: string;\r\n}\r\n\r\nexport const RelationNaturePicker = ({\r\n  naturePickerType,\r\n  oneThatIsCreatingARelationWithAnother,\r\n  relationType,\r\n  target,\r\n}: RelationNaturePickerProps) => {\r\n  const dispatch = useDispatch();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { contentTypes, modifiedData } = useDataManager();\r\n  const ctRelations = ['oneWay', 'oneToOne', 'oneToMany', 'manyToOne', 'manyToMany', 'manyWay'];\r\n  const componentRelations = ['oneWay', 'manyWay'];\r\n  const dataType =\r\n    naturePickerType === 'contentType'\r\n      ? get(modifiedData, [naturePickerType, 'schema', 'kind'], '')\r\n      : naturePickerType;\r\n  const relationsType = (\r\n    dataType === 'collectionType' ? ctRelations : componentRelations\r\n  ) as RelationType[];\r\n\r\n  const areDisplayedNamesInverted = relationType === 'manyToOne';\r\n  const targetLabel = get(contentTypes, [target, 'schema', 'displayName'], 'unknown');\r\n  const leftTarget = areDisplayedNamesInverted\r\n    ? targetLabel\r\n    : oneThatIsCreatingARelationWithAnother;\r\n  const rightTarget = areDisplayedNamesInverted\r\n    ? oneThatIsCreatingARelationWithAnother\r\n    : targetLabel;\r\n  const leftDisplayedValue = pluralize(leftTarget, relationType === 'manyToMany' ? 2 : 1);\r\n  const restrictedRelations = get(contentTypes, [target, 'schema', 'restrictRelationsTo'], null);\r\n\r\n  const rightDisplayedValue = pluralize(\r\n    rightTarget,\r\n    ['manyToMany', 'oneToMany', 'manyToOne', 'manyWay'].includes(relationType) ? 2 : 1\r\n  );\r\n\r\n  if (!relationType) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Flex style={{ flex: 1 }}>\r\n      <Wrapper>\r\n        <Flex paddingLeft={9} paddingRight={9} paddingTop={1} justifyContent=\"center\">\r\n          <KeyboardNavigable tagName=\"button\">\r\n            <Flex gap={3}>\r\n              {relationsType.map((relation) => {\r\n                const Asset = relations[relation];\r\n                const isEnabled =\r\n                  restrictedRelations === null || restrictedRelations.includes(relation);\r\n\r\n                return (\r\n                  <IconWrapper\r\n                    tag=\"button\"\r\n                    $isSelected={relationType === relation}\r\n                    disabled={!isEnabled}\r\n                    key={relation}\r\n                    onClick={() => {\r\n                      if (isEnabled) {\r\n                        dispatch({\r\n                          type: ON_CHANGE_RELATION_TYPE,\r\n                          target: {\r\n                            oneThatIsCreatingARelationWithAnother,\r\n                            targetContentType: target,\r\n                            value: relation,\r\n                          },\r\n                        });\r\n                      }\r\n                    }}\r\n                    padding={2}\r\n                    type=\"button\"\r\n                  >\r\n                    <Asset key={relation} />\r\n                  </IconWrapper>\r\n                );\r\n              })}\r\n            </Flex>\r\n          </KeyboardNavigable>\r\n        </Flex>\r\n      </Wrapper>\r\n      <InfosWrapper justifyContent=\"center\">\r\n        <Typography>{truncate(leftDisplayedValue, { length: 24 })}&nbsp;</Typography>\r\n        <Typography textColor=\"primary600\">\r\n          {formatMessage({ id: getTrad(`relation.${relationType}`) })}&nbsp;\r\n        </Typography>\r\n        <Typography>{truncate(rightDisplayedValue, { length: 24 })}</Typography>\r\n      </InfosWrapper>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex } from '@strapi/design-system';\r\n\r\nimport { getRelationType } from '../../utils/getRelationType';\r\n\r\nimport { RelationFormBox } from './RelationField/RelationField';\r\nimport { RelationNaturePicker } from './RelationNaturePicker/RelationNaturePicker';\r\n\r\ninterface RelationProps {\r\n  formErrors: Record<string, any>;\r\n  mainBoxHeader: string;\r\n  modifiedData: Record<string, any>;\r\n  onChange: (value: any) => void;\r\n  naturePickerType: string;\r\n}\r\n\r\nexport const Relation = ({\r\n  formErrors,\r\n  mainBoxHeader,\r\n  modifiedData,\r\n  naturePickerType,\r\n  onChange,\r\n}: RelationProps) => {\r\n  const relationType = getRelationType(modifiedData.relation, modifiedData.targetAttribute);\r\n\r\n  return (\r\n    <Flex style={{ position: 'relative' }}>\r\n      <RelationFormBox\r\n        isMain\r\n        header={mainBoxHeader}\r\n        error={formErrors?.name || null}\r\n        name=\"name\"\r\n        onChange={onChange}\r\n        value={modifiedData?.name || ''}\r\n      />\r\n      <RelationNaturePicker\r\n        naturePickerType={naturePickerType}\r\n        oneThatIsCreatingARelationWithAnother={mainBoxHeader}\r\n        relationType={relationType!}\r\n        target={modifiedData.target}\r\n      />\r\n      <RelationFormBox\r\n        disabled={['oneWay', 'manyWay'].includes(relationType!)}\r\n        error={formErrors?.targetAttribute || null}\r\n        name=\"targetAttribute\"\r\n        onChange={onChange}\r\n        oneThatIsCreatingARelationWithAnother={mainBoxHeader}\r\n        target={modifiedData.target}\r\n        value={modifiedData?.targetAttribute || ''}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { ComboboxOption, Combobox, Field } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\n\r\ninterface SelectCategoryProps {\r\n  error?: string | null;\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n    values?: Record<string, any>;\r\n  };\r\n  name: string;\r\n  onChange: (value: { target: { name: string; value: any; type: string } }) => void;\r\n  value?: string;\r\n  isCreating?: boolean;\r\n  dynamicZoneTarget?: string | null;\r\n}\r\n\r\nexport const SelectCategory = ({\r\n  error = null,\r\n  intlLabel,\r\n  name,\r\n  onChange,\r\n  value = undefined,\r\n  isCreating,\r\n  dynamicZoneTarget,\r\n}: SelectCategoryProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { allComponentsCategories } = useDataManager();\r\n  const [categories, setCategories] = useState(allComponentsCategories);\r\n\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n  const label = formatMessage(intlLabel);\r\n\r\n  const handleChange = (value: any) => {\r\n    onChange({ target: { name, value, type: 'select-category' } });\r\n  };\r\n\r\n  const handleCreateOption = (value: any) => {\r\n    setCategories((prev) => [...prev, value]);\r\n    handleChange(value);\r\n  };\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <Combobox\r\n        // TODO: re-enable category edits, renaming categories of already existing components currently breaks other functionality\r\n        // See https://github.com/strapi/strapi/issues/20356\r\n        disabled={!isCreating && !dynamicZoneTarget}\r\n        onChange={handleChange}\r\n        onCreateOption={handleCreateOption}\r\n        value={value}\r\n        creatable\r\n      >\r\n        {categories.map((category) => (\r\n          <ComboboxOption key={category} value={category}>\r\n            {category}\r\n          </ComboboxOption>\r\n        ))}\r\n      </Combobox>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import type { ComponentWithChildren } from '../components/DataManagerProvider/utils/retrieveComponentsThatHaveComponents';\r\nimport type { NestedComponent } from '../components/DataManagerProvider/utils/retrieveNestedComponents';\r\nimport type { Internal } from '@strapi/types';\r\n\r\nconst findComponent = <T extends { component: Internal.UID.Component }>(\r\n  componentUid: Internal.UID.Schema,\r\n  components: Array<T>\r\n) => {\r\n  return components.find((c) => c.component === componentUid);\r\n};\r\n\r\n/**\r\n * Recursively calculates the maximum depth of nested child components\r\n * for a given component UID.\r\n *\r\n * @param componentUid - The UID of the component to start from.\r\n * @param components - The array of all components with their child components.\r\n * @param currentDepth - The current depth of the recursion. Defaults to 0.\r\n * @returns The maximum depth of the nested child components.\r\n */\r\nexport const getChildrenMaxDepth = (\r\n  componentUid: Internal.UID.Component,\r\n  components: Array<ComponentWithChildren>,\r\n  currentDepth = 0\r\n) => {\r\n  const component = findComponent(componentUid, components);\r\n\r\n  // If the component doesn't exist or has no child components, return the current depth.\r\n  if (!component || !component.childComponents || component.childComponents.length === 0) {\r\n    return currentDepth;\r\n  }\r\n\r\n  let maxDepth = currentDepth;\r\n\r\n  // Iterate through each child component to calculate their respective depths.\r\n  component.childComponents.forEach((child) => {\r\n    // Recursively calculate the depth of the child component.\r\n    const depth = getChildrenMaxDepth(child.component, components, currentDepth + 1);\r\n    // Update the maximum depth if the child's depth is greater.\r\n    if (depth > maxDepth) {\r\n      maxDepth = depth;\r\n    }\r\n  });\r\n\r\n  return maxDepth;\r\n};\r\n\r\n/**\r\n * Calculates the depth of a component within a nested component tree.\r\n * Depth is defined as the level at which the component is nested.\r\n * For example, a component at Depth 3 is the third nested component.\r\n *\r\n * @param component - The UID of the component to find the depth for.\r\n * @param components - The array of all nested components.\r\n * @returns The depth level of the component within the nested tree.\r\n */\r\nexport const getComponentDepth = (\r\n  component: Internal.UID.Schema,\r\n  components: Array<NestedComponent>\r\n) => {\r\n  /**\r\n   * Helper function to recursively calculate the depth of a component.\r\n   *\r\n   * @param currentComponent - The current component being inspected.\r\n   * @param currentLevel - The current level of depth in the tree.\r\n   * @returns An array of depth levels found for the component.\r\n   */\r\n  const getDepth = (currentComponent: NestedComponent, currentLevel: number): Array<number> => {\r\n    const levels = [];\r\n    levels.push(currentLevel);\r\n\r\n    // If the component has no parent UIDs, return the current levels\r\n    if (!currentComponent.uidsOfAllParents) {\r\n      return levels;\r\n    }\r\n\r\n    // Iterate over each parent UID to calculate their respective depths\r\n    for (const parentUid of currentComponent.uidsOfAllParents) {\r\n      const parentComponent = findComponent(parentUid, components);\r\n      if (parentComponent) {\r\n        levels.push(...getDepth(parentComponent, currentLevel + 1));\r\n      }\r\n    }\r\n\r\n    return levels;\r\n  };\r\n\r\n  const nestedCompo = findComponent(component, components);\r\n  // return depth 0 if component is not nested\r\n  if (!nestedCompo) {\r\n    return 0;\r\n  }\r\n  const compoDepth = Math.max(...getDepth(nestedCompo, 1));\r\n  return compoDepth;\r\n};\r\n","import { SingleSelectOption, SingleSelect, Field } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { MAX_COMPONENT_DEPTH } from '../constants';\r\nimport { useDataManager } from '../hooks/useDataManager';\r\nimport { getChildrenMaxDepth, getComponentDepth } from '../utils/getMaxDepth';\r\n\r\nimport type { Internal } from '@strapi/types';\r\ninterface Option {\r\n  uid: string;\r\n  label: string;\r\n  categoryName: string;\r\n}\r\n\r\ninterface SelectComponentProps {\r\n  componentToCreate?: Record<string, any> | null;\r\n  error?: string | null;\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n    values?: Record<string, any>;\r\n  };\r\n  isAddingAComponentToAnotherComponent: boolean;\r\n  isCreating: boolean;\r\n  isCreatingComponentWhileAddingAField: boolean;\r\n  name: string;\r\n  onChange: (value: any) => void;\r\n  targetUid: Internal.UID.Schema;\r\n  value: string;\r\n  forTarget: string;\r\n}\r\n\r\nexport const SelectComponent = ({\r\n  error = null,\r\n  intlLabel,\r\n  isAddingAComponentToAnotherComponent,\r\n  isCreating,\r\n  isCreatingComponentWhileAddingAField,\r\n  componentToCreate,\r\n  name,\r\n  onChange,\r\n  targetUid,\r\n  forTarget,\r\n  value,\r\n}: SelectComponentProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n  const label = formatMessage(intlLabel);\r\n\r\n  const {\r\n    componentsGroupedByCategory,\r\n    componentsThatHaveOtherComponentInTheirAttributes,\r\n    nestedComponents,\r\n  } = useDataManager();\r\n\r\n  const isTargetAComponent = ['component', 'components'].includes(forTarget);\r\n\r\n  let options: Option[] = Object.entries(componentsGroupedByCategory).reduce(\r\n    (acc: Option[], current) => {\r\n      const [categoryName, components] = current;\r\n      const compos = components.map((component) => {\r\n        return {\r\n          uid: component.uid,\r\n          label: component.schema.displayName,\r\n          categoryName,\r\n        };\r\n      });\r\n\r\n      return [...acc, ...compos];\r\n    },\r\n    []\r\n  );\r\n\r\n  if (isAddingAComponentToAnotherComponent) {\r\n    options = options.filter(({ uid }: any) => {\r\n      const maxDepth = getChildrenMaxDepth(uid, componentsThatHaveOtherComponentInTheirAttributes);\r\n      const componentDepth = getComponentDepth(targetUid, nestedComponents);\r\n      const totalDepth = maxDepth + componentDepth;\r\n      return totalDepth <= MAX_COMPONENT_DEPTH;\r\n    });\r\n  }\r\n\r\n  if (isTargetAComponent) {\r\n    options = options.filter((option) => {\r\n      return option.uid !== targetUid;\r\n    });\r\n  }\r\n\r\n  if (isCreatingComponentWhileAddingAField) {\r\n    options = [\r\n      {\r\n        uid: value,\r\n        label: componentToCreate?.displayName,\r\n        categoryName: componentToCreate?.category,\r\n      },\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <SingleSelect\r\n        disabled={isCreatingComponentWhileAddingAField || !isCreating}\r\n        onChange={(value: any) => {\r\n          onChange({ target: { name, value, type: 'select-category' } });\r\n        }}\r\n        value={value || ''}\r\n      >\r\n        {options.map((option) => {\r\n          return (\r\n            <SingleSelectOption key={option.uid} value={option.uid}>\r\n              {`${option.categoryName} - ${option.label}`}\r\n            </SingleSelectOption>\r\n          );\r\n        })}\r\n      </SingleSelect>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { Field, MultiSelectNested } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\nimport { getTrad } from '../utils';\r\nimport { findAttribute } from '../utils/findAttribute';\r\n\r\nimport type { Component } from '../types';\r\n\r\ntype SelectComponentsProps = {\r\n  dynamicZoneTarget: string;\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n    values?: object;\r\n  };\r\n  name: string;\r\n  onChange: (value: {\r\n    target: {\r\n      name: string;\r\n      value: string[];\r\n      type?: string;\r\n    };\r\n  }) => void;\r\n  value: string[];\r\n};\r\n\r\nexport const SelectComponents = ({\r\n  dynamicZoneTarget,\r\n  intlLabel,\r\n  name,\r\n  onChange,\r\n  value,\r\n}: SelectComponentsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { componentsGroupedByCategory, modifiedData } = useDataManager();\r\n  const dzSchema = findAttribute(modifiedData.contentType.schema.attributes, dynamicZoneTarget);\r\n  const alreadyUsedComponents = dzSchema?.components || [];\r\n  const filteredComponentsGroupedByCategory = Object.keys(componentsGroupedByCategory).reduce(\r\n    (acc, current) => {\r\n      const filteredComponents = componentsGroupedByCategory[current].filter(({ uid }) => {\r\n        return !alreadyUsedComponents.includes(uid);\r\n      });\r\n\r\n      if (filteredComponents.length > 0) {\r\n        acc[current] = filteredComponents;\r\n      }\r\n\r\n      return acc;\r\n    },\r\n    {} as Record<string, Component[]>\r\n  );\r\n  const options = Object.entries(filteredComponentsGroupedByCategory).reduce(\r\n    (acc, current) => {\r\n      const [categoryName, components] = current;\r\n      const section = {\r\n        label: categoryName,\r\n        children: components.map(({ uid, schema: { displayName } }) => {\r\n          return { label: displayName, value: uid };\r\n        }),\r\n      };\r\n\r\n      acc.push(section);\r\n\r\n      return acc;\r\n    },\r\n    [] as Array<{ label: string; children: Array<{ label: string; value: string }> }>\r\n  );\r\n\r\n  const displayedValue = formatMessage(\r\n    {\r\n      id: getTrad('components.SelectComponents.displayed-value'),\r\n      defaultMessage:\r\n        '{number, plural, =0 {# components} one {# component} other {# components}} selected',\r\n    },\r\n    { number: value?.length ?? 0 }\r\n  );\r\n\r\n  return (\r\n    <Field.Root name={name}>\r\n      <Field.Label>{formatMessage(intlLabel)}</Field.Label>\r\n      <MultiSelectNested\r\n        id=\"select1\"\r\n        customizeContent={() => displayedValue}\r\n        onChange={(values) => {\r\n          onChange({ target: { name, value: values, type: 'select-components' } });\r\n        }}\r\n        options={options}\r\n        value={value || []}\r\n      />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { Field, SingleSelect, SingleSelectOption } from '@strapi/design-system';\r\nimport { PrimitiveType, useIntl } from 'react-intl';\r\n\r\ntype SelectDateTypeProps = {\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n    values?: object;\r\n  };\r\n  error?: string;\r\n  modifiedData: {\r\n    default: number;\r\n    max: number;\r\n    min: number;\r\n  };\r\n  name: string;\r\n  onChange: (value: {\r\n    target: {\r\n      name: string;\r\n      value: string | number | null;\r\n      type?: string;\r\n    };\r\n  }) => void;\r\n  options: Array<{\r\n    metadatas: {\r\n      intlLabel: {\r\n        id: string;\r\n        defaultMessage: string;\r\n        values: Record<string, PrimitiveType> | undefined;\r\n      };\r\n      disabled?: boolean;\r\n      hidden?: boolean;\r\n    };\r\n    key: string | number;\r\n    value: string | number;\r\n  }>;\r\n  value?: string;\r\n};\r\n\r\nexport const SelectDateType = ({\r\n  intlLabel,\r\n  error = undefined,\r\n  modifiedData,\r\n  name,\r\n  onChange,\r\n  options,\r\n  value = '',\r\n}: SelectDateTypeProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const label = formatMessage(intlLabel);\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n\r\n  const handleChange = (nextValue: string | number) => {\r\n    onChange({ target: { name, value: nextValue, type: 'select' } });\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (modifiedData.default !== undefined && modifiedData.default !== null) {\r\n      onChange({ target: { name: 'default', value: null } });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <SingleSelect onChange={handleChange} value={value || ''}>\r\n        {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\r\n          return (\r\n            <SingleSelectOption key={key} value={value} disabled={disabled} hidden={hidden}>\r\n              {formatMessage(\r\n                { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n                intlLabel.values\r\n              )}\r\n            </SingleSelectOption>\r\n          );\r\n        })}\r\n      </SingleSelect>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { SingleSelectOption, SingleSelect, Field } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ntype SelectNumberProps = {\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n    values?: object;\r\n  };\r\n  error?: string;\r\n  modifiedData: {\r\n    default: number;\r\n    max: number;\r\n    min: number;\r\n  };\r\n  name: string;\r\n  onChange: (value: {\r\n    target: {\r\n      name: string;\r\n      value: string | number | null;\r\n      type?: string;\r\n    };\r\n  }) => void;\r\n  options: Array<{\r\n    metadatas: {\r\n      intlLabel: {\r\n        id: string;\r\n        defaultMessage: string;\r\n      };\r\n      disabled?: boolean;\r\n      hidden?: boolean;\r\n    };\r\n    key: string | number;\r\n    value: string | number;\r\n  }>;\r\n  value?: string;\r\n};\r\n\r\nexport const SelectNumber = ({\r\n  intlLabel,\r\n  error = undefined,\r\n  modifiedData,\r\n  name,\r\n  onChange,\r\n  options,\r\n  value = '',\r\n}: SelectNumberProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const label = formatMessage(intlLabel);\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n\r\n  const handleChange = (nextValue: string | number) => {\r\n    onChange({ target: { name, value: nextValue, type: 'select' } });\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (nextValue === 'biginteger' && value !== 'biginteger') {\r\n      if (modifiedData.default !== undefined && modifiedData.default !== null) {\r\n        onChange({ target: { name: 'default', value: null } });\r\n      }\r\n\r\n      if (modifiedData.max !== undefined && modifiedData.max !== null) {\r\n        onChange({ target: { name: 'max', value: null } });\r\n      }\r\n\r\n      if (modifiedData.min !== undefined && modifiedData.min !== null) {\r\n        onChange({ target: { name: 'min', value: null } });\r\n      }\r\n    }\r\n\r\n    if (\r\n      typeof nextValue === 'string' &&\r\n      ['decimal', 'float', 'integer'].includes(nextValue) &&\r\n      value === 'biginteger'\r\n    ) {\r\n      if (modifiedData.default !== undefined && modifiedData.default !== null) {\r\n        onChange({ target: { name: 'default', value: null } });\r\n      }\r\n\r\n      if (modifiedData.max !== undefined && modifiedData.max !== null) {\r\n        onChange({ target: { name: 'max', value: null } });\r\n      }\r\n\r\n      if (modifiedData.min !== undefined && modifiedData.min !== null) {\r\n        onChange({ target: { name: 'min', value: null } });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <SingleSelect onChange={handleChange} value={value || ''}>\r\n        {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\r\n          return (\r\n            <SingleSelectOption key={key} value={value} disabled={disabled} hidden={hidden}>\r\n              {formatMessage(intlLabel)}\r\n            </SingleSelectOption>\r\n          );\r\n        })}\r\n      </SingleSelect>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nSelectNumber.defaultProps = {\r\n  error: undefined,\r\n  value: '',\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nimport { Field, TextInput } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { nameToSlug } from '../utils/nameToSlug';\r\n\r\nimport type { IntlLabel } from '../types';\r\n\r\ninterface SingularNameProps {\r\n  description?: IntlLabel | null;\r\n  error?: string | null;\r\n  intlLabel: IntlLabel;\r\n  modifiedData: Record<string, any>;\r\n  name: string;\r\n  onChange: (value: { target: { name: string; value: string } }) => void;\r\n  value?: string | null;\r\n}\r\n\r\nexport const SingularName = ({\r\n  description = null,\r\n  error = null,\r\n  intlLabel,\r\n  modifiedData,\r\n  name,\r\n  onChange,\r\n  value = null,\r\n}: SingularNameProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const onChangeRef = useRef(onChange);\r\n  const displayName = modifiedData?.displayName || '';\r\n\r\n  useEffect(() => {\r\n    if (displayName) {\r\n      onChangeRef.current({ target: { name, value: nameToSlug(displayName) } });\r\n    } else {\r\n      onChangeRef.current({ target: { name, value: '' } });\r\n    }\r\n  }, [displayName, name]);\r\n\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { ...description.values }\r\n      )\r\n    : '';\r\n  const label = formatMessage(intlLabel);\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} hint={hint} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <TextInput onChange={onChange} value={value || ''} />\r\n      <Field.Error />\r\n      <Field.Hint />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { Box, Grid, Typography } from '@strapi/design-system';\r\nimport get from 'lodash/get';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { GenericInput } from './GenericInputs';\r\n\r\ninterface TabFormProps {\r\n  form: Array<Record<string, any>>;\r\n  formErrors: Record<string, any>;\r\n  genericInputProps: Record<string, any>;\r\n  modifiedData: Record<string, any>;\r\n  onChange: (value: any) => void;\r\n}\r\n\r\n/* eslint-disable react/no-array-index-key */\r\nexport const TabForm = ({\r\n  form,\r\n  formErrors,\r\n  genericInputProps,\r\n  modifiedData,\r\n  onChange,\r\n}: TabFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <>\r\n      {form.map((section, sectionIndex) => {\r\n        // Don't display an empty section\r\n        if (section.items.length === 0) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          <Box key={sectionIndex}>\r\n            {section.sectionTitle && (\r\n              <Box paddingBottom={4}>\r\n                <Typography variant=\"delta\" tag=\"h3\">\r\n                  {formatMessage(section.sectionTitle)}\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n            <Grid.Root gap={4}>\r\n              {section.items.map((input: any, i: number) => {\r\n                const key = `${sectionIndex}.${i}`;\r\n\r\n                /**\r\n                 * Use undefined as the default value because not every input wants a string e.g. Date pickers\r\n                 */\r\n                const value = get(modifiedData, input.name, undefined);\r\n\r\n                // When extending the yup schema of an existing field (like in https://github.com/strapi/strapi/blob/293ff3b8f9559236609d123a2774e3be05ce8274/packages/strapi-plugin-i18n/admin/src/index.js#L52)\r\n                // and triggering a yup validation error in the UI (missing a required field for example)\r\n                // We got an object that looks like: formErrors = { \"pluginOptions.i18n.localized\": {...} }\r\n                // In order to deal with this error, we can't rely on lodash.get to resolve this key\r\n                // - lodash will try to access {pluginOptions: {i18n: {localized: true}}})\r\n                // - and we just want to access { \"pluginOptions.i18n.localized\": {...} }\r\n                // NOTE: this is a hack\r\n                const pluginOptionError = Object.keys(formErrors).find((key) => key === input.name);\r\n\r\n                // Retrieve the error for a specific input\r\n                const errorId = pluginOptionError\r\n                  ? formErrors[pluginOptionError].id\r\n                  : get(\r\n                      formErrors,\r\n                      [\r\n                        ...input.name\r\n                          .split('.')\r\n                          // The filter here is used when creating a component\r\n                          // in the component step 1 modal\r\n                          // Since the component info is stored in the\r\n                          // componentToCreate object we can access the error\r\n                          // By removing the key\r\n                          .filter((key: string) => key !== 'componentToCreate'),\r\n                        'id',\r\n                      ],\r\n                      null\r\n                    );\r\n\r\n                if (input.type === 'pushRight') {\r\n                  return (\r\n                    <Grid.Item\r\n                      col={input.size || 6}\r\n                      key={input.name || key}\r\n                      direction=\"column\"\r\n                      alignItems=\"stretch\"\r\n                    >\r\n                      <div />\r\n                    </Grid.Item>\r\n                  );\r\n                }\r\n\r\n                return (\r\n                  <Grid.Item\r\n                    col={input.size || 6}\r\n                    key={input.name || key}\r\n                    direction=\"column\"\r\n                    alignItems=\"stretch\"\r\n                  >\r\n                    <GenericInput\r\n                      {...input}\r\n                      {...genericInputProps}\r\n                      error={errorId}\r\n                      onChange={onChange}\r\n                      value={value}\r\n                    />\r\n                  </Grid.Item>\r\n                );\r\n              })}\r\n            </Grid.Root>\r\n          </Box>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import { ReactNode, ChangeEvent } from 'react';\r\n\r\nimport { Field, Textarea } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport type { IntlLabel } from '../types';\r\n\r\ninterface TextareaEnumProps {\r\n  description?: IntlLabel | null;\r\n  disabled?: boolean;\r\n  error?: string;\r\n  intlLabel: IntlLabel;\r\n  labelAction?: ReactNode;\r\n  name: string;\r\n  onChange: (value: { target: { name: string; value: string | string[] } }) => void;\r\n  placeholder?: IntlLabel | null;\r\n  value: string | string[] | undefined;\r\n}\r\n\r\nexport const TextareaEnum = ({\r\n  description = null,\r\n  disabled = false,\r\n  error = '',\r\n  intlLabel,\r\n  labelAction,\r\n  name,\r\n  onChange,\r\n  placeholder = null,\r\n  value = '',\r\n}: TextareaEnumProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { ...description.values }\r\n      )\r\n    : '';\r\n  const label = formatMessage(intlLabel);\r\n  const formattedPlaceholder = placeholder\r\n    ? formatMessage(\r\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\r\n        { ...placeholder.values }\r\n      )\r\n    : '';\r\n\r\n  const inputValue = Array.isArray(value) ? value.join('\\n') : '';\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    const arrayValue = e.target.value.split('\\n');\r\n\r\n    onChange({ target: { name, value: arrayValue } });\r\n  };\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} hint={hint} name={name}>\r\n      <Field.Label action={labelAction}>{label}</Field.Label>\r\n      <Textarea\r\n        disabled={disabled}\r\n        onChange={handleChange}\r\n        placeholder={formattedPlaceholder}\r\n        value={inputValue}\r\n      />\r\n      <Field.Error />\r\n      <Field.Hint />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\n\r\nexport const nameField = {\r\n  name: 'name',\r\n  type: 'text',\r\n  intlLabel: {\r\n    id: 'global.name',\r\n    defaultMessage: 'Name',\r\n  },\r\n  description: {\r\n    id: getTrad('modalForm.attribute.form.base.name.description'),\r\n    defaultMessage: 'No space is allowed for the name of the attribute',\r\n  },\r\n  // validations: {\r\n  //   required: true,\r\n  // },\r\n};\r\n","import { nameField } from './nameField';\r\n\r\nexport const commonBaseForm = {\r\n  sections: [{ sectionTitle: null, items: [nameField] }],\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\n\r\nexport const componentForm = {\r\n  base(prefix = '') {\r\n    const sections = [\r\n      {\r\n        sectionTitle: null,\r\n        items: [\r\n          {\r\n            name: `${prefix}displayName`,\r\n            type: 'text',\r\n            intlLabel: {\r\n              id: getTrad('contentType.displayName.label'),\r\n              defaultMessage: 'Display Name',\r\n            },\r\n          },\r\n          {\r\n            name: `${prefix}category`,\r\n            type: 'select-category',\r\n            intlLabel: {\r\n              id: getTrad('modalForm.components.create-component.category.label'),\r\n              defaultMessage: 'Select a category or enter a name to create a new one',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        sectionTitle: null,\r\n        items: [\r\n          {\r\n            name: `${prefix}icon`,\r\n            type: 'icon-picker',\r\n            size: 12,\r\n            intlLabel: {\r\n              id: getTrad('modalForm.components.icon.label'),\r\n              defaultMessage: 'Icon',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n    return sections;\r\n  },\r\n  advanced() {\r\n    const sections: Array<unknown> = [];\r\n\r\n    return sections;\r\n  },\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\n\r\nexport const attributeOptions = {\r\n  default: {\r\n    name: 'default',\r\n    type: 'text',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.settings.default'),\r\n      defaultMessage: 'Default value',\r\n    },\r\n  },\r\n  max: {\r\n    name: 'max',\r\n    type: 'checkbox-with-number-field',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.maximum'),\r\n      defaultMessage: 'Maximum value',\r\n    },\r\n  },\r\n  maxLength: {\r\n    name: 'maxLength',\r\n    type: 'checkbox-with-number-field',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.maximumLength'),\r\n      defaultMessage: 'Maximum length',\r\n    },\r\n  },\r\n  min: {\r\n    name: 'min',\r\n    type: 'checkbox-with-number-field',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.minimum'),\r\n      defaultMessage: 'Minimum value',\r\n    },\r\n  },\r\n  minLength: {\r\n    name: 'minLength',\r\n    type: 'checkbox-with-number-field',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.minimumLength'),\r\n      defaultMessage: 'Minimum length',\r\n    },\r\n  },\r\n  private: {\r\n    name: 'private',\r\n    type: 'checkbox',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.privateField'),\r\n      defaultMessage: 'Private field',\r\n    },\r\n    description: {\r\n      id: getTrad('form.attribute.item.privateField.description'),\r\n      defaultMessage: 'This field will not show up in the API response',\r\n    },\r\n  },\r\n  regex: {\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.text.regex'),\r\n      defaultMessage: 'RegExp pattern',\r\n    },\r\n    name: 'regex',\r\n    type: 'text',\r\n    description: {\r\n      id: getTrad('form.attribute.item.text.regex.description'),\r\n      defaultMessage: 'The text of the regular expression',\r\n    },\r\n  },\r\n  required: {\r\n    name: 'required',\r\n    type: 'checkbox',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.requiredField'),\r\n      defaultMessage: 'Required field',\r\n    },\r\n    description: {\r\n      id: getTrad('form.attribute.item.requiredField.description'),\r\n      defaultMessage: \"You won't be able to create an entry if this field is empty\",\r\n    },\r\n  },\r\n  unique: {\r\n    name: 'unique',\r\n    type: 'checkbox',\r\n    intlLabel: {\r\n      id: getTrad('form.attribute.item.uniqueField'),\r\n      defaultMessage: 'Unique field',\r\n    },\r\n    description: {\r\n      id: getTrad('form.attribute.item.uniqueField.description'),\r\n      defaultMessage:\r\n        \"You won't be able to create an entry if there is an existing entry with identical content\",\r\n    },\r\n  },\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\nimport { componentForm } from '../component/componentForm';\r\n\r\nimport { attributeOptions } from './attributeOptions';\r\n\r\ntype DataType = 'biginteger' | 'string' | 'integer' | 'float' | 'decimal';\r\n\r\nexport const advancedForm = {\r\n  blocks() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  boolean() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              autoFocus: true,\r\n              type: 'select-default-boolean',\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.settings.default'),\r\n                defaultMessage: 'Default value',\r\n              },\r\n              name: 'default',\r\n              options: [\r\n                {\r\n                  value: 'true',\r\n                  key: 'true',\r\n                  metadatas: { intlLabel: { id: 'true', defaultMessage: 'true' } },\r\n                },\r\n                {\r\n                  value: '',\r\n                  key: 'null',\r\n                  metadatas: { intlLabel: { id: 'null', defaultMessage: 'null' } },\r\n                },\r\n                {\r\n                  value: 'false',\r\n                  key: 'false',\r\n                  metadatas: { intlLabel: { id: 'false', defaultMessage: 'false' } },\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  component({ repeatable }: { repeatable: boolean }, step: string) {\r\n    if (step === '1') {\r\n      return { sections: componentForm.advanced() };\r\n    }\r\n\r\n    if (repeatable) {\r\n      return {\r\n        sections: [\r\n          {\r\n            sectionTitle: {\r\n              id: 'global.settings',\r\n              defaultMessage: 'Settings',\r\n            },\r\n            items: [\r\n              attributeOptions.required,\r\n              attributeOptions.private,\r\n              attributeOptions.max,\r\n              attributeOptions.min,\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    }\r\n\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  date({ type }: { type: string }) {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              ...attributeOptions.default,\r\n              type: type || 'date',\r\n              value: null,\r\n              withDefaultValue: false,\r\n              disabled: !type,\r\n              autoFocus: false,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.unique, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  dynamiczone() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.max, attributeOptions.min],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  email() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              ...attributeOptions.default,\r\n              type: 'email',\r\n            },\r\n          ],\r\n        },\r\n\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [\r\n            attributeOptions.required,\r\n            attributeOptions.unique,\r\n            attributeOptions.maxLength,\r\n            attributeOptions.minLength,\r\n            attributeOptions.private,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  enumeration(data: { enum: Array<string> }) {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              name: 'default',\r\n              type: 'select',\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.settings.default'),\r\n                defaultMessage: 'Default value',\r\n              },\r\n              validations: {},\r\n              options: [\r\n                {\r\n                  key: '__null_reset_value__',\r\n                  value: '',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: 'components.InputSelect.option.placeholder',\r\n                      defaultMessage: 'Choose here',\r\n                    },\r\n                  },\r\n                },\r\n                ...(data.enum || [])\r\n                  .filter((value, index) => data.enum.indexOf(value) === index && value)\r\n                  .map((value) => {\r\n                    return {\r\n                      key: value,\r\n                      value,\r\n                      metadatas: {\r\n                        intlLabel: { id: `${value}.no-override`, defaultMessage: value },\r\n                      },\r\n                    };\r\n                  }),\r\n              ],\r\n            },\r\n            {\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.item.enumeration.graphql'),\r\n                defaultMessage: 'Name override for GraphQL',\r\n              },\r\n              name: 'enumName',\r\n              type: 'text',\r\n              validations: {},\r\n              description: {\r\n                id: getTrad('form.attribute.item.enumeration.graphql.description'),\r\n                defaultMessage: 'Allows you to override the default generated name for GraphQL',\r\n              },\r\n            },\r\n          ],\r\n        },\r\n\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  json() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  media() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.media.allowed-types'),\r\n                defaultMessage: 'Select allowed types of media',\r\n              },\r\n              name: 'allowedTypes',\r\n              type: 'allowed-types-select',\r\n              size: 7,\r\n              value: '',\r\n              validations: {},\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.required, attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  number(data: { type: DataType }) {\r\n    const inputStep = data.type === 'decimal' || data.type === 'float' ? 'any' : 1;\r\n\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              autoFocus: true,\r\n              name: 'default',\r\n              type: data.type === 'biginteger' ? 'text' : 'number',\r\n              step: inputStep,\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.settings.default'),\r\n                defaultMessage: 'Default value',\r\n              },\r\n              validations: {},\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [\r\n            attributeOptions.required,\r\n            attributeOptions.unique,\r\n            attributeOptions.max,\r\n            attributeOptions.min,\r\n            attributeOptions.private,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  password() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [attributeOptions.default] },\r\n\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [\r\n            attributeOptions.required,\r\n            attributeOptions.maxLength,\r\n            attributeOptions.minLength,\r\n            attributeOptions.private,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  relation() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [attributeOptions.private],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  richtext() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [attributeOptions.default] },\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [\r\n            attributeOptions.required,\r\n            attributeOptions.maxLength,\r\n            attributeOptions.minLength,\r\n            attributeOptions.private,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  text() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [attributeOptions.default, attributeOptions.regex] },\r\n\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [\r\n            attributeOptions.required,\r\n            attributeOptions.unique,\r\n            attributeOptions.maxLength,\r\n            attributeOptions.minLength,\r\n            attributeOptions.private,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  uid(data: { targetField: string }) {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            { ...attributeOptions.default, disabled: Boolean(data.targetField), type: 'text' },\r\n          ],\r\n        },\r\n\r\n        {\r\n          sectionTitle: {\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          items: [\r\n            attributeOptions.required,\r\n            attributeOptions.maxLength,\r\n            attributeOptions.minLength,\r\n            attributeOptions.private,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\n\r\nexport const componentField = {\r\n  intlLabel: {\r\n    id: 'global.type',\r\n    defaultMessage: 'Type',\r\n  },\r\n  name: 'createComponent',\r\n  type: 'boolean-radio-group',\r\n  size: 12,\r\n  radios: [\r\n    {\r\n      title: {\r\n        id: getTrad('form.attribute.component.option.create'),\r\n        defaultMessage: 'Create a new component',\r\n      },\r\n      description: {\r\n        id: getTrad('form.attribute.component.option.create.description'),\r\n        defaultMessage:\r\n          'A component is shared across types and components, it will be available and accessible everywhere.',\r\n      },\r\n      value: true,\r\n    },\r\n    {\r\n      title: {\r\n        id: getTrad('form.attribute.component.option.reuse-existing'),\r\n        defaultMessage: 'Use an existing component',\r\n      },\r\n      description: {\r\n        id: getTrad('form.attribute.component.option.reuse-existing.description'),\r\n        defaultMessage:\r\n          'Reuse a component already created to keep your data consistent across content-types.',\r\n      },\r\n      value: false,\r\n    },\r\n  ],\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\nimport { componentField } from '../component/componentField';\r\nimport { componentForm } from '../component/componentForm';\r\n\r\nimport { nameField } from './nameField';\r\n\r\nexport const baseForm = {\r\n  component(data: { createComponent: boolean }, step: string) {\r\n    if (step === '1') {\r\n      const itemsToConcat =\r\n        data.createComponent === true ? componentForm.base('componentToCreate.') : [];\r\n\r\n      return {\r\n        sections: [{ sectionTitle: null, items: [componentField] }, ...itemsToConcat],\r\n      };\r\n    }\r\n\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            nameField,\r\n            {\r\n              name: 'component',\r\n              type: 'select-component',\r\n              intlLabel: {\r\n                id: getTrad('modalForm.attributes.select-component'),\r\n                defaultMessage: 'Select a component',\r\n              },\r\n              isMultiple: false,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              intlLabel: {\r\n                id: 'global.type',\r\n                defaultMessage: 'Type',\r\n              },\r\n              name: 'repeatable',\r\n              type: 'boolean-radio-group',\r\n              size: 12,\r\n              radios: [\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.component.option.repeatable'),\r\n                    defaultMessage: 'Repeatable component',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.component.option.repeatable.description'),\r\n                    defaultMessage:\r\n                      'Best for multiple instances (array) of ingredients, meta tags, etc..',\r\n                  },\r\n                  value: true,\r\n                },\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.component.option.single'),\r\n                    defaultMessage: 'Single component',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.component.option.single.description'),\r\n                    defaultMessage:\r\n                      'Best for grouping fields like full address, main information, etc...',\r\n                  },\r\n                  value: false,\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  date() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            nameField,\r\n            {\r\n              intlLabel: {\r\n                id: 'global.type',\r\n                defaultMessage: 'Type',\r\n              },\r\n              name: 'type',\r\n              type: 'select-date',\r\n              options: [\r\n                {\r\n                  key: '__null_reset_value__',\r\n                  value: '',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: 'components.InputSelect.option.placeholder',\r\n                      defaultMessage: 'Choose here',\r\n                    },\r\n                    hidden: true,\r\n                  },\r\n                },\r\n                {\r\n                  key: 'date',\r\n                  value: 'date',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.date.type.date'),\r\n                      defaultMessage: 'date (ex: 01/01/{currentYear})',\r\n                      values: { currentYear: new Date().getFullYear() },\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  key: 'datetime',\r\n                  value: 'datetime',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.date.type.datetime'),\r\n                      defaultMessage: 'datetime (ex: 01/01/{currentYear} 00:00 AM)',\r\n                      values: { currentYear: new Date().getFullYear() },\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  key: 'time',\r\n                  value: 'time',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.date.type.time'),\r\n                      defaultMessage: 'time (ex: 00:00 AM)',\r\n                    },\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  enumeration() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [nameField] },\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              name: 'enum',\r\n              type: 'textarea-enum',\r\n              size: 6,\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.item.enumeration.rules'),\r\n                defaultMessage: 'Values (one line per value)',\r\n              },\r\n              placeholder: {\r\n                id: getTrad('form.attribute.item.enumeration.placeholder'),\r\n                defaultMessage: 'Ex:\\nmorning\\nnoon\\nevening',\r\n              },\r\n              validations: {\r\n                required: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  media() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [nameField] },\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              intlLabel: {\r\n                id: 'global.type',\r\n                defaultMessage: 'Type',\r\n              },\r\n              name: 'multiple',\r\n              size: 12,\r\n              type: 'boolean-radio-group',\r\n              radios: [\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.media.option.multiple'),\r\n                    defaultMessage: 'Multiple media',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.media.option.multiple.description'),\r\n                    defaultMessage: 'Best for sliders, carousels or multiple files download',\r\n                  },\r\n                  value: true,\r\n                },\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.media.option.single'),\r\n                    defaultMessage: 'Single media',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.media.option.single.description'),\r\n                    defaultMessage: 'Best for avatar, profile picture or cover',\r\n                  },\r\n                  value: false,\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  number() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            nameField,\r\n            {\r\n              intlLabel: {\r\n                id: getTrad('form.attribute.item.number.type'),\r\n                defaultMessage: 'Number format',\r\n              },\r\n              name: 'type',\r\n              type: 'select-number',\r\n              options: [\r\n                {\r\n                  key: '__null_reset_value__',\r\n                  value: '',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: 'components.InputSelect.option.placeholder',\r\n                      defaultMessage: 'Choose here',\r\n                    },\r\n                    hidden: true,\r\n                  },\r\n                },\r\n                {\r\n                  key: 'integer',\r\n                  value: 'integer',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.number.type.integer'),\r\n                      defaultMessage: 'integer (ex: 10)',\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  key: 'biginteger',\r\n                  value: 'biginteger',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.number.type.biginteger'),\r\n                      defaultMessage: 'biginteger (ex: 123456789)',\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  key: 'decimal',\r\n                  value: 'decimal',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.number.type.decimal'),\r\n                      defaultMessage: 'decimal (ex: 2.22)',\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  key: 'float',\r\n                  value: 'float',\r\n                  metadatas: {\r\n                    intlLabel: {\r\n                      id: getTrad('form.attribute.item.number.type.float'),\r\n                      defaultMessage: 'decimal (ex: 3.3333333)',\r\n                    },\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  relation() {\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              intlLabel: { id: 'FIXME', defaultMessage: 'FIXME' },\r\n              name: 'relation',\r\n              size: 12,\r\n              type: 'relation',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  string() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [nameField] },\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              intlLabel: {\r\n                id: 'global.type',\r\n                defaultMessage: 'Type',\r\n              },\r\n              name: 'type',\r\n              size: 12,\r\n              type: 'radio-group',\r\n              radios: [\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.text.option.short-text'),\r\n                    defaultMessage: 'Sort text',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.text.option.short-text.description'),\r\n                    defaultMessage:\r\n                      'Best for titles, names, links (URL). It also enables exact search on the field.',\r\n                  },\r\n                  value: 'string',\r\n                },\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.text.option.long-text'),\r\n                    defaultMessage: 'Long text',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.text.option.long-text.description'),\r\n                    defaultMessage: 'Best for descriptions, biography. Exact search is disabled.',\r\n                  },\r\n                  value: 'text',\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  text() {\r\n    return {\r\n      sections: [\r\n        { sectionTitle: null, items: [nameField] },\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              intlLabel: {\r\n                id: 'global.type',\r\n                defaultMessage: 'Type',\r\n              },\r\n              name: 'type',\r\n              size: 12,\r\n              type: 'radio-group',\r\n              radios: [\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.text.option.short-text'),\r\n                    defaultMessage: 'Sort text',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.text.option.short-text.description'),\r\n                    defaultMessage:\r\n                      'Best for titles, names, links (URL). It also enables exact search on the field.',\r\n                  },\r\n                  value: 'string',\r\n                },\r\n                {\r\n                  title: {\r\n                    id: getTrad('form.attribute.text.option.long-text'),\r\n                    defaultMessage: 'Long text',\r\n                  },\r\n                  description: {\r\n                    id: getTrad('form.attribute.text.option.long-text.description'),\r\n                    defaultMessage: 'Best for descriptions, biography. Exact search is disabled.',\r\n                  },\r\n                  value: 'text',\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  uid(_data: unknown, step: string, attributes: Array<{ type: string; name: string }>) {\r\n    const options = attributes\r\n      .filter(({ type }) => ['string', 'text'].includes(type))\r\n      .map(({ name }) => ({\r\n        key: name,\r\n        value: name,\r\n        metadatas: {\r\n          intlLabel: { id: `${name}.no-override`, defaultMessage: name },\r\n        },\r\n      }));\r\n\r\n    return {\r\n      sections: [\r\n        {\r\n          sectionTitle: null,\r\n          items: [\r\n            {\r\n              ...nameField,\r\n              placeholder: {\r\n                id: getTrad('modalForm.attribute.form.base.name.placeholder'),\r\n                defaultMessage: 'e.g. slug, seoUrl, canonicalUrl',\r\n              },\r\n            },\r\n            {\r\n              intlLabel: {\r\n                id: getTrad('modalForm.attribute.target-field'),\r\n                defaultMessage: 'Attached field',\r\n              },\r\n              name: 'targetField',\r\n              type: 'select',\r\n              options: [\r\n                {\r\n                  key: '__null_reset_value__',\r\n                  value: '',\r\n                  metadatas: { intlLabel: { id: 'global.none', defaultMessage: 'None' } },\r\n                },\r\n                ...options,\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n};\r\n","import { advancedForm } from './advancedForm';\r\nimport { baseForm } from './baseForm';\r\n\r\nexport const attributesForm = {\r\n  advanced: advancedForm,\r\n  base: baseForm,\r\n};\r\n","import slugify from '@sindresorhus/slugify';\r\n\r\nexport const toRegressedEnumValue = (value: string | undefined) => {\r\n  if (!value) {\r\n    return '';\r\n  }\r\n  return slugify(value, {\r\n    decamelize: false,\r\n    lowercase: false,\r\n    separator: '_',\r\n  });\r\n};\r\n","import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\r\nimport { snakeCase } from 'lodash/fp';\r\nimport toNumber from 'lodash/toNumber';\r\nimport * as yup from 'yup';\r\n\r\nimport { getTrad } from '../../../../utils/getTrad';\r\n\r\nconst NAME_REGEX = /^[A-Za-z][_0-9A-Za-z]*$/;\r\n\r\nconst alreadyUsedAttributeNames = (\r\n  usedNames: Array<string>\r\n): yup.TestConfig<string | undefined, Record<string, unknown>> => {\r\n  return {\r\n    name: 'attributeNameAlreadyUsed',\r\n    message: errorsTrads.unique.id,\r\n    test(value: string | undefined) {\r\n      if (!value) {\r\n        return false;\r\n      }\r\n      const snakeCaseKey = snakeCase(value);\r\n\r\n      return !usedNames.some((existingKey) => {\r\n        return snakeCase(existingKey) === snakeCaseKey;\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nconst getUsedContentTypeAttributeNames = (\r\n  ctShema: any,\r\n  isEdition: boolean,\r\n  attributeNameToEdit: string\r\n) => {\r\n  const attributes = ctShema?.schema?.attributes ?? {};\r\n\r\n  return Object.keys(attributes).filter((attr) => {\r\n    if (isEdition) {\r\n      return attr !== attributeNameToEdit;\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\nconst isNameAllowed = (\r\n  reservedNames: Array<string>\r\n): yup.TestConfig<string | undefined, Record<string, unknown>> => {\r\n  return {\r\n    name: 'forbiddenAttributeName',\r\n    message: getTrad('error.attributeName.reserved-name'),\r\n    test(value: string | undefined) {\r\n      if (!value) {\r\n        return false;\r\n      }\r\n      const snakeCaseKey = snakeCase(value);\r\n\r\n      return !reservedNames.some((existingKey) => {\r\n        return snakeCase(existingKey) === snakeCaseKey;\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nconst validators = {\r\n  default: () => yup.string().nullable(),\r\n  max: () => yup.number().integer().nullable(),\r\n  min: () =>\r\n    yup\r\n      .number()\r\n      .integer()\r\n      .when('max', (max, schema) => {\r\n        if (max) {\r\n          return schema.max(max, getTrad('error.validation.minSupMax'));\r\n        }\r\n\r\n        return schema;\r\n      })\r\n      .nullable(),\r\n  maxLength: () => yup.number().integer().positive(getTrad('error.validation.positive')).nullable(),\r\n  minLength: () =>\r\n    yup\r\n      .number()\r\n      .integer()\r\n      .min(1)\r\n      .when('maxLength', (maxLength, schema) => {\r\n        if (maxLength) {\r\n          return schema.max(maxLength, getTrad('error.validation.minSupMax'));\r\n        }\r\n\r\n        return schema;\r\n      })\r\n      .nullable(),\r\n  name(usedNames: Array<string>, reservedNames: Array<string>) {\r\n    return yup\r\n      .string()\r\n      .test(alreadyUsedAttributeNames(usedNames))\r\n      .test(isNameAllowed(reservedNames))\r\n      .matches(NAME_REGEX, errorsTrads.regex.id)\r\n      .required(errorsTrads.required.id);\r\n  },\r\n  required: () => yup.boolean(),\r\n  type: () => yup.string().required(errorsTrads.required.id),\r\n  unique: () => yup.boolean().nullable(),\r\n};\r\n\r\nconst createTextShape = (usedAttributeNames: Array<string>, reservedNames: Array<string>) => {\r\n  const shape = {\r\n    name: validators.name(usedAttributeNames, reservedNames),\r\n    type: validators.type(),\r\n    default: validators.default(),\r\n    unique: validators.unique(),\r\n    required: validators.required(),\r\n    maxLength: validators.maxLength(),\r\n    minLength: validators.minLength(),\r\n    regex: yup\r\n      .string()\r\n      .test({\r\n        name: 'isValidRegExpPattern',\r\n        message: getTrad('error.validation.regex'),\r\n        test(value) {\r\n          try {\r\n            return new RegExp(value || '') !== null;\r\n          } catch (e) {\r\n            return false;\r\n          }\r\n        },\r\n      })\r\n      .nullable(),\r\n  };\r\n\r\n  return shape;\r\n};\r\n\r\ntype GenericIsMinSuperiorThanMax<T extends (string | null) | number> = yup.TestConfig<\r\n  T | undefined,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst isMinSuperiorThanMax = <\r\n  T extends (string | null) | number,\r\n>(): GenericIsMinSuperiorThanMax<T> => ({\r\n  name: 'isMinSuperiorThanMax',\r\n  message: getTrad('error.validation.minSupMax'),\r\n  test(min: T | undefined) {\r\n    if (!min) {\r\n      return true;\r\n    }\r\n\r\n    const { max } = (this as any).parent;\r\n\r\n    if (!max) {\r\n      return true;\r\n    }\r\n\r\n    if (Number.isNaN(toNumber(min))) {\r\n      return true;\r\n    }\r\n\r\n    return toNumber(max) >= toNumber(min);\r\n  },\r\n});\r\n\r\nexport {\r\n  alreadyUsedAttributeNames,\r\n  createTextShape,\r\n  getUsedContentTypeAttributeNames,\r\n  isMinSuperiorThanMax,\r\n  isNameAllowed,\r\n  NAME_REGEX,\r\n  validators,\r\n};\r\n","import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\r\nimport uniq from 'lodash/uniq';\r\nimport * as yup from 'yup';\r\n\r\nimport { getRelationType } from '../../../utils/getRelationType';\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { toRegressedEnumValue } from '../../../utils/toRegressedEnumValue';\r\n\r\nimport {\r\n  alreadyUsedAttributeNames,\r\n  createTextShape,\r\n  isMinSuperiorThanMax,\r\n  isNameAllowed,\r\n  NAME_REGEX,\r\n  validators,\r\n} from './validation/common';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\nexport const attributeTypes = {\r\n  date(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  datetime(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  time(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  default(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  biginteger(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: yup\r\n        .string()\r\n        .nullable()\r\n        .matches(/^-?\\d*$/),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      max: yup\r\n        .string()\r\n        .nullable()\r\n        .matches(/^-?\\d*$/, errorsTrads.regex.id),\r\n      min: yup\r\n        .string()\r\n        .nullable()\r\n        .test(isMinSuperiorThanMax<string | null>())\r\n        .matches(/^-?\\d*$/, errorsTrads.regex.id),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  boolean(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      default: yup.boolean().nullable(),\r\n      required: validators.required(),\r\n      unique: validators.unique(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  component(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      required: validators.required(),\r\n      max: validators.max(),\r\n      min: validators.min(),\r\n      component: yup.string().required(errorsTrads.required.id),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  decimal(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: yup.number(),\r\n      required: validators.required(),\r\n      max: yup.number(),\r\n      min: yup.number().test(isMinSuperiorThanMax<number>()),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  dynamiczone(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      required: validators.required(),\r\n      max: validators.max(),\r\n      min: validators.min(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  email(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: yup.string().email().nullable(),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      maxLength: validators.maxLength(),\r\n      minLength: validators.minLength(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  enumeration(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    /**\r\n     * For enumerations the least common denomiator is GraphQL, where\r\n     * values needs to match the secure name regex:\r\n     * GraphQL Spec https://spec.graphql.org/June2018/#sec-Names\r\n     *\r\n     * Therefore we need to make sure our users only use values, which\r\n     * can be returned by GraphQL, by checking the regressed values\r\n     * agains the GraphQL regex.\r\n     *\r\n     * TODO V5: check if we can avoid this coupling by moving this logic\r\n     * into the GraphQL plugin.\r\n     */\r\n    const GRAPHQL_ENUM_REGEX = /^[_A-Za-z][_0-9A-Za-z]*$/;\r\n\r\n    const shape = {\r\n      name: yup\r\n        .string()\r\n        .test(alreadyUsedAttributeNames(usedAttributeNames))\r\n        .test(isNameAllowed(reservedNames))\r\n        .matches(GRAPHQL_ENUM_REGEX, errorsTrads.regex.id)\r\n        .required(errorsTrads.required.id),\r\n      type: validators.type(),\r\n      default: validators.default(),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      enum: yup\r\n        .array()\r\n        .of(yup.string())\r\n        .min(1, errorsTrads.min.id)\r\n        .test({\r\n          name: 'areEnumValuesUnique',\r\n          message: getTrad('error.validation.enum-duplicate'),\r\n          test(values) {\r\n            if (!values) {\r\n              return false;\r\n            }\r\n            const duplicates = uniq(\r\n              values\r\n                .map(toRegressedEnumValue)\r\n                .filter((value, index, values) => values.indexOf(value) !== index)\r\n            );\r\n\r\n            return !duplicates.length;\r\n          },\r\n        })\r\n        .test({\r\n          name: 'doesNotHaveEmptyValues',\r\n          message: getTrad('error.validation.enum-empty-string'),\r\n          test: (values) => {\r\n            if (!values) {\r\n              return false;\r\n            }\r\n            return !values.map(toRegressedEnumValue).some((val) => val === '');\r\n          },\r\n        })\r\n        .test({\r\n          name: 'doesMatchRegex',\r\n          message: getTrad('error.validation.enum-regex'),\r\n          test: (values) => {\r\n            if (!values) {\r\n              return false;\r\n            }\r\n            return values\r\n              .map(toRegressedEnumValue)\r\n              .every((value) => GRAPHQL_ENUM_REGEX.test(value));\r\n          },\r\n        }),\r\n      enumName: yup.string().nullable(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  float(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      required: validators.required(),\r\n      default: yup.number(),\r\n      max: yup.number(),\r\n      min: yup.number().test(isMinSuperiorThanMax<number>()),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  integer(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: yup.number().integer(),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      max: validators.max(),\r\n      min: validators.min(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  json(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      required: validators.required(),\r\n      unique: validators.unique(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  media(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      multiple: yup.boolean(),\r\n      required: validators.required(),\r\n      allowedTypes: yup\r\n        .array()\r\n        .of(yup.string().oneOf(['images', 'videos', 'files', 'audios']))\r\n        .min(1)\r\n        .nullable(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  password(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: validators.default(),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      maxLength: validators.maxLength(),\r\n      minLength: validators.minLength(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  relation(\r\n    usedAttributeNames: Array<string>,\r\n    reservedNames: Array<string>,\r\n    alreadyTakenTargetAttributes: Array<{ name: string }>,\r\n    {\r\n      initialData,\r\n      modifiedData,\r\n    }: {\r\n      initialData: { targetAttribute?: string };\r\n      modifiedData: {\r\n        name?: string;\r\n        relation?: Schema.Attribute.RelationKind.WithTarget;\r\n        targetAttribute?: string;\r\n      };\r\n    }\r\n  ) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      target: yup.string().required(errorsTrads.required.id),\r\n      relation: yup.string().required(),\r\n      type: yup.string().required(),\r\n      targetAttribute: yup.lazy(() => {\r\n        const relationType = getRelationType(modifiedData.relation, modifiedData.targetAttribute);\r\n\r\n        if (relationType === 'oneWay' || relationType === 'manyWay') {\r\n          return yup.string().nullable();\r\n        }\r\n\r\n        const schema = yup.string().test(isNameAllowed(reservedNames));\r\n        const initialForbiddenName = [\r\n          ...alreadyTakenTargetAttributes.map(({ name }) => name),\r\n          modifiedData.name,\r\n        ];\r\n\r\n        const forbiddenTargetAttributeName = initialForbiddenName.filter(\r\n          (val) => val !== initialData.targetAttribute\r\n        );\r\n\r\n        return schema\r\n          .matches(NAME_REGEX, errorsTrads.regex.id)\r\n          .test({\r\n            name: 'forbiddenTargetAttributeName',\r\n            message: getTrad('error.validation.relation.targetAttribute-taken'),\r\n            test(value) {\r\n              if (!value) {\r\n                return false;\r\n              }\r\n\r\n              return !forbiddenTargetAttributeName.includes(value);\r\n            },\r\n          })\r\n          .required(errorsTrads.required.id);\r\n      }),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  richtext(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: validators.default(),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      maxLength: validators.maxLength(),\r\n      minLength: validators.minLength(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  blocks(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = {\r\n      name: validators.name(usedAttributeNames, reservedNames),\r\n      type: validators.type(),\r\n      default: validators.default(),\r\n      unique: validators.unique(),\r\n      required: validators.required(),\r\n      maxLength: validators.maxLength(),\r\n      minLength: validators.minLength(),\r\n    };\r\n\r\n    return yup.object(shape);\r\n  },\r\n  string(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = createTextShape(usedAttributeNames, reservedNames);\r\n\r\n    return yup.object(shape);\r\n  },\r\n  text(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = createTextShape(usedAttributeNames, reservedNames);\r\n\r\n    return yup.object(shape);\r\n  },\r\n  uid(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\r\n    const shape = createTextShape(usedAttributeNames, reservedNames);\r\n\r\n    return yup.object(shape);\r\n  },\r\n};\r\n","export const CATEGORY_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\r\n","import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\r\nimport * as yup from 'yup';\r\n\r\nimport { CATEGORY_NAME_REGEX } from './regex';\r\n\r\nexport const createCategorySchema = (usedCategoryNames: Array<string>) => {\r\n  const shape = {\r\n    name: yup\r\n      .string()\r\n      .matches(CATEGORY_NAME_REGEX, errorsTrads.regex.id)\r\n      .test({\r\n        name: 'nameNotAllowed',\r\n        message: errorsTrads.unique.id,\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n          return !usedCategoryNames.includes(value?.toLowerCase());\r\n        },\r\n      })\r\n      .required(errorsTrads.required.id),\r\n  };\r\n\r\n  return yup.object(shape);\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\n\r\nexport const categoryForm = {\r\n  base: {\r\n    sections: [\r\n      {\r\n        sectionTitle: null,\r\n        items: [\r\n          {\r\n            autoFocus: true,\r\n            name: 'name',\r\n            type: 'text',\r\n            intlLabel: {\r\n              id: 'global.name',\r\n              defaultMessage: 'Name',\r\n            },\r\n\r\n            // validations: {\r\n            //   required: true,\r\n            // },\r\n            description: {\r\n              id: getTrad('modalForm.editCategory.base.name.description'),\r\n              defaultMessage: 'No space is allowed for the name of the category',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\r\nimport { snakeCase } from 'lodash/fp';\r\nimport * as yup from 'yup';\r\n\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { CATEGORY_NAME_REGEX } from '../category/regex';\r\nimport { createComponentUid } from '../utils/createUid';\r\n\r\nexport const createComponentSchema = (\r\n  usedComponentNames: Array<string>,\r\n  reservedNames: Array<string>,\r\n  category: string,\r\n  takenCollectionNames: Array<string>,\r\n  currentCollectionName: string\r\n) => {\r\n  const shape = {\r\n    displayName: yup\r\n      .string()\r\n      .test({\r\n        name: 'nameAlreadyUsed',\r\n        message: errorsTrads.unique.id,\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const name = createComponentUid(value, category);\r\n\r\n          const snakeCaseKey = snakeCase(name);\r\n          const snakeCaseCollectionName = snakeCase(currentCollectionName);\r\n\r\n          return (\r\n            usedComponentNames.every((reserved) => {\r\n              return snakeCase(reserved) !== snakeCaseKey;\r\n            }) &&\r\n            takenCollectionNames.every(\r\n              (collectionName) => snakeCase(collectionName) !== snakeCaseCollectionName\r\n            )\r\n          );\r\n        },\r\n      })\r\n      .test({\r\n        name: 'nameNotAllowed',\r\n        message: getTrad('error.contentTypeName.reserved-name'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n          return reservedNames.every((reserved) => {\r\n            return snakeCase(reserved) !== snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .required(errorsTrads.required.id),\r\n    category: yup\r\n      .string()\r\n      .matches(CATEGORY_NAME_REGEX, errorsTrads.regex.id)\r\n      .required(errorsTrads.required.id),\r\n\r\n    icon: yup.string(),\r\n  };\r\n\r\n  return yup.object(shape);\r\n};\r\n","import { getTrad } from '../../../utils/getTrad';\r\n\r\nconst nameField = {\r\n  name: 'displayName',\r\n  type: 'text',\r\n  intlLabel: {\r\n    id: getTrad('contentType.displayName.label'),\r\n    defaultMessage: 'Display name',\r\n  },\r\n};\r\n\r\nexport const contentTypeForm = {\r\n  advanced: {\r\n    default() {\r\n      return {\r\n        sections: [\r\n          {\r\n            items: [\r\n              {\r\n                intlLabel: {\r\n                  id: getTrad('contentType.draftAndPublish.label'),\r\n                  defaultMessage: 'Draft & publish',\r\n                },\r\n                description: {\r\n                  id: getTrad('contentType.draftAndPublish.description'),\r\n                  defaultMessage:\r\n                    'Allows writing a draft version of an entry, before it is published',\r\n                },\r\n                name: 'draftAndPublish',\r\n                type: 'toggle-draft-publish',\r\n                validations: {},\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n  base: {\r\n    create() {\r\n      return {\r\n        sections: [\r\n          {\r\n            sectionTitle: null,\r\n            items: [\r\n              nameField,\r\n              {\r\n                description: {\r\n                  id: getTrad('contentType.apiId-singular.description'),\r\n                  defaultMessage:\r\n                    'Used to generate the API routes and databases tables/collections',\r\n                },\r\n                intlLabel: {\r\n                  id: getTrad('contentType.apiId-singular.label'),\r\n                  defaultMessage: 'API ID (Singular)',\r\n                },\r\n                name: 'singularName',\r\n                type: 'text-singular',\r\n              },\r\n              {\r\n                type: 'pushRight',\r\n                size: 6,\r\n                intlLabel: { id: '', defaultMessage: '' },\r\n                name: 'pushRight',\r\n              },\r\n              {\r\n                description: {\r\n                  id: getTrad('contentType.apiId-plural.description'),\r\n                  defaultMessage: 'Pluralized API ID',\r\n                },\r\n                intlLabel: {\r\n                  id: getTrad('contentType.apiId-plural.label'),\r\n                  defaultMessage: 'API ID (Plural)',\r\n                },\r\n                name: 'pluralName',\r\n                type: 'text-plural',\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n    edit() {\r\n      return {\r\n        sections: [\r\n          {\r\n            sectionTitle: null,\r\n            items: [\r\n              nameField,\r\n              {\r\n                disabled: true,\r\n                description: {\r\n                  id: getTrad('contentType.apiId-singular.description'),\r\n                  defaultMessage:\r\n                    'Used to generate the API routes and databases tables/collections',\r\n                },\r\n                intlLabel: {\r\n                  id: getTrad('contentType.apiId-singular.label'),\r\n                  defaultMessage: 'API ID (Singular)',\r\n                },\r\n                name: 'singularName',\r\n                type: 'text',\r\n              },\r\n              {\r\n                type: 'pushRight',\r\n                size: 6,\r\n                intlLabel: { id: '', defaultMessage: '' },\r\n                name: 'pushRight',\r\n              },\r\n              {\r\n                disabled: true,\r\n                description: {\r\n                  id: getTrad('contentType.apiId-plural.description'),\r\n                  defaultMessage: 'Pluralized API ID',\r\n                },\r\n                intlLabel: {\r\n                  id: getTrad('contentType.apiId-plural.label'),\r\n                  defaultMessage: 'API ID (Plural)',\r\n                },\r\n                name: 'pluralName',\r\n                type: 'text',\r\n              },\r\n              {\r\n                intlLabel: {\r\n                  id: 'global.type',\r\n                  defaultMessage: 'Type',\r\n                },\r\n                name: 'kind',\r\n                type: 'content-type-radio-group',\r\n                size: 12,\r\n                radios: [\r\n                  {\r\n                    title: {\r\n                      id: getTrad('form.button.collection-type.name'),\r\n                      defaultMessage: 'Collection Type',\r\n                    },\r\n                    description: {\r\n                      id: getTrad('form.button.collection-type.description'),\r\n                      defaultMessage:\r\n                        'Best for multiple instances like articles, products, comments, etc.',\r\n                    },\r\n                    value: 'collectionType',\r\n                  },\r\n                  {\r\n                    title: {\r\n                      id: getTrad('form.button.single-type.name'),\r\n                      defaultMessage: 'Single Type',\r\n                    },\r\n                    description: {\r\n                      id: getTrad('form.button.single-type.description'),\r\n                      defaultMessage: 'Best for single instance like about us, homepage, etc.',\r\n                    },\r\n                    value: 'singleType',\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n};\r\n","import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\r\nimport { snakeCase } from 'lodash/fp';\r\nimport * as yup from 'yup';\r\n\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { createUid } from '../utils/createUid';\r\n\r\ntype CreateContentTypeSchemaParams = {\r\n  usedContentTypeNames: Array<string>;\r\n  reservedModels: Array<string>;\r\n  singularNames: Array<string>;\r\n  pluralNames: Array<string>;\r\n  collectionNames: Array<string>;\r\n};\r\n\r\nexport const createContentTypeSchema = ({\r\n  usedContentTypeNames = [],\r\n  reservedModels = [],\r\n  singularNames = [],\r\n  pluralNames = [],\r\n  collectionNames = [],\r\n}: CreateContentTypeSchemaParams) => {\r\n  const shape = {\r\n    displayName: yup\r\n      .string()\r\n      .test({\r\n        name: 'nameAlreadyUsed',\r\n        message: errorsTrads.unique.id,\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const name = createUid(value);\r\n\r\n          const snakeCaseKey = snakeCase(name);\r\n\r\n          return !usedContentTypeNames.some((value) => {\r\n            return snakeCase(value) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .test({\r\n        name: 'nameNotAllowed',\r\n        message: getTrad('error.contentTypeName.reserved-name'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !reservedModels.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .required(errorsTrads.required.id),\r\n    pluralName: yup\r\n      .string()\r\n      .test({\r\n        name: 'pluralNameAlreadyUsed',\r\n        message: errorsTrads.unique.id,\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !pluralNames.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .test({\r\n        name: 'pluralNameAlreadyUsedAsSingular',\r\n        message: getTrad('error.contentType.pluralName-equals-singularName'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !singularNames.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .test({\r\n        name: 'pluralAndSingularAreUnique',\r\n        message: getTrad('error.contentType.pluralName-used'),\r\n        test(value, context) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          return snakeCase(context.parent.singularName) !== snakeCase(value);\r\n        },\r\n      })\r\n      .test({\r\n        name: 'pluralNameNotAllowed',\r\n        message: getTrad('error.contentTypeName.reserved-name'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !reservedModels.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .test({\r\n        name: 'pluralNameNotAlreadyUsedInCollectionName',\r\n        message: getTrad('error.contentType.pluralName-equals-collectionName'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !collectionNames.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .required(errorsTrads.required.id),\r\n    singularName: yup\r\n      .string()\r\n      .test({\r\n        name: 'singularNameAlreadyUsed',\r\n        message: errorsTrads.unique.id,\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !singularNames.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .test({\r\n        name: 'singularNameAlreadyUsedAsPlural',\r\n        message: getTrad('error.contentType.singularName-equals-pluralName'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !pluralNames.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .test({\r\n        name: 'pluralAndSingularAreUnique',\r\n        message: getTrad('error.contentType.singularName-used'),\r\n        test(value, context) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          return snakeCase(context.parent.pluralName) !== snakeCase(value);\r\n        },\r\n      })\r\n      .test({\r\n        name: 'singularNameNotAllowed',\r\n        message: getTrad('error.contentTypeName.reserved-name'),\r\n        test(value) {\r\n          if (!value) {\r\n            return false;\r\n          }\r\n\r\n          const snakeCaseKey = snakeCase(value);\r\n\r\n          return !reservedModels.some((key) => {\r\n            return snakeCase(key) === snakeCaseKey;\r\n          });\r\n        },\r\n      })\r\n      .required(errorsTrads.required.id),\r\n    draftAndPublish: yup.boolean(),\r\n    kind: yup.string().oneOf(['singleType', 'collectionType']),\r\n  };\r\n\r\n  return yup.object(shape);\r\n};\r\n","import { getTrad } from '../../utils/getTrad';\r\n\r\nimport { componentField } from './component/componentField';\r\nimport { componentForm } from './component/componentForm';\r\n\r\nexport const dynamiczoneForm = {\r\n  advanced: {\r\n    default() {\r\n      return {\r\n        sections: componentForm.advanced(),\r\n      };\r\n    },\r\n  },\r\n  base: {\r\n    createComponent() {\r\n      return {\r\n        sections: [\r\n          { sectionTitle: null, items: [componentField] },\r\n          ...componentForm.base('componentToCreate.'),\r\n        ],\r\n      };\r\n    },\r\n    default() {\r\n      return {\r\n        sections: [\r\n          { sectionTitle: null, items: [componentField] },\r\n          {\r\n            sectionTitle: null,\r\n            items: [\r\n              {\r\n                type: 'pushRight',\r\n                size: 6,\r\n                intlLabel: { id: '', defaultMessage: '' },\r\n                name: 'pushRight',\r\n              },\r\n              {\r\n                name: 'components',\r\n                type: 'select-components',\r\n                intlLabel: {\r\n                  id: getTrad('modalForm.attributes.select-components'),\r\n                  defaultMessage: 'Select the components',\r\n                },\r\n                isMultiple: true,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n};\r\n","type SectionTitle = {\r\n  id: string;\r\n  defaultMessage: string;\r\n};\r\n\r\ntype Item = {\r\n  intlLabel: {\r\n    id: string;\r\n    defaultMessage: string;\r\n  };\r\n  description?: { id: string; defaultMessage: string };\r\n  name: string;\r\n  type: string;\r\n  value?: string;\r\n  options?: {\r\n    key: string;\r\n    value: string;\r\n    metadatas: {\r\n      intlLabel: {\r\n        id: string;\r\n        defaultMessage: string;\r\n      };\r\n    };\r\n  }[];\r\n};\r\n\r\ntype FormTypeOption = {\r\n  sectionTitle: SectionTitle | null;\r\n  items: Item[];\r\n};\r\n\r\nexport type FormTypeOptions = Array<FormTypeOption>;\r\n\r\n/**\r\n * @description\r\n * Adds form options to the default section or as a new section\r\n */\r\nexport const addItemsToFormSection = (\r\n  formTypeOptions: FormTypeOptions | Item[],\r\n  sections: FormTypeOptions\r\n) => {\r\n  formTypeOptions.forEach((item) => {\r\n    if (!('sectionTitle' in item)) {\r\n      // When there is no sectionTitle key,\r\n      // add the item to the default section\r\n      sections[0].items?.push(item);\r\n      return;\r\n    }\r\n\r\n    // Otherwise, when sectionTitle has a value (including null),\r\n    // add the item as a new section\r\n    sections.push(item);\r\n  });\r\n};\r\n","import { snakeCase } from 'lodash/fp';\r\nimport pluralize from 'pluralize';\r\n\r\n// TODO: create a utility for this\r\n// Duplicate in server/src/services/schema-builder/component-builder.ts\r\nconst createComponentCollectionName = (name: string, category: string) => {\r\n  return `components_${snakeCase(category)}_${pluralize(snakeCase(name))}`;\r\n};\r\n\r\nexport { createComponentCollectionName };\r\n","export type SchemaData = {\r\n  initialData: {\r\n    name: string;\r\n    targetAttribute: any;\r\n  };\r\n  modifiedData: object;\r\n};\r\n\r\nexport type Attribute = {\r\n  name: string;\r\n};\r\n\r\nexport const getUsedAttributeNames = (\r\n  attributes: Array<Attribute>,\r\n  schemaData: SchemaData\r\n): Array<string> => {\r\n  return attributes\r\n    .filter(({ name }) => {\r\n      return name !== schemaData.initialData.name;\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n","import { getTrad } from '../../../utils';\r\nimport { commonBaseForm } from '../attributes/commonBaseForm';\r\nimport { attributesForm } from '../attributes/form';\r\nimport { nameField } from '../attributes/nameField';\r\nimport { attributeTypes } from '../attributes/types';\r\nimport { createCategorySchema } from '../category/createCategorySchema';\r\nimport { categoryForm } from '../category/form';\r\nimport { componentForm } from '../component/componentForm';\r\nimport { createComponentSchema } from '../component/createComponentSchema';\r\nimport { contentTypeForm } from '../contentType/contentTypeForm';\r\nimport { createContentTypeSchema } from '../contentType/createContentTypeSchema';\r\nimport { dynamiczoneForm } from '../dynamiczoneForm';\r\n\r\nimport { addItemsToFormSection, FormTypeOptions } from './utils/addItemsToFormSection';\r\nimport { createComponentCollectionName } from './utils/createCollectionName';\r\nimport { Attribute, getUsedAttributeNames, SchemaData } from './utils/getUsedAttributeNames';\r\n\r\nimport type { Internal } from '@strapi/types';\r\n\r\ntype ContentType = {\r\n  schema: {\r\n    singularName: string;\r\n    pluralName: string;\r\n    collectionName: string;\r\n  };\r\n};\r\n\r\nexport type SchemaParams = {\r\n  schemaAttributes: any;\r\n  attributeType: keyof typeof attributeTypes;\r\n  customFieldValidator: any;\r\n  reservedNames: {\r\n    attributes: Array<string>;\r\n  };\r\n  schemaData: any;\r\n  ctbFormsAPI: any;\r\n};\r\n\r\ntype Base<TAttributesFormType extends 'base' | 'advanced'> = {\r\n  data: any;\r\n  type: keyof (typeof attributesForm)[TAttributesFormType];\r\n  step: string;\r\n  attributes: any;\r\n  extensions: any;\r\n  forTarget: string;\r\n};\r\n\r\nexport const forms = {\r\n  customField: {\r\n    schema({\r\n      schemaAttributes,\r\n      attributeType,\r\n      customFieldValidator,\r\n      reservedNames,\r\n      schemaData,\r\n      ctbFormsAPI,\r\n    }: SchemaParams) {\r\n      const usedAttributeNames = getUsedAttributeNames(schemaAttributes, schemaData);\r\n\r\n      let attributeShape;\r\n      if (attributeType === 'relation') {\r\n        attributeShape = attributeTypes[attributeType](\r\n          usedAttributeNames,\r\n          reservedNames.attributes,\r\n          [],\r\n          { initialData: {}, modifiedData: {} }\r\n        );\r\n      } else {\r\n        attributeShape = attributeTypes[attributeType](\r\n          usedAttributeNames,\r\n          reservedNames.attributes\r\n        );\r\n      }\r\n\r\n      return ctbFormsAPI.makeCustomFieldValidator(\r\n        attributeShape,\r\n        customFieldValidator,\r\n        usedAttributeNames,\r\n        reservedNames.attributes,\r\n        schemaData\r\n      );\r\n    },\r\n    form: {\r\n      base({ customField }: any) {\r\n        // Default section with required name field\r\n        const sections: FormTypeOptions = [{ sectionTitle: null, items: [nameField] }];\r\n\r\n        if (customField.options?.base) {\r\n          addItemsToFormSection(customField.options.base, sections);\r\n        }\r\n\r\n        return { sections };\r\n      },\r\n      advanced({ customField, data, step, extensions, ...rest }: any) {\r\n        // Default section with no fields\r\n        const sections: FormTypeOptions = [{ sectionTitle: null, items: [] }];\r\n        const injectedInputs = extensions.getAdvancedForm(['attribute', customField.type], {\r\n          data,\r\n          type: customField.type,\r\n          step,\r\n          ...rest,\r\n        });\r\n\r\n        if (customField.options?.advanced) {\r\n          addItemsToFormSection(customField.options.advanced, sections);\r\n        }\r\n\r\n        if (injectedInputs) {\r\n          const extendedSettings = {\r\n            sectionTitle: {\r\n              id: getTrad('modalForm.custom-fields.advanced.settings.extended'),\r\n              defaultMessage: 'Extended settings',\r\n            },\r\n            items: injectedInputs,\r\n          };\r\n\r\n          sections.push(extendedSettings);\r\n        }\r\n\r\n        return { sections };\r\n      },\r\n    },\r\n  },\r\n  attribute: {\r\n    schema(\r\n      currentSchema: any,\r\n      attributeType: keyof typeof attributeTypes,\r\n      reservedNames: {\r\n        attributes: Array<string>;\r\n      },\r\n      alreadyTakenTargetContentTypeAttributes: Array<Attribute>,\r\n      options: SchemaData,\r\n      extensions: {\r\n        makeValidator: any;\r\n      }\r\n    ) {\r\n      // Get the attributes object on the schema\r\n      const attributes: Array<Attribute> = currentSchema?.schema?.attributes ?? [];\r\n      const usedAttributeNames = getUsedAttributeNames(attributes, options);\r\n\r\n      try {\r\n        const attributeShape = attributeTypes[attributeType](\r\n          usedAttributeNames,\r\n          reservedNames.attributes,\r\n          alreadyTakenTargetContentTypeAttributes,\r\n          options\r\n        );\r\n\r\n        return extensions.makeValidator(\r\n          ['attribute', attributeType],\r\n          attributeShape,\r\n          usedAttributeNames,\r\n          reservedNames.attributes,\r\n          alreadyTakenTargetContentTypeAttributes,\r\n          options\r\n        );\r\n      } catch (err) {\r\n        console.error('Error yup build schema', err);\r\n\r\n        return attributeTypes.default(usedAttributeNames, reservedNames.attributes);\r\n      }\r\n    },\r\n    form: {\r\n      advanced({ data, type, step, extensions, ...rest }: Base<'advanced'>) {\r\n        try {\r\n          const baseForm = attributesForm.advanced[type](data, step).sections;\r\n          const itemsToAdd = extensions.getAdvancedForm(['attribute', type], {\r\n            data,\r\n            type,\r\n            step,\r\n            ...rest,\r\n          });\r\n\r\n          const sections = baseForm.reduce((acc: Array<any>, current: any) => {\r\n            if (current.sectionTitle === null) {\r\n              acc.push(current);\r\n            } else {\r\n              acc.push({ ...current, items: [...current.items, ...itemsToAdd] });\r\n            }\r\n\r\n            return acc;\r\n          }, []);\r\n          // IF we want a dedicated section for the plugins\r\n          // const sections = [\r\n          //   ...baseForm,\r\n          //   {\r\n          //     sectionTitle: { id: 'Zone pour plugins', defaultMessage: 'Zone pour plugins' },\r\n          //     items: itemsToAdd,\r\n          //   },\r\n          // ];\r\n\r\n          return { sections };\r\n        } catch (err) {\r\n          console.error(err);\r\n\r\n          return { sections: [] };\r\n        }\r\n      },\r\n      base({ data, type, step, attributes }: Base<'base'>) {\r\n        try {\r\n          return attributesForm.base[type](data, step, attributes);\r\n        } catch (err) {\r\n          return commonBaseForm;\r\n        }\r\n      },\r\n    },\r\n  },\r\n  contentType: {\r\n    schema(\r\n      alreadyTakenNames: Array<string>,\r\n      isEditing: boolean,\r\n      ctUid: Internal.UID.ContentType,\r\n      reservedNames: {\r\n        models: any;\r\n      },\r\n      extensions: any,\r\n      contentTypes: Record<string, ContentType>\r\n    ) {\r\n      const singularNames = Object.values(contentTypes).map((contentType) => {\r\n        return contentType.schema.singularName;\r\n      });\r\n\r\n      const pluralNames = Object.values(contentTypes).map((contentType: any) => {\r\n        return contentType?.schema?.pluralName ?? '';\r\n      });\r\n\r\n      const takenNames = isEditing\r\n        ? alreadyTakenNames.filter((uid) => uid !== ctUid)\r\n        : alreadyTakenNames;\r\n\r\n      const takenSingularNames = isEditing\r\n        ? singularNames.filter((singName) => {\r\n            const { schema } = contentTypes[ctUid];\r\n\r\n            return schema.singularName !== singName;\r\n          })\r\n        : singularNames;\r\n\r\n      const takenPluralNames = isEditing\r\n        ? pluralNames.filter((pluralName) => {\r\n            const { schema } = contentTypes[ctUid];\r\n\r\n            return schema.pluralName !== pluralName;\r\n          })\r\n        : pluralNames;\r\n\r\n      // return the array of collection names not all normalized\r\n      const collectionNames = Object.values(contentTypes).map((contentType) => {\r\n        return contentType?.schema?.collectionName ?? '';\r\n      });\r\n\r\n      const takenCollectionNames = isEditing\r\n        ? collectionNames.filter((collectionName) => {\r\n            const { schema } = contentTypes[ctUid];\r\n            const currentCollectionName = schema.collectionName;\r\n\r\n            return collectionName !== currentCollectionName;\r\n          })\r\n        : collectionNames;\r\n\r\n      const contentTypeShape = createContentTypeSchema({\r\n        usedContentTypeNames: takenNames,\r\n        reservedModels: reservedNames.models,\r\n        singularNames: takenSingularNames,\r\n        pluralNames: takenPluralNames,\r\n        collectionNames: takenCollectionNames,\r\n      });\r\n\r\n      // FIXME\r\n      return extensions.makeValidator(\r\n        ['contentType'],\r\n        contentTypeShape,\r\n        takenNames,\r\n        reservedNames.models,\r\n        takenSingularNames,\r\n        takenPluralNames\r\n      );\r\n    },\r\n    form: {\r\n      base({ actionType }: any) {\r\n        if (actionType === 'create') {\r\n          return contentTypeForm.base.create();\r\n        }\r\n\r\n        return contentTypeForm.base.edit();\r\n      },\r\n      advanced({ extensions }: any) {\r\n        const baseForm = contentTypeForm.advanced\r\n          .default()\r\n          .sections.map((section) => section.items)\r\n          .flat();\r\n        const itemsToAdd = extensions.getAdvancedForm(['contentType']);\r\n\r\n        return {\r\n          sections: [\r\n            {\r\n              items: [...baseForm, ...itemsToAdd],\r\n            },\r\n          ],\r\n        };\r\n      },\r\n    },\r\n  },\r\n  component: {\r\n    schema(\r\n      alreadyTakenAttributes: Array<Internal.UID.Component>,\r\n      componentCategory: string,\r\n      reservedNames: {\r\n        models: any;\r\n      },\r\n      isEditing = false,\r\n      components: Record<string, any>,\r\n      componentDisplayName: string,\r\n      compoUid: Internal.UID.Component | null = null\r\n    ) {\r\n      const takenNames = isEditing\r\n        ? alreadyTakenAttributes.filter((uid: Internal.UID.Component) => uid !== compoUid)\r\n        : alreadyTakenAttributes;\r\n      const collectionNames = Object.values(components).map((component: any) => {\r\n        return component?.schema?.collectionName;\r\n      });\r\n\r\n      const currentCollectionName = createComponentCollectionName(\r\n        componentDisplayName,\r\n        componentCategory\r\n      );\r\n\r\n      const takenCollectionNames = isEditing\r\n        ? collectionNames.filter((collectionName) => collectionName !== currentCollectionName)\r\n        : collectionNames;\r\n\r\n      return createComponentSchema(\r\n        takenNames,\r\n        reservedNames.models,\r\n        componentCategory,\r\n        takenCollectionNames,\r\n        currentCollectionName\r\n      );\r\n    },\r\n    form: {\r\n      advanced() {\r\n        return {\r\n          sections: componentForm.advanced(),\r\n        };\r\n      },\r\n      base() {\r\n        return {\r\n          sections: componentForm.base(),\r\n        };\r\n      },\r\n    },\r\n  },\r\n  addComponentToDynamicZone: {\r\n    form: {\r\n      advanced() {\r\n        return dynamiczoneForm.advanced.default();\r\n      },\r\n      base({ data }: any) {\r\n        const isCreatingComponent = data?.createComponent ?? false;\r\n\r\n        if (isCreatingComponent) {\r\n          return dynamiczoneForm.base.createComponent();\r\n        }\r\n\r\n        return dynamiczoneForm.base.default();\r\n      },\r\n    },\r\n  },\r\n  editCategory: {\r\n    schema(allCategories: Array<any>, initialData: any) {\r\n      const allowedCategories = allCategories\r\n        .filter((cat) => cat !== initialData.name)\r\n        .map((cat) => cat.toLowerCase());\r\n\r\n      return createCategorySchema(allowedCategories);\r\n    },\r\n    form: {\r\n      advanced: () => ({ sections: [] }),\r\n      base() {\r\n        return categoryForm.base;\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport { pluginId } from '../../pluginId';\r\n\r\nimport { initialState } from './reducer';\r\n\r\n/**\r\n * Direct selector to the formModal state domain\r\n */\r\nconst formModalDomain = () => (state: any) => state[`${pluginId}_formModal`] || initialState;\r\n\r\n/**\r\n * Other specific selectors\r\n */\r\n\r\n/**\r\n * Default selector used by formModal\r\n */\r\n\r\nexport const makeSelectFormModal = () =>\r\n  createSelector(formModalDomain(), (substate) => {\r\n    return substate;\r\n  });\r\n\r\nexport { formModalDomain };\r\n","import get from 'lodash/get';\r\n\r\nimport { getRelationType } from '../../../utils/getRelationType';\r\n\r\nimport type { AttributeType } from '../../../types';\r\nimport type { Internal, Struct } from '@strapi/types';\r\n\r\nexport type EditableContentTypeSchema = {\r\n  kind: Struct.ContentTypeKind;\r\n  name: string;\r\n  attributes: AttributeType[];\r\n};\r\n\r\nexport type EditableContentTypeData = {\r\n  contentType: {\r\n    uid: Internal.UID.ContentType;\r\n    schema: EditableContentTypeSchema;\r\n  };\r\n};\r\n\r\ntype ModifiedData = {\r\n  kind: Struct.ContentTypeKind;\r\n};\r\n\r\nexport const canEditContentType = (data: Record<string, any>, modifiedData: ModifiedData) => {\r\n  const kind = get(data, ['contentType', 'schema', 'kind'], '');\r\n\r\n  // if kind isn't modified or content type is a single type, there is no need to check attributes.\r\n  if (kind === 'singleType' || kind === modifiedData.kind) {\r\n    return true;\r\n  }\r\n\r\n  const contentTypeAttributes = get(\r\n    data,\r\n    ['contentType', 'schema', 'attributes'],\r\n    []\r\n  ) as AttributeType[];\r\n\r\n  const relationAttributes = contentTypeAttributes.filter(({ relation, type, targetAttribute }) => {\r\n    const relationType = getRelationType(relation, targetAttribute);\r\n\r\n    return type === 'relation' && !['oneWay', 'manyWay'].includes(relationType || '');\r\n  });\r\n\r\n  return relationAttributes.length === 0;\r\n};\r\n","import { MAX_COMPONENT_DEPTH } from '../../../constants';\r\nimport { getComponentDepth } from '../../../utils/getMaxDepth';\r\n\r\nimport type { IconByType } from '../../AttributeIcon';\r\nimport type { NestedComponent } from '../../DataManagerProvider/utils/retrieveNestedComponents';\r\nimport type { Internal } from '@strapi/types';\r\n\r\nexport const getAttributesToDisplay = (\r\n  dataTarget = '',\r\n  targetUid: Internal.UID.Schema,\r\n  nestedComponents: Array<NestedComponent>\r\n): IconByType[][] => {\r\n  const defaultAttributes: IconByType[] = [\r\n    'text',\r\n    'boolean',\r\n    'blocks',\r\n    'json',\r\n    'number',\r\n    'email',\r\n    'date',\r\n    'password',\r\n    'media',\r\n    'enumeration',\r\n    'relation',\r\n    'richtext',\r\n  ];\r\n\r\n  const isPickingAttributeForAContentType = dataTarget === 'contentType';\r\n\r\n  if (isPickingAttributeForAContentType) {\r\n    return [\r\n      // Insert UID before the last item (richtext)\r\n      [...defaultAttributes.slice(0, -1), 'uid', ...defaultAttributes.slice(-1)],\r\n      ['component', 'dynamiczone'],\r\n    ];\r\n  }\r\n\r\n  // this will only run when adding attributes to components\r\n  if (dataTarget) {\r\n    const componentDepth = getComponentDepth(targetUid, nestedComponents);\r\n    const isNestedInAnotherComponent = componentDepth >= MAX_COMPONENT_DEPTH;\r\n    const canAddComponentInAnotherComponent =\r\n      !isPickingAttributeForAContentType && !isNestedInAnotherComponent;\r\n    if (canAddComponentInAnotherComponent) {\r\n      return [defaultAttributes, ['component']];\r\n    }\r\n  }\r\n\r\n  return [defaultAttributes];\r\n};\r\n","export const getFormInputNames = (form: any) =>\r\n  form.reduce((acc: any, current: any) => {\r\n    const names = current.items.reduce((acc: any, current: any) => {\r\n      if (current.name) {\r\n        acc.push(current.name);\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    return [...acc, ...names];\r\n  }, []);\r\n","import * as React from 'react';\r\n\r\nimport { useStrapiApp, useTracking, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { Button, Divider, Flex, Modal, Tabs } from '@strapi/design-system';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport isEqual from 'lodash/isEqual';\r\nimport set from 'lodash/set';\r\nimport toLower from 'lodash/toLower';\r\nimport { useIntl } from 'react-intl';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../../hooks/useDataManager';\r\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\r\nimport { pluginId } from '../../pluginId';\r\nimport { getTrad, isAllowedContentTypesForRelations } from '../../utils';\r\nimport { findAttribute } from '../../utils/findAttribute';\r\nimport { getYupInnerErrors } from '../../utils/getYupInnerErrors';\r\n// New compos\r\nimport { AllowedTypesSelect } from '../AllowedTypesSelect';\r\nimport { IconByType } from '../AttributeIcon';\r\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\r\nimport { BooleanDefaultValueSelect } from '../BooleanDefaultValueSelect';\r\nimport { BooleanRadioGroup } from '../BooleanRadioGroup';\r\nimport { CheckboxWithNumberField } from '../CheckboxWithNumberField';\r\nimport { ContentTypeRadioGroup } from '../ContentTypeRadioGroup';\r\nimport { CustomRadioGroup } from '../CustomRadioGroup';\r\nimport { DraftAndPublishToggle } from '../DraftAndPublishToggle';\r\nimport { FormModalEndActions } from '../FormModalEndActions';\r\nimport { FormModalHeader } from '../FormModalHeader';\r\nimport { FormModalSubHeader } from '../FormModalSubHeader';\r\nimport { IconPicker } from '../IconPicker/IconPicker';\r\nimport { PluralName } from '../PluralName';\r\nimport { Relation } from '../Relation/Relation';\r\nimport { SelectCategory } from '../SelectCategory';\r\nimport { SelectComponent } from '../SelectComponent';\r\nimport { SelectComponents } from '../SelectComponents';\r\nimport { SelectDateType } from '../SelectDateType';\r\nimport { SelectNumber } from '../SelectNumber';\r\nimport { SingularName } from '../SingularName';\r\nimport { TabForm } from '../TabForm';\r\nimport { TextareaEnum } from '../TextareaEnum';\r\n\r\nimport {\r\n  ON_CHANGE,\r\n  RESET_PROPS,\r\n  RESET_PROPS_AND_SAVE_CURRENT_DATA,\r\n  RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO,\r\n  RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ,\r\n  SET_ATTRIBUTE_DATA_SCHEMA,\r\n  SET_CUSTOM_FIELD_DATA_SCHEMA,\r\n  SET_DATA_TO_EDIT,\r\n  SET_DYNAMIC_ZONE_DATA_SCHEMA,\r\n  SET_ERRORS,\r\n} from './constants';\r\nimport { forms } from './forms/forms';\r\nimport { makeSelectFormModal } from './selectors';\r\nimport { canEditContentType } from './utils/canEditContentType';\r\nimport { createComponentUid, createUid } from './utils/createUid';\r\nimport { getAttributesToDisplay } from './utils/getAttributesToDisplay';\r\nimport { getFormInputNames } from './utils/getFormInputNames';\r\n\r\nimport type { CustomFieldAttributeParams } from '../../contexts/DataManagerContext';\r\nimport type { AttributeType } from '../../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\n/* eslint-disable indent */\r\n/* eslint-disable react/no-array-index-key */\r\n\r\nconst FormComponent = styled.form`\r\n  overflow: auto;\r\n`;\r\n\r\nexport const FormModal = () => {\r\n  const {\r\n    onCloseModal,\r\n    onNavigateToChooseAttributeModal,\r\n    onNavigateToAddCompoToDZModal,\r\n    onNavigateToCreateComponentStep2,\r\n    actionType,\r\n    attributeName,\r\n    attributeType,\r\n    customFieldUid,\r\n    categoryName,\r\n    dynamicZoneTarget,\r\n    forTarget,\r\n    modalType,\r\n    isOpen,\r\n    kind,\r\n    step,\r\n    targetUid,\r\n    showBackLink,\r\n    activeTab,\r\n    setActiveTab,\r\n  } = useFormModalNavigation();\r\n\r\n  const getPlugin = useStrapiApp('FormModal', (state) => state.getPlugin);\r\n  const getCustomField = useStrapiApp('FormModal', (state) => state.customFields.get);\r\n  const customField = getCustomField(customFieldUid);\r\n\r\n  const formModalSelector = React.useMemo(makeSelectFormModal, []);\r\n  const dispatch = useDispatch();\r\n  const { toggleNotification } = useNotification();\r\n  const reducerState = useSelector((state) => formModalSelector(state), shallowEqual);\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const { formatMessage } = useIntl();\r\n  const ctbPlugin = getPlugin(pluginId);\r\n  const ctbFormsAPI: any = ctbPlugin?.apis.forms;\r\n  const inputsFromPlugins = ctbFormsAPI.components.inputs;\r\n\r\n  const {\r\n    addAttribute,\r\n    addCustomFieldAttribute,\r\n    addCreatedComponentToDynamicZone,\r\n    allComponentsCategories,\r\n    changeDynamicZoneComponents,\r\n    contentTypes,\r\n    components,\r\n    createSchema,\r\n    deleteCategory,\r\n    deleteData,\r\n    editCategory,\r\n    editCustomFieldAttribute,\r\n    submitData,\r\n    modifiedData: allDataSchema,\r\n    nestedComponents,\r\n    setModifiedData,\r\n    sortedContentTypesList,\r\n    updateSchema,\r\n    reservedNames,\r\n  } = useDataManager();\r\n\r\n  const {\r\n    componentToCreate,\r\n    formErrors,\r\n    initialData,\r\n    isCreatingComponentWhileAddingAField,\r\n    modifiedData,\r\n  } = reducerState;\r\n\r\n  const pathToSchema =\r\n    forTarget === 'contentType' || forTarget === 'component' ? [forTarget] : [forTarget, targetUid];\r\n\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      const collectionTypesForRelation = sortedContentTypesList.filter(\r\n        isAllowedContentTypesForRelations\r\n      );\r\n\r\n      // Reset all the modification when opening the edit category modal\r\n      if (modalType === 'editCategory') {\r\n        setModifiedData();\r\n      }\r\n\r\n      if (actionType === 'edit' && modalType === 'attribute' && forTarget === 'contentType') {\r\n        trackUsage('willEditFieldOfContentType');\r\n      }\r\n\r\n      const pathToAttributes = [...pathToSchema, 'schema', 'attributes'];\r\n\r\n      // Case:\r\n      // the user opens the modal chooseAttributes\r\n      // selects dynamic zone => set the field name\r\n      // then goes to step 1 (the modal is addComponentToDynamicZone) and finally reloads the app.\r\n      // In this particular if the user tries to add components to the zone it will pop an error since the dz is unknown\r\n      const foundDynamicZoneTarget =\r\n        findAttribute(get(allDataSchema, pathToAttributes, []), dynamicZoneTarget) || null;\r\n\r\n      // Edit category\r\n      if (modalType === 'editCategory' && actionType === 'edit') {\r\n        dispatch({\r\n          type: SET_DATA_TO_EDIT,\r\n          modalType,\r\n          actionType,\r\n          data: {\r\n            name: categoryName,\r\n          },\r\n        });\r\n      }\r\n\r\n      // Create content type we need to add the default option draftAndPublish\r\n      if (modalType === 'contentType' && actionType === 'create') {\r\n        dispatch({\r\n          type: SET_DATA_TO_EDIT,\r\n          modalType,\r\n          actionType,\r\n          data: {\r\n            draftAndPublish: true,\r\n          },\r\n          pluginOptions: {},\r\n        });\r\n      }\r\n\r\n      // Edit content type\r\n      if (modalType === 'contentType' && actionType === 'edit') {\r\n        const { displayName, draftAndPublish, kind, pluginOptions, pluralName, singularName } = get(\r\n          allDataSchema,\r\n          [...pathToSchema, 'schema'],\r\n          {\r\n            displayName: null,\r\n            pluginOptions: {},\r\n            singularName: null,\r\n            pluralName: null,\r\n          }\r\n        );\r\n\r\n        dispatch({\r\n          type: SET_DATA_TO_EDIT,\r\n          actionType,\r\n          modalType,\r\n          data: {\r\n            displayName,\r\n            draftAndPublish,\r\n            kind,\r\n            pluginOptions,\r\n            pluralName,\r\n            singularName,\r\n          },\r\n        });\r\n      }\r\n\r\n      // Edit component\r\n      if (modalType === 'component' && actionType === 'edit') {\r\n        const data = get(allDataSchema, pathToSchema, {});\r\n\r\n        dispatch({\r\n          type: SET_DATA_TO_EDIT,\r\n          actionType,\r\n          modalType,\r\n          data: {\r\n            displayName: data.schema.displayName,\r\n            category: data.category,\r\n            icon: data.schema.icon,\r\n          },\r\n        });\r\n      }\r\n\r\n      // Special case for the dynamic zone\r\n      if (modalType === 'addComponentToDynamicZone' && actionType === 'edit') {\r\n        const attributeToEdit = {\r\n          ...foundDynamicZoneTarget,\r\n          // We filter the available components\r\n          // Because this modal is only used for adding components\r\n          components: [],\r\n          name: dynamicZoneTarget,\r\n          createComponent: false,\r\n          componentToCreate: { type: 'component' },\r\n        };\r\n\r\n        dispatch({\r\n          type: SET_DYNAMIC_ZONE_DATA_SCHEMA,\r\n          attributeToEdit,\r\n        });\r\n      }\r\n\r\n      // Set the predefined data structure to create an attribute\r\n      if (attributeType) {\r\n        const attributeToEditNotFormatted = findAttribute(\r\n          get(allDataSchema, pathToAttributes, []),\r\n          attributeName\r\n        ) as AttributeType;\r\n        const attributeToEdit = {\r\n          ...attributeToEditNotFormatted,\r\n          name: attributeName,\r\n        };\r\n\r\n        // We need to set the repeatable key to false when editing a component\r\n        // The API doesn't send this info\r\n        if (attributeType === 'component' && actionType === 'edit') {\r\n          if (!attributeToEdit.repeatable) {\r\n            set(attributeToEdit, 'repeatable', false);\r\n          }\r\n        }\r\n\r\n        if (modalType === 'customField') {\r\n          dispatch({\r\n            type: SET_CUSTOM_FIELD_DATA_SCHEMA,\r\n            customField,\r\n            isEditing: actionType === 'edit',\r\n            modifiedDataToSetForEditing: attributeToEdit,\r\n            // NOTE: forTarget is used in the i18n middleware\r\n            forTarget,\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: SET_ATTRIBUTE_DATA_SCHEMA,\r\n            attributeType,\r\n            nameToSetForRelation: get(collectionTypesForRelation, ['0', 'title'], 'error'),\r\n            targetUid: get(collectionTypesForRelation, ['0', 'uid'], 'error'),\r\n            isEditing: actionType === 'edit',\r\n            modifiedDataToSetForEditing: attributeToEdit,\r\n            step,\r\n            forTarget,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      dispatch({ type: RESET_PROPS });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    actionType,\r\n    attributeName,\r\n    attributeType,\r\n    categoryName,\r\n    dynamicZoneTarget,\r\n    forTarget,\r\n    isOpen,\r\n    modalType,\r\n  ]);\r\n\r\n  const isCreatingContentType = modalType === 'contentType';\r\n  const isCreatingComponent = modalType === 'component';\r\n  const isCreatingAttribute = modalType === 'attribute';\r\n  const isCreatingCustomFieldAttribute = modalType === 'customField';\r\n  const isComponentAttribute = attributeType === 'component' && isCreatingAttribute;\r\n  const isCreating = actionType === 'create';\r\n  const isCreatingComponentFromAView =\r\n    get(modifiedData, 'createComponent', false) || isCreatingComponentWhileAddingAField;\r\n  const isInFirstComponentStep = step === '1';\r\n  const isEditingCategory = modalType === 'editCategory';\r\n  const isPickingAttribute = modalType === 'chooseAttribute';\r\n  const uid = createUid(modifiedData.displayName || '');\r\n  const attributes = get(allDataSchema, [...pathToSchema, 'schema', 'attributes'], null) as {\r\n    name: string;\r\n  }[];\r\n\r\n  const checkFormValidity = async () => {\r\n    let schema;\r\n    const dataToValidate =\r\n      isCreatingComponentFromAView && step === '1'\r\n        ? get(modifiedData, 'componentToCreate', {})\r\n        : modifiedData;\r\n    // Check form validity for content type\r\n    if (isCreatingContentType) {\r\n      schema = forms.contentType.schema(\r\n        Object.keys(contentTypes),\r\n        actionType === 'edit',\r\n        // currentUID\r\n        get(allDataSchema, [...pathToSchema, 'uid'], null),\r\n        reservedNames,\r\n        ctbFormsAPI,\r\n        contentTypes\r\n      );\r\n\r\n      // Check form validity for component\r\n      // This is happening when the user click on the link from the left menu\r\n    } else if (isCreatingComponent) {\r\n      schema = forms.component.schema(\r\n        Object.keys(components) as Internal.UID.Component[],\r\n        modifiedData.category || '',\r\n        reservedNames,\r\n        actionType === 'edit',\r\n        components,\r\n        modifiedData.displayName || '',\r\n        get(allDataSchema, [...pathToSchema, 'uid'], null)\r\n        // ctbFormsAPI\r\n      );\r\n    } else if (isCreatingCustomFieldAttribute) {\r\n      schema = forms.customField.schema({\r\n        schemaAttributes: get(allDataSchema, [...pathToSchema, 'schema', 'attributes'], []),\r\n        attributeType: customField!.type,\r\n        reservedNames,\r\n        schemaData: { modifiedData, initialData },\r\n        ctbFormsAPI,\r\n        customFieldValidator: customField!.options?.validator,\r\n      });\r\n\r\n      // Check for validity for creating a component\r\n      // This is happening when the user creates a component \"on the fly\"\r\n      // Since we temporarily store the component info in another object\r\n      // The data is set in the componentToCreate key\r\n    } else if (isComponentAttribute && isCreatingComponentFromAView && isInFirstComponentStep) {\r\n      schema = forms.component.schema(\r\n        Object.keys(components) as Internal.UID.Component[],\r\n        get(modifiedData, 'componentToCreate.category', ''),\r\n        reservedNames,\r\n        actionType === 'edit',\r\n        components,\r\n        modifiedData.componentToCreate.displayName || ''\r\n      );\r\n\r\n      // Check form validity for creating a 'common attribute'\r\n      // We need to make sure that it is independent from the step\r\n    } else if (isCreatingAttribute && !isInFirstComponentStep) {\r\n      const type = attributeType === 'relation' ? 'relation' : modifiedData.type;\r\n\r\n      let alreadyTakenTargetContentTypeAttributes = [];\r\n\r\n      if (type === 'relation') {\r\n        const targetContentTypeUID = get(modifiedData, ['target'], null);\r\n\r\n        const targetContentTypeAttributes = get(\r\n          contentTypes,\r\n          [targetContentTypeUID, 'schema', 'attributes'],\r\n          []\r\n        );\r\n\r\n        // Create an array with all the targetContentType attributes name\r\n        // in order to prevent the user from creating a relation with a targetAttribute\r\n        // that may exist in the other content type\r\n        alreadyTakenTargetContentTypeAttributes = targetContentTypeAttributes.filter(\r\n          ({ name: attrName }: { name: string }) => {\r\n            // Keep all the target content type attributes when creating a relation\r\n            if (actionType !== 'edit') {\r\n              return true;\r\n            }\r\n\r\n            // Remove the already created one when editing\r\n            return attrName !== initialData.targetAttribute;\r\n          }\r\n        );\r\n      }\r\n      schema = forms.attribute.schema(\r\n        get(allDataSchema, pathToSchema, {}),\r\n        type,\r\n        reservedNames,\r\n        alreadyTakenTargetContentTypeAttributes,\r\n        { modifiedData, initialData },\r\n        ctbFormsAPI\r\n      );\r\n    } else if (isEditingCategory) {\r\n      schema = forms.editCategory.schema(allComponentsCategories, initialData);\r\n    } else {\r\n      // The user is either in the addComponentToDynamicZone modal or\r\n      // in step 1 of the add component (modalType=attribute&attributeType=component) but not creating a component\r\n      // eslint-disable-next-line no-lonely-if\r\n      if (isInFirstComponentStep && isCreatingComponentFromAView) {\r\n        schema = forms.component.schema(\r\n          Object.keys(components) as Internal.UID.Component[],\r\n          get(modifiedData, 'componentToCreate.category', ''),\r\n          reservedNames,\r\n          actionType === 'edit',\r\n          components,\r\n          modifiedData.componentToCreate.displayName || ''\r\n        );\r\n      } else {\r\n        // The form is valid\r\n        // The case here is being in the addComponentToDynamicZone modal and not creating a component\r\n        return;\r\n      }\r\n    }\r\n\r\n    await schema.validate(dataToValidate, { abortEarly: false });\r\n  };\r\n\r\n  const handleChange = React.useCallback(\r\n    ({\r\n      target: { name, value, type, ...rest },\r\n    }: {\r\n      target: { name: string; value: string; type: string };\r\n    }) => {\r\n      const namesThatCanResetToNullValue = [\r\n        'enumName',\r\n        'max',\r\n        'min',\r\n        'maxLength',\r\n        'minLength',\r\n        'regex',\r\n        'default',\r\n      ];\r\n\r\n      let val;\r\n\r\n      if (namesThatCanResetToNullValue.includes(name) && value === '') {\r\n        val = null;\r\n      } else {\r\n        val = value;\r\n      }\r\n\r\n      const clonedErrors = Object.assign({}, formErrors);\r\n\r\n      // Reset min error when modifying the max\r\n      if (name === 'max') {\r\n        delete clonedErrors.min;\r\n      }\r\n\r\n      // Same here\r\n      if (name === 'maxLength') {\r\n        delete clonedErrors.minLength;\r\n      }\r\n\r\n      // Since the onBlur is deactivated we remove the errors directly when changing an input\r\n      delete clonedErrors[name];\r\n\r\n      dispatch({\r\n        type: SET_ERRORS,\r\n        errors: clonedErrors,\r\n      });\r\n\r\n      dispatch({\r\n        type: ON_CHANGE,\r\n        keys: name.split('.'),\r\n        value: val,\r\n        ...rest,\r\n      });\r\n    },\r\n    [dispatch, formErrors]\r\n  );\r\n\r\n  const handleSubmit = async (e: React.SyntheticEvent, shouldContinue = isCreating) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await checkFormValidity();\r\n\r\n      sendButtonAddMoreFieldEvent(shouldContinue);\r\n      const ctTargetUid = forTarget === 'components' ? targetUid : uid;\r\n\r\n      if (isCreatingContentType) {\r\n        // Create the content type schema\r\n        if (isCreating) {\r\n          createSchema({ ...modifiedData, kind }, modalType, uid);\r\n          // Redirect the user to the created content type\r\n          navigate({ pathname: `/plugins/${pluginId}/content-types/${uid}` });\r\n\r\n          // Navigate to the choose attribute modal\r\n          onNavigateToChooseAttributeModal({\r\n            forTarget,\r\n            targetUid: ctTargetUid,\r\n          });\r\n        } else {\r\n          // We cannot switch from collection type to single when the modal is making relations other than oneWay or manyWay\r\n          if (canEditContentType(allDataSchema, modifiedData)) {\r\n            onCloseModal();\r\n\r\n            await submitData(modifiedData);\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatMessage({ id: 'notification.contentType.relations.conflict' }),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n        // We are creating a component using the component modal from the left menu\r\n      } else if (modalType === 'component') {\r\n        if (isCreating) {\r\n          // Create the component schema\r\n          const componentUid = createComponentUid(modifiedData.displayName, modifiedData.category);\r\n          const { category, ...rest } = modifiedData;\r\n\r\n          createSchema(rest, 'component', componentUid, category);\r\n\r\n          // Redirect the user to the created component\r\n          navigate({\r\n            pathname: `/plugins/${pluginId}/component-categories/${category}/${componentUid}`,\r\n          });\r\n\r\n          // Navigate to the choose attribute modal\r\n          onNavigateToChooseAttributeModal({\r\n            forTarget,\r\n            targetUid: componentUid,\r\n          });\r\n        } else {\r\n          updateSchema(modifiedData, modalType, targetUid as Internal.UID.Component);\r\n\r\n          // Close the modal\r\n          onCloseModal();\r\n\r\n          return;\r\n        }\r\n      } else if (isEditingCategory) {\r\n        if (toLower(initialData.name) === toLower(modifiedData.name)) {\r\n          // Close the modal\r\n          onCloseModal();\r\n\r\n          return;\r\n        }\r\n\r\n        editCategory(initialData.name, modifiedData);\r\n\r\n        return;\r\n        // Add/edit a field to a content type\r\n        // Add/edit a field to a created component (the end modal is not step 2)\r\n      } else if (isCreatingCustomFieldAttribute) {\r\n        const customFieldAttributeUpdate: CustomFieldAttributeParams = {\r\n          attributeToSet: { ...modifiedData, customField: customFieldUid },\r\n          forTarget,\r\n          targetUid,\r\n          initialAttribute: initialData,\r\n        };\r\n\r\n        if (actionType === 'edit') {\r\n          editCustomFieldAttribute(customFieldAttributeUpdate);\r\n        } else {\r\n          addCustomFieldAttribute(customFieldAttributeUpdate);\r\n        }\r\n\r\n        if (shouldContinue) {\r\n          onNavigateToChooseAttributeModal({\r\n            forTarget,\r\n            targetUid: ctTargetUid,\r\n          });\r\n        } else {\r\n          onCloseModal();\r\n        }\r\n\r\n        return;\r\n      } else if (isCreatingAttribute && !isCreatingComponentFromAView) {\r\n        const isDynamicZoneAttribute = attributeType === 'dynamiczone';\r\n\r\n        // The user is creating a DZ (he had entered the name of the dz)\r\n        if (isDynamicZoneAttribute) {\r\n          addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\r\n\r\n          // Adding a component to a dynamiczone is not the same logic as creating a simple field\r\n          // so the search is different\r\n          if (isCreating) {\r\n            // Step 1 of adding a component to a DZ, the user has the option to create a component\r\n            dispatch({\r\n              type: RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ,\r\n            });\r\n\r\n            setActiveTab('basic');\r\n            onNavigateToAddCompoToDZModal({ dynamicZoneTarget: modifiedData.name });\r\n          } else {\r\n            onCloseModal();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        // Normal fields like boolean relations or dynamic zone\r\n        if (!isComponentAttribute) {\r\n          addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\r\n\r\n          if (shouldContinue) {\r\n            onNavigateToChooseAttributeModal({\r\n              forTarget,\r\n              targetUid: ctTargetUid,\r\n            });\r\n          } else {\r\n            onCloseModal();\r\n          }\r\n\r\n          return;\r\n\r\n          // Adding an existing component\r\n        }\r\n        // eslint-disable-next-line no-lonely-if\r\n        if (isInFirstComponentStep) {\r\n          // Navigate the user to step 2\r\n          onNavigateToCreateComponentStep2();\r\n\r\n          // Clear the reducer and prepare the modified data\r\n          // This way we don't have to add some logic to re-run the useEffect\r\n          // The first step is either needed to create a component or just to navigate\r\n          // To the modal for adding a \"common field\"\r\n          dispatch({\r\n            type: RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO,\r\n            forTarget,\r\n          });\r\n\r\n          // We don't want all the props to be reset\r\n          return;\r\n\r\n          // Here we are in step 2\r\n          // The step 2 is also use to edit an attribute that is a component\r\n        }\r\n\r\n        addAttribute(\r\n          modifiedData,\r\n          forTarget,\r\n          targetUid,\r\n          // This change the dispatched type\r\n          // either 'EDIT_ATTRIBUTE' or 'ADD_ATTRIBUTE' in the DataManagerProvider\r\n          actionType === 'edit',\r\n          // This is for the edit part\r\n          initialData,\r\n          // Passing true will add the component to the components object\r\n          // This way we can add fields to the added component (if it wasn't there already)\r\n          true\r\n        );\r\n\r\n        if (shouldContinue) {\r\n          onNavigateToChooseAttributeModal({\r\n            forTarget,\r\n            targetUid,\r\n          });\r\n        } else {\r\n          onCloseModal();\r\n        }\r\n\r\n        // We don't need to end the loop here we want the reducer to be reinitialized\r\n\r\n        // Logic for creating a component without clicking on the link in\r\n        // the left menu\r\n        // We need to separate the logic otherwise the component would be created\r\n        // even though the user didn't set any field\r\n        // We need to prevent the component from being created if the user closes the modal at step 2 without any submission\r\n      } else if (isCreatingAttribute && isCreatingComponentFromAView) {\r\n        // Step 1\r\n        if (isInFirstComponentStep) {\r\n          // Here the search could be refactored since it is the same as the case from above\r\n          // Navigate the user to step 2\r\n\r\n          trackUsage('willCreateComponentFromAttributesModal');\r\n\r\n          // Here we clear the reducer state but we also keep the created component\r\n          // If we were to create the component before\r\n          dispatch({\r\n            type: RESET_PROPS_AND_SAVE_CURRENT_DATA,\r\n            forTarget,\r\n          });\r\n\r\n          onNavigateToCreateComponentStep2();\r\n\r\n          // Terminate because we don't want the reducer to be entirely reset\r\n          return;\r\n\r\n          // Step 2 of creating a component (which is setting the attribute name in the parent's schema)\r\n        }\r\n        // We are destructuring because the modifiedData object doesn't have the appropriate format to create a field\r\n        const { category, type, ...rest } = componentToCreate;\r\n        // Create a the component temp UID\r\n        // This could be refactored but I think it's more understandable to separate the logic\r\n        const componentUid = createComponentUid(componentToCreate.displayName, category);\r\n        // Create the component first and add it to the components data\r\n        createSchema(\r\n          // Component data\r\n          rest,\r\n          // Type will always be component\r\n          // It will dispatch the CREATE_COMPONENT_SCHEMA action\r\n          // So the component will be added in the main components object\r\n          // This might not be needed if we don't allow navigation between entries while editing\r\n          type,\r\n          componentUid,\r\n          category,\r\n          // This will add the created component in the datamanager modifiedData components key\r\n          // Like explained above we will be able to modify the created component structure\r\n          isCreatingComponentFromAView\r\n        );\r\n        // Add the field to the schema\r\n        addAttribute(modifiedData, forTarget, targetUid, false);\r\n\r\n        dispatch({ type: RESET_PROPS });\r\n\r\n        // Open modal attribute for adding attr to component\r\n        if (shouldContinue) {\r\n          onNavigateToChooseAttributeModal({ forTarget: 'components', targetUid: componentUid });\r\n        } else {\r\n          onCloseModal();\r\n        }\r\n\r\n        return;\r\n      } else {\r\n        // The modal is addComponentToDynamicZone\r\n        if (isInFirstComponentStep) {\r\n          if (isCreatingComponentFromAView) {\r\n            const { category, type, ...rest } = modifiedData.componentToCreate;\r\n            const componentUid = createComponentUid(\r\n              modifiedData.componentToCreate.displayName,\r\n              category\r\n            );\r\n            // Create the component first and add it to the components data\r\n            createSchema(\r\n              // Component data\r\n              rest,\r\n              // Type will always be component\r\n              // It will dispatch the CREATE_COMPONENT_SCHEMA action\r\n              // So the component will be added in the main components object\r\n              // This might not be needed if we don't allow navigation between entries while editing\r\n              type,\r\n              componentUid,\r\n              category,\r\n              // This will add the created component in the datamanager modifiedData components key\r\n              // Like explained above we will be able to modify the created component structure\r\n              isCreatingComponentFromAView\r\n            );\r\n            // Add the created component to the DZ\r\n            // We don't want to remove the old ones\r\n            addCreatedComponentToDynamicZone(dynamicZoneTarget, [componentUid]);\r\n\r\n            // The Dynamic Zone and the component is created\r\n            // Open the modal to add fields to the created component\r\n            onNavigateToChooseAttributeModal({ forTarget: 'components', targetUid: componentUid });\r\n          } else {\r\n            // Add the components to the DZ\r\n            changeDynamicZoneComponents(dynamicZoneTarget, modifiedData.components);\r\n\r\n            onCloseModal();\r\n          }\r\n        } else {\r\n          console.error('This case is not handled');\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      dispatch({\r\n        type: RESET_PROPS,\r\n      });\r\n    } catch (err: any) {\r\n      const errors = getYupInnerErrors(err);\r\n\r\n      dispatch({\r\n        type: SET_ERRORS,\r\n        errors,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleConfirmClose = () => {\r\n    // eslint-disable-next-line no-alert\r\n    const confirm = window.confirm(\r\n      formatMessage({\r\n        id: 'window.confirm.close-modal.file',\r\n        defaultMessage: 'Are you sure? Your changes will be lost.',\r\n      })\r\n    );\r\n\r\n    if (confirm) {\r\n      onCloseModal();\r\n\r\n      dispatch({\r\n        type: RESET_PROPS,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    // Close the modal\r\n    if (!isEqual(modifiedData, initialData)) {\r\n      handleConfirmClose();\r\n    } else {\r\n      onCloseModal();\r\n      // Reset the reducer\r\n      dispatch({\r\n        type: RESET_PROPS,\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendAdvancedTabEvent = (tab: string) => {\r\n    if (tab !== 'advanced') {\r\n      return;\r\n    }\r\n\r\n    if (isCreatingContentType) {\r\n      trackUsage('didSelectContentTypeSettings');\r\n\r\n      return;\r\n    }\r\n\r\n    if (forTarget === 'contentType') {\r\n      trackUsage('didSelectContentTypeFieldSettings');\r\n    }\r\n  };\r\n\r\n  const sendButtonAddMoreFieldEvent = (shouldContinue: boolean) => {\r\n    if (\r\n      modalType === 'attribute' &&\r\n      forTarget === 'contentType' &&\r\n      attributeType !== 'dynamiczone' &&\r\n      shouldContinue\r\n    ) {\r\n      trackUsage('willAddMoreFieldToContentType');\r\n    }\r\n  };\r\n\r\n  const shouldDisableAdvancedTab = () => {\r\n    if (modalType === 'editCategory') {\r\n      return true;\r\n    }\r\n\r\n    if (modalType === 'component') {\r\n      return true;\r\n    }\r\n\r\n    if (has(modifiedData, 'createComponent')) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // Display data for the attributes picker modal\r\n  const displayedAttributes = getAttributesToDisplay(\r\n    forTarget,\r\n    targetUid,\r\n    // We need the nested components so we know when to remove the component option\r\n    nestedComponents\r\n  );\r\n\r\n  if (!modalType) {\r\n    return null;\r\n  }\r\n\r\n  const formToDisplay = get(forms, [modalType, 'form'], {\r\n    advanced: () => ({\r\n      sections: [],\r\n    }),\r\n    base: () => ({\r\n      sections: [],\r\n    }),\r\n  });\r\n\r\n  const isAddingAComponentToAnotherComponent =\r\n    forTarget === 'components' || forTarget === 'component';\r\n\r\n  const genericInputProps = {\r\n    customInputs: {\r\n      'allowed-types-select': AllowedTypesSelect,\r\n      'boolean-radio-group': BooleanRadioGroup,\r\n      'checkbox-with-number-field': CheckboxWithNumberField,\r\n      'icon-picker': IconPicker,\r\n      'content-type-radio-group': ContentTypeRadioGroup,\r\n      'radio-group': CustomRadioGroup,\r\n      relation: Relation,\r\n      'select-category': SelectCategory,\r\n      'select-component': SelectComponent,\r\n      'select-components': SelectComponents,\r\n      'select-default-boolean': BooleanDefaultValueSelect,\r\n      'select-number': SelectNumber,\r\n      'select-date': SelectDateType,\r\n      'toggle-draft-publish': DraftAndPublishToggle,\r\n      'text-plural': PluralName,\r\n      'text-singular': SingularName,\r\n      'textarea-enum': TextareaEnum,\r\n      ...inputsFromPlugins,\r\n    },\r\n    componentToCreate,\r\n    dynamicZoneTarget,\r\n    formErrors,\r\n    isAddingAComponentToAnotherComponent,\r\n    isCreatingComponentWhileAddingAField,\r\n    mainBoxHeader: get(allDataSchema, [...pathToSchema, 'schema', 'displayName'], ''),\r\n    modifiedData,\r\n    naturePickerType: forTarget,\r\n    isCreating,\r\n    targetUid,\r\n    forTarget,\r\n  };\r\n\r\n  const advancedForm = formToDisplay.advanced({\r\n    data: modifiedData,\r\n    type: attributeType,\r\n    step,\r\n    actionType,\r\n    attributes,\r\n    extensions: ctbFormsAPI,\r\n    forTarget,\r\n    contentTypeSchema: allDataSchema.contentType || {},\r\n    customField,\r\n  }).sections;\r\n  const baseForm = formToDisplay.base({\r\n    data: modifiedData,\r\n    type: attributeType,\r\n    step,\r\n    actionType,\r\n    attributes,\r\n    extensions: ctbFormsAPI,\r\n    forTarget,\r\n    contentTypeSchema: allDataSchema.contentType || {},\r\n    customField,\r\n  }).sections;\r\n\r\n  const baseFormInputNames = getFormInputNames(baseForm);\r\n\r\n  const advancedFormInputNames = getFormInputNames(advancedForm);\r\n  const doesBaseFormHasError = Object.keys(formErrors).some((key) =>\r\n    baseFormInputNames.includes(key)\r\n  );\r\n\r\n  const doesAdvancedFormHasError = Object.keys(formErrors).some((key) =>\r\n    advancedFormInputNames.includes(key)\r\n  );\r\n\r\n  const schemaKind = get(contentTypes, [targetUid, 'schema', 'kind']);\r\n\r\n  const checkIsEditingFieldName = () =>\r\n    actionType === 'edit' && attributes.every(({ name }) => name !== modifiedData?.name);\r\n\r\n  const handleClickFinish = () => {\r\n    if (checkIsEditingFieldName()) {\r\n      trackUsage('didEditFieldNameOnContentType');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal.Root open={isOpen} onOpenChange={handleClosed}>\r\n      <Modal.Content>\r\n        <FormModalHeader\r\n          actionType={actionType}\r\n          attributeName={attributeName}\r\n          categoryName={categoryName}\r\n          contentTypeKind={kind as IconByType}\r\n          dynamicZoneTarget={dynamicZoneTarget}\r\n          modalType={modalType}\r\n          forTarget={forTarget}\r\n          targetUid={targetUid}\r\n          attributeType={attributeType as IconByType}\r\n          customFieldUid={customFieldUid}\r\n          showBackLink={showBackLink}\r\n        />\r\n        {isPickingAttribute && (\r\n          <AttributeOptions\r\n            attributes={displayedAttributes}\r\n            forTarget={forTarget}\r\n            kind={schemaKind || 'collectionType'}\r\n          />\r\n        )}\r\n        {!isPickingAttribute && (\r\n          <FormComponent onSubmit={handleSubmit}>\r\n            <Modal.Body>\r\n              <Tabs.Root\r\n                variant=\"simple\"\r\n                value={activeTab}\r\n                onValueChange={(value) => {\r\n                  setActiveTab(value);\r\n                  sendAdvancedTabEvent(value);\r\n                }}\r\n                hasError={\r\n                  doesBaseFormHasError ? 'basic' : doesAdvancedFormHasError ? 'advanced' : undefined\r\n                }\r\n              >\r\n                <Flex justifyContent=\"space-between\">\r\n                  <FormModalSubHeader\r\n                    actionType={actionType}\r\n                    forTarget={forTarget}\r\n                    kind={kind}\r\n                    step={step}\r\n                    modalType={modalType}\r\n                    attributeType={attributeType}\r\n                    attributeName={attributeName}\r\n                    customField={customField}\r\n                  />\r\n                  <Tabs.List>\r\n                    <Tabs.Trigger value=\"basic\">\r\n                      {formatMessage({\r\n                        id: getTrad('popUpForm.navContainer.base'),\r\n                        defaultMessage: 'Basic settings',\r\n                      })}\r\n                    </Tabs.Trigger>\r\n                    <Tabs.Trigger value=\"advanced\" disabled={shouldDisableAdvancedTab()}>\r\n                      {formatMessage({\r\n                        id: getTrad('popUpForm.navContainer.advanced'),\r\n                        defaultMessage: 'Advanced settings',\r\n                      })}\r\n                    </Tabs.Trigger>\r\n                  </Tabs.List>\r\n                </Flex>\r\n                <Divider marginBottom={6} />\r\n                <Tabs.Content value=\"basic\">\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                    <TabForm\r\n                      form={baseForm}\r\n                      formErrors={formErrors}\r\n                      genericInputProps={genericInputProps}\r\n                      modifiedData={modifiedData}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Flex>\r\n                </Tabs.Content>\r\n                <Tabs.Content value=\"advanced\">\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                    <TabForm\r\n                      form={advancedForm}\r\n                      formErrors={formErrors}\r\n                      genericInputProps={genericInputProps}\r\n                      modifiedData={modifiedData}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Flex>\r\n                </Tabs.Content>\r\n              </Tabs.Root>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"tertiary\" onClick={handleClosed}>\r\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n              </Button>\r\n              {/* TODO: refactor this component. Nuf said. */}\r\n              <FormModalEndActions\r\n                deleteCategory={deleteCategory}\r\n                deleteContentType={deleteData}\r\n                deleteComponent={deleteData}\r\n                categoryName={initialData.name}\r\n                isAttributeModal={modalType === 'attribute'}\r\n                isCustomFieldModal={modalType === 'customField'}\r\n                isComponentToDzModal={modalType === 'addComponentToDynamicZone'}\r\n                isComponentAttribute={attributeType === 'component'}\r\n                isComponentModal={modalType === 'component'}\r\n                isContentTypeModal={modalType === 'contentType'}\r\n                isCreatingComponent={actionType === 'create'}\r\n                isCreatingDz={actionType === 'create'}\r\n                isCreatingComponentAttribute={modifiedData.createComponent || false}\r\n                isCreatingComponentInDz={modifiedData.createComponent || false}\r\n                isCreatingComponentWhileAddingAField={isCreatingComponentWhileAddingAField}\r\n                isCreatingContentType={actionType === 'create'}\r\n                isEditingAttribute={actionType === 'edit'}\r\n                isDzAttribute={attributeType === 'dynamiczone'}\r\n                isEditingCategory={modalType === 'editCategory'}\r\n                isInFirstComponentStep={step === '1'}\r\n                onSubmitAddComponentAttribute={handleSubmit}\r\n                onSubmitAddComponentToDz={handleSubmit}\r\n                onSubmitCreateComponent={handleSubmit}\r\n                onSubmitCreateContentType={handleSubmit}\r\n                onSubmitCreateDz={handleSubmit}\r\n                onSubmitEditAttribute={handleSubmit}\r\n                onSubmitEditCategory={handleSubmit}\r\n                onSubmitEditComponent={handleSubmit}\r\n                onSubmitEditContentType={handleSubmit}\r\n                onSubmitEditCustomFieldAttribute={handleSubmit}\r\n                onSubmitEditDz={handleSubmit}\r\n                onClickFinish={handleClickFinish}\r\n              />\r\n            </Modal.Footer>\r\n          </FormComponent>\r\n        )}\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport { pluginId } from '../../pluginId';\r\n\r\nimport { initialState } from './reducer';\r\n\r\nimport type { DataManagerStateType } from '../../types';\r\n\r\n/**\r\n * Direct selector to the dataManagerProvider state domain\r\n */\r\nconst dataManagerProviderDomain = () => (state: DataManagerStateType) =>\r\n  state[`${pluginId}_dataManagerProvider`] || initialState;\r\n\r\n/**\r\n * Other specific selectors\r\n */\r\n\r\n/**\r\n * Default selector used by dataManagerProvider\r\n */\r\n\r\nconst makeSelectDataManagerProvider = () =>\r\n  createSelector(dataManagerProviderDomain(), (substate) => {\r\n    return substate;\r\n  });\r\n\r\nexport { makeSelectDataManagerProvider, dataManagerProviderDomain };\r\n","import camelCase from 'lodash/camelCase';\r\nimport get from 'lodash/get';\r\nimport isEqual from 'lodash/isEqual';\r\nimport omit from 'lodash/omit';\r\nimport sortBy from 'lodash/sortBy';\r\n\r\nimport { pluginId } from '../../../pluginId';\r\nimport { makeUnique } from '../../../utils/makeUnique';\r\n\r\nimport type { Components, Component, AttributeType, ContentTypes } from '../../../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\nconst getCreatedAndModifiedComponents = (\r\n  allComponents: Components,\r\n  initialComponents: Components\r\n) => {\r\n  const componentUIDsToReturn = Object.keys(allComponents).filter((compoUid) => {\r\n    const currentCompo = get(allComponents, compoUid, {});\r\n    const initialCompo = get(initialComponents, compoUid, {});\r\n    const hasComponentBeenCreated = get(currentCompo, ['isTemporary'], false);\r\n    const hasComponentBeenModified = !isEqual(currentCompo, initialCompo);\r\n\r\n    return hasComponentBeenCreated || hasComponentBeenModified;\r\n  });\r\n\r\n  return makeUnique(componentUIDsToReturn);\r\n};\r\n\r\nconst formatComponent = (\r\n  component: Component | Record<string, any>,\r\n  mainDataUID: Internal.UID.Schema\r\n) => {\r\n  const formattedAttributes = formatAttributes(\r\n    get(component, 'schema.attributes', []),\r\n    mainDataUID\r\n  );\r\n\r\n  // Set tmpUID if the component has just been created\r\n  // Keep the uid if the component already exists\r\n  const compoUID = get(component, 'isTemporary', false)\r\n    ? { tmpUID: component.uid }\r\n    : { uid: component.uid };\r\n\r\n  const formattedComponent = Object.assign(\r\n    {},\r\n    compoUID,\r\n    { category: component.category },\r\n    // Omit the attributes since we want to format them\r\n    omit(component.schema, 'attributes'),\r\n    // Add the formatted attributes\r\n    { attributes: formattedAttributes }\r\n  );\r\n\r\n  return formattedComponent;\r\n};\r\n\r\nconst formatMainDataType = (data: any, isComponent = false) => {\r\n  const mainDataUID = get(data, 'uid', null);\r\n\r\n  const formattedAttributes = formatAttributes(get(data, 'schema.attributes', []), mainDataUID);\r\n  const initObj = isComponent ? { category: get(data, 'category', '') } : {};\r\n\r\n  const formattedContentType = Object.assign(initObj, omit(data.schema, 'attributes'), {\r\n    attributes: formattedAttributes,\r\n  });\r\n\r\n  delete formattedContentType.uid;\r\n  delete formattedContentType.isTemporary;\r\n  delete formattedContentType.visible;\r\n  delete formattedContentType.restrictRelationsTo;\r\n\r\n  return formattedContentType;\r\n};\r\n\r\n/**\r\n *\r\n * @param {Object} attributes\r\n * @param {String} mainDataUID uid of the main data type\r\n */\r\nconst formatAttributes = (attributes: AttributeType[], mainDataUID: Internal.UID.Schema) => {\r\n  return attributes.reduce((acc: Record<string, AttributeType>, { name, ...rest }) => {\r\n    const currentAttribute = rest;\r\n    const hasARelationWithMainDataUID = currentAttribute.target === mainDataUID;\r\n    const isRelationType = currentAttribute.type === 'relation';\r\n    const currentTargetAttribute = get(currentAttribute, 'targetAttribute', null);\r\n\r\n    if (!hasARelationWithMainDataUID) {\r\n      if (isRelationType) {\r\n        const relationAttr = Object.assign({}, currentAttribute, {\r\n          targetAttribute: formatRelationTargetAttribute(currentTargetAttribute),\r\n        });\r\n\r\n        acc[name as string] = removeNullKeys(relationAttr) as AttributeType;\r\n      } else {\r\n        acc[name as string] = removeNullKeys(currentAttribute) as AttributeType;\r\n      }\r\n    }\r\n\r\n    if (hasARelationWithMainDataUID) {\r\n      const target = currentAttribute.target;\r\n\r\n      const formattedRelationAttribute = Object.assign({}, currentAttribute, {\r\n        target,\r\n        targetAttribute: formatRelationTargetAttribute(currentTargetAttribute),\r\n      });\r\n\r\n      acc[name as string] = removeNullKeys(formattedRelationAttribute) as AttributeType;\r\n    }\r\n\r\n    if (currentAttribute.customField) {\r\n      const customFieldAttribute = { ...currentAttribute, type: 'customField' };\r\n      acc[name as string] = removeNullKeys(customFieldAttribute) as AttributeType;\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst formatRelationTargetAttribute = (targetAttribute: string | null) =>\r\n  targetAttribute === '-' ? null : targetAttribute;\r\n\r\nconst removeNullKeys = (obj: Record<string, any>) =>\r\n  Object.keys(obj).reduce((acc: Record<string, any>, current) => {\r\n    if (obj[current] !== null && current !== 'plugin') {\r\n      acc[current] = obj[current];\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n\r\nconst getComponentsToPost = (\r\n  allComponents: Components,\r\n  initialComponents: Components,\r\n  mainDataUID: Internal.UID.Schema\r\n) => {\r\n  const componentsToFormat = getCreatedAndModifiedComponents(allComponents, initialComponents);\r\n  const formattedComponents = componentsToFormat.map((compoUID) => {\r\n    const currentCompo = get(allComponents, compoUID, {});\r\n    const formattedComponent = formatComponent(currentCompo, mainDataUID);\r\n\r\n    return formattedComponent;\r\n  });\r\n\r\n  return formattedComponents;\r\n};\r\n\r\nconst sortContentType = (types: ContentTypes) =>\r\n  sortBy(\r\n    Object.keys(types)\r\n      .map((uid) => ({\r\n        visible: types[uid].schema.visible,\r\n        name: uid,\r\n        title: types[uid].schema.displayName,\r\n        plugin: types[uid].plugin || null,\r\n        uid,\r\n        to: `/plugins/${pluginId}/content-types/${uid}`,\r\n        kind: types[uid].schema.kind,\r\n        restrictRelationsTo: types[uid].schema.restrictRelationsTo,\r\n      }))\r\n      .filter((obj) => obj !== null),\r\n    (obj) => camelCase(obj.title)\r\n  );\r\n\r\nexport {\r\n  formatComponent,\r\n  formatMainDataType,\r\n  getComponentsToPost,\r\n  getCreatedAndModifiedComponents,\r\n  sortContentType,\r\n};\r\n","import { ContentType } from '../../../types';\r\n\r\nexport const createDataObject = (arr: ContentType[]) =>\r\n  arr.reduce((acc: Record<string, ContentType>, current) => {\r\n    acc[current.uid!] = current;\r\n\r\n    return acc;\r\n  }, {});\r\n","import get from 'lodash/get';\r\n\r\nimport type { ContentType, Components } from '../../../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\nexport const createModifiedDataSchema = (\r\n  contentTypeSchema: ContentType,\r\n  retrievedComponents: Internal.UID.Component[],\r\n  allComponentsSchema: Components,\r\n  isInContentTypeView: boolean\r\n) => {\r\n  const componentsAssociatedToContentType = retrievedComponents.reduce((acc: any, current) => {\r\n    const componentSchema = get(allComponentsSchema, current, {});\r\n\r\n    acc[current] = componentSchema;\r\n\r\n    return acc;\r\n  }, {});\r\n  const keyName = isInContentTypeView ? 'contentType' : 'component';\r\n  const schema = {\r\n    [keyName]: contentTypeSchema,\r\n    components: componentsAssociatedToContentType,\r\n  };\r\n\r\n  return schema;\r\n};\r\n","import { AttributeType } from '../../../types';\r\n\r\n/**\r\n * Format the attributes to array instead of an object\r\n */\r\nexport const formatSchemas = (schemas: Record<string, any>) => {\r\n  return Object.keys(schemas).reduce((acc: any, current) => {\r\n    const schema = schemas[current].schema;\r\n\r\n    acc[current] = {\r\n      ...schemas[current],\r\n      schema: { ...schema, attributes: toAttributesArray(schema.attributes) },\r\n    };\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const toAttributesArray = (attributes: Record<string, AttributeType>) => {\r\n  return Object.keys(attributes).reduce((acc: AttributeType[], current: any) => {\r\n    acc.push({ ...attributes[current], name: current });\r\n\r\n    return acc;\r\n  }, []);\r\n};\r\n","import get from 'lodash/get';\r\n\r\nimport type { Component, AttributeType, Components } from '../../../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\ntype ChildComponent = {\r\n  component: Internal.UID.Component;\r\n};\r\n\r\nexport type ComponentWithChildren = {\r\n  component: Internal.UID.Component;\r\n  childComponents: ChildComponent[];\r\n};\r\n\r\nconst retrieveComponentsThatHaveComponents = (allComponents: Components) => {\r\n  const componentsThatHaveNestedComponents = Object.keys(allComponents).reduce(\r\n    (acc: ComponentWithChildren[], current) => {\r\n      const currentComponent = get(allComponents, [current]);\r\n\r\n      const compoWithChildren = getComponentWithChildComponents(currentComponent);\r\n      if (compoWithChildren.childComponents.length > 0) {\r\n        acc.push(compoWithChildren);\r\n      }\r\n\r\n      return acc;\r\n    },\r\n    []\r\n  );\r\n\r\n  return componentsThatHaveNestedComponents;\r\n};\r\n\r\nconst getComponentWithChildComponents = (component: Component): ComponentWithChildren => {\r\n  const attributes = get(component, ['schema', 'attributes'], []) as AttributeType[];\r\n  return {\r\n    component: component.uid,\r\n    childComponents: attributes\r\n      .filter((attribute) => {\r\n        const { type } = attribute;\r\n\r\n        return type === 'component';\r\n      })\r\n      .map((attribute) => {\r\n        return {\r\n          component: attribute.component,\r\n        } as ChildComponent;\r\n      }),\r\n  };\r\n};\r\n\r\nexport { getComponentWithChildComponents, retrieveComponentsThatHaveComponents };\r\n","import type { Components, AttributeType } from '../../../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\nexport type NestedComponent = {\r\n  component: Internal.UID.Component;\r\n  uidsOfAllParents?: Internal.UID.Component[];\r\n  parentCompoUid?: Internal.UID.Component;\r\n};\r\n\r\nexport const retrieveNestedComponents = (appComponents: Components): NestedComponent[] => {\r\n  const nestedComponents = Object.keys(appComponents).reduce((acc: NestedComponent[], current) => {\r\n    const componentAttributes = appComponents?.[current]?.schema?.attributes ?? [];\r\n    const currentComponentNestedCompos = getComponentsNestedWithinComponent(\r\n      componentAttributes,\r\n      current as Internal.UID.Component\r\n    );\r\n    return [...acc, ...currentComponentNestedCompos];\r\n  }, []);\r\n\r\n  return mergeComponents(nestedComponents);\r\n};\r\n\r\nconst getComponentsNestedWithinComponent = (\r\n  componentAttributes: AttributeType[],\r\n  parentCompoUid: Internal.UID.Component\r\n) => {\r\n  return componentAttributes.reduce((acc: NestedComponent[], current) => {\r\n    const { type, component } = current;\r\n    if (type === 'component') {\r\n      acc.push({\r\n        component,\r\n        parentCompoUid,\r\n      });\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n};\r\n\r\n// Merge duplicate components\r\nconst mergeComponents = (originalComponents: NestedComponent[]): NestedComponent[] => {\r\n  const componentMap = new Map();\r\n  // Populate the map with component and its parents\r\n  originalComponents.forEach(({ component, parentCompoUid }) => {\r\n    if (!componentMap.has(component)) {\r\n      componentMap.set(component, new Set());\r\n    }\r\n    componentMap.get(component).add(parentCompoUid);\r\n  });\r\n\r\n  // Convert the map to the desired array format\r\n  const transformedComponents: NestedComponent[] = Array.from(componentMap.entries()).map(\r\n    ([component, parentCompoUidSet]) => ({\r\n      component,\r\n      uidsOfAllParents: Array.from(parentCompoUidSet),\r\n    })\r\n  );\r\n\r\n  return transformedComponents;\r\n};\r\n","import get from 'lodash/get';\r\n\r\nimport { makeUnique } from '../../../utils/makeUnique';\r\n\r\nexport const retrieveSpecificInfoFromComponents = (allComponents: any, keysToRetrieve: any) => {\r\n  const allData = Object.keys(allComponents).map((compo) => {\r\n    return get(allComponents, [compo, ...keysToRetrieve], '');\r\n  });\r\n\r\n  return makeUnique(allData);\r\n};\r\n","const SERVER_HAS_NOT_BEEN_KILLED_MESSAGE = 'did-not-kill-server';\r\nconst SERVER_HAS_BEEN_KILLED_MESSAGE = 'server is down';\r\n\r\n/**\r\n * Server restart watcher\r\n * Sends an HEAD method to check if the server has been shut down correctly\r\n * and then pings until it's back on\r\n */\r\nexport function serverRestartWatcher(response: any, didShutDownServer?: boolean) {\r\n  return new Promise((resolve) => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    fetch(`${window.strapi.backendURL}/_health`, {\r\n      method: 'HEAD',\r\n      mode: 'no-cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Keep-Alive': 'false',\r\n      },\r\n    })\r\n      .then((res) => {\r\n        if (res.status >= 400) {\r\n          throw new Error(SERVER_HAS_BEEN_KILLED_MESSAGE);\r\n        }\r\n\r\n        if (!didShutDownServer) {\r\n          throw new Error(SERVER_HAS_NOT_BEEN_KILLED_MESSAGE);\r\n        }\r\n\r\n        resolve(response);\r\n      })\r\n      .catch((err) => {\r\n        setTimeout(() => {\r\n          return serverRestartWatcher(\r\n            response,\r\n            err.message !== SERVER_HAS_NOT_BEEN_KILLED_MESSAGE\r\n          ).then(resolve);\r\n        }, 100);\r\n      });\r\n  });\r\n}\r\n","export const validateSchema = (schema: any) => {\r\n  const dynamicZoneAttributes = Object.values(schema.attributes).filter(\r\n    (attribute: any) => attribute.type === 'dynamiczone'\r\n  );\r\n\r\n  return dynamicZoneAttributes.every(\r\n    (attribute: any) => Array.isArray(attribute.components) && attribute.components.length > 0\r\n  );\r\n};\r\n","import { memo, useEffect, useMemo, useRef, ReactNode } from 'react';\r\n\r\nimport {\r\n  Page,\r\n  useGuidedTour,\r\n  useTracking,\r\n  useStrapiApp,\r\n  useNotification,\r\n  useAppInfo,\r\n  useFetchClient,\r\n  useAuth,\r\n} from '@strapi/admin/strapi-admin';\r\nimport get from 'lodash/get';\r\nimport groupBy from 'lodash/groupBy';\r\nimport set from 'lodash/set';\r\nimport size from 'lodash/size';\r\nimport { useIntl } from 'react-intl';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Navigate, useLocation, useMatch } from 'react-router-dom';\r\n\r\nimport { DataManagerContext } from '../../contexts/DataManagerContext';\r\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\r\nimport { pluginId } from '../../pluginId';\r\nimport { getTrad } from '../../utils/getTrad';\r\nimport { useAutoReloadOverlayBlocker } from '../AutoReloadOverlayBlocker';\r\nimport { FormModal } from '../FormModal/FormModal';\r\n\r\nimport {\r\n  ADD_ATTRIBUTE,\r\n  ADD_CREATED_COMPONENT_TO_DYNAMIC_ZONE,\r\n  ADD_CUSTOM_FIELD_ATTRIBUTE,\r\n  CHANGE_DYNAMIC_ZONE_COMPONENTS,\r\n  CREATE_COMPONENT_SCHEMA,\r\n  CREATE_SCHEMA,\r\n  DELETE_NOT_SAVED_TYPE,\r\n  EDIT_ATTRIBUTE,\r\n  EDIT_CUSTOM_FIELD_ATTRIBUTE,\r\n  GET_DATA_SUCCEEDED,\r\n  RELOAD_PLUGIN,\r\n  REMOVE_COMPONENT_FROM_DYNAMIC_ZONE,\r\n  REMOVE_FIELD,\r\n  REMOVE_FIELD_FROM_DISPLAYED_COMPONENT,\r\n  SET_MODIFIED_DATA,\r\n  UPDATE_SCHEMA,\r\n  UPDATE_INITIAL_STATE,\r\n} from './constants';\r\nimport { makeSelectDataManagerProvider } from './selectors';\r\nimport { formatMainDataType, getComponentsToPost, sortContentType } from './utils/cleanData';\r\nimport { createDataObject } from './utils/createDataObject';\r\nimport { createModifiedDataSchema } from './utils/createModifiedDataSchema';\r\nimport { formatSchemas } from './utils/formatSchemas';\r\nimport { retrieveComponentsFromSchema } from './utils/retrieveComponentsFromSchema';\r\nimport { retrieveComponentsThatHaveComponents } from './utils/retrieveComponentsThatHaveComponents';\r\nimport { retrieveNestedComponents } from './utils/retrieveNestedComponents';\r\nimport { retrieveSpecificInfoFromComponents } from './utils/retrieveSpecificInfoFromComponents';\r\nimport { serverRestartWatcher } from './utils/serverRestartWatcher';\r\nimport { validateSchema } from './utils/validateSchema';\r\n\r\nimport type { ContentType, SchemaType, Components } from '../../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\ninterface DataManagerProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface CustomFieldAttributeParams {\r\n  attributeToSet: Record<string, any>;\r\n  forTarget: SchemaType;\r\n  targetUid: Internal.UID.Schema;\r\n  initialAttribute: Record<string, any>;\r\n}\r\n\r\nconst DataManagerProvider = ({ children }: DataManagerProviderProps) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    components,\r\n    contentTypes,\r\n    isLoading,\r\n    isLoadingForDataToBeSet,\r\n    initialData,\r\n    modifiedData,\r\n    reservedNames,\r\n  } = useSelector(makeSelectDataManagerProvider());\r\n  const { toggleNotification } = useNotification();\r\n  const { lockAppWithAutoreload, unlockAppWithAutoreload } = useAutoReloadOverlayBlocker();\r\n  const { setCurrentStep, setStepState } = useGuidedTour('DataManagerProvider', (state) => state);\r\n\r\n  const getPlugin = useStrapiApp('DataManagerProvider', (state) => state.getPlugin);\r\n\r\n  const plugin = getPlugin(pluginId);\r\n  const autoReload = useAppInfo('DataManagerProvider', (state) => state.autoReload);\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const refetchPermissions = useAuth('DataManagerProvider', (state) => state.refetchPermissions);\r\n  const { pathname } = useLocation();\r\n  const { onCloseModal } = useFormModalNavigation();\r\n  const contentTypeMatch = useMatch(`/plugins/${pluginId}/content-types/:uid`);\r\n  const componentMatch = useMatch(\r\n    `/plugins/${pluginId}/component-categories/:categoryUid/:componentUid`\r\n  );\r\n  const fetchClient = useFetchClient();\r\n  const { put, post, del } = fetchClient;\r\n\r\n  const formatMessageRef = useRef<any>();\r\n  formatMessageRef.current = formatMessage;\r\n  const isInDevelopmentMode = autoReload;\r\n\r\n  const isInContentTypeView = contentTypeMatch !== null;\r\n  const firstKeyToMainSchema = isInContentTypeView ? 'contentType' : 'component';\r\n  const currentUid = isInContentTypeView\r\n    ? get(contentTypeMatch, 'params.uid', null)\r\n    : get(componentMatch, 'params.componentUid', null);\r\n\r\n  const getDataRef = useRef<any>();\r\n  const endPoint = isInContentTypeView ? 'content-types' : 'components';\r\n\r\n  getDataRef.current = async () => {\r\n    try {\r\n      const [\r\n        {\r\n          data: { data: componentsArray },\r\n        },\r\n        {\r\n          data: { data: contentTypesArray },\r\n        },\r\n        { data: reservedNames },\r\n      ] = await Promise.all(\r\n        ['components', 'content-types', 'reserved-names'].map((endPoint) => {\r\n          return fetchClient.get<{ data: any }>(`/${pluginId}/${endPoint}`);\r\n        })\r\n      );\r\n\r\n      const components = createDataObject(componentsArray);\r\n      const formattedComponents = formatSchemas(components);\r\n      const contentTypes = createDataObject(contentTypesArray);\r\n      const formattedContentTypes = formatSchemas(contentTypes);\r\n\r\n      dispatch({\r\n        type: GET_DATA_SUCCEEDED,\r\n        components: formattedComponents,\r\n        contentTypes: formattedContentTypes,\r\n        reservedNames,\r\n      });\r\n    } catch (err) {\r\n      console.error({ err });\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDataRef.current();\r\n\r\n    return () => {\r\n      // Reload the plugin so the cycle is new again\r\n      dispatch({ type: RELOAD_PLUGIN });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // We need to set the modifiedData after the data has been retrieved\r\n    // and also on pathname change\r\n    if (!isLoading && currentUid) {\r\n      setModifiedData();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading, pathname, currentUid]);\r\n\r\n  useEffect(() => {\r\n    if (!autoReload) {\r\n      toggleNotification({\r\n        type: 'info',\r\n        message: formatMessage({ id: getTrad('notification.info.autoreaload-disable') }),\r\n      });\r\n    }\r\n  }, [autoReload, toggleNotification]);\r\n\r\n  const addAttribute = (\r\n    attributeToSet: Record<string, any>,\r\n    forTarget: SchemaType,\r\n    targetUid: Internal.UID.Schema,\r\n    isEditing = false,\r\n    initialAttribute?: Record<string, any>,\r\n    shouldAddComponentToData = false\r\n  ) => {\r\n    const actionType = isEditing ? EDIT_ATTRIBUTE : ADD_ATTRIBUTE;\r\n\r\n    dispatch({\r\n      type: actionType,\r\n      attributeToSet,\r\n      forTarget,\r\n      targetUid,\r\n      initialAttribute,\r\n      shouldAddComponentToData,\r\n    });\r\n  };\r\n\r\n  const addCustomFieldAttribute = ({\r\n    attributeToSet,\r\n    forTarget,\r\n    targetUid,\r\n    initialAttribute,\r\n  }: CustomFieldAttributeParams) => {\r\n    dispatch({\r\n      type: ADD_CUSTOM_FIELD_ATTRIBUTE,\r\n      attributeToSet,\r\n      forTarget,\r\n      targetUid,\r\n      initialAttribute,\r\n    });\r\n  };\r\n\r\n  const editCustomFieldAttribute = ({\r\n    attributeToSet,\r\n    forTarget,\r\n    targetUid,\r\n    initialAttribute,\r\n  }: CustomFieldAttributeParams) => {\r\n    dispatch({\r\n      type: EDIT_CUSTOM_FIELD_ATTRIBUTE,\r\n      attributeToSet,\r\n      forTarget,\r\n      targetUid,\r\n      initialAttribute,\r\n    });\r\n  };\r\n\r\n  const addCreatedComponentToDynamicZone = (\r\n    dynamicZoneTarget: string,\r\n    componentsToAdd: string[]\r\n  ) => {\r\n    dispatch({\r\n      type: ADD_CREATED_COMPONENT_TO_DYNAMIC_ZONE,\r\n      dynamicZoneTarget,\r\n      componentsToAdd,\r\n    });\r\n  };\r\n\r\n  const createSchema = (\r\n    data: Record<string, any>,\r\n    schemaType: SchemaType,\r\n    uid: Internal.UID.Schema,\r\n    componentCategory?: string,\r\n    shouldAddComponentToData = false\r\n  ) => {\r\n    const type = schemaType === 'contentType' ? CREATE_SCHEMA : CREATE_COMPONENT_SCHEMA;\r\n\r\n    dispatch({\r\n      type,\r\n      data,\r\n      componentCategory,\r\n      schemaType,\r\n      uid,\r\n      shouldAddComponentToData,\r\n    });\r\n  };\r\n\r\n  const changeDynamicZoneComponents = (dynamicZoneTarget: string, newComponents: string[]) => {\r\n    dispatch({\r\n      type: CHANGE_DYNAMIC_ZONE_COMPONENTS,\r\n      dynamicZoneTarget,\r\n      newComponents,\r\n    });\r\n  };\r\n\r\n  const removeAttribute = (\r\n    mainDataKey: string,\r\n    attributeToRemoveName: string,\r\n    componentUid = ''\r\n  ) => {\r\n    const type =\r\n      mainDataKey === 'components' ? REMOVE_FIELD_FROM_DISPLAYED_COMPONENT : REMOVE_FIELD;\r\n\r\n    if (mainDataKey === 'contentType') {\r\n      trackUsage('willDeleteFieldOfContentType');\r\n    }\r\n\r\n    dispatch({\r\n      type,\r\n      mainDataKey,\r\n      attributeToRemoveName,\r\n      componentUid,\r\n    });\r\n  };\r\n\r\n  const deleteCategory = async (categoryUid: string) => {\r\n    try {\r\n      const requestURL = `/${pluginId}/component-categories/${categoryUid}`;\r\n      // eslint-disable-next-line no-alert\r\n      const userConfirm = window.confirm(\r\n        formatMessage({\r\n          id: getTrad('popUpWarning.bodyMessage.category.delete'),\r\n        })\r\n      );\r\n      // Close the modal\r\n      onCloseModal();\r\n\r\n      if (userConfirm) {\r\n        lockAppWithAutoreload?.();\r\n\r\n        await del(requestURL);\r\n\r\n        // Make sure the server has restarted\r\n        await serverRestartWatcher(true);\r\n\r\n        // Unlock the app\r\n        unlockAppWithAutoreload?.();\r\n\r\n        await updatePermissions();\r\n      }\r\n    } catch (err) {\r\n      console.error({ err });\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    } finally {\r\n      unlockAppWithAutoreload?.();\r\n    }\r\n  };\r\n\r\n  const deleteData = async () => {\r\n    try {\r\n      const requestURL = `/${pluginId}/${endPoint}/${currentUid}`;\r\n      const isTemporary = get(modifiedData, [firstKeyToMainSchema, 'isTemporary'], false);\r\n      // eslint-disable-next-line no-alert\r\n      const userConfirm = window.confirm(\r\n        formatMessage({\r\n          id: getTrad(\r\n            `popUpWarning.bodyMessage.${isInContentTypeView ? 'contentType' : 'component'}.delete`\r\n          ),\r\n        })\r\n      );\r\n\r\n      // Close the modal\r\n      onCloseModal();\r\n\r\n      if (userConfirm) {\r\n        if (isTemporary) {\r\n          // Delete the not saved type\r\n          // Here we just need to reset the components to the initial ones and also the content types\r\n          // Doing so will trigging a url change since the type doesn't exist in either the contentTypes or the components\r\n          // so the modified and the initial data will also be reset in the useEffect...\r\n          dispatch({ type: DELETE_NOT_SAVED_TYPE });\r\n\r\n          return;\r\n        }\r\n\r\n        lockAppWithAutoreload?.();\r\n\r\n        await del(requestURL);\r\n\r\n        // Make sure the server has restarted\r\n        await serverRestartWatcher(true);\r\n\r\n        // Unlock the app\r\n        await unlockAppWithAutoreload?.();\r\n\r\n        // Refetch the permissions\r\n        await updatePermissions();\r\n      }\r\n    } catch (err) {\r\n      console.error({ err });\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    } finally {\r\n      unlockAppWithAutoreload?.();\r\n    }\r\n  };\r\n\r\n  const editCategory = async (categoryUid: string, body: any) => {\r\n    try {\r\n      const requestURL = `/${pluginId}/component-categories/${categoryUid}`;\r\n\r\n      // Close the modal\r\n      onCloseModal();\r\n\r\n      // Lock the app\r\n      lockAppWithAutoreload?.();\r\n\r\n      // Update the category\r\n      await put(requestURL, body);\r\n\r\n      // Make sure the server has restarted\r\n      await serverRestartWatcher(true);\r\n\r\n      // Unlock the app\r\n      await unlockAppWithAutoreload?.();\r\n\r\n      await updatePermissions();\r\n    } catch (err) {\r\n      console.error({ err });\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    } finally {\r\n      unlockAppWithAutoreload?.();\r\n    }\r\n  };\r\n\r\n  const getAllComponentsThatHaveAComponentInTheirAttributes = () => {\r\n    // We need to create an object with all the non modified compos\r\n    // plus the ones that are created on the fly\r\n    const allCompos = Object.assign({}, components, modifiedData.components);\r\n\r\n    // Since we apply the modification of a specific component only in the modified data\r\n    // we need to update all compos with the modifications\r\n    if (!isInContentTypeView) {\r\n      const currentEditedCompo = get(modifiedData, 'component', {});\r\n\r\n      set(allCompos, get(currentEditedCompo, ['uid'], ''), currentEditedCompo);\r\n    }\r\n\r\n    const composWithCompos = retrieveComponentsThatHaveComponents(allCompos);\r\n\r\n    return composWithCompos;\r\n  };\r\n\r\n  const getAllNestedComponents = () => {\r\n    const appNestedCompo = retrieveNestedComponents(components);\r\n\r\n    return appNestedCompo;\r\n  };\r\n\r\n  const removeComponentFromDynamicZone = (dzName: string, componentToRemoveIndex: number) => {\r\n    dispatch({\r\n      type: REMOVE_COMPONENT_FROM_DYNAMIC_ZONE,\r\n      dzName,\r\n      componentToRemoveIndex,\r\n    });\r\n  };\r\n\r\n  const setModifiedData = () => {\r\n    const currentSchemas = isInContentTypeView ? contentTypes : components;\r\n    const schemaToSet = get(currentSchemas, currentUid ?? '', {\r\n      schema: { attributes: [] },\r\n    });\r\n\r\n    const retrievedComponents = retrieveComponentsFromSchema(\r\n      schemaToSet.schema.attributes,\r\n      components\r\n    );\r\n\r\n    const newSchemaToSet = createModifiedDataSchema(\r\n      schemaToSet,\r\n      retrievedComponents,\r\n      components,\r\n      isInContentTypeView\r\n    );\r\n\r\n    const hasJustCreatedSchema =\r\n      get(schemaToSet, 'isTemporary', false) &&\r\n      size(get(schemaToSet, 'schema.attributes', [])) === 0;\r\n\r\n    dispatch({\r\n      type: SET_MODIFIED_DATA,\r\n      schemaToSet: newSchemaToSet,\r\n      hasJustCreatedSchema,\r\n    });\r\n  };\r\n\r\n  const shouldRedirect = useMemo(() => {\r\n    const dataSet = isInContentTypeView ? contentTypes : components;\r\n    if (currentUid === 'create-content-type') {\r\n      return false;\r\n    }\r\n\r\n    return !Object.keys(dataSet).includes(currentUid || '') && !isLoading;\r\n  }, [components, contentTypes, currentUid, isInContentTypeView, isLoading]);\r\n\r\n  const redirectEndpoint = useMemo(() => {\r\n    const allowedEndpoints = Object.keys(contentTypes)\r\n      .filter((uid) => get(contentTypes, [uid, 'schema', 'visible'], true))\r\n      .sort();\r\n\r\n    return get(allowedEndpoints, '0', 'create-content-type');\r\n  }, [contentTypes]);\r\n\r\n  if (shouldRedirect) {\r\n    return <Navigate to={`/plugins/${pluginId}/content-types/${redirectEndpoint}`} />;\r\n  }\r\n\r\n  const submitData = async (additionalContentTypeData?: Record<string, any>) => {\r\n    try {\r\n      const isCreating = get(modifiedData, [firstKeyToMainSchema, 'isTemporary'], false);\r\n\r\n      const body: {\r\n        components: any[];\r\n        contentType?: Record<string, any>;\r\n        component?: any;\r\n      } = {\r\n        components: getComponentsToPost(\r\n          modifiedData.components as Components,\r\n          components as Components,\r\n          currentUid as Internal.UID.Schema\r\n        ),\r\n      };\r\n\r\n      if (isInContentTypeView) {\r\n        const PluginForms = plugin?.apis?.forms as any;\r\n        const contentType = PluginForms.mutateContentTypeSchema(\r\n          {\r\n            ...formatMainDataType(modifiedData.contentType),\r\n            ...additionalContentTypeData,\r\n          },\r\n          initialData.contentType\r\n        ) as ContentType;\r\n\r\n        const isValidSchema = validateSchema(contentType);\r\n\r\n        if (!isValidSchema) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatMessage({\r\n              id: getTrad('notification.error.dynamiczone-min.validation'),\r\n              defaultMessage:\r\n                'At least one component is required in a dynamic zone to be able to save a content type',\r\n            }),\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        body.contentType = contentType;\r\n\r\n        trackUsage('willSaveContentType');\r\n      } else {\r\n        body.component = formatMainDataType(modifiedData.component, true);\r\n\r\n        trackUsage('willSaveComponent');\r\n      }\r\n\r\n      // Lock the app\r\n      lockAppWithAutoreload?.();\r\n\r\n      const baseURL = `/${pluginId}/${endPoint}`;\r\n      const requestURL = isCreating ? baseURL : `${baseURL}/${currentUid}`;\r\n\r\n      if (isCreating) {\r\n        await post(requestURL, body);\r\n      } else {\r\n        await put(requestURL, body);\r\n      }\r\n\r\n      if (\r\n        isCreating &&\r\n        (initialData.contentType?.schema.kind === 'collectionType' ||\r\n          initialData.contentType?.schema.kind === 'singleType')\r\n      ) {\r\n        setStepState('contentTypeBuilder.success', true);\r\n        trackUsage('didCreateGuidedTourCollectionType');\r\n        setCurrentStep(null);\r\n      }\r\n\r\n      // Submit ct tracking success\r\n      if (isInContentTypeView) {\r\n        trackUsage('didSaveContentType');\r\n\r\n        const oldName = get(body, ['contentType', 'schema', 'name'], '');\r\n        const newName = get(initialData, ['contentType', 'schema', 'name'], '');\r\n\r\n        if (!isCreating && oldName !== newName) {\r\n          trackUsage('didEditNameOfContentType');\r\n        }\r\n      } else {\r\n        trackUsage('didSaveComponent');\r\n      }\r\n\r\n      // Make sure the server has restarted\r\n      await serverRestartWatcher(true);\r\n\r\n      // Unlock the app\r\n      unlockAppWithAutoreload?.();\r\n\r\n      // refetch and update initial state after the data has been saved\r\n      await getDataRef.current();\r\n      dispatch({ type: UPDATE_INITIAL_STATE });\r\n\r\n      // Update the app's permissions\r\n      await updatePermissions();\r\n    } catch (err: any) {\r\n      if (!isInContentTypeView) {\r\n        trackUsage('didNotSaveComponent');\r\n      }\r\n\r\n      console.error({ err: err.response });\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    } finally {\r\n      unlockAppWithAutoreload?.();\r\n    }\r\n  };\r\n\r\n  const updatePermissions = async () => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    await refetchPermissions();\r\n  };\r\n\r\n  const updateSchema = (\r\n    data: Record<string, any>,\r\n    schemaType: SchemaType,\r\n    componentUID: Internal.UID.Schema\r\n  ) => {\r\n    dispatch({\r\n      type: UPDATE_SCHEMA,\r\n      data,\r\n      schemaType,\r\n      uid: componentUID,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <DataManagerContext.Provider\r\n      value={{\r\n        addAttribute,\r\n        addCustomFieldAttribute,\r\n        addCreatedComponentToDynamicZone,\r\n        allComponentsCategories: retrieveSpecificInfoFromComponents(components, ['category']),\r\n        changeDynamicZoneComponents,\r\n        components,\r\n        componentsGroupedByCategory: groupBy(components, 'category') as Record<string, any[]>,\r\n        componentsThatHaveOtherComponentInTheirAttributes:\r\n          getAllComponentsThatHaveAComponentInTheirAttributes(),\r\n        contentTypes,\r\n        createSchema,\r\n        deleteCategory,\r\n        deleteData,\r\n        editCategory,\r\n        editCustomFieldAttribute,\r\n        isInDevelopmentMode,\r\n        initialData,\r\n        isInContentTypeView,\r\n        modifiedData,\r\n        nestedComponents: getAllNestedComponents(),\r\n        removeAttribute,\r\n        removeComponentFromDynamicZone,\r\n        reservedNames,\r\n        setModifiedData,\r\n        sortedContentTypesList: sortContentType(contentTypes),\r\n        submitData,\r\n        updateSchema,\r\n      }}\r\n    >\r\n      {isLoadingForDataToBeSet ? (\r\n        <Page.Loading />\r\n      ) : (\r\n        <>\r\n          {children}\r\n          {isInDevelopmentMode && <FormModal />}\r\n        </>\r\n      )}\r\n    </DataManagerContext.Provider>\r\n  );\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default memo(DataManagerProvider);\r\n","const INITIAL_STATE_DATA = {\r\n  actionType: null,\r\n  attributeName: null,\r\n  attributeType: null,\r\n  categoryName: null,\r\n  dynamicZoneTarget: null,\r\n  forTarget: null,\r\n  modalType: null,\r\n  isOpen: false,\r\n  showBackLink: false,\r\n  kind: null,\r\n  step: null,\r\n  targetUid: null,\r\n  customFieldUid: null,\r\n  activeTab: 'basic',\r\n};\r\n\r\nexport { INITIAL_STATE_DATA };\r\n","import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\n\r\nimport { FormModalNavigationContext } from '../../contexts/FormModalNavigationContext';\r\n\r\nimport { INITIAL_STATE_DATA } from './constants';\r\n\r\ntype FormModalNavigationProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport type State = any;\r\n\r\nexport type ModalEventProps = {\r\n  attributeType?: string;\r\n  customFieldUid?: string;\r\n  dynamicZoneTarget?: string;\r\n  forTarget?: string;\r\n  targetUid?: string;\r\n  attributeName?: string;\r\n  step?: string | null;\r\n  kind?: string;\r\n  categoryName?: string;\r\n  modalType?: string;\r\n  actionType?: string;\r\n  isOpen?: boolean;\r\n  showBackLink?: boolean;\r\n};\r\n\r\nexport const FormModalNavigationProvider = ({ children }: FormModalNavigationProviderProps) => {\r\n  const [state, setFormModalNavigationState] = React.useState(INITIAL_STATE_DATA);\r\n  const { trackUsage } = useTracking();\r\n\r\n  const onClickSelectCustomField = ({ attributeType, customFieldUid }: ModalEventProps) => {\r\n    // TODO: Add tracking for custom fields\r\n    setFormModalNavigationState((prevState: any) => {\r\n      return {\r\n        ...prevState,\r\n        actionType: 'create',\r\n        modalType: 'customField',\r\n        attributeType,\r\n        customFieldUid,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onClickSelectField = ({ attributeType, step }: ModalEventProps) => {\r\n    if (state.forTarget === 'contentType') {\r\n      trackUsage('didSelectContentTypeFieldType', { type: attributeType });\r\n    }\r\n\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        actionType: 'create',\r\n        modalType: 'attribute',\r\n        step,\r\n        attributeType,\r\n        showBackLink: true,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onOpenModalAddComponentsToDZ = ({ dynamicZoneTarget, targetUid }: ModalEventProps) => {\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        dynamicZoneTarget,\r\n        targetUid,\r\n        modalType: 'addComponentToDynamicZone',\r\n        forTarget: 'contentType',\r\n        step: '1',\r\n        actionType: 'edit',\r\n        isOpen: true,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onOpenModalAddField = ({ forTarget, targetUid }: ModalEventProps) => {\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        actionType: 'create',\r\n        forTarget,\r\n        targetUid,\r\n        modalType: 'chooseAttribute',\r\n        isOpen: true,\r\n        showBackLink: false,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onOpenModalCreateSchema = (nextState: State) => {\r\n    setFormModalNavigationState((prevState) => {\r\n      return { ...prevState, ...nextState, isOpen: true, activeTab: 'basic' };\r\n    });\r\n  };\r\n\r\n  const onOpenModalEditCategory = (categoryName: string) => {\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        categoryName,\r\n        actionType: 'edit',\r\n        modalType: 'editCategory',\r\n        isOpen: true,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onOpenModalEditCustomField = ({\r\n    forTarget,\r\n    targetUid,\r\n    attributeName,\r\n    attributeType,\r\n    customFieldUid,\r\n  }: ModalEventProps) => {\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        modalType: 'customField',\r\n        customFieldUid,\r\n        actionType: 'edit',\r\n        forTarget,\r\n        targetUid,\r\n        attributeName,\r\n        attributeType,\r\n        isOpen: true,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onOpenModalEditField = ({\r\n    forTarget,\r\n    targetUid,\r\n    attributeName,\r\n    attributeType,\r\n    step,\r\n  }: ModalEventProps) => {\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        modalType: 'attribute',\r\n        actionType: 'edit',\r\n        forTarget,\r\n        targetUid,\r\n        attributeName,\r\n        attributeType,\r\n        step,\r\n        isOpen: true,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onOpenModalEditSchema = ({ modalType, forTarget, targetUid, kind }: ModalEventProps) => {\r\n    setFormModalNavigationState((prevState: State) => {\r\n      return {\r\n        ...prevState,\r\n        modalType,\r\n        actionType: 'edit',\r\n        forTarget,\r\n        targetUid,\r\n        kind,\r\n        isOpen: true,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setFormModalNavigationState(INITIAL_STATE_DATA);\r\n  };\r\n\r\n  const onNavigateToChooseAttributeModal = ({ forTarget, targetUid }: ModalEventProps) => {\r\n    setFormModalNavigationState((prev: State) => {\r\n      return {\r\n        ...prev,\r\n        forTarget,\r\n        targetUid,\r\n        modalType: 'chooseAttribute',\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onNavigateToCreateComponentStep2 = () => {\r\n    setFormModalNavigationState((prev: State) => {\r\n      return {\r\n        ...prev,\r\n        attributeType: 'component',\r\n        modalType: 'attribute',\r\n        step: '2',\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const onNavigateToAddCompoToDZModal = ({ dynamicZoneTarget }: ModalEventProps) => {\r\n    setFormModalNavigationState((prev: State) => {\r\n      return {\r\n        ...prev,\r\n        dynamicZoneTarget,\r\n        modalType: 'addComponentToDynamicZone',\r\n        actionType: 'create',\r\n        step: '1',\r\n        attributeType: null,\r\n        attributeName: null,\r\n        activeTab: 'basic',\r\n      };\r\n    });\r\n  };\r\n\r\n  const setActiveTab = (value: string) => {\r\n    setFormModalNavigationState((prev: State) => {\r\n      return {\r\n        ...prev,\r\n        activeTab: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FormModalNavigationContext.Provider\r\n      value={\r\n        {\r\n          ...state,\r\n          onClickSelectField,\r\n          onClickSelectCustomField,\r\n          onCloseModal,\r\n          onNavigateToChooseAttributeModal,\r\n          onNavigateToAddCompoToDZModal,\r\n          onOpenModalAddComponentsToDZ,\r\n          onNavigateToCreateComponentStep2,\r\n          onOpenModalAddField,\r\n          onOpenModalCreateSchema,\r\n          onOpenModalEditCategory,\r\n          onOpenModalEditField,\r\n          onOpenModalEditCustomField,\r\n          onOpenModalEditSchema,\r\n          setFormModalNavigationState,\r\n          setActiveTab,\r\n        } as any\r\n      }\r\n    >\r\n      {children}\r\n    </FormModalNavigationContext.Provider>\r\n  );\r\n};\r\n","import { lazy, Suspense } from 'react';\r\n\r\nimport { Page } from '@strapi/admin/strapi-admin';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nconst ListView = lazy(() => import('../ListView/ListView'));\r\n\r\nexport const RecursivePath = () => {\r\n  return (\r\n    <Suspense fallback={<Page.Loading />}>\r\n      <Routes>\r\n        <Route path={`/:componentUid`} element={<ListView />} />\r\n      </Routes>\r\n    </Suspense>\r\n  );\r\n};\r\n","/* eslint-disable import/no-default-export */\r\n/* eslint-disable check-file/filename-naming-convention  */\r\n/* eslint-disable check-file/no-index */\r\nimport { lazy, Suspense, useEffect, useRef } from 'react';\r\n\r\nimport { Page, useGuidedTour, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport { AutoReloadOverlayBlockerProvider } from '../../components/AutoReloadOverlayBlocker';\r\nimport { ContentTypeBuilderNav } from '../../components/ContentTypeBuilderNav/ContentTypeBuilderNav';\r\nimport DataManagerProvider from '../../components/DataManagerProvider/DataManagerProvider';\r\nimport { FormModalNavigationProvider } from '../../components/FormModalNavigationProvider/FormModalNavigationProvider';\r\nimport { PERMISSIONS } from '../../constants';\r\nimport { pluginId } from '../../pluginId';\r\nimport { RecursivePath } from '../RecursivePath/RecursivePath';\r\n\r\nconst ListView = lazy(() => import('../ListView/ListView'));\r\n\r\nconst App = () => {\r\n  const { formatMessage } = useIntl();\r\n  const title = formatMessage({\r\n    id: `${pluginId}.plugin.name`,\r\n    defaultMessage: 'Content Types Builder',\r\n  });\r\n  const startSection = useGuidedTour('App', (state) => state.startSection);\r\n  const startSectionRef = useRef(startSection);\r\n\r\n  useEffect(() => {\r\n    if (startSectionRef.current) {\r\n      startSectionRef.current('contentTypeBuilder');\r\n    }\r\n  }, []);\r\n\r\n  // FIXME Error here\r\n  return (\r\n    <Page.Protect permissions={PERMISSIONS.main}>\r\n      <Page.Title>{title}</Page.Title>\r\n      <AutoReloadOverlayBlockerProvider>\r\n        <FormModalNavigationProvider>\r\n          {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}\r\n          {/* @ts-ignore */}\r\n          <DataManagerProvider>\r\n            <Layouts.Root sideNav={<ContentTypeBuilderNav />}>\r\n              <Suspense fallback={<Page.Loading />}>\r\n                <Routes>\r\n                  <Route path=\"content-types/:uid\" element={<ListView />} />\r\n                  <Route path={`component-categories/:categoryUid/*`} element={<RecursivePath />} />\r\n                </Routes>\r\n              </Suspense>\r\n            </Layouts.Root>\r\n          </DataManagerProvider>\r\n        </FormModalNavigationProvider>\r\n      </AutoReloadOverlayBlockerProvider>\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"names":["pluginId","createContext","useContext","React","useNotification","useIntl","useTracking","useState","useFilter","useCollator","isEqual","components","data","filteredLinks","link","styled","SubNavLink","jsxs","SubNav","jsx","SubNavHeader","SubNavSections","Fragment","SubNavSection","SubNavLinkSection","upperFirst","NavLink","Box","TextButton","Plus","Field","MultiSelectNested","NumberField","BlocksField","BooleanField","CollectionType","ComponentField","DateField","DynamicZoneField","EmailField","EnumerationField","MediaField","JsonField","PasswordField","RelationField","MarkdownField","SingleType","TextField","UidField","useStrapiApp","Flex","Sparkle","Typography","KeyboardNavigable","index","Grid","EmptyDocuments","LinkButton","Link","qs","Modal","Tabs","Divider","options","value","SingleSelect","intlLabel","SingleSelectOption","Wrapper","inputFocusStyle","Checkbox","TextInput","NumberInput","Dialog","ConfirmDialog","Button","ArrowLeft","Breadcrumbs","Crumb","Icons","Symbols","VisuallyHidden","useRef","useEffect","Searchbar","IconButton","Search","Tooltip","Trash","nameToSlug","pluralize","attribute","error","JSONInput","Toggle","DateTimePicker","DatePicker","formatISO","Eye","EyeStriked","disabled","Textarea","TimePicker","useDispatch","plugin","ON_CHANGE_RELATION_TARGET","Menu","GenericInput","OneWay","OneToOne","OneToMany","ManyToOne","ManyToMany","ManyWay","get","ON_CHANGE_RELATION_TYPE","truncate","getRelationType","Combobox","ComboboxOption","MAX_COMPONENT_DEPTH","key","nameField","slugify","errorsTrads","snakeCase","yup","toNumber","uniq","values","createComponentUid","createUid","baseForm","initialState","createSelector","acc","current","useSelector","shallowEqual","useNavigate","SET_DATA_TO_EDIT","kind","SET_DYNAMIC_ZONE_DATA_SCHEMA","set","SET_CUSTOM_FIELD_DATA_SCHEMA","SET_ATTRIBUTE_DATA_SCHEMA","RESET_PROPS","SET_ERRORS","ON_CHANGE","toLower","RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ","RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO","RESET_PROPS_AND_SAVE_CURRENT_DATA","has","advancedForm","makeUnique","omit","sortBy","camelCase","useAutoReloadOverlayBlocker","useGuidedTour","useAppInfo","useAuth","useLocation","useMatch","useFetchClient","reservedNames","endPoint","contentTypes","GET_DATA_SUCCEEDED","RELOAD_PLUGIN","EDIT_ATTRIBUTE","ADD_ATTRIBUTE","ADD_CUSTOM_FIELD_ATTRIBUTE","EDIT_CUSTOM_FIELD_ATTRIBUTE","ADD_CREATED_COMPONENT_TO_DYNAMIC_ZONE","CREATE_SCHEMA","CREATE_COMPONENT_SCHEMA","CHANGE_DYNAMIC_ZONE_COMPONENTS","REMOVE_FIELD_FROM_DISPLAYED_COMPONENT","REMOVE_FIELD","DELETE_NOT_SAVED_TYPE","REMOVE_COMPONENT_FROM_DYNAMIC_ZONE","retrieveComponentsFromSchema","size","SET_MODIFIED_DATA","useMemo","Navigate","UPDATE_INITIAL_STATE","UPDATE_SCHEMA","groupBy","Page","memo","ListView","lazy","Suspense","Routes","Route","PERMISSIONS","AutoReloadOverlayBlockerProvider","DataManagerProvider","Layouts"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,MAAM,UAAU,CAAC,OAAe,GAAGA,QAAAA,QAAQ,IAAI,EAAE;ACiEjD,MAAM,qBAAqBC,MAAAA,cAAuC;AC/D5D,MAAA,iBAAiB,MAAMC,MAAAA,WAAW,kBAAkB;AC4CpD,MAAA,6BAA6BC,iBAAM,cAA+C;AC5ClF,MAAA,yBAAyB,MAAMD,MAAAA,WAAW,0BAA0B;ACU1E,MAAM,4BAA4B,MAAM;AACvC,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,eAAe;AACb,QAAA,EAAE,mBAAmB,IAAIE,4BAAgB;AACzC,QAAA,EAAE,cAAc,IAAIC,kBAAQ;AAC5B,QAAA,EAAE,WAAW,IAAIC,wBAAY;AACnC,QAAM,CAAC,QAAQ,SAAS,IAAIC,MAAAA,SAAS,EAAE;AACvC,QAAM,EAAE,yBAAyB,wBAAwB,IAAI,uBAAuB;AAC9E,QAAA,EAAE,OAAO,IAAIF,kBAAQ;AAE3B,QAAM,EAAE,WAAA,IAAeG,aAAA,UAAU,QAAQ;AAAA,IACvC,aAAa;AAAA,EAAA,CACd;AAEK,QAAA,YAAYC,yBAAY,QAAQ;AAAA,IACpC,aAAa;AAAA,EAAA,CACd;AAED,QAAM,kCACJ,CAAC,OAAO,KAAK,YAAY,EAAE,KAAK,CAAC,OAAO,aAAa,EAAE,EAAE,gBAAgB,IAAI,KAC7E,CAAC,OAAO,KAAK,UAAU,EAAE;AAAA,IACvB,CAAC,cAAc,WAAW,SAAmC,EAAE,gBAAgB;AAAA,EAAA,KAEjFC,iBAAQ,QAAA,cAAc,WAAW;AAEnC,QAAM,2CAA2C,MAAM;AACrD,QAAI,iCAAiC;AACnC,iBAAW,uBAAuB;AAElC,YAAM,YAAY;AAAA,QAChB,WAAW;AAAA,QACX,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,WAAW;AAAA,MACb;AAEA,8BAAwB,SAAS;AAAA,IAAA,OAC5B;AACgC,2CAAA;AAAA,IAAA;AAAA,EAEzC;AAEA,QAAM,uCAAuC,MAAM;AACjD,QAAI,iCAAiC;AACnC,iBAAW,sBAAsB;AAEjC,YAAM,YAAY;AAAA,QAChB,WAAW;AAAA,QACX,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,WAAW;AAAA,MACb;AAEA,8BAAwB,SAAS;AAAA,IAAA,OAC5B;AACgC,2CAAA;AAAA,IAAA;AAAA,EAEzC;AAEA,QAAM,sCAAsC,MAAM;AAChD,QAAI,iCAAiC;AACnC,iBAAW,qBAAqB;AAEhC,YAAM,YAAY;AAAA,QAChB,WAAW;AAAA,QACX,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,WAAW;AAAA,MACb;AAEA,8BAAwB,SAAS;AAAA,IAAA,OAC5B;AACgC,2CAAA;AAAA,IAAA;AAAA,EAEzC;AAEA,QAAM,uCAAuC,MAAM;AAC9B,uBAAA;AAAA,MACjB,MAAM;AAAA,MACN,SAAS,cAAc;AAAA,QACrB,IAAI,QAAQ,qCAAqC;AAAA,QACjD,gBAAgB;AAAA,MACjB,CAAA;AAAA,IAAA,CACF;AAAA,EACH;AAEM,QAAA,iBAAiB,OAAO,QAAQ,2BAA2B,EAC9D,IAAI,CAAC,CAAC,UAAUC,WAAU,OAAO;AAAA,IAChC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,YAAY,GAAeC,OAAW;AACpC,QAAE,gBAAgB;AAElB,UAAI,iCAAiC;AACnC,gCAAwBA,MAAK,IAAI;AAAA,MAAA,OAC5B;AACgC,6CAAA;AAAA,MAAA;AAAA,IAEzC;AAAA,IACA,OAAOD,YACJ,IAAI,CAAC,eAAe;AAAA,MACnB,MAAM,UAAU;AAAA,MAChB,IAAI,YAAYX,gBAAQ,yBAAyB,QAAQ,IAAI,UAAU,GAAG;AAAA,MAC1E,OAAO,UAAU,OAAO;AAAA,IACxB,EAAA,EACD,KAAK,CAAC,GAAG,MAAM,UAAU,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;AAAA,EACrD,EAAA,EACD,KAAK,CAAC,GAAG,MAAM,UAAU,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;AAErD,QAAM,wBAAwB,uBAAuB,OAAO,CAAC,QAAQ,IAAI,OAAO;AAEhF,QAAM,OAAO;AAAA,IACX;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,QACL,IAAI,GAAG,QAAQ,0BAA0B,CAAC;AAAA,QAC1C,gBAAgB;AAAA,MAClB;AAAA,MACA,YAAY,uBAAuB;AAAA,QACjC,IAAI,GAAG,QAAQ,qBAAqB,CAAC;AAAA,QACrC,gBAAgB;AAAA,QAChB,SAAS;AAAA,MACX;AAAA,MACA,OAAO,sBAAsB,OAAO,CAAC,gBAAgB,YAAY,SAAS,gBAAgB;AAAA,IAC5F;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,QACL,IAAI,GAAG,QAAQ,gCAAgC,CAAC;AAAA,QAChD,gBAAgB;AAAA,MAClB;AAAA,MACA,YAAY,uBAAuB;AAAA,QACjC,IAAI,GAAG,QAAQ,4BAA4B,CAAC;AAAA,QAC5C,gBAAgB;AAAA,QAChB,SAAS;AAAA,MACX;AAAA,MACA,OAAO,sBAAsB,OAAO,CAAC,eAAe,WAAW,SAAS,YAAY;AAAA,IACtF;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,QACL,IAAI,GAAG,QAAQ,8BAA8B,CAAC;AAAA,QAC9C,gBAAgB;AAAA,MAClB;AAAA,MACA,YAAY,uBAAuB;AAAA,QACjC,IAAI,GAAG,QAAQ,yBAAyB,CAAC;AAAA,QACzC,gBAAgB;AAAA,QAChB,SAAS;AAAA,MACX;AAAA,MACA,OAAO;AAAA,IAAA;AAAA,EACT,EACA,IAAI,CAAC,YAAY;AACX,UAAA,WAAW,QAAQ,MAAM,KAAK,CAAC,MAAM,MAAM,QAAQ,EAAE,KAAK,CAAC;AAEjE,QAAI,UAAU;AACZ,UAAI,qBAAqB;AAElB,aAAA;AAAA,QACL,GAAG;AAAA,QACH,OAAO,QAAQ,MACZ,IAAI,CAAC,SAAS;AACPa,gBAAAA,iBAAgB,KAAK,MAAM,OAAO,CAACC,UAAc,WAAWA,MAAK,OAAO,MAAM,CAAC;AAEjFD,cAAAA,eAAc,WAAW,GAAG;AACvB,mBAAA;AAAA,UAAA;AAGT,gCAAsBA,eAAc;AAE7B,iBAAA;AAAA,YACL,GAAG;AAAA,YACH,OAAOA,eAAc,KAAK,CAAC,GAAQ,MAAW,UAAU,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;AAAA,UACnF;AAAA,QAAA,CACD,EACA,OAAO,OAAO;AAAA,QACjB,YAAY;AAAA,MACd;AAAA,IAAA;AAGI,UAAA,gBAAgB,QAAQ,MAC3B,OAAO,CAAC,SAAS,WAAW,KAAK,OAAO,MAAM,CAAC,EAC/C,KAAK,CAAC,GAAG,MAAM,UAAU,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;AAE9C,WAAA;AAAA,MACL,GAAG;AAAA,MACH,OAAO;AAAA,MACP,YAAY,cAAc;AAAA,IAC5B;AAAA,EAAA,CACD;AAEM,SAAA;AAAA,IACL,MAAM;AAAA,IACN,aAAa;AAAA,IACb,gBAAgB;AAAA,EAClB;AACF;ACnMA,MAAM,mBAAmBE,wBAAOC,uBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYnC,MAAM,wBAAwB,MAAM;AACzC,QAAM,EAAE,MAAM,aAAa,eAAA,IAAmB,0BAA0B;AAClE,QAAA,EAAE,cAAc,IAAIX,kBAAQ;AAElC,QAAM,aAAa,cAAc;AAAA,IAC/B,IAAI,QAAQ,aAAa;AAAA,IACzB,gBAAgB;AAAA,EAAA,CACjB;AAGC,SAAAY,2BAAA,KAACC,aAAO,QAAA,EAAA,cAAY,YAClB,UAAA;AAAA,IAAAC,2BAAA;AAAA,MAACC,aAAA;AAAA,MAAA;AAAA,QACC,YAAU;AAAA,QACV,OAAO;AAAA,QACP,SAAS,MAAM,eAAe,EAAE;AAAA,QAChC,UAAU,CAAC,MAAM,eAAe,EAAE,OAAO,KAAK;AAAA,QAC9C,OAAO;AAAA,QACP,aAAa,cAAc;AAAA,UACzB,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IACH;AAAA,mCACCC,aACE,gBAAA,EAAA,UAAA,KAAK,IAAI,CAAC,4CACRC,gBACC,EAAA,UAAA;AAAA,MAAAH,2BAAA;AAAA,QAACI,aAAA;AAAA,QAAA;AAAA,UACC,OAAO,cAAc;AAAA,YACnB,IAAI,QAAQ,MAAM;AAAA,YAClB,gBAAgB,QAAQ,MAAM;AAAA,UAAA,CAC/B;AAAA,UACD,aAAW;AAAA,UACX,YAAY,QAAQ,WAAW,SAAS;AAAA,UAEvC,UAAQ,QAAA,MAAM,IAAI,CAAC,SAAS;AAC3B,gBAAI,KAAK,OAAO;AAEZ,qBAAAJ,2BAAA,IAACK,aAAkC,mBAAA,EAAA,OAAOC,oBAAAA,QAAW,KAAK,KAAK,GAC5D,UAAK,KAAA,MAAM,IAAI,CAAC,YACfN,2BAAA;AAAA,gBAACH,aAAA;AAAA,gBAAA;AAAA,kBACC,KAAKU,eAAA;AAAA,kBACL,IAAI,QAAQ;AAAA,kBACZ,QAAQ,QAAQ;AAAA,kBAEhB,mBAAiB;AAAA,kBAEhB,UAAAD,oBAAA;AAAA,oBACC,cAAc,EAAE,IAAI,QAAQ,MAAM,gBAAgB,QAAQ,MAAO,CAAA;AAAA,kBAAA;AAAA,gBACnE;AAAA,gBALK,QAAQ;AAAA,cAAA,CAOhB,EAbqB,GAAA,KAAK,IAc7B;AAAA,YAAA;AAKF,mBAAAN,2BAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,KAAKO,eAAA;AAAA,gBACL,IAAI,KAAK;AAAA,gBACT,QAAQ,KAAK;AAAA,gBAEb,OAAM;AAAA,gBAEL,UAAAD,oBAAAA,QAAW,cAAc,EAAE,IAAI,KAAK,MAAM,gBAAgB,KAAK,OAAO,CAAC;AAAA,cAAA;AAAA,cAHnE,KAAK;AAAA,YAIZ;AAAA,UAEH,CAAA;AAAA,QAAA;AAAA,MACH;AAAA,MACC,QAAQ,cACNN,+BAAAQ,aAAAA,KAAA,EAAI,aAAa,GAChB,UAAAR,2BAAA;AAAA,QAACS,aAAA;AAAA,QAAA;AAAA,UACC,SAAS,QAAQ,WAAW;AAAA,UAC5B,WAAYT,2BAAA,IAAAU,YAAA,EAAK,OAAM,UAAS,QAAO,UAAS;AAAA,UAChD,WAAW;AAAA,UACX,QAAO;AAAA,UAEN,UAAc,cAAA;AAAA,YACb,IAAI,QAAQ,WAAW;AAAA,YACvB,gBAAgB,QAAQ,WAAW;AAAA,UACpC,CAAA;AAAA,QAAA;AAAA,MAAA,EAEL,CAAA;AAAA,IAAA,KAxDW,QAAQ,IA0DvB,CACD,EACH,CAAA;AAAA,EAAA,GACF;AAEJ;ACvHa,MAAA,oCAAoC,CAAC,gBAA6B;AAC7E,SACE,YAAY,SAAS,qBACpB,YAAY,wBAAwB,QAClC,MAAM,QAAQ,YAAY,mBAAmB,KAC5C,YAAY,oBAAoB,SAAS;AAEjD;ACPa,MAAA,gBAAgB,CAAC,YAA6B,oBAA4B;AACrF,SAAO,WAAW,KAAK,CAAC,EAAE,KAAK,MAAM,SAAS,eAAe;AAC/D;ACGA,MAAM,4BAA4B,CAChC,WACA,gBACG;AACC,MAAA,CAAC,aAAa,CAAC,aAAa;AAC9B,WAAO,CAAC;AAAA,EAAA;AAGH,SAAA;AAAA,IACL,CAAC,SAAS,GAAG,YAAY,SAAS;AAAA,EACpC;AACF;AAEA,MAAM,oBAAoB,CAAC,WACxB,OAAO,SAAS,CAAA,GAAI,OAA2C,CAAC,KAAK,iBAAiB;AACrF,MAAI,aAAa,MAAM;AACrB,QAAI,aAAa,KAAK,MAAM,GAAG,EAAE,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC,IAAI;AAAA,MAChE,IAAI,aAAa;AAAA,MACjB,gBAAgB,aAAa;AAAA,MAC7B,QAAQ,0BAA0B,cAAc,MAAM,cAAc,MAAM;AAAA,IAC5E;AAAA,EAAA;AAGK,SAAA;AACT,GAAG,EAAE;AClBP,MAAM,UAAU;AAAA,EACd;AAAA,IACE,OAAO;AAAA,IACP,UAAU;AAAA,MACR,EAAE,OAAO,gDAAgD,OAAO,SAAS;AAAA,MACzE,EAAE,OAAO,gDAAgD,OAAO,SAAS;AAAA,MACzE,EAAE,OAAO,0BAA0B,OAAO,SAAS;AAAA,MACnD,EAAE,OAAO,2CAA2C,OAAO,QAAQ;AAAA,IAAA;AAAA,EACrE;AAEJ;AAEO,MAAM,qBAAqB,CAAC;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AACV,MAA+B;AACvB,QAAA,EAAE,cAAc,IAAIxB,kBAAQ;AAGlC,QAAM,iBACJ,UAAU,QAAQ,OAAO,WAAW,IAChC,cAAc,EAAE,IAAI,eAAe,gBAAgB,OAAA,CAAQ,IAC3D,CAAC,GAAG,KAAK,EACN,KAAK,EACL,IAAI,CAAC,MAAMoB,oBAAAA,QAAW,CAAC,CAAC,EACxB,KAAK,IAAI;AAIlB,QAAM,QAAQ,UAAU,KACpB,cAAc,EAAE,IAAI,UAAU,IAAI,gBAAgB,UAAU,eAAe,CAAC,IAC5E;AAEJ,SACGR,2BAAA,KAAAa,aAAA,MAAM,MAAN,EAAW,MACV,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpBX,2BAAA;AAAA,MAACY,aAAA;AAAA,MAAA;AAAA,QACC,kBAAkB,MAAM;AAAA,QACxB,UAAU,CAAC,WAAkB;AACvB,cAAA,OAAO,SAAS,GAAG;AACZ,qBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,QAAQ,MAAM,uBAAuB,GAAG;AAAA,UAAA,OACrE;AACI,qBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,MAAM,MAAM,uBAAuB,GAAG;AAAA,UAAA;AAAA,QAE5E;AAAA,QACA;AAAA,QACA,OAAO,SAAS,CAAA;AAAA,MAAC;AAAA,IAAA;AAAA,EACnB,GACF;AAEJ;ACxCA,MAAM,cAAsE;AAAA,EAC1E,YAAYC,QAAA;AAAA,EACZ,QAAQC,QAAA;AAAA,EACR,SAASC,QAAA;AAAA,EACT,gBAAgBC,QAAA;AAAA,EAChB,WAAWC,QAAA;AAAA,EACX,aAAaD,QAAA;AAAA,EACb,MAAME,QAAA;AAAA,EACN,UAAUA,QAAA;AAAA,EACV,SAASL,QAAA;AAAA,EACT,aAAaM,QAAA;AAAA,EACb,OAAOC,QAAA;AAAA,EACP,MAAMC,QAAA;AAAA,EACN,aAAaA,QAAA;AAAA,EACb,MAAMC,QAAA;AAAA,EACN,OAAOA,QAAA;AAAA,EACP,OAAOT,QAAA;AAAA,EACP,SAASA,QAAA;AAAA,EACT,MAAMU,QAAA;AAAA,EACN,MAAMA,QAAA;AAAA,EACN,OAAOD,QAAA;AAAA,EACP,QAAQT,QAAA;AAAA,EACR,UAAUW,QAAA;AAAA,EACV,UAAUC,QAAA;AAAA,EACV,UAAUC,QAAA;AAAA,EACV,YAAYC,QAAA;AAAA,EACZ,QAAQC,QAAA;AAAA,EACR,MAAMA,QAAA;AAAA,EACN,MAAMV,QAAA;AAAA,EACN,WAAWA,QAAA;AAAA,EACX,KAAKW,QAAAA;AACP;AAEA,MAAM,UAAUjC,wBAAOY,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAcb,MAAA,gBAAgB,CAAC,EAAE,MAAM,cAAc,MAAM,GAAG,WAA+B;AAC1F,QAAM,iBAAiBsB,YAAAA,aAAa,iBAAiB,CAAC,UAAU,MAAM,aAAa,GAAG;AAElF,MAAA,QAAa,YAAY,IAAI;AAEjC,MAAI,aAAa;AACT,UAAA,oBAAoB,eAAe,WAAW;AACpD,UAAM,OAAO,mBAAmB;AAChC,QAAI,MAAM;AACA,cAAA;AAAA,IAAA;AAAA,EACV;AAGE,MAAA,CAAC,YAAY,IAAI,GAAG;AACf,WAAA;AAAA,EAAA;AAGT,SACG9B,2BAAAA,IAAA,SAAA,EAAQ,OAAM,UAAS,QAAQ,GAAI,GAAG,MAAM,eAAW,MACtD,UAAAA,+BAACQ,aAAAA,KAAI,EAAA,KAAK,MAAO,CAAA,GACnB;AAEJ;AC3Fa,MAAA,mBAAmBZ,wBAAOY,gBAAG;AAAA;AAAA;AAAA,sBAGpB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA,kBAI1C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,wBAChC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;ACK9D,MAAM,gBAA0B,CAAC;AAEjC,MAAM,WAAW,MACfR,+BAAC+B,aAAAA,MAAK,EAAA,MAAM,GAAG,gBAAe,YAC5B,UAACjC,gCAAAiC,aAAAA,MAAA,EAAK,KAAK,GAAG,WAAS,MAAC,YAAW,kBAAiB,SAAS,iBAC3D,UAAA;AAAA,EAAA/B,2BAAAA,IAACgC,iBAAQ,OAAO,QAAQ,QAAQ,QAAQ,MAAK,iBAAiB,CAAA;AAAA,iCAC7DC,aAAAA,YAAW,EAAA,WAAU,kBAAiB,SAAQ,SAAQ,UAEvD,MAAA,CAAA;AAAA,EAAA,CACF,EACF,CAAA;AAOK,MAAM,kBAAkB,CAAC,EAAE,OAAO,aAAmC;AACpE,QAAA,EAAE,cAAc,IAAI/C,kBAAQ;AAE5B,QAAA,EAAE,mBAAmB,IAAI,uBAAuB;AAEtD,QAAM,cAAc,MAAM;AAClB,UAAA,OAAO,SAAS,cAAc,MAAM;AAEvB,uBAAA;AAAA,MACjB,eAAe;AAAA,MACf;AAAA,IAAA,CACD;AAAA,EACH;AAEA,SACGc,2BAAAA,IAAA,kBAAA,EAAiB,SAAS,GAAG,KAAI,UAAS,WAAS,MAAC,MAAK,UAAS,SAAS,aAC1E,0CAAC+B,aAAAA,MACC,EAAA,UAAA;AAAA,IAAA/B,+BAAC,iBAAc,MAAY;AAAA,IAC1BF,2BAAA,KAAAU,aAAA,KAAA,EAAI,aAAa,GAAG,OAAM,QACzB,UAAA;AAAA,MAACV,2BAAAA,KAAAiC,aAAAA,MAAA,EAAK,gBAAe,iBACnB,UAAA;AAAA,QAAA/B,+BAACiC,aAAAA,cAAW,YAAW,QAAO,WAAU,cACrC,wBAAc,EAAE,IAAI,QAAQ,aAAa,IAAI,EAAE,GAAG,gBAAgB,KAAM,CAAA,GAC3E;AAAA,QACC,cAAc,SAAS,IAAI,oCAAM,UAAS,CAAA,CAAA;AAAA,MAAA,GAC7C;AAAA,MACAjC,2BAAAA,IAAC+B,qBACC,UAAC/B,2BAAA,IAAAiC,aAAA,YAAA,EAAW,SAAQ,MAAK,WAAU,cAChC,UAAc,cAAA;AAAA,QACb,IAAI,QAAQ,aAAa,IAAI,cAAc;AAAA,QAC3C,gBAAgB;AAAA,MACjB,CAAA,EACH,CAAA,EACF,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ;AC5Da,MAAA,gBAAgB,CAAC,EAAE,iBAC7BjC,+BAAAkC,aAAAA,mBAAA,EAAkB,SAAQ,UACzB,UAAAlC,2BAAAA,IAAC+B,qBAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAW,WAAA,IAAI,CAAC,cAAcI,WAAU;AACvC;AAAA;AAAA,IAEGnC,2BAAAA,IAAAoC,aAAAA,KAAK,MAAL,EAAsB,KAAK,GACzB,UAAa,aAAA,IAAI,CAAC,cAChBpC,2BAAAA,IAAAoC,aAAAA,KAAK,MAAL,EAA0B,KAAK,GAAG,WAAU,UAAS,YAAW,WAC/D,UAACpC,2BAAAA,IAAA,iBAAA,EAAgB,MAAM,UAAA,CAAW,EADpB,GAAA,SAEhB,CACD,EAAA,GALamC,MAMhB;AAAA;AAEJ,CAAC,GACH,EACF,CAAA;ACIK,MAAM,oBAAoB,CAAC,EAAE,gBAAgB,kBAA0C;AAC5F,QAAM,EAAE,MAAM,WAAW,gBAAoB,IAAA;AACvC,QAAA,EAAE,cAAc,IAAIjD,kBAAQ;AAE5B,QAAA,EAAE,yBAAyB,IAAI,uBAAuB;AAE5D,QAAM,cAAc,MAAM;AACC,6BAAA;AAAA,MACvB,eAAe;AAAA,MACf;AAAA,IAAA,CACD;AAAA,EACH;AAEA,SACGc,2BAAAA,IAAA,kBAAA,EAAiB,SAAS,GAAG,KAAI,UAAS,WAAS,MAAC,MAAK,UAAS,SAAS,aAC1E,0CAAC+B,aAAAA,MACC,EAAA,UAAA;AAAA,IAAC/B,2BAAAA,IAAA,eAAA,EAAc,MAAY,aAAa,eAAgB,CAAA;AAAA,IACxDF,2BAAAA,KAACU,aAAAA,KAAI,EAAA,aAAa,GAChB,UAAA;AAAA,MAACR,2BAAA,IAAA+B,aAAA,MAAA,EACC,UAAC/B,2BAAAA,IAAAiC,aAAAA,YAAA,EAAW,YAAW,QAAO,WAAU,cACrC,UAAA,cAAc,SAAS,EAC1B,CAAA,GACF;AAAA,MACAjC,2BAAA,IAAC+B,aACC,MAAA,EAAA,UAAA/B,2BAAAA,IAACiC,aAAAA,YAAW,EAAA,SAAQ,MAAK,WAAU,cAChC,UAAA,cAAc,eAAe,EAChC,CAAA,EACF,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ;ACpDA,MAAM,YAAYrC,wBAAOY,gBAAG;AAAA,gBACZ,CAAC,EAAE,MAAM,MACrB,sDAAsD,MAAM,OAAO,UAAU,QAAQ;AAAA;AAAA;AAIlF,MAAM,gBAAgB,MAAM;AACjC,SACGR,2BAAAA,IAAA+B,aAAAA,MAAA,EAAK,MAAK,QAAO,KAAK,GACpB,UAAA,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,QAAQ;AAE3B,WAAA/B,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QAGC,QAAO;AAAA,QACP,OAAM;AAAA,QACN,WAAS;AAAA,MAAA;AAAA,MAHJ,cAAc,GAAG;AAAA,IAIxB;AAAA,EAEH,CAAA,GACH;AAEJ;AAEO,MAAM,kBAAkB,MAAM;AAC7B,QAAA,EAAE,cAAc,IAAId,kBAAQ;AAGhC,SAAAY,2BAAA,KAACU,aAAI,KAAA,EAAA,UAAS,YACZ,UAAA;AAAA,IAAAR,2BAAA,IAAC,eAAc,EAAA;AAAA,IACdA,+BAAAQ,aAAAA,KAAA,EAAI,UAAS,YAAW,KAAK,GAAG,OAAM,QACrC,UAAAV,2BAAAA,KAACiC,qBAAK,YAAW,UAAS,gBAAe,UAAS,WAAU,UAC1D,UAAA;AAAA,MAAA/B,2BAAA,IAACqC,QAAe,gBAAA,EAAA,OAAM,SAAQ,QAAO,QAAO;AAAA,MAC5CrC,2BAAAA,IAACQ,aAAAA,OAAI,YAAY,GAAG,eAAe,GACjC,UAAAV,2BAAA,KAACU,aAAI,KAAA,EAAA,WAAU,UACb,UAAA;AAAA,QAAAR,2BAAAA,IAACiC,2BAAW,SAAQ,SAAQ,KAAI,KAAI,WAAU,cAC3C,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,yBAAyB;AAAA,UACrC,gBAAgB;AAAA,QACjB,CAAA,GACH;AAAA,QACCjC,2BAAA,IAAAQ,aAAA,KAAA,EAAI,YAAY,GACf,UAACR,2BAAAA,IAAAiC,aAAA,YAAA,EAAW,SAAQ,SAAQ,KAAI,KAAI,WAAU,cAC3C,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,6BAA6B;AAAA,UACzC,gBACE;AAAA,QACH,CAAA,EACH,CAAA,EACF,CAAA;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,MACAjC,2BAAA;AAAA,QAACsC,aAAA;AAAA,QAAA;AAAA,UACC,KAAKC,eAAA;AAAA,UACL,IAAI,gBAAgBC,cAAG,UAAU,EAAE,YAAY,CAAC,eAAe,EAAG,CAAA,CAAC;AAAA,UACnE,SAAQ;AAAA,UACR,0CAAY9B,MAAK,MAAA,EAAA;AAAA,UAEhB,UAAc,cAAA;AAAA,YACb,IAAI,QAAQ,wBAAwB;AAAA,YACpC,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,EAAA,CACF,EACF,CAAA;AAAA,EAAA,GACF;AAEJ;ACpEO,MAAM,mBAAmB,MAAM;AAC9B,QAAA,EAAE,cAAc,IAAIxB,kBAAQ;AAClC,QAAM,qBAAqB4C,YAAAA,aAAa,oBAAoB,CAAC,UAAU,MAAM,aAAa,MAAM;AAEhG,QAAM,yBAAyB,OAAO,QAAQ,mBAAA,CAAoB;AAE9D,MAAA,CAAC,uBAAuB,QAAQ;AAClC,0CAAQ,iBAAgB,EAAA;AAAA,EAAA;AAI1B,QAAM,qBAAqB,uBAAuB;AAAA,IAAK,CAAC,GAAG,MACzD,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,IAAI;AAAA,EAC9B;AAGE,SAAA9B,2BAAAA,IAACkC,aAAAA,mBAAkB,EAAA,SAAQ,UACzB,UAAApC,gCAACiC,aAAAA,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,IAAA/B,2BAAA,IAACoC,aAAK,KAAA,MAAL,EAAU,KAAK,GACb,UAAA,mBAAmB,IAAI,CAAC,CAAC,KAAK,WAAW,qCACvCA,aAAAA,KAAK,MAAL,EAAoB,KAAK,GAAG,WAAU,UAAS,YAAW,WACzD,UAACpC,2BAAAA,IAAA,mBAAA,EAA4B,gBAAgB,KAAK,eAA1B,GAAoD,EAD9D,GAAA,GAEhB,CACD,GACH;AAAA,IACAA,2BAAA;AAAA,MAACuC,aAAA;AAAA,MAAA;AAAA,QACC,MAAK;AAAA,QACL,YAAU;AAAA,QAET,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,iCAAiC;AAAA,UAC7C,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACH,EAAA,CACF,EACF,CAAA;AAEJ;ACzBO,MAAM,mBAAmB,CAAC,EAAE,YAAY,WAAW,WAAkC;AACpF,QAAA,EAAE,cAAc,IAAIrD,kBAAQ;AAE5B,QAAA,eAAe,QAAQ,wBAAwB;AAC/C,QAAA,cAAc,QAAQ,uBAAuB;AAEnD,QAAM,gBAAgB,UAAU,SAAS,WAAW,IAAI,cAAc;AACtE,QAAM,UAAU,QAAQ,wCAAwC,aAAa,EAAE;AAG7E,SAAAc,2BAAA,IAACyC,aAAM,MAAA,MAAN,EACC,UAAA3C,2BAAAA,KAAC4C,aAAAA,KAAK,MAAL,EAAU,SAAQ,UAAS,cAAa,WACvC,UAAA;AAAA,IAAC5C,2BAAAA,KAAAiC,aAAAA,MAAA,EAAK,gBAAe,iBACnB,UAAA;AAAA,MAAA/B,2BAAA,IAACiC,aAAW,YAAA,EAAA,SAAQ,QAAO,KAAI,MAC5B,UAAA,cAAc,EAAE,IAAI,SAAS,gBAAgB,iBAAiB,CAAC,EAClE,CAAA;AAAA,MACAnC,2BAAAA,KAAC4C,aAAK,KAAA,MAAL,EACC,UAAA;AAAA,QAAA1C,2BAAAA,IAAC0C,aAAAA,KAAK,SAAL,EAAa,OAAM,WACjB,UAAA,cAAc,EAAE,IAAI,cAAc,gBAAgB,UAAU,CAAC,EAChE,CAAA;AAAA,QACC1C,2BAAAA,IAAA0C,aAAAA,KAAK,SAAL,EAAa,OAAM,UACjB,UAAc,cAAA,EAAE,IAAI,aAAa,gBAAgB,SAAU,CAAA,EAC9D,CAAA;AAAA,MAAA,EACF,CAAA;AAAA,IAAA,GACF;AAAA,IACA1C,2BAAAA,IAAC2C,aAAQ,SAAA,EAAA,cAAc,EAAG,CAAA;AAAA,IAC1B3C,2BAAAA,IAAC0C,kBAAK,SAAL,EAAa,OAAM,WAClB,UAAA1C,2BAAAA,IAAC,eAAc,EAAA,WAAA,CAAwB,EACzC,CAAA;AAAA,IACAA,+BAAC0C,aAAAA,KAAK,SAAL,EAAa,OAAM,UAClB,UAAA1C,2BAAA,IAAC,oBAAiB,EACpB,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ;AC/BO,MAAM,4BAA4B,CAAC;AAAA,EACxC;AAAA,EACA;AAAA,EACA,SAAA4C;AAAA,EACA;AAAA,EACA,QAAQ;AACV,MAAsC;AAC9B,QAAA,EAAE,cAAc,IAAI1D,kBAAQ;AAC5B,QAAA,QAAQ,UAAU,KACpB;AAAA,IACE,EAAE,IAAI,UAAU,IAAI,gBAAgB,UAAU,eAAe;AAAA,IAC7D,EAAE,GAAG,UAAU,OAAO;AAAA,EAAA,IAExB;AAEE,QAAA,eAAe,CAAC2D,WAAe;AACnC,QAAI,YAA8B;AAElC,QAAIA,WAAU,QAAQ;AACR,kBAAA;AAAA,IAAA;AAGd,QAAIA,WAAU,SAAS;AACT,kBAAA;AAAA,IAAA;AAGL,aAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,WAAW,MAAM,yBAAyB,GAAG;AAAA,EACjF;AAEA,SACG/C,2BAAA,KAAAa,aAAA,MAAM,MAAN,EAAW,MACV,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpBX,2BAAAA,IAAC8C,aAAa,cAAA,EAAA,UAAU,cAAc,QAAQ,UAAU,OAAO,KAAK,OAAO,SAAA,GACxE,UAAAF,SAAQ,IAAI,CAAC,EAAE,WAAW,EAAE,WAAAG,YAAW,UAAU,OAAA,GAAU,KAAK,OAAAF,OAAAA,MAAY;AAEzE,aAAA7C,+BAACgD,aAAAA,sBAA6B,OAAOH,QAAO,UAAoB,QAE7D,UAAAE,WAAU,eAAA,GAFY,GAGzB;AAAA,IAAA,CAEH,EACH,CAAA;AAAA,EAAA,GACF;AAEJ;AClEA,MAAME,YAAUrD,wBAAOmC,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAWH,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA,MAExDmB,6BAAiB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAYL,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMlC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,QAAQ;AAAA,eACzC,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA,gBAC7B,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA,0BACpB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAQ/C,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA,kBAC7B,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAe9B,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,aAC3C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA,0BAEzB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA,sBAE1C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AC7CrD,MAAM,mBAAmB,CAAC;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS,CAAC;AAAA,EACV;AACF,MAA6B;AACrB,QAAA,EAAE,cAAc,IAAIhE,kBAAQ;AAElC,yCACG6C,mBAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,IAAA/B,2BAAA,IAACiC,aAAW,YAAA,EAAA,SAAQ,MAAK,YAAW,QAAO,WAAU,cAAa,SAAS,MAAM,KAAI,SAClF,UAAA,cAAc,SAAS,GAC1B;AAAA,IACAjC,2BAAAA,IAACiD,aAAQ,KAAK,GAAG,YAAW,WACzB,UAAA,OAAO,IAAI,CAAC,UAAU;AAEnB,aAAAnD,gCAAC,WAAM,SAAS,MAAM,MAAM,YAA8B,WAAU,aAClE,UAAA;AAAA,QAAAE,2BAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,IAAI,MAAM,MAAM,SAAS;AAAA,YACzB;AAAA,YACA,WAAU;AAAA,YACV,SAAS,MAAM,UAAU;AAAA,YACzB,OAAO,MAAM;AAAA,YAEb;AAAA,YACA,MAAK;AAAA,UAAA;AAAA,UAFA,MAAM;AAAA,QAGb;AAAA,uCACCQ,aAAI,KAAA,EAAA,WAAU,UAAS,SAAS,GAC/B,0CAACuB,aACC,MAAA,EAAA,UAAA;AAAA,UAAA/B,2BAAAA,IAACQ,oBAAI,cAAc,GACjB,yCAAC,QAAK,EAAA,WAAU,aAAY,EAC9B,CAAA;AAAA,0CACCuB,aAAAA,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,YAAA/B,+BAACiC,aAAAA,cAAW,YAAW,QAAQ,UAAc,cAAA,MAAM,KAAK,GAAE;AAAA,YAC1DjC,2BAAAA,IAACiC,2BAAW,SAAQ,MAAK,WAAU,cAChC,UAAA,cAAc,MAAM,WAAW,EAClC,CAAA;AAAA,UAAA,EACF,CAAA;AAAA,QAAA,EAAA,CACF,EACF,CAAA;AAAA,MAAA,EAAA,GAvB2C,MAAM,KAwBnD;AAAA,IAAA,CAEH,EACH,CAAA;AAAA,EAAA,GACF;AAEJ;ACxDO,MAAM,oBAAoB,CAAC;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAA8B;AACtB,QAAA,eAAe,CAAC,MAA2C;AACzD,UAAA,UAAU,EAAE,OAAO,UAAU;AAE1B,aAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,SAAS,MAAM,sBAAsB,GAAG;AAAA,EAC5E;AAEA,wCAAQ,kBAAkB,EAAA,GAAG,MAAM,MAAY,UAAU,cAAc,WAAsB;AAC/F;ACXO,MAAM,0BAA0B,CAAC;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AACV,MAAoC;AAC5B,QAAA,EAAE,cAAc,IAAI/C,kBAAQ;AAC5B,QAAA,QAAQ,UAAU,KACpB;AAAA,IACE,EAAE,IAAI,UAAU,IAAI,gBAAgB,UAAU,eAAe;AAAA,IAC7D,EAAE,GAAG,UAAU,OAAO;AAAA,EAAA,IAExB;AAEJ,QAAM,OAAO,aAAa,SAAS,eAAe,SAAS;AAErD,QAAA,WAAW,CAAC,aAAa;AACzB,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AAEnF,yCACG6C,mBAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,IAAA/B,2BAAA;AAAA,MAACmD,aAAA;AAAA,MAAA;AAAA,QACC,IAAI;AAAA,QACJ;AAAA,QACA,iBAAiB,CAACN,WAAU;AACpB,gBAAA,YAAY,SAAS,SAAS,MAAM;AACpC,gBAAA,YAAYA,SAAQ,YAAY;AAEtC,mBAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,UAAA,GAAa;AAAA,QACjD;AAAA,QACA,SAAS,UAAU;AAAA,QAElB,UAAA;AAAA,MAAA;AAAA,IACH;AAAA,IACC,UAAU,QACT7C,2BAAA,IAACQ,oBAAI,aAAa,GAAG,OAAO,EAAE,UAAU,WACrC,UAAA,SAAS,SACPV,2BAAAA,KAAAa,aAAA,MAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,MAAAX,2BAAA;AAAA,QAACoD,aAAA;AAAA,QAAA;AAAA,UACC,cAAY;AAAA,UACZ;AAAA,UACA;AAAA,UACA,OAAO,UAAU,OAAO,KAAK;AAAA,QAAA;AAAA,MAC/B;AAAA,MACApD,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,IAAA,GACf,IAECb,2BAAA,KAAAa,mBAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,MAAAX,2BAAA;AAAA,QAACqD,aAAA;AAAA,QAAA;AAAA,UACC,cAAY;AAAA,UACZ;AAAA,UACA,eAAe,CAACR,WAAe;AACpB,qBAAA,EAAE,QAAQ,EAAE,MAAM,OAAOA,UAAS,GAAG,KAAK,GAAG;AAAA,UACxD;AAAA,UACA,OAAO,SAAS;AAAA,QAAA;AAAA,MAClB;AAAA,MACA7C,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,IAAA,EAAA,CACf,EAEJ,CAAA;AAAA,EAAA,GAEJ;AAEJ;ACxDO,MAAM,wBAAwB,CAAC,EAAE,UAAU,GAAG,WAAuC;AACpF,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAC5B,QAAA,EAAE,mBAAmB,IAAID,4BAAgB;AAEzC,QAAA,eAAe,CAAC,MAAW;AACZ,uBAAA;AAAA,MACjB,MAAM;AAAA,MACN,SAAS,cAAc;AAAA,QACrB,IAAI,QAAQ,iCAAiC;AAAA,QAC7C,gBACE;AAAA,MACH,CAAA;AAAA,IAAA,CACF;AAED,aAAS,CAAC;AAAA,EACZ;AAEA,SAAQe,2BAAAA,IAAA,kBAAA,EAAkB,GAAG,MAAM,UAAU,cAAc;AAC7D;ACTO,MAAM,wBAAwB,CAAC;AAAA,EACpC;AAAA,EACA,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AACV,MAAkC;AAC1B,QAAA,EAAE,cAAc,IAAId,kBAAQ;AAClC,QAAM,CAAC,aAAa,cAAc,IAAIE,MAAAA,SAAS,KAAK;AAC9C,QAAA,QAAQ,UAAU,KACpB;AAAA,IACE,EAAE,IAAI,UAAU,IAAI,gBAAgB,UAAU,eAAe;AAAA,IAC7D,EAAE,GAAG,UAAU,OAAO;AAAA,EAAA,IAExB;AAEJ,QAAM,OAAO,cACT;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AAEJ,QAAM,gBAAgB,MAAM;AAC1B,aAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,MAAA,GAAS;AAE3C,mBAAe,KAAK;AAAA,EACtB;AAEM,QAAA,eAAiD,CAAC,YAAY;AAC9D,QAAA,CAAC,WAAW,CAAC,YAAY;AAC3B,qBAAe,IAAI;AAEnB;AAAA,IAAA;AAGO,aAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC,CAAC,QAAQ,GAAG;AAAA,EACjD;AAEA,SAEIU,2BAAA,KAAAK,qBAAA,EAAA,UAAA;AAAA,IAAAL,2BAAA,KAACa,aAAM,MAAA,MAAN,EAAW,MAAY,MACtB,UAAA;AAAA,MAAAX,+BAACmD,aAAAA,YAAS,SAAS,OAAO,UAAoB,iBAAiB,cAC5D,UACH,OAAA;AAAA,MACAnD,+BAACW,aAAAA,MAAM,MAAN,CAAW,CAAA;AAAA,IAAA,GACd;AAAA,IAEAX,2BAAAA,IAACsD,aAAO,OAAA,MAAP,EAAY,MAAM,aAAa,cAAc,CAAC,WAAW,eAAe,MAAM,GAC7E,UAAAtD,2BAAA;AAAA,MAACuD,YAAA;AAAA,MAAA;AAAA,QACC,WACGvD,2BAAAA,IAAAwD,aAAAA,QAAA,EAAO,SAAS,eAAe,SAAQ,UAAS,OAAM,QAAO,gBAAe,UAC1E,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,2CAA2C;AAAA,UACvD,gBAAgB;AAAA,QACjB,CAAA,GACH;AAAA,QAGD,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,oCAAoC;AAAA,UAChD,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IAAA,EAEL,CAAA;AAAA,EAAA,GACF;AAEJ;ACpDO,MAAM,sBAAsB,CAAC;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAgC;AACxB,QAAA,EAAE,cAAc,IAAItE,kBAAQ;AAElC,MAAI,sBAAsB;AACxB,QAAI,yBAAyB;AAEzB,aAAAc,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,SAAQ;AAAA,UACR,MAAK;AAAA,UACL,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,qCAAyB,GAAG,IAAI;AAAA,UAClC;AAAA,UACA,0CAAY9C,MAAK,MAAA,EAAA;AAAA,UAEhB,UAAc,cAAA;AAAA,YACb,IAAI,QAAQ,kDAAkD;AAAA,YAC9D,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACH;AAAA,IAAA;AAKF,WAAAV,2BAAA;AAAA,MAACwD,aAAA;AAAA,MAAA;AAAA,QACC,SAAQ;AAAA,QACR,MAAK;AAAA,QACL,SAAS,CAAC,MAAsB;AAC9B,YAAE,eAAe;AAEjB,mCAAyB,GAAG,KAAK;AAAA,QACnC;AAAA,QAEC,UAAc,cAAA;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IACH;AAAA,EAAA;AAIA,MAAA,oBAAoB,iBAAiB,CAAC,cAAc;AAEpD,WAAAxD,2BAAA;AAAA,MAACwD,aAAA;AAAA,MAAA;AAAA,QACC,SAAQ;AAAA,QACR,MAAK;AAAA,QACL,SAAS,CAAC,MAAsB;AAC9B,YAAE,eAAe;AAEH,wBAAA;AACd,yBAAe,GAAG,KAAK;AAAA,QACzB;AAAA,QAEC,UAAc,cAAA;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IACH;AAAA,EAAA;AAIA,MAAA,oBAAoB,iBAAiB,cAAc;AACrD,WAEIxD,+BAAAG,WAAAA,UAAA,EAAA,UAAAH,2BAAA;AAAA,MAACwD,aAAA;AAAA,MAAA;AAAA,QACC,SAAQ;AAAA,QACR,MAAK;AAAA,QACL,SAAS,CAAC,MAAsB;AAC9B,YAAE,eAAe;AAEjB,2BAAiB,GAAG,IAAI;AAAA,QAC1B;AAAA,QACA,0CAAY9C,MAAK,MAAA,EAAA;AAAA,QAEhB,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,2CAA2C;AAAA,UACvD,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IAAA,GAiBL;AAAA,EAAA;AAIJ,MAAI,oBAAoB,sBAAsB;AAC5C,QAAI,wBAAwB;AAExB,aAAAV,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,SAAQ;AAAA,UACR,MAAK;AAAA,UACL,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,0CAA8B,GAAG,IAAI;AAAA,UACvC;AAAA,UAEC,yCACG,cAAc;AAAA,YACZ,IAAI,QAAQ,iCAAiC;AAAA,YAC7C,gBAAgB;AAAA,UACjB,CAAA,IACD,cAAc;AAAA,YACZ,IAAI,QAAQ,8BAA8B;AAAA,YAC1C,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACP;AAAA,IAAA;AAKF,WAAA1D,2BAAA,KAACiC,aAAK,MAAA,EAAA,KAAK,GACT,UAAA;AAAA,MAAA/B,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,SAAQ;AAAA,UACR,MAAK;AAAA,UACL,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,0CAA8B,GAAG,IAAI;AAAA,UACvC;AAAA,UACA,0CAAY9C,MAAK,MAAA,EAAA;AAAA,UAEhB,iDACG,cAAc;AAAA,YACZ,IAAI,QAAQ,kDAAkD;AAAA,YAC9D,gBAAgB;AAAA,UACjB,CAAA,IACD,cAAc;AAAA,YACZ,IAAI,QAAQ,uBAAuB;AAAA,YACnC,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACP;AAAA,MACAV,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,SAAQ;AAAA,UACR,MAAK;AAAA,UACL,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEH,0BAAA;AACd,0CAA8B,GAAG,KAAK;AAAA,UACxC;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,GACF;AAAA,EAAA;AAIJ,MAAI,oBAAoB,CAAC,wBAAwB,CAAC,eAAe;AAE7D,WAAA1D,2BAAA,KAACiC,aAAK,MAAA,EAAA,KAAK,GACT,UAAA;AAAA,MAAA/B,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAM,qBAAqB,WAAW;AAAA,UACtC,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,kCAAsB,GAAG,IAAI;AAAA,UAC/B;AAAA,UACA,0CAAY9C,MAAK,MAAA,EAAA;AAAA,UAEhB,UAAc,cAAA;AAAA,YACb,IAAI,QAAQ,uBAAuB;AAAA,YACnC,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACH;AAAA,MACAV,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAM,qBAAqB,WAAW;AAAA,UACtC,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEH,0BAAA;AACd,kCAAsB,GAAG,KAAK;AAAA,UAChC;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,GACF;AAAA,EAAA;AAIJ,MAAI,oBAAoB;AAEpB,WAAA1D,2BAAA,KAACiC,aAAK,MAAA,EAAA,KAAK,GACR,UAAA;AAAA,MAAA,CAAC,yBAEEjC,2BAAAA,KAAAK,WAAA,UAAA,EAAA,UAAA;AAAA,QAAAH,2BAAA;AAAA,UAACwD,aAAA;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,CAAC,MAAsB;AAC9B,gBAAE,eAAe;AACC,gCAAA;AAAA,YACpB;AAAA,YAEC,UAAc,cAAA;AAAA,cACb,IAAI;AAAA,cACJ,gBAAgB;AAAA,YACjB,CAAA;AAAA,UAAA;AAAA,QACH;AAAA,QACAxD,2BAAA;AAAA,UAACwD,aAAA;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,CAAC,MAAsB;AAC9B,gBAAE,eAAe;AAEjB,sCAAwB,GAAG,KAAK;AAAA,YAClC;AAAA,YAEC,UAAc,cAAA;AAAA,cACb,IAAI;AAAA,cACJ,gBAAgB;AAAA,YACjB,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MACH,GACF;AAAA,MAED,yBACCxD,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,sCAA0B,GAAG,IAAI;AAAA,UACnC;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,GAEJ;AAAA,EAAA;AAIJ,MAAI,kBAAkB;AAElB,WAAA1D,2BAAA,KAACiC,aAAK,MAAA,EAAA,KAAK,GACR,UAAA;AAAA,MAAA,CAAC,uBAEEjC,2BAAAA,KAAAK,WAAA,UAAA,EAAA,UAAA;AAAA,QAAAH,2BAAA;AAAA,UAACwD,aAAA;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,CAAC,MAAsB;AAC9B,gBAAE,eAAe;AACD,8BAAA;AAAA,YAClB;AAAA,YAEC,UAAc,cAAA;AAAA,cACb,IAAI;AAAA,cACJ,gBAAgB;AAAA,YACjB,CAAA;AAAA,UAAA;AAAA,QACH;AAAA,QACAxD,2BAAA;AAAA,UAACwD,aAAA;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,CAAC,MAAsB;AAC9B,gBAAE,eAAe;AAEjB,oCAAsB,GAAG,KAAK;AAAA,YAChC;AAAA,YAEC,UAAc,cAAA;AAAA,cACb,IAAI;AAAA,cACJ,gBAAgB;AAAA,YACjB,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MACH,GACF;AAAA,MAED,uBACCxD,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,oCAAwB,GAAG,IAAI;AAAA,UACjC;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,GAEJ;AAAA,EAAA;AAIJ,MAAI,mBAAmB;AAEnB,WAAA1D,2BAAA,KAACiC,aAAK,MAAA,EAAA,KAAK,GACT,UAAA;AAAA,MAAA/B,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AACjB,gBAAI,cAAc;AAChB,6BAAe,YAAY;AAAA,YAAA;AAAA,UAE/B;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACH;AAAA,MACAxD,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,iCAAqB,CAAC;AAAA,UACxB;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,GACF;AAAA,EAAA;AAIJ,MAAI,oBAAoB;AAEpB,WAAA1D,2BAAA,KAACiC,aAAK,MAAA,EAAA,KAAK,GACT,UAAA;AAAA,MAAA/B,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAM,qBAAqB,WAAW;AAAA,UACtC,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEjB,6CAAiC,GAAG,IAAI;AAAA,UAC1C;AAAA,UACA,0CAAY9C,MAAK,MAAA,EAAA;AAAA,UAEhB,UAAc,cAAA;AAAA,YACb,IAAI,QAAQ,uBAAuB;AAAA,YACnC,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACH;AAAA,MACAV,2BAAA;AAAA,QAACwD,aAAA;AAAA,QAAA;AAAA,UACC,MAAM,qBAAqB,WAAW;AAAA,UACtC,SAAQ;AAAA,UACR,SAAS,CAAC,MAAsB;AAC9B,cAAE,eAAe;AAEH,0BAAA;AACd,6CAAiC,GAAG,KAAK;AAAA,UAC3C;AAAA,UAEC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACH,GACF;AAAA,EAAA;AAIG,SAAA;AACT;AC5aO,MAAM,kBAAkB,CAAC;AAAA,EAC9B,aAAa;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ;AAAA,EACA,iBAAiB;AAAA,EACjB,eAAe;AACjB,MAA4B;AACpB,QAAA,EAAE,cAAc,IAAItE,kBAAQ;AAC5B,QAAA,EAAE,aAAa,IAAI,eAAe;AAClC,QAAA,EAAE,oBAAoB,IAAI,uBAAuB;AAEvD,MAAI,OAAmB;AACvB,MAAI,UAAoB,CAAC;AAEnB,QAAA,SAAS,eAAe,SAAS,IAAI,SAAS,KAAK,eAAe,SAAS,KAAK;AAChF,QAAA,cAAc,QAAQ,OAAO;AAEnC,MAAI,cAAc,eAAe;AACxB,WAAA;AAAA,EAAA;AAGT,MAAI,CAAC,aAAa,cAAc,EAAE,SAAS,aAAa,EAAE,GAAG;AACpD,WAAA;AAAA,EAAA;AAGT,QAAM,uBAAuB,CAAC,aAAa,aAAa,EAAE,SAAS,aAAa,EAAE;AAElF,MAAI,sBAAsB;AACxB,QAAI,WAAW,QAAQ,8BAA8B,UAAU,EAAE;AAEjE,QAAI,cAAc,eAAe;AACpB,iBAAA,QAAQ,aAAa,eAAe,gBAAgB;AAAA,IAAA;AAGjE,QAAI,eAAe,QAAQ;AACzB,iBAAW,QAAQ,uBAAuB;AAAA,IAAA;AAG5C,WACGc,2BAAA,IAAAyC,aAAA,MAAM,QAAN,EACC,0CAACV,aAAAA,MACC,EAAA,UAAA;AAAA,MAAA/B,+BAACQ,aAAAA,KACC,EAAA,UAAAR,2BAAA,IAAC,eAAc,EAAA,MAAM,KAAM,CAAA,GAC7B;AAAA,qCACCQ,aAAAA,KAAI,EAAA,aAAa,GAChB,UAACR,2BAAA,IAAAyC,aAAA,MAAM,OAAN,EAAa,UAAA,cAAc,EAAE,IAAI,SAAY,GAAA,EAAE,MAAM,YAAY,CAAC,GAAE,EACvE,CAAA;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,EAAA;AAIM,YAAA;AAAA,IACR;AAAA,MACE,OAAO;AAAA,MACP,MAAM,EAAE,UAAU,QAAQ,YAAY,MAAM,MAAM,QAAQ,OAAO,YAAY;AAAA,IAAA;AAAA,EAEjF;AAEA,MAAI,cAAc,mBAAmB;AAC5B,WAAA,CAAC,aAAa,YAAY,EAAE,SAAS,SAAS,IAAI,cAAc,OAAO,OAAO;AAAA,EAAA;AAGvF,MAAI,cAAc,6BAA6B;AACtC,WAAA;AACP,YAAQ,KAAK,EAAE,OAAO,kBAAA,CAAmB;AAAA,EAAA;AAGvC,MAAA,cAAc,eAAe,cAAc,eAAe;AACrD,WAAA;AACP,YAAQ,KAAK,EAAE,OAAO,cAAA,CAAe;AAAA,EAAA;AAGvC,MAAI,cAAc,gBAAgB;AAChC,UAAM,QAAQ,cAAc;AAAA,MAC1B,IAAI,QAAQ,6BAA6B;AAAA,MACzC,gBAAgB;AAAA,IAAA,CACjB;AAED,cAAU,CAAC,EAAE,MAAA,GAAS,EAAE,OAAO,cAAc;AAAA,EAAA;AAG/C,wCACGA,aAAAA,MAAM,QAAN,EACC,UAAC3C,gCAAAiC,aAAAA,MAAA,EAAK,KAAK,GACR,UAAA;AAAA,IAAA;AAAA,IAEC/B,2BAAA;AAAA,MAACuC,aAAA;AAAA,MAAA;AAAA,QACC,cAAY,cAAc;AAAA,UACxB,IAAI,QAAQ,uBAAuB;AAAA,UACnC,gBAAgB;AAAA,QAAA,CACjB;AAAA,QACD,0CAAYkB,MAAU,WAAA,EAAA;AAAA,QACtB,SAAS,MAAM,oBAAoB,EAAE,WAAW,WAAW;AAAA,QAC3D,MAAK;AAAA,QACL,YAAY;AAAA,MAAA;AAAA,IACd;AAAA,IAEDzD,2BAAA,IAAA,eAAA,EAAc,MAAM,MAAM,aAAa,gBAAgB;AAAA,IAExDA,+BAAC0D,aAAAA,eAAY,OAAO,QAAQ,IAAI,CAAC,EAAE,YAAY,KAAK,EAAE,KAAK,GAAG,GAC3D,kBAAQ,IAAI,CAAC,EAAE,OAAO,KAAA,GAAQvB,QAAO,QAAQ;AAC5C,cAAQ7B,4BAAW,KAAK;AAExB,UAAI,CAAC,OAAO;AACH,eAAA;AAAA,MAAA;AAGT,YAAM,MAAM,GAAG,KAAK,IAAI6B,MAAK;AAE7B,UAAI,MAAM,UAAU;AACV,gBAAA,GAAG,KAAK,KAAK7B,oBAAW,QAAA,KAAK,QAAQ,CAAC,MAAMA,oBAAA,QAAW,KAAK,IAAI,CAAC;AAAA,MAAA;AAIzE,aAAAN,+BAAC2D,aAAAA,SAAM,WAAWxB,WAAU,IAAI,SAAS,GACtC,mBAD8C,GAEjD;AAAA,IAAA,CAEH,EACH,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ;ACvJO,MAAM,yBAAyB,CAAC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAuB;AACrB,UAAQ,WAAW;AAAA,IACjB,KAAK;AACI,aAAA;AAAA,QACL,wCACE,WAAW,SAAS,WAAW,IAAI,cAAc,QAAQ,gBAC3D;AAAA,MACF;AAAA,IACF,KAAK,aAAa;AACT,aAAA;AAAA,QACL,kCAAkC,UAAU,GAC1C,SAAS,UAAU,SAAS,QAAQ,eAAe,SAAS,UAAU,EACxE;AAAA,MACF;AAAA,IAAA;AAAA,IAEF,KAAK,eAAe;AACX,aAAA,QAAQ,kCAAkC,UAAU,EAAE;AAAA,IAAA;AAAA,IAE/D,KAAK;AACH,aAAO,QAAQ,gDAAgD;AAAA,IACjE;AACE,aAAO,QAAQ,gBAAgB;AAAA,EAAA;AAErC;AAaO,MAAM,qBAAqB,CAAC;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA+B;AACvB,QAAA,EAAE,cAAc,IAAIjD,kBAAQ;AAC5B,QAAA,YACJ,cAAc,gBACV,aAAa,YACb,EAAE,IAAI,QAAQ,aAAa,aAAa,EAAE,EAAE;AAGhD,SAAAY,gCAACiC,aAAAA,QAAK,WAAU,UAAS,YAAW,cAAa,eAAe,GAAG,KAAK,GACtE,UAAA;AAAA,IAAA/B,2BAAA,IAACiC,aAAW,YAAA,EAAA,KAAI,MAAK,SAAQ,QAC1B,UAAA;AAAA,MACC;AAAA,QACE,IAAI,uBAAuB;AAAA,UACzB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAAA,QACD,gBAAgB;AAAA,MAClB;AAAA,MACA;AAAA,QACE,MAAM,YAAY3B,oBAAA,QAAW,cAAc,SAAS,CAAC,IAAI;AAAA,QACzD,MAAMA,4BAAW,aAAa;AAAA,QAC9B;AAAA,MAAA;AAAA,IACF,GAEJ;AAAA,mCACC2B,aAAAA,YAAW,EAAA,SAAQ,MAAK,WAAU,cAChC,UAAc,cAAA;AAAA,MACb,IAAI,QAAQ,aAAa,aAAa,cAAc;AAAA,MACpD,gBAAgB;AAAA,IAAA,CACjB,EACH,CAAA;AAAA,EAAA,GACF;AAEJ;ACnGA,MAAM,kBAAwC;AAAA,EAC5C,OAAO2B,iBAAM;AAAA,EACb,MAAMA,iBAAM;AAAA,EACZ,SAASA,iBAAM;AAAA,EACf,WAAWA,iBAAM;AAAA,EACjB,WAAWA,iBAAM;AAAA,EACjB,YAAYA,iBAAM;AAAA,EAClB,SAASA,iBAAM;AAAA,EACf,YAAYA,iBAAM;AAAA,EAClB,MAAMA,iBAAM;AAAA,EACZ,MAAMA,iBAAM;AAAA,EACZ,MAAMA,iBAAM;AAAA,EACZ,WAAWA,iBAAM;AAAA,EACjB,OAAOA,iBAAM;AAAA,EACb,YAAYA,iBAAM;AAAA,EAClB,UAAUA,iBAAM;AAAA,EAChB,KAAKA,iBAAM;AAAA,EACX,MAAMA,iBAAM;AAAA,EACZ,aAAaA,iBAAM;AAAA,EACnB,aAAaA,iBAAM;AAAA,EACnB,UAAUA,iBAAM;AAAA,EAChB,OAAOA,iBAAM;AAAA,EACb,OAAOA,iBAAM;AAAA,EACb,OAAOA,iBAAM;AAAA,EACb,MAAMA,iBAAM;AAAA,EACZ,KAAKA,iBAAM;AAAA,EACX,UAAUA,iBAAM;AAAA,EAChB,SAASA,iBAAM;AAAA,EACf,WAAWA,iBAAM;AAAA,EACjB,MAAMA,iBAAM;AAAA,EACZ,OAAOA,iBAAM;AAAA,EACb,KAAKA,iBAAM;AAAA,EACX,QAAQA,iBAAM;AAAA,EACd,WAAWA,iBAAM;AAAA,EACjB,UAAUA,iBAAM;AAAA,EAChB,SAASA,iBAAM;AAAA,EACf,QAAQA,iBAAM;AAAA,EACd,OAAOA,iBAAM;AAAA,EACb,cAAcA,iBAAM;AAAA,EACpB,gBAAgBA,iBAAM;AAAA,EACtB,SAASA,iBAAM;AAAA,EACf,MAAMA,iBAAM;AAAA,EACZ,QAAQA,iBAAM;AAAA,EACd,KAAKA,iBAAM;AAAA,EACX,SAASA,iBAAM;AAAA,EACf,MAAMA,iBAAM;AAAA,EACZ,WAAWA,iBAAM;AAAA,EACjB,SAASA,iBAAM;AAAA,EACf,QAAQA,iBAAM;AAAA,EACd,QAAQA,iBAAM;AAAA,EACd,MAAMA,iBAAM;AAAA,EACZ,MAAMA,iBAAM;AAAA,EACZ,OAAOA,iBAAM;AAAA,EACb,MAAMA,iBAAM;AAAA,EACZ,WAAWA,iBAAM;AAAA,EACjB,SAASA,iBAAM;AAAA,EACf,WAAWA,iBAAM;AAAA,EACjB,OAAOA,iBAAM;AAAA,EACb,OAAOA,iBAAM;AAAA,EACb,aAAaA,iBAAM;AAAA,EACnB,QAAQA,iBAAM;AAAA,EACd,KAAKA,iBAAM;AAAA,EACX,WAAWA,iBAAM;AAAA,EACjB,OAAOA,iBAAM;AAAA,EACb,QAAQA,iBAAM;AAAA,EACd,WAAWA,iBAAM;AAAA,EACjB,MAAMA,iBAAM;AAAA,EACZ,MAAMA,iBAAM;AAAA,EACZ,OAAOA,iBAAM;AAAA,EACb,YAAYA,iBAAM;AAAA,EAClB,WAAWA,iBAAM;AAAA,EACjB,UAAUA,iBAAM;AAAA,EAChB,QAAQC,mBAAQ;AAAA,EAChB,SAASD,iBAAM;AAAA,EACf,YAAYA,iBAAM;AAAA,EAClB,SAASA,iBAAM;AAAA,EACf,MAAMA,iBAAM;AAAA,EACZ,OAAOA,iBAAM;AAAA,EACb,WAAWA,iBAAM;AAAA,EACjB,UAAUA,iBAAM;AAAA,EAChB,QAAQA,iBAAM;AAAA,EACd,OAAOA,iBAAM;AAAA,EACb,YAAYA,iBAAM;AAAA,EAClB,YAAYA,iBAAM;AAAA,EAClB,QAAQA,iBAAM;AAAA,EACd,OAAOA,iBAAM;AAAA,EACb,SAASA,iBAAM;AAAA,EACf,KAAKA,iBAAM;AAAA,EACX,QAAQA,iBAAM;AAAA,EACd,OAAOA,iBAAM;AAAA,EACb,MAAMA,iBAAM;AAAA,EACZ,MAAMA,iBAAM;AAAA,EACZ,UAAUA,iBAAM;AAAA,EAChB,QAAQA,iBAAM;AAAA,EACd,UAAUA,iBAAM;AAAA,EAChB,OAAOA,iBAAM;AAAA,EACb,SAASA,iBAAM;AAAA,EACf,YAAYA,iBAAM;AAAA,EAClB,QAAQA,iBAAM;AAAA,EACd,QAAQA,iBAAM;AAAA,EACd,UAAUA,iBAAM;AAAA,EAChB,QAAQA,iBAAM;AAAA,EACd,MAAMA,iBAAM;AAAA,EACZ,QAAQA,iBAAM;AAAA,EACd,QAAQA,iBAAM;AAAA,EACd,OAAOA,iBAAM;AAAA,EACb,cAAcA,iBAAM;AAAA,EACpB,WAAWA,iBAAM;AAAA,EACjB,OAAOA,iBAAM;AAAA,EACb,MAAMA,iBAAM;AAAA,EACZ,OAAOA,iBAAM;AAAA,EACb,eAAeA,iBAAM;AAAA,EACrB,KAAKA,iBAAM;AAAA,EACX,YAAYA,iBAAM;AAAA,EAClB,WAAWA,iBAAM;AAAA,EACjB,SAASA,iBAAM;AAAA,EACf,OAAOA,iBAAM;AAAA,EACb,SAASC,mBAAQ;AAAA,EACjB,SAASD,iBAAM;AAAA,EACf,WAAWA,iBAAM;AAAA,EACjB,MAAMA,iBAAM;AAAA,EACZ,YAAYA,iBAAM;AAAA,EAClB,UAAUA,iBAAM;AAAA,EAChB,MAAMA,iBAAM;AAAA,EACZ,YAAYA,iBAAM;AAAA,EAClB,OAAOA,iBAAM;AACf;AC5GA,MAAM,oBAAoBhE,wBAAOmC,iBAAI;AAAA;AAAA,MAE/BmB,6BAAiB,CAAA;AAAA,qBACF,CAAC,EAAE,YAAY,MAAM,YAAY;AAAA,wBAC9B,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAc9D,MAAM,WAAW,CAAC,EAAE,SAAS,MAAM,UAAU,YAAY,gBAA+B;AAChF,QAAA,OAAO,gBAAgB,OAAO;AAGlC,SAAAlD,2BAAA,IAACW,aAAM,MAAA,MAAN,EAAW,MAAY,UAAU,OAChC,UAAAb,2BAAAA,KAACa,aAAAA,MAAM,OAAN,EACC,UAAA;AAAA,IAAAb,gCAACgE,aAAAA,gBACE,EAAA,UAAA;AAAA,MAAA;AAAA,MACD9D,2BAAA;AAAA,QAACW,aAAAA,MAAM;AAAA,QAAN;AAAA,UACC,MAAK;AAAA,UACL,SAAS;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP,gBAAc;AAAA,QAAA;AAAA,MAAA;AAAA,IAChB,GACF;AAAA,IACAX,2BAAA;AAAA,MAAC+B,aAAA;AAAA,MAAA;AAAA,QACC,SAAS;AAAA,QACT,QAAO;AAAA,QACP,WAAS;AAAA,QACT,YAAY,aAAa,eAAe;AAAA,QAExC,UAAC/B,2BAAA,IAAA,MAAA,EAAK,MAAM,aAAa,eAAe,aAAc,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACxD,EAAA,CACF,EACF,CAAA;AAEJ;AASa,MAAA,aAAa,CAAC,EAAE,WAAW,MAAM,UAAU,QAAQ,SAA0B;AAClF,QAAA,EAAE,cAAc,IAAId,kBAAQ;AAClC,QAAM,CAAC,YAAY,aAAa,IAAIE,MAAAA,SAAS,KAAK;AAClD,QAAM,CAAC,QAAQ,SAAS,IAAIA,MAAAA,SAAS,EAAE;AACjC,QAAA,WAAW,OAAO,KAAK,eAAe;AAC5C,QAAM,CAAC,OAAO,QAAQ,IAAIA,MAAAA,SAAS,QAAQ;AACrC,QAAA,gBAAgB2E,aAAO,IAAI;AAC3B,QAAA,eAAeA,aAAO,IAAI;AAEhC,QAAM,eAAe,MAAM;AACzB,kBAAc,CAAC,UAAU;AAAA,EAC3B;AAEM,QAAA,iBAAiB,CAAC,EAAE,QAAQ,EAAE,OAAAlB,OAAAA,QAA6C;AAC/E,cAAUA,MAAK;AACf,aAAS,MAAM,SAAS,OAAO,CAAC,SAAS,KAAK,YAAY,EAAE,SAASA,OAAM,YAAY,CAAC,CAAC,CAAC;AAAA,EAC5F;AAEA,QAAM,gBAAgB,MAAM;AACb,iBAAA;AACb,cAAU,EAAE;AACZ,aAAS,QAAQ;AAAA,EACnB;AAEA,QAAM,qBAAqB,MAAM;AAC/B,aAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,GAAA,GAAM;AAAA,EAC1C;AAEAmB,QAAAA,UAAU,MAAM;AACd,QAAI,YAAY;AACb,mBAAa,SAAyC,MAAM;AAAA,IAAA;AAAA,EAC/D,GACC,CAAC,UAAU,CAAC;AAEf,SAEIlE,2BAAA,KAAAK,qBAAA,EAAA,UAAA;AAAA,IAAAL,2BAAA,KAACiC,aAAK,MAAA,EAAA,gBAAe,iBAAgB,eAAe,GAClD,UAAA;AAAA,MAAC/B,2BAAA,IAAAiC,aAAA,YAAA,EAAW,SAAQ,MAAK,YAAW,QAAO,WAAU,cAAa,KAAI,SACnE,UAAc,cAAA,SAAS,EAC1B,CAAA;AAAA,MACAnC,2BAAAA,KAACiC,aAAAA,MAAK,EAAA,KAAK,GACR,UAAA;AAAA,QACC,aAAA/B,2BAAA;AAAA,UAACiE,aAAA;AAAA,UAAA;AAAA,YACC,KAAK;AAAA,YACL,MAAK;AAAA,YACL,aAAa,cAAc;AAAA,cACzB,IAAI,QAAQ,wCAAwC;AAAA,cACpD,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,QAAQ,MAAM;AACZ,kBAAI,CAAC,QAAQ;AACE,6BAAA;AAAA,cAAA;AAAA,YAEjB;AAAA,YACA,UAAU;AAAA,YACV,OAAO;AAAA,YACP,SAAS;AAAA,YACT,YAAY,cAAc;AAAA,cACxB,IAAI,QAAQ,+BAA+B;AAAA,cAC3C,gBAAgB;AAAA,YAAA,CACjB;AAAA,YAEA,UAAc,cAAA;AAAA,cACb,IAAI,QAAQ,qCAAqC;AAAA,cACjD,gBAAgB;AAAA,YACjB,CAAA;AAAA,UAAA;AAAA,QAAA,IAGHjE,2BAAA;AAAA,UAACkE,aAAA;AAAA,UAAA;AAAA,YACC,KAAK;AAAA,YACL,SAAS;AAAA,YACT,aAAa;AAAA,YACb,OAAO,cAAc;AAAA,cACnB,IAAI,QAAQ,gCAAgC;AAAA,cAC5C,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,SAAQ;AAAA,YAER,yCAACC,MAAAA,QAAO,CAAA,CAAA;AAAA,UAAA;AAAA,QACV;AAAA,QAED,SACCnE,2BAAA;AAAA,UAACoE,aAAA;AAAA,UAAA;AAAA,YACC,OAAO,cAAc;AAAA,cACnB,IAAI,QAAQ,2BAA2B;AAAA,cACvC,gBAAgB;AAAA,YAAA,CACjB;AAAA,YAED,UAAApE,2BAAA;AAAA,cAACkE,aAAA;AAAA,cAAA;AAAA,gBACC,SAAS;AAAA,gBACT,aAAa;AAAA,gBACb,OAAO,cAAc;AAAA,kBACnB,IAAI,QAAQ,0BAA0B;AAAA,kBACtC,gBAAgB;AAAA,gBAAA,CACjB;AAAA,gBACD,SAAQ;AAAA,gBAER,yCAACG,MAAAA,OAAM,CAAA,CAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UACT;AAAA,QAAA;AAAA,MACF,EAEJ,CAAA;AAAA,IAAA,GACF;AAAA,IACArE,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAS;AAAA,QACT,SAAS;AAAA,QACT,YAAW;AAAA,QACX,WAAS;AAAA,QACT,MAAK;AAAA,QACL,KAAK;AAAA,QACL,WAAU;AAAA,QACV,UAAS;AAAA,QACT,WAAU;AAAA,QAET,gBAAM,SAAS,IACd,MAAM,IAAI,CAAC,YACTA,2BAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC;AAAA,YACA;AAAA,YACA;AAAA,YACA,YAAY,YAAY;AAAA,YACxB,WAAW;AAAA,cACT;AAAA,gBACE,IAAI,QAAQ,uBAAuB;AAAA,gBACnC,gBAAgB;AAAA,cAClB;AAAA,cACA,EAAE,MAAM,QAAQ;AAAA,YAAA;AAAA,UAClB;AAAA,UAXK;AAAA,QAAA,CAaR,IAEDA,2BAAAA,IAACQ,aAAAA,KAAI,EAAA,SAAS,GAAG,MAAM,GACrB,UAACR,2BAAAA,IAAAiC,aAAAA,YAAA,EAAW,SAAQ,SAAQ,WAAU,cAAa,WAAU,UAC1D,UAAc,cAAA;AAAA,UACb,IAAI,QAAQ,6BAA6B;AAAA,UACzC,gBAAgB;AAAA,QACjB,CAAA,EACH,CAAA,EACF,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAEJ,GACF;AAEJ;ACnMO,MAAM,aAAa,CAAC;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAuB;AACf,QAAA,EAAE,cAAc,IAAI/C,kBAAQ;AAC5B,QAAA,cAAc6E,aAAO,QAAQ;AAC7B,QAAA,cAAc,cAAc,eAAe;AAEjDC,QAAAA,UAAU,MAAM;AACd,QAAI,aAAa;AACTnB,YAAAA,SAAQyB,mBAAW,WAAW;AAEhC,UAAA;AACI,cAAA,SAASC,mBAAAA,QAAU1B,QAAO,CAAC;AACrB,oBAAA,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAO,OAAA,GAAU;AAAA,eAChD,KAAK;AACA,oBAAA,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAAA,OAAAA,GAAS;AAAA,MAAA;AAAA,IACjD,OACK;AACO,kBAAA,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAO,GAAA,GAAM;AAAA,IAAA;AAAA,EACrD,GACC,CAAC,aAAa,IAAI,CAAC;AAEhB,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AACnF,QAAM,OAAO,cACT;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AACE,QAAA,QAAQ,cAAc,SAAS;AAErC,yCACGlC,aAAM,MAAA,MAAN,EAAW,OAAO,cAAc,MAAY,MAC3C,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACnBX,2BAAA,IAAAoD,aAAA,WAAA,EAAU,UAAoB,OAAO,SAAS,IAAI;AAAA,IACnDpD,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,EAAA,GACf;AAEJ;ACtEa,MAAA,iBAAiB,CAAC,UAAqC;AAClE,MAAI,iBAAiB,QAAQ,YAAY,KAAK,GAAG;AACxC,WAAA;AAAA,EAAA;AAGT,MAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AACpD,UAAA,OAAO,IAAI,KAAK,KAAK;AACvB,QAAA,YAAY,IAAI,GAAG;AACd,aAAA;AAAA,IAAA;AAAA,EACT;AAEJ;AAEA,MAAM,cAAc,CAAC,SAAwB,CAAC,MAAM,KAAK,SAAS;ACAlE,MAAM,gBAAgB,CAAC,SAAyB;AAC9C,QAAM,CAAC,OAAO,OAAO,IAAI,KAAK,MAAM,GAAG;AAChC,SAAA,GAAG,KAAK,IAAI,OAAO;AAC5B;AAGA,MAAM,4BAA4B,CAAC,SAAyB;AACnD,SAAA,KAAK,MAAM,GAAG,EAAE,WAAW,IAAI,GAAG,IAAI,YAAY;AAC3D;AAEA,MAAM,qBAAqB,CAAC,UAAuC;AACjE,MAAI,CAAC,MAAO;AACL,SAAA,MAAM,MAAM,GAAG,EAAE,SAAS,IAAI,cAAc,KAAK,IAAI;AAC9D;AAEA,MAAM,sBAAsB,CAAC,UAAuC;AAC9D,MAAA,CAAC,MAAc,QAAA;AACnB,SAAO,0BAA0B,KAAK;AACxC;AAEO,MAAM,mBAAmB,CAAC,EAAE,YAAkD;AAC7E,QAAA,qBAAqB,mBAAmB,KAAK;AAE5C,SAAA;AACT;AAEO,MAAM,wBAAwB,CACnC,UACA,MACA,MACA,SACS;AACH,QAAA,sBAAsB,oBAAoB,IAAI;AAE3C,WAAA;AAAA,IACP,QAAQ;AAAA,MACN;AAAA,MACA,OAAO;AAAA,MACP;AAAA,IAAA;AAAA,EACF,CACD;AACH;AC8BA,MAAM,eAAe,CAAC;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAAiC,WAAU,CAAC;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAAyB;AACjB,QAAA,EAAE,cAAc,IAAI1D,kBAAQ;AAG5B,QAAA,oBAAoB,CACxBsF,YACA,QACG;AACH,QAAI,CAACA,WAAW;AAEZ,QAAA,QAAQ,eAAe,OAAOA,YAAW;AAC3C,aAAOA,WAAU,GAAG;AAAA,IAAA;AAGlB,QAAA,QAAQ,eAAe,OAAOA,YAAW;AAC3C,aAAOA,WAAU,GAAG;AAAA,IAAA;AAGlB,QAAA,QAAQ,SAAS,OAAOA,YAAW;AACrC,aAAOA,WAAU,GAAG;AAAA,IAAA;AAGlB,QAAA,QAAQ,SAAS,OAAOA,YAAW;AACrC,aAAOA,WAAU,GAAG;AAAA,IAAA;AAAA,EAExB;AAEM,QAAA,EAAE,KAAK,IAAI,aAAa;AAAA,IAC5B;AAAA,IACA,aAAa;AAAA,MACX,WAAW,kBAAkB,WAAW,WAAW;AAAA,MACnD,WAAW,kBAAkB,WAAW,WAAW;AAAA,MACnD,KAAK,kBAAkB,WAAW,KAAK;AAAA,MACvC,KAAK,kBAAkB,WAAW,KAAK;AAAA,IACzC;AAAA,IACA,MAAM,WAAW,QAAQ;AAAA,EAAA,CAC1B;AAED,QAAM,CAAC,cAAc,eAAe,IAAIxF,iBAAM,SAAS,KAAK;AAE5D,QAAM,cAAc,eAAe,aAAa,IAAI,IAAI;AAIxD,QAAM,QAAQ,gBAAgB;AAS9B,QAAM,+BAA+B,SAAS;AAE9C,WAAS,gBAAgByF,QAAgD;AACvE,QAAI,CAACA,QAAO;AACH,aAAA;AAAA,IAAA;AAGL,QAAA,OAAOA,WAAU,UAAU;AAC7B,aAAO,cAAc,EAAE,IAAIA,QAAO,gBAAgBA,QAAO;AAAA,IAAA;AAG3D,UAAM,SAAS;AAAA,MACb,GAAGA,OAAM;AAAA,IACX;AAEO,WAAA;AAAA,MACL;AAAA,QACE,IAAIA,OAAM;AAAA,QACV,gBAAgBA,QAAO,kBAAkBA,OAAM;AAAA,MACjD;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAGI,QAAA,eAAe,gBAAgB,KAAK,KAAK;AAE/C,MAAI,aAAa;AAEb,WAAAzE,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,gBAAgB;AAAA,QACvB;AAAA,QACA;AAAA,QACA,SAAA4C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,EAAA;AAIE,QAAA,QAAQ,UAAU,KACpB;AAAA,IACE,EAAE,IAAI,UAAU,IAAI,gBAAgB,UAAU,eAAe;AAAA,IAC7D,EAAE,GAAG,UAAU,OAAO;AAAA,EAAA,IAExB;AAEJ,QAAM,uBAAuB,cACzB;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AAEJ,QAAM,eAAe,MAAM;AACzB,YAAQ,MAAM;AAAA,MACZ,KAAK,QAAQ;AAET,eAAA5C,2BAAA;AAAA,UAAC0E,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA,UAAU,CAAC,SAAS;AAEZ7B,oBAAAA,SACJ,aAAa,cAAc,aAAa,CAAC,WAAW,YAAY,CAAC,KAAK,SAClE,OACA;AACG,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAAA,OAAM,KAAK,KAAK;AAAA,YAC7C;AAAA,YACA,WAAU;AAAA,YACV,WAAU;AAAA,UAAA;AAAA,QACZ;AAAA,MAAA;AAAA,MAGJ,KAAK,QAAQ;AAET,eAAA7C,2BAAA;AAAA,UAAC2E,aAAA;AAAA,UAAA;AAAA,YACC,SAAS,iBAAiB,OAAO,OAAO,gBAAgB;AAAA,YACxD;AAAA,YACA,UAAU,cAAc;AAAA,cACtB,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,SAAS,cAAc;AAAA,cACrB,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,UAAU,CAAC,MAAM;AACN,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,EAAE,OAAO,QAAQ,GAAG;AAAA,YAAA;AAAA,UACxD;AAAA,QACF;AAAA,MAAA;AAAA,MAGJ,KAAK,YAAY;AAEb,eAAA3E,2BAAA;AAAA,UAACmD,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA,iBAAiB,CAACN,WAAU;AAC1B,uBAAS,EAAE,QAAQ,EAAE,MAAM,OAAAA,OAAAA,GAAS;AAAA,YACtC;AAAA,YACA,SAAS,QAAQ,KAAK;AAAA,YAErB,UAAA;AAAA,UAAA;AAAA,QACH;AAAA,MAAA;AAAA,MAGJ,KAAK,YAAY;AACT,cAAA,YAAY,eAAe,KAAK;AAEpC,eAAA7C,2BAAA;AAAA,UAAC4E,aAAA;AAAA,UAAA;AAAA,YACC,YAAY,cAAc,EAAE,IAAI,cAAc,gBAAgB,SAAS;AAAA,YACvE;AAAA,YACA,UAAU,CAAC,SAAS;AAElB,oBAAM,gBAAgB,OAAO,KAAK,YAAgB,IAAA;AAEzC,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,eAAe,KAAA,GAAQ;AAAA,YAC3D;AAAA,YACA,SAAS,MAAM,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,MAAM,KAAK,GAAG;AAAA,YAC/D,aAAa;AAAA,YACb,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,KAAK,QAAQ;AACL,cAAA,YAAY,eAAe,KAAK;AAEpC,eAAA5E,2BAAA;AAAA,UAAC6E,aAAA;AAAA,UAAA;AAAA,YACC,YAAY,cAAc,EAAE,IAAI,cAAc,gBAAgB,SAAS;AAAA,YACvE;AAAA,YACA,UAAU,CAAC,SAAS;AACT,uBAAA;AAAA,gBACP,QAAQ;AAAA,kBACN;AAAA,kBACA,OAAO,OAAOC,2BAAU,MAAM,EAAE,gBAAgB,OAAQ,CAAA,IAAI;AAAA,kBAC5D;AAAA,gBAAA;AAAA,cACF,CACD;AAAA,YACH;AAAA,YACA,SAAS,MAAM,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,MAAM,KAAK,GAAG;AAAA,YAC/D,aAAa;AAAA,YACb,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,KAAK,UAAU;AAEX,eAAA9E,2BAAA;AAAA,UAACqD,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA,eAAe,CAACR,WAAU;AACf,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAAA,QAAO,KAAA,GAAQ;AAAA,YAC5C;AAAA,YACA,aAAa;AAAA,YACb;AAAA,YACA;AAAA,UAAA;AAAA,QACF;AAAA,MAAA;AAAA,MAGJ,KAAK,SAAS;AAEV,eAAA7C,2BAAA;AAAA,UAACoD,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA,UAAU,CAAC,MAAM;AACN,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,EAAE,OAAO,OAAO,KAAK,GAAG;AAAA,YAC5D;AAAA,YACA,aAAa;AAAA,YACb,MAAK;AAAA,YACL,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,UAAU;AAEX,eAAApD,2BAAA;AAAA,UAACoD,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA,UAAU,CAAC,MAAM;AACN,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,EAAE,OAAO,OAAO,KAAK,GAAG;AAAA,YAC5D;AAAA,YACA,aAAa;AAAA,YACb,MAAK;AAAA,YACL,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,KAAK,YAAY;AAEb,eAAApD,2BAAA;AAAA,UAACoD,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA,WACEpD,2BAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,cAAY,cAAc;AAAA,kBACxB,IAAI;AAAA,kBACJ,gBAAgB;AAAA,gBAAA,CACjB;AAAA,gBACD,SAAS,MAAM;AACG,kCAAA,CAAC,SAAS,CAAC,IAAI;AAAA,gBACjC;AAAA,gBACA,OAAO;AAAA,kBACL,QAAQ;AAAA,kBACR,SAAS;AAAA,kBACT,YAAY;AAAA,gBACd;AAAA,gBACA,MAAK;AAAA,gBAEJ,UAAA,8CAAgB+E,MAAAA,KAAI,EAAA,MAAK,aAAa,CAAA,IAAK/E,2BAAAA,IAACgF,MAAAA,YAAW,EAAA,MAAK,aAAa,CAAA;AAAA,cAAA;AAAA,YAC5E;AAAA,YAEF,UAAU,CAAC,MAAM;AACN,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,EAAE,OAAO,OAAO,KAAK,GAAG;AAAA,YAC5D;AAAA,YACA,aAAa;AAAA,YACb,MAAM,eAAe,SAAS;AAAA,YAC9B,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,KAAK,UAAU;AAEX,eAAAhF,2BAAA;AAAA,UAAC8C,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA,UAAU,CAACD,WAAU;AACV,uBAAA,EAAE,QAAQ,EAAE,MAAM,OAAAA,QAAO,MAAM,SAAS,GAAG;AAAA,YACtD;AAAA,YACA,aAAa;AAAA,YACb;AAAA,YAEC,UAAQD,SAAA,IAAI,CAAC,EAAE,WAAW,EAAE,WAAAG,YAAW,UAAAkC,WAAU,OAAO,GAAG,KAAK,OAAApC,aAAY;AAEzE,qBAAA7C,2BAAA,IAACgD,aAA6B,oBAAA,EAAA,OAAOH,QAAO,UAAUoC,WAAU,QAC7D,UAAA,cAAclC,UAAS,EAAA,GADD,GAEzB;AAAA,YAEH,CAAA;AAAA,UAAA;AAAA,QACH;AAAA,MAAA;AAAA,MAGJ,KAAK,YAAY;AAEb,eAAA/C,2BAAA;AAAA,UAACkF,aAAA;AAAA,UAAA;AAAA,YACC;AAAA,YACA,UAAU,CAAC,UAAU,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,MAAM,OAAO,OAAO,QAAQ;AAAA,YACnF,aAAa;AAAA,YACb,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,KAAK,QAAQ;AACX,cAAM,iBAAiB,iBAAiB,EAAE,OAAO,UAAU,MAAM,MAAM;AAGrE,eAAAlF,2BAAA;AAAA,UAACmF,aAAA;AAAA,UAAA;AAAA,YACC,YAAY,cAAc,EAAE,IAAI,cAAc,gBAAgB,SAAS;AAAA,YACvE;AAAA,YACA,UAAU,CAAC,SAAS,sBAAsB,UAAU,MAAM,MAAM,IAAI;AAAA,YACpE,SAAS,MAAM,sBAAsB,UAAU,MAAM,MAAM,MAAS;AAAA,YACpE,OAAO;AAAA,UAAA;AAAA,QACT;AAAA,MAAA;AAAA,MAGJ,SAAS;AAKA,eAAAnF,+BAACoD,aAAAA,aAAU,UAAQ,MAAC,aAAY,iBAAgB,MAAK,QAAO,OAAM,GAAG,CAAA;AAAA,MAAA;AAAA,IAC9E;AAAA,EAEJ;AAGE,SAAAtD,2BAAA,KAACa,mBAAM,MAAN,EAAW,OAAO,cAAc,MAAY,MAAY,UACtD,UAAA;AAAA,IAAS,SAAA,4CAAcA,aAAAA,MAAM,OAAN,EAAY,QAAQ,aAAc,iBAAM,IAAiB;AAAA,IAChF,aAAa;AAAA,IACdX,+BAACW,aAAAA,MAAM,OAAN,EAAY;AAAA,IACbX,+BAACW,aAAAA,MAAM,MAAN,CAAW,CAAA;AAAA,EAAA,GACd;AAEJ;AAkBA,MAAM,eAAe,CAAC,EAAE,aAAa,aAAa,WAA8B;AACxE,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAE5B,QAAA,mBAAmB,MACvB,aAAa,KACT;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AAEN,QAAM,YAAY,MAAM;AACtB,UAAM,EAAE,SAAS,YAAY,UAAU,WAAW;AAClD,UAAM,QAAQ,cAAc;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAEK,UAAA,cAAc,OAAO,YAAY;AACjC,UAAA,cAAc,OAAO,YAAY;AACvC,UAAM,eAAe,eAAe;AACpC,UAAM,cAAc,eAAe;AAEnC,QAAI,CAAC,aAAa,MAAM,CAAC,aAAa;AAC7B,aAAA;AAAA,IAAA;AAGF,WAAA;AAAA,MACL;AAAA,QACE,IAAI;AAAA,QACJ,gBACE;AAAA,MACJ;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,KAAK;AAAA,QACL,aAAa,iBAAiB;AAAA,QAC9B,MAAM,OAAO,WAAW,cAAc,cAAc,MAAM,SAAS,MAAM,MAAM,IAAI;AAAA,QACnF,SAAS,eACL,cAAc;AAAA,UACZ,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA,IACD;AAAA,QACJ,IAAI,cAAec,2BAAAA,IAAA,MAAA,CAAG,CAAA,IAAK;AAAA,MAAA;AAAA,IAE/B;AAAA,EACF;AAEO,SAAA,EAAE,MAAM,YAAY;AAC7B;AAEA,MAAM,gBAAgB,CAAC;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACF,MAIM;AACA,MAAA,QAAQ,CAAC,cAAc,WAAW,QAAQ,EAAE,SAAS,IAAI,GAAG;AAC9D,WAAO,CAAC;AAAA,EAAA;AAEV,QAAM,WAAW,KAAK,IAAI,WAAW,GAAG,WAAW,CAAC;AAE7C,SAAA;AAAA,IACL,SAAS;AAAA,MACP,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAClB;AAAA,IACA,QAAQ;AAAA,MACN;AAAA,IAAA;AAAA,EAEJ;AACF;AAEA,MAAM,YAAY,CAAC,gBAA8B;AAC/C,MAAI,CAAC,aAAa;AAChB,WAAO,EAAE,SAAS,QAAW,SAAS,OAAU;AAAA,EAAA;AAGlD,QAAM,EAAE,WAAW,WAAW,KAAK,IAAQ,IAAA;AAEvC,MAAA;AACA,MAAA;AAEE,QAAA,YAAY,OAAO,GAAG;AACtB,QAAA,kBAAkB,OAAO,SAAS;AAExC,MAAI,CAAC,OAAO,MAAM,SAAS,GAAG;AAClB,cAAA;AAAA,EACD,WAAA,CAAC,OAAO,MAAM,eAAe,GAAG;AAC/B,cAAA;AAAA,EAAA;AAGN,QAAA,YAAY,OAAO,GAAG;AACtB,QAAA,kBAAkB,OAAO,SAAS;AAExC,MAAI,CAAC,OAAO,MAAM,SAAS,GAAG;AAClB,cAAA;AAAA,EACD,WAAA,CAAC,OAAO,MAAM,eAAe,GAAG;AAC/B,cAAA;AAAA,EAAA;AAGL,SAAA,EAAE,SAAS,QAAQ;AAC5B;AAOA,MAAM,uBAAuBhB,iBAAM,KAAK,cAAcO,iBAAAA,OAAO;ACrjBtD,MAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AACF,MAAiC;AAC/B,QAAM,EAAE,cAAc,uBAAuB,IAAI,eAAe;AAChE,QAAM,WAAW6F,WAAAA,YAAY;AAE7B,QAAM,iCAAiC,uBAAuB;AAAA,IAC5D;AAAA,EACF;AAEA,QAAM,EAAE,SAAS,MAAM,QAAQ,EAAE,YAAY,IAAI,EAAE,aAAa,UAAU,IACxE,eAAe,MAAM,KAAK,CAAC;AAE7B,QAAM,eACJ,CAAC;AAAA,IACC;AAAA,IACA,QAAAC;AAAAA,IACA;AAAA,IACA;AAAA,EAAA,MAOF,MAAM;AACJ,UAAM,kCAAkCA,UAAS,GAAGA,OAAM,IAAI,KAAK,KAAK;AAE/D,aAAA;AAAA,MACP,MAAMC,QAAA;AAAA,MACN,QAAQ;AAAA,QACN,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA,mCAAmC;AAAA,MAAA;AAAA,IACrC,CACD;AAAA,EACH;AAQA,SAAAxF,gCAACyF,aAAAA,KAAK,MAAL,EACC,UAAA;AAAA,IAACvF,2BAAAA,IAAA,aAAA,EAAa,aAAG,WAAW,IAAI,SAAS,UAAU,MAAM,MAAM,EAAE,GAAG,CAAA;AAAA,IACnEA,2BAAAA,IAAAuF,aAAAA,KAAK,SAAL,EAAa,QAAO,WAClB,UAA+B,+BAAA,IAAI,CAAC,EAAE,KAAK,OAAO,qBAAqB,QAAAF,QAAO,MAC5EvF,2BAAA,KAAAyF,aAAA,KAAK,MAAL,EAAoB,UAAU,aAAa,EAAE,KAAK,QAAAF,SAAQ,OAAO,oBAAqB,CAAA,GACpF,UAAA;AAAA,MAAA;AAAA,MAAM;AAAA,MACNA,WAAYvF,2BAAA,KAAAK,qBAAA,EAAA,UAAA;AAAA,QAAA;AAAA,QAAQkF;AAAAA,QAAO;AAAA,MAAA,EAAC,CAAA;AAAA,IAAA,EAFf,GAAA,GAGhB,CACD,EACH,CAAA;AAAA,EAAA,GACF;AAEJ;AAEA,MAAM,cAAczF,iBAAAA,OAAO2F,aAAA,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtDhC,MAAM,kBAAkB,CAAC;AAAA,EAC9B,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA,wCAAwC;AAAA,EACxC,SAAS;AAAA,EACT,QAAQ;AACV,MAA4B;AAC1B,yCACG/E,kBAAI,EAAA,YAAW,cAAa,WAAS,MAAC,aAAY,cACjD,UAAA;AAAA,IAACR,2BAAAA,IAAA+B,aAAAA,MAAA,EAAK,YAAY,SAAS,IAAI,GAAG,eAAe,SAAS,IAAI,GAAG,gBAAe,UAC7E,UACC,SAAA/B,2BAAA,IAACiC,2BAAW,SAAQ,MAAK,YAAW,QAAO,WAAU,cAClD,UAAA,OAAA,CACH,IAEAjC,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,MAAA;AAAA,IAAA,GAGN;AAAA,IACAA,2BAAAA,IAAC2C,aAAQ,SAAA,EAAA,YAAW,aAAa,CAAA;AAAA,IACjC3C,2BAAAA,IAACQ,aAAAA,KAAI,EAAA,SAAS,GACZ,UAAAR,2BAAA;AAAA,MAACwF;AAAAA,MAAA;AAAA,QACC;AAAA,QACA,OAAO,OAAO,MAAM;AAAA,QACpB,WAAW;AAAA,UACT,IAAI,QAAQ,8CAA8C;AAAA,UAC1D,gBAAgB;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAK;AAAA,QACL;AAAA,MAAA;AAAA,IAAA,EAEJ,CAAA;AAAA,EAAA,GACF;AAEJ;AC1DA,MAAM,UAAU5F,wBAAqBY,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAShB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAK9D,MAAM,cAAcZ,wBAA+BY,gBAAG;AAAA,gBACtC,CAAC,EAAE,OAAO,kBAAkB,MAAM,OAAO,cAAc,eAAe,UAAU,CAAC;AAAA;AAAA,MAE3F,CAAC,EAAE,OAAO,kBAAkB,MAAM,OAAO,cAAc,eAAe,YAAY,CAAC;AAAA,mBACtE,CAAC,EAAE,YAAY,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAQtC,CAAC,EAAE,OAAO,kBAAkB,MAAM,OAAO,cAAc,eAAe,YAAY,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQjG,MAAM,eAAeZ,wBAAsBmC,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AChB/C,MAAM,YAAY;AAAA,EAChB,QAAQ0D,MAAA;AAAA,EACR,UAAUC,MAAA;AAAA,EACV,WAAWC,MAAA;AAAA,EACX,WAAWC,MAAA;AAAA,EACX,YAAYC,MAAA;AAAA,EACZ,SAASC,MAAAA;AACX;AAWO,MAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAiC;AAC/B,QAAM,WAAWV,WAAAA,YAAY;AACvB,QAAA,EAAE,cAAc,IAAIlG,kBAAQ;AAElC,QAAM,EAAE,cAAc,aAAa,IAAI,eAAe;AACtD,QAAM,cAAc,CAAC,UAAU,YAAY,aAAa,aAAa,cAAc,SAAS;AACtF,QAAA,qBAAqB,CAAC,UAAU,SAAS;AACzC,QAAA,WACJ,qBAAqB,gBACjB6G,aAAI,QAAA,cAAc,CAAC,kBAAkB,UAAU,MAAM,GAAG,EAAE,IAC1D;AACA,QAAA,gBACJ,aAAa,mBAAmB,cAAc;AAGhD,QAAM,4BAA4B,iBAAiB;AAC7C,QAAA,cAAcA,qBAAI,cAAc,CAAC,QAAQ,UAAU,aAAa,GAAG,SAAS;AAC5E,QAAA,aAAa,4BACf,cACA;AACE,QAAA,cAAc,4BAChB,wCACA;AACJ,QAAM,qBAAqBxB,mBAAAA,QAAU,YAAY,iBAAiB,eAAe,IAAI,CAAC;AAChF,QAAA,sBAAsBwB,qBAAI,cAAc,CAAC,QAAQ,UAAU,qBAAqB,GAAG,IAAI;AAE7F,QAAM,sBAAsBxB,mBAAA;AAAA,IAC1B;AAAA,IACA,CAAC,cAAc,aAAa,aAAa,SAAS,EAAE,SAAS,YAAY,IAAI,IAAI;AAAA,EACnF;AAEA,MAAI,CAAC,cAAc;AACV,WAAA;AAAA,EAAA;AAGT,yCACGxC,aAAAA,MAAK,EAAA,OAAO,EAAE,MAAM,EACnB,GAAA,UAAA;AAAA,IAAC/B,2BAAAA,IAAA,SAAA,EACC,yCAAC+B,aAAK,MAAA,EAAA,aAAa,GAAG,cAAc,GAAG,YAAY,GAAG,gBAAe,UACnE,yCAACG,aAAkB,mBAAA,EAAA,SAAQ,UACzB,UAAClC,2BAAAA,IAAA+B,aAAAA,MAAA,EAAK,KAAK,GACR,UAAA,cAAc,IAAI,CAAC,aAAa;AACzB,YAAA,QAAQ,UAAU,QAAQ;AAChC,YAAM,YACJ,wBAAwB,QAAQ,oBAAoB,SAAS,QAAQ;AAGrE,aAAA/B,2BAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,KAAI;AAAA,UACJ,aAAa,iBAAiB;AAAA,UAC9B,UAAU,CAAC;AAAA,UAEX,SAAS,MAAM;AACb,gBAAI,WAAW;AACJ,uBAAA;AAAA,gBACP,MAAMgG,QAAA;AAAA,gBACN,QAAQ;AAAA,kBACN;AAAA,kBACA,mBAAmB;AAAA,kBACnB,OAAO;AAAA,gBAAA;AAAA,cACT,CACD;AAAA,YAAA;AAAA,UAEL;AAAA,UACA,SAAS;AAAA,UACT,MAAK;AAAA,UAEL,UAAAhG,2BAAA,IAAC,WAAW,QAAU;AAAA,QAAA;AAAA,QAhBjB;AAAA,MAiBP;AAAA,IAEH,CAAA,GACH,EACF,CAAA,EACF,CAAA,GACF;AAAA,IACAF,2BAAAA,KAAC,cAAa,EAAA,gBAAe,UAC3B,UAAA;AAAA,MAAAA,gCAACmC,aAAAA,YAAY,EAAA,UAAA;AAAA,QAAAgE,kBAAAA,QAAS,oBAAoB,EAAE,QAAQ,GAAA,CAAI;AAAA,QAAE;AAAA,MAAA,GAAM;AAAA,MAChEnG,2BAAAA,KAACmC,aAAAA,YAAW,EAAA,WAAU,cACnB,UAAA;AAAA,QAAA,cAAc,EAAE,IAAI,QAAQ,YAAY,YAAY,EAAE,GAAG;AAAA,QAAE;AAAA,MAAA,GAC9D;AAAA,MACAjC,+BAACiC,aAAAA,cAAY,UAASgE,kBAAAA,QAAA,qBAAqB,EAAE,QAAQ,GAAA,CAAI,EAAE,CAAA;AAAA,IAAA,EAC7D,CAAA;AAAA,EAAA,GACF;AAEJ;ACjHO,MAAM,WAAW,CAAC;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAqB;AACnB,QAAM,eAAeC,QAAAA,gBAAgB,aAAa,UAAU,aAAa,eAAe;AAExF,yCACGnE,aAAAA,MAAK,EAAA,OAAO,EAAE,UAAU,WACvB,GAAA,UAAA;AAAA,IAAA/B,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,QAAM;AAAA,QACN,QAAQ;AAAA,QACR,OAAO,YAAY,QAAQ;AAAA,QAC3B,MAAK;AAAA,QACL;AAAA,QACA,OAAO,cAAc,QAAQ;AAAA,MAAA;AAAA,IAC/B;AAAA,IACAA,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA,uCAAuC;AAAA,QACvC;AAAA,QACA,QAAQ,aAAa;AAAA,MAAA;AAAA,IACvB;AAAA,IACAA,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAU,CAAC,UAAU,SAAS,EAAE,SAAS,YAAa;AAAA,QACtD,OAAO,YAAY,mBAAmB;AAAA,QACtC,MAAK;AAAA,QACL;AAAA,QACA,uCAAuC;AAAA,QACvC,QAAQ,aAAa;AAAA,QACrB,OAAO,cAAc,mBAAmB;AAAA,MAAA;AAAA,IAAA;AAAA,EAC1C,GACF;AAEJ;AC9BO,MAAM,iBAAiB,CAAC;AAAA,EAC7B,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AACF,MAA2B;AACnB,QAAA,EAAE,cAAc,IAAId,kBAAQ;AAC5B,QAAA,EAAE,wBAAwB,IAAI,eAAe;AACnD,QAAM,CAAC,YAAY,aAAa,IAAIE,MAAAA,SAAS,uBAAuB;AAE9D,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AAC7E,QAAA,QAAQ,cAAc,SAAS;AAE/B,QAAA,eAAe,CAACyD,WAAe;AAC1B,aAAA,EAAE,QAAQ,EAAE,MAAM,OAAAA,QAAO,MAAM,kBAAkB,GAAG;AAAA,EAC/D;AAEM,QAAA,qBAAqB,CAACA,WAAe;AACzC,kBAAc,CAAC,SAAS,CAAC,GAAG,MAAMA,MAAK,CAAC;AACxC,iBAAaA,MAAK;AAAA,EACpB;AAEA,yCACGlC,aAAAA,MAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpBX,2BAAA;AAAA,MAACmG,aAAA;AAAA,MAAA;AAAA,QAGC,UAAU,CAAC,cAAc,CAAC;AAAA,QAC1B,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB;AAAA,QACA,WAAS;AAAA,QAER,UAAA,WAAW,IAAI,CAAC,aACfnG,2BAAAA,IAACoG,aAAAA,kBAA8B,OAAO,UACnC,UADkB,SAAA,GAAA,QAErB,CACD;AAAA,MAAA;AAAA,IACH;AAAA,IACApG,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,EAAA,GACf;AAEJ;AC/DA,MAAM,gBAAgB,CACpB,cACA,eACG;AACH,SAAO,WAAW,KAAK,CAAC,MAAM,EAAE,cAAc,YAAY;AAC5D;AAWO,MAAM,sBAAsB,CACjC,cACA,YACA,eAAe,MACZ;AACG,QAAA,YAAY,cAAc,cAAc,UAAU;AAGpD,MAAA,CAAC,aAAa,CAAC,UAAU,mBAAmB,UAAU,gBAAgB,WAAW,GAAG;AAC/E,WAAA;AAAA,EAAA;AAGT,MAAI,WAAW;AAGL,YAAA,gBAAgB,QAAQ,CAAC,UAAU;AAE3C,UAAM,QAAQ,oBAAoB,MAAM,WAAW,YAAY,eAAe,CAAC;AAE/E,QAAI,QAAQ,UAAU;AACT,iBAAA;AAAA,IAAA;AAAA,EACb,CACD;AAEM,SAAA;AACT;AAWa,MAAA,oBAAoB,CAC/B,WACA,eACG;AAQG,QAAA,WAAW,CAAC,kBAAmC,iBAAwC;AAC3F,UAAM,SAAS,CAAC;AAChB,WAAO,KAAK,YAAY;AAGpB,QAAA,CAAC,iBAAiB,kBAAkB;AAC/B,aAAA;AAAA,IAAA;AAIE,eAAA,aAAa,iBAAiB,kBAAkB;AACnD,YAAA,kBAAkB,cAAc,WAAW,UAAU;AAC3D,UAAI,iBAAiB;AACnB,eAAO,KAAK,GAAG,SAAS,iBAAiB,eAAe,CAAC,CAAC;AAAA,MAAA;AAAA,IAC5D;AAGK,WAAA;AAAA,EACT;AAEM,QAAA,cAAc,cAAc,WAAW,UAAU;AAEvD,MAAI,CAAC,aAAa;AACT,WAAA;AAAA,EAAA;AAET,QAAM,aAAa,KAAK,IAAI,GAAG,SAAS,aAAa,CAAC,CAAC;AAChD,SAAA;AACT;AC9DO,MAAM,kBAAkB,CAAC;AAAA,EAC9B,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA4B;AACpB,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAC5B,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AAC7E,QAAA,QAAQ,cAAc,SAAS;AAE/B,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,MACE,eAAe;AAEnB,QAAM,qBAAqB,CAAC,aAAa,YAAY,EAAE,SAAS,SAAS;AAEzE,MAAI0D,WAAoB,OAAO,QAAQ,2BAA2B,EAAE;AAAA,IAClE,CAAC,KAAe,YAAY;AACpB,YAAA,CAAC,cAAc,UAAU,IAAI;AACnC,YAAM,SAAS,WAAW,IAAI,CAAC,cAAc;AACpC,eAAA;AAAA,UACL,KAAK,UAAU;AAAA,UACf,OAAO,UAAU,OAAO;AAAA,UACxB;AAAA,QACF;AAAA,MAAA,CACD;AAED,aAAO,CAAC,GAAG,KAAK,GAAG,MAAM;AAAA,IAC3B;AAAA,IACA,CAAA;AAAA,EACF;AAEA,MAAI,sCAAsC;AACxC,IAAAA,WAAUA,SAAQ,OAAO,CAAC,EAAE,UAAe;AACnC,YAAA,WAAW,oBAAoB,KAAK,iDAAiD;AACrF,YAAA,iBAAiB,kBAAkB,WAAW,gBAAgB;AACpE,YAAM,aAAa,WAAW;AAC9B,aAAO,cAAcyD,QAAA;AAAA,IAAA,CACtB;AAAA,EAAA;AAGH,MAAI,oBAAoB;AACZ,IAAAzD,WAAAA,SAAQ,OAAO,CAAC,WAAW;AACnC,aAAO,OAAO,QAAQ;AAAA,IAAA,CACvB;AAAA,EAAA;AAGH,MAAI,sCAAsC;AAC9B,IAAAA,WAAA;AAAA,MACR;AAAA,QACE,KAAK;AAAA,QACL,OAAO,mBAAmB;AAAA,QAC1B,cAAc,mBAAmB;AAAA,MAAA;AAAA,IAErC;AAAA,EAAA;AAGF,yCACGjC,aAAAA,MAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpBX,2BAAA;AAAA,MAAC8C,aAAA;AAAA,MAAA;AAAA,QACC,UAAU,wCAAwC,CAAC;AAAA,QACnD,UAAU,CAACD,WAAe;AACf,mBAAA,EAAE,QAAQ,EAAE,MAAM,OAAAA,QAAO,MAAM,kBAAkB,GAAG;AAAA,QAC/D;AAAA,QACA,OAAO,SAAS;AAAA,QAEf,UAAAD,SAAQ,IAAI,CAAC,WAAW;AACvB,iBACG5C,2BAAAA,IAAAgD,aAAAA,oBAAA,EAAoC,OAAO,OAAO,KAChD,UAAA,GAAG,OAAO,YAAY,MAAM,OAAO,KAAK,GAAA,GADlB,OAAO,GAEhC;AAAA,QAEH,CAAA;AAAA,MAAA;AAAA,IACH;AAAA,IACAhD,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,EAAA,GACf;AAEJ;AC5FO,MAAM,mBAAmB,CAAC;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA6B;AACrB,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAClC,QAAM,EAAE,6BAA6B,aAAa,IAAI,eAAe;AACrE,QAAM,WAAW,cAAc,aAAa,YAAY,OAAO,YAAY,iBAAiB;AACtF,QAAA,wBAAwB,UAAU,cAAc,CAAC;AACvD,QAAM,sCAAsC,OAAO,KAAK,2BAA2B,EAAE;AAAA,IACnF,CAAC,KAAK,YAAY;AACV,YAAA,qBAAqB,4BAA4B,OAAO,EAAE,OAAO,CAAC,EAAE,UAAU;AAC3E,eAAA,CAAC,sBAAsB,SAAS,GAAG;AAAA,MAAA,CAC3C;AAEG,UAAA,mBAAmB,SAAS,GAAG;AACjC,YAAI,OAAO,IAAI;AAAA,MAAA;AAGV,aAAA;AAAA,IACT;AAAA,IACA,CAAA;AAAA,EACF;AACA,QAAM0D,WAAU,OAAO,QAAQ,mCAAmC,EAAE;AAAA,IAClE,CAAC,KAAK,YAAY;AACV,YAAA,CAAC,cAAc,UAAU,IAAI;AACnC,YAAM,UAAU;AAAA,QACd,OAAO;AAAA,QACP,UAAU,WAAW,IAAI,CAAC,EAAE,KAAK,QAAQ,EAAE,YAAY,QAAQ;AAC7D,iBAAO,EAAE,OAAO,aAAa,OAAO,IAAI;AAAA,QACzC,CAAA;AAAA,MACH;AAEA,UAAI,KAAK,OAAO;AAET,aAAA;AAAA,IACT;AAAA,IACA,CAAA;AAAA,EACF;AAEA,QAAM,iBAAiB;AAAA,IACrB;AAAA,MACE,IAAI,QAAQ,6CAA6C;AAAA,MACzD,gBACE;AAAA,IACJ;AAAA,IACA,EAAE,QAAQ,OAAO,UAAU,EAAE;AAAA,EAC/B;AAEA,SACG9C,2BAAA,KAAAa,aAAA,MAAM,MAAN,EAAW,MACV,UAAA;AAAA,IAAAX,2BAAA,IAACW,aAAM,MAAA,OAAN,EAAa,UAAA,cAAc,SAAS,GAAE;AAAA,IACvCX,2BAAA;AAAA,MAACY,aAAA;AAAA,MAAA;AAAA,QACC,IAAG;AAAA,QACH,kBAAkB,MAAM;AAAA,QACxB,UAAU,CAAC,WAAW;AACX,mBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,QAAQ,MAAM,oBAAoB,GAAG;AAAA,QACzE;AAAA,QACA,SAAAgC;AAAA,QACA,OAAO,SAAS,CAAA;AAAA,MAAC;AAAA,IAAA;AAAA,EACnB,GACF;AAEJ;ACrDO,MAAM,iBAAiB,CAAC;AAAA,EAC7B;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAAA;AAAA,EACA,QAAQ;AACV,MAA2B;AACnB,QAAA,EAAE,cAAc,IAAI1D,kBAAQ;AAC5B,QAAA,QAAQ,cAAc,SAAS;AAC/B,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AAE7E,QAAA,eAAe,CAAC,cAA+B;AAC1C,aAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,WAAW,MAAM,SAAS,GAAG;AAE/D,QAAI,CAAC,OAAO;AACV;AAAA,IAAA;AAGF,QAAI,aAAa,YAAY,UAAa,aAAa,YAAY,MAAM;AAC9D,eAAA,EAAE,QAAQ,EAAE,MAAM,WAAW,OAAO,KAAA,GAAQ;AAAA,IAAA;AAAA,EAEzD;AAEA,yCACGyB,aAAAA,MAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpBX,+BAAC8C,aAAAA,gBAAa,UAAU,cAAc,OAAO,SAAS,IACnD,mBAAQ,IAAI,CAAC,EAAE,WAAW,EAAE,WAAAC,YAAW,UAAU,UAAU,KAAK,OAAAF,aAAY;AAC3E,aACG7C,2BAAA,IAAAgD,aAAA,oBAAA,EAA6B,OAAOH,QAAO,UAAoB,QAC7D,UAAA;AAAA,QACC,EAAE,IAAIE,WAAU,IAAI,gBAAgBA,WAAU,eAAe;AAAA,QAC7DA,WAAU;AAAA,WAHW,GAKzB;AAAA,IAEH,CAAA,GACH;AAAA,IACA/C,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,EAAA,GACf;AAEJ;AC5CO,MAAM,eAAe,CAAC;AAAA,EAC3B;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAAiC;AAAA,EACA,QAAQ;AACV,MAAyB;AACjB,QAAA,EAAE,cAAc,IAAI1D,kBAAQ;AAC5B,QAAA,QAAQ,cAAc,SAAS;AAC/B,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AAE7E,QAAA,eAAe,CAAC,cAA+B;AAC1C,aAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,WAAW,MAAM,SAAS,GAAG;AAE/D,QAAI,CAAC,OAAO;AACV;AAAA,IAAA;AAGE,QAAA,cAAc,gBAAgB,UAAU,cAAc;AACxD,UAAI,aAAa,YAAY,UAAa,aAAa,YAAY,MAAM;AAC9D,iBAAA,EAAE,QAAQ,EAAE,MAAM,WAAW,OAAO,KAAA,GAAQ;AAAA,MAAA;AAGvD,UAAI,aAAa,QAAQ,UAAa,aAAa,QAAQ,MAAM;AACtD,iBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,OAAO,KAAA,GAAQ;AAAA,MAAA;AAGnD,UAAI,aAAa,QAAQ,UAAa,aAAa,QAAQ,MAAM;AACtD,iBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,OAAO,KAAA,GAAQ;AAAA,MAAA;AAAA,IACnD;AAGF,QACE,OAAO,cAAc,YACrB,CAAC,WAAW,SAAS,SAAS,EAAE,SAAS,SAAS,KAClD,UAAU,cACV;AACA,UAAI,aAAa,YAAY,UAAa,aAAa,YAAY,MAAM;AAC9D,iBAAA,EAAE,QAAQ,EAAE,MAAM,WAAW,OAAO,KAAA,GAAQ;AAAA,MAAA;AAGvD,UAAI,aAAa,QAAQ,UAAa,aAAa,QAAQ,MAAM;AACtD,iBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,OAAO,KAAA,GAAQ;AAAA,MAAA;AAGnD,UAAI,aAAa,QAAQ,UAAa,aAAa,QAAQ,MAAM;AACtD,iBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,OAAO,KAAA,GAAQ;AAAA,MAAA;AAAA,IACnD;AAAA,EAEJ;AAEA,yCACGyB,aAAAA,MAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpBX,+BAAC8C,aAAAA,gBAAa,UAAU,cAAc,OAAO,SAAS,IACnD,mBAAQ,IAAI,CAAC,EAAE,WAAW,EAAE,WAAAC,YAAW,UAAU,UAAU,KAAK,OAAAF,aAAY;AAEzE,aAAA7C,+BAACgD,aAAAA,sBAA6B,OAAOH,QAAO,UAAoB,QAC7D,UAAA,cAAcE,UAAS,EAAA,GADD,GAEzB;AAAA,IAEH,CAAA,GACH;AAAA,IACA/C,+BAACW,aAAAA,MAAM,OAAN,CAAY,CAAA;AAAA,EAAA,GACf;AAEJ;AAEA,aAAa,eAAe;AAAA,EAC1B,OAAO;AAAA,EACP,OAAO;AACT;AC5FO,MAAM,eAAe,CAAC;AAAA,EAC3B,cAAc;AAAA,EACd,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AACV,MAAyB;AACjB,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAC5B,QAAA,cAAc6E,aAAO,QAAQ;AAC7B,QAAA,cAAc,cAAc,eAAe;AAEjDC,QAAAA,UAAU,MAAM;AACd,QAAI,aAAa;AACH,kBAAA,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAOM,QAAW,WAAA,WAAW,EAAE,GAAG;AAAA,IAAA,OACnE;AACO,kBAAA,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAO,GAAA,GAAM;AAAA,IAAA;AAAA,EACrD,GACC,CAAC,aAAa,IAAI,CAAC;AAEhB,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AACnF,QAAM,OAAO,cACT;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AACE,QAAA,QAAQ,cAAc,SAAS;AAErC,yCACG3D,aAAM,MAAA,MAAN,EAAW,OAAO,cAAc,MAAY,MAC3C,UAAA;AAAA,IAACX,2BAAAA,IAAAW,aAAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACnBX,2BAAA,IAAAoD,aAAA,WAAA,EAAU,UAAoB,OAAO,SAAS,IAAI;AAAA,IACnDpD,+BAACW,aAAAA,MAAM,OAAN,EAAY;AAAA,IACbX,+BAACW,aAAAA,MAAM,MAAN,CAAW,CAAA;AAAA,EAAA,GACd;AAEJ;AC1CO,MAAM,UAAU,CAAC;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAoB;AACZ,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAElC,SAEKc,2BAAA,IAAAG,WAAA,UAAA,EAAA,UAAA,KAAK,IAAI,CAAC,SAAS,iBAAiB;AAE/B,QAAA,QAAQ,MAAM,WAAW,GAAG;AACvB,aAAA;AAAA,IAAA;AAGT,2CACGK,kBACE,EAAA,UAAA;AAAA,MAAA,QAAQ,gBACPR,2BAAAA,IAACQ,aAAI,KAAA,EAAA,eAAe,GAClB,UAACR,2BAAAA,IAAAiC,aAAA,YAAA,EAAW,SAAQ,SAAQ,KAAI,MAC7B,UAAA,cAAc,QAAQ,YAAY,EACrC,CAAA,GACF;AAAA,MAEFjC,2BAAAA,IAACoC,aAAK,KAAA,MAAL,EAAU,KAAK,GACb,UAAA,QAAQ,MAAM,IAAI,CAAC,OAAY,MAAc;AAC5C,cAAM,MAAM,GAAG,YAAY,IAAI,CAAC;AAKhC,cAAM,QAAQ2D,aAAAA,QAAI,cAAc,MAAM,MAAM,MAAS;AAS/C,cAAA,oBAAoB,OAAO,KAAK,UAAU,EAAE,KAAK,CAACO,SAAQA,SAAQ,MAAM,IAAI;AAGlF,cAAM,UAAU,oBACZ,WAAW,iBAAiB,EAAE,KAC9BP,aAAA;AAAA,UACE;AAAA,UACA;AAAA,YACE,GAAG,MAAM,KACN,MAAM,GAAG,EAMT,OAAO,CAACO,SAAgBA,SAAQ,mBAAmB;AAAA,YACtD;AAAA,UACF;AAAA,UACA;AAAA,QACF;AAEA,YAAA,MAAM,SAAS,aAAa;AAE5B,iBAAAtG,2BAAA;AAAA,YAACoC,aAAAA,KAAK;AAAA,YAAL;AAAA,cACC,KAAK,MAAM,QAAQ;AAAA,cAEnB,WAAU;AAAA,cACV,YAAW;AAAA,cAEX,yCAAC,OAAI,CAAA,CAAA;AAAA,YAAA;AAAA,YAJA,MAAM,QAAQ;AAAA,UAKrB;AAAA,QAAA;AAKF,eAAApC,2BAAA;AAAA,UAACoC,aAAAA,KAAK;AAAA,UAAL;AAAA,YACC,KAAK,MAAM,QAAQ;AAAA,YAEnB,WAAU;AAAA,YACV,YAAW;AAAA,YAEX,UAAApC,2BAAA;AAAA,cAACwF;AAAAA,cAAA;AAAA,gBACE,GAAG;AAAA,gBACH,GAAG;AAAA,gBACJ,OAAO;AAAA,gBACP;AAAA,gBACA;AAAA,cAAA;AAAA,YAAA;AAAA,UACF;AAAA,UAVK,MAAM,QAAQ;AAAA,QAWrB;AAAA,MAAA,CAEH,EACH,CAAA;AAAA,IAAA,EAAA,GA3EQ,YA4EV;AAAA,EAEH,CAAA,GACH;AAEJ;AC/FO,MAAM,eAAe,CAAC;AAAA,EAC3B,cAAc;AAAA,EACd,WAAW;AAAA,EACX,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd,QAAQ;AACV,MAAyB;AACjB,QAAA,EAAE,cAAc,IAAItG,kBAAQ;AAC5B,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AACnF,QAAM,OAAO,cACT;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AACE,QAAA,QAAQ,cAAc,SAAS;AACrC,QAAM,uBAAuB,cACzB;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AAEE,QAAA,aAAa,MAAM,QAAQ,KAAK,IAAI,MAAM,KAAK,IAAI,IAAI;AAEvD,QAAA,eAAe,CAAC,MAAwC;AAC5D,UAAM,aAAa,EAAE,OAAO,MAAM,MAAM,IAAI;AAE5C,aAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,WAAA,GAAc;AAAA,EAClD;AAEA,yCACGyB,aAAM,MAAA,MAAN,EAAW,OAAO,cAAc,MAAY,MAC3C,UAAA;AAAA,IAAAX,2BAAA,IAACW,aAAM,MAAA,OAAN,EAAY,QAAQ,aAAc,UAAM,OAAA;AAAA,IACzCX,2BAAA;AAAA,MAACkF,aAAA;AAAA,MAAA;AAAA,QACC;AAAA,QACA,UAAU;AAAA,QACV,aAAa;AAAA,QACb,OAAO;AAAA,MAAA;AAAA,IACT;AAAA,IACAlF,+BAACW,aAAAA,MAAM,OAAN,EAAY;AAAA,IACbX,+BAACW,aAAAA,MAAM,MAAN,CAAW,CAAA;AAAA,EAAA,GACd;AAEJ;ACjEO,MAAM4F,cAAY;AAAA,EACvB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,WAAW;AAAA,IACT,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AAAA,EACA,aAAa;AAAA,IACX,IAAI,QAAQ,gDAAgD;AAAA,IAC5D,gBAAgB;AAAA,EAAA;AAAA;AAAA;AAAA;AAKpB;ACdO,MAAM,iBAAiB;AAAA,EAC5B,UAAU,CAAC,EAAE,cAAc,MAAM,OAAO,CAACA,WAAS,EAAG,CAAA;AACvD;ACFO,MAAM,gBAAgB;AAAA,EAC3B,KAAK,SAAS,IAAI;AAChB,UAAM,WAAW;AAAA,MACf;AAAA,QACE,cAAc;AAAA,QACd,OAAO;AAAA,UACL;AAAA,YACE,MAAM,GAAG,MAAM;AAAA,YACf,MAAM;AAAA,YACN,WAAW;AAAA,cACT,IAAI,QAAQ,+BAA+B;AAAA,cAC3C,gBAAgB;AAAA,YAAA;AAAA,UAEpB;AAAA,UACA;AAAA,YACE,MAAM,GAAG,MAAM;AAAA,YACf,MAAM;AAAA,YACN,WAAW;AAAA,cACT,IAAI,QAAQ,sDAAsD;AAAA,cAClE,gBAAgB;AAAA,YAAA;AAAA,UAClB;AAAA,QACF;AAAA,MAEJ;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,OAAO;AAAA,UACL;AAAA,YACE,MAAM,GAAG,MAAM;AAAA,YACf,MAAM;AAAA,YACN,MAAM;AAAA,YACN,WAAW;AAAA,cACT,IAAI,QAAQ,iCAAiC;AAAA,cAC7C,gBAAgB;AAAA,YAAA;AAAA,UAClB;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAEO,WAAA;AAAA,EACT;AAAA,EACA,WAAW;AACT,UAAM,WAA2B,CAAC;AAE3B,WAAA;AAAA,EAAA;AAEX;AC/CO,MAAM,mBAAmB;AAAA,EAC9B,SAAS;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,iCAAiC;AAAA,MAC7C,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,6BAA6B;AAAA,MACzC,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,mCAAmC;AAAA,MAC/C,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,6BAA6B;AAAA,MACzC,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,mCAAmC;AAAA,MAC/C,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,kCAAkC;AAAA,MAC9C,gBAAgB;AAAA,IAClB;AAAA,IACA,aAAa;AAAA,MACX,IAAI,QAAQ,8CAA8C;AAAA,MAC1D,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,OAAO;AAAA,IACL,WAAW;AAAA,MACT,IAAI,QAAQ,gCAAgC;AAAA,MAC5C,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACX,IAAI,QAAQ,4CAA4C;AAAA,MACxD,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,mCAAmC;AAAA,MAC/C,gBAAgB;AAAA,IAClB;AAAA,IACA,aAAa;AAAA,MACX,IAAI,QAAQ,+CAA+C;AAAA,MAC3D,gBAAgB;AAAA,IAAA;AAAA,EAEpB;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW;AAAA,MACT,IAAI,QAAQ,iCAAiC;AAAA,MAC7C,gBAAgB;AAAA,IAClB;AAAA,IACA,aAAa;AAAA,MACX,IAAI,QAAQ,6CAA6C;AAAA,MACzD,gBACE;AAAA,IAAA;AAAA,EACJ;AAEJ;ACrFO,MAAM,eAAe;AAAA,EAC1B,SAAS;AACA,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAC7D;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,UAAU;AACD,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,cACX,MAAM;AAAA,cACN,WAAW;AAAA,gBACT,IAAI,QAAQ,iCAAiC;AAAA,gBAC7C,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,SAAS;AAAA,gBACP;AAAA,kBACE,OAAO;AAAA,kBACP,KAAK;AAAA,kBACL,WAAW,EAAE,WAAW,EAAE,IAAI,QAAQ,gBAAgB,OAAS,EAAA;AAAA,gBACjE;AAAA,gBACA;AAAA,kBACE,OAAO;AAAA,kBACP,KAAK;AAAA,kBACL,WAAW,EAAE,WAAW,EAAE,IAAI,QAAQ,gBAAgB,OAAS,EAAA;AAAA,gBACjE;AAAA,gBACA;AAAA,kBACE,OAAO;AAAA,kBACP,KAAK;AAAA,kBACL,WAAW,EAAE,WAAW,EAAE,IAAI,SAAS,gBAAgB,QAAU,EAAA;AAAA,gBAAA;AAAA,cACnE;AAAA,YACF;AAAA,UACF;AAAA,QAEJ;AAAA,QACA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAC7D;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,UAAU,EAAE,WAAW,GAA4B,MAAc;AAC/D,QAAI,SAAS,KAAK;AAChB,aAAO,EAAE,UAAU,cAAc,WAAW;AAAA,IAAA;AAG9C,QAAI,YAAY;AACP,aAAA;AAAA,QACL,UAAU;AAAA,UACR;AAAA,YACE,cAAc;AAAA,cACZ,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAClB;AAAA,YACA,OAAO;AAAA,cACL,iBAAiB;AAAA,cACjB,iBAAiB;AAAA,cACjB,iBAAiB;AAAA,cACjB,iBAAiB;AAAA,YAAA;AAAA,UACnB;AAAA,QACF;AAAA,MAEJ;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAC7D;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,KAAK,EAAE,QAA0B;AACxB,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,GAAG,iBAAiB;AAAA,cACpB,MAAM,QAAQ;AAAA,cACd,OAAO;AAAA,cACP,kBAAkB;AAAA,cAClB,UAAU,CAAC;AAAA,cACX,WAAW;AAAA,YAAA;AAAA,UACb;AAAA,QAEJ;AAAA,QACA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,QAAQ,iBAAiB,OAAO;AAAA,QAAA;AAAA,MACtF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,cAAc;AACL,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,KAAK,iBAAiB,GAAG;AAAA,QAAA;AAAA,MAC/E;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,QAAQ;AACC,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,GAAG,iBAAiB;AAAA,cACpB,MAAM;AAAA,YAAA;AAAA,UACR;AAAA,QAEJ;AAAA,QAEA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO;AAAA,YACL,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,UAAA;AAAA,QACnB;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,YAAY,MAA+B;AAClC,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,WAAW;AAAA,gBACT,IAAI,QAAQ,iCAAiC;AAAA,gBAC7C,gBAAgB;AAAA,cAClB;AAAA,cACA,aAAa,CAAC;AAAA,cACd,SAAS;AAAA,gBACP;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI;AAAA,sBACJ,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBAEJ;AAAA,gBACA,IAAI,KAAK,QAAQ,CAAA,GACd,OAAO,CAAC,OAAOpE,WAAU,KAAK,KAAK,QAAQ,KAAK,MAAMA,UAAS,KAAK,EACpE,IAAI,CAAC,UAAU;AACP,yBAAA;AAAA,oBACL,KAAK;AAAA,oBACL;AAAA,oBACA,WAAW;AAAA,sBACT,WAAW,EAAE,IAAI,GAAG,KAAK,gBAAgB,gBAAgB,MAAM;AAAA,oBAAA;AAAA,kBAEnE;AAAA,gBACD,CAAA;AAAA,cAAA;AAAA,YAEP;AAAA,YACA;AAAA,cACE,WAAW;AAAA,gBACT,IAAI,QAAQ,yCAAyC;AAAA,gBACrD,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,aAAa,CAAC;AAAA,cACd,aAAa;AAAA,gBACX,IAAI,QAAQ,qDAAqD;AAAA,gBACjE,gBAAgB;AAAA,cAAA;AAAA,YAClB;AAAA,UACF;AAAA,QAEJ;AAAA,QAEA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAC7D;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,OAAO;AACE,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAC7D;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,QAAQ;AACC,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,gBACT,IAAI,QAAQ,oCAAoC;AAAA,gBAChD,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa,CAAA;AAAA,YAAC;AAAA,UAChB;AAAA,QAEJ;AAAA,QACA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,UAAU,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAC7D;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,OAAO,MAA0B;AAC/B,UAAM,YAAY,KAAK,SAAS,aAAa,KAAK,SAAS,UAAU,QAAQ;AAEtE,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,cACX,MAAM;AAAA,cACN,MAAM,KAAK,SAAS,eAAe,SAAS;AAAA,cAC5C,MAAM;AAAA,cACN,WAAW;AAAA,gBACT,IAAI,QAAQ,iCAAiC;AAAA,gBAC7C,gBAAgB;AAAA,cAClB;AAAA,cACA,aAAa,CAAA;AAAA,YAAC;AAAA,UAChB;AAAA,QAEJ;AAAA,QACA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO;AAAA,YACL,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,UAAA;AAAA,QACnB;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,WAAW;AACF,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAAC,iBAAiB,OAAO,EAAE;AAAA,QAExD;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO;AAAA,YACL,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,UAAA;AAAA,QACnB;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,WAAW;AACF,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO,CAAC,iBAAiB,OAAO;AAAA,QAAA;AAAA,MAClC;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,WAAW;AACF,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAAC,iBAAiB,OAAO,EAAE;AAAA,QACxD;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO;AAAA,YACL,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,UAAA;AAAA,QACnB;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,OAAO;AACE,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAAC,iBAAiB,SAAS,iBAAiB,KAAK,EAAE;AAAA,QAEhF;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO;AAAA,YACL,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,UAAA;AAAA,QACnB;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,IAAI,MAA+B;AAC1B,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL,EAAE,GAAG,iBAAiB,SAAS,UAAU,QAAQ,KAAK,WAAW,GAAG,MAAM,OAAO;AAAA,UAAA;AAAA,QAErF;AAAA,QAEA;AAAA,UACE,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,OAAO;AAAA,YACL,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,UAAA;AAAA,QACnB;AAAA,MACF;AAAA,IAEJ;AAAA,EAAA;AAEJ;ACxZO,MAAM,iBAAiB;AAAA,EAC5B,WAAW;AAAA,IACT,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AAAA,EACA,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA,MACE,OAAO;AAAA,QACL,IAAI,QAAQ,wCAAwC;AAAA,QACpD,gBAAgB;AAAA,MAClB;AAAA,MACA,aAAa;AAAA,QACX,IAAI,QAAQ,oDAAoD;AAAA,QAChE,gBACE;AAAA,MACJ;AAAA,MACA,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,OAAO;AAAA,QACL,IAAI,QAAQ,gDAAgD;AAAA,QAC5D,gBAAgB;AAAA,MAClB;AAAA,MACA,aAAa;AAAA,QACX,IAAI,QAAQ,4DAA4D;AAAA,QACxE,gBACE;AAAA,MACJ;AAAA,MACA,OAAO;AAAA,IAAA;AAAA,EACT;AAEJ;AC9BO,MAAM,WAAW;AAAA,EACtB,UAAU,MAAoC,MAAc;AAC1D,QAAI,SAAS,KAAK;AACV,YAAA,gBACJ,KAAK,oBAAoB,OAAO,cAAc,KAAK,oBAAoB,IAAI,CAAC;AAEvE,aAAA;AAAA,QACL,UAAU,CAAC,EAAE,cAAc,MAAM,OAAO,CAAC,cAAc,EAAK,GAAA,GAAG,aAAa;AAAA,MAC9E;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACLoE;AAAAA,YACA;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,WAAW;AAAA,gBACT,IAAI,QAAQ,uCAAuC;AAAA,gBACnD,gBAAgB;AAAA,cAClB;AAAA,cACA,YAAY;AAAA,YAAA;AAAA,UACd;AAAA,QAEJ;AAAA,QACA;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,gBACT,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,4CAA4C;AAAA,oBACxD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,wDAAwD;AAAA,oBACpE,gBACE;AAAA,kBACJ;AAAA,kBACA,OAAO;AAAA,gBACT;AAAA,gBACA;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,wCAAwC;AAAA,oBACpD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,oDAAoD;AAAA,oBAChE,gBACE;AAAA,kBACJ;AAAA,kBACA,OAAO;AAAA,gBAAA;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,OAAO;AACE,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACLA;AAAAA,YACA;AAAA,cACE,WAAW;AAAA,gBACT,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,gBACP;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI;AAAA,sBACJ,gBAAgB;AAAA,oBAClB;AAAA,oBACA,QAAQ;AAAA,kBAAA;AAAA,gBAEZ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,oCAAoC;AAAA,sBAChD,gBAAgB;AAAA,sBAChB,QAAQ,EAAE,kCAAiB,KAAK,GAAE,YAAc,EAAA;AAAA,oBAAA;AAAA,kBAClD;AAAA,gBAEJ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,wCAAwC;AAAA,sBACpD,gBAAgB;AAAA,sBAChB,QAAQ,EAAE,kCAAiB,KAAK,GAAE,YAAc,EAAA;AAAA,oBAAA;AAAA,kBAClD;AAAA,gBAEJ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,oCAAoC;AAAA,sBAChD,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,cAAc;AACL,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAACA,WAAS,EAAE;AAAA,QACzC;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,WAAW;AAAA,gBACT,IAAI,QAAQ,uCAAuC;AAAA,gBACnD,gBAAgB;AAAA,cAClB;AAAA,cACA,aAAa;AAAA,gBACX,IAAI,QAAQ,6CAA6C;AAAA,gBACzD,gBAAgB;AAAA,cAClB;AAAA,cACA,aAAa;AAAA,gBACX,UAAU;AAAA,cAAA;AAAA,YACZ;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,QAAQ;AACC,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAACA,WAAS,EAAE;AAAA,QACzC;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,gBACT,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,sCAAsC;AAAA,oBAClD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,kDAAkD;AAAA,oBAC9D,gBAAgB;AAAA,kBAClB;AAAA,kBACA,OAAO;AAAA,gBACT;AAAA,gBACA;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,oCAAoC;AAAA,oBAChD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,gDAAgD;AAAA,oBAC5D,gBAAgB;AAAA,kBAClB;AAAA,kBACA,OAAO;AAAA,gBAAA;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,SAAS;AACA,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACLA;AAAAA,YACA;AAAA,cACE,WAAW;AAAA,gBACT,IAAI,QAAQ,iCAAiC;AAAA,gBAC7C,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,gBACP;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI;AAAA,sBACJ,gBAAgB;AAAA,oBAClB;AAAA,oBACA,QAAQ;AAAA,kBAAA;AAAA,gBAEZ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,yCAAyC;AAAA,sBACrD,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBAEJ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,4CAA4C;AAAA,sBACxD,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBAEJ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,yCAAyC;AAAA,sBACrD,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBAEJ;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW;AAAA,oBACT,WAAW;AAAA,sBACT,IAAI,QAAQ,uCAAuC;AAAA,sBACnD,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,WAAW;AACF,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW,EAAE,IAAI,SAAS,gBAAgB,QAAQ;AAAA,cAClD,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,YAAA;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,SAAS;AACA,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAACA,WAAS,EAAE;AAAA,QACzC;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,gBACT,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,uCAAuC;AAAA,oBACnD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,mDAAmD;AAAA,oBAC/D,gBACE;AAAA,kBACJ;AAAA,kBACA,OAAO;AAAA,gBACT;AAAA,gBACA;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,sCAAsC;AAAA,oBAClD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,kDAAkD;AAAA,oBAC9D,gBAAgB;AAAA,kBAClB;AAAA,kBACA,OAAO;AAAA,gBAAA;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,OAAO;AACE,WAAA;AAAA,MACL,UAAU;AAAA,QACR,EAAE,cAAc,MAAM,OAAO,CAACA,WAAS,EAAE;AAAA,QACzC;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,WAAW;AAAA,gBACT,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,uCAAuC;AAAA,oBACnD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,mDAAmD;AAAA,oBAC/D,gBACE;AAAA,kBACJ;AAAA,kBACA,OAAO;AAAA,gBACT;AAAA,gBACA;AAAA,kBACE,OAAO;AAAA,oBACL,IAAI,QAAQ,sCAAsC;AAAA,oBAClD,gBAAgB;AAAA,kBAClB;AAAA,kBACA,aAAa;AAAA,oBACX,IAAI,QAAQ,kDAAkD;AAAA,oBAC9D,gBAAgB;AAAA,kBAClB;AAAA,kBACA,OAAO;AAAA,gBAAA;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,IAAI,OAAgB,MAAc,YAAmD;AACnF,UAAM3D,WAAU,WACb,OAAO,CAAC,EAAE,WAAW,CAAC,UAAU,MAAM,EAAE,SAAS,IAAI,CAAC,EACtD,IAAI,CAAC,EAAE,YAAY;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,MACP,WAAW;AAAA,QACT,WAAW,EAAE,IAAI,GAAG,IAAI,gBAAgB,gBAAgB,KAAK;AAAA,MAAA;AAAA,IAC/D,EACA;AAEG,WAAA;AAAA,MACL,UAAU;AAAA,QACR;AAAA,UACE,cAAc;AAAA,UACd,OAAO;AAAA,YACL;AAAA,cACE,GAAG2D;AAAAA,cACH,aAAa;AAAA,gBACX,IAAI,QAAQ,gDAAgD;AAAA,gBAC5D,gBAAgB;AAAA,cAAA;AAAA,YAEpB;AAAA,YACA;AAAA,cACE,WAAW;AAAA,gBACT,IAAI,QAAQ,kCAAkC;AAAA,gBAC9C,gBAAgB;AAAA,cAClB;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,gBACP;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,WAAW,EAAE,WAAW,EAAE,IAAI,eAAe,gBAAgB,OAAS,EAAA;AAAA,gBACxE;AAAA,gBACA,GAAG3D;AAAA,cAAA;AAAA,YACL;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,EAAA;AAEJ;ACtbO,MAAM,iBAAiB;AAAA,EAC5B,UAAU;AAAA,EACV,MAAM;AACR;ACJa,MAAA,uBAAuB,CAAC,UAA8B;AACjE,MAAI,CAAC,OAAO;AACH,WAAA;AAAA,EAAA;AAET,SAAO4D,iBAAAA,QAAQ,OAAO;AAAA,IACpB,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,WAAW;AAAA,EAAA,CACZ;AACH;ACJA,MAAM,aAAa;AAEnB,MAAM,4BAA4B,CAChC,cACgE;AACzD,SAAA;AAAA,IACL,MAAM;AAAA,IACN,SAASC,YAAAA,iBAAY,OAAO;AAAA,IAC5B,KAAK,OAA2B;AAC9B,UAAI,CAAC,OAAO;AACH,eAAA;AAAA,MAAA;AAEH,YAAA,eAAeC,aAAU,KAAK;AAEpC,aAAO,CAAC,UAAU,KAAK,CAAC,gBAAgB;AAC/B,eAAAA,GAAA,UAAU,WAAW,MAAM;AAAA,MAAA,CACnC;AAAA,IAAA;AAAA,EAEL;AACF;AAkBA,MAAM,gBAAgB,CACpB,kBACgE;AACzD,SAAA;AAAA,IACL,MAAM;AAAA,IACN,SAAS,QAAQ,mCAAmC;AAAA,IACpD,KAAK,OAA2B;AAC9B,UAAI,CAAC,OAAO;AACH,eAAA;AAAA,MAAA;AAEH,YAAA,eAAeA,aAAU,KAAK;AAEpC,aAAO,CAAC,cAAc,KAAK,CAAC,gBAAgB;AACnC,eAAAA,GAAA,UAAU,WAAW,MAAM;AAAA,MAAA,CACnC;AAAA,IAAA;AAAA,EAEL;AACF;AAEA,MAAM,aAAa;AAAA,EACjB,SAAS,MAAMC,eAAI,OAAA,EAAS,SAAS;AAAA,EACrC,KAAK,MAAMA,eAAI,OAAS,EAAA,QAAA,EAAU,SAAS;AAAA,EAC3C,KAAK,MACHA,eACG,SACA,UACA,KAAK,OAAO,CAAC,KAAK,WAAW;AAC5B,QAAI,KAAK;AACP,aAAO,OAAO,IAAI,KAAK,QAAQ,4BAA4B,CAAC;AAAA,IAAA;AAGvD,WAAA;AAAA,EACR,CAAA,EACA,SAAS;AAAA,EACd,WAAW,MAAMA,eAAI,OAAA,EAAS,QAAA,EAAU,SAAS,QAAQ,2BAA2B,CAAC,EAAE,SAAS;AAAA,EAChG,WAAW,MACTA,eACG,SACA,QAAQ,EACR,IAAI,CAAC,EACL,KAAK,aAAa,CAAC,WAAW,WAAW;AACxC,QAAI,WAAW;AACb,aAAO,OAAO,IAAI,WAAW,QAAQ,4BAA4B,CAAC;AAAA,IAAA;AAG7D,WAAA;AAAA,EACR,CAAA,EACA,SAAS;AAAA,EACd,KAAK,WAA0B,eAA8B;AACpD,WAAAA,eACJ,OACA,EAAA,KAAK,0BAA0B,SAAS,CAAC,EACzC,KAAK,cAAc,aAAa,CAAC,EACjC,QAAQ,YAAYF,YAAY,iBAAA,MAAM,EAAE,EACxC,SAASA,YAAAA,iBAAY,SAAS,EAAE;AAAA,EACrC;AAAA,EACA,UAAU,MAAME,eAAI,QAAQ;AAAA,EAC5B,MAAM,MAAMA,eAAI,OAAA,EAAS,SAASF,YAAA,iBAAY,SAAS,EAAE;AAAA,EACzD,QAAQ,MAAME,eAAI,QAAA,EAAU,SAAS;AACvC;AAEA,MAAM,kBAAkB,CAAC,oBAAmC,kBAAiC;AAC3F,QAAM,QAAQ;AAAA,IACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,IACvD,MAAM,WAAW,KAAK;AAAA,IACtB,SAAS,WAAW,QAAQ;AAAA,IAC5B,QAAQ,WAAW,OAAO;AAAA,IAC1B,UAAU,WAAW,SAAS;AAAA,IAC9B,WAAW,WAAW,UAAU;AAAA,IAChC,WAAW,WAAW,UAAU;AAAA,IAChC,OAAOA,eACJ,OAAO,EACP,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,wBAAwB;AAAA,MACzC,KAAK,OAAO;AACN,YAAA;AACF,iBAAO,IAAI,OAAO,SAAS,EAAE,MAAM;AAAA,iBAC5B,GAAG;AACH,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IAEH,CAAA,EACA,SAAS;AAAA,EACd;AAEO,SAAA;AACT;AAOA,MAAM,uBAAuB,OAEW;AAAA,EACtC,MAAM;AAAA,EACN,SAAS,QAAQ,4BAA4B;AAAA,EAC7C,KAAK,KAAoB;AACvB,QAAI,CAAC,KAAK;AACD,aAAA;AAAA,IAAA;AAGH,UAAA,EAAE,QAAS,KAAa;AAE9B,QAAI,CAAC,KAAK;AACD,aAAA;AAAA,IAAA;AAGT,QAAI,OAAO,MAAMC,0BAAS,GAAG,CAAC,GAAG;AACxB,aAAA;AAAA,IAAA;AAGT,WAAOA,0BAAS,GAAG,KAAKA,kBAAAA,QAAS,GAAG;AAAA,EAAA;AAExC;AC7IO,MAAM,iBAAiB;AAAA,EAC5B,KAAK,oBAAmC,eAA8B;AACpE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,IACxB;AAEO,WAAAD,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,SAAS,oBAAmC,eAA8B;AACxE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,IACxB;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,KAAK,oBAAmC,eAA8B;AACpE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,IACxB;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,QAAQ,oBAAmC,eAA8B;AACvE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,IACxB;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,WAAW,oBAAmC,eAA8B;AAC1E,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAASA,eACN,OAAA,EACA,SAAS,EACT,QAAQ,SAAS;AAAA,MACpB,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,KAAKA,eACF,OAAA,EACA,SAAA,EACA,QAAQ,WAAWF,YAAAA,iBAAY,MAAM,EAAE;AAAA,MAC1C,KAAKE,eACF,SACA,SACA,EAAA,KAAK,qBAAqC,CAAA,EAC1C,QAAQ,WAAWF,YAAA,iBAAY,MAAM,EAAE;AAAA,IAC5C;AAEO,WAAAE,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,QAAQ,oBAAmC,eAA8B;AACvE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,SAASA,eAAI,QAAQ,EAAE,SAAS;AAAA,MAChC,UAAU,WAAW,SAAS;AAAA,MAC9B,QAAQ,WAAW,OAAO;AAAA,IAC5B;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,UAAU,oBAAmC,eAA8B;AACzE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,UAAU,WAAW,SAAS;AAAA,MAC9B,KAAK,WAAW,IAAI;AAAA,MACpB,KAAK,WAAW,IAAI;AAAA,MACpB,WAAWA,eAAI,OAAA,EAAS,SAASF,YAAAA,iBAAY,SAAS,EAAE;AAAA,IAC1D;AAEO,WAAAE,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,QAAQ,oBAAmC,eAA8B;AACvE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAASA,eAAI,OAAO;AAAA,MACpB,UAAU,WAAW,SAAS;AAAA,MAC9B,KAAKA,eAAI,OAAO;AAAA,MAChB,KAAKA,eAAI,SAAS,KAAK,qBAA8B,CAAA;AAAA,IACvD;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,YAAY,oBAAmC,eAA8B;AAC3E,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,UAAU,WAAW,SAAS;AAAA,MAC9B,KAAK,WAAW,IAAI;AAAA,MACpB,KAAK,WAAW,IAAI;AAAA,IACtB;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,MAAM,oBAAmC,eAA8B;AACrE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAASA,eAAI,OAAS,EAAA,MAAA,EAAQ,SAAS;AAAA,MACvC,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,WAAW,WAAW,UAAU;AAAA,MAChC,WAAW,WAAW,UAAU;AAAA,IAClC;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,YAAY,oBAAmC,eAA8B;AAa3E,UAAM,qBAAqB;AAE3B,UAAM,QAAQ;AAAA,MACZ,MAAMA,eACH,OAAO,EACP,KAAK,0BAA0B,kBAAkB,CAAC,EAClD,KAAK,cAAc,aAAa,CAAC,EACjC,QAAQ,oBAAoBF,YAAAA,iBAAY,MAAM,EAAE,EAChD,SAASA,YAAAA,iBAAY,SAAS,EAAE;AAAA,MACnC,MAAM,WAAW,KAAK;AAAA,MACtB,SAAS,WAAW,QAAQ;AAAA,MAC5B,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,MAAME,eACH,MAAM,EACN,GAAGA,eAAI,OAAA,CAAQ,EACf,IAAI,GAAGF,YAAA,iBAAY,IAAI,EAAE,EACzB,KAAK;AAAA,QACJ,MAAM;AAAA,QACN,SAAS,QAAQ,iCAAiC;AAAA,QAClD,KAAK,QAAQ;AACX,cAAI,CAAC,QAAQ;AACJ,mBAAA;AAAA,UAAA;AAET,gBAAM,aAAaI,cAAA;AAAA,YACjB,OACG,IAAI,oBAAoB,EACxB,OAAO,CAAC,OAAO1E,QAAO2E,YAAWA,QAAO,QAAQ,KAAK,MAAM3E,MAAK;AAAA,UACrE;AAEA,iBAAO,CAAC,WAAW;AAAA,QAAA;AAAA,MAEtB,CAAA,EACA,KAAK;AAAA,QACJ,MAAM;AAAA,QACN,SAAS,QAAQ,oCAAoC;AAAA,QACrD,MAAM,CAAC,WAAW;AAChB,cAAI,CAAC,QAAQ;AACJ,mBAAA;AAAA,UAAA;AAEF,iBAAA,CAAC,OAAO,IAAI,oBAAoB,EAAE,KAAK,CAAC,QAAQ,QAAQ,EAAE;AAAA,QAAA;AAAA,MAEpE,CAAA,EACA,KAAK;AAAA,QACJ,MAAM;AAAA,QACN,SAAS,QAAQ,6BAA6B;AAAA,QAC9C,MAAM,CAAC,WAAW;AAChB,cAAI,CAAC,QAAQ;AACJ,mBAAA;AAAA,UAAA;AAEF,iBAAA,OACJ,IAAI,oBAAoB,EACxB,MAAM,CAAC,UAAU,mBAAmB,KAAK,KAAK,CAAC;AAAA,QAAA;AAAA,MACpD,CACD;AAAA,MACH,UAAUwE,eAAI,OAAO,EAAE,SAAS;AAAA,IAClC;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,MAAM,oBAAmC,eAA8B;AACrE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,UAAU,WAAW,SAAS;AAAA,MAC9B,SAASA,eAAI,OAAO;AAAA,MACpB,KAAKA,eAAI,OAAO;AAAA,MAChB,KAAKA,eAAI,SAAS,KAAK,qBAA8B,CAAA;AAAA,IACvD;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,QAAQ,oBAAmC,eAA8B;AACvE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAASA,eAAI,OAAO,EAAE,QAAQ;AAAA,MAC9B,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,KAAK,WAAW,IAAI;AAAA,MACpB,KAAK,WAAW,IAAI;AAAA,IACtB;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,KAAK,oBAAmC,eAA8B;AACpE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,UAAU,WAAW,SAAS;AAAA,MAC9B,QAAQ,WAAW,OAAO;AAAA,IAC5B;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,MAAM,oBAAmC,eAA8B;AACrE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,UAAUA,eAAI,QAAQ;AAAA,MACtB,UAAU,WAAW,SAAS;AAAA,MAC9B,cAAcA,eACX,MAAM,EACN,GAAGA,eAAI,OAAA,EAAS,MAAM,CAAC,UAAU,UAAU,SAAS,QAAQ,CAAC,CAAC,EAC9D,IAAI,CAAC,EACL,SAAS;AAAA,IACd;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,SAAS,oBAAmC,eAA8B;AACxE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAAS,WAAW,QAAQ;AAAA,MAC5B,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,WAAW,WAAW,UAAU;AAAA,MAChC,WAAW,WAAW,UAAU;AAAA,IAClC;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,SACE,oBACA,eACA,8BACA;AAAA,IACE;AAAA,IACA;AAAA,EAAA,GASF;AACA,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,QAAQA,eAAI,SAAS,SAASF,YAAA,iBAAY,SAAS,EAAE;AAAA,MACrD,UAAUE,eAAI,OAAO,EAAE,SAAS;AAAA,MAChC,MAAMA,eAAI,OAAO,EAAE,SAAS;AAAA,MAC5B,iBAAiBA,eAAI,KAAK,MAAM;AAC9B,cAAM,eAAeT,QAAAA,gBAAgB,aAAa,UAAU,aAAa,eAAe;AAEpF,YAAA,iBAAiB,YAAY,iBAAiB,WAAW;AACpD,iBAAAS,eAAI,OAAO,EAAE,SAAS;AAAA,QAAA;AAG/B,cAAM,SAASA,eAAI,OAAA,EAAS,KAAK,cAAc,aAAa,CAAC;AAC7D,cAAM,uBAAuB;AAAA,UAC3B,GAAG,6BAA6B,IAAI,CAAC,EAAE,KAAA,MAAW,IAAI;AAAA,UACtD,aAAa;AAAA,QACf;AAEA,cAAM,+BAA+B,qBAAqB;AAAA,UACxD,CAAC,QAAQ,QAAQ,YAAY;AAAA,QAC/B;AAEA,eAAO,OACJ,QAAQ,YAAYF,6BAAY,MAAM,EAAE,EACxC,KAAK;AAAA,UACJ,MAAM;AAAA,UACN,SAAS,QAAQ,iDAAiD;AAAA,UAClE,KAAK,OAAO;AACV,gBAAI,CAAC,OAAO;AACH,qBAAA;AAAA,YAAA;AAGF,mBAAA,CAAC,6BAA6B,SAAS,KAAK;AAAA,UAAA;AAAA,QAEtD,CAAA,EACA,SAASA,6BAAY,SAAS,EAAE;AAAA,MACpC,CAAA;AAAA,IACH;AAEO,WAAAE,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,SAAS,oBAAmC,eAA8B;AACxE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAAS,WAAW,QAAQ;AAAA,MAC5B,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,WAAW,WAAW,UAAU;AAAA,MAChC,WAAW,WAAW,UAAU;AAAA,IAClC;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,OAAO,oBAAmC,eAA8B;AACtE,UAAM,QAAQ;AAAA,MACZ,MAAM,WAAW,KAAK,oBAAoB,aAAa;AAAA,MACvD,MAAM,WAAW,KAAK;AAAA,MACtB,SAAS,WAAW,QAAQ;AAAA,MAC5B,QAAQ,WAAW,OAAO;AAAA,MAC1B,UAAU,WAAW,SAAS;AAAA,MAC9B,WAAW,WAAW,UAAU;AAAA,MAChC,WAAW,WAAW,UAAU;AAAA,IAClC;AAEO,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,OAAO,oBAAmC,eAA8B;AAChE,UAAA,QAAQ,gBAAgB,oBAAoB,aAAa;AAExD,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,KAAK,oBAAmC,eAA8B;AAC9D,UAAA,QAAQ,gBAAgB,oBAAoB,aAAa;AAExD,WAAAA,eAAI,OAAO,KAAK;AAAA,EACzB;AAAA,EACA,IAAI,oBAAmC,eAA8B;AAC7D,UAAA,QAAQ,gBAAgB,oBAAoB,aAAa;AAExD,WAAAA,eAAI,OAAO,KAAK;AAAA,EAAA;AAE3B;AC/WO,MAAM,sBAAsB;ACKtB,MAAA,uBAAuB,CAAC,sBAAqC;AACxE,QAAM,QAAQ;AAAA,IACZ,MAAMA,eACH,OAAA,EACA,QAAQ,qBAAqBF,YAAAA,iBAAY,MAAM,EAAE,EACjD,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAASA,YAAAA,iBAAY,OAAO;AAAA,MAC5B,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAET,eAAO,CAAC,kBAAkB,SAAS,OAAO,aAAa;AAAA,MAAA;AAAA,IAE1D,CAAA,EACA,SAASA,6BAAY,SAAS,EAAE;AAAA,EACrC;AAEO,SAAAE,eAAI,OAAO,KAAK;AACzB;ACtBO,MAAM,eAAe;AAAA,EAC1B,MAAM;AAAA,IACJ,UAAU;AAAA,MACR;AAAA,QACE,cAAc;AAAA,QACd,OAAO;AAAA,UACL;AAAA,YACE,WAAW;AAAA,YACX,MAAM;AAAA,YACN,MAAM;AAAA,YACN,WAAW;AAAA,cACT,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAClB;AAAA;AAAA;AAAA;AAAA,YAKA,aAAa;AAAA,cACX,IAAI,QAAQ,8CAA8C;AAAA,cAC1D,gBAAgB;AAAA,YAAA;AAAA,UAClB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEJ;ACrBO,MAAM,wBAAwB,CACnC,oBACA,eACA,UACA,sBACA,0BACG;AACH,QAAM,QAAQ;AAAA,IACZ,aAAaA,eACV,OAAO,EACP,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAASF,YAAAA,iBAAY,OAAO;AAAA,MAC5B,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,OAAOM,QAAAA,mBAAmB,OAAO,QAAQ;AAEzC,cAAA,eAAeL,aAAU,IAAI;AAC7B,cAAA,0BAA0BA,aAAU,qBAAqB;AAG7D,eAAA,mBAAmB,MAAM,CAAC,aAAa;AAC9B,iBAAAA,GAAA,UAAU,QAAQ,MAAM;AAAA,QAAA,CAChC,KACD,qBAAqB;AAAA,UACnB,CAAC,mBAAmBA,aAAU,cAAc,MAAM;AAAA,QACpD;AAAA,MAAA;AAAA,IAGL,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,qCAAqC;AAAA,MACtD,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeA,aAAU,KAAK;AAC7B,eAAA,cAAc,MAAM,CAAC,aAAa;AAChC,iBAAAA,GAAA,UAAU,QAAQ,MAAM;AAAA,QAAA,CAChC;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,SAASD,6BAAY,SAAS,EAAE;AAAA,IACnC,UAAUE,eACP,SACA,QAAQ,qBAAqBF,YAAAA,iBAAY,MAAM,EAAE,EACjD,SAASA,YAAAA,iBAAY,SAAS,EAAE;AAAA,IAEnC,MAAME,eAAI,OAAO;AAAA,EACnB;AAEO,SAAAA,eAAI,OAAO,KAAK;AACzB;AC/DA,MAAM,YAAY;AAAA,EAChB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,WAAW;AAAA,IACT,IAAI,QAAQ,+BAA+B;AAAA,IAC3C,gBAAgB;AAAA,EAAA;AAEpB;AAEO,MAAM,kBAAkB;AAAA,EAC7B,UAAU;AAAA,IACR,UAAU;AACD,aAAA;AAAA,QACL,UAAU;AAAA,UACR;AAAA,YACE,OAAO;AAAA,cACL;AAAA,gBACE,WAAW;AAAA,kBACT,IAAI,QAAQ,mCAAmC;AAAA,kBAC/C,gBAAgB;AAAA,gBAClB;AAAA,gBACA,aAAa;AAAA,kBACX,IAAI,QAAQ,yCAAyC;AAAA,kBACrD,gBACE;AAAA,gBACJ;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,aAAa,CAAA;AAAA,cAAC;AAAA,YAChB;AAAA,UACF;AAAA,QACF;AAAA,MAEJ;AAAA,IAAA;AAAA,EAEJ;AAAA,EACA,MAAM;AAAA,IACJ,SAAS;AACA,aAAA;AAAA,QACL,UAAU;AAAA,UACR;AAAA,YACE,cAAc;AAAA,YACd,OAAO;AAAA,cACL;AAAA,cACA;AAAA,gBACE,aAAa;AAAA,kBACX,IAAI,QAAQ,wCAAwC;AAAA,kBACpD,gBACE;AAAA,gBACJ;AAAA,gBACA,WAAW;AAAA,kBACT,IAAI,QAAQ,kCAAkC;AAAA,kBAC9C,gBAAgB;AAAA,gBAClB;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,WAAW,EAAE,IAAI,IAAI,gBAAgB,GAAG;AAAA,gBACxC,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,aAAa;AAAA,kBACX,IAAI,QAAQ,sCAAsC;AAAA,kBAClD,gBAAgB;AAAA,gBAClB;AAAA,gBACA,WAAW;AAAA,kBACT,IAAI,QAAQ,gCAAgC;AAAA,kBAC5C,gBAAgB;AAAA,gBAClB;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,cAAA;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAAA,MAEJ;AAAA,IACF;AAAA,IACA,OAAO;AACE,aAAA;AAAA,QACL,UAAU;AAAA,UACR;AAAA,YACE,cAAc;AAAA,YACd,OAAO;AAAA,cACL;AAAA,cACA;AAAA,gBACE,UAAU;AAAA,gBACV,aAAa;AAAA,kBACX,IAAI,QAAQ,wCAAwC;AAAA,kBACpD,gBACE;AAAA,gBACJ;AAAA,gBACA,WAAW;AAAA,kBACT,IAAI,QAAQ,kCAAkC;AAAA,kBAC9C,gBAAgB;AAAA,gBAClB;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,WAAW,EAAE,IAAI,IAAI,gBAAgB,GAAG;AAAA,gBACxC,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,UAAU;AAAA,gBACV,aAAa;AAAA,kBACX,IAAI,QAAQ,sCAAsC;AAAA,kBAClD,gBAAgB;AAAA,gBAClB;AAAA,gBACA,WAAW;AAAA,kBACT,IAAI,QAAQ,gCAAgC;AAAA,kBAC5C,gBAAgB;AAAA,gBAClB;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,WAAW;AAAA,kBACT,IAAI;AAAA,kBACJ,gBAAgB;AAAA,gBAClB;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN;AAAA,oBACE,OAAO;AAAA,sBACL,IAAI,QAAQ,kCAAkC;AAAA,sBAC9C,gBAAgB;AAAA,oBAClB;AAAA,oBACA,aAAa;AAAA,sBACX,IAAI,QAAQ,yCAAyC;AAAA,sBACrD,gBACE;AAAA,oBACJ;AAAA,oBACA,OAAO;AAAA,kBACT;AAAA,kBACA;AAAA,oBACE,OAAO;AAAA,sBACL,IAAI,QAAQ,8BAA8B;AAAA,sBAC1C,gBAAgB;AAAA,oBAClB;AAAA,oBACA,aAAa;AAAA,sBACX,IAAI,QAAQ,qCAAqC;AAAA,sBACjD,gBAAgB;AAAA,oBAClB;AAAA,oBACA,OAAO;AAAA,kBAAA;AAAA,gBACT;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MAEJ;AAAA,IAAA;AAAA,EACF;AAEJ;ACnJO,MAAM,0BAA0B,CAAC;AAAA,EACtC,uBAAuB,CAAC;AAAA,EACxB,iBAAiB,CAAC;AAAA,EAClB,gBAAgB,CAAC;AAAA,EACjB,cAAc,CAAC;AAAA,EACf,kBAAkB,CAAA;AACpB,MAAqC;AACnC,QAAM,QAAQ;AAAA,IACZ,aAAaA,eACV,OAAO,EACP,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAASF,YAAAA,iBAAY,OAAO;AAAA,MAC5B,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,OAAOO,kBAAU,KAAK;AAEtB,cAAA,eAAeN,aAAU,IAAI;AAEnC,eAAO,CAAC,qBAAqB,KAAK,CAAC7D,WAAU;AACpC,iBAAA6D,GAAA,UAAU7D,MAAK,MAAM;AAAA,QAAA,CAC7B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,qCAAqC;AAAA,MACtD,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAEH,cAAA,eAAe6D,aAAU,KAAK;AAEpC,eAAO,CAAC,eAAe,KAAK,CAAC,QAAQ;AAC5B,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,SAASD,6BAAY,SAAS,EAAE;AAAA,IACnC,YAAYE,eACT,OAAO,EACP,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAASF,YAAAA,iBAAY,OAAO;AAAA,MAC5B,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeC,aAAU,KAAK;AAEpC,eAAO,CAAC,YAAY,KAAK,CAAC,QAAQ;AACzB,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,kDAAkD;AAAA,MACnE,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeA,aAAU,KAAK;AAEpC,eAAO,CAAC,cAAc,KAAK,CAAC,QAAQ;AAC3B,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,mCAAmC;AAAA,MACpD,KAAK,OAAO,SAAS;AACnB,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGT,eAAOA,GAAAA,UAAU,QAAQ,OAAO,YAAY,MAAMA,aAAU,KAAK;AAAA,MAAA;AAAA,IAEpE,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,qCAAqC;AAAA,MACtD,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeA,aAAU,KAAK;AAEpC,eAAO,CAAC,eAAe,KAAK,CAAC,QAAQ;AAC5B,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,oDAAoD;AAAA,MACrE,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeA,aAAU,KAAK;AAEpC,eAAO,CAAC,gBAAgB,KAAK,CAAC,QAAQ;AAC7B,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,SAASD,6BAAY,SAAS,EAAE;AAAA,IACnC,cAAcE,eACX,OAAO,EACP,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAASF,YAAAA,iBAAY,OAAO;AAAA,MAC5B,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeC,aAAU,KAAK;AAEpC,eAAO,CAAC,cAAc,KAAK,CAAC,QAAQ;AAC3B,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,kDAAkD;AAAA,MACnE,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeA,aAAU,KAAK;AAEpC,eAAO,CAAC,YAAY,KAAK,CAAC,QAAQ;AACzB,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,qCAAqC;AAAA,MACtD,KAAK,OAAO,SAAS;AACnB,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGT,eAAOA,GAAAA,UAAU,QAAQ,OAAO,UAAU,MAAMA,aAAU,KAAK;AAAA,MAAA;AAAA,IAElE,CAAA,EACA,KAAK;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,QAAQ,qCAAqC;AAAA,MACtD,KAAK,OAAO;AACV,YAAI,CAAC,OAAO;AACH,iBAAA;AAAA,QAAA;AAGH,cAAA,eAAeA,aAAU,KAAK;AAEpC,eAAO,CAAC,eAAe,KAAK,CAAC,QAAQ;AAC5B,iBAAAA,GAAA,UAAU,GAAG,MAAM;AAAA,QAAA,CAC3B;AAAA,MAAA;AAAA,IAEJ,CAAA,EACA,SAASD,6BAAY,SAAS,EAAE;AAAA,IACnC,iBAAiBE,eAAI,QAAQ;AAAA,IAC7B,MAAMA,eAAI,OAAO,EAAE,MAAM,CAAC,cAAc,gBAAgB,CAAC;AAAA,EAC3D;AAEO,SAAAA,eAAI,OAAO,KAAK;AACzB;AC9LO,MAAM,kBAAkB;AAAA,EAC7B,UAAU;AAAA,IACR,UAAU;AACD,aAAA;AAAA,QACL,UAAU,cAAc,SAAS;AAAA,MACnC;AAAA,IAAA;AAAA,EAEJ;AAAA,EACA,MAAM;AAAA,IACJ,kBAAkB;AACT,aAAA;AAAA,QACL,UAAU;AAAA,UACR,EAAE,cAAc,MAAM,OAAO,CAAC,cAAc,EAAE;AAAA,UAC9C,GAAG,cAAc,KAAK,oBAAoB;AAAA,QAAA;AAAA,MAE9C;AAAA,IACF;AAAA,IACA,UAAU;AACD,aAAA;AAAA,QACL,UAAU;AAAA,UACR,EAAE,cAAc,MAAM,OAAO,CAAC,cAAc,EAAE;AAAA,UAC9C;AAAA,YACE,cAAc;AAAA,YACd,OAAO;AAAA,cACL;AAAA,gBACE,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,WAAW,EAAE,IAAI,IAAI,gBAAgB,GAAG;AAAA,gBACxC,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,WAAW;AAAA,kBACT,IAAI,QAAQ,wCAAwC;AAAA,kBACpD,gBAAgB;AAAA,gBAClB;AAAA,gBACA,YAAY;AAAA,cAAA;AAAA,YACd;AAAA,UACF;AAAA,QACF;AAAA,MAEJ;AAAA,IAAA;AAAA,EACF;AAEJ;ACba,MAAA,wBAAwB,CACnC,iBACA,aACG;AACa,kBAAA,QAAQ,CAAC,SAAS;AAC5B,QAAA,EAAE,kBAAkB,OAAO;AAG7B,eAAS,CAAC,EAAE,OAAO,KAAK,IAAI;AAC5B;AAAA,IAAA;AAKF,aAAS,KAAK,IAAI;AAAA,EAAA,CACnB;AACH;AChDA,MAAM,gCAAgC,CAAC,MAAc,aAAqB;AACjE,SAAA,cAAcD,aAAU,QAAQ,CAAC,IAAInC,mBAAAA,QAAUmC,GAAA,UAAU,IAAI,CAAC,CAAC;AACxE;ACKa,MAAA,wBAAwB,CACnC,YACA,eACkB;AAClB,SAAO,WACJ,OAAO,CAAC,EAAE,WAAW;AACb,WAAA,SAAS,WAAW,YAAY;AAAA,EACxC,CAAA,EACA,IAAI,CAAC,EAAE,KAAA,MAAW,IAAI;AAC3B;AC0BO,MAAM,QAAQ;AAAA,EACnB,aAAa;AAAA,IACX,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,GACe;AACT,YAAA,qBAAqB,sBAAsB,kBAAkB,UAAU;AAEzE,UAAA;AACJ,UAAI,kBAAkB,YAAY;AAChC,yBAAiB,eAAe,aAAa;AAAA,UAC3C;AAAA,UACA,cAAc;AAAA,UACd,CAAC;AAAA,UACD,EAAE,aAAa,IAAI,cAAc,CAAG,EAAA;AAAA,QACtC;AAAA,MAAA,OACK;AACL,yBAAiB,eAAe,aAAa;AAAA,UAC3C;AAAA,UACA,cAAc;AAAA,QAChB;AAAA,MAAA;AAGF,aAAO,YAAY;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,QACA,cAAc;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK,EAAE,eAAoB;AAEnB,cAAA,WAA4B,CAAC,EAAE,cAAc,MAAM,OAAO,CAACH,WAAS,GAAG;AAEzE,YAAA,YAAY,SAAS,MAAM;AACP,gCAAA,YAAY,QAAQ,MAAM,QAAQ;AAAA,QAAA;AAG1D,eAAO,EAAE,SAAS;AAAA,MACpB;AAAA,MACA,SAAS,EAAE,aAAa,MAAM,MAAM,YAAY,GAAG,QAAa;AAExD,cAAA,WAA4B,CAAC,EAAE,cAAc,MAAM,OAAO,CAAA,GAAI;AACpE,cAAM,iBAAiB,WAAW,gBAAgB,CAAC,aAAa,YAAY,IAAI,GAAG;AAAA,UACjF;AAAA,UACA,MAAM,YAAY;AAAA,UAClB;AAAA,UACA,GAAG;AAAA,QAAA,CACJ;AAEG,YAAA,YAAY,SAAS,UAAU;AACX,gCAAA,YAAY,QAAQ,UAAU,QAAQ;AAAA,QAAA;AAG9D,YAAI,gBAAgB;AAClB,gBAAM,mBAAmB;AAAA,YACvB,cAAc;AAAA,cACZ,IAAI,QAAQ,oDAAoD;AAAA,cAChE,gBAAgB;AAAA,YAClB;AAAA,YACA,OAAO;AAAA,UACT;AAEA,mBAAS,KAAK,gBAAgB;AAAA,QAAA;AAGhC,eAAO,EAAE,SAAS;AAAA,MAAA;AAAA,IACpB;AAAA,EAEJ;AAAA,EACA,WAAW;AAAA,IACT,OACE,eACA,eACA,eAGA,yCACA3D,UACA,YAGA;AAEA,YAAM,aAA+B,eAAe,QAAQ,cAAc,CAAC;AACrE,YAAA,qBAAqB,sBAAsB,YAAYA,QAAO;AAEhE,UAAA;AACI,cAAA,iBAAiB,eAAe,aAAa;AAAA,UACjD;AAAA,UACA,cAAc;AAAA,UACd;AAAA,UACAA;AAAA,QACF;AAEA,eAAO,WAAW;AAAA,UAChB,CAAC,aAAa,aAAa;AAAA,UAC3B;AAAA,UACA;AAAA,UACA,cAAc;AAAA,UACd;AAAA,UACAA;AAAA,QACF;AAAA,eACO,KAAK;AACJ,gBAAA,MAAM,0BAA0B,GAAG;AAE3C,eAAO,eAAe,QAAQ,oBAAoB,cAAc,UAAU;AAAA,MAAA;AAAA,IAE9E;AAAA,IACA,MAAM;AAAA,MACJ,SAAS,EAAE,MAAM,MAAM,MAAM,YAAY,GAAG,QAA0B;AAChE,YAAA;AACF,gBAAMqE,YAAW,eAAe,SAAS,IAAI,EAAE,MAAM,IAAI,EAAE;AAC3D,gBAAM,aAAa,WAAW,gBAAgB,CAAC,aAAa,IAAI,GAAG;AAAA,YACjE;AAAA,YACA;AAAA,YACA;AAAA,YACA,GAAG;AAAA,UAAA,CACJ;AAED,gBAAM,WAAWA,UAAS,OAAO,CAAC,KAAiB,YAAiB;AAC9D,gBAAA,QAAQ,iBAAiB,MAAM;AACjC,kBAAI,KAAK,OAAO;AAAA,YAAA,OACX;AACL,kBAAI,KAAK,EAAE,GAAG,SAAS,OAAO,CAAC,GAAG,QAAQ,OAAO,GAAG,UAAU,GAAG;AAAA,YAAA;AAG5D,mBAAA;AAAA,UACT,GAAG,EAAE;AAUL,iBAAO,EAAE,SAAS;AAAA,iBACX,KAAK;AACZ,kBAAQ,MAAM,GAAG;AAEV,iBAAA,EAAE,UAAU,GAAG;AAAA,QAAA;AAAA,MAE1B;AAAA,MACA,KAAK,EAAE,MAAM,MAAM,MAAM,cAA4B;AAC/C,YAAA;AACF,iBAAO,eAAe,KAAK,IAAI,EAAE,MAAM,MAAM,UAAU;AAAA,iBAChD,KAAK;AACL,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,aAAa;AAAA,IACX,OACE,mBACA,WACA,OACA,eAGA,YACA,cACA;AACA,YAAM,gBAAgB,OAAO,OAAO,YAAY,EAAE,IAAI,CAAC,gBAAgB;AACrE,eAAO,YAAY,OAAO;AAAA,MAAA,CAC3B;AAED,YAAM,cAAc,OAAO,OAAO,YAAY,EAAE,IAAI,CAAC,gBAAqB;AACjE,eAAA,aAAa,QAAQ,cAAc;AAAA,MAAA,CAC3C;AAEK,YAAA,aAAa,YACf,kBAAkB,OAAO,CAAC,QAAQ,QAAQ,KAAK,IAC/C;AAEJ,YAAM,qBAAqB,YACvB,cAAc,OAAO,CAAC,aAAa;AACjC,cAAM,EAAE,OAAA,IAAW,aAAa,KAAK;AAErC,eAAO,OAAO,iBAAiB;AAAA,MAChC,CAAA,IACD;AAEJ,YAAM,mBAAmB,YACrB,YAAY,OAAO,CAAC,eAAe;AACjC,cAAM,EAAE,OAAA,IAAW,aAAa,KAAK;AAErC,eAAO,OAAO,eAAe;AAAA,MAC9B,CAAA,IACD;AAGJ,YAAM,kBAAkB,OAAO,OAAO,YAAY,EAAE,IAAI,CAAC,gBAAgB;AAChE,eAAA,aAAa,QAAQ,kBAAkB;AAAA,MAAA,CAC/C;AAED,YAAM,uBAAuB,YACzB,gBAAgB,OAAO,CAAC,mBAAmB;AACzC,cAAM,EAAE,OAAA,IAAW,aAAa,KAAK;AACrC,cAAM,wBAAwB,OAAO;AAErC,eAAO,mBAAmB;AAAA,MAC3B,CAAA,IACD;AAEJ,YAAM,mBAAmB,wBAAwB;AAAA,QAC/C,sBAAsB;AAAA,QACtB,gBAAgB,cAAc;AAAA,QAC9B,eAAe;AAAA,QACf,aAAa;AAAA,QACb,iBAAiB;AAAA,MAAA,CAClB;AAGD,aAAO,WAAW;AAAA,QAChB,CAAC,aAAa;AAAA,QACd;AAAA,QACA;AAAA,QACA,cAAc;AAAA,QACd;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK,EAAE,cAAmB;AACxB,YAAI,eAAe,UAAU;AACpB,iBAAA,gBAAgB,KAAK,OAAO;AAAA,QAAA;AAG9B,eAAA,gBAAgB,KAAK,KAAK;AAAA,MACnC;AAAA,MACA,SAAS,EAAE,cAAmB;AAC5B,cAAMA,YAAW,gBAAgB,SAC9B,QAAA,EACA,SAAS,IAAI,CAAC,YAAY,QAAQ,KAAK,EACvC,KAAK;AACR,cAAM,aAAa,WAAW,gBAAgB,CAAC,aAAa,CAAC;AAEtD,eAAA;AAAA,UACL,UAAU;AAAA,YACR;AAAA,cACE,OAAO,CAAC,GAAGA,WAAU,GAAG,UAAU;AAAA,YAAA;AAAA,UACpC;AAAA,QAEJ;AAAA,MAAA;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,WAAW;AAAA,IACT,OACE,wBACA,mBACA,eAGA,YAAY,OACZ,YACA,sBACA,WAA0C,MAC1C;AACM,YAAA,aAAa,YACf,uBAAuB,OAAO,CAAC,QAAgC,QAAQ,QAAQ,IAC/E;AACJ,YAAM,kBAAkB,OAAO,OAAO,UAAU,EAAE,IAAI,CAAC,cAAmB;AACxE,eAAO,WAAW,QAAQ;AAAA,MAAA,CAC3B;AAED,YAAM,wBAAwB;AAAA,QAC5B;AAAA,QACA;AAAA,MACF;AAEM,YAAA,uBAAuB,YACzB,gBAAgB,OAAO,CAAC,mBAAmB,mBAAmB,qBAAqB,IACnF;AAEG,aAAA;AAAA,QACL;AAAA,QACA,cAAc;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,WAAW;AACF,eAAA;AAAA,UACL,UAAU,cAAc,SAAS;AAAA,QACnC;AAAA,MACF;AAAA,MACA,OAAO;AACE,eAAA;AAAA,UACL,UAAU,cAAc,KAAK;AAAA,QAC/B;AAAA,MAAA;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,2BAA2B;AAAA,IACzB,MAAM;AAAA,MACJ,WAAW;AACF,eAAA,gBAAgB,SAAS,QAAQ;AAAA,MAC1C;AAAA,MACA,KAAK,EAAE,QAAa;AACZ,cAAA,sBAAsB,MAAM,mBAAmB;AAErD,YAAI,qBAAqB;AAChB,iBAAA,gBAAgB,KAAK,gBAAgB;AAAA,QAAA;AAGvC,eAAA,gBAAgB,KAAK,QAAQ;AAAA,MAAA;AAAA,IACtC;AAAA,EAEJ;AAAA,EACA,cAAc;AAAA,IACZ,OAAO,eAA2B,aAAkB;AAClD,YAAM,oBAAoB,cACvB,OAAO,CAAC,QAAQ,QAAQ,YAAY,IAAI,EACxC,IAAI,CAAC,QAAQ,IAAI,aAAa;AAEjC,aAAO,qBAAqB,iBAAiB;AAAA,IAC/C;AAAA,IACA,MAAM;AAAA,MACJ,UAAU,OAAO,EAAE,UAAU,CAAA;MAC7B,OAAO;AACL,eAAO,aAAa;AAAA,MAAA;AAAA,IACtB;AAAA,EACF;AAEJ;ACtXA,MAAM,kBAAkB,MAAM,CAAC,UAAe,MAAM,GAAGpI,gBAAQ,YAAY,KAAKqI,QAAA;AAUzE,MAAM,sBAAsB,MACjCC,QAAA,eAAe,gBAAgB,GAAG,CAAC,aAAa;AACvC,SAAA;AACT,CAAC;ACEU,MAAA,qBAAqB,CAAC,MAA2B,iBAA+B;AACrF,QAAA,OAAOpB,qBAAI,MAAM,CAAC,eAAe,UAAU,MAAM,GAAG,EAAE;AAG5D,MAAI,SAAS,gBAAgB,SAAS,aAAa,MAAM;AAChD,WAAA;AAAA,EAAA;AAGT,QAAM,wBAAwBA,aAAA;AAAA,IAC5B;AAAA,IACA,CAAC,eAAe,UAAU,YAAY;AAAA,IACtC,CAAA;AAAA,EACF;AAEM,QAAA,qBAAqB,sBAAsB,OAAO,CAAC,EAAE,UAAU,MAAM,sBAAsB;AACzF,UAAA,eAAeG,QAAAA,gBAAgB,UAAU,eAAe;AAEvD,WAAA,SAAS,cAAc,CAAC,CAAC,UAAU,SAAS,EAAE,SAAS,gBAAgB,EAAE;AAAA,EAAA,CACjF;AAED,SAAO,mBAAmB,WAAW;AACvC;ACtCO,MAAM,yBAAyB,CACpC,aAAa,IACb,WACA,qBACmB;AACnB,QAAM,oBAAkC;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,oCAAoC,eAAe;AAEzD,MAAI,mCAAmC;AAC9B,WAAA;AAAA;AAAA,MAEL,CAAC,GAAG,kBAAkB,MAAM,GAAG,EAAE,GAAG,OAAO,GAAG,kBAAkB,MAAM,EAAE,CAAC;AAAA,MACzE,CAAC,aAAa,aAAa;AAAA,IAC7B;AAAA,EAAA;AAIF,MAAI,YAAY;AACR,UAAA,iBAAiB,kBAAkB,WAAW,gBAAgB;AACpE,UAAM,6BAA6B,kBAAkBG,QAAA;AAC/C,UAAA,oCACJ,CAAC,qCAAqC,CAAC;AACzC,QAAI,mCAAmC;AACrC,aAAO,CAAC,mBAAmB,CAAC,WAAW,CAAC;AAAA,IAAA;AAAA,EAC1C;AAGF,SAAO,CAAC,iBAAiB;AAC3B;ACjDO,MAAM,oBAAoB,CAAC,SAChC,KAAK,OAAO,CAAC,KAAU,YAAiB;AACtC,QAAM,QAAQ,QAAQ,MAAM,OAAO,CAACe,MAAUC,aAAiB;AAC7D,QAAIA,SAAQ,MAAM;AAChBD,WAAI,KAAKC,SAAQ,IAAI;AAAA,IAAA;AAGhBD,WAAAA;AAAAA,EACT,GAAG,EAAE;AAEL,SAAO,CAAC,GAAG,KAAK,GAAG,KAAK;AAC1B,GAAG,EAAE;AC4DP,MAAM,gBAAgBxH,iBAAO,OAAA;AAAA;AAAA;AAItB,MAAM,YAAY,MAAM;AACvB,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,uBAAuB;AAE3B,QAAM,YAAYkC,YAAAA,aAAa,aAAa,CAAC,UAAU,MAAM,SAAS;AACtE,QAAM,iBAAiBA,YAAAA,aAAa,aAAa,CAAC,UAAU,MAAM,aAAa,GAAG;AAC5E,QAAA,cAAc,eAAe,cAAc;AAEjD,QAAM,oBAAoB9C,iBAAM,QAAQ,qBAAqB,CAAA,CAAE;AAC/D,QAAM,WAAWoG,WAAAA,YAAY;AACvB,QAAA,EAAE,mBAAmB,IAAInG,4BAAgB;AAC/C,QAAM,eAAeqI,WAAAA,YAAY,CAAC,UAAU,kBAAkB,KAAK,GAAGC,uBAAY;AAClF,QAAM,WAAWC,eAAAA,YAAY;AACvB,QAAA,EAAE,WAAW,IAAIrI,wBAAY;AAC7B,QAAA,EAAE,cAAc,IAAID,kBAAQ;AAC5B,QAAA,YAAY,UAAUL,gBAAQ;AAC9B,QAAA,cAAmB,WAAW,KAAK;AACnC,QAAA,oBAAoB,YAAY,WAAW;AAE3C,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,eAAe;AAEb,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,IACE;AAEE,QAAA,eACJ,cAAc,iBAAiB,cAAc,cAAc,CAAC,SAAS,IAAI,CAAC,WAAW,SAAS;AAEhGG,mBAAM,UAAU,MAAM;AACpB,QAAI,QAAQ;AACV,YAAM,6BAA6B,uBAAuB;AAAA,QACxD;AAAA,MACF;AAGA,UAAI,cAAc,gBAAgB;AAChB,wBAAA;AAAA,MAAA;AAGlB,UAAI,eAAe,UAAU,cAAc,eAAe,cAAc,eAAe;AACrF,mBAAW,4BAA4B;AAAA,MAAA;AAGzC,YAAM,mBAAmB,CAAC,GAAG,cAAc,UAAU,YAAY;AAO3D,YAAA,yBACJ,cAAc+G,qBAAI,eAAe,kBAAkB,CAAE,CAAA,GAAG,iBAAiB,KAAK;AAG5E,UAAA,cAAc,kBAAkB,eAAe,QAAQ;AAChD,iBAAA;AAAA,UACP,MAAM0B,QAAA;AAAA,UACN;AAAA,UACA;AAAA,UACA,MAAM;AAAA,YACJ,MAAM;AAAA,UAAA;AAAA,QACR,CACD;AAAA,MAAA;AAIC,UAAA,cAAc,iBAAiB,eAAe,UAAU;AACjD,iBAAA;AAAA,UACP,MAAMA,QAAA;AAAA,UACN;AAAA,UACA;AAAA,UACA,MAAM;AAAA,YACJ,iBAAiB;AAAA,UACnB;AAAA,UACA,eAAe,CAAA;AAAA,QAAC,CACjB;AAAA,MAAA;AAIC,UAAA,cAAc,iBAAiB,eAAe,QAAQ;AAClD,cAAA,EAAE,aAAa,iBAAiB,MAAAC,OAAM,eAAe,YAAY,iBAAiB3B,aAAA;AAAA,UACtF;AAAA,UACA,CAAC,GAAG,cAAc,QAAQ;AAAA,UAC1B;AAAA,YACE,aAAa;AAAA,YACb,eAAe,CAAC;AAAA,YAChB,cAAc;AAAA,YACd,YAAY;AAAA,UAAA;AAAA,QAEhB;AAES,iBAAA;AAAA,UACP,MAAM0B,QAAA;AAAA,UACN;AAAA,UACA;AAAA,UACA,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,MAAAC;AAAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UAAA;AAAA,QACF,CACD;AAAA,MAAA;AAIC,UAAA,cAAc,eAAe,eAAe,QAAQ;AACtD,cAAM,OAAO3B,aAAA,QAAI,eAAe,cAAc,CAAA,CAAE;AAEvC,iBAAA;AAAA,UACP,MAAM0B,QAAA;AAAA,UACN;AAAA,UACA;AAAA,UACA,MAAM;AAAA,YACJ,aAAa,KAAK,OAAO;AAAA,YACzB,UAAU,KAAK;AAAA,YACf,MAAM,KAAK,OAAO;AAAA,UAAA;AAAA,QACpB,CACD;AAAA,MAAA;AAIC,UAAA,cAAc,+BAA+B,eAAe,QAAQ;AACtE,cAAM,kBAAkB;AAAA,UACtB,GAAG;AAAA;AAAA;AAAA,UAGH,YAAY,CAAC;AAAA,UACb,MAAM;AAAA,UACN,iBAAiB;AAAA,UACjB,mBAAmB,EAAE,MAAM,YAAY;AAAA,QACzC;AAES,iBAAA;AAAA,UACP,MAAME,QAAA;AAAA,UACN;AAAA,QAAA,CACD;AAAA,MAAA;AAIH,UAAI,eAAe;AACjB,cAAM,8BAA8B;AAAA,UAClC5B,qBAAI,eAAe,kBAAkB,EAAE;AAAA,UACvC;AAAA,QACF;AACA,cAAM,kBAAkB;AAAA,UACtB,GAAG;AAAA,UACH,MAAM;AAAA,QACR;AAII,YAAA,kBAAkB,eAAe,eAAe,QAAQ;AACtD,cAAA,CAAC,gBAAgB,YAAY;AAC3B6B,iCAAA,iBAAiB,cAAc,KAAK;AAAA,UAAA;AAAA,QAC1C;AAGF,YAAI,cAAc,eAAe;AACtB,mBAAA;AAAA,YACP,MAAMC,QAAA;AAAA,YACN;AAAA,YACA,WAAW,eAAe;AAAA,YAC1B,6BAA6B;AAAA;AAAA,YAE7B;AAAA,UAAA,CACD;AAAA,QAAA,OACI;AACI,mBAAA;AAAA,YACP,MAAMC,QAAA;AAAA,YACN;AAAA,YACA,sBAAsB/B,aAAI,QAAA,4BAA4B,CAAC,KAAK,OAAO,GAAG,OAAO;AAAA,YAC7E,WAAWA,aAAI,QAAA,4BAA4B,CAAC,KAAK,KAAK,GAAG,OAAO;AAAA,YAChE,WAAW,eAAe;AAAA,YAC1B,6BAA6B;AAAA,YAC7B;AAAA,YACA;AAAA,UAAA,CACD;AAAA,QAAA;AAAA,MACH;AAAA,IACF,OACK;AACI,eAAA,EAAE,MAAMgC,QAAAA,aAAa;AAAA,IAAA;AAAA,EAChC,GAEC;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,QAAM,wBAAwB,cAAc;AAC5C,QAAM,sBAAsB,cAAc;AAC1C,QAAM,sBAAsB,cAAc;AAC1C,QAAM,iCAAiC,cAAc;AAC/C,QAAA,uBAAuB,kBAAkB,eAAe;AAC9D,QAAM,aAAa,eAAe;AAClC,QAAM,+BACJhC,aAAAA,QAAI,cAAc,mBAAmB,KAAK,KAAK;AACjD,QAAM,yBAAyB,SAAS;AACxC,QAAM,oBAAoB,cAAc;AACxC,QAAM,qBAAqB,cAAc;AACzC,QAAM,MAAMiB,QAAA,UAAU,aAAa,eAAe,EAAE;AAC9C,QAAA,aAAajB,qBAAI,eAAe,CAAC,GAAG,cAAc,UAAU,YAAY,GAAG,IAAI;AAIrF,QAAM,oBAAoB,YAAY;AAChC,QAAA;AACE,UAAA,iBACJ,gCAAgC,SAAS,MACrCA,qBAAI,cAAc,qBAAqB,CAAE,CAAA,IACzC;AAEN,QAAI,uBAAuB;AACzB,eAAS,MAAM,YAAY;AAAA,QACzB,OAAO,KAAK,YAAY;AAAA,QACxB,eAAe;AAAA;AAAA,QAEfA,qBAAI,eAAe,CAAC,GAAG,cAAc,KAAK,GAAG,IAAI;AAAA,QACjD;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,eAIS,qBAAqB;AAC9B,eAAS,MAAM,UAAU;AAAA,QACvB,OAAO,KAAK,UAAU;AAAA,QACtB,aAAa,YAAY;AAAA,QACzB;AAAA,QACA,eAAe;AAAA,QACf;AAAA,QACA,aAAa,eAAe;AAAA,QAC5BA,aAAAA,QAAI,eAAe,CAAC,GAAG,cAAc,KAAK,GAAG,IAAI;AAAA;AAAA,MAEnD;AAAA,eACS,gCAAgC;AAChC,eAAA,MAAM,YAAY,OAAO;AAAA,QAChC,kBAAkBA,aAAAA,QAAI,eAAe,CAAC,GAAG,cAAc,UAAU,YAAY,GAAG,EAAE;AAAA,QAClF,eAAe,YAAa;AAAA,QAC5B;AAAA,QACA,YAAY,EAAE,cAAc,YAAY;AAAA,QACxC;AAAA,QACA,sBAAsB,YAAa,SAAS;AAAA,MAAA,CAC7C;AAAA,IAAA,WAMQ,wBAAwB,gCAAgC,wBAAwB;AACzF,eAAS,MAAM,UAAU;AAAA,QACvB,OAAO,KAAK,UAAU;AAAA,QACtBA,qBAAI,cAAc,8BAA8B,EAAE;AAAA,QAClD;AAAA,QACA,eAAe;AAAA,QACf;AAAA,QACA,aAAa,kBAAkB,eAAe;AAAA,MAChD;AAAA,IAAA,WAIS,uBAAuB,CAAC,wBAAwB;AACzD,YAAM,OAAO,kBAAkB,aAAa,aAAa,aAAa;AAEtE,UAAI,0CAA0C,CAAC;AAE/C,UAAI,SAAS,YAAY;AACvB,cAAM,uBAAuBA,aAAAA,QAAI,cAAc,CAAC,QAAQ,GAAG,IAAI;AAE/D,cAAM,8BAA8BA,aAAA;AAAA,UAClC;AAAA,UACA,CAAC,sBAAsB,UAAU,YAAY;AAAA,UAC7C,CAAA;AAAA,QACF;AAKA,kDAA0C,4BAA4B;AAAA,UACpE,CAAC,EAAE,MAAM,eAAiC;AAExC,gBAAI,eAAe,QAAQ;AAClB,qBAAA;AAAA,YAAA;AAIT,mBAAO,aAAa,YAAY;AAAA,UAAA;AAAA,QAEpC;AAAA,MAAA;AAEF,eAAS,MAAM,UAAU;AAAA,QACvBA,qBAAI,eAAe,cAAc,EAAE;AAAA,QACnC;AAAA,QACA;AAAA,QACA;AAAA,QACA,EAAE,cAAc,YAAY;AAAA,QAC5B;AAAA,MACF;AAAA,eACS,mBAAmB;AAC5B,eAAS,MAAM,aAAa,OAAO,yBAAyB,WAAW;AAAA,IAAA,OAClE;AAIL,UAAI,0BAA0B,8BAA8B;AAC1D,iBAAS,MAAM,UAAU;AAAA,UACvB,OAAO,KAAK,UAAU;AAAA,UACtBA,qBAAI,cAAc,8BAA8B,EAAE;AAAA,UAClD;AAAA,UACA,eAAe;AAAA,UACf;AAAA,UACA,aAAa,kBAAkB,eAAe;AAAA,QAChD;AAAA,MAAA,OACK;AAGL;AAAA,MAAA;AAAA,IACF;AAGF,UAAM,OAAO,SAAS,gBAAgB,EAAE,YAAY,OAAO;AAAA,EAC7D;AAEA,QAAM,eAAe/G,iBAAM;AAAA,IACzB,CAAC;AAAA,MACC,QAAQ,EAAE,MAAM,OAAO,MAAM,GAAG,KAAK;AAAA,IAAA,MAGjC;AACJ,YAAM,+BAA+B;AAAA,QACnC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEI,UAAA;AAEJ,UAAI,6BAA6B,SAAS,IAAI,KAAK,UAAU,IAAI;AACzD,cAAA;AAAA,MAAA,OACD;AACC,cAAA;AAAA,MAAA;AAGR,YAAM,eAAe,OAAO,OAAO,CAAA,GAAI,UAAU;AAGjD,UAAI,SAAS,OAAO;AAClB,eAAO,aAAa;AAAA,MAAA;AAItB,UAAI,SAAS,aAAa;AACxB,eAAO,aAAa;AAAA,MAAA;AAItB,aAAO,aAAa,IAAI;AAEf,eAAA;AAAA,QACP,MAAMgJ,QAAA;AAAA,QACN,QAAQ;AAAA,MAAA,CACT;AAEQ,eAAA;AAAA,QACP,MAAMC,QAAA;AAAA,QACN,MAAM,KAAK,MAAM,GAAG;AAAA,QACpB,OAAO;AAAA,QACP,GAAG;AAAA,MAAA,CACJ;AAAA,IACH;AAAA,IACA,CAAC,UAAU,UAAU;AAAA,EACvB;AAEA,QAAM,eAAe,OAAO,GAAyB,iBAAiB,eAAe;AACnF,MAAE,eAAe;AAEb,QAAA;AACF,YAAM,kBAAkB;AAExB,kCAA4B,cAAc;AACpC,YAAA,cAAc,cAAc,eAAe,YAAY;AAE7D,UAAI,uBAAuB;AAEzB,YAAI,YAAY;AACd,uBAAa,EAAE,GAAG,cAAc,KAAK,GAAG,WAAW,GAAG;AAEtD,mBAAS,EAAE,UAAU,YAAYpJ,QAAQ,QAAA,kBAAkB,GAAG,IAAI;AAGjC,2CAAA;AAAA,YAC/B;AAAA,YACA,WAAW;AAAA,UAAA,CACZ;AAAA,QAAA,OACI;AAED,cAAA,mBAAmB,eAAe,YAAY,GAAG;AACtC,yBAAA;AAEb,kBAAM,WAAW,YAAY;AAAA,UAAA,OACxB;AACc,+BAAA;AAAA,cACjB,MAAM;AAAA,cACN,SAAS,cAAc,EAAE,IAAI,8CAA+C,CAAA;AAAA,YAAA,CAC7E;AAAA,UAAA;AAGH;AAAA,QAAA;AAAA,MACF,WAES,cAAc,aAAa;AACpC,YAAI,YAAY;AAEd,gBAAM,eAAekI,QAAAA,mBAAmB,aAAa,aAAa,aAAa,QAAQ;AACvF,gBAAM,EAAE,UAAU,GAAG,KAAA,IAAS;AAEjB,uBAAA,MAAM,aAAa,cAAc,QAAQ;AAG7C,mBAAA;AAAA,YACP,UAAU,YAAYlI,QAAQ,QAAA,yBAAyB,QAAQ,IAAI,YAAY;AAAA,UAAA,CAChF;AAGgC,2CAAA;AAAA,YAC/B;AAAA,YACA,WAAW;AAAA,UAAA,CACZ;AAAA,QAAA,OACI;AACQ,uBAAA,cAAc,WAAW,SAAmC;AAG5D,uBAAA;AAEb;AAAA,QAAA;AAAA,iBAEO,mBAAmB;AAC5B,YAAIqJ,iBAAAA,QAAQ,YAAY,IAAI,MAAMA,iBAAAA,QAAQ,aAAa,IAAI,GAAG;AAE/C,uBAAA;AAEb;AAAA,QAAA;AAGW,qBAAA,YAAY,MAAM,YAAY;AAE3C;AAAA,iBAGS,gCAAgC;AACzC,cAAM,6BAAyD;AAAA,UAC7D,gBAAgB,EAAE,GAAG,cAAc,aAAa,eAAe;AAAA,UAC/D;AAAA,UACA;AAAA,UACA,kBAAkB;AAAA,QACpB;AAEA,YAAI,eAAe,QAAQ;AACzB,mCAAyB,0BAA0B;AAAA,QAAA,OAC9C;AACL,kCAAwB,0BAA0B;AAAA,QAAA;AAGpD,YAAI,gBAAgB;AACe,2CAAA;AAAA,YAC/B;AAAA,YACA,WAAW;AAAA,UAAA,CACZ;AAAA,QAAA,OACI;AACQ,uBAAA;AAAA,QAAA;AAGf;AAAA,MAAA,WACS,uBAAuB,CAAC,8BAA8B;AAC/D,cAAM,yBAAyB,kBAAkB;AAGjD,YAAI,wBAAwB;AAC1B,uBAAa,cAAc,WAAW,WAAW,eAAe,QAAQ,WAAW;AAInF,cAAI,YAAY;AAEL,qBAAA;AAAA,cACP,MAAMC,QAAAA;AAAAA,YAAA,CACP;AAED,yBAAa,OAAO;AACpB,0CAA8B,EAAE,mBAAmB,aAAa,KAAA,CAAM;AAAA,UAAA,OACjE;AACQ,yBAAA;AAAA,UAAA;AAGf;AAAA,QAAA;AAIF,YAAI,CAAC,sBAAsB;AACzB,uBAAa,cAAc,WAAW,WAAW,eAAe,QAAQ,WAAW;AAEnF,cAAI,gBAAgB;AACe,6CAAA;AAAA,cAC/B;AAAA,cACA,WAAW;AAAA,YAAA,CACZ;AAAA,UAAA,OACI;AACQ,yBAAA;AAAA,UAAA;AAGf;AAAA,QAAA;AAKF,YAAI,wBAAwB;AAEO,2CAAA;AAMxB,mBAAA;AAAA,YACP,MAAMC,QAAA;AAAA,YACN;AAAA,UAAA,CACD;AAGD;AAAA,QAAA;AAMF;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA;AAAA;AAAA,UAGA,eAAe;AAAA;AAAA,UAEf;AAAA;AAAA;AAAA,UAGA;AAAA,QACF;AAEA,YAAI,gBAAgB;AACe,2CAAA;AAAA,YAC/B;AAAA,YACA;AAAA,UAAA,CACD;AAAA,QAAA,OACI;AACQ,uBAAA;AAAA,QAAA;AAAA,MACf,WASS,uBAAuB,8BAA8B;AAE9D,YAAI,wBAAwB;AAI1B,qBAAW,wCAAwC;AAI1C,mBAAA;AAAA,YACP,MAAMC,QAAA;AAAA,YACN;AAAA,UAAA,CACD;AAEgC,2CAAA;AAGjC;AAAA,QAAA;AAKF,cAAM,EAAE,UAAU,MAAM,GAAG,KAAS,IAAA;AAGpC,cAAM,eAAetB,QAAA,mBAAmB,kBAAkB,aAAa,QAAQ;AAE/E;AAAA;AAAA,UAEE;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA;AAAA,UACA;AAAA,UACA;AAAA;AAAA;AAAA,UAGA;AAAA,QACF;AAEa,qBAAA,cAAc,WAAW,WAAW,KAAK;AAE7C,iBAAA,EAAE,MAAMgB,QAAAA,aAAa;AAG9B,YAAI,gBAAgB;AAClB,2CAAiC,EAAE,WAAW,cAAc,WAAW,cAAc;AAAA,QAAA,OAChF;AACQ,uBAAA;AAAA,QAAA;AAGf;AAAA,MAAA,OACK;AAEL,YAAI,wBAAwB;AAC1B,cAAI,8BAA8B;AAChC,kBAAM,EAAE,UAAU,MAAM,GAAG,SAAS,aAAa;AACjD,kBAAM,eAAehB,QAAA;AAAA,cACnB,aAAa,kBAAkB;AAAA,cAC/B;AAAA,YACF;AAEA;AAAA;AAAA,cAEE;AAAA;AAAA;AAAA;AAAA;AAAA,cAKA;AAAA,cACA;AAAA,cACA;AAAA;AAAA;AAAA,cAGA;AAAA,YACF;AAGiC,6CAAA,mBAAmB,CAAC,YAAY,CAAC;AAIlE,6CAAiC,EAAE,WAAW,cAAc,WAAW,cAAc;AAAA,UAAA,OAChF;AAEuB,wCAAA,mBAAmB,aAAa,UAAU;AAEzD,yBAAA;AAAA,UAAA;AAAA,QACf,OACK;AACL,kBAAQ,MAAM,0BAA0B;AAAA,QAAA;AAG1C;AAAA,MAAA;AAGO,eAAA;AAAA,QACP,MAAMgB,QAAAA;AAAAA,MAAA,CACP;AAAA,aACM,KAAU;AACX,YAAA,SAAS,kBAAkB,GAAG;AAE3B,eAAA;AAAA,QACP,MAAMC,QAAA;AAAA,QACN;AAAA,MAAA,CACD;AAAA,IAAA;AAAA,EAEL;AAEA,QAAM,qBAAqB,MAAM;AAE/B,UAAM,UAAU,OAAO;AAAA,MACrB,cAAc;AAAA,QACZ,IAAI;AAAA,QACJ,gBAAgB;AAAA,MACjB,CAAA;AAAA,IACH;AAEA,QAAI,SAAS;AACE,mBAAA;AAEJ,eAAA;AAAA,QACP,MAAMD,QAAAA;AAAAA,MAAA,CACP;AAAA,IAAA;AAAA,EAEL;AAEA,QAAM,eAAe,MAAM;AAEzB,QAAI,CAACxI,iBAAA,QAAQ,cAAc,WAAW,GAAG;AACpB,yBAAA;AAAA,IAAA,OACd;AACQ,mBAAA;AAEJ,eAAA;AAAA,QACP,MAAMwI,QAAAA;AAAAA,MAAA,CACP;AAAA,IAAA;AAAA,EAEL;AAEM,QAAA,uBAAuB,CAAC,QAAgB;AAC5C,QAAI,QAAQ,YAAY;AACtB;AAAA,IAAA;AAGF,QAAI,uBAAuB;AACzB,iBAAW,8BAA8B;AAEzC;AAAA,IAAA;AAGF,QAAI,cAAc,eAAe;AAC/B,iBAAW,mCAAmC;AAAA,IAAA;AAAA,EAElD;AAEM,QAAA,8BAA8B,CAAC,mBAA4B;AAC/D,QACE,cAAc,eACd,cAAc,iBACd,kBAAkB,iBAClB,gBACA;AACA,iBAAW,+BAA+B;AAAA,IAAA;AAAA,EAE9C;AAEA,QAAM,2BAA2B,MAAM;AACrC,QAAI,cAAc,gBAAgB;AACzB,aAAA;AAAA,IAAA;AAGT,QAAI,cAAc,aAAa;AACtB,aAAA;AAAA,IAAA;AAGL,QAAAO,aAAA,QAAI,cAAc,iBAAiB,GAAG;AACjC,aAAA;AAAA,IAAA;AAGF,WAAA;AAAA,EACT;AAGA,QAAM,sBAAsB;AAAA,IAC1B;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,EACF;AAEA,MAAI,CAAC,WAAW;AACP,WAAA;AAAA,EAAA;AAGT,QAAM,gBAAgBvC,aAAAA,QAAI,OAAO,CAAC,WAAW,MAAM,GAAG;AAAA,IACpD,UAAU,OAAO;AAAA,MACf,UAAU,CAAA;AAAA,IAAC;AAAA,IAEb,MAAM,OAAO;AAAA,MACX,UAAU,CAAA;AAAA,IACZ;AAAA,EAAA,CACD;AAEK,QAAA,uCACJ,cAAc,gBAAgB,cAAc;AAE9C,QAAM,oBAAoB;AAAA,IACxB,cAAc;AAAA,MACZ,wBAAwB;AAAA,MACxB,uBAAuB;AAAA,MACvB,8BAA8B;AAAA,MAC9B,eAAe;AAAA,MACf,4BAA4B;AAAA,MAC5B,eAAe;AAAA,MACf,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,0BAA0B;AAAA,MAC1B,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,wBAAwB;AAAA,MACxB,eAAe;AAAA,MACf,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,GAAG;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAeA,aAAAA,QAAI,eAAe,CAAC,GAAG,cAAc,UAAU,aAAa,GAAG,EAAE;AAAA,IAChF;AAAA,IACA,kBAAkB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEM,QAAAwC,gBAAe,cAAc,SAAS;AAAA,IAC1C,MAAM;AAAA,IACN,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA,mBAAmB,cAAc,eAAe,CAAC;AAAA,IACjD;AAAA,EACD,CAAA,EAAE;AACG,QAAAtB,YAAW,cAAc,KAAK;AAAA,IAClC,MAAM;AAAA,IACN,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA,mBAAmB,cAAc,eAAe,CAAC;AAAA,IACjD;AAAA,EACD,CAAA,EAAE;AAEG,QAAA,qBAAqB,kBAAkBA,SAAQ;AAE/C,QAAA,yBAAyB,kBAAkBsB,aAAY;AAC7D,QAAM,uBAAuB,OAAO,KAAK,UAAU,EAAE;AAAA,IAAK,CAAC,QACzD,mBAAmB,SAAS,GAAG;AAAA,EACjC;AAEA,QAAM,2BAA2B,OAAO,KAAK,UAAU,EAAE;AAAA,IAAK,CAAC,QAC7D,uBAAuB,SAAS,GAAG;AAAA,EACrC;AAEA,QAAM,aAAaxC,aAAAA,QAAI,cAAc,CAAC,WAAW,UAAU,MAAM,CAAC;AAElE,QAAM,0BAA0B,MAC9B,eAAe,UAAU,WAAW,MAAM,CAAC,EAAE,KAAK,MAAM,SAAS,cAAc,IAAI;AAErF,QAAM,oBAAoB,MAAM;AAC9B,QAAI,2BAA2B;AAC7B,iBAAW,+BAA+B;AAAA,IAAA;AAAA,EAE9C;AAGE,SAAA/F,2BAAA,IAACyC,aAAM,MAAA,MAAN,EAAW,MAAM,QAAQ,cAAc,cACtC,UAAA3C,2BAAA,KAAC2C,aAAM,MAAA,SAAN,EACC,UAAA;AAAA,IAAAzC,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,IACC,sBACCA,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,cAAc;AAAA,MAAA;AAAA,IACtB;AAAA,IAED,CAAC,sBACCF,2BAAAA,KAAA,eAAA,EAAc,UAAU,cACvB,UAAA;AAAA,MAACE,2BAAAA,IAAAyC,aAAA,MAAM,MAAN,EACC,UAAA3C,2BAAA;AAAA,QAAC4C,aAAAA,KAAK;AAAA,QAAL;AAAA,UACC,SAAQ;AAAA,UACR,OAAO;AAAA,UACP,eAAe,CAAC,UAAU;AACxB,yBAAa,KAAK;AAClB,iCAAqB,KAAK;AAAA,UAC5B;AAAA,UACA,UACE,uBAAuB,UAAU,2BAA2B,aAAa;AAAA,UAG3E,UAAA;AAAA,YAAC5C,2BAAAA,KAAAiC,aAAAA,MAAA,EAAK,gBAAe,iBACnB,UAAA;AAAA,cAAA/B,2BAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBAAA;AAAA,cACF;AAAA,cACAF,2BAAAA,KAAC4C,aAAK,KAAA,MAAL,EACC,UAAA;AAAA,gBAAA1C,2BAAA,IAAC0C,aAAK,KAAA,SAAL,EAAa,OAAM,SACjB,UAAc,cAAA;AAAA,kBACb,IAAI,QAAQ,6BAA6B;AAAA,kBACzC,gBAAgB;AAAA,gBACjB,CAAA,GACH;AAAA,gBACA1C,+BAAC0C,aAAAA,KAAK,SAAL,EAAa,OAAM,YAAW,UAAU,yBAAyB,GAC/D,UAAc,cAAA;AAAA,kBACb,IAAI,QAAQ,iCAAiC;AAAA,kBAC7C,gBAAgB;AAAA,gBAAA,CACjB,EACH,CAAA;AAAA,cAAA,EACF,CAAA;AAAA,YAAA,GACF;AAAA,YACA1C,2BAAAA,IAAC2C,aAAQ,SAAA,EAAA,cAAc,EAAG,CAAA;AAAA,YACzB3C,2BAAA,IAAA0C,aAAA,KAAK,SAAL,EAAa,OAAM,SAClB,UAAC1C,+BAAA+B,aAAAA,MAAA,EAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA/B,2BAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAMiH;AAAA,gBACN;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,UAAU;AAAA,cAAA;AAAA,eAEd,EACF,CAAA;AAAA,YACCjH,2BAAA,IAAA0C,aAAA,KAAK,SAAL,EAAa,OAAM,YAClB,UAAC1C,+BAAA+B,aAAAA,MAAA,EAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA/B,2BAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAMuI;AAAA,gBACN;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,UAAU;AAAA,cAAA;AAAA,eAEd,EACF,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA,GAEJ;AAAA,MACAzI,2BAAAA,KAAC2C,aAAM,MAAA,QAAN,EACC,UAAA;AAAA,QAAAzC,2BAAA,IAACwD,aAAO,QAAA,EAAA,SAAQ,YAAW,SAAS,cACjC,UAAA,cAAc,EAAE,IAAI,gCAAgC,gBAAgB,SAAS,CAAC,EACjF,CAAA;AAAA,QAEAxD,2BAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC;AAAA,YACA,mBAAmB;AAAA,YACnB,iBAAiB;AAAA,YACjB,cAAc,YAAY;AAAA,YAC1B,kBAAkB,cAAc;AAAA,YAChC,oBAAoB,cAAc;AAAA,YAClC,sBAAsB,cAAc;AAAA,YACpC,sBAAsB,kBAAkB;AAAA,YACxC,kBAAkB,cAAc;AAAA,YAChC,oBAAoB,cAAc;AAAA,YAClC,qBAAqB,eAAe;AAAA,YACpC,cAAc,eAAe;AAAA,YAC7B,8BAA8B,aAAa,mBAAmB;AAAA,YAC9D,yBAAyB,aAAa,mBAAmB;AAAA,YACzD;AAAA,YACA,uBAAuB,eAAe;AAAA,YACtC,oBAAoB,eAAe;AAAA,YACnC,eAAe,kBAAkB;AAAA,YACjC,mBAAmB,cAAc;AAAA,YACjC,wBAAwB,SAAS;AAAA,YACjC,+BAA+B;AAAA,YAC/B,0BAA0B;AAAA,YAC1B,yBAAyB;AAAA,YACzB,2BAA2B;AAAA,YAC3B,kBAAkB;AAAA,YAClB,uBAAuB;AAAA,YACvB,sBAAsB;AAAA,YACtB,uBAAuB;AAAA,YACvB,yBAAyB;AAAA,YACzB,kCAAkC;AAAA,YAClC,gBAAgB;AAAA,YAChB,eAAe;AAAA,UAAA;AAAA,QAAA;AAAA,MACjB,EACF,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EAAA,CAEJ,EACF,CAAA;AAEJ;ACllCA,MAAM,4BAA4B,MAAM,CAAC,UACvC,MAAM,GAAGnB,gBAAQ,sBAAsB,KAAKqI,QAAA;AAU9C,MAAM,gCAAgC,MACpCC,QAAA,eAAe,0BAA0B,GAAG,CAAC,aAAa;AACjD,SAAA;AACT,CAAC;ACbH,MAAM,kCAAkC,CACtC,eACA,sBACG;AACH,QAAM,wBAAwB,OAAO,KAAK,aAAa,EAAE,OAAO,CAAC,aAAa;AAC5E,UAAM,eAAepB,aAAA,QAAI,eAAe,UAAU,CAAA,CAAE;AACpD,UAAM,eAAeA,aAAA,QAAI,mBAAmB,UAAU,CAAA,CAAE;AACxD,UAAM,0BAA0BA,aAAAA,QAAI,cAAc,CAAC,aAAa,GAAG,KAAK;AACxE,UAAM,2BAA2B,CAACxG,yBAAQ,cAAc,YAAY;AAEpE,WAAO,2BAA2B;AAAA,EAAA,CACnC;AAED,SAAOiJ,QAAAA,WAAW,qBAAqB;AACzC;AAEA,MAAM,kBAAkB,CACtB,WACA,gBACG;AACH,QAAM,sBAAsB;AAAA,IAC1BzC,qBAAI,WAAW,qBAAqB,EAAE;AAAA,IACtC;AAAA,EACF;AAIA,QAAM,WAAWA,aAAA,QAAI,WAAW,eAAe,KAAK,IAChD,EAAE,QAAQ,UAAU,IAAI,IACxB,EAAE,KAAK,UAAU,IAAI;AAEzB,QAAM,qBAAqB,OAAO;AAAA,IAChC,CAAC;AAAA,IACD;AAAA,IACA,EAAE,UAAU,UAAU,SAAS;AAAA;AAAA,IAE/B0C,sBAAK,UAAU,QAAQ,YAAY;AAAA;AAAA,IAEnC,EAAE,YAAY,oBAAoB;AAAA,EACpC;AAEO,SAAA;AACT;AAEA,MAAM,qBAAqB,CAAC,MAAW,cAAc,UAAU;AAC7D,QAAM,cAAc1C,aAAA,QAAI,MAAM,OAAO,IAAI;AAEnC,QAAA,sBAAsB,iBAAiBA,aAAI,QAAA,MAAM,qBAAqB,CAAA,CAAE,GAAG,WAAW;AACtF,QAAA,UAAU,cAAc,EAAE,UAAUA,aAAAA,QAAI,MAAM,YAAY,EAAE,EAAE,IAAI,CAAC;AAEnE,QAAA,uBAAuB,OAAO,OAAO,SAAS0C,cAAAA,QAAK,KAAK,QAAQ,YAAY,GAAG;AAAA,IACnF,YAAY;AAAA,EAAA,CACb;AAED,SAAO,qBAAqB;AAC5B,SAAO,qBAAqB;AAC5B,SAAO,qBAAqB;AAC5B,SAAO,qBAAqB;AAErB,SAAA;AACT;AAOA,MAAM,mBAAmB,CAAC,YAA6B,gBAAqC;AACnF,SAAA,WAAW,OAAO,CAAC,KAAoC,EAAE,MAAM,GAAG,WAAW;AAClF,UAAM,mBAAmB;AACnB,UAAA,8BAA8B,iBAAiB,WAAW;AAC1D,UAAA,iBAAiB,iBAAiB,SAAS;AACjD,UAAM,yBAAyB1C,aAAA,QAAI,kBAAkB,mBAAmB,IAAI;AAE5E,QAAI,CAAC,6BAA6B;AAChC,UAAI,gBAAgB;AAClB,cAAM,eAAe,OAAO,OAAO,CAAA,GAAI,kBAAkB;AAAA,UACvD,iBAAiB,8BAA8B,sBAAsB;AAAA,QAAA,CACtE;AAEG,YAAA,IAAc,IAAI,eAAe,YAAY;AAAA,MAAA,OAC5C;AACD,YAAA,IAAc,IAAI,eAAe,gBAAgB;AAAA,MAAA;AAAA,IACvD;AAGF,QAAI,6BAA6B;AAC/B,YAAM,SAAS,iBAAiB;AAEhC,YAAM,6BAA6B,OAAO,OAAO,CAAA,GAAI,kBAAkB;AAAA,QACrE;AAAA,QACA,iBAAiB,8BAA8B,sBAAsB;AAAA,MAAA,CACtE;AAEG,UAAA,IAAc,IAAI,eAAe,0BAA0B;AAAA,IAAA;AAGjE,QAAI,iBAAiB,aAAa;AAChC,YAAM,uBAAuB,EAAE,GAAG,kBAAkB,MAAM,cAAc;AACpE,UAAA,IAAc,IAAI,eAAe,oBAAoB;AAAA,IAAA;AAGpD,WAAA;AAAA,EACT,GAAG,EAAE;AACP;AAEA,MAAM,gCAAgC,CAAC,oBACrC,oBAAoB,MAAM,OAAO;AAEnC,MAAM,iBAAiB,CAAC,QACtB,OAAO,KAAK,GAAG,EAAE,OAAO,CAAC,KAA0B,YAAY;AAC7D,MAAI,IAAI,OAAO,MAAM,QAAQ,YAAY,UAAU;AAC7C,QAAA,OAAO,IAAI,IAAI,OAAO;AAAA,EAAA;AAGrB,SAAA;AACT,GAAG,EAAE;AAEP,MAAM,sBAAsB,CAC1B,eACA,mBACA,gBACG;AACG,QAAA,qBAAqB,gCAAgC,eAAe,iBAAiB;AAC3F,QAAM,sBAAsB,mBAAmB,IAAI,CAAC,aAAa;AAC/D,UAAM,eAAeA,aAAA,QAAI,eAAe,UAAU,CAAA,CAAE;AAC9C,UAAA,qBAAqB,gBAAgB,cAAc,WAAW;AAE7D,WAAA;AAAA,EAAA,CACR;AAEM,SAAA;AACT;AAEA,MAAM,kBAAkB,CAAC,UACvB2C,gBAAA;AAAA,EACE,OAAO,KAAK,KAAK,EACd,IAAI,CAAC,SAAS;AAAA,IACb,SAAS,MAAM,GAAG,EAAE,OAAO;AAAA,IAC3B,MAAM;AAAA,IACN,OAAO,MAAM,GAAG,EAAE,OAAO;AAAA,IACzB,QAAQ,MAAM,GAAG,EAAE,UAAU;AAAA,IAC7B;AAAA,IACA,IAAI,YAAY7J,QAAQ,QAAA,kBAAkB,GAAG;AAAA,IAC7C,MAAM,MAAM,GAAG,EAAE,OAAO;AAAA,IACxB,qBAAqB,MAAM,GAAG,EAAE,OAAO;AAAA,IACvC,EACD,OAAO,CAAC,QAAQ,QAAQ,IAAI;AAAA,EAC/B,CAAC,QAAQ8J,2BAAU,IAAI,KAAK;AAC9B;AC/JK,MAAM,mBAAmB,CAAC,QAC/B,IAAI,OAAO,CAAC,KAAkC,YAAY;AACpD,MAAA,QAAQ,GAAI,IAAI;AAEb,SAAA;AACT,GAAG,EAAE;ACFA,MAAM,2BAA2B,CACtC,mBACA,qBACA,qBACA,wBACG;AACH,QAAM,oCAAoC,oBAAoB,OAAO,CAAC,KAAU,YAAY;AAC1F,UAAM,kBAAkB5C,aAAA,QAAI,qBAAqB,SAAS,CAAA,CAAE;AAE5D,QAAI,OAAO,IAAI;AAER,WAAA;AAAA,EACT,GAAG,EAAE;AACC,QAAA,UAAU,sBAAsB,gBAAgB;AACtD,QAAM,SAAS;AAAA,IACb,CAAC,OAAO,GAAG;AAAA,IACX,YAAY;AAAA,EACd;AAEO,SAAA;AACT;ACpBa,MAAA,gBAAgB,CAAC,YAAiC;AAC7D,SAAO,OAAO,KAAK,OAAO,EAAE,OAAO,CAAC,KAAU,YAAY;AAClD,UAAA,SAAS,QAAQ,OAAO,EAAE;AAEhC,QAAI,OAAO,IAAI;AAAA,MACb,GAAG,QAAQ,OAAO;AAAA,MAClB,QAAQ,EAAE,GAAG,QAAQ,YAAY,kBAAkB,OAAO,UAAU,EAAE;AAAA,IACxE;AAEO,WAAA;AAAA,EACT,GAAG,EAAE;AACP;AAEa,MAAA,oBAAoB,CAAC,eAA8C;AAC9E,SAAO,OAAO,KAAK,UAAU,EAAE,OAAO,CAAC,KAAsB,YAAiB;AACxE,QAAA,KAAK,EAAE,GAAG,WAAW,OAAO,GAAG,MAAM,SAAS;AAE3C,WAAA;AAAA,EACT,GAAG,EAAE;AACP;ACVA,MAAM,uCAAuC,CAAC,kBAA8B;AAC1E,QAAM,qCAAqC,OAAO,KAAK,aAAa,EAAE;AAAA,IACpE,CAAC,KAA8B,YAAY;AACzC,YAAM,mBAAmBA,aAAA,QAAI,eAAe,CAAC,OAAO,CAAC;AAE/C,YAAA,oBAAoB,gCAAgC,gBAAgB;AACtE,UAAA,kBAAkB,gBAAgB,SAAS,GAAG;AAChD,YAAI,KAAK,iBAAiB;AAAA,MAAA;AAGrB,aAAA;AAAA,IACT;AAAA,IACA,CAAA;AAAA,EACF;AAEO,SAAA;AACT;AAEA,MAAM,kCAAkC,CAAC,cAAgD;AACjF,QAAA,aAAaA,aAAAA,QAAI,WAAW,CAAC,UAAU,YAAY,GAAG,EAAE;AACvD,SAAA;AAAA,IACL,WAAW,UAAU;AAAA,IACrB,iBAAiB,WACd,OAAO,CAAC,cAAc;AACf,YAAA,EAAE,SAAS;AAEjB,aAAO,SAAS;AAAA,IAAA,CACjB,EACA,IAAI,CAAC,cAAc;AACX,aAAA;AAAA,QACL,WAAW,UAAU;AAAA,MACvB;AAAA,IACD,CAAA;AAAA,EACL;AACF;ACvCa,MAAA,2BAA2B,CAAC,kBAAiD;AAClF,QAAA,mBAAmB,OAAO,KAAK,aAAa,EAAE,OAAO,CAAC,KAAwB,YAAY;AAC9F,UAAM,sBAAsB,gBAAgB,OAAO,GAAG,QAAQ,cAAc,CAAC;AAC7E,UAAM,+BAA+B;AAAA,MACnC;AAAA,MACA;AAAA,IACF;AACA,WAAO,CAAC,GAAG,KAAK,GAAG,4BAA4B;AAAA,EACjD,GAAG,EAAE;AAEL,SAAO,gBAAgB,gBAAgB;AACzC;AAEA,MAAM,qCAAqC,CACzC,qBACA,mBACG;AACH,SAAO,oBAAoB,OAAO,CAAC,KAAwB,YAAY;AAC/D,UAAA,EAAE,MAAM,UAAA,IAAc;AAC5B,QAAI,SAAS,aAAa;AACxB,UAAI,KAAK;AAAA,QACP;AAAA,QACA;AAAA,MAAA,CACD;AAAA,IAAA;AAGI,WAAA;AAAA,EACT,GAAG,EAAE;AACP;AAGA,MAAM,kBAAkB,CAAC,uBAA6D;AAC9E,QAAA,mCAAmB,IAAI;AAE7B,qBAAmB,QAAQ,CAAC,EAAE,WAAW,qBAAqB;AAC5D,QAAI,CAAC,aAAa,IAAI,SAAS,GAAG;AAChC,mBAAa,IAAI,WAAe,oBAAA,IAAA,CAAK;AAAA,IAAA;AAEvC,iBAAa,IAAI,SAAS,EAAE,IAAI,cAAc;AAAA,EAAA,CAC/C;AAGD,QAAM,wBAA2C,MAAM,KAAK,aAAa,QAAS,CAAA,EAAE;AAAA,IAClF,CAAC,CAAC,WAAW,iBAAiB,OAAO;AAAA,MACnC;AAAA,MACA,kBAAkB,MAAM,KAAK,iBAAiB;AAAA,IAChD;AAAA,EACF;AAEO,SAAA;AACT;ACvDa,MAAA,qCAAqC,CAAC,eAAoB,mBAAwB;AAC7F,QAAM,UAAU,OAAO,KAAK,aAAa,EAAE,IAAI,CAAC,UAAU;AACxD,WAAOA,aAAAA,QAAI,eAAe,CAAC,OAAO,GAAG,cAAc,GAAG,EAAE;AAAA,EAAA,CACzD;AAED,SAAOyC,QAAAA,WAAW,OAAO;AAC3B;ACVA,MAAM,qCAAqC;AAC3C,MAAM,iCAAiC;AAOvB,SAAA,qBAAqB,UAAe,mBAA6B;AACxE,SAAA,IAAI,QAAQ,CAAC,YAAY;AAG9B,UAAM,GAAG,OAAO,OAAO,UAAU,YAAY;AAAA,MAC3C,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,cAAc;AAAA,MAAA;AAAA,IAChB,CACD,EACE,KAAK,CAAC,QAAQ;AACT,UAAA,IAAI,UAAU,KAAK;AACf,cAAA,IAAI,MAAM,8BAA8B;AAAA,MAAA;AAGhD,UAAI,CAAC,mBAAmB;AAChB,cAAA,IAAI,MAAM,kCAAkC;AAAA,MAAA;AAGpD,cAAQ,QAAQ;AAAA,IAAA,CACjB,EACA,MAAM,CAAC,QAAQ;AACd,iBAAW,MAAM;AACR,eAAA;AAAA,UACL;AAAA,UACA,IAAI,YAAY;AAAA,QAAA,EAChB,KAAK,OAAO;AAAA,SACb,GAAG;AAAA,IAAA,CACP;AAAA,EAAA,CACJ;AACH;ACxCa,MAAA,iBAAiB,CAAC,WAAgB;AAC7C,QAAM,wBAAwB,OAAO,OAAO,OAAO,UAAU,EAAE;AAAA,IAC7D,CAAC,cAAmB,UAAU,SAAS;AAAA,EACzC;AAEA,SAAO,sBAAsB;AAAA,IAC3B,CAAC,cAAmB,MAAM,QAAQ,UAAU,UAAU,KAAK,UAAU,WAAW,SAAS;AAAA,EAC3F;AACF;ACgEA,MAAM,sBAAsB,CAAC,EAAE,eAAyC;AACtE,QAAM,WAAWpD,WAAAA,YAAY;AACvB,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,IACEkC,WAAAA,YAAY,+BAA+B;AACzC,QAAA,EAAE,mBAAmB,IAAIrI,4BAAgB;AAC/C,QAAM,EAAE,uBAAuB,wBAAwB,IAAI2J,oCAA4B;AACjF,QAAA,EAAE,gBAAgB,aAAa,IAAIC,0BAAc,uBAAuB,CAAC,UAAU,KAAK;AAE9F,QAAM,YAAY/G,YAAAA,aAAa,uBAAuB,CAAC,UAAU,MAAM,SAAS;AAE1E,QAAA,SAAS,UAAUjD,gBAAQ;AACjC,QAAM,aAAaiK,YAAAA,WAAW,uBAAuB,CAAC,UAAU,MAAM,UAAU;AAC1E,QAAA,EAAE,cAAc,IAAI5J,kBAAQ;AAC5B,QAAA,EAAE,WAAW,IAAIC,wBAAY;AACnC,QAAM,qBAAqB4J,YAAAA,QAAQ,uBAAuB,CAAC,UAAU,MAAM,kBAAkB;AACvF,QAAA,EAAE,SAAS,IAAIC,2BAAY;AAC3B,QAAA,EAAE,aAAa,IAAI,uBAAuB;AAChD,QAAM,mBAAmBC,eAAAA,SAAS,YAAYpK,QAAQ,QAAA,qBAAqB;AAC3E,QAAM,iBAAiBoK,eAAA;AAAA,IACrB,YAAYpK,QAAAA,QAAQ;AAAA,EACtB;AACA,QAAM,cAAcqK,YAAAA,eAAe;AACnC,QAAM,EAAE,KAAK,MAAM,IAAQ,IAAA;AAE3B,QAAM,mBAAmBnF,MAAAA,OAAY;AACrC,mBAAiB,UAAU;AAC3B,QAAM,sBAAsB;AAE5B,QAAM,sBAAsB,qBAAqB;AAC3C,QAAA,uBAAuB,sBAAsB,gBAAgB;AAC7D,QAAA,aAAa,sBACfgC,aAAA,QAAI,kBAAkB,cAAc,IAAI,IACxCA,aAAA,QAAI,gBAAgB,uBAAuB,IAAI;AAEnD,QAAM,aAAahC,MAAAA,OAAY;AACzB,QAAA,WAAW,sBAAsB,kBAAkB;AAEzD,aAAW,UAAU,YAAY;AAC3B,QAAA;AACI,YAAA;AAAA,QACJ;AAAA,UACE,MAAM,EAAE,MAAM,gBAAgB;AAAA,QAChC;AAAA,QACA;AAAA,UACE,MAAM,EAAE,MAAM,kBAAkB;AAAA,QAClC;AAAA,QACA,EAAE,MAAMoF,eAAc;AAAA,MAAA,IACpB,MAAM,QAAQ;AAAA,QAChB,CAAC,cAAc,iBAAiB,gBAAgB,EAAE,IAAI,CAACC,cAAa;AAClE,iBAAO,YAAY,IAAmB,IAAIvK,QAAAA,QAAQ,IAAIuK,SAAQ,EAAE;AAAA,QACjE,CAAA;AAAA,MACH;AAEM5J,YAAAA,cAAa,iBAAiB,eAAe;AAC7C,YAAA,sBAAsB,cAAcA,WAAU;AAC9C6J,YAAAA,gBAAe,iBAAiB,iBAAiB;AACjD,YAAA,wBAAwB,cAAcA,aAAY;AAE/C,eAAA;AAAA,QACP,MAAMC,QAAA;AAAA,QACN,YAAY;AAAA,QACZ,cAAc;AAAA,QACd,eAAAH;AAAAA,MAAA,CACD;AAAA,aACM,KAAK;AACJ,cAAA,MAAM,EAAE,KAAK;AACF,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,sBAAsB,gBAAgB,oBAAqB,CAAA;AAAA,MAAA,CACzF;AAAA,IAAA;AAAA,EAEL;AAEAnF,QAAAA,UAAU,MAAM;AACd,eAAW,QAAQ;AAEnB,WAAO,MAAM;AAEF,eAAA,EAAE,MAAMuF,QAAAA,eAAe;AAAA,IAClC;AAAA,EAEF,GAAG,EAAE;AAELvF,QAAAA,UAAU,MAAM;AAGV,QAAA,CAAC,aAAa,YAAY;AACZ,sBAAA;AAAA,IAAA;AAAA,EAGjB,GAAA,CAAC,WAAW,UAAU,UAAU,CAAC;AAEpCA,QAAAA,UAAU,MAAM;AACd,QAAI,CAAC,YAAY;AACI,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,QAAQ,uCAAuC,EAAG,CAAA;AAAA,MAAA,CAChF;AAAA,IAAA;AAAA,EACH,GACC,CAAC,YAAY,kBAAkB,CAAC;AAE7B,QAAA,eAAe,CACnB,gBACA,WACA,WACA,YAAY,OACZ,kBACA,2BAA2B,UACxB;AACG,UAAA,aAAa,YAAYwF,QAAAA,iBAAiBC,QAAA;AAEvC,aAAA;AAAA,MACP,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,0BAA0B,CAAC;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,MACgC;AACvB,aAAA;AAAA,MACP,MAAMC,QAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,2BAA2B,CAAC;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,MACgC;AACvB,aAAA;AAAA,MACP,MAAMC,QAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEM,QAAA,mCAAmC,CACvC,mBACA,oBACG;AACM,aAAA;AAAA,MACP,MAAMC,QAAA;AAAA,MACN;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,eAAe,CACnB,MACA,YACA,KACA,mBACA,2BAA2B,UACxB;AACG,UAAA,OAAO,eAAe,gBAAgBC,QAAgB,gBAAAC,QAAA;AAEnD,aAAA;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEM,QAAA,8BAA8B,CAAC,mBAA2B,kBAA4B;AACjF,aAAA;AAAA,MACP,MAAMC,QAAA;AAAA,MACN;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,kBAAkB,CACtB,aACA,uBACA,eAAe,OACZ;AACG,UAAA,OACJ,gBAAgB,eAAeC,QAAwC,wCAAAC,QAAA;AAEzE,QAAI,gBAAgB,eAAe;AACjC,iBAAW,8BAA8B;AAAA,IAAA;AAGlC,aAAA;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEM,QAAA,iBAAiB,OAAO,gBAAwB;AAChD,QAAA;AACF,YAAM,aAAa,IAAIpL,QAAQ,QAAA,yBAAyB,WAAW;AAEnE,YAAM,cAAc,OAAO;AAAA,QACzB,cAAc;AAAA,UACZ,IAAI,QAAQ,0CAA0C;AAAA,QACvD,CAAA;AAAA,MACH;AAEa,mBAAA;AAEb,UAAI,aAAa;AACS,gCAAA;AAExB,cAAM,IAAI,UAAU;AAGpB,cAAM,qBAAqB,IAAI;AAGL,kCAAA;AAE1B,cAAM,kBAAkB;AAAA,MAAA;AAAA,aAEnB,KAAK;AACJ,cAAA,MAAM,EAAE,KAAK;AACF,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,sBAAsB,gBAAgB,oBAAqB,CAAA;AAAA,MAAA,CACzF;AAAA,IAAA,UACD;AAC0B,gCAAA;AAAA,IAAA;AAAA,EAE9B;AAEA,QAAM,aAAa,YAAY;AACzB,QAAA;AACF,YAAM,aAAa,IAAIA,QAAQ,QAAA,IAAI,QAAQ,IAAI,UAAU;AACzD,YAAM,cAAckH,aAAAA,QAAI,cAAc,CAAC,sBAAsB,aAAa,GAAG,KAAK;AAElF,YAAM,cAAc,OAAO;AAAA,QACzB,cAAc;AAAA,UACZ,IAAI;AAAA,YACF,4BAA4B,sBAAsB,gBAAgB,WAAW;AAAA,UAAA;AAAA,QAEhF,CAAA;AAAA,MACH;AAGa,mBAAA;AAEb,UAAI,aAAa;AACf,YAAI,aAAa;AAKN,mBAAA,EAAE,MAAMmE,QAAAA,uBAAuB;AAExC;AAAA,QAAA;AAGsB,gCAAA;AAExB,cAAM,IAAI,UAAU;AAGpB,cAAM,qBAAqB,IAAI;AAG/B,cAAM,0BAA0B;AAGhC,cAAM,kBAAkB;AAAA,MAAA;AAAA,aAEnB,KAAK;AACJ,cAAA,MAAM,EAAE,KAAK;AACF,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,sBAAsB,gBAAgB,oBAAqB,CAAA;AAAA,MAAA,CACzF;AAAA,IAAA,UACD;AAC0B,gCAAA;AAAA,IAAA;AAAA,EAE9B;AAEM,QAAA,eAAe,OAAO,aAAqB,SAAc;AACzD,QAAA;AACF,YAAM,aAAa,IAAIrL,QAAQ,QAAA,yBAAyB,WAAW;AAGtD,mBAAA;AAGW,8BAAA;AAGlB,YAAA,IAAI,YAAY,IAAI;AAG1B,YAAM,qBAAqB,IAAI;AAG/B,YAAM,0BAA0B;AAEhC,YAAM,kBAAkB;AAAA,aACjB,KAAK;AACJ,cAAA,MAAM,EAAE,KAAK;AACF,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,sBAAsB,gBAAgB,oBAAqB,CAAA;AAAA,MAAA,CACzF;AAAA,IAAA,UACD;AAC0B,gCAAA;AAAA,IAAA;AAAA,EAE9B;AAEA,QAAM,sDAAsD,MAAM;AAGhE,UAAM,YAAY,OAAO,OAAO,CAAI,GAAA,YAAY,aAAa,UAAU;AAIvE,QAAI,CAAC,qBAAqB;AACxB,YAAM,qBAAqBkH,aAAA,QAAI,cAAc,aAAa,CAAA,CAAE;AAExD6B,2BAAA,WAAW7B,aAAAA,QAAI,oBAAoB,CAAC,KAAK,GAAG,EAAE,GAAG,kBAAkB;AAAA,IAAA;AAGnE,UAAA,mBAAmB,qCAAqC,SAAS;AAEhE,WAAA;AAAA,EACT;AAEA,QAAM,yBAAyB,MAAM;AAC7B,UAAA,iBAAiB,yBAAyB,UAAU;AAEnD,WAAA;AAAA,EACT;AAEM,QAAA,iCAAiC,CAAC,QAAgB,2BAAmC;AAChF,aAAA;AAAA,MACP,MAAMoE,QAAA;AAAA,MACN;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,kBAAkB,MAAM;AACtB,UAAA,iBAAiB,sBAAsB,eAAe;AAC5D,UAAM,cAAcpE,aAAA,QAAI,gBAAgB,cAAc,IAAI;AAAA,MACxD,QAAQ,EAAE,YAAY,CAAG,EAAA;AAAA,IAAA,CAC1B;AAED,UAAM,sBAAsBqE,QAAA;AAAA,MAC1B,YAAY,OAAO;AAAA,MACnB;AAAA,IACF;AAEA,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,uBACJrE,aAAA,QAAI,aAAa,eAAe,KAAK,KACrCsE,sBAAKtE,aAAAA,QAAI,aAAa,qBAAqB,CAAE,CAAA,CAAC,MAAM;AAE7C,aAAA;AAAA,MACP,MAAMuE,QAAA;AAAA,MACN,aAAa;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEM,QAAA,iBAAiBC,MAAAA,QAAQ,MAAM;AAC7B,UAAA,UAAU,sBAAsB,eAAe;AACrD,QAAI,eAAe,uBAAuB;AACjC,aAAA;AAAA,IAAA;AAGF,WAAA,CAAC,OAAO,KAAK,OAAO,EAAE,SAAS,cAAc,EAAE,KAAK,CAAC;AAAA,EAAA,GAC3D,CAAC,YAAY,cAAc,YAAY,qBAAqB,SAAS,CAAC;AAEnE,QAAA,mBAAmBA,MAAAA,QAAQ,MAAM;AACrC,UAAM,mBAAmB,OAAO,KAAK,YAAY,EAC9C,OAAO,CAAC,QAAQxE,aAAAA,QAAI,cAAc,CAAC,KAAK,UAAU,SAAS,GAAG,IAAI,CAAC,EACnE,KAAK;AAED,WAAAA,qBAAI,kBAAkB,KAAK,qBAAqB;AAAA,EAAA,GACtD,CAAC,YAAY,CAAC;AAEjB,MAAI,gBAAgB;AAClB,0CAAQyE,yBAAS,EAAA,IAAI,YAAY3L,QAAAA,QAAQ,kBAAkB,gBAAgB,IAAI;AAAA,EAAA;AAG3E,QAAA,aAAa,OAAO,8BAAoD;AACxE,QAAA;AACF,YAAM,aAAakH,aAAAA,QAAI,cAAc,CAAC,sBAAsB,aAAa,GAAG,KAAK;AAEjF,YAAM,OAIF;AAAA,QACF,YAAY;AAAA,UACV,aAAa;AAAA,UACb;AAAA,UACA;AAAA,QAAA;AAAA,MAEJ;AAEA,UAAI,qBAAqB;AACjB,cAAA,cAAc,QAAQ,MAAM;AAClC,cAAM,cAAc,YAAY;AAAA,UAC9B;AAAA,YACE,GAAG,mBAAmB,aAAa,WAAW;AAAA,YAC9C,GAAG;AAAA,UACL;AAAA,UACA,YAAY;AAAA,QACd;AAEM,cAAA,gBAAgB,eAAe,WAAW;AAEhD,YAAI,CAAC,eAAe;AACC,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,cAAc;AAAA,cACrB,IAAI,QAAQ,+CAA+C;AAAA,cAC3D,gBACE;AAAA,YACH,CAAA;AAAA,UAAA,CACF;AAED;AAAA,QAAA;AAGF,aAAK,cAAc;AAEnB,mBAAW,qBAAqB;AAAA,MAAA,OAC3B;AACL,aAAK,YAAY,mBAAmB,aAAa,WAAW,IAAI;AAEhE,mBAAW,mBAAmB;AAAA,MAAA;AAIR,8BAAA;AAExB,YAAM,UAAU,IAAIlH,QAAQ,QAAA,IAAI,QAAQ;AACxC,YAAM,aAAa,aAAa,UAAU,GAAG,OAAO,IAAI,UAAU;AAElE,UAAI,YAAY;AACR,cAAA,KAAK,YAAY,IAAI;AAAA,MAAA,OACtB;AACC,cAAA,IAAI,YAAY,IAAI;AAAA,MAAA;AAI1B,UAAA,eACC,YAAY,aAAa,OAAO,SAAS,oBACxC,YAAY,aAAa,OAAO,SAAS,eAC3C;AACA,qBAAa,8BAA8B,IAAI;AAC/C,mBAAW,mCAAmC;AAC9C,uBAAe,IAAI;AAAA,MAAA;AAIrB,UAAI,qBAAqB;AACvB,mBAAW,oBAAoB;AAEzB,cAAA,UAAUkH,qBAAI,MAAM,CAAC,eAAe,UAAU,MAAM,GAAG,EAAE;AACzD,cAAA,UAAUA,qBAAI,aAAa,CAAC,eAAe,UAAU,MAAM,GAAG,EAAE;AAElE,YAAA,CAAC,cAAc,YAAY,SAAS;AACtC,qBAAW,0BAA0B;AAAA,QAAA;AAAA,MACvC,OACK;AACL,mBAAW,kBAAkB;AAAA,MAAA;AAI/B,YAAM,qBAAqB,IAAI;AAGL,gCAAA;AAG1B,YAAM,WAAW,QAAQ;AAChB,eAAA,EAAE,MAAM0E,QAAAA,sBAAsB;AAGvC,YAAM,kBAAkB;AAAA,aACjB,KAAU;AACjB,UAAI,CAAC,qBAAqB;AACxB,mBAAW,qBAAqB;AAAA,MAAA;AAGlC,cAAQ,MAAM,EAAE,KAAK,IAAI,UAAU;AAChB,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,sBAAsB,gBAAgB,oBAAqB,CAAA;AAAA,MAAA,CACzF;AAAA,IAAA,UACD;AAC0B,gCAAA;AAAA,IAAA;AAAA,EAE9B;AAEA,QAAM,oBAAoB,YAAY;AAGpC,UAAM,mBAAmB;AAAA,EAC3B;AAEA,QAAM,eAAe,CACnB,MACA,YACA,iBACG;AACM,aAAA;AAAA,MACP,MAAMC,QAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA,KAAK;AAAA,IAAA,CACN;AAAA,EACH;AAGE,SAAA1K,2BAAA;AAAA,IAAC,mBAAmB;AAAA,IAAnB;AAAA,MACC,OAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,yBAAyB,mCAAmC,YAAY,CAAC,UAAU,CAAC;AAAA,QACpF;AAAA,QACA;AAAA,QACA,6BAA6B2K,iBAAAA,QAAQ,YAAY,UAAU;AAAA,QAC3D,mDACE,oDAAoD;AAAA,QACtD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,kBAAkB,uBAAuB;AAAA,QACzC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,wBAAwB,gBAAgB,YAAY;AAAA,QACpD;AAAA,QACA;AAAA,MACF;AAAA,MAEC,oCACE3K,2BAAA,IAAA4K,iBAAK,SAAL,CAAa,CAAA,IAGX9K,2BAAA,KAAAK,qBAAA,EAAA,UAAA;AAAA,QAAA;AAAA,QACA,sDAAwB,WAAU,CAAA,CAAA;AAAA,MAAA,EACrC,CAAA;AAAA,IAAA;AAAA,EAEJ;AAEJ;AAGA,MAAe0K,wBAAAA,MAAAA,KAAK,mBAAmB;ACzpBvC,MAAM,qBAAqB;AAAA,EACzB,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,eAAe;AAAA,EACf,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,MAAM;AAAA,EACN,MAAM;AAAA,EACN,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,WAAW;AACb;ACeO,MAAM,8BAA8B,CAAC,EAAE,eAAiD;AAC7F,QAAM,CAAC,OAAO,2BAA2B,IAAI7L,iBAAM,SAAS,kBAAkB;AACxE,QAAA,EAAE,WAAW,IAAIG,wBAAY;AAEnC,QAAM,2BAA2B,CAAC,EAAE,eAAe,qBAAsC;AAEvF,gCAA4B,CAAC,cAAmB;AACvC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,YAAY;AAAA,QACZ,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,qBAAqB,CAAC,EAAE,eAAe,WAA4B;AACnE,QAAA,MAAM,cAAc,eAAe;AACrC,iBAAW,iCAAiC,EAAE,MAAM,cAAA,CAAe;AAAA,IAAA;AAGrE,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,YAAY;AAAA,QACZ,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,cAAc;AAAA,QACd,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,+BAA+B,CAAC,EAAE,mBAAmB,gBAAiC;AAC1F,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA,WAAW;AAAA,QACX,WAAW;AAAA,QACX,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,QAAQ;AAAA,MACV;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,sBAAsB,CAAC,EAAE,WAAW,gBAAiC;AACzE,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,QACA,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,cAAc;AAAA,QACd,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEM,QAAA,0BAA0B,CAAC,cAAqB;AACpD,gCAA4B,CAAC,cAAc;AAClC,aAAA,EAAE,GAAG,WAAW,GAAG,WAAW,QAAQ,MAAM,WAAW,QAAQ;AAAA,IAAA,CACvE;AAAA,EACH;AAEM,QAAA,0BAA0B,CAAC,iBAAyB;AACxD,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,6BAA6B,CAAC;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,MACqB;AACrB,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,WAAW;AAAA,QACX;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,QACR,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,uBAAuB,CAAC;AAAA,IAC5B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,MACqB;AACrB,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,WAAW;AAAA,QACX,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,MACV;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,wBAAwB,CAAC,EAAE,WAAW,WAAW,WAAW,WAA4B;AAC5F,gCAA4B,CAAC,cAAqB;AACzC,aAAA;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,QACR,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,eAAe,MAAM;AACzB,gCAA4B,kBAAkB;AAAA,EAChD;AAEA,QAAM,mCAAmC,CAAC,EAAE,WAAW,gBAAiC;AACtF,gCAA4B,CAAC,SAAgB;AACpC,aAAA;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA,WAAW;AAAA,QACX,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,mCAAmC,MAAM;AAC7C,gCAA4B,CAAC,SAAgB;AACpC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,eAAe;AAAA,QACf,WAAW;AAAA,QACX,MAAM;AAAA,QACN,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEA,QAAM,gCAAgC,CAAC,EAAE,wBAAyC;AAChF,gCAA4B,CAAC,SAAgB;AACpC,aAAA;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,MAAM;AAAA,QACN,eAAe;AAAA,QACf,eAAe;AAAA,QACf,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAEM,QAAA,eAAe,CAAC,UAAkB;AACtC,gCAA4B,CAAC,SAAgB;AACpC,aAAA;AAAA,QACL,GAAG;AAAA,QACH,WAAW;AAAA,MACb;AAAA,IAAA,CACD;AAAA,EACH;AAGE,SAAAa,2BAAA;AAAA,IAAC,2BAA2B;AAAA,IAA3B;AAAA,MACC,OACE;AAAA,QACE,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MAGD;AAAA,IAAA;AAAA,EACH;AAEJ;ACxPA,MAAM8K,aAAWC,MAAA,KAAK,MAAM,QAAO,QAAA,EAAA,KAAA,MAAA,QAAA,wBAAsB,EAAC;AAEnD,MAAM,gBAAgB,MAAM;AACjC,wCACGC,MAAAA,UAAS,EAAA,yCAAWJ,YAAAA,KAAK,SAAL,CAAa,CAAA,GAChC,UAAA5K,2BAAA,IAACiL,yBACC,UAACjL,2BAAA,IAAAkL,sBAAA,EAAM,MAAM,kBAAkB,wCAAUJ,YAAS,CAAA,CAAA,GAAI,GACxD,EACF,CAAA;AAEJ;ACEA,MAAM,WAAWC,MAAA,KAAK,MAAM,QAAO,QAAA,EAAA,KAAA,MAAA,QAAA,wBAAsB,EAAC;AAE1D,MAAM,MAAM,MAAM;AACV,QAAA,EAAE,cAAc,IAAI7L,kBAAQ;AAClC,QAAM,QAAQ,cAAc;AAAA,IAC1B,IAAI,GAAGL,QAAQ,QAAA;AAAA,IACf,gBAAgB;AAAA,EAAA,CACjB;AACD,QAAM,eAAegK,YAAAA,cAAc,OAAO,CAAC,UAAU,MAAM,YAAY;AACjE,QAAA,kBAAkB9E,aAAO,YAAY;AAE3CC,QAAAA,UAAU,MAAM;AACd,QAAI,gBAAgB,SAAS;AAC3B,sBAAgB,QAAQ,oBAAoB;AAAA,IAAA;AAAA,EAEhD,GAAG,EAAE;AAGL,yCACG4G,YAAAA,KAAK,SAAL,EAAa,aAAaO,oBAAY,MACrC,UAAA;AAAA,IAACnL,2BAAAA,IAAA4K,YAAAA,KAAK,OAAL,EAAY,UAAM,MAAA,CAAA;AAAA,IACnB5K,2BAAA,IAACoL,4CACC,UAACpL,2BAAAA,IAAA,6BAAA,EAGC,yCAACqL,uBACC,EAAA,UAAArL,2BAAAA,IAACsL,YAAAA,QAAQ,MAAR,EAAa,wCAAU,uBAAsB,CAAA,CAAA,GAC5C,UAACtL,2BAAA,IAAAgL,MAAA,UAAA,EAAS,UAAUhL,2BAAA,IAAC4K,iBAAK,SAAL,CAAa,CAAA,GAChC,UAAA9K,2BAAAA,KAACmL,eAAAA,QACC,EAAA,UAAA;AAAA,MAAAjL,+BAACkL,eAAAA,SAAM,MAAK,sBAAqB,SAASlL,+BAAC,WAAS,CAAA,GAAI;AAAA,qCACvDkL,eAAAA,OAAM,EAAA,MAAM,uCAAuC,SAASlL,2BAAA,IAAC,iBAAc,EAAI,CAAA;AAAA,IAAA,EAAA,CAClF,EACF,CAAA,EAAA,CACF,EACF,CAAA,EACF,CAAA,EACF,CAAA;AAAA,EAAA,GACF;AAEJ;;;;;;;;;;;"}