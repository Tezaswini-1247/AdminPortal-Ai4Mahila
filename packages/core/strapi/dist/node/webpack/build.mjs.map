{"version":3,"file":"build.mjs","sources":["../../../src/node/webpack/build.ts"],"sourcesContent":["import webpack from 'webpack';\r\n\r\nimport { mergeConfigWithUserConfig, resolveProductionConfig } from './config';\r\nimport { isError } from '../core/errors';\r\n\r\nimport type { BuildContext } from '../create-build-context';\r\n\r\nconst build = async (ctx: BuildContext) => {\r\n  const config = await resolveProductionConfig(ctx);\r\n  const finalConfig = await mergeConfigWithUserConfig(config, ctx);\r\n\r\n  ctx.logger.debug('Webpack config', finalConfig);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    webpack(finalConfig, (err, stats) => {\r\n      if (stats) {\r\n        if (stats.hasErrors()) {\r\n          ctx.logger.error(\r\n            stats.toString({\r\n              chunks: false,\r\n              colors: true,\r\n            })\r\n          );\r\n\r\n          reject();\r\n        } else if (ctx.options.stats) {\r\n          ctx.logger.info(\r\n            stats.toString({\r\n              chunks: false,\r\n              colors: true,\r\n            })\r\n          );\r\n        }\r\n\r\n        resolve(true);\r\n      }\r\n\r\n      if (err && isError(err)) {\r\n        ctx.logger.error(err.message);\r\n        reject();\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport { build };\r\n"],"names":[],"mappings":";;;AAOM,MAAA,QAAQ,OAAO,QAAsB;AACnC,QAAA,SAAS,MAAM,wBAAwB,GAAG;AAChD,QAAM,cAAc,MAAM,0BAA0B,QAAQ,GAAG;AAE3D,MAAA,OAAO,MAAM,kBAAkB,WAAW;AAE9C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC9B,YAAA,aAAa,CAAC,KAAK,UAAU;AACnC,UAAI,OAAO;AACL,YAAA,MAAM,aAAa;AACrB,cAAI,OAAO;AAAA,YACT,MAAM,SAAS;AAAA,cACb,QAAQ;AAAA,cACR,QAAQ;AAAA,YACT,CAAA;AAAA,UACH;AAEO,iBAAA;AAAA,QAAA,WACE,IAAI,QAAQ,OAAO;AAC5B,cAAI,OAAO;AAAA,YACT,MAAM,SAAS;AAAA,cACb,QAAQ;AAAA,cACR,QAAQ;AAAA,YACT,CAAA;AAAA,UACH;AAAA,QAAA;AAGF,gBAAQ,IAAI;AAAA,MAAA;AAGV,UAAA,OAAO,QAAQ,GAAG,GAAG;AACnB,YAAA,OAAO,MAAM,IAAI,OAAO;AACrB,eAAA;AAAA,MAAA;AAAA,IACT,CACD;AAAA,EAAA,CACF;AACH;"}