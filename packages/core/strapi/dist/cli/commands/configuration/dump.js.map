{"version":3,"file":"dump.js","sources":["../../../../src/cli/commands/configuration/dump.ts"],"sourcesContent":["import fs from 'fs';\r\nimport { createCommand } from 'commander';\r\nimport { createStrapi, compileStrapi } from '@strapi/core';\r\n\r\nimport type { StrapiCommand } from '../../types';\r\nimport { runAction } from '../../utils/helpers';\r\n\r\ninterface CmdOptions {\r\n  file?: string;\r\n  pretty?: boolean;\r\n}\r\n\r\ninterface ExportItem {\r\n  key: string;\r\n  value: string;\r\n  type: string;\r\n  environment: string;\r\n  tag: string;\r\n}\r\n\r\ninterface Output {\r\n  write(str: string): void;\r\n  end(): void;\r\n}\r\n\r\nconst CHUNK_SIZE = 100;\r\n\r\n/**\r\n * Will dump configurations to a file or stdout\r\n * @param {string} file filepath to use as output\r\n */\r\nconst action = async ({ file: filePath, pretty }: CmdOptions) => {\r\n  const output: Output = filePath ? fs.createWriteStream(filePath) : process.stdout;\r\n\r\n  const appContext = await compileStrapi();\r\n  const app = await createStrapi(appContext).load();\r\n\r\n  const count = await app.query('strapi::core-store').count();\r\n\r\n  const exportData: ExportItem[] = [];\r\n\r\n  const pageCount = Math.ceil(count / CHUNK_SIZE);\r\n\r\n  for (let page = 0; page < pageCount; page += 1) {\r\n    const results = await app\r\n      .query('strapi::core-store')\r\n      .findMany({ limit: CHUNK_SIZE, offset: page * CHUNK_SIZE, orderBy: 'key' });\r\n\r\n    results\r\n      .filter((result) => result.key.startsWith('plugin_'))\r\n      .forEach((result) => {\r\n        exportData.push({\r\n          key: result.key,\r\n          value: result.value,\r\n          type: result.type,\r\n          environment: result.environment,\r\n          tag: result.tag,\r\n        });\r\n      });\r\n  }\r\n\r\n  const str = JSON.stringify(exportData, null, pretty ? 2 : undefined);\r\n\r\n  output.write(str);\r\n  output.write('\\n');\r\n  output.end();\r\n\r\n  // log success only when writting to file\r\n  if (filePath) {\r\n    console.log(`Successfully exported ${exportData.length} configuration entries`);\r\n  }\r\n  process.exit(0);\r\n};\r\n\r\n/**\r\n * `$ strapi configuration:dump`\r\n */\r\nconst command: StrapiCommand = () => {\r\n  return createCommand('configuration:dump')\r\n    .alias('config:dump')\r\n    .description('Dump configurations of your application')\r\n    .option('-f, --file <file>', 'Output file, default output is stdout')\r\n    .option('-p, --pretty', 'Format the output JSON with indentation and line breaks', false)\r\n    .action(runAction('configuration:dump', action));\r\n};\r\n\r\nexport { action, command };\r\n"],"names":["fs","compileStrapi","createStrapi","createCommand","runAction"],"mappings":";;;;;;;;AAyBA,MAAM,aAAa;AAMnB,MAAM,SAAS,OAAO,EAAE,MAAM,UAAU,aAAyB;AAC/D,QAAM,SAAiB,WAAWA,YAAA,QAAG,kBAAkB,QAAQ,IAAI,QAAQ;AAErE,QAAA,aAAa,MAAMC,mBAAc;AACvC,QAAM,MAAM,MAAMC,KAAAA,aAAa,UAAU,EAAE,KAAK;AAEhD,QAAM,QAAQ,MAAM,IAAI,MAAM,oBAAoB,EAAE,MAAM;AAE1D,QAAM,aAA2B,CAAC;AAElC,QAAM,YAAY,KAAK,KAAK,QAAQ,UAAU;AAE9C,WAAS,OAAO,GAAG,OAAO,WAAW,QAAQ,GAAG;AAC9C,UAAM,UAAU,MAAM,IACnB,MAAM,oBAAoB,EAC1B,SAAS,EAAE,OAAO,YAAY,QAAQ,OAAO,YAAY,SAAS,OAAO;AAGzE,YAAA,OAAO,CAAC,WAAW,OAAO,IAAI,WAAW,SAAS,CAAC,EACnD,QAAQ,CAAC,WAAW;AACnB,iBAAW,KAAK;AAAA,QACd,KAAK,OAAO;AAAA,QACZ,OAAO,OAAO;AAAA,QACd,MAAM,OAAO;AAAA,QACb,aAAa,OAAO;AAAA,QACpB,KAAK,OAAO;AAAA,MAAA,CACb;AAAA,IAAA,CACF;AAAA,EAAA;AAGL,QAAM,MAAM,KAAK,UAAU,YAAY,MAAM,SAAS,IAAI,MAAS;AAEnE,SAAO,MAAM,GAAG;AAChB,SAAO,MAAM,IAAI;AACjB,SAAO,IAAI;AAGX,MAAI,UAAU;AACZ,YAAQ,IAAI,yBAAyB,WAAW,MAAM,wBAAwB;AAAA,EAAA;AAEhF,UAAQ,KAAK,CAAC;AAChB;AAKA,MAAM,UAAyB,MAAM;AAC5B,SAAAC,UAAA,cAAc,oBAAoB,EACtC,MAAM,aAAa,EACnB,YAAY,yCAAyC,EACrD,OAAO,qBAAqB,uCAAuC,EACnE,OAAO,gBAAgB,2DAA2D,KAAK,EACvF,OAAOC,QAAA,UAAU,sBAAsB,MAAM,CAAC;AACnD;;;"}