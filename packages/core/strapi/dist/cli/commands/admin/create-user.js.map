{"version":3,"file":"create-user.js","sources":["../../../../src/cli/commands/admin/create-user.ts"],"sourcesContent":["import { createCommand } from 'commander';\r\nimport { yup } from '@strapi/utils';\r\nimport _ from 'lodash';\r\nimport inquirer from 'inquirer';\r\nimport { createStrapi, compileStrapi } from '@strapi/core';\r\n\r\nimport { runAction } from '../../utils/helpers';\r\nimport type { StrapiCommand } from '../../types';\r\n\r\ninterface CmdOptions {\r\n  email?: string;\r\n  password?: string;\r\n  firstname?: string;\r\n  lastname?: string;\r\n}\r\n\r\nconst emailValidator = yup.string().email('Invalid email address').lowercase();\r\n\r\nconst passwordValidator = yup\r\n  .string()\r\n  .min(8, 'Password must be at least 8 characters long')\r\n  .matches(/[a-z]/, 'Password must contain at least one lowercase character')\r\n  .matches(/[A-Z]/, 'Password must contain at least one uppercase character')\r\n  .matches(/\\d/, 'Password must contain at least one number');\r\n\r\nconst adminCreateSchema = yup.object().shape({\r\n  email: emailValidator,\r\n  password: passwordValidator,\r\n  firstname: yup.string().trim().required('First name is required'),\r\n  lastname: yup.string(),\r\n});\r\n\r\ninterface Answers {\r\n  email: string;\r\n  password: string;\r\n  firstname: string;\r\n  lastname: string;\r\n  confirm: boolean;\r\n}\r\n\r\n/**\r\n * It's not an observable, in reality this is\r\n * `ReadOnlyArray<inquirer.DistinctQuestion<Answers>>`\r\n * but then the logic of the validate function needs to change.\r\n */\r\n// eslint-disable-next-line rxjs/finnish\r\nconst promptQuestions: inquirer.QuestionCollection<Answers> = [\r\n  {\r\n    type: 'input',\r\n    name: 'email',\r\n    message: 'Admin email?',\r\n    async validate(value: string) {\r\n      const validEmail = await emailValidator.validate(value);\r\n      return validEmail === value || validEmail;\r\n    },\r\n  },\r\n  {\r\n    type: 'password',\r\n    name: 'password',\r\n    message: 'Admin password?',\r\n    async validate(value: string) {\r\n      const validPassword = await passwordValidator.validate(value);\r\n      return validPassword === value || validPassword;\r\n    },\r\n  },\r\n  { type: 'input', name: 'firstname', message: 'First name?' },\r\n  { type: 'input', name: 'lastname', message: 'Last name?' },\r\n  {\r\n    type: 'confirm',\r\n    name: 'confirm',\r\n    message: 'Do you really want to create a new admin?',\r\n  },\r\n];\r\n\r\nasync function createAdmin({ email, password, firstname, lastname }: CmdOptions) {\r\n  const appContext = await compileStrapi();\r\n  const app = await createStrapi(appContext).load();\r\n\r\n  const user = await app.admin!.services.user.exists({ email });\r\n\r\n  if (user) {\r\n    console.error(`User with email \"${email}\" already exists`);\r\n    process.exit(1);\r\n  }\r\n\r\n  const superAdminRole = await app.admin!.services.role.getSuperAdmin();\r\n\r\n  await app.admin!.services.user.create({\r\n    email,\r\n    firstname,\r\n    lastname,\r\n    isActive: true,\r\n    roles: [superAdminRole.id],\r\n    ...(password && { password, registrationToken: null }),\r\n  });\r\n\r\n  console.log(`Successfully created new admin`);\r\n  process.exit(0);\r\n}\r\n\r\n/**\r\n * Create new admin user\r\n */\r\nconst action = async (cmdOptions: CmdOptions = {}) => {\r\n  let { email, password, firstname, lastname } = cmdOptions;\r\n\r\n  if (\r\n    _.isEmpty(email) &&\r\n    _.isEmpty(password) &&\r\n    _.isEmpty(firstname) &&\r\n    _.isEmpty(lastname) &&\r\n    process.stdin.isTTY\r\n  ) {\r\n    const inquiry = await inquirer.prompt(promptQuestions);\r\n\r\n    if (!inquiry.confirm) {\r\n      process.exit(0);\r\n    }\r\n\r\n    ({ email, password, firstname, lastname } = inquiry);\r\n  }\r\n\r\n  try {\r\n    await adminCreateSchema.validate({ email, password, firstname, lastname });\r\n  } catch (err) {\r\n    if (err instanceof yup.ValidationError) {\r\n      console.error(err.errors[0]);\r\n    }\r\n\r\n    process.exit(1);\r\n  }\r\n\r\n  return createAdmin({ email, password, firstname, lastname });\r\n};\r\n\r\n/**\r\n * `$ strapi admin:create-user`\r\n */\r\nconst command: StrapiCommand = () => {\r\n  return createCommand('admin:create-user')\r\n    .alias('admin:create')\r\n    .description('Create a new admin')\r\n    .option('-e, --email <email>', 'Email of the new admin')\r\n    .option('-p, --password <password>', 'Password of the new admin')\r\n    .option('-f, --firstname <first name>', 'First name of the new admin')\r\n    .option('-l, --lastname <last name>', 'Last name of the new admin')\r\n    .action(runAction('admin:create-user', action));\r\n};\r\n\r\nexport { action, command };\r\n"],"names":["yup","compileStrapi","createStrapi","_","inquirer","createCommand","runAction"],"mappings":"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"}