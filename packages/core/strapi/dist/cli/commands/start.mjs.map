{"version":3,"file":"start.mjs","sources":["../../../src/cli/commands/start.ts"],"sourcesContent":["import { createCommand } from 'commander';\r\nimport fs from 'fs';\r\nimport tsUtils from '@strapi/typescript-utils';\r\nimport { createStrapi } from '@strapi/core';\r\n\r\nimport type { StrapiCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\n\r\nconst action = async () => {\r\n  const appDir = process.cwd();\r\n\r\n  const isTSProject = await tsUtils.isUsingTypeScript(appDir);\r\n\r\n  const outDir = await tsUtils.resolveOutDir(appDir);\r\n  const distDir = isTSProject ? outDir : appDir;\r\n\r\n  const buildDirExists = fs.existsSync(outDir);\r\n  if (isTSProject && !buildDirExists)\r\n    throw new Error(\r\n      `${outDir} directory not found. Please run the build command before starting your application`\r\n    );\r\n\r\n  createStrapi({ appDir, distDir }).start();\r\n};\r\n\r\n/**\r\n * `$ strapi start`\r\n */\r\nconst command: StrapiCommand = () => {\r\n  return createCommand('start')\r\n    .description('Start your Strapi application')\r\n    .action(runAction('start', action));\r\n};\r\n\r\nexport { command };\r\n"],"names":["tsUtils"],"mappings":";;;;;AAQA,MAAM,SAAS,YAAY;AACnB,QAAA,SAAS,QAAQ,IAAI;AAE3B,QAAM,cAAc,MAAMA,iBAAQ,kBAAkB,MAAM;AAE1D,QAAM,SAAS,MAAMA,iBAAQ,cAAc,MAAM;AAC3C,QAAA,UAAU,cAAc,SAAS;AAEjC,QAAA,iBAAiB,GAAG,WAAW,MAAM;AAC3C,MAAI,eAAe,CAAC;AAClB,UAAM,IAAI;AAAA,MACR,GAAG,MAAM;AAAA,IACX;AAEF,eAAa,EAAE,QAAQ,QAAS,CAAA,EAAE,MAAM;AAC1C;AAKA,MAAM,UAAyB,MAAM;AAC5B,SAAA,cAAc,OAAO,EACzB,YAAY,+BAA+B,EAC3C,OAAO,UAAU,SAAS,MAAM,CAAC;AACtC;"}