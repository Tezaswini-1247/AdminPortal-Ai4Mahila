{"version":3,"file":"command.js","sources":["../../../../src/cli/commands/import/command.ts"],"sourcesContent":["import path from 'path';\r\nimport { createCommand, Option } from 'commander';\r\nimport inquirer from 'inquirer';\r\nimport {\r\n  excludeOption,\r\n  onlyOption,\r\n  throttleOption,\r\n  validateExcludeOnly,\r\n} from '../../utils/data-transfer';\r\nimport { getCommanderConfirmMessage, forceOption } from '../../utils/commander';\r\nimport { exitWith } from '../../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ strapi import`\r\n */\r\nconst command = () => {\r\n  return (\r\n    createCommand('import')\r\n      .description('Import data from file to Strapi')\r\n      .allowExcessArguments(false)\r\n      .requiredOption(\r\n        '-f, --file <file>',\r\n        'path and filename for the Strapi export file you want to import'\r\n      )\r\n      .addOption(\r\n        new Option(\r\n          '-k, --key <string>',\r\n          'Provide encryption key in command instead of using the prompt'\r\n        )\r\n      )\r\n      .addOption(new Option('--verbose', 'Enable verbose logs'))\r\n      .addOption(forceOption)\r\n      .addOption(excludeOption)\r\n      .addOption(onlyOption)\r\n      .addOption(throttleOption)\r\n      .hook('preAction', validateExcludeOnly)\r\n      .hook('preAction', async (thisCommand) => {\r\n        const opts = thisCommand.opts();\r\n        const ext = path.extname(String(opts.file));\r\n\r\n        // check extension to guess if we should prompt for key\r\n        if (ext === '.enc') {\r\n          if (!opts.key) {\r\n            const answers = await inquirer.prompt([\r\n              {\r\n                type: 'password',\r\n                message: 'Please enter your decryption key',\r\n                name: 'key',\r\n              },\r\n            ]);\r\n            if (!answers.key?.length) {\r\n              exitWith(1, 'No key entered, aborting import.');\r\n            }\r\n            opts.key = answers.key;\r\n          }\r\n        }\r\n      })\r\n      // set decrypt and decompress options based on filename\r\n      .hook('preAction', (thisCommand) => {\r\n        const opts = thisCommand.opts();\r\n\r\n        const { extname, parse } = path;\r\n\r\n        let file = opts.file;\r\n\r\n        if (extname(file) === '.enc') {\r\n          file = parse(file).name; // trim the .enc extension\r\n          thisCommand.opts().decrypt = true;\r\n        } else {\r\n          thisCommand.opts().decrypt = false;\r\n        }\r\n\r\n        if (extname(file) === '.gz') {\r\n          file = parse(file).name; // trim the .gz extension\r\n          thisCommand.opts().decompress = true;\r\n        } else {\r\n          thisCommand.opts().decompress = false;\r\n        }\r\n\r\n        if (extname(file) !== '.tar') {\r\n          exitWith(\r\n            1,\r\n            `The file '${opts.file}' does not appear to be a valid Strapi data file. It must have an extension ending in .tar[.gz][.enc]`\r\n          );\r\n        }\r\n      })\r\n      .hook(\r\n        'preAction',\r\n        getCommanderConfirmMessage(\r\n          'The import will delete your existing data! Are you sure you want to proceed?',\r\n          { failMessage: 'Import process aborted' }\r\n        )\r\n      )\r\n      .action(action)\r\n  );\r\n};\r\n\r\nexport default command;\r\n"],"names":["createCommand","Option","forceOption","excludeOption","onlyOption","throttleOption","validateExcludeOnly","path","inquirer","exitWith","getCommanderConfirmMessage"],"mappings":";;;;;;;;;;;AAgBA,MAAM,UAAU,MAAM;AAElB,SAAAA,UAAA,cAAc,QAAQ,EACnB,YAAY,iCAAiC,EAC7C,qBAAqB,KAAK,EAC1B;AAAA,IACC;AAAA,IACA;AAAA,EAAA,EAED;AAAA,IACC,IAAIC,UAAA;AAAA,MACF;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ,EACC,UAAU,IAAIA,iBAAO,aAAa,qBAAqB,CAAC,EACxD,UAAUC,YAAW,WAAA,EACrB,UAAUC,0BAAa,EACvB,UAAUC,aAAAA,UAAU,EACpB,UAAUC,aAAc,cAAA,EACxB,KAAK,aAAaC,aAAAA,mBAAmB,EACrC,KAAK,aAAa,OAAO,gBAAgB;AAClC,UAAA,OAAO,YAAY,KAAK;AAC9B,UAAM,MAAMC,cAAAA,QAAK,QAAQ,OAAO,KAAK,IAAI,CAAC;AAG1C,QAAI,QAAQ,QAAQ;AACd,UAAA,CAAC,KAAK,KAAK;AACP,cAAA,UAAU,MAAMC,kBAAA,QAAS,OAAO;AAAA,UACpC;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,YACT,MAAM;AAAA,UAAA;AAAA,QACR,CACD;AACG,YAAA,CAAC,QAAQ,KAAK,QAAQ;AACxBC,kBAAA,SAAS,GAAG,kCAAkC;AAAA,QAAA;AAEhD,aAAK,MAAM,QAAQ;AAAA,MAAA;AAAA,IACrB;AAAA,EAEH,CAAA,EAEA,KAAK,aAAa,CAAC,gBAAgB;AAC5B,UAAA,OAAO,YAAY,KAAK;AAExB,UAAA,EAAE,SAAS,MAAA,IAAUF,cAAA;AAE3B,QAAI,OAAO,KAAK;AAEZ,QAAA,QAAQ,IAAI,MAAM,QAAQ;AACrB,aAAA,MAAM,IAAI,EAAE;AACP,kBAAA,OAAO,UAAU;AAAA,IAAA,OACxB;AACO,kBAAA,OAAO,UAAU;AAAA,IAAA;AAG3B,QAAA,QAAQ,IAAI,MAAM,OAAO;AACpB,aAAA,MAAM,IAAI,EAAE;AACP,kBAAA,OAAO,aAAa;AAAA,IAAA,OAC3B;AACO,kBAAA,OAAO,aAAa;AAAA,IAAA;AAG9B,QAAA,QAAQ,IAAI,MAAM,QAAQ;AAC5BE,cAAA;AAAA,QACE;AAAA,QACA,aAAa,KAAK,IAAI;AAAA,MACxB;AAAA,IAAA;AAAA,EAEH,CAAA,EACA;AAAA,IACC;AAAA,IACAC,YAAA;AAAA,MACE;AAAA,MACA,EAAE,aAAa,yBAAyB;AAAA,IAAA;AAAA,EAC1C,EAED,OAAO,MAAM;AAEpB;;"}