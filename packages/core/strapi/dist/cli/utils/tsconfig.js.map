{"version":3,"file":"tsconfig.js","sources":["../../../src/cli/utils/tsconfig.ts"],"sourcesContent":["import os from 'os';\r\nimport ts from 'typescript';\r\nimport type { Logger } from './logger';\r\n\r\ninterface TsConfig {\r\n  config: ts.ParsedCommandLine;\r\n  path: string;\r\n}\r\n\r\n/**\r\n * @description Load a tsconfig.json file and return the parsed config.\r\n *\r\n * @internal\r\n */\r\nconst loadTsConfig = ({\r\n  cwd,\r\n  path,\r\n  logger,\r\n}: {\r\n  cwd: string;\r\n  path: string;\r\n  logger: Logger;\r\n}): TsConfig | undefined => {\r\n  const configPath = ts.findConfigFile(cwd, ts.sys.fileExists, path);\r\n\r\n  if (!configPath) {\r\n    return undefined;\r\n  }\r\n\r\n  const configFile = ts.readConfigFile(configPath, ts.sys.readFile);\r\n\r\n  const parsedConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, cwd);\r\n\r\n  logger.debug(`Loaded user TS config:`, os.EOL, parsedConfig);\r\n\r\n  return {\r\n    config: parsedConfig,\r\n    path: configPath,\r\n  };\r\n};\r\n\r\nexport { loadTsConfig };\r\nexport type { TsConfig };\r\n"],"names":["ts","os"],"mappings":";;;;;;;AAcA,MAAM,eAAe,CAAC;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACF,MAI4B;AAC1B,QAAM,aAAaA,YAAG,QAAA,eAAe,KAAKA,YAAAA,QAAG,IAAI,YAAY,IAAI;AAEjE,MAAI,CAAC,YAAY;AACR,WAAA;AAAA,EAAA;AAGT,QAAM,aAAaA,YAAAA,QAAG,eAAe,YAAYA,YAAA,QAAG,IAAI,QAAQ;AAEhE,QAAM,eAAeA,YAAG,QAAA,2BAA2B,WAAW,QAAQA,YAAA,QAAG,KAAK,GAAG;AAEjF,SAAO,MAAM,0BAA0BC,YAAG,QAAA,KAAK,YAAY;AAEpD,SAAA;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AACF;;"}