{"version":3,"file":"objects-D6yBsdmx.mjs","sources":["../../admin/src/utils/objects.ts"],"sourcesContent":["import clone from 'lodash/clone';\r\nimport toPath from 'lodash/toPath';\r\n\r\n/**\r\n * Deeply get a value from an object via its path.\r\n */\r\nexport function getIn(obj: any, key: string | string[], def?: any, pathStartIndex: number = 0) {\r\n  const path = toPath(key);\r\n  while (obj && pathStartIndex < path.length) {\r\n    obj = obj[path[pathStartIndex++]];\r\n  }\r\n\r\n  // check if path is not in the end\r\n  if (pathStartIndex !== path.length && !obj) {\r\n    return def;\r\n  }\r\n\r\n  return obj === undefined ? def : obj;\r\n}\r\n\r\n/** @internal is the given object an Object? */\r\nexport const isObject = (obj: any): obj is object =>\r\n  obj !== null && typeof obj === 'object' && !Array.isArray(obj);\r\n\r\n/** @internal is the given object an integer? */\r\nexport const isInteger = (obj: any): boolean => String(Math.floor(Number(obj))) === obj;\r\n\r\n/**\r\n * Deeply set a value from in object via its path. If the value at `path`\r\n * has changed, return a shallow copy of obj with `value` set at `path`.\r\n * If `value` has not changed, return the original `obj`.\r\n *\r\n * Existing objects / arrays along `path` are also shallow copied. Sibling\r\n * objects along path retain the same internal js reference. Since new\r\n * objects / arrays are only created along `path`, we can test if anything\r\n * changed in a nested structure by comparing the object's reference in\r\n * the old and new object, similar to how russian doll cache invalidation\r\n * works.\r\n *\r\n * In earlier versions of this function, which used cloneDeep, there were\r\n * issues whereby settings a nested value would mutate the parent\r\n * instead of creating a new object. `clone` avoids that bug making a\r\n * shallow copy of the objects along the update path\r\n * so no object is mutated in place.\r\n *\r\n * Before changing this function, please read through the following\r\n * discussions.\r\n *\r\n * @see https://github.com/developit/linkstate\r\n * @see https://github.com/jaredpalmer/formik/pull/123\r\n */\r\nexport function setIn(obj: any, path: string, value: any): any {\r\n  const res: any = clone(obj); // this keeps inheritance when obj is a class\r\n  let resVal: any = res;\r\n  let i = 0;\r\n  const pathArray = toPath(path);\r\n\r\n  for (; i < pathArray.length - 1; i++) {\r\n    const currentPath: string = pathArray[i];\r\n    const currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\r\n\r\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\r\n      resVal = resVal[currentPath] = clone(currentObj);\r\n    } else {\r\n      const nextPath: string = pathArray[i + 1];\r\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\r\n    }\r\n  }\r\n\r\n  // Return original object if new value is the same as current\r\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\r\n    return obj;\r\n  }\r\n\r\n  if (value === undefined) {\r\n    delete resVal[pathArray[i]];\r\n  } else {\r\n    resVal[pathArray[i]] = value;\r\n  }\r\n\r\n  // If the path array has a single element, the loop did not run.\r\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\r\n  if (i === 0 && value === undefined) {\r\n    delete res[pathArray[i]];\r\n  }\r\n\r\n  return res;\r\n}\r\n"],"names":[],"mappings":";;AAMO,SAAS,MAAM,KAAU,KAAwB,KAAW,iBAAyB,GAAG;AACvF,QAAA,OAAO,OAAO,GAAG;AAChB,SAAA,OAAO,iBAAiB,KAAK,QAAQ;AACpC,UAAA,IAAI,KAAK,gBAAgB,CAAC;AAAA,EAAA;AAIlC,MAAI,mBAAmB,KAAK,UAAU,CAAC,KAAK;AACnC,WAAA;AAAA,EAAA;AAGF,SAAA,QAAQ,SAAY,MAAM;AACnC;AAGa,MAAA,WAAW,CAAC,QACvB,QAAQ,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,GAAG;AAGlD,MAAA,YAAY,CAAC,QAAsB,OAAO,KAAK,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM;AA0BpE,SAAA,MAAM,KAAU,MAAc,OAAiB;AACvD,QAAA,MAAW,MAAM,GAAG;AAC1B,MAAI,SAAc;AAClB,MAAI,IAAI;AACF,QAAA,YAAY,OAAO,IAAI;AAE7B,SAAO,IAAI,UAAU,SAAS,GAAG,KAAK;AAC9B,UAAA,cAAsB,UAAU,CAAC;AACjC,UAAA,aAAkB,MAAM,KAAK,UAAU,MAAM,GAAG,IAAI,CAAC,CAAC;AAE5D,QAAI,eAAe,SAAS,UAAU,KAAK,MAAM,QAAQ,UAAU,IAAI;AACrE,eAAS,OAAO,WAAW,IAAI,MAAM,UAAU;AAAA,IAAA,OAC1C;AACC,YAAA,WAAmB,UAAU,IAAI,CAAC;AACxC,eAAS,OAAO,WAAW,IAAI,UAAU,QAAQ,KAAK,OAAO,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC;AAAA,IAAA;AAAA,EACtF;AAIG,OAAA,MAAM,IAAI,MAAM,QAAQ,UAAU,CAAC,CAAC,MAAM,OAAO;AAC7C,WAAA;AAAA,EAAA;AAGgB;AAChB,WAAA,OAAO,UAAU,CAAC,CAAC;AAAA,EAAA;AAOxB,MAAA,MAAM,KAAK,UAAU,QAAW;AAC3B,WAAA,IAAI,UAAU,CAAC,CAAC;AAAA,EAAA;AAGlB,SAAA;AACT;"}