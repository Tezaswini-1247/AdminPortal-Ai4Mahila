{"version":3,"file":"EditViewPage-COVXj9bh.mjs","sources":["../../admin/src/hooks/useOnce.ts","../../admin/src/pages/EditView/components/FormLayout.tsx","../../admin/src/pages/EditView/EditViewPage.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport * as React from 'react';\r\n\r\nexport const useOnce = (effect: React.EffectCallback) => React.useEffect(effect, emptyDeps);\r\n\r\nconst emptyDeps: React.DependencyList = [];\r\n","import { Box, Flex, Grid } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { EditLayout } from '../../../hooks/useDocumentLayout';\r\n\r\nimport { InputRenderer } from './InputRenderer';\r\n\r\ninterface FormLayoutProps extends Pick<EditLayout, 'layout'> {}\r\n\r\nconst FormLayout = ({ layout }: FormLayoutProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { model } = useDoc();\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n      {layout.map((panel, index) => {\r\n        if (panel.some((row) => row.some((field) => field.type === 'dynamiczone'))) {\r\n          const [row] = panel;\r\n          const [field] = row;\r\n\r\n          const fieldWithTranslatedLabel = {\r\n            ...field,\r\n            label: formatMessage({\r\n              id: `content-manager.content-types.${model}.${field.name}`,\r\n              defaultMessage: field.label,\r\n            }),\r\n          };\r\n\r\n          return (\r\n            <Grid.Root key={field.name} gap={4}>\r\n              <Grid.Item col={12} s={12} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n                <InputRenderer {...fieldWithTranslatedLabel} />\r\n              </Grid.Item>\r\n            </Grid.Root>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <Box\r\n            key={index}\r\n            hasRadius\r\n            background=\"neutral0\"\r\n            shadow=\"tableShadow\"\r\n            paddingLeft={6}\r\n            paddingRight={6}\r\n            paddingTop={6}\r\n            paddingBottom={6}\r\n            borderColor=\"neutral150\"\r\n          >\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n              {panel.map((row, gridRowIndex) => (\r\n                <Grid.Root key={gridRowIndex} gap={4}>\r\n                  {row.map(({ size, ...field }) => {\r\n                    const fieldWithTranslatedLabel = {\r\n                      ...field,\r\n                      label: formatMessage({\r\n                        id: `content-manager.content-types.${model}.${field.name}`,\r\n                        defaultMessage: field.label,\r\n                      }),\r\n                    };\r\n                    return (\r\n                      <Grid.Item\r\n                        col={size}\r\n                        key={field.name}\r\n                        s={12}\r\n                        xs={12}\r\n                        direction=\"column\"\r\n                        alignItems=\"stretch\"\r\n                      >\r\n                        <InputRenderer {...fieldWithTranslatedLabel} />\r\n                      </Grid.Item>\r\n                    );\r\n                  })}\r\n                </Grid.Root>\r\n              ))}\r\n            </Flex>\r\n          </Box>\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { FormLayout, FormLayoutProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Page,\r\n  Blocker,\r\n  Form,\r\n  useRBAC,\r\n  useNotification,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Grid, Main, Tabs } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { SINGLE_TYPES } from '../../constants/collections';\r\nimport { PERMISSIONS } from '../../constants/plugin';\r\nimport { DocumentRBAC, useDocumentRBAC } from '../../features/DocumentRBAC';\r\nimport { type UseDocument, useDoc } from '../../hooks/useDocument';\r\nimport { useDocumentLayout } from '../../hooks/useDocumentLayout';\r\nimport { useLazyComponents } from '../../hooks/useLazyComponents';\r\nimport { useOnce } from '../../hooks/useOnce';\r\nimport { getTranslation } from '../../utils/translations';\r\nimport { createYupSchema } from '../../utils/validation';\r\n\r\nimport { FormLayout } from './components/FormLayout';\r\nimport { Header } from './components/Header';\r\nimport { Panels } from './components/Panels';\r\nimport { transformDocument } from './utils/data';\r\nimport { createDefaultForm } from './utils/forms';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditViewPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst EditViewPage = () => {\r\n  const location = useLocation();\r\n  const [\r\n    {\r\n      query: { status },\r\n    },\r\n    setQuery,\r\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\r\n    status: 'draft',\r\n  });\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n\r\n  const {\r\n    document,\r\n    meta,\r\n    isLoading: isLoadingDocument,\r\n    schema,\r\n    components,\r\n    collectionType,\r\n    id,\r\n    model,\r\n    hasError,\r\n  } = useDoc();\r\n\r\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\r\n\r\n  useOnce(() => {\r\n    /**\r\n     * We only ever want to fire the notification once otherwise\r\n     * whenever the app re-renders it'll pop up regardless of\r\n     * what we do because the state comes from react-router-dom\r\n     */\r\n    if (location?.state && 'error' in location.state) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: location.state.error,\r\n        timeout: 5000,\r\n      });\r\n    }\r\n  });\r\n\r\n  const isLoadingActionsRBAC = useDocumentRBAC('EditViewPage', (state) => state.isLoading);\r\n\r\n  const isSingleType = collectionType === SINGLE_TYPES;\r\n\r\n  /**\r\n   * single-types don't current have an id, but because they're a singleton\r\n   * we can simply use the update operation to continuously update the same\r\n   * document with varying params.\r\n   */\r\n  const isCreatingDocument = !id && !isSingleType;\r\n\r\n  const {\r\n    isLoading: isLoadingLayout,\r\n    edit: {\r\n      layout,\r\n      settings: { mainField },\r\n    },\r\n  } = useDocumentLayout(model);\r\n\r\n  const { isLazyLoading } = useLazyComponents([]);\r\n\r\n  const isLoading = isLoadingActionsRBAC || isLoadingDocument || isLoadingLayout || isLazyLoading;\r\n\r\n  /**\r\n   * Here we prepare the form for editing, we need to:\r\n   * - remove prohibited fields from the document (passwords | ADD YOURS WHEN THERES A NEW ONE)\r\n   * - swap out count objects on relations for empty arrays\r\n   * - set __temp_key__ on array objects for drag & drop\r\n   *\r\n   * We also prepare the form for new documents, so we need to:\r\n   * - set default values on fields\r\n   */\r\n  const initialValues = React.useMemo(() => {\r\n    if ((!document && !isCreatingDocument && !isSingleType) || !schema) {\r\n      return undefined;\r\n    }\r\n\r\n    /**\r\n     * Check that we have an ID so we know the\r\n     * document has been created in some way.\r\n     */\r\n    const form = document?.id ? document : createDefaultForm(schema, components);\r\n\r\n    return transformDocument(schema, components)(form);\r\n  }, [document, isCreatingDocument, isSingleType, schema, components]);\r\n\r\n  if (hasError) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  if (isLoading && !document?.documentId) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (!initialValues) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  const handleTabChange = (status: string) => {\r\n    if (status === 'published' || status === 'draft') {\r\n      setQuery({ status }, 'push', true);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * We look to see what the mainField is from the configuration, if it's an id\r\n   * we don't use it because it's a uuid format and not very user friendly.\r\n   * Instead, we display the schema name for single-type documents\r\n   * or \"Untitled\".\r\n   */\r\n  let documentTitle = 'Untitled';\r\n  if (mainField !== 'id' && document?.[mainField]) {\r\n    documentTitle = document[mainField];\r\n  } else if (isSingleType && schema?.info.displayName) {\r\n    documentTitle = schema.info.displayName;\r\n  }\r\n\r\n  const validateSync = (values: Record<string, unknown>, options: Record<string, string>) => {\r\n    const yupSchema = createYupSchema(schema?.attributes, components, {\r\n      status,\r\n      ...options,\r\n    });\r\n\r\n    return yupSchema.validateSync(values, { abortEarly: false });\r\n  };\r\n\r\n  return (\r\n    <Main paddingLeft={10} paddingRight={10}>\r\n      <Page.Title>{documentTitle}</Page.Title>\r\n      <Form\r\n        disabled={hasDraftAndPublished && status === 'published'}\r\n        initialValues={initialValues}\r\n        method={isCreatingDocument ? 'POST' : 'PUT'}\r\n        validate={(values: Record<string, unknown>, options: Record<string, string>) => {\r\n          const yupSchema = createYupSchema(schema?.attributes, components, {\r\n            status,\r\n            ...options,\r\n          });\r\n\r\n          return yupSchema.validate(values, { abortEarly: false });\r\n        }}\r\n        initialErrors={location?.state?.forceValidation ? validateSync(initialValues, {}) : {}}\r\n      >\r\n        {({ resetForm }) => (\r\n          <>\r\n            <Header\r\n              isCreating={isCreatingDocument}\r\n              status={hasDraftAndPublished ? getDocumentStatus(document, meta) : undefined}\r\n              title={documentTitle}\r\n            />\r\n            <Tabs.Root variant=\"simple\" value={status} onValueChange={handleTabChange}>\r\n              <Tabs.List\r\n                aria-label={formatMessage({\r\n                  id: getTranslation('containers.edit.tabs.label'),\r\n                  defaultMessage: 'Document status',\r\n                })}\r\n              >\r\n                {hasDraftAndPublished ? (\r\n                  <>\r\n                    <StatusTab value=\"draft\">\r\n                      {formatMessage({\r\n                        id: getTranslation('containers.edit.tabs.draft'),\r\n                        defaultMessage: 'draft',\r\n                      })}\r\n                    </StatusTab>\r\n                    <StatusTab\r\n                      disabled={!meta || meta.availableStatus.length === 0}\r\n                      value=\"published\"\r\n                    >\r\n                      {formatMessage({\r\n                        id: getTranslation('containers.edit.tabs.published'),\r\n                        defaultMessage: 'published',\r\n                      })}\r\n                    </StatusTab>\r\n                  </>\r\n                ) : null}\r\n              </Tabs.List>\r\n              <Grid.Root paddingTop={8} gap={4}>\r\n                <Grid.Item col={9} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Tabs.Content value=\"draft\">\r\n                    <FormLayout layout={layout} />\r\n                  </Tabs.Content>\r\n                  <Tabs.Content value=\"published\">\r\n                    <FormLayout layout={layout} />\r\n                  </Tabs.Content>\r\n                </Grid.Item>\r\n                <Grid.Item col={3} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Panels />\r\n                </Grid.Item>\r\n              </Grid.Root>\r\n            </Tabs.Root>\r\n            <Blocker\r\n              // We reset the form to the published version to avoid errors like – https://strapi-inc.atlassian.net/browse/CONTENT-2284\r\n              onProceed={resetForm}\r\n            />\r\n          </>\r\n        )}\r\n      </Form>\r\n    </Main>\r\n  );\r\n};\r\n\r\nconst StatusTab = styled(Tabs.Trigger)`\r\n  text-transform: uppercase;\r\n`;\r\n\r\n/**\r\n * @internal\r\n * @description Returns the status of the document where its latest state takes priority,\r\n * this typically will be \"published\" unless a user has edited their draft in which we should\r\n * display \"modified\".\r\n */\r\nconst getDocumentStatus = (\r\n  document: ReturnType<UseDocument>['document'],\r\n  meta: ReturnType<UseDocument>['meta']\r\n): 'draft' | 'published' | 'modified' => {\r\n  const docStatus = document?.status;\r\n  const statuses = meta?.availableStatus ?? [];\r\n\r\n  /**\r\n   * Creating an entry\r\n   */\r\n  if (!docStatus) {\r\n    return 'draft';\r\n  }\r\n\r\n  /**\r\n   * We're viewing a draft, but the document could have a published version\r\n   */\r\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\r\n    return 'published';\r\n  }\r\n\r\n  return docStatus;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedEditViewPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedEditViewPage = () => {\r\n  const { slug = '' } = useParams<{\r\n    slug: string;\r\n  }>();\r\n  const {\r\n    permissions = [],\r\n    isLoading,\r\n    error,\r\n  } = useRBAC(\r\n    PERMISSIONS.map((action) => ({\r\n      action,\r\n      subject: slug,\r\n    }))\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error || !slug) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      {({ permissions }) => (\r\n        <DocumentRBAC permissions={permissions}>\r\n          <EditViewPage />\r\n        </DocumentRBAC>\r\n      )}\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { EditViewPage, ProtectedEditViewPage, getDocumentStatus };\r\n"],"names":["InputRenderer","status","permissions"],"mappings":"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"}