{"version":3,"file":"FieldTypeIcon-CMlNO8PE.mjs","sources":["../../admin/src/components/FieldTypeIcon.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\r\nimport { Box } from '@strapi/design-system';\r\nimport {\r\n  BlocksField,\r\n  BooleanField,\r\n  ComponentField,\r\n  DateField,\r\n  DynamicZoneField,\r\n  EmailField,\r\n  EnumerationField,\r\n  JsonField,\r\n  MediaField,\r\n  NumberField,\r\n  PasswordField,\r\n  RelationField,\r\n  TextField,\r\n  UidField,\r\n} from '@strapi/icons/symbols';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\nconst iconByTypes: Record<Schema.Attribute.Kind, React.ReactElement> = {\r\n  biginteger: <NumberField />,\r\n  boolean: <BooleanField />,\r\n  date: <DateField />,\r\n  datetime: <DateField />,\r\n  decimal: <NumberField />,\r\n  email: <EmailField />,\r\n  enumeration: <EnumerationField />,\r\n  float: <NumberField />,\r\n  integer: <NumberField />,\r\n  media: <MediaField />,\r\n  password: <PasswordField />,\r\n  relation: <RelationField />,\r\n  string: <TextField />,\r\n  text: <TextField />,\r\n  richtext: <TextField />,\r\n  time: <DateField />,\r\n  timestamp: <DateField />,\r\n  json: <JsonField />,\r\n  uid: <UidField />,\r\n  component: <ComponentField />,\r\n  dynamiczone: <DynamicZoneField />,\r\n  blocks: <BlocksField />,\r\n};\r\n\r\ninterface FieldTypeIconProps {\r\n  type?: keyof typeof iconByTypes;\r\n  customFieldUid?: string;\r\n}\r\n\r\nconst FieldTypeIcon = ({ type, customFieldUid }: FieldTypeIconProps) => {\r\n  const getCustomField = useStrapiApp('FieldTypeIcon', (state) => state.customFields.get);\r\n\r\n  if (!type) {\r\n    return null;\r\n  }\r\n\r\n  let Compo = iconByTypes[type];\r\n\r\n  if (customFieldUid) {\r\n    const customField = getCustomField(customFieldUid);\r\n    const CustomFieldIcon = customField?.icon;\r\n\r\n    if (CustomFieldIcon) {\r\n      Compo = (\r\n        <Box marginRight={3} width={7} height={6}>\r\n          <CustomFieldIcon />\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (!iconByTypes[type]) {\r\n    return null;\r\n  }\r\n\r\n  return Compo;\r\n};\r\n\r\nexport { FieldTypeIcon };\r\n"],"names":[],"mappings":";;;;AAuBA,MAAM,cAAiE;AAAA,EACrE,gCAAa,aAAY,EAAA;AAAA,EACzB,6BAAU,cAAa,EAAA;AAAA,EACvB,0BAAO,WAAU,EAAA;AAAA,EACjB,8BAAW,WAAU,EAAA;AAAA,EACrB,6BAAU,aAAY,EAAA;AAAA,EACtB,2BAAQ,YAAW,EAAA;AAAA,EACnB,iCAAc,kBAAiB,EAAA;AAAA,EAC/B,2BAAQ,aAAY,EAAA;AAAA,EACpB,6BAAU,aAAY,EAAA;AAAA,EACtB,2BAAQ,YAAW,EAAA;AAAA,EACnB,8BAAW,eAAc,EAAA;AAAA,EACzB,8BAAW,eAAc,EAAA;AAAA,EACzB,4BAAS,WAAU,EAAA;AAAA,EACnB,0BAAO,WAAU,EAAA;AAAA,EACjB,8BAAW,WAAU,EAAA;AAAA,EACrB,0BAAO,WAAU,EAAA;AAAA,EACjB,+BAAY,WAAU,EAAA;AAAA,EACtB,0BAAO,WAAU,EAAA;AAAA,EACjB,yBAAM,UAAS,EAAA;AAAA,EACf,+BAAY,gBAAe,EAAA;AAAA,EAC3B,iCAAc,kBAAiB,EAAA;AAAA,EAC/B,4BAAS,aAAY,CAAA,CAAA;AACvB;AAOA,MAAM,gBAAgB,CAAC,EAAE,MAAM,qBAAyC;AACtE,QAAM,iBAAiB,aAAa,iBAAiB,CAAC,UAAU,MAAM,aAAa,GAAG;AAEtF,MAAI,CAAC,MAAM;AACF,WAAA;AAAA,EAAA;AAGL,MAAA,QAAQ,YAAY,IAAI;AAE5B,MAAI,gBAAgB;AACZ,UAAA,cAAc,eAAe,cAAc;AACjD,UAAM,kBAAkB,aAAa;AAErC,QAAI,iBAAiB;AAEjB,cAAA,oBAAC,KAAI,EAAA,aAAa,GAAG,OAAO,GAAG,QAAQ,GACrC,UAAC,oBAAA,iBAAA,CAAA,CAAgB,EACnB,CAAA;AAAA,IAAA;AAAA,EAEJ;AAGE,MAAA,CAAC,YAAY,IAAI,GAAG;AACf,WAAA;AAAA,EAAA;AAGF,SAAA;AACT;"}