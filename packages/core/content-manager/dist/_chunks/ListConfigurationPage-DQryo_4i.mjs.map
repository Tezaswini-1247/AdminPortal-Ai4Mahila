{"version":3,"file":"ListConfigurationPage-DQryo_4i.mjs","sources":["../../admin/src/pages/ListConfiguration/components/Header.tsx","../../admin/src/pages/ListConfiguration/components/Settings.tsx","../../admin/src/pages/ListConfiguration/components/EditFieldForm.tsx","../../admin/src/pages/ListConfiguration/components/DraggableCard.tsx","../../admin/src/pages/ListConfiguration/components/SortDisplayedFields.tsx","../../admin/src/pages/ListConfiguration/ListConfigurationPage.tsx"],"sourcesContent":["import { useForm, BackButton, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Button } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { COLLECTION_TYPES } from '../../../constants/collections';\r\nimport { capitalise } from '../../../utils/strings';\r\nimport { getTranslation } from '../../../utils/translations';\r\n\r\ninterface HeaderProps {\r\n  collectionType: string;\r\n  name: string;\r\n  model: string;\r\n}\r\n\r\nconst Header = ({ name }: HeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const params = useParams<{ slug: string }>();\r\n\r\n  const modified = useForm('Header', (state) => state.modified);\r\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\r\n\r\n  return (\r\n    <Layouts.Header\r\n      navigationAction={<BackButton fallback={`../${COLLECTION_TYPES}/${params.slug}`} />}\r\n      primaryAction={\r\n        <Button size=\"S\" disabled={!modified} type=\"submit\" loading={isSubmitting}>\r\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n        </Button>\r\n      }\r\n      subtitle={formatMessage({\r\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.list-settings'),\r\n        defaultMessage: 'Define the settings of the list view.',\r\n      })}\r\n      title={formatMessage(\r\n        {\r\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\r\n          defaultMessage: 'Configure the view - {name}',\r\n        },\r\n        { name: capitalise(name) }\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport { Header };\r\nexport type { HeaderProps };\r\n","import * as React from 'react';\r\n\r\nimport { useForm, InputRenderer, type InputProps } from '@strapi/admin/strapi-admin';\r\nimport { Flex, Grid, Typography, useCollator } from '@strapi/design-system';\r\nimport { type MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { type EditFieldLayout } from '../../../hooks/useDocumentLayout';\r\nimport { getTranslation } from '../../../utils/translations';\r\nimport { type FormData } from '../ListConfigurationPage';\r\n\r\nimport type { DistributiveOmit } from 'react-redux';\r\n\r\nexport type InputPropsWithMessageDescriptors = DistributiveOmit<\r\n  InputProps,\r\n  'hint' | 'label' | 'placeholder'\r\n> & {\r\n  hint?: MessageDescriptor;\r\n  label: MessageDescriptor;\r\n  placeholder?: MessageDescriptor;\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description Form inputs are always displayed in a grid, so we need\r\n * to use the size property to determine how many columns the input should\r\n * take up.\r\n */\r\nexport type FormLayoutInputProps = InputPropsWithMessageDescriptors & { size: number };\r\n\r\nconst EXCLUDED_SORT_ATTRIBUTE_TYPES = [\r\n  'media',\r\n  'richtext',\r\n  'dynamiczone',\r\n  'relation',\r\n  'component',\r\n  'json',\r\n  'blocks',\r\n];\r\n\r\ninterface SortOption {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nconst Settings = () => {\r\n  const { formatMessage, locale } = useIntl();\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n  const { schema } = useDoc();\r\n\r\n  const layout = useForm<FormData['layout']>('Settings', (state) => state.values.layout ?? []);\r\n  const currentSortBy = useForm<FormData['settings']['defaultSortBy']>(\r\n    'Settings',\r\n    (state) => state.values.settings.defaultSortBy\r\n  );\r\n  const onChange = useForm('Settings', (state) => state.onChange);\r\n\r\n  const sortOptions = React.useMemo(\r\n    () =>\r\n      Object.values(layout).reduce<SortOption[]>((acc, field) => {\r\n        if (schema && !EXCLUDED_SORT_ATTRIBUTE_TYPES.includes(schema.attributes[field.name].type)) {\r\n          acc.push({\r\n            value: field.name,\r\n            label: typeof field.label !== 'string' ? formatMessage(field.label) : field.label,\r\n          });\r\n        }\r\n\r\n        return acc;\r\n      }, []),\r\n    [formatMessage, layout, schema]\r\n  );\r\n\r\n  const sortOptionsSorted = sortOptions.sort((a, b) => formatter.compare(a.label, b.label));\r\n\r\n  React.useEffect(() => {\r\n    if (sortOptionsSorted.findIndex((opt) => opt.value === currentSortBy) === -1) {\r\n      onChange('settings.defaultSortBy', sortOptionsSorted[0]?.value);\r\n    }\r\n  }, [currentSortBy, onChange, sortOptionsSorted]);\r\n\r\n  const formLayout = React.useMemo(\r\n    () =>\r\n      SETTINGS_FORM_LAYOUT.map((row) =>\r\n        row.map((field) => {\r\n          if (field.type === 'enumeration') {\r\n            return {\r\n              ...field,\r\n              hint: field.hint ? formatMessage(field.hint) : undefined,\r\n              label: formatMessage(field.label),\r\n              options: field.name === 'settings.defaultSortBy' ? sortOptionsSorted : field.options,\r\n            };\r\n          } else {\r\n            return {\r\n              ...field,\r\n              hint: field.hint ? formatMessage(field.hint) : undefined,\r\n              label: formatMessage(field.label),\r\n            };\r\n          }\r\n        })\r\n      ) as [top: EditFieldLayout[], bottom: EditFieldLayout[]],\r\n    [formatMessage, sortOptionsSorted]\r\n  );\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n      <Typography variant=\"delta\" tag=\"h2\">\r\n        {formatMessage({\r\n          id: getTranslation('containers.SettingPage.settings'),\r\n          defaultMessage: 'Settings',\r\n        })}\r\n      </Typography>\r\n      <Grid.Root key=\"bottom\" gap={4}>\r\n        {formLayout.map((row) =>\r\n          row.map(({ size, ...field }) => (\r\n            <Grid.Item key={field.name} s={12} col={size} direction=\"column\" alignItems=\"stretch\">\r\n              {/* @ts-expect-error â€“ issue with EnumerationProps conflicting with InputProps */}\r\n              <InputRenderer {...field} />\r\n            </Grid.Item>\r\n          ))\r\n        )}\r\n      </Grid.Root>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst SETTINGS_FORM_LAYOUT: FormLayoutInputProps[][] = [\r\n  [\r\n    {\r\n      label: {\r\n        id: getTranslation('form.Input.search'),\r\n        defaultMessage: 'Enable search',\r\n      },\r\n      name: 'settings.searchable',\r\n      size: 4,\r\n      type: 'boolean' as const,\r\n    },\r\n    {\r\n      label: {\r\n        id: getTranslation('form.Input.filters'),\r\n        defaultMessage: 'Enable filters',\r\n      },\r\n      name: 'settings.filterable',\r\n      size: 4,\r\n      type: 'boolean' as const,\r\n    },\r\n    {\r\n      label: {\r\n        id: getTranslation('form.Input.bulkActions'),\r\n        defaultMessage: 'Enable bulk actions',\r\n      },\r\n      name: 'settings.bulkable',\r\n      size: 4,\r\n      type: 'boolean' as const,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      hint: {\r\n        id: getTranslation('form.Input.pageEntries.inputDescription'),\r\n        defaultMessage: 'Note: You can override this value in the Collection Type settings page.',\r\n      },\r\n      label: {\r\n        id: getTranslation('form.Input.pageEntries'),\r\n        defaultMessage: 'Entries per page',\r\n      },\r\n      name: 'settings.pageSize',\r\n      options: ['10', '20', '50', '100'].map((value) => ({ value, label: value })),\r\n      size: 6,\r\n      type: 'enumeration' as const,\r\n    },\r\n    {\r\n      label: {\r\n        id: getTranslation('form.Input.defaultSort'),\r\n        defaultMessage: 'Default sort attribute',\r\n      },\r\n      name: 'settings.defaultSortBy',\r\n      options: [],\r\n      size: 3,\r\n      type: 'enumeration' as const,\r\n    },\r\n    {\r\n      label: {\r\n        id: getTranslation('form.Input.sort.order'),\r\n        defaultMessage: 'Default sort order',\r\n      },\r\n      name: 'settings.defaultSortOrder',\r\n      options: ['ASC', 'DESC'].map((value) => ({ value, label: value })),\r\n      size: 3,\r\n      type: 'enumeration' as const,\r\n    },\r\n  ],\r\n];\r\n\r\nexport { Settings };\r\n","import { Form, useField, InputRenderer, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, FlexComponent, Grid, Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\nimport * as yup from 'yup';\r\n\r\nimport { FieldTypeIcon } from '../../../components/FieldTypeIcon';\r\nimport { capitalise } from '../../../utils/strings';\r\nimport { getTranslation } from '../../../utils/translations';\r\n\r\nimport type { ListFieldLayout } from '../../../hooks/useDocumentLayout';\r\nimport type { FormData } from '../ListConfigurationPage';\r\n\r\ninterface EditFieldFormProps extends Pick<ListFieldLayout, 'attribute'> {\r\n  name: string;\r\n  onClose: () => void;\r\n}\r\n\r\nconst FIELD_SCHEMA = yup.object().shape({\r\n  label: yup.string().required(),\r\n  sortable: yup.boolean(),\r\n});\r\n\r\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n\r\n  const { value, onChange } = useField<FormData['layout'][number]>(name);\r\n\r\n  if (!value) {\r\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\r\n    console.error(\r\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\r\n    );\r\n\r\n    toggleNotification({\r\n      message: formatMessage({\r\n        id: 'content-manager.containers.list-settings.modal-form.error',\r\n        defaultMessage: 'An error occurred while trying to open the form.',\r\n      }),\r\n      type: 'danger',\r\n    });\r\n\r\n    return null;\r\n  }\r\n\r\n  let shouldDisplaySortToggle = !['media', 'relation'].includes(attribute.type);\r\n\r\n  if ('relation' in attribute && ['oneWay', 'oneToOne', 'manyToOne'].includes(attribute.relation)) {\r\n    shouldDisplaySortToggle = true;\r\n  }\r\n\r\n  return (\r\n    <Modal.Content>\r\n      <Form\r\n        method=\"PUT\"\r\n        initialValues={value}\r\n        validationSchema={FIELD_SCHEMA}\r\n        onSubmit={(data) => {\r\n          onChange(name, data);\r\n          onClose();\r\n        }}\r\n      >\r\n        <Modal.Header>\r\n          <HeaderContainer>\r\n            {/* @ts-expect-error attribute.type === custom does not work here */}\r\n            <FieldTypeIcon type={attribute.type} />\r\n            <Modal.Title>\r\n              {formatMessage(\r\n                {\r\n                  id: getTranslation('containers.list-settings.modal-form.label'),\r\n                  defaultMessage: 'Edit {fieldName}',\r\n                },\r\n                { fieldName: capitalise(value.label) }\r\n              )}\r\n            </Modal.Title>\r\n          </HeaderContainer>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Grid.Root gap={4}>\r\n            {[\r\n              {\r\n                name: 'label',\r\n                label: formatMessage({\r\n                  id: getTranslation('form.Input.label'),\r\n                  defaultMessage: 'Label',\r\n                }),\r\n                hint: formatMessage({\r\n                  id: getTranslation('form.Input.label.inputDescription'),\r\n                  defaultMessage: \"This value overrides the label displayed in the table's head\",\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                label: formatMessage({\r\n                  id: getTranslation('form.Input.sort.field'),\r\n                  defaultMessage: 'Enable sort on this field',\r\n                }),\r\n                name: 'sortable',\r\n                size: 6,\r\n                type: 'boolean' as const,\r\n              },\r\n            ]\r\n              .filter(\r\n                (field) =>\r\n                  field.name !== 'sortable' ||\r\n                  (field.name === 'sortable' && shouldDisplaySortToggle)\r\n              )\r\n              .map(({ size, ...field }) => (\r\n                <Grid.Item\r\n                  key={field.name}\r\n                  s={12}\r\n                  col={size}\r\n                  direction=\"column\"\r\n                  alignItems=\"stretch\"\r\n                >\r\n                  <InputRenderer {...field} />\r\n                </Grid.Item>\r\n              ))}\r\n          </Grid.Root>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={onClose} variant=\"tertiary\">\r\n            {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n          </Button>\r\n          <Button type=\"submit\">\r\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\nconst HeaderContainer = styled<FlexComponent>(Flex)`\r\n  svg {\r\n    width: 3.2rem;\r\n    margin-right: ${({ theme }) => theme.spaces[3]};\r\n  }\r\n`;\r\n\r\nexport { EditFieldForm };\r\nexport type { EditFieldFormProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  BoxComponent,\r\n  Flex,\r\n  FlexComponent,\r\n  Modal,\r\n  Typography,\r\n  useComposedRefs,\r\n} from '@strapi/design-system';\r\nimport { Cross, Drag, Pencil } from '@strapi/icons';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { CardDragPreview } from '../../../components/DragPreviews/CardDragPreview';\r\nimport { ItemTypes } from '../../../constants/dragAndDrop';\r\nimport { useDragAndDrop } from '../../../hooks/useDragAndDrop';\r\nimport { getTranslation } from '../../../utils/translations';\r\n\r\nimport { EditFieldForm } from './EditFieldForm';\r\n\r\nimport type { ListFieldLayout } from '../../../hooks/useDocumentLayout';\r\n\r\ntype DraggableCardProps = Omit<ListFieldLayout, 'label'> & {\r\n  label: string;\r\n  index: number;\r\n  isDraggingSibling: boolean;\r\n  onMoveField: (dragIndex: number, hoverIndex: number) => void;\r\n  onRemoveField: () => void;\r\n  setIsDraggingSibling: (isDragging: boolean) => void;\r\n};\r\n\r\nconst DraggableCard = ({\r\n  attribute,\r\n  index,\r\n  isDraggingSibling,\r\n  label,\r\n  name,\r\n  onMoveField,\r\n  onRemoveField,\r\n  setIsDraggingSibling,\r\n}: DraggableCardProps) => {\r\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n  const [, forceRerenderAfterDnd] = React.useState(false);\r\n\r\n  const [{ isDragging }, objectRef, dropRef, dragRef, dragPreviewRef] = useDragAndDrop(true, {\r\n    type: ItemTypes.FIELD,\r\n    item: { index, label, name },\r\n    index,\r\n    onMoveItem: onMoveField,\r\n    onEnd: () => setIsDraggingSibling(false),\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\r\n  }, [dragPreviewRef]);\r\n\r\n  React.useEffect(() => {\r\n    if (isDragging) {\r\n      setIsDraggingSibling(true);\r\n    }\r\n  }, [isDragging, setIsDraggingSibling]);\r\n\r\n  // Effect in order to force a rerender after reordering the components\r\n  // Since we are removing the Accordion when doing the DnD  we are losing the dragRef, therefore the replaced element cannot be dragged\r\n  // anymore, this hack forces a rerender in order to apply the dragRef\r\n  React.useEffect(() => {\r\n    if (!isDraggingSibling) {\r\n      forceRerenderAfterDnd((prev) => !prev);\r\n    }\r\n  }, [isDraggingSibling]);\r\n\r\n  const composedRefs = useComposedRefs<HTMLButtonElement>(\r\n    dropRef,\r\n    objectRef as React.RefObject<HTMLButtonElement>\r\n  );\r\n\r\n  return (\r\n    <FieldWrapper ref={composedRefs}>\r\n      {isDragging && <CardDragPreview label={label} />}\r\n      {!isDragging && isDraggingSibling && <CardDragPreview isSibling label={label} />}\r\n\r\n      {!isDragging && !isDraggingSibling && (\r\n        <FieldContainer\r\n          borderColor=\"neutral150\"\r\n          background=\"neutral100\"\r\n          hasRadius\r\n          justifyContent=\"space-between\"\r\n          onClick={() => setIsModalOpen(true)}\r\n        >\r\n          <Flex gap={3}>\r\n            <DragButton\r\n              ref={dragRef}\r\n              aria-label={formatMessage(\r\n                {\r\n                  id: getTranslation('components.DraggableCard.move.field'),\r\n                  defaultMessage: 'Move {item}',\r\n                },\r\n                { item: label }\r\n              )}\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <Drag />\r\n            </DragButton>\r\n            <Typography fontWeight=\"bold\">{label}</Typography>\r\n          </Flex>\r\n          <Flex paddingLeft={3} onClick={(e) => e.stopPropagation()}>\r\n            <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\r\n              <Modal.Trigger>\r\n                <ActionButton\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                  aria-label={formatMessage(\r\n                    {\r\n                      id: getTranslation('components.DraggableCard.edit.field'),\r\n                      defaultMessage: 'Edit {item}',\r\n                    },\r\n                    { item: label }\r\n                  )}\r\n                  type=\"button\"\r\n                >\r\n                  <Pencil width=\"1.2rem\" height=\"1.2rem\" />\r\n                </ActionButton>\r\n              </Modal.Trigger>\r\n              <EditFieldForm\r\n                attribute={attribute}\r\n                name={`layout.${index}`}\r\n                onClose={() => {\r\n                  setIsModalOpen(false);\r\n                }}\r\n              />\r\n            </Modal.Root>\r\n            <ActionButton\r\n              onClick={onRemoveField}\r\n              data-testid={`delete-${name}`}\r\n              aria-label={formatMessage(\r\n                {\r\n                  id: getTranslation('components.DraggableCard.delete.field'),\r\n                  defaultMessage: 'Delete {item}',\r\n                },\r\n                { item: label }\r\n              )}\r\n              type=\"button\"\r\n            >\r\n              <Cross width=\"1.2rem\" height=\"1.2rem\" />\r\n            </ActionButton>\r\n          </Flex>\r\n        </FieldContainer>\r\n      )}\r\n    </FieldWrapper>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  height: ${({ theme }) => theme.spaces[7]};\r\n  color: ${({ theme }) => theme.colors.neutral600};\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.neutral700};\r\n  }\r\n\r\n  &:last-child {\r\n    padding: 0 ${({ theme }) => theme.spaces[3]};\r\n  }\r\n`;\r\n\r\nconst DragButton = styled(ActionButton)`\r\n  padding: 0 ${({ theme }) => theme.spaces[3]};\r\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n  cursor: all-scroll;\r\n`;\r\n\r\nconst FieldContainer = styled<FlexComponent>(Flex)`\r\n  max-height: 3.2rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FieldWrapper = styled<BoxComponent>(Box)`\r\n  &:last-child {\r\n    padding-right: ${({ theme }) => theme.spaces[3]};\r\n  }\r\n`;\r\n\r\nexport { DraggableCard };\r\nexport type { DraggableCardProps };\r\n","import * as React from 'react';\r\n\r\nimport { useForm } from '@strapi/admin/strapi-admin';\r\nimport { Box, Flex, VisuallyHidden, Typography, Menu } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { useGetContentTypeConfigurationQuery } from '../../../services/contentTypes';\r\nimport { checkIfAttributeIsDisplayable } from '../../../utils/attributes';\r\nimport { getTranslation } from '../../../utils/translations';\r\n\r\nimport { DraggableCard, DraggableCardProps } from './DraggableCard';\r\n\r\nimport type { ListLayout } from '../../../hooks/useDocumentLayout';\r\nimport type { FormData } from '../ListConfigurationPage';\r\n\r\ninterface SortDisplayedFieldsProps extends Pick<ListLayout, 'layout'> {}\r\n\r\nconst SortDisplayedFields = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { model, schema } = useDoc();\r\n  const [isDraggingSibling, setIsDraggingSibling] = React.useState(false);\r\n  const [lastAction, setLastAction] = React.useState<string | null>(null);\r\n  const scrollableContainerRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const values = useForm<FormData['layout']>(\r\n    'SortDisplayedFields',\r\n    (state) => state.values.layout ?? []\r\n  );\r\n  const addFieldRow = useForm('SortDisplayedFields', (state) => state.addFieldRow);\r\n  const removeFieldRow = useForm('SortDisplayedFields', (state) => state.removeFieldRow);\r\n  const moveFieldRow = useForm('SortDisplayedFields', (state) => state.moveFieldRow);\r\n\r\n  const { metadata: allMetadata } = useGetContentTypeConfigurationQuery(model, {\r\n    selectFromResult: ({ data }) => ({ metadata: data?.contentType.metadatas ?? {} }),\r\n  });\r\n\r\n  /**\r\n   * This is our list of fields that are not displayed in the current layout\r\n   * so we create their default state to be added to the layout.\r\n   */\r\n  const nonDisplayedFields = React.useMemo(() => {\r\n    if (!schema) {\r\n      return [];\r\n    }\r\n\r\n    const displayedFieldNames = values.map((field) => field.name);\r\n\r\n    return Object.entries(schema.attributes).reduce<Array<FormData['layout'][number]>>(\r\n      (acc, [name, attribute]) => {\r\n        if (!displayedFieldNames.includes(name) && checkIfAttributeIsDisplayable(attribute)) {\r\n          const { list: metadata } = allMetadata[name];\r\n\r\n          acc.push({\r\n            name,\r\n            label: metadata.label || name,\r\n            sortable: metadata.sortable,\r\n          });\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      []\r\n    );\r\n  }, [allMetadata, values, schema]);\r\n\r\n  const handleAddField = (field: FormData['layout'][number]) => {\r\n    setLastAction('add');\r\n    addFieldRow('layout', field);\r\n  };\r\n\r\n  const handleRemoveField = (index: number) => {\r\n    setLastAction('remove');\r\n    removeFieldRow('layout', index);\r\n  };\r\n\r\n  const handleMoveField: DraggableCardProps['onMoveField'] = (dragIndex, hoverIndex) => {\r\n    moveFieldRow('layout', dragIndex, hoverIndex);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (lastAction === 'add' && scrollableContainerRef?.current) {\r\n      scrollableContainerRef.current.scrollLeft = scrollableContainerRef.current.scrollWidth;\r\n    }\r\n  }, [lastAction]);\r\n\r\n  return (\r\n    <Flex alignItems=\"stretch\" direction=\"column\" gap={4}>\r\n      <Typography variant=\"delta\" tag=\"h2\">\r\n        {formatMessage({\r\n          id: getTranslation('containers.SettingPage.view'),\r\n          defaultMessage: 'View',\r\n        })}\r\n      </Typography>\r\n\r\n      <Flex padding={4} borderColor=\"neutral300\" borderStyle=\"dashed\" borderWidth=\"1px\" hasRadius>\r\n        <Box flex=\"1\" overflow=\"auto hidden\" ref={scrollableContainerRef}>\r\n          <Flex gap={3}>\r\n            {values.map((field, index) => (\r\n              <DraggableCard\r\n                key={field.name}\r\n                index={index}\r\n                isDraggingSibling={isDraggingSibling}\r\n                onMoveField={handleMoveField}\r\n                onRemoveField={() => handleRemoveField(index)}\r\n                setIsDraggingSibling={setIsDraggingSibling}\r\n                {...field}\r\n                attribute={schema!.attributes[field.name]}\r\n                label={typeof field.label === 'object' ? formatMessage(field.label) : field.label}\r\n              />\r\n            ))}\r\n          </Flex>\r\n        </Box>\r\n\r\n        <Menu.Root>\r\n          <Menu.Trigger\r\n            paddingLeft={2}\r\n            paddingRight={2}\r\n            justifyContent=\"center\"\r\n            endIcon={null}\r\n            disabled={nonDisplayedFields.length === 0}\r\n            variant=\"tertiary\"\r\n          >\r\n            <VisuallyHidden tag=\"span\">\r\n              {formatMessage({\r\n                id: getTranslation('components.FieldSelect.label'),\r\n                defaultMessage: 'Add a field',\r\n              })}\r\n            </VisuallyHidden>\r\n            <Plus aria-hidden focusable={false} style={{ position: 'relative', top: 2 }} />\r\n          </Menu.Trigger>\r\n          <Menu.Content>\r\n            {nonDisplayedFields.map((field) => (\r\n              <Menu.Item key={field.name} onSelect={() => handleAddField(field)}>\r\n                {typeof field.label === 'object' ? formatMessage(field.label) : field.label}\r\n              </Menu.Item>\r\n            ))}\r\n          </Menu.Content>\r\n        </Menu.Root>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { SortDisplayedFields };\r\nexport type { SortDisplayedFieldsProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Form,\r\n  type FormProps,\r\n  useNotification,\r\n  useTracking,\r\n  useAPIErrorHandler,\r\n  Page,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Divider, Flex, Main } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { SINGLE_TYPES } from '../../constants/collections';\r\nimport { useDoc } from '../../hooks/useDocument';\r\nimport { ListFieldLayout, ListLayout, useDocLayout } from '../../hooks/useDocumentLayout';\r\nimport { useTypedSelector } from '../../modules/hooks';\r\nimport { useUpdateContentTypeConfigurationMutation } from '../../services/contentTypes';\r\nimport { setIn } from '../../utils/objects';\r\n\r\nimport { Header } from './components/Header';\r\nimport { Settings } from './components/Settings';\r\nimport { SortDisplayedFields } from './components/SortDisplayedFields';\r\n\r\nimport type { Metadatas } from '../../../../shared/contracts/content-types';\r\n\r\ninterface FormData extends Pick<ListLayout, 'settings'> {\r\n  layout: Array<Pick<ListFieldLayout, 'sortable' | 'name'> & { label: string }>;\r\n}\r\n\r\nconst ListConfiguration = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { model, collectionType } = useDoc();\r\n\r\n  const { isLoading: isLoadingLayout, list, edit } = useDocLayout();\r\n\r\n  const [updateContentTypeConfiguration] = useUpdateContentTypeConfigurationMutation();\r\n  const handleSubmit: FormProps<FormData>['onSubmit'] = async (data) => {\r\n    try {\r\n      trackUsage('willSaveContentTypeLayout');\r\n      const layoutData = data.layout ?? [];\r\n      /**\r\n       * We reconstruct the metadatas object by taking the existing edit metadatas\r\n       * and re-merging that by attribute name with the current list metadatas, whilst overwriting\r\n       * the data from the form we've built.\r\n       */\r\n      const meta = Object.entries(edit.metadatas).reduce<Metadatas>((acc, [name, editMeta]) => {\r\n        const { mainField: _mainField, ...listMeta } = list.metadatas[name];\r\n\r\n        const { label, sortable } = layoutData.find((field) => field.name === name) ?? {};\r\n\r\n        acc[name] = {\r\n          edit: editMeta,\r\n          list: {\r\n            ...listMeta,\r\n            label: label || listMeta.label,\r\n            sortable: sortable || listMeta.sortable,\r\n          },\r\n        };\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      const res = await updateContentTypeConfiguration({\r\n        layouts: {\r\n          edit: edit.layout.flatMap((panel) =>\r\n            panel.map((row) => row.map(({ name, size }) => ({ name, size })))\r\n          ),\r\n          list: layoutData.map((field) => field.name),\r\n        },\r\n        settings: setIn(data.settings, 'displayName', undefined),\r\n        metadatas: meta,\r\n        uid: model,\r\n      });\r\n\r\n      if ('data' in res) {\r\n        trackUsage('didEditListSettings');\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\r\n        });\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const initialValues = React.useMemo(() => {\r\n    return {\r\n      layout: list.layout.map(({ label, sortable, name }) => ({\r\n        label: typeof label === 'string' ? label : formatMessage(label),\r\n        sortable,\r\n        name,\r\n      })),\r\n      settings: list.settings,\r\n    } satisfies FormData;\r\n  }, [formatMessage, list.layout, list.settings]);\r\n\r\n  if (collectionType === SINGLE_TYPES) {\r\n    return <Navigate to={`/single-types/${model}`} />;\r\n  }\r\n\r\n  if (isLoadingLayout) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>{`Configure ${list.settings.displayName} List View`}</Page.Title>\r\n      <Main>\r\n        <Form initialValues={initialValues} onSubmit={handleSubmit} method=\"PUT\">\r\n          <Header\r\n            collectionType={collectionType}\r\n            model={model}\r\n            name={list.settings.displayName ?? ''}\r\n          />\r\n          <Layouts.Content>\r\n            <Flex\r\n              alignItems=\"stretch\"\r\n              background=\"neutral0\"\r\n              direction=\"column\"\r\n              gap={6}\r\n              hasRadius\r\n              shadow=\"tableShadow\"\r\n              paddingTop={6}\r\n              paddingBottom={6}\r\n              paddingLeft={7}\r\n              paddingRight={7}\r\n            >\r\n              <Settings />\r\n              <Divider />\r\n              <SortDisplayedFields />\r\n            </Flex>\r\n          </Layouts.Content>\r\n        </Form>\r\n      </Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\nconst ProtectedListConfiguration = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListConfiguration />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedListConfiguration, ListConfiguration };\r\nexport type { FormData };\r\n"],"names":[],"mappings":"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"}