{"version":3,"file":"controllers.mjs","sources":["../../src/registries/controllers.ts"],"sourcesContent":["import { pickBy, has } from 'lodash/fp';\r\nimport type { Core, UID } from '@strapi/types';\r\nimport { addNamespace, hasNamespace } from './namespace';\r\n\r\nexport type ControllerFactory =\r\n  | ((params: { strapi: Core.Strapi }) => Core.Controller)\r\n  | Core.Controller;\r\nexport type ControllerFactoryMap = Record<UID.Controller, ControllerFactory>;\r\nexport type ControllerMap = Record<UID.Controller, Core.Controller>;\r\nexport type ControllerExtendFn = (service: Core.Controller) => Core.Controller;\r\n\r\nconst controllersRegistry = (strapi: Core.Strapi) => {\r\n  const controllers: ControllerFactoryMap = {};\r\n  const instances: ControllerMap = {};\r\n\r\n  return {\r\n    /**\r\n     * Returns this list of registered controllers uids\r\n     */\r\n    keys() {\r\n      return Object.keys(controllers);\r\n    },\r\n\r\n    /**\r\n     * Returns the instance of a controller. Instantiate the controller if not already done\r\n     */\r\n    get(uid: UID.Controller) {\r\n      if (instances[uid]) {\r\n        return instances[uid];\r\n      }\r\n\r\n      const controller = controllers[uid];\r\n\r\n      if (controller) {\r\n        instances[uid] = typeof controller === 'function' ? controller({ strapi }) : controller;\r\n        return instances[uid];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns a map with all the controller in a namespace\r\n     */\r\n    getAll(namespace: string) {\r\n      const filteredControllers = pickBy((_, uid) => hasNamespace(uid, namespace))(controllers);\r\n\r\n      const map = {};\r\n      for (const uid of Object.keys(filteredControllers) as UID.Controller[]) {\r\n        Object.defineProperty(map, uid, {\r\n          enumerable: true,\r\n          get: () => {\r\n            return this.get(uid);\r\n          },\r\n        });\r\n      }\r\n\r\n      return map;\r\n    },\r\n\r\n    /**\r\n     * Registers a controller\r\n     */\r\n    set(uid: UID.Controller, value: ControllerFactory) {\r\n      controllers[uid] = value;\r\n      delete instances[uid];\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Registers a map of controllers for a specific namespace\r\n     */\r\n    add(namespace: string, newControllers: ControllerFactoryMap) {\r\n      for (const controllerName of Object.keys(newControllers) as UID.Controller[]) {\r\n        const controller = newControllers[controllerName];\r\n        const uid = addNamespace(controllerName, namespace) as UID.Controller;\r\n\r\n        if (has(uid, controllers)) {\r\n          throw new Error(`Controller ${uid} has already been registered.`);\r\n        }\r\n\r\n        controllers[uid] = controller;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Wraps a controller to extend it\r\n     */\r\n    extend(controllerUID: UID.Controller, extendFn: ControllerExtendFn) {\r\n      const currentController = this.get(controllerUID);\r\n\r\n      if (!currentController) {\r\n        throw new Error(`Controller ${controllerUID} doesn't exist`);\r\n      }\r\n\r\n      const newController = extendFn(currentController);\r\n      instances[controllerUID] = newController;\r\n\r\n      return this;\r\n    },\r\n  };\r\n};\r\n\r\nexport default controllersRegistry;\r\n"],"names":[],"mappings":";;AAWM,MAAA,sBAAsB,CAAC,WAAwB;AACnD,QAAM,cAAoC,CAAC;AAC3C,QAAM,YAA2B,CAAC;AAE3B,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AACE,aAAA,OAAO,KAAK,WAAW;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAqB;AACnB,UAAA,UAAU,GAAG,GAAG;AAClB,eAAO,UAAU,GAAG;AAAA,MAAA;AAGhB,YAAA,aAAa,YAAY,GAAG;AAElC,UAAI,YAAY;AACJ,kBAAA,GAAG,IAAI,OAAO,eAAe,aAAa,WAAW,EAAE,OAAQ,CAAA,IAAI;AAC7E,eAAO,UAAU,GAAG;AAAA,MAAA;AAAA,IAExB;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,WAAmB;AAClB,YAAA,sBAAsB,OAAO,CAAC,GAAG,QAAQ,aAAa,KAAK,SAAS,CAAC,EAAE,WAAW;AAExF,YAAM,MAAM,CAAC;AACb,iBAAW,OAAO,OAAO,KAAK,mBAAmB,GAAuB;AAC/D,eAAA,eAAe,KAAK,KAAK;AAAA,UAC9B,YAAY;AAAA,UACZ,KAAK,MAAM;AACF,mBAAA,KAAK,IAAI,GAAG;AAAA,UAAA;AAAA,QACrB,CACD;AAAA,MAAA;AAGI,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAqB,OAA0B;AACjD,kBAAY,GAAG,IAAI;AACnB,aAAO,UAAU,GAAG;AACb,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,WAAmB,gBAAsC;AAC3D,iBAAW,kBAAkB,OAAO,KAAK,cAAc,GAAuB;AACtE,cAAA,aAAa,eAAe,cAAc;AAC1C,cAAA,MAAM,aAAa,gBAAgB,SAAS;AAE9C,YAAA,IAAI,KAAK,WAAW,GAAG;AACzB,gBAAM,IAAI,MAAM,cAAc,GAAG,+BAA+B;AAAA,QAAA;AAGlE,oBAAY,GAAG,IAAI;AAAA,MAAA;AAGd,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,eAA+B,UAA8B;AAC5D,YAAA,oBAAoB,KAAK,IAAI,aAAa;AAEhD,UAAI,CAAC,mBAAmB;AACtB,cAAM,IAAI,MAAM,cAAc,aAAa,gBAAgB;AAAA,MAAA;AAGvD,YAAA,gBAAgB,SAAS,iBAAiB;AAChD,gBAAU,aAAa,IAAI;AAEpB,aAAA;AAAA,IAAA;AAAA,EAEX;AACF;"}