{"version":3,"file":"policies.mjs","sources":["../../src/registries/policies.ts"],"sourcesContent":["import { pickBy, has, castArray } from 'lodash/fp';\r\nimport type { Core } from '@strapi/types';\r\nimport { addNamespace, hasNamespace } from './namespace';\r\n\r\nconst PLUGIN_PREFIX = 'plugin::';\r\nconst API_PREFIX = 'api::';\r\n\r\ninterface PolicyInfo {\r\n  name: string;\r\n  config: unknown;\r\n}\r\n\r\ntype PolicyConfig = string | PolicyInfo;\r\n\r\ninterface NamespaceInfo {\r\n  pluginName?: string;\r\n  apiName?: string;\r\n}\r\n\r\nconst parsePolicy = (policy: string | PolicyInfo) => {\r\n  if (typeof policy === 'string') {\r\n    return { policyName: policy, config: {} };\r\n  }\r\n\r\n  const { name, config } = policy;\r\n  return { policyName: name, config };\r\n};\r\n\r\nconst policiesRegistry = () => {\r\n  const policies = new Map<string, Core.Policy>();\r\n\r\n  const find = (name: string, namespaceInfo?: NamespaceInfo) => {\r\n    const { pluginName, apiName } = namespaceInfo ?? {};\r\n\r\n    // try to resolve a full name to avoid extra prefixing\r\n    const policy = policies.get(name);\r\n\r\n    if (policy) {\r\n      return policy;\r\n    }\r\n\r\n    if (pluginName) {\r\n      return policies.get(`${PLUGIN_PREFIX}${pluginName}.${name}`);\r\n    }\r\n\r\n    if (apiName) {\r\n      return policies.get(`${API_PREFIX}${apiName}.${name}`);\r\n    }\r\n  };\r\n\r\n  function resolveHandler(policyConfig: PolicyConfig, namespaceInfo?: NamespaceInfo): Core.Policy;\r\n  function resolveHandler(\r\n    policyConfig: PolicyConfig[],\r\n    namespaceInfo?: NamespaceInfo\r\n  ): Core.Policy[];\r\n  function resolveHandler(\r\n    policyConfig: PolicyConfig | PolicyConfig[],\r\n    namespaceInfo?: NamespaceInfo\r\n  ): Core.Policy | Core.Policy[] {\r\n    if (Array.isArray(policyConfig)) {\r\n      return policyConfig.map((config) => {\r\n        return resolveHandler(config, namespaceInfo);\r\n      });\r\n    }\r\n\r\n    const { policyName, config } = parsePolicy(policyConfig);\r\n\r\n    const policy = find(policyName, namespaceInfo);\r\n\r\n    if (!policy) {\r\n      throw new Error(`Policy ${policyName} not found.`);\r\n    }\r\n\r\n    if (typeof policy === 'function') {\r\n      return policy;\r\n    }\r\n\r\n    if (policy.validator) {\r\n      policy.validator(config);\r\n    }\r\n\r\n    return policy.handler;\r\n  }\r\n\r\n  return {\r\n    /**\r\n     * Returns this list of registered policies uids\r\n     */\r\n    keys() {\r\n      // Return an array so format stays the same as controllers, services, etc\r\n      return Array.from(policies.keys());\r\n    },\r\n\r\n    /**\r\n     * Returns the instance of a policy. Instantiate the policy if not already done\r\n     */\r\n    get(name: string, namespaceInfo?: NamespaceInfo) {\r\n      return find(name, namespaceInfo);\r\n    },\r\n    /**\r\n     * Checks if a policy is registered\r\n     */\r\n    has(name: string, namespaceInfo?: NamespaceInfo) {\r\n      const res = find(name, namespaceInfo);\r\n      return !!res;\r\n    },\r\n\r\n    /**\r\n     * Returns a map with all the policies in a namespace\r\n     */\r\n    getAll(namespace: string) {\r\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(Object.fromEntries(policies));\r\n    },\r\n\r\n    /**\r\n     * Registers a policy\r\n     */\r\n    set(uid: string, policy: Core.Policy) {\r\n      policies.set(uid, policy);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Registers a map of policies for a specific namespace\r\n     */\r\n    add(namespace: string, newPolicies: Record<string, Core.Policy>) {\r\n      for (const policyName of Object.keys(newPolicies)) {\r\n        const policy = newPolicies[policyName];\r\n        const uid = addNamespace(policyName, namespace);\r\n\r\n        if (has(uid, policies)) {\r\n          throw new Error(`Policy ${uid} has already been registered.`);\r\n        }\r\n\r\n        policies.set(uid, policy);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Resolves a list of policies\r\n     */\r\n    resolve(config: PolicyConfig | PolicyConfig[], namespaceInfo?: NamespaceInfo) {\r\n      const { pluginName, apiName } = namespaceInfo ?? {};\r\n\r\n      return castArray(config).map((policyConfig) => {\r\n        return {\r\n          handler: resolveHandler(policyConfig, { pluginName, apiName }),\r\n          config: (typeof policyConfig === 'object' && policyConfig.config) || {},\r\n        };\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default policiesRegistry;\r\n"],"names":["config"],"mappings":";;AAIA,MAAM,gBAAgB;AACtB,MAAM,aAAa;AAcnB,MAAM,cAAc,CAAC,WAAgC;AAC/C,MAAA,OAAO,WAAW,UAAU;AAC9B,WAAO,EAAE,YAAY,QAAQ,QAAQ,CAAA,EAAG;AAAA,EAAA;AAGpC,QAAA,EAAE,MAAM,OAAA,IAAW;AAClB,SAAA,EAAE,YAAY,MAAM,OAAO;AACpC;AAEA,MAAM,mBAAmB,MAAM;AACvB,QAAA,+BAAe,IAAyB;AAExC,QAAA,OAAO,CAAC,MAAc,kBAAkC;AAC5D,UAAM,EAAE,YAAY,QAAQ,IAAI,iBAAiB,CAAC;AAG5C,UAAA,SAAS,SAAS,IAAI,IAAI;AAEhC,QAAI,QAAQ;AACH,aAAA;AAAA,IAAA;AAGT,QAAI,YAAY;AACP,aAAA,SAAS,IAAI,GAAG,aAAa,GAAG,UAAU,IAAI,IAAI,EAAE;AAAA,IAAA;AAG7D,QAAI,SAAS;AACJ,aAAA,SAAS,IAAI,GAAG,UAAU,GAAG,OAAO,IAAI,IAAI,EAAE;AAAA,IAAA;AAAA,EAEzD;AAOS,WAAA,eACP,cACA,eAC6B;AACzB,QAAA,MAAM,QAAQ,YAAY,GAAG;AACxB,aAAA,aAAa,IAAI,CAACA,YAAW;AAC3B,eAAA,eAAeA,SAAQ,aAAa;AAAA,MAAA,CAC5C;AAAA,IAAA;AAGH,UAAM,EAAE,YAAY,WAAW,YAAY,YAAY;AAEjD,UAAA,SAAS,KAAK,YAAY,aAAa;AAE7C,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,UAAU,UAAU,aAAa;AAAA,IAAA;AAG/C,QAAA,OAAO,WAAW,YAAY;AACzB,aAAA;AAAA,IAAA;AAGT,QAAI,OAAO,WAAW;AACpB,aAAO,UAAU,MAAM;AAAA,IAAA;AAGzB,WAAO,OAAO;AAAA,EAAA;AAGT,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AAEL,aAAO,MAAM,KAAK,SAAS,KAAA,CAAM;AAAA,IACnC;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,MAAc,eAA+B;AACxC,aAAA,KAAK,MAAM,aAAa;AAAA,IACjC;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,MAAc,eAA+B;AACzC,YAAA,MAAM,KAAK,MAAM,aAAa;AACpC,aAAO,CAAC,CAAC;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,WAAmB;AACxB,aAAO,OAAO,CAAC,GAAG,QAAQ,aAAa,KAAK,SAAS,CAAC,EAAE,OAAO,YAAY,QAAQ,CAAC;AAAA,IACtF;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAa,QAAqB;AAC3B,eAAA,IAAI,KAAK,MAAM;AACjB,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,WAAmB,aAA0C;AAC/D,iBAAW,cAAc,OAAO,KAAK,WAAW,GAAG;AAC3C,cAAA,SAAS,YAAY,UAAU;AAC/B,cAAA,MAAM,aAAa,YAAY,SAAS;AAE1C,YAAA,IAAI,KAAK,QAAQ,GAAG;AACtB,gBAAM,IAAI,MAAM,UAAU,GAAG,+BAA+B;AAAA,QAAA;AAGrD,iBAAA,IAAI,KAAK,MAAM;AAAA,MAAA;AAAA,IAE5B;AAAA;AAAA;AAAA;AAAA,IAKA,QAAQ,QAAuC,eAA+B;AAC5E,YAAM,EAAE,YAAY,QAAQ,IAAI,iBAAiB,CAAC;AAElD,aAAO,UAAU,MAAM,EAAE,IAAI,CAAC,iBAAiB;AACtC,eAAA;AAAA,UACL,SAAS,eAAe,cAAc,EAAE,YAAY,SAAS;AAAA,UAC7D,QAAS,OAAO,iBAAiB,YAAY,aAAa,UAAW,CAAA;AAAA,QACvE;AAAA,MAAA,CACD;AAAA,IAAA;AAAA,EAEL;AACF;"}