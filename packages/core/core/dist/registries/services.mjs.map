{"version":3,"file":"services.mjs","sources":["../../src/registries/services.ts"],"sourcesContent":["import { pickBy, has } from 'lodash/fp';\r\nimport type { Core, UID } from '@strapi/types';\r\nimport { addNamespace, hasNamespace } from './namespace';\r\n\r\nexport type ServiceFactory = (params: { strapi: Core.Strapi }) => Core.Service | Core.Service;\r\nexport type ServiceFactoryMap = Record<string, ServiceFactory>;\r\nexport type ServiceMap = Record<string, Core.Service>;\r\nexport type ServiceExtendFn = (service: Core.Service) => Core.Service;\r\n\r\nconst servicesRegistry = (strapi: Core.Strapi) => {\r\n  const services: ServiceFactoryMap = {};\r\n  const instantiatedServices: ServiceMap = {};\r\n\r\n  return {\r\n    /**\r\n     * Returns this list of registered services uids\r\n     */\r\n    keys() {\r\n      return Object.keys(services);\r\n    },\r\n\r\n    /**\r\n     * Returns the instance of a service. Instantiate the service if not already done\r\n     */\r\n    get(uid: UID.Service) {\r\n      if (instantiatedServices[uid]) {\r\n        return instantiatedServices[uid];\r\n      }\r\n\r\n      const service = services[uid];\r\n      if (service) {\r\n        instantiatedServices[uid] = typeof service === 'function' ? service({ strapi }) : service;\r\n        return instantiatedServices[uid];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns a map with all the services in a namespace\r\n     */\r\n    getAll(namespace: string): ServiceMap {\r\n      const filteredServices = pickBy((_, uid) => hasNamespace(uid, namespace))(services);\r\n\r\n      // create lazy accessor to avoid instantiating the services;\r\n      const map = {};\r\n      for (const uid of Object.keys(filteredServices)) {\r\n        Object.defineProperty(map, uid, {\r\n          enumerable: true,\r\n          get: () => {\r\n            return this.get(uid as UID.Service);\r\n          },\r\n        });\r\n      }\r\n\r\n      return map;\r\n    },\r\n\r\n    /**\r\n     * Registers a service\r\n     */\r\n    set(uid: string, service: ServiceFactory) {\r\n      services[uid] = service;\r\n      delete instantiatedServices[uid];\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Registers a map of services for a specific namespace\r\n     */\r\n    add(namespace: string, newServices: ServiceFactoryMap) {\r\n      for (const serviceName of Object.keys(newServices)) {\r\n        const service = newServices[serviceName];\r\n        const uid = addNamespace(serviceName, namespace);\r\n\r\n        if (has(uid, services)) {\r\n          throw new Error(`Service ${uid} has already been registered.`);\r\n        }\r\n        services[uid] = service;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Wraps a service to extend it\r\n     */\r\n    extend(uid: UID.Service, extendFn: ServiceExtendFn) {\r\n      const currentService = this.get(uid);\r\n\r\n      if (!currentService) {\r\n        throw new Error(`Service ${uid} doesn't exist`);\r\n      }\r\n\r\n      const newService = extendFn(currentService);\r\n      instantiatedServices[uid] = newService;\r\n\r\n      return this;\r\n    },\r\n  };\r\n};\r\n\r\nexport default servicesRegistry;\r\n"],"names":[],"mappings":";;AASM,MAAA,mBAAmB,CAAC,WAAwB;AAChD,QAAM,WAA8B,CAAC;AACrC,QAAM,uBAAmC,CAAC;AAEnC,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AACE,aAAA,OAAO,KAAK,QAAQ;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAkB;AAChB,UAAA,qBAAqB,GAAG,GAAG;AAC7B,eAAO,qBAAqB,GAAG;AAAA,MAAA;AAG3B,YAAA,UAAU,SAAS,GAAG;AAC5B,UAAI,SAAS;AACU,6BAAA,GAAG,IAAI,OAAO,YAAY,aAAa,QAAQ,EAAE,OAAQ,CAAA,IAAI;AAClF,eAAO,qBAAqB,GAAG;AAAA,MAAA;AAAA,IAEnC;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,WAA+B;AAC9B,YAAA,mBAAmB,OAAO,CAAC,GAAG,QAAQ,aAAa,KAAK,SAAS,CAAC,EAAE,QAAQ;AAGlF,YAAM,MAAM,CAAC;AACb,iBAAW,OAAO,OAAO,KAAK,gBAAgB,GAAG;AACxC,eAAA,eAAe,KAAK,KAAK;AAAA,UAC9B,YAAY;AAAA,UACZ,KAAK,MAAM;AACF,mBAAA,KAAK,IAAI,GAAkB;AAAA,UAAA;AAAA,QACpC,CACD;AAAA,MAAA;AAGI,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAa,SAAyB;AACxC,eAAS,GAAG,IAAI;AAChB,aAAO,qBAAqB,GAAG;AACxB,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,WAAmB,aAAgC;AACrD,iBAAW,eAAe,OAAO,KAAK,WAAW,GAAG;AAC5C,cAAA,UAAU,YAAY,WAAW;AACjC,cAAA,MAAM,aAAa,aAAa,SAAS;AAE3C,YAAA,IAAI,KAAK,QAAQ,GAAG;AACtB,gBAAM,IAAI,MAAM,WAAW,GAAG,+BAA+B;AAAA,QAAA;AAE/D,iBAAS,GAAG,IAAI;AAAA,MAAA;AAGX,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,KAAkB,UAA2B;AAC5C,YAAA,iBAAiB,KAAK,IAAI,GAAG;AAEnC,UAAI,CAAC,gBAAgB;AACnB,cAAM,IAAI,MAAM,WAAW,GAAG,gBAAgB;AAAA,MAAA;AAG1C,YAAA,aAAa,SAAS,cAAc;AAC1C,2BAAqB,GAAG,IAAI;AAErB,aAAA;AAAA,IAAA;AAAA,EAEX;AACF;"}