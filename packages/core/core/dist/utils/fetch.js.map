{"version":3,"file":"fetch.js","sources":["../../src/utils/fetch.ts"],"sourcesContent":["import type { Core, Modules } from '@strapi/types';\r\nimport { ProxyAgent } from 'undici';\r\n\r\n// TODO: once core Node exposes a stable way to create a ProxyAgent we will use that instead of undici\r\n\r\n// Create a wrapper for Node's Fetch API that applies a global proxy\r\nexport const createStrapiFetch = (strapi: Core.Strapi): Modules.Fetch.Fetch => {\r\n  function strapiFetch(url: RequestInfo | URL, options?: RequestInit) {\r\n    const fetchOptions = {\r\n      ...(strapiFetch.dispatcher ? { dispatcher: strapiFetch.dispatcher } : {}),\r\n      ...options,\r\n    };\r\n    strapi.log.debug(`Making request for ${url}`);\r\n    return fetch(url, fetchOptions);\r\n  }\r\n\r\n  const proxy =\r\n    strapi.config.get<ConstructorParameters<typeof ProxyAgent>[0]>('server.proxy.fetch') ||\r\n    strapi.config.get<string>('server.proxy.global');\r\n\r\n  if (proxy) {\r\n    strapi.log.info(`Using proxy for Fetch requests: ${proxy}`);\r\n    strapiFetch.dispatcher = new ProxyAgent(proxy);\r\n  }\r\n\r\n  return strapiFetch;\r\n};\r\n\r\nexport type Fetch = Modules.Fetch.Fetch;\r\n"],"names":["ProxyAgent"],"mappings":";;;AAMa,MAAA,oBAAoB,CAAC,WAA6C;AACpE,WAAA,YAAY,KAAwB,SAAuB;AAClE,UAAM,eAAe;AAAA,MACnB,GAAI,YAAY,aAAa,EAAE,YAAY,YAAY,WAAA,IAAe,CAAC;AAAA,MACvE,GAAG;AAAA,IACL;AACA,WAAO,IAAI,MAAM,sBAAsB,GAAG,EAAE;AACrC,WAAA,MAAM,KAAK,YAAY;AAAA,EAAA;AAG1B,QAAA,QACJ,OAAO,OAAO,IAAiD,oBAAoB,KACnF,OAAO,OAAO,IAAY,qBAAqB;AAEjD,MAAI,OAAO;AACT,WAAO,IAAI,KAAK,mCAAmC,KAAK,EAAE;AAC9C,gBAAA,aAAa,IAAIA,OAAA,WAAW,KAAK;AAAA,EAAA;AAGxC,SAAA;AACT;;"}