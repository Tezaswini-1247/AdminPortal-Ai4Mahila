{"version":3,"file":"draft-publish.mjs","sources":["../../src/migrations/draft-publish.ts"],"sourcesContent":["import { contentTypes as contentTypesUtils, async } from '@strapi/utils';\r\nimport { Schema } from '@strapi/types';\r\n\r\nimport { getBatchToDiscard } from './database/5.0.0-discard-drafts';\r\n\r\nexport interface Input {\r\n  oldContentTypes: Record<string, Schema.ContentType>;\r\n  contentTypes: Record<string, Schema.ContentType>;\r\n}\r\n\r\n/**\r\n * Enable draft and publish for content types.\r\n *\r\n * Draft and publish disabled content types will have their entries published,\r\n * this migration clones those entries as drafts.\r\n *\r\n * TODO: Clone components, dynamic zones and relations\r\n */\r\nconst enableDraftAndPublish = async ({ oldContentTypes, contentTypes }: Input) => {\r\n  if (!oldContentTypes) {\r\n    return;\r\n  }\r\n\r\n  // run the after content types migrations\r\n  return strapi.db.transaction(async (trx) => {\r\n    for (const uid in contentTypes) {\r\n      if (!oldContentTypes[uid]) {\r\n        continue;\r\n      }\r\n\r\n      const oldContentType = oldContentTypes[uid];\r\n      const contentType = contentTypes[uid];\r\n\r\n      // if d&p was enabled set publishedAt to eq createdAt\r\n      if (\r\n        !contentTypesUtils.hasDraftAndPublish(oldContentType) &&\r\n        contentTypesUtils.hasDraftAndPublish(contentType)\r\n      ) {\r\n        const discardDraft = async (entry: { documentId: string; locale: string }) =>\r\n          strapi\r\n            .documents(uid as any)\r\n            // Discard draft by referencing the documentId and locale\r\n            .discardDraft({ documentId: entry.documentId, locale: entry.locale });\r\n\r\n        /**\r\n         * Load a batch of entries (batched to prevent loading millions of rows at once ),\r\n         * and discard them using the document service.\r\n         */\r\n        for await (const batch of getBatchToDiscard({ db: strapi.db, trx, uid })) {\r\n          await async.map(batch, discardDraft, { concurrency: 10 });\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst disableDraftAndPublish = async ({ oldContentTypes, contentTypes }: Input) => {\r\n  if (!oldContentTypes) {\r\n    return;\r\n  }\r\n\r\n  for (const uid in contentTypes) {\r\n    if (!oldContentTypes[uid]) {\r\n      continue;\r\n    }\r\n\r\n    const oldContentType = oldContentTypes[uid];\r\n    const contentType = contentTypes[uid];\r\n\r\n    // if d&p was disabled remove unpublish content before sync\r\n    if (\r\n      contentTypesUtils.hasDraftAndPublish(oldContentType) &&\r\n      !contentTypesUtils.hasDraftAndPublish(contentType)\r\n    ) {\r\n      await strapi.db?.queryBuilder(uid).delete().where({ published_at: null }).execute();\r\n    }\r\n  }\r\n};\r\n\r\nexport { enableDraftAndPublish as enable, disableDraftAndPublish as disable };\r\n"],"names":["contentTypes","contentTypesUtils"],"mappings":";;AAkBA,MAAM,wBAAwB,OAAO,EAAE,iBAAiBA,cAAAA,qBAA0B;AAChF,MAAI,CAAC,iBAAiB;AACpB;AAAA,EAAA;AAIF,SAAO,OAAO,GAAG,YAAY,OAAO,QAAQ;AAC1C,eAAW,OAAOA,gBAAc;AAC1B,UAAA,CAAC,gBAAgB,GAAG,GAAG;AACzB;AAAA,MAAA;AAGI,YAAA,iBAAiB,gBAAgB,GAAG;AACpC,YAAA,cAAcA,eAAa,GAAG;AAIlC,UAAA,CAACC,aAAkB,mBAAmB,cAAc,KACpDA,aAAkB,mBAAmB,WAAW,GAChD;AACA,cAAM,eAAe,OAAO,UAC1B,OACG,UAAU,GAAU,EAEpB,aAAa,EAAE,YAAY,MAAM,YAAY,QAAQ,MAAM,QAAQ;AAMvD,yBAAA,SAAS,kBAAkB,EAAE,IAAI,OAAO,IAAI,KAAK,IAAI,CAAC,GAAG;AACxE,gBAAM,MAAM,IAAI,OAAO,cAAc,EAAE,aAAa,IAAI;AAAA,QAAA;AAAA,MAC1D;AAAA,IACF;AAAA,EACF,CACD;AACH;AAEA,MAAM,yBAAyB,OAAO,EAAE,iBAAiBD,cAAAA,qBAA0B;AACjF,MAAI,CAAC,iBAAiB;AACpB;AAAA,EAAA;AAGF,aAAW,OAAOA,gBAAc;AAC1B,QAAA,CAAC,gBAAgB,GAAG,GAAG;AACzB;AAAA,IAAA;AAGI,UAAA,iBAAiB,gBAAgB,GAAG;AACpC,UAAA,cAAcA,eAAa,GAAG;AAIlC,QAAAC,aAAkB,mBAAmB,cAAc,KACnD,CAACA,aAAkB,mBAAmB,WAAW,GACjD;AACA,YAAM,OAAO,IAAI,aAAa,GAAG,EAAE,SAAS,MAAM,EAAE,cAAc,KAAM,CAAA,EAAE,QAAQ;AAAA,IAAA;AAAA,EACpF;AAEJ;"}