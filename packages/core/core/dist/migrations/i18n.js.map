{"version":3,"file":"i18n.js","sources":["../../src/migrations/i18n.ts"],"sourcesContent":["import { Input } from './draft-publish';\r\n\r\n// if i18N enabled set default locale\r\nconst enableI18n = async ({ oldContentTypes, contentTypes }: Input) => {\r\n  const { isLocalizedContentType } = strapi.plugin('i18n')?.service('content-types') ?? {};\r\n  const { getDefaultLocale } = strapi.plugin('i18n')?.service('locales') ?? {};\r\n\r\n  if (!oldContentTypes) {\r\n    return;\r\n  }\r\n\r\n  for (const uid in contentTypes) {\r\n    if (!oldContentTypes[uid]) {\r\n      continue;\r\n    }\r\n\r\n    const oldContentType = oldContentTypes[uid];\r\n    const contentType = contentTypes[uid];\r\n\r\n    if (!isLocalizedContentType(oldContentType) && isLocalizedContentType(contentType)) {\r\n      const defaultLocale = await getDefaultLocale();\r\n\r\n      await strapi.db.query(uid).updateMany({\r\n        where: { locale: null },\r\n        data: { locale: defaultLocale },\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst disableI18n = async ({ oldContentTypes, contentTypes }: Input) => {\r\n  const { isLocalizedContentType } = strapi.plugin('i18n')?.service('content-types') ?? {};\r\n  const { getDefaultLocale } = strapi.plugin('i18n')?.service('locales') ?? {};\r\n\r\n  if (!oldContentTypes) {\r\n    return;\r\n  }\r\n\r\n  for (const uid in contentTypes) {\r\n    if (!oldContentTypes[uid]) {\r\n      continue;\r\n    }\r\n\r\n    const oldContentType = oldContentTypes[uid];\r\n    const contentType = contentTypes[uid];\r\n\r\n    // if i18N is disabled remove non default locales before sync\r\n    if (isLocalizedContentType(oldContentType) && !isLocalizedContentType(contentType)) {\r\n      const defaultLocale = await getDefaultLocale();\r\n\r\n      await Promise.all([\r\n        // Delete all entities that are not in the default locale\r\n        strapi.db.query(uid).deleteMany({\r\n          where: { locale: { $ne: defaultLocale } },\r\n        }),\r\n        // Set locale to null for the rest\r\n        strapi.db.query(uid).updateMany({\r\n          where: { locale: { $eq: defaultLocale } },\r\n          data: { locale: null },\r\n        }),\r\n      ]);\r\n    }\r\n  }\r\n};\r\n\r\nexport { enableI18n as enable, disableI18n as disable };\r\n"],"names":[],"mappings":";;AAGA,MAAM,aAAa,OAAO,EAAE,iBAAiB,mBAA0B;AAC/D,QAAA,EAAE,uBAAuB,IAAI,OAAO,OAAO,MAAM,GAAG,QAAQ,eAAe,KAAK,CAAC;AACjF,QAAA,EAAE,iBAAiB,IAAI,OAAO,OAAO,MAAM,GAAG,QAAQ,SAAS,KAAK,CAAC;AAE3E,MAAI,CAAC,iBAAiB;AACpB;AAAA,EAAA;AAGF,aAAW,OAAO,cAAc;AAC1B,QAAA,CAAC,gBAAgB,GAAG,GAAG;AACzB;AAAA,IAAA;AAGI,UAAA,iBAAiB,gBAAgB,GAAG;AACpC,UAAA,cAAc,aAAa,GAAG;AAEpC,QAAI,CAAC,uBAAuB,cAAc,KAAK,uBAAuB,WAAW,GAAG;AAC5E,YAAA,gBAAgB,MAAM,iBAAiB;AAE7C,YAAM,OAAO,GAAG,MAAM,GAAG,EAAE,WAAW;AAAA,QACpC,OAAO,EAAE,QAAQ,KAAK;AAAA,QACtB,MAAM,EAAE,QAAQ,cAAc;AAAA,MAAA,CAC/B;AAAA,IAAA;AAAA,EACH;AAEJ;AAEA,MAAM,cAAc,OAAO,EAAE,iBAAiB,mBAA0B;AAChE,QAAA,EAAE,uBAAuB,IAAI,OAAO,OAAO,MAAM,GAAG,QAAQ,eAAe,KAAK,CAAC;AACjF,QAAA,EAAE,iBAAiB,IAAI,OAAO,OAAO,MAAM,GAAG,QAAQ,SAAS,KAAK,CAAC;AAE3E,MAAI,CAAC,iBAAiB;AACpB;AAAA,EAAA;AAGF,aAAW,OAAO,cAAc;AAC1B,QAAA,CAAC,gBAAgB,GAAG,GAAG;AACzB;AAAA,IAAA;AAGI,UAAA,iBAAiB,gBAAgB,GAAG;AACpC,UAAA,cAAc,aAAa,GAAG;AAGpC,QAAI,uBAAuB,cAAc,KAAK,CAAC,uBAAuB,WAAW,GAAG;AAC5E,YAAA,gBAAgB,MAAM,iBAAiB;AAE7C,YAAM,QAAQ,IAAI;AAAA;AAAA,QAEhB,OAAO,GAAG,MAAM,GAAG,EAAE,WAAW;AAAA,UAC9B,OAAO,EAAE,QAAQ,EAAE,KAAK,cAAgB,EAAA;AAAA,QAAA,CACzC;AAAA;AAAA,QAED,OAAO,GAAG,MAAM,GAAG,EAAE,WAAW;AAAA,UAC9B,OAAO,EAAE,QAAQ,EAAE,KAAK,gBAAgB;AAAA,UACxC,MAAM,EAAE,QAAQ,KAAK;AAAA,QACtB,CAAA;AAAA,MAAA,CACF;AAAA,IAAA;AAAA,EACH;AAEJ;;;"}