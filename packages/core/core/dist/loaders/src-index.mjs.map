{"version":3,"file":"src-index.mjs","sources":["../../src/loaders/src-index.ts"],"sourcesContent":["import { resolve } from 'path';\r\nimport { statSync, existsSync } from 'fs';\r\nimport { yup, importDefault } from '@strapi/utils';\r\n\r\nimport type { Core } from '@strapi/types';\r\n\r\nconst srcSchema = yup\r\n  .object()\r\n  .shape({\r\n    bootstrap: yup.mixed().isFunction(),\r\n    register: yup.mixed().isFunction(),\r\n    destroy: yup.mixed().isFunction(),\r\n  })\r\n  .noUnknown();\r\n\r\nconst validateSrcIndex = (srcIndex: unknown) => {\r\n  return srcSchema.validateSync(srcIndex, { strict: true, abortEarly: false });\r\n};\r\n\r\nexport default (strapi: Core.Strapi) => {\r\n  if (!existsSync(strapi.dirs.dist.src)) {\r\n    return;\r\n  }\r\n\r\n  const pathToSrcIndex = resolve(strapi.dirs.dist.src, 'index.js');\r\n  if (!existsSync(pathToSrcIndex) || statSync(pathToSrcIndex).isDirectory()) {\r\n    return {};\r\n  }\r\n\r\n  const srcIndex = importDefault(pathToSrcIndex);\r\n\r\n  try {\r\n    validateSrcIndex(srcIndex);\r\n  } catch (e) {\r\n    if (e instanceof yup.ValidationError) {\r\n      strapi.stopWithError({ message: `Invalid file \\`./src/index.js\\`: ${e.message}` });\r\n    }\r\n\r\n    throw e;\r\n  }\r\n\r\n  strapi.app = srcIndex;\r\n};\r\n"],"names":[],"mappings":";;;AAMA,MAAM,YAAY,IACf,OAAO,EACP,MAAM;AAAA,EACL,WAAW,IAAI,MAAM,EAAE,WAAW;AAAA,EAClC,UAAU,IAAI,MAAM,EAAE,WAAW;AAAA,EACjC,SAAS,IAAI,MAAM,EAAE,WAAW;AAClC,CAAC,EACA,UAAU;AAEb,MAAM,mBAAmB,CAAC,aAAsB;AACvC,SAAA,UAAU,aAAa,UAAU,EAAE,QAAQ,MAAM,YAAY,OAAO;AAC7E;AAEA,MAAe,eAAA,CAAC,WAAwB;AACtC,MAAI,CAAC,WAAW,OAAO,KAAK,KAAK,GAAG,GAAG;AACrC;AAAA,EAAA;AAGF,QAAM,iBAAiB,QAAQ,OAAO,KAAK,KAAK,KAAK,UAAU;AAC3D,MAAA,CAAC,WAAW,cAAc,KAAK,SAAS,cAAc,EAAE,eAAe;AACzE,WAAO,CAAC;AAAA,EAAA;AAGJ,QAAA,WAAW,cAAc,cAAc;AAEzC,MAAA;AACF,qBAAiB,QAAQ;AAAA,WAClB,GAAG;AACN,QAAA,aAAa,IAAI,iBAAiB;AACpC,aAAO,cAAc,EAAE,SAAS,oCAAoC,EAAE,OAAO,IAAI;AAAA,IAAA;AAG7E,UAAA;AAAA,EAAA;AAGR,SAAO,MAAM;AACf;"}