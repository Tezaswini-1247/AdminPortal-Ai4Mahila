{"version":3,"file":"get-user-plugins-config.mjs","sources":["../../../src/loaders/plugins/get-user-plugins-config.ts"],"sourcesContent":["import { join } from 'path';\r\nimport fse from 'fs-extra';\r\nimport { merge } from 'lodash/fp';\r\nimport { loadConfigFile } from '../../utils/load-config-file';\r\n\r\n/**\r\n * Return user defined plugins' config\r\n * first load config from `config/plugins.js`\r\n * and then merge config from `config/env/{env}/plugins.js`\r\n */\r\nexport const getUserPluginsConfig = async () => {\r\n  const globalUserConfigPath = join(strapi.dirs.dist.config, 'plugins.js');\r\n  const currentEnvUserConfigPath = join(\r\n    strapi.dirs.dist.config,\r\n    'env',\r\n    process.env.NODE_ENV as string,\r\n    'plugins.js'\r\n  );\r\n  let config = {};\r\n\r\n  // assign global user config if exists\r\n  if (await fse.pathExists(globalUserConfigPath)) {\r\n    config = loadConfigFile(globalUserConfigPath);\r\n  }\r\n\r\n  // and merge user config by environment if exists\r\n  if (await fse.pathExists(currentEnvUserConfigPath)) {\r\n    config = merge(config, loadConfigFile(currentEnvUserConfigPath));\r\n  }\r\n\r\n  return config;\r\n};\r\n"],"names":[],"mappings":";;;;AAUO,MAAM,uBAAuB,YAAY;AAC9C,QAAM,uBAAuB,KAAK,OAAO,KAAK,KAAK,QAAQ,YAAY;AACvE,QAAM,2BAA2B;AAAA,IAC/B,OAAO,KAAK,KAAK;AAAA,IACjB;AAAA,IACA,QAAQ,IAAI;AAAA,IACZ;AAAA,EACF;AACA,MAAI,SAAS,CAAC;AAGd,MAAI,MAAM,IAAI,WAAW,oBAAoB,GAAG;AAC9C,aAAS,eAAe,oBAAoB;AAAA,EAAA;AAI9C,MAAI,MAAM,IAAI,WAAW,wBAAwB,GAAG;AAClD,aAAS,MAAM,QAAQ,eAAe,wBAAwB,CAAC;AAAA,EAAA;AAG1D,SAAA;AACT;"}