{"version":3,"file":"repository.mjs","sources":["../../../src/services/document-service/repository.ts"],"sourcesContent":["import { omit, assoc, merge, curry } from 'lodash/fp';\r\n\r\nimport { async, contentTypes as contentTypesUtils, validate } from '@strapi/utils';\r\n\r\nimport { UID } from '@strapi/types';\r\nimport { wrapInTransaction, type RepositoryFactoryMethod } from './common';\r\nimport * as DP from './draft-and-publish';\r\nimport * as i18n from './internationalization';\r\nimport * as components from './components';\r\n\r\nimport { createEntriesService } from './entries';\r\nimport { pickSelectionParams } from './params';\r\nimport { createDocumentId } from '../../utils/transform-content-types-to-models';\r\nimport { getDeepPopulate } from './utils/populate';\r\nimport { transformParamsToQuery } from './transform/query';\r\nimport { transformParamsDocumentId } from './transform/id-transform';\r\nimport { createEventManager } from './events';\r\nimport * as unidirectionalRelations from './utils/unidirectional-relations';\r\nimport entityValidator from '../entity-validator';\r\n\r\nconst { validators } = validate;\r\n\r\n// we have to typecast to reconcile the differences between validator and database getModel\r\nconst getModel = ((schema: UID.Schema) => strapi.getModel(schema)) as (schema: string) => any;\r\n\r\nexport const createContentTypeRepository: RepositoryFactoryMethod = (\r\n  uid,\r\n  validator = entityValidator\r\n) => {\r\n  const contentType = strapi.contentType(uid);\r\n  const hasDraftAndPublish = contentTypesUtils.hasDraftAndPublish(contentType);\r\n\r\n  // Define the validations that should be performed\r\n  const sortValidations = ['nonAttributesOperators', 'dynamicZones', 'morphRelations'];\r\n  const fieldValidations = ['scalarAttributes'];\r\n  const filtersValidations = ['nonAttributesOperators', 'dynamicZones', 'morphRelations'];\r\n  const populateValidations = {\r\n    sort: sortValidations,\r\n    field: fieldValidations,\r\n    filters: filtersValidations,\r\n    populate: ['nonAttributesOperators'],\r\n  };\r\n\r\n  const validateParams = async (params: any) => {\r\n    const ctx = { schema: contentType, getModel };\r\n    await validators.validateFilters(ctx, params.filters, filtersValidations);\r\n    await validators.validateSort(ctx, params.sort, sortValidations);\r\n    await validators.validateFields(ctx, params.fields, fieldValidations);\r\n    await validators.validatePopulate(ctx, params.populate, populateValidations);\r\n\r\n    // TODO: add validate status, locale, pagination\r\n\r\n    return params;\r\n  };\r\n\r\n  const entries = createEntriesService(uid, validator);\r\n\r\n  const eventManager = createEventManager(strapi, uid);\r\n  const emitEvent = curry(eventManager.emitEvent);\r\n\r\n  async function findMany(params = {} as any) {\r\n    const query = await async.pipe(\r\n      validateParams,\r\n      DP.defaultToDraft,\r\n      DP.statusToLookup(contentType),\r\n      i18n.defaultLocale(contentType),\r\n      i18n.multiLocaleToLookup(contentType),\r\n      transformParamsDocumentId(uid),\r\n      transformParamsToQuery(uid)\r\n    )(params || {});\r\n\r\n    return strapi.db.query(uid).findMany(query);\r\n  }\r\n\r\n  async function findFirst(params = {} as any) {\r\n    const query = await async.pipe(\r\n      validateParams,\r\n      DP.defaultToDraft,\r\n      DP.statusToLookup(contentType),\r\n      i18n.defaultLocale(contentType),\r\n      i18n.localeToLookup(contentType),\r\n      transformParamsDocumentId(uid),\r\n      transformParamsToQuery(uid)\r\n    )(params);\r\n\r\n    return strapi.db.query(uid).findOne(query);\r\n  }\r\n\r\n  // TODO: do we really want to add filters on the findOne now that we have findFirst ?\r\n  async function findOne(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const query = await async.pipe(\r\n      validateParams,\r\n      DP.defaultToDraft,\r\n      DP.statusToLookup(contentType),\r\n      i18n.defaultLocale(contentType),\r\n      i18n.localeToLookup(contentType),\r\n      transformParamsDocumentId(uid),\r\n      transformParamsToQuery(uid),\r\n      (query) => assoc('where', { ...query.where, documentId }, query)\r\n    )(params);\r\n\r\n    return strapi.db.query(uid).findOne(query);\r\n  }\r\n\r\n  async function deleteDocument(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const query = await async.pipe(\r\n      validateParams,\r\n      omit('status'),\r\n      i18n.defaultLocale(contentType),\r\n      i18n.multiLocaleToLookup(contentType),\r\n      transformParamsToQuery(uid),\r\n      (query) => assoc('where', { ...query.where, documentId }, query)\r\n    )(params);\r\n\r\n    if (params.status === 'draft') {\r\n      throw new Error('Cannot delete a draft document');\r\n    }\r\n\r\n    const entriesToDelete = await strapi.db.query(uid).findMany(query);\r\n\r\n    // Delete all matched entries and its components\r\n    const deletedEntries = await async.map(entriesToDelete, (entryToDelete: any) =>\r\n      entries.delete(entryToDelete.id)\r\n    );\r\n\r\n    entriesToDelete.forEach(emitEvent('entry.delete'));\r\n\r\n    return { documentId, entries: deletedEntries };\r\n  }\r\n\r\n  async function create(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const queryParams = await async.pipe(\r\n      validateParams,\r\n      DP.filterDataPublishedAt,\r\n      DP.setStatusToDraft(contentType),\r\n      DP.statusToData(contentType),\r\n      i18n.defaultLocale(contentType),\r\n      i18n.localeToData(contentType)\r\n    )(params);\r\n\r\n    const doc = await entries.create(queryParams);\r\n\r\n    emitEvent('entry.create', doc);\r\n\r\n    if (hasDraftAndPublish && params.status === 'published') {\r\n      return publish({\r\n        ...params,\r\n        documentId: doc.documentId,\r\n      }).then((doc) => doc.entries[0]);\r\n    }\r\n\r\n    return doc;\r\n  }\r\n\r\n  async function clone(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const queryParams = await async.pipe(\r\n      validateParams,\r\n      DP.filterDataPublishedAt,\r\n      i18n.defaultLocale(contentType),\r\n      i18n.multiLocaleToLookup(contentType)\r\n    )(params);\r\n\r\n    // Get deep populate\r\n    const entriesToClone = await strapi.db.query(uid).findMany({\r\n      where: {\r\n        ...queryParams?.lookup,\r\n        documentId,\r\n        // DP Enabled: Clone drafts\r\n        // DP Disabled: Clone only the existing version (published)\r\n        publishedAt: { $null: hasDraftAndPublish },\r\n      },\r\n      populate: getDeepPopulate(uid, { relationalFields: ['id'] }),\r\n    });\r\n\r\n    const clonedEntries = await async.map(\r\n      entriesToClone,\r\n      async.pipe(\r\n        validateParams,\r\n        omit(['id', 'createdAt', 'updatedAt']),\r\n        // assign new documentId\r\n        assoc('documentId', createDocumentId()),\r\n        // Merge new data into it\r\n        (data) => merge(data, queryParams.data),\r\n        (data) => entries.create({ ...queryParams, data, status: 'draft' })\r\n      )\r\n    );\r\n\r\n    clonedEntries.forEach(emitEvent('entry.create'));\r\n\r\n    return { documentId: clonedEntries.at(0)?.documentId, entries: clonedEntries };\r\n  }\r\n\r\n  async function update(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const queryParams = await async.pipe(\r\n      validateParams,\r\n      DP.filterDataPublishedAt,\r\n      DP.setStatusToDraft(contentType),\r\n      DP.statusToLookup(contentType),\r\n      DP.statusToData(contentType),\r\n      // Default locale will be set if not provided\r\n      i18n.defaultLocale(contentType),\r\n      i18n.localeToLookup(contentType),\r\n      i18n.localeToData(contentType)\r\n    )(params);\r\n\r\n    const { data, ...restParams } = await transformParamsDocumentId(uid, queryParams || {});\r\n    const query = transformParamsToQuery(uid, pickSelectionParams(restParams || {}) as any);\r\n\r\n    // Validation\r\n    // Find if document exists\r\n    const entryToUpdate = await strapi.db\r\n      .query(uid)\r\n      .findOne({ ...query, where: { ...queryParams?.lookup, ...query?.where, documentId } });\r\n\r\n    let updatedDraft = null;\r\n    if (entryToUpdate) {\r\n      updatedDraft = await entries.update(entryToUpdate, queryParams);\r\n      emitEvent('entry.update', updatedDraft);\r\n    }\r\n\r\n    if (!updatedDraft) {\r\n      const documentExists = await strapi.db\r\n        .query(contentType.uid)\r\n        .findOne({ where: { documentId } });\r\n\r\n      if (documentExists) {\r\n        updatedDraft = await entries.create({\r\n          ...queryParams,\r\n          data: { ...queryParams.data, documentId },\r\n        });\r\n        emitEvent('entry.create', updatedDraft);\r\n      }\r\n    }\r\n\r\n    if (hasDraftAndPublish && updatedDraft && params.status === 'published') {\r\n      return publish({\r\n        ...params,\r\n        documentId,\r\n      }).then((doc) => doc.entries[0]);\r\n    }\r\n\r\n    return updatedDraft;\r\n  }\r\n\r\n  async function count(params = {} as any) {\r\n    const query = await async.pipe(\r\n      validateParams,\r\n      DP.defaultStatus(contentType),\r\n      DP.statusToLookup(contentType),\r\n      i18n.defaultLocale(contentType),\r\n      i18n.localeToLookup(contentType),\r\n      transformParamsToQuery(uid)\r\n    )(params);\r\n\r\n    return strapi.db.query(uid).count(query);\r\n  }\r\n\r\n  async function publish(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const queryParams = await async.pipe(\r\n      validateParams,\r\n      i18n.defaultLocale(contentType),\r\n      i18n.multiLocaleToLookup(contentType)\r\n    )(params);\r\n\r\n    const [draftsToPublish, oldPublishedVersions] = await Promise.all([\r\n      strapi.db.query(uid).findMany({\r\n        where: {\r\n          ...queryParams?.lookup,\r\n          documentId,\r\n          publishedAt: null, // Ignore lookup\r\n        },\r\n        // Populate relations, media, compos and dz\r\n        populate: getDeepPopulate(uid, { relationalFields: ['documentId', 'locale'] }),\r\n      }),\r\n      strapi.db.query(uid).findMany({\r\n        where: {\r\n          ...queryParams?.lookup,\r\n          documentId,\r\n          publishedAt: { $ne: null },\r\n        },\r\n        select: ['id', 'locale'],\r\n      }),\r\n    ]);\r\n\r\n    // Load any unidirectional relation targetting the old published entries\r\n    const relationsToSync = await unidirectionalRelations.load(uid, {\r\n      newVersions: draftsToPublish,\r\n      oldVersions: oldPublishedVersions,\r\n    });\r\n\r\n    // Delete old published versions\r\n    await async.map(oldPublishedVersions, (entry: any) => entries.delete(entry.id));\r\n\r\n    // Transform draft entry data and create published versions\r\n    const publishedEntries = await async.map(draftsToPublish, (draft: any) =>\r\n      entries.publish(draft, queryParams)\r\n    );\r\n\r\n    // Sync unidirectional relations with the new published entries\r\n    await unidirectionalRelations.sync(\r\n      [...oldPublishedVersions, ...draftsToPublish],\r\n      publishedEntries,\r\n      relationsToSync\r\n    );\r\n\r\n    publishedEntries.forEach(emitEvent('entry.publish'));\r\n\r\n    return { documentId, entries: publishedEntries };\r\n  }\r\n\r\n  async function unpublish(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const query = await async.pipe(\r\n      validateParams,\r\n      i18n.defaultLocale(contentType),\r\n      i18n.multiLocaleToLookup(contentType),\r\n      transformParamsToQuery(uid),\r\n      (query) => assoc('where', { ...query.where, documentId, publishedAt: { $ne: null } }, query)\r\n    )(params);\r\n\r\n    // Delete all published versions\r\n    const versionsToDelete = await strapi.db.query(uid).findMany(query);\r\n    await async.map(versionsToDelete, (entry: any) => entries.delete(entry.id));\r\n\r\n    versionsToDelete.forEach(emitEvent('entry.unpublish'));\r\n    return { documentId, entries: versionsToDelete };\r\n  }\r\n\r\n  async function discardDraft(opts = {} as any) {\r\n    const { documentId, ...params } = opts;\r\n\r\n    const queryParams = await async.pipe(\r\n      validateParams,\r\n      i18n.defaultLocale(contentType),\r\n      i18n.multiLocaleToLookup(contentType)\r\n    )(params);\r\n\r\n    const [versionsToDraft, oldDrafts] = await Promise.all([\r\n      strapi.db.query(uid).findMany({\r\n        where: {\r\n          ...queryParams?.lookup,\r\n          documentId,\r\n          publishedAt: { $ne: null },\r\n        },\r\n        // Populate relations, media, compos and dz\r\n        populate: getDeepPopulate(uid, { relationalFields: ['documentId', 'locale'] }),\r\n      }),\r\n      strapi.db.query(uid).findMany({\r\n        where: {\r\n          ...queryParams?.lookup,\r\n          documentId,\r\n          publishedAt: null,\r\n        },\r\n        select: ['id', 'locale'],\r\n      }),\r\n    ]);\r\n\r\n    // Load any unidirectional relation targeting the old drafts\r\n    const relationsToSync = await unidirectionalRelations.load(uid, {\r\n      newVersions: versionsToDraft,\r\n      oldVersions: oldDrafts,\r\n    });\r\n\r\n    // Delete old drafts\r\n    await async.map(oldDrafts, (entry: any) => entries.delete(entry.id));\r\n\r\n    // Transform published entry data and create draft versions\r\n    const draftEntries = await async.map(versionsToDraft, (entry: any) =>\r\n      entries.discardDraft(entry, queryParams)\r\n    );\r\n\r\n    // Sync unidirectional relations with the new draft entries\r\n    await unidirectionalRelations.sync(\r\n      [...oldDrafts, ...versionsToDraft],\r\n      draftEntries,\r\n      relationsToSync\r\n    );\r\n\r\n    draftEntries.forEach(emitEvent('entry.draft-discard'));\r\n    return { documentId, entries: draftEntries };\r\n  }\r\n\r\n  async function updateComponents(entry: any, data: any) {\r\n    return components.updateComponents(uid, entry, data);\r\n  }\r\n\r\n  function omitComponentData(data: any) {\r\n    return components.omitComponentData(contentType, data);\r\n  }\r\n\r\n  return {\r\n    findMany: wrapInTransaction(findMany),\r\n    findFirst: wrapInTransaction(findFirst),\r\n    findOne: wrapInTransaction(findOne),\r\n    delete: wrapInTransaction(deleteDocument),\r\n    create: wrapInTransaction(create),\r\n    clone: wrapInTransaction(clone),\r\n    update: wrapInTransaction(update),\r\n    count: wrapInTransaction(count),\r\n    publish: hasDraftAndPublish ? wrapInTransaction(publish) : (undefined as any),\r\n    unpublish: hasDraftAndPublish ? wrapInTransaction(unpublish) : (undefined as any),\r\n    discardDraft: hasDraftAndPublish ? wrapInTransaction(discardDraft) : (undefined as any),\r\n\r\n    updateComponents,\r\n    omitComponentData,\r\n  };\r\n};\r\n"],"names":["contentTypesUtils","DP.defaultToDraft","DP.statusToLookup","i18n.defaultLocale","i18n.multiLocaleToLookup","transformParamsDocumentId","i18n.localeToLookup","query","DP.filterDataPublishedAt","DP.setStatusToDraft","DP.statusToData","i18n.localeToData","doc","DP.defaultStatus","unidirectionalRelations.load","unidirectionalRelations.sync","updateComponents","components.updateComponents","omitComponentData","components.omitComponentData"],"mappings":"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"}