{"version":3,"file":"index.mjs","sources":["../../../../src/services/document-service/attributes/index.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\r\n\r\nimport type { UID, Modules, Schema } from '@strapi/types';\r\n\r\nimport transforms from './transforms';\r\n\r\n// aliasing the type to make it easier to read\r\ntype Data = Modules.Documents.Params.Data.Input<UID.Schema>;\r\n\r\nconst applyTransforms = curry((schema: Schema.Schema, data: Data) => {\r\n  const attributeNames = Object.keys(data) as Array<keyof typeof data & string>;\r\n\r\n  for (const attributeName of attributeNames) {\r\n    const value = data[attributeName];\r\n\r\n    const attribute = schema.attributes[attributeName];\r\n\r\n    if (!attribute) {\r\n      continue;\r\n    }\r\n\r\n    const transform = transforms[attribute.type];\r\n\r\n    if (transform) {\r\n      const attributeContext = { attributeName, attribute };\r\n\r\n      data[attributeName] = transform(value, attributeContext);\r\n    }\r\n  }\r\n\r\n  return data;\r\n});\r\n\r\nexport { applyTransforms };\r\n"],"names":[],"mappings":";;AASA,MAAM,kBAAkB,MAAM,CAAC,QAAuB,SAAe;AAC7D,QAAA,iBAAiB,OAAO,KAAK,IAAI;AAEvC,aAAW,iBAAiB,gBAAgB;AACpC,UAAA,QAAQ,KAAK,aAAa;AAE1B,UAAA,YAAY,OAAO,WAAW,aAAa;AAEjD,QAAI,CAAC,WAAW;AACd;AAAA,IAAA;AAGI,UAAA,YAAY,WAAW,UAAU,IAAI;AAE3C,QAAI,WAAW;AACP,YAAA,mBAAmB,EAAE,eAAe,UAAU;AAEpD,WAAK,aAAa,IAAI,UAAU,OAAO,gBAAgB;AAAA,IAAA;AAAA,EACzD;AAGK,SAAA;AACT,CAAC;"}