{"version":3,"file":"transforms.mjs","sources":["../../../../src/services/document-service/attributes/transforms.ts"],"sourcesContent":["import { getOr, toNumber, isString } from 'lodash/fp';\r\nimport type { Schema } from '@strapi/types';\r\nimport bcrypt from 'bcryptjs';\r\n\r\ntype Transforms = {\r\n  [TKind in Schema.Attribute.Kind]?: (\r\n    value: unknown,\r\n    context: {\r\n      attribute: Schema.Attribute.AnyAttribute;\r\n      attributeName: string;\r\n    }\r\n  ) => any;\r\n};\r\n\r\nconst transforms: Transforms = {\r\n  password(value, context) {\r\n    const { attribute } = context;\r\n\r\n    if (attribute.type !== 'password') {\r\n      throw new Error('Invalid attribute type');\r\n    }\r\n\r\n    if (!isString(value) && !(value instanceof Buffer)) {\r\n      return value;\r\n    }\r\n\r\n    const rounds = toNumber(getOr(10, 'encryption.rounds', attribute));\r\n\r\n    return bcrypt.hashSync(value.toString(), rounds);\r\n  },\r\n};\r\n\r\nexport default transforms;\r\n"],"names":[],"mappings":";;AAcA,MAAM,aAAyB;AAAA,EAC7B,SAAS,OAAO,SAAS;AACjB,UAAA,EAAE,cAAc;AAElB,QAAA,UAAU,SAAS,YAAY;AAC3B,YAAA,IAAI,MAAM,wBAAwB;AAAA,IAAA;AAG1C,QAAI,CAAC,SAAS,KAAK,KAAK,EAAE,iBAAiB,SAAS;AAC3C,aAAA;AAAA,IAAA;AAGT,UAAM,SAAS,SAAS,MAAM,IAAI,qBAAqB,SAAS,CAAC;AAEjE,WAAO,OAAO,SAAS,MAAM,SAAA,GAAY,MAAM;AAAA,EAAA;AAEnD;"}