{"version":3,"file":"index.mjs","sources":["../../../src/services/entity-service/index.ts"],"sourcesContent":["import _ from 'lodash';\r\nimport delegate from 'delegates';\r\nimport { errors as databaseErrors } from '@strapi/database';\r\nimport {\r\n  contentTypes as contentTypesUtils,\r\n  errors,\r\n  relations as relationUtils,\r\n} from '@strapi/utils';\r\nimport type { Database } from '@strapi/database';\r\nimport type { Core, Modules, Utils } from '@strapi/types';\r\n\r\ntype Decoratable<T> = T & {\r\n  decorate(\r\n    decorator: (old: Modules.EntityService.EntityService) => Modules.EntityService.EntityService & {\r\n      [key: string]: unknown;\r\n    }\r\n  ): void;\r\n};\r\n\r\nconst transformLoadParamsToQuery = (\r\n  uid: string,\r\n  field: string,\r\n  params: Record<string, unknown>,\r\n  pagination = {}\r\n) => {\r\n  const query = strapi\r\n    .get('query-params')\r\n    .transform(uid, { populate: { [field]: params } as any }) as any;\r\n\r\n  const res = {\r\n    ...query.populate[field],\r\n    ...pagination,\r\n  };\r\n\r\n  return res;\r\n};\r\n\r\nconst databaseErrorsToTransform = [\r\n  databaseErrors.InvalidTimeError,\r\n  databaseErrors.InvalidDateTimeError,\r\n  databaseErrors.InvalidDateError,\r\n  databaseErrors.InvalidRelationError,\r\n];\r\n\r\nconst createDefaultImplementation = ({\r\n  strapi,\r\n  db,\r\n}: {\r\n  strapi: Core.Strapi;\r\n  db: Database;\r\n}): Modules.EntityService.EntityService => ({\r\n  async wrapParams(options: any = {}) {\r\n    return options;\r\n  },\r\n\r\n  async wrapResult(result: any = {}) {\r\n    return result;\r\n  },\r\n\r\n  async findMany(uid, opts) {\r\n    const { kind } = strapi.getModel(uid);\r\n\r\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'findMany' });\r\n\r\n    if (kind === 'singleType') {\r\n      const entity = strapi.documents!(uid).findFirst(wrappedParams);\r\n      return this.wrapResult(entity, { uid, action: 'findOne' });\r\n    }\r\n\r\n    const entities = await strapi.documents!(uid).findMany(wrappedParams);\r\n    return this.wrapResult(entities, { uid, action: 'findMany' });\r\n  },\r\n\r\n  async findPage(uid, opts) {\r\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'findPage' });\r\n\r\n    const query = strapi.get('query-params').transform(uid, wrappedParams);\r\n\r\n    const entities = await db.query(uid).findPage(query);\r\n    return this.wrapResult(entities, { uid, action: 'findMany' });\r\n  },\r\n\r\n  async findOne(uid, entityId, opts) {\r\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'findOne' });\r\n\r\n    const res = await db.query(uid).findOne({ where: { id: entityId } });\r\n\r\n    if (!res) {\r\n      return this.wrapResult(null, { uid, action: 'findOne' });\r\n    }\r\n\r\n    const entity = await strapi.documents!(uid).findOne({\r\n      ...wrappedParams,\r\n      documentId: res.documentId,\r\n    });\r\n    return this.wrapResult(entity, { uid, action: 'findOne' });\r\n  },\r\n\r\n  async count(uid, opts) {\r\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'count' });\r\n\r\n    return strapi.documents!(uid).count(wrappedParams);\r\n  },\r\n\r\n  async create(uid, params) {\r\n    const wrappedParams = await this.wrapParams<\r\n      Modules.EntityService.Params.Pick<typeof uid, 'data' | 'fields' | 'populate'>\r\n    >(params, { uid, action: 'create' });\r\n    const { data } = wrappedParams;\r\n\r\n    if (!data) {\r\n      throw new Error('cannot create');\r\n    }\r\n\r\n    const shouldPublish = !contentTypesUtils.isDraft(data, strapi.getModel(uid));\r\n\r\n    const entity = await strapi.documents!(uid).create({\r\n      ...(wrappedParams as any),\r\n      status: shouldPublish ? 'published' : 'draft',\r\n    });\r\n\r\n    return this.wrapResult(entity, { uid, action: 'create' });\r\n  },\r\n\r\n  async update(uid, entityId, opts) {\r\n    const wrappedParams = await this.wrapParams<\r\n      Modules.EntityService.Params.Pick<typeof uid, 'data:partial' | 'fields' | 'populate'>\r\n    >(opts, {\r\n      uid,\r\n      action: 'update',\r\n    });\r\n    const entityToUpdate = await db.query(uid).findOne({ where: { id: entityId } });\r\n\r\n    if (!entityToUpdate) {\r\n      return this.wrapResult(null, { uid, action: 'update' });\r\n    }\r\n\r\n    const shouldPublish = !contentTypesUtils.isDraft(entityToUpdate, strapi.getModel(uid));\r\n\r\n    const entity = strapi.documents!(uid).update({\r\n      ...(wrappedParams as any),\r\n      status: shouldPublish ? 'published' : 'draft',\r\n      documentId: entityToUpdate.documentId,\r\n    });\r\n\r\n    return this.wrapResult(entity, { uid, action: 'update' });\r\n  },\r\n\r\n  async delete(uid, entityId, opts) {\r\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'delete' });\r\n\r\n    const entityToDelete = await db.query(uid).findOne({ where: { id: entityId } });\r\n\r\n    if (!entityToDelete) {\r\n      return this.wrapResult(null, { uid, action: 'delete' });\r\n    }\r\n\r\n    await strapi.documents!(uid).delete({\r\n      ...wrappedParams,\r\n      documentId: entityToDelete.documentId,\r\n    });\r\n\r\n    return this.wrapResult(entityToDelete, { uid, action: 'delete' });\r\n  },\r\n\r\n  async load(uid, entity, field, params) {\r\n    if (!_.isString(field)) {\r\n      throw new Error(`Invalid load. Expected \"${field}\" to be a string`);\r\n    }\r\n\r\n    const loadedEntity = await db\r\n      .query(uid)\r\n      .load(entity, field, transformLoadParamsToQuery(uid, field, params ?? {}));\r\n\r\n    return this.wrapResult(loadedEntity, { uid, field, action: 'load' });\r\n  },\r\n\r\n  async loadPages(uid, entity, field, params, pagination = {}) {\r\n    if (!_.isString(field)) {\r\n      throw new Error(`Invalid load. Expected \"${field}\" to be a string`);\r\n    }\r\n\r\n    const { attributes } = strapi.getModel(uid);\r\n    const attribute = attributes[field];\r\n\r\n    if (!relationUtils.isAnyToMany(attribute)) {\r\n      throw new Error(`Invalid load. Expected \"${field}\" to be an anyToMany relational attribute`);\r\n    }\r\n\r\n    const query = transformLoadParamsToQuery(uid, field, params ?? {}, pagination);\r\n\r\n    const loadedPage = await db.query(uid).loadPages(entity, field, query);\r\n\r\n    return {\r\n      ...loadedPage,\r\n      results: await this.wrapResult(loadedPage.results, { uid, field, action: 'load' }),\r\n    };\r\n  },\r\n});\r\n\r\nexport default (ctx: {\r\n  strapi: Core.Strapi;\r\n  db: Database;\r\n}): Decoratable<Modules.EntityService.EntityService> => {\r\n  const implementation = createDefaultImplementation(ctx);\r\n\r\n  const service = {\r\n    implementation,\r\n    decorate<T extends object>(decorator: (current: typeof implementation) => T) {\r\n      if (typeof decorator !== 'function') {\r\n        throw new Error(`Decorator must be a function, received ${typeof decorator}`);\r\n      }\r\n\r\n      this.implementation = { ...this.implementation, ...decorator(this.implementation) };\r\n      return this;\r\n    },\r\n  };\r\n\r\n  const delegator = delegate(service, 'implementation');\r\n\r\n  // delegate every method in implementation\r\n  Object.keys(service.implementation).forEach((key) => delegator.method(key));\r\n\r\n  // wrap methods to handle Database Errors\r\n  service.decorate((oldService: Modules.EntityService.EntityService) => {\r\n    const newService = _.mapValues(\r\n      oldService,\r\n      (method, methodName: keyof Modules.EntityService.EntityService) =>\r\n        async function (this: Modules.EntityService.EntityService, ...args: []) {\r\n          try {\r\n            return await (oldService[methodName] as Utils.Function.AnyPromise).call(this, ...args);\r\n          } catch (error) {\r\n            if (\r\n              databaseErrorsToTransform.some(\r\n                (errorToTransform) => error instanceof errorToTransform\r\n              )\r\n            ) {\r\n              if (error instanceof Error) {\r\n                throw new errors.ValidationError(error.message);\r\n              }\r\n\r\n              throw error;\r\n            }\r\n            throw error;\r\n          }\r\n        }\r\n    );\r\n\r\n    return newService;\r\n  });\r\n\r\n  return service as unknown as Decoratable<Modules.EntityService.EntityService>;\r\n};\r\n"],"names":["databaseErrors","strapi","contentTypesUtils","relationUtils","errors"],"mappings":"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"}