{"version":3,"file":"index.mjs","sources":["../../../../src/services/content-api/permissions/index.ts"],"sourcesContent":["import _ from 'lodash';\r\nimport type { Core } from '@strapi/types';\r\nimport { createActionProvider, createConditionProvider } from './providers';\r\nimport createPermissionEngine from './engine';\r\n\r\nconst typeSymbol = Symbol.for('__type__');\r\n\r\ninterface ValidatePermissionHandler {\r\n  (params: { permission: { action: string } }): boolean;\r\n}\r\n\r\n/**\r\n * Creates a handler that checks if the permission's action exists in the action registry\r\n */\r\nconst createValidatePermissionHandler =\r\n  (actionProvider: ReturnType<typeof createActionProvider>): ValidatePermissionHandler =>\r\n  ({ permission }) => {\r\n    const action = actionProvider.get(permission.action);\r\n\r\n    // If the action isn't registered into the action provider, then ignore the permission and warn the user\r\n    if (!action) {\r\n      strapi.log.debug(\r\n        `Unknown action \"${permission.action}\" supplied when registering a new permission`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n/**\r\n * Create instances of providers and permission engine for the core content-API service.\r\n * Also, expose utilities to get information about available actions and such.\r\n */\r\nexport default (strapi: Core.Strapi) => {\r\n  // NOTE: Here we define both an action and condition provider,\r\n  // but at the moment, we're only using the action one.\r\n  const providers = {\r\n    action: createActionProvider(),\r\n    condition: createConditionProvider(),\r\n  };\r\n\r\n  /**\r\n   * Get a tree representation of the available Content API actions\r\n   * based on the methods of the Content API controllers.\r\n   *\r\n   * @note Only actions bound to a content-API route are returned.\r\n   */\r\n  const getActionsMap = () => {\r\n    const actionMap: Record<\r\n      string,\r\n      {\r\n        controllers: Record<string, string[]>;\r\n      }\r\n    > = {};\r\n\r\n    /**\r\n     * Check if a controller's action is bound to the\r\n     * content-api by looking at a potential __type__ symbol\r\n     */\r\n    const isContentApi = (action: Core.ControllerHandler & { [s: symbol]: any }) => {\r\n      if (!_.has(action, typeSymbol)) {\r\n        return false;\r\n      }\r\n\r\n      return action[typeSymbol].includes('content-api');\r\n    };\r\n\r\n    /**\r\n     * Register actions from a specific API source into the result tree\r\n     */\r\n    const registerAPIsActions = (\r\n      apis: Record<string, Core.Plugin | Core.Module>,\r\n      source: 'api' | 'plugin'\r\n    ) => {\r\n      _.forEach(apis, (api, apiName) => {\r\n        const controllers = _.reduce(\r\n          api.controllers,\r\n          (acc, controller, controllerName) => {\r\n            const contentApiActions = _.pickBy(controller, isContentApi);\r\n\r\n            if (_.isEmpty(contentApiActions)) {\r\n              return acc;\r\n            }\r\n\r\n            acc[controllerName] = Object.keys(contentApiActions);\r\n\r\n            return acc;\r\n          },\r\n          {} as Record<string, string[]>\r\n        );\r\n\r\n        if (!_.isEmpty(controllers)) {\r\n          actionMap[`${source}::${apiName}`] = { controllers };\r\n        }\r\n      });\r\n    };\r\n\r\n    registerAPIsActions(strapi.apis, 'api');\r\n    registerAPIsActions(strapi.plugins, 'plugin');\r\n\r\n    return actionMap;\r\n  };\r\n\r\n  /**\r\n   * Register all the content-API controllers actions into the action provider.\r\n   * This method make use of the {@link getActionsMap} to generate the list of actions to register.\r\n   */\r\n  const registerActions = async () => {\r\n    const actionsMap = getActionsMap();\r\n\r\n    // For each API\r\n    for (const [api, value] of Object.entries(actionsMap)) {\r\n      const { controllers } = value;\r\n\r\n      // Register controllers methods as actions\r\n      for (const [controller, actions] of Object.entries(controllers)) {\r\n        // Register each action individually\r\n        await Promise.all(\r\n          actions.map((action) => {\r\n            const actionUID = `${api}.${controller}.${action}`;\r\n\r\n            return providers.action.register(actionUID, {\r\n              api,\r\n              controller,\r\n              action,\r\n              uid: actionUID,\r\n            });\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Create an instance of a content-API permission engine\r\n  // and binds a custom validation handler to it\r\n  const engine = createPermissionEngine({ providers });\r\n\r\n  engine.on(\r\n    'before-format::validate.permission',\r\n    createValidatePermissionHandler(providers.action)\r\n  );\r\n\r\n  return {\r\n    engine,\r\n    providers,\r\n    registerActions,\r\n    getActionsMap,\r\n  };\r\n};\r\n"],"names":["strapi"],"mappings":";;;;AAKA,MAAM,aAAa,OAAO,IAAI,UAAU;AASxC,MAAM,kCACJ,CAAC,mBACD,CAAC,EAAE,iBAAiB;AAClB,QAAM,SAAS,eAAe,IAAI,WAAW,MAAM;AAGnD,MAAI,CAAC,QAAQ;AACX,WAAO,IAAI;AAAA,MACT,mBAAmB,WAAW,MAAM;AAAA,IACtC;AAEO,WAAA;AAAA,EAAA;AAGF,SAAA;AACT;AAMF,MAAe,kCAAA,CAACA,YAAwB;AAGtC,QAAM,YAAY;AAAA,IAChB,QAAQ,qBAAqB;AAAA,IAC7B,WAAW,wBAAwB;AAAA,EACrC;AAQA,QAAM,gBAAgB,MAAM;AAC1B,UAAM,YAKF,CAAC;AAMC,UAAA,eAAe,CAAC,WAA0D;AAC9E,UAAI,CAAC,EAAE,IAAI,QAAQ,UAAU,GAAG;AACvB,eAAA;AAAA,MAAA;AAGT,aAAO,OAAO,UAAU,EAAE,SAAS,aAAa;AAAA,IAClD;AAKM,UAAA,sBAAsB,CAC1B,MACA,WACG;AACH,QAAE,QAAQ,MAAM,CAAC,KAAK,YAAY;AAChC,cAAM,cAAc,EAAE;AAAA,UACpB,IAAI;AAAA,UACJ,CAAC,KAAK,YAAY,mBAAmB;AACnC,kBAAM,oBAAoB,EAAE,OAAO,YAAY,YAAY;AAEvD,gBAAA,EAAE,QAAQ,iBAAiB,GAAG;AACzB,qBAAA;AAAA,YAAA;AAGT,gBAAI,cAAc,IAAI,OAAO,KAAK,iBAAiB;AAE5C,mBAAA;AAAA,UACT;AAAA,UACA,CAAA;AAAA,QACF;AAEA,YAAI,CAAC,EAAE,QAAQ,WAAW,GAAG;AAC3B,oBAAU,GAAG,MAAM,KAAK,OAAO,EAAE,IAAI,EAAE,YAAY;AAAA,QAAA;AAAA,MACrD,CACD;AAAA,IACH;AAEoBA,wBAAAA,QAAO,MAAM,KAAK;AAClBA,wBAAAA,QAAO,SAAS,QAAQ;AAErC,WAAA;AAAA,EACT;AAMA,QAAM,kBAAkB,YAAY;AAClC,UAAM,aAAa,cAAc;AAGjC,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AAC/C,YAAA,EAAE,gBAAgB;AAGxB,iBAAW,CAAC,YAAY,OAAO,KAAK,OAAO,QAAQ,WAAW,GAAG;AAE/D,cAAM,QAAQ;AAAA,UACZ,QAAQ,IAAI,CAAC,WAAW;AACtB,kBAAM,YAAY,GAAG,GAAG,IAAI,UAAU,IAAI,MAAM;AAEzC,mBAAA,UAAU,OAAO,SAAS,WAAW;AAAA,cAC1C;AAAA,cACA;AAAA,cACA;AAAA,cACA,KAAK;AAAA,YAAA,CACN;AAAA,UACF,CAAA;AAAA,QACH;AAAA,MAAA;AAAA,IACF;AAAA,EAEJ;AAIA,QAAM,SAAS,uBAAuB,EAAE,WAAW;AAE5C,SAAA;AAAA,IACL;AAAA,IACA,gCAAgC,UAAU,MAAM;AAAA,EAClD;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;"}