{"version":3,"file":"body.mjs","sources":["../../src/middlewares/body.ts"],"sourcesContent":["import fse from 'fs-extra';\r\nimport { defaultsDeep } from 'lodash/fp';\r\nimport body, { KoaBodyMiddlewareOptions } from 'koa-body';\r\nimport mime from 'mime-types';\r\nimport type Koa from 'koa';\r\nimport type { Core } from '@strapi/types';\r\n\r\nexport type Config = KoaBodyMiddlewareOptions;\r\n\r\nconst defaults = {\r\n  multipart: true,\r\n  patchKoa: true,\r\n};\r\n\r\nfunction ensureFileMimeType(file: any): void {\r\n  if (!file.type) {\r\n    file.type = mime.lookup(file.name) || 'application/octet-stream';\r\n  }\r\n}\r\n\r\nfunction getFiles(ctx: Koa.Context) {\r\n  return ctx?.request?.files?.files;\r\n}\r\n\r\nconst bodyMiddleware: Core.MiddlewareFactory<Config> = (config, { strapi }) => {\r\n  const bodyConfig: Config = defaultsDeep(defaults, config);\r\n\r\n  let gqlEndpoint: string | undefined;\r\n  if (strapi.plugin('graphql')) {\r\n    const { config: gqlConfig } = strapi.plugin('graphql');\r\n    gqlEndpoint = gqlConfig('endpoint');\r\n  }\r\n\r\n  return async (ctx, next) => {\r\n    // TODO: find a better way later\r\n    if (gqlEndpoint && ctx.url === gqlEndpoint) {\r\n      await next();\r\n    } else {\r\n      try {\r\n        await body(bodyConfig)(ctx, async () => {});\r\n\r\n        const files = getFiles(ctx);\r\n\r\n        /**\r\n         * in case the mime-type wasn't sent, Strapi tries to guess it\r\n         * from the file extension, to avoid a corrupt database state\r\n         */\r\n        if (files) {\r\n          if (Array.isArray(files)) {\r\n            files.forEach(ensureFileMimeType);\r\n          } else {\r\n            ensureFileMimeType(files);\r\n          }\r\n        }\r\n\r\n        await next();\r\n      } catch (error) {\r\n        if (\r\n          error instanceof Error &&\r\n          error.message &&\r\n          error.message.includes('maxFileSize exceeded')\r\n        ) {\r\n          return ctx.payloadTooLarge('FileTooBig');\r\n        }\r\n\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    const files = getFiles(ctx);\r\n\r\n    // clean any file that was uploaded\r\n    if (files) {\r\n      if (Array.isArray(files)) {\r\n        // not awaiting to not slow the request\r\n        Promise.all(files.map((file) => fse.remove(file.filepath)));\r\n      } else if (files && files.filepath) {\r\n        // not awaiting to not slow the request\r\n        fse.remove(files.filepath);\r\n      }\r\n      delete ctx.request.files;\r\n    }\r\n  };\r\n};\r\n\r\nexport { bodyMiddleware as body };\r\n"],"names":["files"],"mappings":";;;;AASA,MAAM,WAAW;AAAA,EACf,WAAW;AAAA,EACX,UAAU;AACZ;AAEA,SAAS,mBAAmB,MAAiB;AACvC,MAAA,CAAC,KAAK,MAAM;AACd,SAAK,OAAO,KAAK,OAAO,KAAK,IAAI,KAAK;AAAA,EAAA;AAE1C;AAEA,SAAS,SAAS,KAAkB;AAC3B,SAAA,KAAK,SAAS,OAAO;AAC9B;AAEA,MAAM,iBAAiD,CAAC,QAAQ,EAAE,aAAa;AACvE,QAAA,aAAqB,aAAa,UAAU,MAAM;AAEpD,MAAA;AACA,MAAA,OAAO,OAAO,SAAS,GAAG;AAC5B,UAAM,EAAE,QAAQ,UAAA,IAAc,OAAO,OAAO,SAAS;AACrD,kBAAc,UAAU,UAAU;AAAA,EAAA;AAG7B,SAAA,OAAO,KAAK,SAAS;AAEtB,QAAA,eAAe,IAAI,QAAQ,aAAa;AAC1C,YAAM,KAAK;AAAA,IAAA,OACN;AACD,UAAA;AACF,cAAM,KAAK,UAAU,EAAE,KAAK,YAAY;AAAA,QAAA,CAAE;AAEpCA,cAAAA,SAAQ,SAAS,GAAG;AAM1B,YAAIA,QAAO;AACL,cAAA,MAAM,QAAQA,MAAK,GAAG;AACxBA,mBAAM,QAAQ,kBAAkB;AAAA,UAAA,OAC3B;AACL,+BAAmBA,MAAK;AAAA,UAAA;AAAA,QAC1B;AAGF,cAAM,KAAK;AAAA,eACJ,OAAO;AAEZ,YAAA,iBAAiB,SACjB,MAAM,WACN,MAAM,QAAQ,SAAS,sBAAsB,GAC7C;AACO,iBAAA,IAAI,gBAAgB,YAAY;AAAA,QAAA;AAGnC,cAAA;AAAA,MAAA;AAAA,IACR;AAGI,UAAA,QAAQ,SAAS,GAAG;AAG1B,QAAI,OAAO;AACL,UAAA,MAAM,QAAQ,KAAK,GAAG;AAEhB,gBAAA,IAAI,MAAM,IAAI,CAAC,SAAS,IAAI,OAAO,KAAK,QAAQ,CAAC,CAAC;AAAA,MAAA,WACjD,SAAS,MAAM,UAAU;AAE9B,YAAA,OAAO,MAAM,QAAQ;AAAA,MAAA;AAE3B,aAAO,IAAI,QAAQ;AAAA,IAAA;AAAA,EAEvB;AACF;"}