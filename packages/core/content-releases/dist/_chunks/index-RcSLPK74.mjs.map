{"version":3,"file":"index-RcSLPK74.mjs","sources":["../../admin/src/constants.ts","../../admin/src/services/release.ts","../../admin/src/components/ReleaseActionOptions.tsx","../../admin/src/components/ReleaseActionModal.tsx","../../admin/src/components/ReleaseAction.tsx","../../admin/src/components/ReleaseListCell.tsx","../../admin/src/utils/time.ts","../../admin/src/components/ReleaseActionMenu.tsx","../../admin/src/components/ReleasesPanel.tsx","../../admin/src/pluginId.ts","../../admin/src/utils/prefixPluginTranslations.ts","../../admin/src/index.ts"],"sourcesContent":["import type { Permission as StrapiPermission } from '@strapi/admin/strapi-admin';\r\n\r\nexport const PERMISSIONS = {\r\n  main: [\r\n    {\r\n      action: 'plugin::content-releases.read',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  create: [\r\n    {\r\n      action: 'plugin::content-releases.create',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  update: [\r\n    {\r\n      action: 'plugin::content-releases.update',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  delete: [\r\n    {\r\n      action: 'plugin::content-releases.delete',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  createAction: [\r\n    {\r\n      action: 'plugin::content-releases.create-action',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  deleteAction: [\r\n    {\r\n      action: 'plugin::content-releases.delete-action',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  publish: [\r\n    {\r\n      action: 'plugin::content-releases.publish',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n} satisfies Record<string, StrapiPermission[]>;\r\n\r\nexport const PERMISSIONS_SETTINGS = {\r\n  read: [\r\n    {\r\n      action: 'plugin::content-releases.settings.read',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n  update: [\r\n    {\r\n      action: 'plugin::content-releases.settings.update',\r\n      subject: null,\r\n      id: '',\r\n      actionParameters: {},\r\n      properties: {},\r\n      conditions: [],\r\n    },\r\n  ],\r\n} satisfies Record<string, StrapiPermission[]>;\r\n","import { adminApi } from '@strapi/admin/strapi-admin';\r\n\r\nimport {\r\n  CreateReleaseAction,\r\n  CreateManyReleaseActions,\r\n  DeleteReleaseAction,\r\n} from '../../../shared/contracts/release-actions';\r\n\r\nimport type {\r\n  GetReleaseActions,\r\n  UpdateReleaseAction,\r\n  ReleaseActionGroupBy,\r\n} from '../../../shared/contracts/release-actions';\r\nimport type {\r\n  CreateRelease,\r\n  DeleteRelease,\r\n  GetReleases,\r\n  GetReleasesByDocumentAttached,\r\n  UpdateRelease,\r\n  GetRelease,\r\n  PublishRelease,\r\n  MapEntriesToReleases,\r\n} from '../../../shared/contracts/releases';\r\nimport type { GetSettings, UpdateSettings } from '../../../shared/contracts/settings';\r\nimport type { EndpointDefinition } from '@reduxjs/toolkit/query';\r\n\r\nexport interface GetReleasesQueryParams {\r\n  page?: number;\r\n  pageSize?: number;\r\n  filters?: {\r\n    releasedAt?: {\r\n      // TODO: this should be a boolean, find a way to avoid strings\r\n      $notNull?: boolean | 'true' | 'false';\r\n    };\r\n  };\r\n}\r\n\r\nexport interface GetReleaseActionsQueryParams {\r\n  page?: number;\r\n  pageSize?: number;\r\n  groupBy?: ReleaseActionGroupBy;\r\n}\r\n\r\ntype GetReleasesTabResponse = GetReleases.Response & {\r\n  meta: {\r\n    activeTab: 'pending' | 'done';\r\n  };\r\n};\r\n\r\ntype AnyEndpointDefinition = EndpointDefinition<any, any, any, any>;\r\n\r\n// TODO: move this into the admin code & expose an improved version of enhanceEndpoints or a new function\r\nconst extendInvalidatesTags = (\r\n  endpoint: AnyEndpointDefinition,\r\n  extraTags: string[] | { type: string; id: string }[]\r\n) => {\r\n  if (!endpoint) {\r\n    return;\r\n  }\r\n\r\n  const originalInvalidatesTags = endpoint.invalidatesTags;\r\n\r\n  const newInvalidatesTags: AnyEndpointDefinition['invalidatesTags'] = (\r\n    result,\r\n    err,\r\n    args,\r\n    meta\r\n  ) => {\r\n    const originalTags =\r\n      typeof originalInvalidatesTags === 'function'\r\n        ? originalInvalidatesTags(result, err, args, meta)\r\n        : originalInvalidatesTags;\r\n\r\n    return [...(originalTags ?? []), ...extraTags];\r\n  };\r\n\r\n  Object.assign(endpoint, { invalidatesTags: newInvalidatesTags });\r\n};\r\n\r\nconst releaseApi = adminApi\r\n  .enhanceEndpoints({\r\n    addTagTypes: ['Release', 'ReleaseAction', 'EntriesInRelease', 'ReleaseSettings', 'Document'],\r\n    endpoints: {\r\n      updateDocument(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n      deleteDocument(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n      deleteManyDocuments(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n      discardDocument(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n      createWorkflow(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n      updateWorkflow(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n      deleteWorkflow(endpoint: AnyEndpointDefinition) {\r\n        extendInvalidatesTags(endpoint, [\r\n          { type: 'Release', id: 'LIST' },\r\n          { type: 'ReleaseAction', id: 'LIST' },\r\n        ]);\r\n      },\r\n    },\r\n  })\r\n  .injectEndpoints({\r\n    endpoints: (build) => {\r\n      return {\r\n        getReleasesForEntry: build.query<\r\n          GetReleasesByDocumentAttached.Response,\r\n          Partial<GetReleasesByDocumentAttached.Request['query']>\r\n        >({\r\n          query(params) {\r\n            return {\r\n              url: '/content-releases/getByDocumentAttached',\r\n              method: 'GET',\r\n              config: {\r\n                params,\r\n              },\r\n            };\r\n          },\r\n          providesTags: (result) =>\r\n            result\r\n              ? [\r\n                  ...result.data.map(({ id }) => ({ type: 'Release' as const, id })),\r\n                  { type: 'Release', id: 'LIST' },\r\n                ]\r\n              : [],\r\n        }),\r\n        getReleases: build.query<GetReleasesTabResponse, GetReleasesQueryParams | void>({\r\n          query(\r\n            { page, pageSize, filters } = {\r\n              page: 1,\r\n              pageSize: 16,\r\n              filters: {\r\n                releasedAt: {\r\n                  $notNull: false,\r\n                },\r\n              },\r\n            }\r\n          ) {\r\n            return {\r\n              url: '/content-releases',\r\n              method: 'GET',\r\n              config: {\r\n                params: {\r\n                  page: page || 1,\r\n                  pageSize: pageSize || 16,\r\n                  filters: filters || {\r\n                    releasedAt: {\r\n                      $notNull: false,\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            };\r\n          },\r\n          transformResponse(response: GetReleasesTabResponse, meta, arg) {\r\n            const releasedAtValue = arg?.filters?.releasedAt?.$notNull;\r\n            const isActiveDoneTab = releasedAtValue === 'true';\r\n            const newResponse: GetReleasesTabResponse = {\r\n              ...response,\r\n              meta: {\r\n                ...response.meta,\r\n                activeTab: isActiveDoneTab ? 'done' : 'pending',\r\n              },\r\n            };\r\n\r\n            return newResponse;\r\n          },\r\n          providesTags: (result) =>\r\n            result\r\n              ? [\r\n                  ...result.data.map(({ id }) => ({ type: 'Release' as const, id })),\r\n                  { type: 'Release', id: 'LIST' },\r\n                ]\r\n              : [{ type: 'Release', id: 'LIST' }],\r\n        }),\r\n        getRelease: build.query<GetRelease.Response, GetRelease.Request['params']>({\r\n          query({ id }) {\r\n            return {\r\n              url: `/content-releases/${id}`,\r\n              method: 'GET',\r\n            };\r\n          },\r\n          providesTags: (result, error, arg) => [\r\n            { type: 'Release', id: 'LIST' },\r\n            { type: 'Release' as const, id: arg.id },\r\n          ],\r\n        }),\r\n        getReleaseActions: build.query<\r\n          GetReleaseActions.Response,\r\n          GetReleaseActions.Request['params'] & GetReleaseActions.Request['query']\r\n        >({\r\n          query({ releaseId, ...params }) {\r\n            return {\r\n              url: `/content-releases/${releaseId}/actions`,\r\n              method: 'GET',\r\n              config: {\r\n                params,\r\n              },\r\n            };\r\n          },\r\n          providesTags: [{ type: 'ReleaseAction', id: 'LIST' }],\r\n        }),\r\n        createRelease: build.mutation<CreateRelease.Response, CreateRelease.Request['body']>({\r\n          query(data) {\r\n            return {\r\n              url: '/content-releases',\r\n              method: 'POST',\r\n              data,\r\n            };\r\n          },\r\n          invalidatesTags: [{ type: 'Release', id: 'LIST' }],\r\n        }),\r\n        updateRelease: build.mutation<\r\n          void,\r\n          UpdateRelease.Request['params'] & UpdateRelease.Request['body']\r\n        >({\r\n          query({ id, ...data }) {\r\n            return {\r\n              url: `/content-releases/${id}`,\r\n              method: 'PUT',\r\n              data,\r\n            };\r\n          },\r\n          invalidatesTags: (result, error, arg) => [{ type: 'Release', id: arg.id }],\r\n        }),\r\n        createReleaseAction: build.mutation<\r\n          CreateReleaseAction.Response,\r\n          CreateReleaseAction.Request\r\n        >({\r\n          query({ body, params }) {\r\n            return {\r\n              url: `/content-releases/${params.releaseId}/actions`,\r\n              method: 'POST',\r\n              data: body,\r\n            };\r\n          },\r\n          invalidatesTags: [\r\n            { type: 'Release', id: 'LIST' },\r\n            { type: 'ReleaseAction', id: 'LIST' },\r\n          ],\r\n        }),\r\n        createManyReleaseActions: build.mutation<\r\n          CreateManyReleaseActions.Response,\r\n          CreateManyReleaseActions.Request\r\n        >({\r\n          query({ body, params }) {\r\n            return {\r\n              url: `/content-releases/${params.releaseId}/actions/bulk`,\r\n              method: 'POST',\r\n              data: body,\r\n            };\r\n          },\r\n          invalidatesTags: [\r\n            { type: 'Release', id: 'LIST' },\r\n            { type: 'ReleaseAction', id: 'LIST' },\r\n            { type: 'EntriesInRelease' },\r\n          ],\r\n        }),\r\n        updateReleaseAction: build.mutation<\r\n          UpdateReleaseAction.Response,\r\n          UpdateReleaseAction.Request & { query: GetReleaseActions.Request['query'] } & {\r\n            actionPath: [string, number];\r\n          }\r\n        >({\r\n          query({ body, params }) {\r\n            return {\r\n              url: `/content-releases/${params.releaseId}/actions/${params.actionId}`,\r\n              method: 'PUT',\r\n              data: body,\r\n            };\r\n          },\r\n          invalidatesTags: (res, error, arg) => [\r\n            { type: 'ReleaseAction', id: 'LIST' },\r\n            { type: 'Release', id: 'LIST' },\r\n            { type: 'Release', id: arg.params.releaseId },\r\n          ],\r\n          async onQueryStarted({ body, params, query, actionPath }, { dispatch, queryFulfilled }) {\r\n            // We need to mimic the same params received by the getReleaseActions query\r\n            const paramsWithoutActionId = {\r\n              releaseId: params.releaseId,\r\n              ...query,\r\n            };\r\n\r\n            const patchResult = dispatch(\r\n              releaseApi.util.updateQueryData(\r\n                'getReleaseActions',\r\n                paramsWithoutActionId,\r\n                (draft) => {\r\n                  const [key, index] = actionPath;\r\n                  const action = draft.data[key][index];\r\n\r\n                  if (action) {\r\n                    action.type = body.type;\r\n                  }\r\n                }\r\n              )\r\n            );\r\n\r\n            try {\r\n              await queryFulfilled;\r\n            } catch {\r\n              patchResult.undo();\r\n            }\r\n          },\r\n        }),\r\n        deleteReleaseAction: build.mutation<\r\n          DeleteReleaseAction.Response,\r\n          DeleteReleaseAction.Request\r\n        >({\r\n          query({ params }) {\r\n            return {\r\n              url: `/content-releases/${params.releaseId}/actions/${params.actionId}`,\r\n              method: 'DELETE',\r\n            };\r\n          },\r\n          invalidatesTags: (result, error, arg) => [\r\n            { type: 'Release', id: 'LIST' },\r\n            { type: 'Release', id: arg.params.releaseId },\r\n            { type: 'ReleaseAction', id: 'LIST' },\r\n            { type: 'EntriesInRelease' },\r\n          ],\r\n        }),\r\n        publishRelease: build.mutation<PublishRelease.Response, PublishRelease.Request['params']>({\r\n          query({ id }) {\r\n            return {\r\n              url: `/content-releases/${id}/publish`,\r\n              method: 'POST',\r\n            };\r\n          },\r\n          invalidatesTags: (result, error, arg) => [\r\n            { type: 'Release', id: arg.id },\r\n            { type: 'Document', id: `ALL_LIST` },\r\n          ],\r\n        }),\r\n        deleteRelease: build.mutation<DeleteRelease.Response, DeleteRelease.Request['params']>({\r\n          query({ id }) {\r\n            return {\r\n              url: `/content-releases/${id}`,\r\n              method: 'DELETE',\r\n            };\r\n          },\r\n          invalidatesTags: () => [{ type: 'Release', id: 'LIST' }, { type: 'EntriesInRelease' }],\r\n        }),\r\n        getMappedEntriesInReleases: build.query<\r\n          MapEntriesToReleases.Response['data'],\r\n          MapEntriesToReleases.Request['query']\r\n        >({\r\n          query(params) {\r\n            return {\r\n              url: '/content-releases/mapEntriesToReleases',\r\n              method: 'GET',\r\n              config: {\r\n                params,\r\n              },\r\n            };\r\n          },\r\n          transformResponse(response: MapEntriesToReleases.Response) {\r\n            return response.data;\r\n          },\r\n          providesTags: [{ type: 'EntriesInRelease' }],\r\n        }),\r\n        getReleaseSettings: build.query<GetSettings.Response, GetSettings.Request | void>({\r\n          query: () => '/content-releases/settings',\r\n          providesTags: [{ type: 'ReleaseSettings' }],\r\n        }),\r\n        updateReleaseSettings: build.mutation<void, UpdateSettings.Request['body']>({\r\n          query(data) {\r\n            return {\r\n              url: '/content-releases/settings',\r\n              method: 'PUT',\r\n              data,\r\n            };\r\n          },\r\n          invalidatesTags: [{ type: 'ReleaseSettings' }],\r\n        }),\r\n      };\r\n    },\r\n  });\r\n\r\nconst {\r\n  useGetReleasesQuery,\r\n  useGetReleasesForEntryQuery,\r\n  useGetReleaseQuery,\r\n  useGetReleaseActionsQuery,\r\n  useCreateReleaseMutation,\r\n  useCreateReleaseActionMutation,\r\n  useCreateManyReleaseActionsMutation,\r\n  useUpdateReleaseMutation,\r\n  useUpdateReleaseActionMutation,\r\n  usePublishReleaseMutation,\r\n  useDeleteReleaseActionMutation,\r\n  useDeleteReleaseMutation,\r\n  useGetMappedEntriesInReleasesQuery,\r\n  useGetReleaseSettingsQuery,\r\n  useUpdateReleaseSettingsMutation,\r\n} = releaseApi;\r\n\r\nexport {\r\n  useGetReleasesQuery,\r\n  useGetReleasesForEntryQuery,\r\n  useGetReleaseQuery,\r\n  useGetReleaseActionsQuery,\r\n  useCreateReleaseMutation,\r\n  useCreateReleaseActionMutation,\r\n  useCreateManyReleaseActionsMutation,\r\n  useUpdateReleaseMutation,\r\n  useUpdateReleaseActionMutation,\r\n  usePublishReleaseMutation,\r\n  useDeleteReleaseActionMutation,\r\n  useDeleteReleaseMutation,\r\n  useGetMappedEntriesInReleasesQuery,\r\n  useGetReleaseSettingsQuery,\r\n  useUpdateReleaseSettingsMutation,\r\n  releaseApi,\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { VisuallyHidden, Field, Flex } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\ninterface FieldWrapperProps extends Field.Props {\r\n  actionType: 'publish' | 'unpublish';\r\n}\r\n\r\nconst getBorderLeftRadiusValue = (actionType: FieldWrapperProps['actionType']) => {\r\n  return actionType === 'publish' ? 1 : 0;\r\n};\r\n\r\nconst getBorderRightRadiusValue = (actionType: FieldWrapperProps['actionType']) => {\r\n  return actionType === 'publish' ? 0 : 1;\r\n};\r\n\r\nconst FieldWrapper = styled(Field.Root)<{\r\n  $actionType: 'publish' | 'unpublish';\r\n}>`\r\n  border-top-left-radius: ${({ $actionType, theme }) =>\r\n    theme.spaces[getBorderLeftRadiusValue($actionType)]};\r\n  border-bottom-left-radius: ${({ $actionType, theme }) =>\r\n    theme.spaces[getBorderLeftRadiusValue($actionType)]};\r\n  border-top-right-radius: ${({ $actionType, theme }) =>\r\n    theme.spaces[getBorderRightRadiusValue($actionType)]};\r\n  border-bottom-right-radius: ${({ $actionType, theme }) =>\r\n    theme.spaces[getBorderRightRadiusValue($actionType)]};\r\n\r\n  > label {\r\n    color: inherit;\r\n    padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[3]}`};\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  &[data-checked='true'] {\r\n    color: ${({ theme, $actionType }) =>\r\n      $actionType === 'publish' ? theme.colors.primary700 : theme.colors.danger600};\r\n    background-color: ${({ theme, $actionType }) =>\r\n      $actionType === 'publish' ? theme.colors.primary100 : theme.colors.danger100};\r\n    border-color: ${({ theme, $actionType }) =>\r\n      $actionType === 'publish' ? theme.colors.primary700 : theme.colors.danger600};\r\n  }\r\n\r\n  &[data-checked='false'] {\r\n    border-left: ${({ $actionType }) => $actionType === 'unpublish' && 'none'};\r\n    border-right: ${({ $actionType }) => $actionType === 'publish' && 'none'};\r\n  }\r\n\r\n  &[data-checked='false'][data-disabled='false']:hover {\r\n    color: ${({ theme }) => theme.colors.neutral700};\r\n    background-color: ${({ theme }) => theme.colors.neutral100};\r\n    border-color: ${({ theme }) => theme.colors.neutral200};\r\n\r\n    & > label {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  &[data-disabled='true'] {\r\n    color: ${({ theme }) => theme.colors.neutral600};\r\n    background-color: ${({ theme }) => theme.colors.neutral150};\r\n    border-color: ${({ theme }) => theme.colors.neutral300};\r\n  }\r\n`;\r\n\r\ninterface ActionOptionProps {\r\n  selected: 'publish' | 'unpublish';\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  name: string;\r\n  disabled?: boolean;\r\n}\r\n\r\ninterface OptionProps extends ActionOptionProps {\r\n  actionType: 'publish' | 'unpublish';\r\n}\r\n\r\nconst ActionOption = ({\r\n  selected,\r\n  actionType,\r\n  handleChange,\r\n  name,\r\n  disabled = false,\r\n}: OptionProps) => {\r\n  return (\r\n    <FieldWrapper\r\n      $actionType={actionType}\r\n      background=\"primary0\"\r\n      borderColor=\"neutral200\"\r\n      color={selected === actionType ? 'primary600' : 'neutral600'}\r\n      position=\"relative\"\r\n      cursor=\"pointer\"\r\n      data-checked={selected === actionType}\r\n      data-disabled={disabled && selected !== actionType}\r\n    >\r\n      <Field.Label>\r\n        <VisuallyHidden>\r\n          <Field.Input\r\n            type=\"radio\"\r\n            name={name}\r\n            checked={selected === actionType}\r\n            onChange={handleChange}\r\n            value={actionType}\r\n            disabled={disabled}\r\n          />\r\n        </VisuallyHidden>\r\n        {actionType}\r\n      </Field.Label>\r\n    </FieldWrapper>\r\n  );\r\n};\r\n\r\nexport const ReleaseActionOptions = ({\r\n  selected,\r\n  handleChange,\r\n  name,\r\n  disabled = false,\r\n}: ActionOptionProps) => {\r\n  return (\r\n    <Flex>\r\n      <ActionOption\r\n        actionType=\"publish\"\r\n        selected={selected}\r\n        handleChange={handleChange}\r\n        name={name}\r\n        disabled={disabled}\r\n      />\r\n      <ActionOption\r\n        actionType=\"unpublish\"\r\n        selected={selected}\r\n        handleChange={handleChange}\r\n        name={name}\r\n        disabled={disabled}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useQueryParams,\r\n  useRBAC,\r\n  isFetchError,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  EmptyStateLayout,\r\n  LinkButton,\r\n  Field,\r\n  Modal,\r\n} from '@strapi/design-system';\r\nimport { PaperPlane } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useFormik } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link as ReactRouterLink } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { CreateReleaseAction } from '../../../shared/contracts/release-actions';\r\nimport { PERMISSIONS } from '../constants';\r\nimport { useCreateReleaseActionMutation, useGetReleasesForEntryQuery } from '../services/release';\r\n\r\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\r\n\r\nimport type {\r\n  DocumentActionComponent,\r\n  DocumentActionProps,\r\n} from '@strapi/content-manager/strapi-admin';\r\nimport type { UID } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AddActionToReleaseModal\r\n * -----------------------------------------------------------------------------------------------*/\r\nexport const RELEASE_ACTION_FORM_SCHEMA = yup.object().shape({\r\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\r\n  releaseId: yup.string().required(),\r\n});\r\n\r\nexport interface FormValues {\r\n  type: CreateReleaseAction.Request['body']['type'];\r\n  releaseId: CreateReleaseAction.Request['params']['releaseId'];\r\n}\r\n\r\nexport const INITIAL_VALUES = {\r\n  type: 'publish',\r\n  releaseId: '',\r\n} satisfies FormValues;\r\n\r\ninterface AddActionToReleaseModalProps {\r\n  contentType: string;\r\n  documentId?: string;\r\n  onInputChange: (field: keyof FormValues, value: string | number) => void;\r\n  values: FormValues;\r\n}\r\n\r\nexport const NoReleases = () => {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <EmptyStateLayout\r\n      icon={<EmptyDocuments width=\"16rem\" />}\r\n      content={formatMessage({\r\n        id: 'content-releases.content-manager-edit-view.add-to-release.no-releases-message',\r\n        defaultMessage:\r\n          'No available releases. Open the list of releases and create a new one from there.',\r\n      })}\r\n      action={\r\n        <LinkButton\r\n          to={{\r\n            pathname: '/plugins/content-releases',\r\n          }}\r\n          tag={ReactRouterLink}\r\n          variant=\"secondary\"\r\n        >\r\n          {formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.add-to-release.redirect-button',\r\n            defaultMessage: 'Open the list of releases',\r\n          })}\r\n        </LinkButton>\r\n      }\r\n      shadow=\"none\"\r\n    />\r\n  );\r\n};\r\n\r\nconst AddActionToReleaseModal = ({\r\n  contentType,\r\n  documentId,\r\n  onInputChange,\r\n  values,\r\n}: AddActionToReleaseModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const locale = query.plugins?.i18n?.locale;\r\n\r\n  // Get all 'pending' releases that do not have the entry attached\r\n  const response = useGetReleasesForEntryQuery({\r\n    contentType,\r\n    entryDocumentId: documentId,\r\n    hasEntryAttached: false,\r\n    locale,\r\n  });\r\n\r\n  const releases = response.data?.data;\r\n\r\n  if (releases?.length === 0) {\r\n    return <NoReleases />;\r\n  }\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <Box paddingBottom={6}>\r\n        <Field.Root required>\r\n          <Field.Label>\r\n            {formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-label',\r\n              defaultMessage: 'Select a release',\r\n            })}\r\n          </Field.Label>\r\n          <SingleSelect\r\n            required\r\n            placeholder={formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-placeholder',\r\n              defaultMessage: 'Select',\r\n            })}\r\n            name=\"releaseId\"\r\n            onChange={(value) => onInputChange('releaseId', value)}\r\n            value={values.releaseId}\r\n          >\r\n            {releases?.map((release) => (\r\n              <SingleSelectOption key={release.id} value={release.id}>\r\n                {release.name}\r\n              </SingleSelectOption>\r\n            ))}\r\n          </SingleSelect>\r\n        </Field.Root>\r\n      </Box>\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'content-releases.content-manager-edit-view.add-to-release.action-type-label',\r\n          defaultMessage: 'What do you want to do with this entry?',\r\n        })}\r\n      </Field.Label>\r\n      <ReleaseActionOptions\r\n        selected={values.type}\r\n        handleChange={(e) => onInputChange('type', e.target.value)}\r\n        name=\"type\"\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseActionModalForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ReleaseActionModalForm: DocumentActionComponent = ({\r\n  documentId,\r\n  document,\r\n  model,\r\n  collectionType,\r\n}: DocumentActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { allowedActions } = useRBAC(PERMISSIONS);\r\n  const { canCreateAction } = allowedActions;\r\n  const [createReleaseAction, { isLoading }] = useCreateReleaseActionMutation();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const locale = query.plugins?.i18n?.locale;\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>, onClose: () => void) => {\r\n    try {\r\n      await formik.handleSubmit(e);\r\n      onClose();\r\n    } catch (error) {\r\n      if (isFetchError(error)) {\r\n        // Handle axios error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(error),\r\n        });\r\n      } else {\r\n        // Handle generic error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: 'notification.error',\r\n            defaultMessage: 'An error occurred',\r\n          }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: INITIAL_VALUES,\r\n    validationSchema: RELEASE_ACTION_FORM_SCHEMA,\r\n    onSubmit: async (values: FormValues) => {\r\n      if (collectionType === 'collection-types' && !documentId) {\r\n        throw new Error('Document id is required');\r\n      }\r\n\r\n      const response = await createReleaseAction({\r\n        body: {\r\n          type: values.type,\r\n          contentType: model as UID.ContentType,\r\n          entryDocumentId: documentId,\r\n          locale,\r\n        },\r\n        params: { releaseId: values.releaseId },\r\n      });\r\n\r\n      if ('data' in response) {\r\n        // Handle success\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.add-to-release.notification.success',\r\n            defaultMessage: 'Entry added to release',\r\n          }),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if ('error' in response) {\r\n        throw response.error;\r\n      }\r\n    },\r\n  });\r\n\r\n  const {\r\n    edit: { options },\r\n  } = useDocumentLayout(model);\r\n\r\n  // Project is not EE or contentType does not have draftAndPublish enabled\r\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canCreateAction) {\r\n    return null;\r\n  }\r\n\r\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: 'content-releases.content-manager-edit-view.add-to-release',\r\n      defaultMessage: 'Add to release',\r\n    }),\r\n    icon: <PaperPlane />,\r\n    // Entry is creating so we don't want to allow adding it to a release\r\n    disabled: !document,\r\n    position: ['panel', 'table-row'],\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: 'content-releases.content-manager-edit-view.add-to-release',\r\n        defaultMessage: 'Add to release',\r\n      }),\r\n      content: (\r\n        <AddActionToReleaseModal\r\n          contentType={model}\r\n          documentId={documentId}\r\n          onInputChange={formik.setFieldValue}\r\n          values={formik.values}\r\n        />\r\n      ),\r\n      footer: ({ onClose }) => (\r\n        <Modal.Footer>\r\n          <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\r\n            {formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.cancel-button',\r\n              defaultMessage: 'Cancel',\r\n            })}\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            // @ts-expect-error - formik ReactEvent types don't match button onClick types as they expect a MouseEvent\r\n            onClick={(e) => handleSubmit(e, onClose)}\r\n            disabled={!formik.values.releaseId}\r\n            loading={isLoading}\r\n          >\r\n            {formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.continue-button',\r\n              defaultMessage: 'Continue',\r\n            })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nexport { ReleaseActionModalForm };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useQueryParams,\r\n  useRBAC,\r\n  isFetchError,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Modal,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { UID } from '@strapi/types';\r\nimport { Formik, Form } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { CreateManyReleaseActions } from '../../../shared/contracts/release-actions';\r\nimport { PERMISSIONS as releasePermissions } from '../constants';\r\nimport { useCreateManyReleaseActionsMutation, useGetReleasesQuery } from '../services/release';\r\n\r\nimport {\r\n  type FormValues,\r\n  INITIAL_VALUES,\r\n  RELEASE_ACTION_FORM_SCHEMA,\r\n  NoReleases,\r\n} from './ReleaseActionModal';\r\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\r\n\r\nimport type { BulkActionComponent } from '@strapi/content-manager/strapi-admin';\r\n\r\nconst getContentPermissions = (subject: string) => {\r\n  const permissions = {\r\n    publish: [\r\n      {\r\n        action: 'plugin::content-manager.explorer.publish',\r\n        subject,\r\n        id: '',\r\n        actionParameters: {},\r\n        properties: {},\r\n        conditions: [],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return permissions;\r\n};\r\n\r\nconst ReleaseAction: BulkActionComponent = ({ documents, model }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const contentPermissions = getContentPermissions(model);\r\n  const {\r\n    allowedActions: { canPublish },\r\n  } = useRBAC(contentPermissions);\r\n  const {\r\n    allowedActions: { canCreate },\r\n  } = useRBAC(releasePermissions);\r\n\r\n  // Get all the releases not published\r\n  const response = useGetReleasesQuery();\r\n  const releases = response.data?.data;\r\n  const [createManyReleaseActions, { isLoading }] = useCreateManyReleaseActionsMutation();\r\n  const documentIds = documents.map((doc) => doc.documentId);\r\n\r\n  const handleSubmit = async (values: FormValues) => {\r\n    const locale = query.plugins?.i18n?.locale;\r\n\r\n    const releaseActionEntries: CreateManyReleaseActions.Request['body'] = documentIds.map(\r\n      (entryDocumentId) => ({\r\n        type: values.type,\r\n        contentType: model as UID.ContentType,\r\n        entryDocumentId,\r\n        locale,\r\n      })\r\n    );\r\n\r\n    const response = await createManyReleaseActions({\r\n      body: releaseActionEntries,\r\n      params: { releaseId: values.releaseId },\r\n    });\r\n\r\n    if ('data' in response) {\r\n      // Handle success\r\n\r\n      const notificationMessage = formatMessage(\r\n        {\r\n          id: 'content-releases.content-manager-list-view.add-to-release.notification.success.message',\r\n          defaultMessage:\r\n            '{entriesAlreadyInRelease} out of {totalEntries} entries were already in the release.',\r\n        },\r\n        {\r\n          entriesAlreadyInRelease: response.data.meta.entriesAlreadyInRelease,\r\n          totalEntries: response.data.meta.totalEntries,\r\n        }\r\n      );\r\n\r\n      const notification = {\r\n        type: 'success' as const,\r\n        title: formatMessage(\r\n          {\r\n            id: 'content-releases.content-manager-list-view.add-to-release.notification.success.title',\r\n            defaultMessage: 'Successfully added to release.',\r\n          },\r\n          {\r\n            entriesAlreadyInRelease: response.data.meta.entriesAlreadyInRelease,\r\n            totalEntries: response.data.meta.totalEntries,\r\n          }\r\n        ),\r\n        message: response.data.meta.entriesAlreadyInRelease ? notificationMessage : '',\r\n      };\r\n\r\n      toggleNotification(notification);\r\n\r\n      return true;\r\n    }\r\n\r\n    if ('error' in response) {\r\n      if (isFetchError(response.error)) {\r\n        // Handle fetch error\r\n        toggleNotification({\r\n          type: 'warning',\r\n          message: formatAPIError(response.error),\r\n        });\r\n      } else {\r\n        // Handle generic error\r\n        toggleNotification({\r\n          type: 'warning',\r\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!canCreate || !canPublish) return null;\r\n\r\n  return {\r\n    actionType: 'release',\r\n    variant: 'tertiary',\r\n    label: formatMessage({\r\n      id: 'content-manager-list-view.add-to-release',\r\n      defaultMessage: 'Add to Release',\r\n    }),\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: 'content-manager-list-view.add-to-release',\r\n        defaultMessage: 'Add to Release',\r\n      }),\r\n      content: ({ onClose }) => {\r\n        return (\r\n          <Formik\r\n            onSubmit={async (values) => {\r\n              const data = await handleSubmit(values);\r\n              if (data) {\r\n                return onClose();\r\n              }\r\n            }}\r\n            validationSchema={RELEASE_ACTION_FORM_SCHEMA}\r\n            initialValues={INITIAL_VALUES}\r\n          >\r\n            {({ values, setFieldValue }) => (\r\n              <Form>\r\n                {releases?.length === 0 ? (\r\n                  <NoReleases />\r\n                ) : (\r\n                  <Modal.Body>\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n                      <Box paddingBottom={6}>\r\n                        <Field.Root required>\r\n                          <Field.Label>\r\n                            {formatMessage({\r\n                              id: 'content-releases.content-manager-list-view.add-to-release.select-label',\r\n                              defaultMessage: 'Select a release',\r\n                            })}\r\n                          </Field.Label>\r\n                          <SingleSelect\r\n                            placeholder={formatMessage({\r\n                              id: 'content-releases.content-manager-list-view.add-to-release.select-placeholder',\r\n                              defaultMessage: 'Select',\r\n                            })}\r\n                            onChange={(value) => setFieldValue('releaseId', value)}\r\n                            value={values.releaseId}\r\n                          >\r\n                            {releases?.map((release) => (\r\n                              <SingleSelectOption key={release.id} value={release.id}>\r\n                                {release.name}\r\n                              </SingleSelectOption>\r\n                            ))}\r\n                          </SingleSelect>\r\n                        </Field.Root>\r\n                      </Box>\r\n                      <Field.Label>\r\n                        {formatMessage({\r\n                          id: 'content-releases.content-manager-list-view.add-to-release.action-type-label',\r\n                          defaultMessage: 'What do you want to do with these entries?',\r\n                        })}\r\n                      </Field.Label>\r\n                      <ReleaseActionOptions\r\n                        selected={values.type}\r\n                        handleChange={(e) => setFieldValue('type', e.target.value)}\r\n                        name=\"type\"\r\n                      />\r\n                    </Flex>\r\n                  </Modal.Body>\r\n                )}\r\n                <Modal.Footer>\r\n                  <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\r\n                    {formatMessage({\r\n                      id: 'content-releases.content-manager-list-view.add-to-release.cancel-button',\r\n                      defaultMessage: 'Cancel',\r\n                    })}\r\n                  </Button>\r\n                  {/** * TODO: Ideally we would use isValid from Formik to disable the button,\r\n                  however currently it always returns true * for yup.string().required(), even when\r\n                  the value is falsy (including empty string) */}\r\n                  <Button type=\"submit\" disabled={!values.releaseId} loading={isLoading}>\r\n                    {formatMessage({\r\n                      id: 'content-releases.content-manager-list-view.add-to-release.continue-button',\r\n                      defaultMessage: 'Continue',\r\n                    })}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        );\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport { ReleaseAction };\r\n","import * as React from 'react';\r\n\r\nimport { useTable, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\r\nimport { Box, Popover, Typography, Button, Link } from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\nimport { Modules, UID } from '@strapi/types';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useGetMappedEntriesInReleasesQuery } from '../services/release';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useReleasesList\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface QueryParams {\r\n  plugins?: {\r\n    i18n?: {\r\n      locale: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst useReleasesList = (contentTypeUid: UID.ContentType, documentId: Modules.Documents.ID) => {\r\n  const listViewData = useTable('ListView', (state) => state.rows);\r\n  const documentIds = listViewData.map((entry) => entry.documentId);\r\n  const [{ query }] = useQueryParams();\r\n  const locale = (query as QueryParams)?.plugins?.i18n?.locale || undefined;\r\n\r\n  const response = useGetMappedEntriesInReleasesQuery(\r\n    { contentTypeUid, documentIds, locale },\r\n    { skip: !documentIds || !contentTypeUid || documentIds.length === 0 }\r\n  );\r\n\r\n  const mappedEntriesInReleases = response.data || {};\r\n\r\n  return mappedEntriesInReleases?.[documentId] || [];\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addColumnToTableHook\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface AddColumnToTableHookArgs {\r\n  layout: ListLayout;\r\n  displayedHeaders: ListFieldLayout[];\r\n}\r\n\r\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\r\n  const { options } = layout;\r\n\r\n  if (!options?.draftAndPublish) {\r\n    return { displayedHeaders, layout };\r\n  }\r\n\r\n  return {\r\n    displayedHeaders: [\r\n      ...displayedHeaders,\r\n      {\r\n        searchable: false,\r\n        sortable: false,\r\n        name: 'releases',\r\n        label: {\r\n          id: 'content-releases.content-manager.list-view.releases.header',\r\n          defaultMessage: 'To be released in',\r\n        },\r\n        cellFormatter: (\r\n          props: Modules.Documents.AnyDocument,\r\n          _: any,\r\n          { model }: { model: UID.ContentType }\r\n        ) => <ReleaseListCell {...props} model={model} />,\r\n      },\r\n    ],\r\n    layout,\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseListCell\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ReleaseListCellProps extends Modules.Documents.AnyDocument {\r\n  documentId: Modules.Documents.ID;\r\n  model: UID.ContentType;\r\n}\r\n\r\nconst ReleaseListCell = ({ documentId, model }: ReleaseListCellProps) => {\r\n  const releases = useReleasesList(model, documentId);\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Popover.Root>\r\n      <Popover.Trigger>\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={(e: React.MouseEvent<HTMLElement>) => e.stopPropagation()}\r\n          // TODO: find a way in the DS to define the widht and height of the icon\r\n          endIcon={releases.length > 0 ? <CaretDown width=\"1.2rem\" height=\"1.2rem\" /> : null}\r\n        >\r\n          <Typography\r\n            style={{ maxWidth: '252px', cursor: 'pointer' }}\r\n            textColor=\"neutral800\"\r\n            fontWeight=\"regular\"\r\n          >\r\n            {releases.length > 0\r\n              ? formatMessage(\r\n                  {\r\n                    id: 'content-releases.content-manager.list-view.releases-number',\r\n                    defaultMessage: '{number} {number, plural, one {release} other {releases}}',\r\n                  },\r\n                  {\r\n                    number: releases.length,\r\n                  }\r\n                )\r\n              : '-'}\r\n          </Typography>\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <Popover.Content>\r\n        <ul>\r\n          {releases.map(({ id, name }) => (\r\n            <Box key={id} padding={3} tag=\"li\">\r\n              <Link href={`/admin/plugins/content-releases/${id}`} isExternal={false}>\r\n                {name}\r\n              </Link>\r\n            </Box>\r\n          ))}\r\n        </ul>\r\n      </Popover.Content>\r\n    </Popover.Root>\r\n  );\r\n};\r\n\r\nexport { ReleaseListCell, addColumnToTableHook };\r\nexport type { ReleaseListCellProps };\r\n","export const getTimezoneOffset = (timezone: string, date: Date) => {\r\n  try {\r\n    const offsetPart = new Intl.DateTimeFormat('en', {\r\n      timeZone: timezone,\r\n      timeZoneName: 'longOffset',\r\n    })\r\n      .formatToParts(date)\r\n      .find((part) => part.type === 'timeZoneName');\r\n\r\n    const offset = offsetPart ? offsetPart.value : '';\r\n\r\n    // We want to show time based on UTC, not GMT so we swap that.\r\n    let utcOffset = offset.replace('GMT', 'UTC');\r\n\r\n    // For perfect UTC (UTC+0:00) we only get the string UTC, So we need to append the 0's.\r\n    if (!utcOffset.includes('+') && !utcOffset.includes('-')) {\r\n      utcOffset = `${utcOffset}+00:00`;\r\n    }\r\n\r\n    return utcOffset;\r\n  } catch (error) {\r\n    // When timezone is invalid we catch the error and return empty to don't break the app\r\n    return '';\r\n  }\r\n};\r\n\r\ninterface ITimezoneOption {\r\n  offset: string;\r\n  value: string;\r\n}\r\n\r\nexport const getTimezones = (selectedDate: Date) => {\r\n  const timezoneList: ITimezoneOption[] = Intl.supportedValuesOf('timeZone').map((timezone) => {\r\n    // Timezone will be in the format GMT${OFFSET} where offset could be nothing,\r\n    // a four digit string e.g. +05:00 or -08:00\r\n    const utcOffset = getTimezoneOffset(timezone, selectedDate);\r\n\r\n    // Offset and timezone are concatenated with '&', so to split and save the required timezone in DB\r\n    return { offset: utcOffset, value: `${utcOffset}&${timezone}` } satisfies ITimezoneOption;\r\n  });\r\n\r\n  const systemTimezone = timezoneList.find(\r\n    (timezone) => timezone.value.split('&')[1] === Intl.DateTimeFormat().resolvedOptions().timeZone\r\n  );\r\n\r\n  return { timezoneList, systemTimezone };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useAuth,\r\n  useRBAC,\r\n  isFetchError,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Flex, Typography, Menu, AccessibleIcon } from '@strapi/design-system';\r\nimport { Cross, More, Pencil } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { DeleteReleaseAction, ReleaseAction } from '../../../shared/contracts/release-actions';\r\nimport { Release } from '../../../shared/contracts/releases';\r\nimport { PERMISSIONS } from '../constants';\r\nimport { useDeleteReleaseActionMutation } from '../services/release';\r\n\r\nconst StyledMenuItem = styled(Menu.Item)<{ $variant?: 'neutral' | 'danger' }>`\r\n  &:hover {\r\n    background: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}100`]};\r\n\r\n    svg {\r\n      fill: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}600`]};\r\n    }\r\n\r\n    a {\r\n      color: ${({ theme }) => theme.colors.neutral800};\r\n    }\r\n  }\r\n\r\n  svg {\r\n    color: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}500`]};\r\n  }\r\n\r\n  span {\r\n    color: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}800`]};\r\n  }\r\n\r\n  span,\r\n  a {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DeleteReleaseActionItemProps\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface DeleteReleaseActionItemProps {\r\n  releaseId: DeleteReleaseAction.Request['params']['releaseId'];\r\n  actionId: DeleteReleaseAction.Request['params']['actionId'];\r\n}\r\n\r\nconst DeleteReleaseActionItem = ({ releaseId, actionId }: DeleteReleaseActionItemProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const [deleteReleaseAction] = useDeleteReleaseActionMutation();\r\n  const {\r\n    allowedActions: { canDeleteAction },\r\n  } = useRBAC(PERMISSIONS);\r\n\r\n  const handleDeleteAction = async () => {\r\n    const response = await deleteReleaseAction({\r\n      params: { releaseId, actionId },\r\n    });\r\n\r\n    if ('data' in response) {\r\n      // Handle success\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'content-releases.content-manager-edit-view.remove-from-release.notification.success',\r\n          defaultMessage: 'Entry removed from release',\r\n        }),\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if ('error' in response) {\r\n      if (isFetchError(response.error)) {\r\n        // Handle fetch error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(response.error),\r\n        });\r\n      } else {\r\n        // Handle generic error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!canDeleteAction) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <StyledMenuItem $variant=\"danger\" onSelect={handleDeleteAction}>\r\n      <Flex gap={2}>\r\n        <Cross width=\"1.6rem\" height=\"1.6rem\" />\r\n        <Typography textColor=\"danger600\" variant=\"omega\">\r\n          {formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.remove-from-release',\r\n            defaultMessage: 'Remove from release',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n    </StyledMenuItem>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseActionEntryLinkItem\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface ReleaseActionEntryLinkItemProps {\r\n  contentTypeUid: ReleaseAction['contentType'];\r\n  documentId: ReleaseAction['entry']['documentId'];\r\n  locale: ReleaseAction['locale'];\r\n}\r\n\r\nconst ReleaseActionEntryLinkItem = ({\r\n  contentTypeUid,\r\n  documentId,\r\n  locale,\r\n}: ReleaseActionEntryLinkItemProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const userPermissions = useAuth('ReleaseActionEntryLinkItem', (state) => state.permissions);\r\n\r\n  // Confirm user has permissions to access the entry for the given locale\r\n  const canUpdateEntryForLocale = React.useMemo(() => {\r\n    const updatePermissions = userPermissions.find(\r\n      (permission) =>\r\n        permission.subject === contentTypeUid &&\r\n        permission.action === 'plugin::content-manager.explorer.update'\r\n    );\r\n\r\n    if (!updatePermissions) {\r\n      return false;\r\n    }\r\n\r\n    return Boolean(!locale || updatePermissions.properties?.locales?.includes(locale));\r\n  }, [contentTypeUid, locale, userPermissions]);\r\n\r\n  const {\r\n    allowedActions: { canUpdate: canUpdateContentType },\r\n  } = useRBAC({\r\n    updateContentType: [\r\n      {\r\n        action: 'plugin::content-manager.explorer.update',\r\n        subject: contentTypeUid,\r\n      },\r\n    ],\r\n  });\r\n\r\n  if (!canUpdateContentType || !canUpdateEntryForLocale) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <StyledMenuItem\r\n      /* @ts-expect-error inference isn't working in DS */\r\n      tag={NavLink}\r\n      isLink\r\n      to={{\r\n        pathname: `/content-manager/collection-types/${contentTypeUid}/${documentId}`,\r\n        search: locale && `?plugins[i18n][locale]=${locale}`,\r\n      }}\r\n    >\r\n      <Flex gap={2}>\r\n        <Pencil width=\"1.6rem\" height=\"1.6rem\" />\r\n        <Typography variant=\"omega\">\r\n          {formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.edit-entry',\r\n            defaultMessage: 'Edit entry',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n    </StyledMenuItem>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditReleaseItem\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface EditReleaseItemProps {\r\n  releaseId: Release['id'];\r\n}\r\n\r\nconst EditReleaseItem = ({ releaseId }: EditReleaseItemProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    /* @ts-expect-error inference isn't working in DS */\r\n    <StyledMenuItem tag={NavLink} isLink to={`/plugins/content-releases/${releaseId}`}>\r\n      <Flex gap={2}>\r\n        <Pencil width=\"1.6rem\" height=\"1.6rem\" />\r\n        <Typography textColor=\"neutral800\" variant=\"omega\">\r\n          {formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.edit-release',\r\n            defaultMessage: 'Edit release',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n    </StyledMenuItem>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Root\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface RootProps {\r\n  children: React.ReactNode;\r\n  hasTriggerBorder?: boolean;\r\n}\r\n\r\nconst Root = ({ children }: RootProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { allowedActions } = useRBAC(PERMISSIONS);\r\n\r\n  return (\r\n    // A user can access the dropdown if they have permissions to delete a release-action OR update a release\r\n    allowedActions.canDeleteAction || allowedActions.canUpdate ? (\r\n      <Menu.Root>\r\n        <StyledMoreButton variant=\"tertiary\" endIcon={null} paddingLeft=\"7px\" paddingRight=\"7px\">\r\n          <AccessibleIcon\r\n            label={formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.release-action-menu',\r\n              defaultMessage: 'Release action options',\r\n            })}\r\n          >\r\n            <More />\r\n          </AccessibleIcon>\r\n        </StyledMoreButton>\r\n        <Menu.Content top={1} popoverPlacement=\"bottom-end\">\r\n          {children}\r\n        </Menu.Content>\r\n      </Menu.Root>\r\n    ) : null\r\n  );\r\n};\r\n\r\nconst StyledMoreButton = styled(Menu.Trigger)`\r\n  & > span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nexport const ReleaseActionMenu = {\r\n  Root,\r\n  EditReleaseItem,\r\n  DeleteReleaseActionItem,\r\n  ReleaseActionEntryLinkItem,\r\n};\r\n","import { useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { PERMISSIONS } from '../constants';\r\nimport { useGetReleasesForEntryQuery } from '../services/release';\r\nimport { getTimezoneOffset } from '../utils/time';\r\n\r\nimport { ReleaseActionMenu } from './ReleaseActionMenu';\r\n\r\nimport type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';\r\n\r\nconst Panel: PanelComponent = ({\r\n  model,\r\n  document,\r\n  documentId,\r\n  collectionType,\r\n}: PanelComponentProps) => {\r\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\r\n  const locale = query.plugins?.i18n?.locale;\r\n\r\n  const {\r\n    edit: { options },\r\n  } = useDocumentLayout(model);\r\n  const { formatMessage, formatDate, formatTime } = useIntl();\r\n\r\n  const { allowedActions } = useRBAC(PERMISSIONS);\r\n  const { canRead, canDeleteAction } = allowedActions;\r\n\r\n  const response = useGetReleasesForEntryQuery(\r\n    {\r\n      contentType: model,\r\n      entryDocumentId: documentId,\r\n      locale,\r\n      hasEntryAttached: true,\r\n    },\r\n    {\r\n      skip: !document,\r\n    }\r\n  );\r\n  const releases = response.data?.data;\r\n\r\n  const getReleaseColorVariant = (\r\n    actionType: 'publish' | 'unpublish',\r\n    shade: '100' | '200' | '600'\r\n  ) => {\r\n    if (actionType === 'unpublish') {\r\n      return `secondary${shade}`;\r\n    }\r\n\r\n    return `success${shade}`;\r\n  };\r\n\r\n  // Project is not EE or contentType does not have draftAndPublish enabled\r\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canRead) {\r\n    return null;\r\n  }\r\n\r\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\r\n    return null;\r\n  }\r\n\r\n  if (!releases || releases.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    title: formatMessage({\r\n      id: 'content-releases.plugin.name',\r\n      defaultMessage: 'Releases',\r\n    }),\r\n    content: (\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3} width=\"100%\">\r\n        {releases?.map((release) => (\r\n          <Flex\r\n            key={release.id}\r\n            direction=\"column\"\r\n            alignItems=\"start\"\r\n            borderWidth=\"1px\"\r\n            borderStyle=\"solid\"\r\n            borderColor={getReleaseColorVariant(release.actions[0].type, '200')}\r\n            overflow=\"hidden\"\r\n            hasRadius\r\n          >\r\n            <Box\r\n              paddingTop={3}\r\n              paddingBottom={3}\r\n              paddingLeft={4}\r\n              paddingRight={4}\r\n              background={getReleaseColorVariant(release.actions[0].type, '100')}\r\n              width=\"100%\"\r\n            >\r\n              <Typography\r\n                fontSize={1}\r\n                variant=\"pi\"\r\n                textColor={getReleaseColorVariant(release.actions[0].type, '600')}\r\n              >\r\n                {formatMessage(\r\n                  {\r\n                    id: 'content-releases.content-manager-edit-view.list-releases.title',\r\n                    defaultMessage:\r\n                      '{isPublish, select, true {Will be published in} other {Will be unpublished in}}',\r\n                  },\r\n                  { isPublish: release.actions[0].type === 'publish' }\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n            <Flex padding={4} direction=\"column\" gap={2} width=\"100%\" alignItems=\"flex-start\">\r\n              <Typography fontSize={2} fontWeight=\"bold\" variant=\"omega\" textColor=\"neutral700\">\r\n                {release.name}\r\n              </Typography>\r\n              {release.scheduledAt && release.timezone && (\r\n                <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                  {formatMessage(\r\n                    {\r\n                      id: 'content-releases.content-manager-edit-view.scheduled.date',\r\n                      defaultMessage: '{date} at {time} ({offset})',\r\n                    },\r\n                    {\r\n                      date: formatDate(new Date(release.scheduledAt), {\r\n                        day: '2-digit',\r\n                        month: '2-digit',\r\n                        year: 'numeric',\r\n                        timeZone: release.timezone,\r\n                      }),\r\n                      time: formatTime(new Date(release.scheduledAt), {\r\n                        hourCycle: 'h23',\r\n                        timeZone: release.timezone,\r\n                      }),\r\n                      offset: getTimezoneOffset(release.timezone, new Date(release.scheduledAt)),\r\n                    }\r\n                  )}\r\n                </Typography>\r\n              )}\r\n              {canDeleteAction ? (\r\n                <ReleaseActionMenu.Root hasTriggerBorder>\r\n                  <ReleaseActionMenu.EditReleaseItem releaseId={release.id} />\r\n                  <ReleaseActionMenu.DeleteReleaseActionItem\r\n                    releaseId={release.id}\r\n                    actionId={release.actions[0].id}\r\n                  />\r\n                </ReleaseActionMenu.Root>\r\n              ) : null}\r\n            </Flex>\r\n          </Flex>\r\n        ))}\r\n      </Flex>\r\n    ),\r\n  };\r\n};\r\n\r\nexport { Panel };\r\n","export const pluginId = 'content-releases';\r\n","type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n","import { PaperPlane } from '@strapi/icons';\r\n\r\nimport { ReleaseAction } from './components/ReleaseAction';\r\nimport { ReleaseActionModalForm } from './components/ReleaseActionModal';\r\nimport { addColumnToTableHook } from './components/ReleaseListCell';\r\nimport { Panel as ReleasesPanel } from './components/ReleasesPanel';\r\nimport { PERMISSIONS } from './constants';\r\nimport { pluginId } from './pluginId';\r\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\r\n\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\nimport type {\r\n  DocumentActionComponent,\r\n  BulkActionComponent,\r\n} from '@strapi/content-manager/strapi-admin';\r\nimport type { Plugin } from '@strapi/types';\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nconst admin: Plugin.Config.AdminInput = {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  register(app: StrapiApp) {\r\n    /**\r\n     * Hook that adds the locale column in the Release Details table\r\n     * @constant\r\n     * @type {string}\r\n     */\r\n    app.createHook('ContentReleases/pages/ReleaseDetails/add-locale-in-releases');\r\n\r\n    if (window.strapi.features.isEnabled('cms-content-releases')) {\r\n      app.addMenuLink({\r\n        to: `plugins/${pluginId}`,\r\n        icon: PaperPlane,\r\n        intlLabel: {\r\n          id: `${pluginId}.plugin.name`,\r\n          defaultMessage: 'Releases',\r\n        },\r\n        Component: () => import('./pages/App').then((mod) => ({ default: mod.App })),\r\n        permissions: PERMISSIONS.main,\r\n        position: 2,\r\n      });\r\n\r\n      // Insert the releases container into the CM's sidebar on the Edit View\r\n      const contentManagerPluginApis = app.getPlugin('content-manager').apis;\r\n      if (\r\n        'addEditViewSidePanel' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addEditViewSidePanel === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addEditViewSidePanel([ReleasesPanel]);\r\n      }\r\n\r\n      // Insert the \"add to release\" action into the CM's Edit View\r\n      if (\r\n        'addDocumentAction' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addDocumentAction === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addDocumentAction((actions: DocumentActionComponent[]) => {\r\n          const indexOfDeleteAction = actions.findIndex((action) => action.type === 'unpublish');\r\n          actions.splice(indexOfDeleteAction, 0, ReleaseActionModalForm);\r\n          return actions;\r\n        });\r\n      }\r\n\r\n      app.addSettingsLink('global', {\r\n        id: pluginId,\r\n        to: 'releases',\r\n        intlLabel: {\r\n          id: `${pluginId}.plugin.name`,\r\n          defaultMessage: 'Releases',\r\n        },\r\n        permissions: [],\r\n        async Component() {\r\n          const { ProtectedReleasesSettingsPage } = await import('./pages/ReleasesSettingsPage');\r\n          return { default: ProtectedReleasesSettingsPage };\r\n        },\r\n      });\r\n\r\n      if (\r\n        'addBulkAction' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addBulkAction === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addBulkAction((actions: BulkActionComponent[]) => {\r\n          // We want to add this action to just before the delete action all the time\r\n          const deleteActionIndex = actions.findIndex((action) => action.type === 'delete');\r\n\r\n          actions.splice(deleteActionIndex, 0, ReleaseAction);\r\n          return actions;\r\n        });\r\n      }\r\n\r\n      // Hook that adds a column into the CM's LV table\r\n      app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\r\n    } else if (\r\n      !window.strapi.features.isEnabled('cms-content-releases') &&\r\n      window.strapi?.flags?.promoteEE\r\n    ) {\r\n      app.addSettingsLink('global', {\r\n        id: pluginId,\r\n        to: '/plugins/purchase-content-releases',\r\n        intlLabel: {\r\n          id: `${pluginId}.plugin.name`,\r\n          defaultMessage: 'Releases',\r\n        },\r\n        permissions: [],\r\n        async Component() {\r\n          const { PurchaseContentReleases } = await import('./pages/PurchaseContentReleases');\r\n          return { default: PurchaseContentReleases };\r\n        },\r\n        licenseOnly: true,\r\n      });\r\n    }\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, 'content-releases'),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default admin;\r\n"],"names":["ReactRouterLink","useDocumentLayout","releasePermissions","response","Link","pluginId","ReleasesPanel"],"mappings":"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"}