{"version":3,"file":"schemas-DdA2ic2U.mjs","sources":["../../admin/src/validation/schemas.ts"],"sourcesContent":["import { translatedErrors } from '@strapi/admin/strapi-admin';\r\nimport { zonedTimeToUtc } from 'date-fns-tz';\r\nimport * as yup from 'yup';\r\n\r\n/**\r\n * FormikErrors type enforce us to always return a string as error.\r\n * We need these errors to be translated, so we need to create a hook to be able to use the formatMessage function.\r\n */\r\nexport const RELEASE_SCHEMA = yup\r\n  .object()\r\n  .shape({\r\n    name: yup.string().trim().required(translatedErrors.required.id).nullable(),\r\n    scheduledAt: yup.string().nullable(),\r\n    isScheduled: yup.boolean().optional(),\r\n    time: yup\r\n      .string()\r\n      .when('isScheduled', {\r\n        is: true,\r\n        then: yup.string().trim().required(translatedErrors.required.id),\r\n        otherwise: yup.string().nullable(),\r\n      })\r\n      .test(\r\n        'time-in-future-if-today',\r\n        'content-releases.modal.form.time.has-passed',\r\n        function (time) {\r\n          const { date, timezone } = this.parent;\r\n\r\n          if (!date || !timezone || !time) {\r\n            return true;\r\n          }\r\n\r\n          // Timezone is in format \"UTC&Europe/Paris\", so we get the region part for the dates functions\r\n          const region = timezone.split('&')[1];\r\n\r\n          const selectedTime = zonedTimeToUtc(`${date} ${time}`, region);\r\n          const now = new Date();\r\n\r\n          return selectedTime > now;\r\n        }\r\n      ),\r\n    timezone: yup.string().when('isScheduled', {\r\n      is: true,\r\n      then: yup.string().required(translatedErrors.required.id).nullable(),\r\n      otherwise: yup.string().nullable(),\r\n    }),\r\n    date: yup.string().when('isScheduled', {\r\n      is: true,\r\n      then: yup.string().required(translatedErrors.required.id).nullable(),\r\n      otherwise: yup.string().nullable(),\r\n    }),\r\n  })\r\n  .required()\r\n  .noUnknown();\r\n\r\nexport const SETTINGS_SCHEMA = yup\r\n  .object()\r\n  .shape({\r\n    defaultTimezone: yup.string().nullable().default(null),\r\n  })\r\n  .required()\r\n  .noUnknown();\r\n"],"names":[],"mappings":";;;AAQO,MAAM,iBAAiB,IAC3B,OAAO,EACP,MAAM;AAAA,EACL,MAAM,IAAI,OAAS,EAAA,KAAO,EAAA,SAAS,iBAAiB,SAAS,EAAE,EAAE,SAAS;AAAA,EAC1E,aAAa,IAAI,OAAO,EAAE,SAAS;AAAA,EACnC,aAAa,IAAI,QAAQ,EAAE,SAAS;AAAA,EACpC,MAAM,IACH,SACA,KAAK,eAAe;AAAA,IACnB,IAAI;AAAA,IACJ,MAAM,IAAI,SAAS,KAAO,EAAA,SAAS,iBAAiB,SAAS,EAAE;AAAA,IAC/D,WAAW,IAAI,OAAO,EAAE,SAAS;AAAA,EAClC,CAAA,EACA;AAAA,IACC;AAAA,IACA;AAAA,IACA,SAAU,MAAM;AACd,YAAM,EAAE,MAAM,SAAS,IAAI,KAAK;AAEhC,UAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM;AACxB,eAAA;AAAA,MAAA;AAIT,YAAM,SAAS,SAAS,MAAM,GAAG,EAAE,CAAC;AAEpC,YAAM,eAAe,eAAe,GAAG,IAAI,IAAI,IAAI,IAAI,MAAM;AACvD,YAAA,0BAAU,KAAK;AAErB,aAAO,eAAe;AAAA,IAAA;AAAA,EAE1B;AAAA,EACF,UAAU,IAAI,SAAS,KAAK,eAAe;AAAA,IACzC,IAAI;AAAA,IACJ,MAAM,IAAI,SAAS,SAAS,iBAAiB,SAAS,EAAE,EAAE,SAAS;AAAA,IACnE,WAAW,IAAI,OAAO,EAAE,SAAS;AAAA,EAAA,CAClC;AAAA,EACD,MAAM,IAAI,SAAS,KAAK,eAAe;AAAA,IACrC,IAAI;AAAA,IACJ,MAAM,IAAI,SAAS,SAAS,iBAAiB,SAAS,EAAE,EAAE,SAAS;AAAA,IACnE,WAAW,IAAI,OAAO,EAAE,SAAS;AAAA,EAClC,CAAA;AACH,CAAC,EACA,SAAS,EACT,UAAU;AAEN,MAAM,kBAAkB,IAC5B,OAAO,EACP,MAAM;AAAA,EACL,iBAAiB,IAAI,OAAA,EAAS,SAAS,EAAE,QAAQ,IAAI;AACvD,CAAC,EACA,SAAS,EACT,UAAU;"}