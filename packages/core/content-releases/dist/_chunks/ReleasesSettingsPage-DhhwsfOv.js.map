{"version":3,"file":"ReleasesSettingsPage-DhhwsfOv.js","sources":["../../admin/src/modules/hooks.ts","../../admin/src/pages/ReleasesSettingsPage.tsx"],"sourcesContent":["import { Dispatch } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { Store } from '@strapi/admin/strapi-admin';\r\n\r\ntype RootState = ReturnType<Store['getState']>;\r\n\r\nconst useTypedDispatch: () => Dispatch = useDispatch;\r\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport { useTypedSelector, useTypedDispatch };\r\n","import {\r\n  Form,\r\n  Layouts,\r\n  Page,\r\n  useAPIErrorHandler,\r\n  isFetchError,\r\n  useNotification,\r\n  useField,\r\n  useRBAC,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Button,\r\n  Combobox,\r\n  ComboboxOption,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useTypedSelector } from '../modules/hooks';\r\nimport { useGetReleaseSettingsQuery, useUpdateReleaseSettingsMutation } from '../services/release';\r\nimport { getTimezones } from '../utils/time';\r\nimport { SETTINGS_SCHEMA } from '../validation/schemas';\r\n\r\nimport type { UpdateSettings } from '../../../shared/contracts/settings';\r\n\r\nconst ReleasesSettingsPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\r\n  const [updateReleaseSettings, { isLoading: isSubmittingForm }] =\r\n    useUpdateReleaseSettingsMutation();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['releases']\r\n  );\r\n  const {\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC(permissions);\r\n\r\n  const { timezoneList } = getTimezones(new Date());\r\n\r\n  const handleSubmit = async (body: UpdateSettings.Request['body']) => {\r\n    const { defaultTimezone } = body;\r\n    const isBodyTimezoneValid = timezoneList.some((timezone) => timezone.value === defaultTimezone);\r\n    const newBody =\r\n      !defaultTimezone || !isBodyTimezoneValid ? { defaultTimezone: null } : { ...body };\r\n    try {\r\n      const response = await updateReleaseSettings(newBody);\r\n\r\n      if ('data' in response) {\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'content-releases.pages.Settings.releases.setting.default-timezone-notification-success',\r\n            defaultMessage: 'Default timezone updated.',\r\n          }),\r\n        });\r\n      } else if (isFetchError(response.error)) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(response.error),\r\n        });\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoadingSettings) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Releases',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main aria-busy={isLoadingSettings} tabIndex={-1}>\r\n        <Form\r\n          method=\"PUT\"\r\n          initialValues={{\r\n            defaultTimezone: data?.data.defaultTimezone,\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={SETTINGS_SCHEMA}\r\n        >\r\n          {({ modified, isSubmitting }: { modified: boolean; isSubmitting: boolean }) => {\r\n            return (\r\n              <>\r\n                <Layouts.Header\r\n                  primaryAction={\r\n                    canUpdate ? (\r\n                      <Button\r\n                        disabled={!modified || isSubmittingForm}\r\n                        loading={isSubmitting}\r\n                        startIcon={<Check />}\r\n                        type=\"submit\"\r\n                      >\r\n                        {formatMessage({\r\n                          id: 'global.save',\r\n                          defaultMessage: 'Save',\r\n                        })}\r\n                      </Button>\r\n                    ) : null\r\n                  }\r\n                  title={formatMessage({\r\n                    id: 'content-releases.pages.Settings.releases.title',\r\n                    defaultMessage: 'Releases',\r\n                  })}\r\n                  subtitle={formatMessage({\r\n                    id: 'content-releases.pages.Settings.releases.description',\r\n                    defaultMessage: 'Create and manage content updates',\r\n                  })}\r\n                />\r\n                <Layouts.Content>\r\n                  <Flex\r\n                    direction=\"column\"\r\n                    background=\"neutral0\"\r\n                    alignItems=\"stretch\"\r\n                    padding={6}\r\n                    gap={6}\r\n                    shadow=\"filterShadow\"\r\n                    hasRadius\r\n                  >\r\n                    <Typography variant=\"delta\" tag=\"h2\">\r\n                      {formatMessage({\r\n                        id: 'content-releases.pages.Settings.releases.preferences.title',\r\n                        defaultMessage: 'Preferences',\r\n                      })}\r\n                    </Typography>\r\n                    <Grid.Root>\r\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                        <TimezoneDropdown />\r\n                      </Grid.Item>\r\n                    </Grid.Root>\r\n                  </Flex>\r\n                </Layouts.Content>\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      </Page.Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\nconst TimezoneDropdown = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['releases']\r\n  );\r\n  const {\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC(permissions);\r\n  const { formatMessage } = useIntl();\r\n  const { timezoneList } = getTimezones(new Date());\r\n  const field = useField('defaultTimezone');\r\n  return (\r\n    <Field.Root\r\n      name=\"defaultTimezone\"\r\n      hint={formatMessage({\r\n        id: 'content-releases.pages.Settings.releases.timezone.hint',\r\n        defaultMessage: 'The timezone of every release can still be changed individually. ',\r\n      })}\r\n      error={field.error}\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'content-releases.pages.Settings.releases.timezone.label',\r\n          defaultMessage: 'Default timezone',\r\n        })}\r\n      </Field.Label>\r\n      <Combobox\r\n        autocomplete={{ type: 'list', filter: 'contains' }}\r\n        onChange={(value) => field.onChange('defaultTimezone', value)}\r\n        onTextValueChange={(value) => field.onChange('defaultTimezone', value)}\r\n        onClear={() => field.onChange('defaultTimezone', '')}\r\n        value={field.value}\r\n        disabled={!canUpdate}\r\n      >\r\n        {timezoneList.map((timezone) => (\r\n          <ComboboxOption key={timezone.value} value={timezone.value}>\r\n            {timezone.value.replace(/&/, ' ')}\r\n          </ComboboxOption>\r\n        ))}\r\n      </Combobox>\r\n      <Field.Hint />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedSettingsPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ProtectedReleasesSettingsPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['releases']?.read\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ReleasesSettingsPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n"],"names":["useSelector","useIntl","useAPIErrorHandler","useNotification","useGetReleaseSettingsQuery","useUpdateReleaseSettingsMutation","useRBAC","getTimezones","isFetchError","jsx","Page","jsxs","Layouts","Form","SETTINGS_SCHEMA","Fragment","Button","Check","Flex","Typography","Grid","useField","Field","Combobox","ComboboxOption"],"mappings":"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"}