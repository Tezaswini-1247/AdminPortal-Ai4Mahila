{"version":3,"file":"graphql-DMPTPlvx.mjs","sources":["../../server/src/graphql.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\r\n\r\nimport { FILE_MODEL_UID } from './constants';\r\n\r\nconst FILE_INFO_INPUT_TYPE_NAME = 'FileInfoInput';\r\n\r\nexport const installGraphqlExtension = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const { service: getGraphQLService, config: graphQLConfig } = strapi.plugin('graphql');\r\n  const { service: getUploadService } = strapi.plugin('upload');\r\n\r\n  const isShadowCRUDEnabled = graphQLConfig('shadowCRUD', true);\r\n\r\n  if (!isShadowCRUDEnabled) {\r\n    return;\r\n  }\r\n\r\n  getGraphQLService('extension').shadowCRUD('plugin::upload.folder').disable();\r\n  getGraphQLService('extension').shadowCRUD('plugin::upload.file').disableMutations();\r\n\r\n  const { getTypeName } = getGraphQLService('utils').naming;\r\n\r\n  const fileModel = strapi.getModel(FILE_MODEL_UID);\r\n  const fileTypeName = getTypeName(fileModel);\r\n  /**\r\n   * Register Upload's types, queries & mutations to the content API using the GraphQL extension API\r\n   */\r\n  getGraphQLService('extension').use(({ nexus }: { nexus: any }) => {\r\n    const { inputObjectType, extendType, nonNull } = nexus;\r\n\r\n    // Represents the input data payload for the file's information\r\n    const fileInfoInputType = inputObjectType({\r\n      name: FILE_INFO_INPUT_TYPE_NAME,\r\n\r\n      definition(t: any) {\r\n        t.string('name');\r\n        t.string('alternativeText');\r\n        t.string('caption');\r\n      },\r\n    });\r\n\r\n    const mutations = extendType({\r\n      type: 'Mutation',\r\n\r\n      definition(t: any) {\r\n        /**\r\n         * Update some information for a given file\r\n         */\r\n        t.field('updateUploadFile', {\r\n          type: nonNull(fileTypeName),\r\n\r\n          args: {\r\n            id: nonNull('ID'),\r\n            info: FILE_INFO_INPUT_TYPE_NAME,\r\n          },\r\n\r\n          async resolve(parent: unknown, args: { id: number; info: any }) {\r\n            const { id, info } = args;\r\n\r\n            return getUploadService('upload').updateFileInfo(id, info);\r\n          },\r\n        });\r\n\r\n        /**\r\n         * Delete & remove a given file\r\n         */\r\n        t.field('deleteUploadFile', {\r\n          type: fileTypeName,\r\n\r\n          args: {\r\n            id: nonNull('ID'),\r\n          },\r\n\r\n          async resolve(parent: unknown, args: { id: number }) {\r\n            const { id } = args;\r\n\r\n            const file = await getUploadService('upload').findOne(id);\r\n\r\n            if (!file) {\r\n              return null;\r\n            }\r\n\r\n            return getUploadService('upload').remove(file);\r\n          },\r\n        });\r\n      },\r\n    });\r\n\r\n    return {\r\n      types: [fileInfoInputType, mutations],\r\n      resolversConfig: {\r\n        // Use custom scopes for the upload file CRUD operations\r\n        'Query.uploadFiles': { auth: { scope: 'plugin::upload.content-api.find' } },\r\n        'Query.uploadFiles_connection': { auth: { scope: 'plugin::upload.content-api.find' } },\r\n        'Query.uploadFile': { auth: { scope: 'plugin::upload.content-api.findOne' } },\r\n        'Mutation.updateUploadFile': { auth: { scope: 'plugin::upload.content-api.upload' } },\r\n        'Mutation.deleteUploadFile': { auth: { scope: 'plugin::upload.content-api.destroy' } },\r\n      },\r\n    };\r\n  });\r\n};\r\n"],"names":[],"mappings":";AAIA,MAAM,4BAA4B;AAE3B,MAAM,0BAA0B,CAAC,EAAE,aAAsC;AACxE,QAAA,EAAE,SAAS,mBAAmB,QAAQ,kBAAkB,OAAO,OAAO,SAAS;AACrF,QAAM,EAAE,SAAS,iBAAA,IAAqB,OAAO,OAAO,QAAQ;AAEtD,QAAA,sBAAsB,cAAc,cAAc,IAAI;AAE5D,MAAI,CAAC,qBAAqB;AACxB;AAAA,EAAA;AAGF,oBAAkB,WAAW,EAAE,WAAW,uBAAuB,EAAE,QAAQ;AAC3E,oBAAkB,WAAW,EAAE,WAAW,qBAAqB,EAAE,iBAAiB;AAElF,QAAM,EAAE,YAAgB,IAAA,kBAAkB,OAAO,EAAE;AAE7C,QAAA,YAAY,OAAO,SAAS,cAAc;AAC1C,QAAA,eAAe,YAAY,SAAS;AAI1C,oBAAkB,WAAW,EAAE,IAAI,CAAC,EAAE,YAA4B;AAChE,UAAM,EAAE,iBAAiB,YAAY,QAAY,IAAA;AAGjD,UAAM,oBAAoB,gBAAgB;AAAA,MACxC,MAAM;AAAA,MAEN,WAAW,GAAQ;AACjB,UAAE,OAAO,MAAM;AACf,UAAE,OAAO,iBAAiB;AAC1B,UAAE,OAAO,SAAS;AAAA,MAAA;AAAA,IACpB,CACD;AAED,UAAM,YAAY,WAAW;AAAA,MAC3B,MAAM;AAAA,MAEN,WAAW,GAAQ;AAIjB,UAAE,MAAM,oBAAoB;AAAA,UAC1B,MAAM,QAAQ,YAAY;AAAA,UAE1B,MAAM;AAAA,YACJ,IAAI,QAAQ,IAAI;AAAA,YAChB,MAAM;AAAA,UACR;AAAA,UAEA,MAAM,QAAQ,QAAiB,MAAiC;AACxD,kBAAA,EAAE,IAAI,KAAA,IAAS;AAErB,mBAAO,iBAAiB,QAAQ,EAAE,eAAe,IAAI,IAAI;AAAA,UAAA;AAAA,QAC3D,CACD;AAKD,UAAE,MAAM,oBAAoB;AAAA,UAC1B,MAAM;AAAA,UAEN,MAAM;AAAA,YACJ,IAAI,QAAQ,IAAI;AAAA,UAClB;AAAA,UAEA,MAAM,QAAQ,QAAiB,MAAsB;AAC7C,kBAAA,EAAE,OAAO;AAEf,kBAAM,OAAO,MAAM,iBAAiB,QAAQ,EAAE,QAAQ,EAAE;AAExD,gBAAI,CAAC,MAAM;AACF,qBAAA;AAAA,YAAA;AAGT,mBAAO,iBAAiB,QAAQ,EAAE,OAAO,IAAI;AAAA,UAAA;AAAA,QAC/C,CACD;AAAA,MAAA;AAAA,IACH,CACD;AAEM,WAAA;AAAA,MACL,OAAO,CAAC,mBAAmB,SAAS;AAAA,MACpC,iBAAiB;AAAA;AAAA,QAEf,qBAAqB,EAAE,MAAM,EAAE,OAAO,oCAAoC;AAAA,QAC1E,gCAAgC,EAAE,MAAM,EAAE,OAAO,oCAAoC;AAAA,QACrF,oBAAoB,EAAE,MAAM,EAAE,OAAO,uCAAuC;AAAA,QAC5E,6BAA6B,EAAE,MAAM,EAAE,OAAO,sCAAsC;AAAA,QACpF,6BAA6B,EAAE,MAAM,EAAE,OAAO,qCAAuC,EAAA;AAAA,MAAA;AAAA,IAEzF;AAAA,EAAA,CACD;AACH;"}