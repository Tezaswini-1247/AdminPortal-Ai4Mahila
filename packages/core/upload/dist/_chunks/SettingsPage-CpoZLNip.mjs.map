{"version":3,"file":"SettingsPage-CpoZLNip.mjs","sources":["../../admin/src/pages/SettingsPage/init.ts","../../admin/src/pages/SettingsPage/reducer.ts","../../admin/src/pages/SettingsPage/SettingsPage.tsx"],"sourcesContent":["import type { InitialState } from './reducer';\r\n\r\nexport const init = (initialState: InitialState) => {\r\n  return initialState;\r\n};\r\n","import { produce } from 'immer';\r\nimport set from 'lodash/set';\r\n\r\nexport type InitialState = {\r\n  initialData: {\r\n    responsiveDimensions?: boolean;\r\n    sizeOptimization?: boolean;\r\n    autoOrientation?: boolean;\r\n    videoPreview?: boolean;\r\n  } | null;\r\n  modifiedData: {\r\n    responsiveDimensions?: boolean;\r\n    sizeOptimization?: boolean;\r\n    autoOrientation?: boolean;\r\n    videoPreview?: boolean;\r\n  } | null;\r\n};\r\n\r\ninterface ActionGetDataSucceeded {\r\n  type: 'GET_DATA_SUCCEEDED';\r\n  data: InitialState['initialData'];\r\n}\r\n\r\ninterface ActionOnChange {\r\n  type: 'ON_CHANGE';\r\n  keys: keyof NonNullable<InitialState['initialData']>;\r\n  value: boolean;\r\n}\r\n\r\nexport type Action = ActionGetDataSucceeded | ActionOnChange;\r\n\r\nconst initialState: InitialState = {\r\n  initialData: {\r\n    responsiveDimensions: true,\r\n    sizeOptimization: true,\r\n    autoOrientation: false,\r\n    videoPreview: false,\r\n  },\r\n  modifiedData: {\r\n    responsiveDimensions: true,\r\n    sizeOptimization: true,\r\n    autoOrientation: false,\r\n    videoPreview: false,\r\n  },\r\n};\r\n\r\nconst reducer = (state: InitialState, action: Action) =>\r\n  produce(state, (drafState) => {\r\n    switch (action.type) {\r\n      case 'GET_DATA_SUCCEEDED': {\r\n        drafState.initialData = action.data;\r\n        drafState.modifiedData = action.data;\r\n        break;\r\n      }\r\n      case 'ON_CHANGE': {\r\n        set(drafState, ['modifiedData', ...action.keys.split('.')], action.value);\r\n        break;\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n\r\nexport { initialState, reducer };\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { Page, useNotification, useFetchClient, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box, Button, Flex, Grid, Toggle, Typography, Field } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQuery } from 'react-query';\r\n\r\nimport { UpdateSettings } from '../../../../shared/contracts/settings';\r\nimport { PERMISSIONS } from '../../constants';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport { init } from './init';\r\nimport { initialState, reducer } from './reducer';\r\n\r\nimport type { InitialState } from './reducer';\r\n\r\nexport const SettingsPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { get, put } = useFetchClient();\r\n\r\n  const [{ initialData, modifiedData }, dispatch] = React.useReducer(reducer, initialState, init);\r\n\r\n  const { data, isLoading, refetch } = useQuery({\r\n    queryKey: ['upload', 'settings'],\r\n    async queryFn() {\r\n      const {\r\n        data: { data },\r\n      } = await get('/upload/settings');\r\n\r\n      return data;\r\n    },\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      dispatch({\r\n        type: 'GET_DATA_SUCCEEDED',\r\n        data,\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  const isSaveButtonDisabled = isEqual(initialData, modifiedData);\r\n\r\n  const { mutateAsync, isLoading: isSubmitting } = useMutation<\r\n    UpdateSettings.Response['data'],\r\n    UpdateSettings.Response['error'],\r\n    UpdateSettings.Request['body']\r\n  >(\r\n    async (body) => {\r\n      const { data } = await put('/upload/settings', body);\r\n\r\n      return data;\r\n    },\r\n    {\r\n      onSuccess() {\r\n        refetch();\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'notification.form.success.fields' }),\r\n        });\r\n      },\r\n      onError(err) {\r\n        console.error(err);\r\n      },\r\n    }\r\n  );\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (isSaveButtonDisabled) {\r\n      return;\r\n    }\r\n\r\n    await mutateAsync(modifiedData!);\r\n  };\r\n\r\n  const handleChange = ({\r\n    target: { name, value },\r\n  }: {\r\n    target: { name: keyof NonNullable<InitialState['initialData']>; value: boolean };\r\n  }) => {\r\n    dispatch({\r\n      type: 'ON_CHANGE',\r\n      keys: name,\r\n      value,\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Page.Main tabIndex={-1}>\r\n      <Page.Title>\r\n        {formatMessage({\r\n          id: getTrad('page.title'),\r\n          defaultMessage: 'Settings - Media Libray',\r\n        })}\r\n      </Page.Title>\r\n      <form onSubmit={handleSubmit}>\r\n        <Layouts.Header\r\n          title={formatMessage({\r\n            id: getTrad('settings.header.label'),\r\n            defaultMessage: 'Media Library',\r\n          })}\r\n          primaryAction={\r\n            <Button\r\n              disabled={isSaveButtonDisabled}\r\n              loading={isSubmitting}\r\n              type=\"submit\"\r\n              startIcon={<Check />}\r\n              size=\"S\"\r\n            >\r\n              {formatMessage({\r\n                id: 'global.save',\r\n                defaultMessage: 'Save',\r\n              })}\r\n            </Button>\r\n          }\r\n          subtitle={formatMessage({\r\n            id: getTrad('settings.sub-header.label'),\r\n            defaultMessage: 'Configure the settings for the Media Library',\r\n          })}\r\n        />\r\n        <Layouts.Content>\r\n          <Layouts.Root>\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={12}>\r\n              <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                  <Flex>\r\n                    <Typography variant=\"delta\" tag=\"h2\">\r\n                      {formatMessage({\r\n                        id: getTrad('settings.blockTitle'),\r\n                        defaultMessage: 'Asset management',\r\n                      })}\r\n                    </Typography>\r\n                  </Flex>\r\n                  <Grid.Root gap={6}>\r\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        hint={formatMessage({\r\n                          id: getTrad('settings.form.responsiveDimensions.description'),\r\n                          defaultMessage:\r\n                            'Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset.',\r\n                        })}\r\n                        name=\"responsiveDimensions\"\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: getTrad('settings.form.responsiveDimensions.label'),\r\n                            defaultMessage: 'Responsive friendly upload',\r\n                          })}\r\n                        </Field.Label>\r\n                        <Toggle\r\n                          checked={modifiedData?.responsiveDimensions}\r\n                          offLabel={formatMessage({\r\n                            id: 'app.components.ToggleCheckbox.off-label',\r\n                            defaultMessage: 'Off',\r\n                          })}\r\n                          onLabel={formatMessage({\r\n                            id: 'app.components.ToggleCheckbox.on-label',\r\n                            defaultMessage: 'On',\r\n                          })}\r\n                          onChange={(e) => {\r\n                            handleChange({\r\n                              target: { name: 'responsiveDimensions', value: e.target.checked },\r\n                            });\r\n                          }}\r\n                        />\r\n                        <Field.Hint />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        hint={formatMessage({\r\n                          id: getTrad('settings.form.sizeOptimization.description'),\r\n                          defaultMessage:\r\n                            'Enabling this option will reduce the image size and slightly reduce its quality.',\r\n                        })}\r\n                        name=\"sizeOptimization\"\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: getTrad('settings.form.sizeOptimization.label'),\r\n                            defaultMessage: 'Size optimization',\r\n                          })}\r\n                        </Field.Label>\r\n                        <Toggle\r\n                          checked={modifiedData?.sizeOptimization}\r\n                          offLabel={formatMessage({\r\n                            id: 'app.components.ToggleCheckbox.off-label',\r\n                            defaultMessage: 'Off',\r\n                          })}\r\n                          onLabel={formatMessage({\r\n                            id: 'app.components.ToggleCheckbox.on-label',\r\n                            defaultMessage: 'On',\r\n                          })}\r\n                          onChange={(e) => {\r\n                            handleChange({\r\n                              target: { name: 'sizeOptimization', value: e.target.checked },\r\n                            });\r\n                          }}\r\n                        />\r\n                        <Field.Hint />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        hint={formatMessage({\r\n                          id: getTrad('settings.form.autoOrientation.description'),\r\n                          defaultMessage:\r\n                            'Enabling this option will automatically rotate the image according to EXIF orientation tag.',\r\n                        })}\r\n                        name=\"autoOrientation\"\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: getTrad('settings.form.autoOrientation.label'),\r\n                            defaultMessage: 'Auto orientation',\r\n                          })}\r\n                        </Field.Label>\r\n                        <Toggle\r\n                          checked={modifiedData?.autoOrientation}\r\n                          offLabel={formatMessage({\r\n                            id: 'app.components.ToggleCheckbox.off-label',\r\n                            defaultMessage: 'Off',\r\n                          })}\r\n                          onLabel={formatMessage({\r\n                            id: 'app.components.ToggleCheckbox.on-label',\r\n                            defaultMessage: 'On',\r\n                          })}\r\n                          onChange={(e) => {\r\n                            handleChange({\r\n                              target: { name: 'autoOrientation', value: e.target.checked },\r\n                            });\r\n                          }}\r\n                        />\r\n                        <Field.Hint />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                  </Grid.Root>\r\n                </Flex>\r\n              </Box>\r\n            </Flex>\r\n          </Layouts.Root>\r\n        </Layouts.Content>\r\n      </form>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nexport const ProtectedSettingsPage = () => (\r\n  <Page.Protect permissions={PERMISSIONS.settings}>\r\n    <SettingsPage />\r\n  </Page.Protect>\r\n);\r\n"],"names":["initialState","data"],"mappings":"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"}