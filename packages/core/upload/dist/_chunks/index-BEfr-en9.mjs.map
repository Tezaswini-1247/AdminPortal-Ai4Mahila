{"version":3,"file":"index-BEfr-en9.mjs","sources":["../../admin/src/pluginId.ts","../../admin/src/hooks/useAssets.ts","../../admin/src/hooks/useFolders.ts","../../admin/src/utils/appendSearchParamsToUrl.ts","../../admin/src/utils/containsAssetFilter.ts","../../admin/src/utils/prefixFileUrlWithBackendUrl.ts","../../admin/src/utils/createAssetUrl.ts","../../admin/src/utils/displayedFilters.ts","../../admin/src/utils/downloadFile.ts","../../admin/src/utils/findRecursiveFolderByValue.ts","../../admin/src/utils/formatBytes.ts","../../admin/src/utils/formatDuration.ts","../../admin/src/utils/toSingularTypes.ts","../../admin/src/utils/getAllowedFiles.ts","../../admin/src/utils/normalizeAPIError.ts","../../admin/src/utils/getAPIInnerErrors.ts","../../admin/src/utils/getTrad.ts","../../admin/src/utils/getBreadcrumbDataCM.ts","../../admin/src/utils/getFolderURL.ts","../../admin/src/utils/getFileExtension.ts","../../admin/src/components/SelectTree/utils/flattenTree.ts","../../admin/src/utils/getFolderParents.ts","../../admin/src/utils/moveElement.ts","../../admin/src/utils/prefixPluginTranslations.ts","../../admin/src/utils/typeFromMime.ts","../../admin/src/utils/rawFileToAsset.ts","../../admin/src/utils/urlsToAssets.ts","../../admin/src/utils/urlYupSchema.ts","../../admin/src/constants.ts","../../admin/src/hooks/useMediaLibraryPermissions.ts","../../admin/src/hooks/useConfig.ts","../../admin/src/hooks/useModalQueryParams.ts","../../admin/src/hooks/useSelectionState.ts","../../admin/src/hooks/useEditAsset.ts","../../admin/src/hooks/utils/renameKeys.ts","../../admin/src/hooks/useFolderStructure.ts","../../admin/src/components/ContextInfo/ContextInfo.tsx","../../admin/src/components/SelectTree/Option.tsx","../../admin/src/components/SelectTree/utils/getOpenValues.ts","../../admin/src/components/SelectTree/utils/getValuesToClose.ts","../../admin/src/components/SelectTree/SelectTree.tsx","../../admin/src/components/EditAssetDialog/DialogHeader.tsx","../../admin/src/hooks/useCropImg.ts","../../admin/src/hooks/useUpload.ts","../../admin/src/components/CopyLinkButton/CopyLinkButton.tsx","../../admin/src/components/UploadProgress/UploadProgress.tsx","../../admin/src/hooks/useRemoveAsset.ts","../../admin/src/components/EditAssetDialog/RemoveAssetDialog.tsx","../../admin/src/hooks/usePersistentState.ts","../../admin/src/components/EditAssetDialog/PreviewBox/AssetPreview.tsx","../../admin/src/components/EditAssetDialog/PreviewBox/PreviewComponents.tsx","../../admin/src/components/EditAssetDialog/PreviewBox/CroppingActions.tsx","../../admin/src/components/EditAssetDialog/PreviewBox/PreviewBox.tsx","../../admin/src/components/EditAssetDialog/ReplaceMediaButton.tsx","../../admin/src/components/EditAssetDialog/EditAssetContent.tsx","../../admin/src/hooks/useBulkRemove.ts","../../admin/src/hooks/useEditFolder.ts","../../admin/src/components/EditFolderDialog/ModalHeader/ModalHeader.tsx","../../admin/src/components/EditFolderDialog/RemoveFolderDialog.tsx","../../admin/src/components/EditFolderDialog/EditFolderDialog.tsx","../../admin/src/hooks/useFolder.ts","../../admin/src/components/AssetCard/AssetCardBase.tsx","../../admin/src/components/AssetCard/AudioPreview.tsx","../../admin/src/components/AssetCard/AudioAssetCard.tsx","../../admin/src/components/AssetCard/DocAssetCard.tsx","../../admin/src/components/AssetCard/ImageAssetCard.tsx","../../admin/src/components/AssetCard/VideoPreview.tsx","../../admin/src/components/AssetCard/VideoAssetCard.tsx","../../admin/src/components/AssetCard/AssetCard.tsx","../../admin/src/components/AssetGridList/Draggable.tsx","../../admin/src/components/AssetGridList/AssetGridList.tsx","../../admin/src/components/Breadcrumbs/CrumbSimpleMenuAsync.tsx","../../admin/src/components/Breadcrumbs/Breadcrumbs.tsx","../../admin/src/components/EmptyAssets/EmptyAssetGrid.tsx","../../admin/src/components/EmptyAssets/EmptyAssets.tsx","../../admin/src/components/FolderCard/contexts/FolderCard.tsx","../../admin/src/components/FolderCard/FolderCard/FolderCard.tsx","../../admin/src/components/FolderCard/FolderCardBody/FolderCardBody.tsx","../../admin/src/components/FolderCard/FolderCardBodyAction/FolderCardBodyAction.tsx","../../admin/src/components/FolderGridList/FolderGridList.tsx","../../admin/src/components/SortPicker/SortPicker.tsx","../../admin/src/components/TableList/PreviewCell.tsx","../../admin/src/components/TableList/CellContent.tsx","../../admin/src/components/TableList/TableRows.tsx","../../admin/src/components/TableList/TableList.tsx","../../admin/src/components/FilterList/FilterTag.tsx","../../admin/src/components/FilterList/FilterList.tsx","../../admin/src/components/FilterPopover/FilterValueInput.tsx","../../admin/src/components/FilterPopover/utils/getFilterList.ts","../../admin/src/components/FilterPopover/FilterPopover.tsx","../../admin/src/components/AssetDialog/BrowseStep/Filters.tsx","../../admin/src/components/AssetDialog/BrowseStep/PageSize.tsx","../../admin/src/components/AssetDialog/BrowseStep/PaginationFooter/Pagination.tsx","../../admin/src/components/AssetDialog/BrowseStep/PaginationFooter/PaginationFooter.tsx","../../admin/src/components/AssetDialog/BrowseStep/SearchAsset/SearchAsset.tsx","../../admin/src/components/AssetDialog/BrowseStep/utils/isSelectable.ts","../../admin/src/components/AssetDialog/BrowseStep/BrowseStep.tsx","../../admin/src/components/AssetDialog/DialogFooter.tsx","../../admin/src/components/AssetDialog/SelectedStep/SelectedStep.tsx","../../admin/src/components/AssetDialog/AssetDialog.tsx","../../admin/src/components/UploadAssetDialog/AddAssetStep/FromComputerForm.tsx","../../admin/src/components/UploadAssetDialog/AddAssetStep/FromUrlForm.tsx","../../admin/src/components/UploadAssetDialog/AddAssetStep/AddAssetStep.tsx","../../admin/src/components/AssetCard/UploadingAssetCard.tsx","../../admin/src/components/UploadAssetDialog/PendingAssetStep/PendingAssetStep.tsx","../../admin/src/components/UploadAssetDialog/UploadAssetDialog.tsx","../../admin/src/components/MediaLibraryDialog/MediaLibraryDialog.tsx","../../admin/src/components/MediaLibraryInput/Carousel/CarouselAsset.tsx","../../admin/src/components/MediaLibraryInput/Carousel/CarouselAssetActions.tsx","../../admin/src/components/MediaLibraryInput/Carousel/EmptyStateAsset.tsx","../../admin/src/components/MediaLibraryInput/Carousel/CarouselAssets.tsx","../../admin/src/components/MediaLibraryInput/MediaLibraryInput.tsx","../../admin/src/index.ts"],"sourcesContent":["import pluginPkg from '../../package.json';\r\n\r\nexport const pluginId = pluginPkg.name.replace(/^@strapi\\//i, '');\r\n","import * as React from 'react';\r\n\r\nimport { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useNotifyAT } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { Query, GetFiles } from '../../../shared/contracts/files';\r\nimport { pluginId } from '../pluginId';\r\n\r\ninterface UseAssetsOptions {\r\n  skipWhen?: boolean;\r\n  query?: Query;\r\n}\r\n\r\nexport const useAssets = ({ skipWhen = false, query = {} }: UseAssetsOptions = {}) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { notifyStatus } = useNotifyAT();\r\n  const { get } = useFetchClient();\r\n  const { folderPath, _q, ...paramsExceptFolderAndQ } = query;\r\n\r\n  let params: Query;\r\n\r\n  if (_q) {\r\n    params = {\r\n      ...paramsExceptFolderAndQ,\r\n      _q: encodeURIComponent(_q),\r\n    };\r\n  } else {\r\n    params = {\r\n      ...paramsExceptFolderAndQ,\r\n      filters: {\r\n        $and: [\r\n          ...(paramsExceptFolderAndQ?.filters?.$and ?? []),\r\n          {\r\n            folderPath: { $eq: folderPath ?? '/' },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  const { data, error, isLoading } = useQuery<\r\n    GetFiles.Response['data'],\r\n    GetFiles.Response['error']\r\n  >(\r\n    [pluginId, 'assets', params],\r\n    async () => {\r\n      const { data } = await get('/upload/files', { params });\r\n\r\n      return data;\r\n    },\r\n    {\r\n      enabled: !skipWhen,\r\n      staleTime: 0,\r\n      cacheTime: 0,\r\n      select(data) {\r\n        if (data?.results && Array.isArray(data.results)) {\r\n          return {\r\n            ...data,\r\n            results: data.results\r\n              /**\r\n               * Filter out assets that don't have a name.\r\n               * So we don't try to render them as assets\r\n               * and get errors.\r\n               */\r\n              .filter((asset) => asset.name)\r\n              .map((asset) => ({\r\n                ...asset,\r\n                /**\r\n                 * Mime and ext cannot be null in the front-end because\r\n                 * we expect them to be strings and use the `includes` method.\r\n                 */\r\n                mime: asset.mime ?? '',\r\n                ext: asset.ext ?? '',\r\n              })),\r\n          };\r\n        }\r\n\r\n        return data;\r\n      },\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: 'list.asset.at.finished',\r\n          defaultMessage: 'The assets have finished loading.',\r\n        })\r\n      );\r\n    }\r\n  }, [data, formatMessage, notifyStatus]);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error' }),\r\n      });\r\n    }\r\n  }, [error, formatMessage, toggleNotification]);\r\n\r\n  return { data, error, isLoading };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useNotifyAT } from '@strapi/design-system';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { GetFolders } from '../../../shared/contracts/folders';\r\nimport { pluginId } from '../pluginId';\r\n\r\nimport type { Query } from '../../../shared/contracts/files';\r\n\r\ninterface UseFoldersOptions {\r\n  enabled?: boolean;\r\n  query?: Query;\r\n}\r\n\r\nexport const useFolders = ({ enabled = true, query = {} }: UseFoldersOptions = {}) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { notifyStatus } = useNotifyAT();\r\n  const { folder, _q, ...paramsExceptFolderAndQ } = query;\r\n  const { get } = useFetchClient();\r\n\r\n  let params: Query;\r\n\r\n  if (_q) {\r\n    params = {\r\n      ...paramsExceptFolderAndQ,\r\n      pagination: {\r\n        pageSize: -1,\r\n      },\r\n      _q,\r\n    };\r\n  } else {\r\n    params = {\r\n      ...paramsExceptFolderAndQ,\r\n      pagination: {\r\n        pageSize: -1,\r\n      },\r\n      filters: {\r\n        $and: [\r\n          ...(paramsExceptFolderAndQ?.filters?.$and ?? []),\r\n          {\r\n            parent: {\r\n              id: folder ?? {\r\n                $null: true,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  const { data, error, isLoading } = useQuery<\r\n    GetFolders.Response['data'],\r\n    GetFolders.Response['error']\r\n  >(\r\n    [pluginId, 'folders', stringify(params)],\r\n    async () => {\r\n      const {\r\n        data: { data },\r\n      } = await get<GetFolders.Response>('/upload/folders', { params });\r\n\r\n      return data;\r\n    },\r\n    {\r\n      enabled,\r\n      staleTime: 0,\r\n      cacheTime: 0,\r\n      onError() {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error' }),\r\n        });\r\n      },\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: 'list.asset.at.finished',\r\n          defaultMessage: 'The folders have finished loading.',\r\n        })\r\n      );\r\n    }\r\n  }, [data, formatMessage, notifyStatus]);\r\n\r\n  return { data, error, isLoading };\r\n};\r\n","interface AppendSearchParamsToUrlProps {\r\n  url?: string;\r\n  params?: Record<string, string | null | undefined> | string;\r\n}\r\n\r\nconst appendSearchParamsToUrl = ({ url, params }: AppendSearchParamsToUrlProps) => {\r\n  if (url === undefined || typeof params !== 'object') {\r\n    return url;\r\n  }\r\n\r\n  const urlObj = new URL(url, window.strapi.backendURL);\r\n\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (value !== undefined && value !== null) {\r\n      urlObj.searchParams.append(key, value);\r\n    }\r\n  });\r\n\r\n  return urlObj.toString();\r\n};\r\n\r\nexport { appendSearchParamsToUrl };\r\n","import type { Query } from '../../../shared/contracts/files';\r\n\r\nconst containsMimeTypeFilter = (query: Query | null) => {\r\n  const filters = query?.filters?.$and;\r\n\r\n  if (!filters) {\r\n    return false;\r\n  }\r\n\r\n  const result = filters.find((filter) => {\r\n    return Object.keys(filter).includes('mime');\r\n  });\r\n\r\n  return !!result;\r\n};\r\n\r\nexport const containsAssetFilter = (query: Query | null) => {\r\n  return containsMimeTypeFilter(query);\r\n};\r\n","export const prefixFileUrlWithBackendUrl = (fileURL?: string) => {\r\n  return !!fileURL && fileURL.startsWith('/') ? `${window.strapi.backendURL}${fileURL}` : fileURL;\r\n};\r\n","import { prefixFileUrlWithBackendUrl } from './prefixFileUrlWithBackendUrl';\r\n\r\nimport type { File } from '../../../shared/contracts/files';\r\n\r\nexport const createAssetUrl = (asset: File, forThumbnail = true) => {\r\n  if (asset.isLocal) {\r\n    return asset.url;\r\n  }\r\n\r\n  const assetUrl = forThumbnail ? asset?.formats?.thumbnail?.url || asset.url : asset.url;\r\n\r\n  return prefixFileUrlWithBackendUrl(assetUrl);\r\n};\r\n","export const displayedFilters = [\r\n  {\r\n    name: 'createdAt',\r\n    fieldSchema: {\r\n      type: 'date',\r\n    },\r\n    metadatas: { label: 'createdAt' },\r\n  },\r\n  {\r\n    name: 'updatedAt',\r\n    fieldSchema: {\r\n      type: 'date',\r\n    },\r\n    metadatas: { label: 'updatedAt' },\r\n  },\r\n  {\r\n    name: 'mime',\r\n    fieldSchema: {\r\n      type: 'enumeration',\r\n      options: [\r\n        { label: 'audio', value: 'audio' },\r\n        { label: 'file', value: 'file' },\r\n        { label: 'image', value: 'image' },\r\n        { label: 'video', value: 'video' },\r\n      ],\r\n    },\r\n    metadatas: { label: 'type' },\r\n  },\r\n];\r\n","export const downloadFile = async (url: string, fileName: string) => {\r\n  const fileBlob = await fetch(url).then((res) => res.blob());\r\n  const urlDownload = window.URL.createObjectURL(fileBlob);\r\n  const link = document.createElement('a');\r\n\r\n  link.href = urlDownload;\r\n  link.setAttribute('download', fileName);\r\n  link.click();\r\n};\r\n","import type { FolderNode } from '../../../shared/contracts/folders';\r\n\r\ninterface FolderStructureValue extends Omit<FolderNode, 'children'> {\r\n  value?: string | number | null;\r\n  children?: FolderStructureValue[];\r\n  label?: string;\r\n}\r\n\r\ntype Value = number | null | { value: number | null };\r\n\r\nexport function findRecursiveFolderByValue(\r\n  data: FolderStructureValue[],\r\n  value: Value\r\n): FolderStructureValue | undefined {\r\n  let result: FolderStructureValue | undefined;\r\n\r\n  function iter(a: FolderStructureValue) {\r\n    if (a.value === value) {\r\n      result = a;\r\n\r\n      return true;\r\n    }\r\n\r\n    return Array.isArray(a.children) && a.children.some(iter);\r\n  }\r\n\r\n  data.some(iter);\r\n\r\n  return result;\r\n}\r\n","import byteSize from 'byte-size';\r\n\r\nexport function formatBytes(receivedBytes: number | string, decimals = 0) {\r\n  const realBytes = typeof receivedBytes === 'string' ? Number(receivedBytes) : receivedBytes;\r\n  const { value, unit } = byteSize(realBytes * 1000, { precision: decimals });\r\n\r\n  if (!unit) {\r\n    return '0B';\r\n  }\r\n\r\n  return `${value}${unit.toUpperCase()}`;\r\n}\r\n","import { intervalToDuration } from 'date-fns';\r\n\r\nconst zeroPad = (num?: number) => String(num).padStart(2, '0');\r\n\r\nexport const formatDuration = (durationInSecond: number) => {\r\n  const duration = intervalToDuration({ start: 0, end: durationInSecond * 1000 });\r\n\r\n  return `${zeroPad(duration.hours)}:${zeroPad(duration.minutes)}:${zeroPad(duration.seconds)}`;\r\n};\r\n","export const toSingularTypes = (types?: string[]) => {\r\n  if (!types) {\r\n    return [];\r\n  }\r\n\r\n  return types.map((type) => type.substring(0, type.length - 1));\r\n};\r\n","import { toSingularTypes } from './toSingularTypes';\r\n\r\nimport type { File } from '../../../shared/contracts/files';\r\n/**\r\n * Returns the files that can be added to the media field\r\n * @param {Object[]} pluralTypes Array of string (allowedTypes)\r\n * @param {Object[]} files Array of files\r\n * @returns Object[]\r\n */\r\n\r\nexport interface AllowedFiles extends File {\r\n  documentId: string;\r\n  isSelectable: boolean;\r\n  locale: string | null;\r\n  type: string;\r\n}\r\n\r\nexport const getAllowedFiles = (pluralTypes: string[], files: AllowedFiles[]) => {\r\n  const singularTypes = toSingularTypes(pluralTypes);\r\n\r\n  const allowedFiles = files.filter((file) => {\r\n    const fileType = file?.mime?.split('/')[0];\r\n\r\n    if (!fileType) {\r\n      return false;\r\n    }\r\n\r\n    if (singularTypes.includes('file') && !['video', 'image', 'audio'].includes(fileType)) {\r\n      return true;\r\n    }\r\n\r\n    return singularTypes.includes(fileType);\r\n  });\r\n\r\n  return allowedFiles;\r\n};\r\n","import type { FetchError } from '@strapi/admin/strapi-admin';\r\nimport type { errors } from '@strapi/utils';\r\n\r\ntype ApiError = InstanceType<(typeof errors)[keyof typeof errors]>;\r\n\r\ninterface NormalizeErrorOptions {\r\n  name?: string;\r\n  intlMessagePrefixCallback?: (id: string) => string;\r\n}\r\n\r\ninterface NormalizeErrorReturn {\r\n  id: string;\r\n  defaultMessage: string;\r\n  name?: string;\r\n  values: Record<'path', string> | Record<string, never>;\r\n}\r\n\r\ninterface YupFormattedError {\r\n  path: string[];\r\n  message: string;\r\n  name: string;\r\n}\r\n\r\nfunction getPrefixedId(message: string, callback?: (prefixedMessage: string) => string) {\r\n  const prefixedMessage = `apiError.${message}`;\r\n\r\n  // if a prefix function has been passed in it is used to\r\n  // prefix the id, e.g. to allow an error message to be\r\n  // set only for a localization namespace\r\n  if (typeof callback === 'function') {\r\n    return callback(prefixedMessage);\r\n  }\r\n\r\n  return prefixedMessage;\r\n}\r\n\r\nfunction normalizeError(\r\n  error: ApiError | YupFormattedError,\r\n  { name, intlMessagePrefixCallback }: NormalizeErrorOptions\r\n): NormalizeErrorReturn {\r\n  const { message } = error;\r\n\r\n  const normalizedError = {\r\n    id: getPrefixedId(message, intlMessagePrefixCallback),\r\n    defaultMessage: message,\r\n    name: error.name ?? name,\r\n    values: {},\r\n  };\r\n\r\n  if ('path' in error) {\r\n    normalizedError.values = { path: error.path.join('.') };\r\n  }\r\n\r\n  return normalizedError;\r\n}\r\n\r\nconst validateErrorIsYupValidationError = (\r\n  err: ApiError\r\n): err is errors.YupValidationError & { details: { errors: YupFormattedError[] } } =>\r\n  typeof err.details === 'object' && err.details !== null && 'errors' in err.details;\r\n\r\n/**\r\n * Normalize the format of `ResponseError`\r\n * in places where the hook `useAPIErrorHandler` can not called\r\n * (e.g. outside of a React component).\r\n */\r\nexport function normalizeAPIError(\r\n  apiError: FetchError,\r\n  intlMessagePrefixCallback?: NormalizeErrorOptions['intlMessagePrefixCallback']\r\n):\r\n  | NormalizeErrorReturn\r\n  | { name: string; message: string | null; errors: NormalizeErrorReturn[] }\r\n  | null {\r\n  const error = apiError.response?.data.error;\r\n\r\n  if (error) {\r\n    // some errors carry multiple errors (such as ValidationError)\r\n    if (validateErrorIsYupValidationError(error)) {\r\n      return {\r\n        name: error.name,\r\n        message: error?.message || null,\r\n        errors: error.details.errors.map((err) =>\r\n          normalizeError(err, { name: error.name, intlMessagePrefixCallback })\r\n        ),\r\n      };\r\n    }\r\n\r\n    return normalizeError(error, { intlMessagePrefixCallback });\r\n  }\r\n\r\n  return null;\r\n}\r\n","import { normalizeAPIError } from './normalizeAPIError';\r\n\r\nimport type { FetchError } from '@strapi/admin/strapi-admin';\r\nimport type { MessageDescriptor } from 'react-intl';\r\n\r\ntype GetAPIInnerErrorsReturn = {\r\n  [key: string]: MessageDescriptor;\r\n};\r\n\r\n/**\r\n *\r\n * Returns a normalized error message\r\n *\r\n */\r\nexport function getAPIInnerErrors(\r\n  error: FetchError,\r\n  { getTrad }: { getTrad: (key: string) => string }\r\n) {\r\n  const normalizedError = normalizeAPIError(error, getTrad);\r\n\r\n  if (normalizedError && 'errors' in normalizedError) {\r\n    return normalizedError.errors.reduce<GetAPIInnerErrorsReturn>((acc, error) => {\r\n      if ('path' in error.values) {\r\n        acc[error.values.path] = {\r\n          id: error.id,\r\n          defaultMessage: error.defaultMessage,\r\n        };\r\n      }\r\n\r\n      return acc;\r\n    }, {});\r\n  }\r\n\r\n  return normalizedError?.defaultMessage;\r\n}\r\n","import { pluginId } from '../pluginId';\r\n\r\nexport const getTrad = (id: string) => `${pluginId}.${id}`;\r\n","import { getTrad } from './getTrad';\r\n\r\nimport type { Folder } from '../../../shared/contracts/folders';\r\nimport type { MessageDescriptor } from 'react-intl';\r\n\r\nexport interface BreadcrumbDataFolder extends Omit<Folder, 'children' | 'files' | 'parent'> {\r\n  parent?: BreadcrumbDataFolder;\r\n  children?: {\r\n    count: number;\r\n  };\r\n  files?: {\r\n    count: number;\r\n  };\r\n}\r\n\r\ninterface BreadcrumbItem {\r\n  id?: number | null;\r\n  label?: MessageDescriptor | string;\r\n  path?: string;\r\n}\r\n\r\ntype BreadcrumbData = BreadcrumbItem | [];\r\n\r\nexport const getBreadcrumbDataCM = (folder: BreadcrumbDataFolder | null) => {\r\n  const data: BreadcrumbData[] = [\r\n    {\r\n      id: null,\r\n      label: { id: getTrad('plugin.name'), defaultMessage: 'Media Library' },\r\n    },\r\n  ];\r\n\r\n  if (folder?.parent?.parent) {\r\n    data.push([]);\r\n  }\r\n\r\n  if (folder?.parent) {\r\n    data.push({\r\n      id: folder.parent.id,\r\n      label: folder.parent.name,\r\n      path: folder.parent.path,\r\n    });\r\n  }\r\n\r\n  if (folder) {\r\n    data.push({\r\n      id: folder.id,\r\n      label: folder.name,\r\n      path: folder.path,\r\n    });\r\n  }\r\n\r\n  return data;\r\n};\r\n","import { stringify } from 'qs';\r\n\r\nimport type { Query } from '../../../shared/contracts/files';\r\n\r\nexport const getFolderURL = (\r\n  pathname: string,\r\n  currentQuery: Query,\r\n  { folder, folderPath }: { folder?: string; folderPath?: string } = {}\r\n) => {\r\n  const { _q, ...queryParamsWithoutQ } = currentQuery;\r\n  const queryParamsString = stringify(\r\n    {\r\n      ...queryParamsWithoutQ,\r\n      folder,\r\n      folderPath,\r\n    },\r\n    { encode: false }\r\n  );\r\n\r\n  // Search query will always fetch the same results\r\n  // we remove it here to allow navigating in a folder and see the result of this navigation\r\n  return `${pathname}${queryParamsString ? `?${queryParamsString}` : ''}`;\r\n};\r\n","export const getFileExtension = (ext?: string | null) =>\r\n  ext && ext[0] === '.' ? ext.substring(1) : ext;\r\n","type TreeNode<T> = {\r\n  value: T;\r\n  children?: TreeNode<T>[];\r\n  label?: string;\r\n};\r\n\r\nexport type FlattenedNode<T> = {\r\n  value: T;\r\n  parent?: T;\r\n  depth: number;\r\n  // we need the label in places where flattenTree is used\r\n  label?: string;\r\n  children?: TreeNode<T>[];\r\n};\r\n\r\nexport function flattenTree<T>(\r\n  tree: TreeNode<T>[],\r\n  parent: TreeNode<T> | null = null,\r\n  depth: number = 0\r\n): FlattenedNode<T>[] {\r\n  return tree.flatMap((item) =>\r\n    item.children\r\n      ? [{ ...item, parent: parent?.value, depth }, ...flattenTree(item.children, item, depth + 1)]\r\n      : { ...item, depth, parent: parent?.value }\r\n  );\r\n}\r\n","import { flattenTree } from '../components/SelectTree/utils/flattenTree';\r\n\r\nimport type { FolderNode } from '../../../shared/contracts/folders';\r\n\r\ninterface FolderStructureValue extends Omit<FolderNode, 'children'> {\r\n  value: string | number | null;\r\n  children?: FolderStructureValue[];\r\n}\r\n\r\ntype Parents = { id?: number | string | null; label?: string; path?: string }[];\r\n\r\nexport const getFolderParents = (folders: FolderStructureValue[], currentFolderId: number) => {\r\n  const parents: Parents = [];\r\n  const flatFolders = flattenTree(folders);\r\n  const currentFolder = flatFolders.find((folder) => folder.value === currentFolderId);\r\n\r\n  if (!currentFolder) {\r\n    return [];\r\n  }\r\n\r\n  let { parent } = currentFolder;\r\n\r\n  while (parent !== undefined) {\r\n    // eslint-disable-next-line no-loop-func\r\n    const parentToStore = flatFolders.find(({ value }) => value === parent);\r\n    parents.push({ id: parentToStore?.value, label: parentToStore?.label });\r\n    parent = parentToStore?.parent;\r\n  }\r\n\r\n  return parents.reverse();\r\n};\r\n","const move = <T = number>(array: T[], oldIndex: number, newIndex: number) => {\r\n  if (newIndex >= array.length) {\r\n    newIndex = array.length - 1;\r\n  }\r\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\r\n\r\n  return array;\r\n};\r\n\r\nexport const moveElement = <T = number>(array: T[], index: number, offset: number) => {\r\n  const newIndex = index + offset;\r\n\r\n  return move(array, index, newIndex);\r\n};\r\n","type Translations = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport const prefixPluginTranslations = (trad: Translations, pluginId?: string) => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n\r\n  return Object.keys(trad).reduce((acc: Translations, current: string) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n","import { AssetType } from '../constants';\r\n\r\nexport const typeFromMime = (mime: string) => {\r\n  if (mime.includes(AssetType.Image)) {\r\n    return AssetType.Image;\r\n  }\r\n  if (mime.includes(AssetType.Video)) {\r\n    return AssetType.Video;\r\n  }\r\n  if (mime.includes(AssetType.Audio)) {\r\n    return AssetType.Audio;\r\n  }\r\n\r\n  return AssetType.Document;\r\n};\r\n","import { AssetSource } from '../constants';\r\n\r\nimport { typeFromMime } from './typeFromMime';\r\n\r\nimport type { RawFile } from '../../../shared/contracts/files';\r\n\r\nexport const rawFileToAsset = (rawFile: RawFile, assetSource: AssetSource) => {\r\n  return {\r\n    size: rawFile.size / 1000,\r\n    createdAt: new Date(rawFile.lastModified).toISOString(),\r\n    name: rawFile.name,\r\n    source: assetSource,\r\n    type: typeFromMime(rawFile.type),\r\n    url: URL.createObjectURL(rawFile),\r\n    ext: rawFile.name.split('.').pop(),\r\n    mime: rawFile.type,\r\n    rawFile,\r\n    isLocal: true,\r\n  };\r\n};\r\n","import { AssetSource } from '../constants';\r\n\r\nimport { typeFromMime } from './typeFromMime';\r\n\r\nfunction getFilenameFromURL(url: string) {\r\n  return new URL(url).pathname.split('/').pop();\r\n}\r\n\r\nexport const urlsToAssets = async (urls: string[]) => {\r\n  const assetPromises = urls.map((url) =>\r\n    fetch(url).then(async (res) => {\r\n      const blob = await res.blob();\r\n\r\n      const loadedFile = new File([blob], getFilenameFromURL(res.url)!, {\r\n        type: res.headers.get('content-type') || undefined,\r\n      });\r\n\r\n      return {\r\n        name: loadedFile.name,\r\n        url: res.url,\r\n        mime: res.headers.get('content-type'),\r\n        rawFile: loadedFile,\r\n      };\r\n    })\r\n  );\r\n  // Retrieve the assets metadata\r\n  const assetsResults = await Promise.all(assetPromises);\r\n\r\n  const assets = assetsResults.map((fullFilledAsset) => ({\r\n    source: AssetSource.Url,\r\n    name: fullFilledAsset.name,\r\n    type: typeFromMime(fullFilledAsset.mime!),\r\n    url: fullFilledAsset.url,\r\n    ext: fullFilledAsset.url.split('.').pop(),\r\n    mime: fullFilledAsset.mime ? fullFilledAsset.mime : undefined,\r\n    rawFile: fullFilledAsset.rawFile,\r\n  }));\r\n\r\n  return assets;\r\n};\r\n","import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\r\nimport * as yup from 'yup';\r\n\r\nimport { getTrad } from './getTrad';\r\n\r\nexport const urlSchema = yup.object().shape({\r\n  urls: yup.string().test({\r\n    name: 'isUrlValid',\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    message: '${path}',\r\n    test(values = '') {\r\n      const urls = values.split(/\\r?\\n/);\r\n\r\n      if (urls.length === 0) {\r\n        return this.createError({\r\n          path: this.path,\r\n          message: errorsTrads.min.id,\r\n        });\r\n      }\r\n\r\n      if (urls.length > 20) {\r\n        return this.createError({\r\n          path: this.path,\r\n          message: errorsTrads.max.id,\r\n        });\r\n      }\r\n\r\n      const filtered = urls.filter((val) => {\r\n        try {\r\n          // eslint-disable-next-line no-new\r\n          new URL(val);\r\n\r\n          return false;\r\n        } catch (err) {\r\n          // invalid url\r\n          return true;\r\n        }\r\n      });\r\n\r\n      const filteredLength = filtered.length;\r\n\r\n      if (filteredLength === 0) {\r\n        return true;\r\n      }\r\n\r\n      const errorMessage =\r\n        filteredLength > 1\r\n          ? 'form.upload-url.error.url.invalids'\r\n          : 'form.upload-url.error.url.invalid';\r\n\r\n      return this.createError({\r\n        path: this.path,\r\n        message: getTrad(errorMessage),\r\n        params: { number: filtered.length },\r\n      });\r\n    },\r\n  }),\r\n});\r\n","import { getTrad } from './utils';\r\n\r\nexport enum AssetType {\r\n  Video = 'video',\r\n  Image = 'image',\r\n  Document = 'doc',\r\n  Audio = 'audio',\r\n}\r\n\r\nexport enum AssetSource {\r\n  Url = 'url',\r\n  Computer = 'computer',\r\n}\r\n\r\nexport const PERMISSIONS = {\r\n  // This permission regards the main component (App) and is used to tell\r\n  // If the plugin link should be displayed in the menu\r\n  // And also if the plugin is accessible. This use case is found when a user types the url of the\r\n  // plugin directly in the browser\r\n  main: [\r\n    { action: 'plugin::upload.read', subject: null },\r\n    {\r\n      action: 'plugin::upload.assets.create',\r\n      subject: null,\r\n    },\r\n    {\r\n      action: 'plugin::upload.assets.update',\r\n      subject: null,\r\n    },\r\n  ],\r\n  copyLink: [\r\n    {\r\n      action: 'plugin::upload.assets.copy-link',\r\n      subject: null,\r\n    },\r\n  ],\r\n  create: [\r\n    {\r\n      action: 'plugin::upload.assets.create',\r\n      subject: null,\r\n    },\r\n  ],\r\n  download: [\r\n    {\r\n      action: 'plugin::upload.assets.download',\r\n      subject: null,\r\n    },\r\n  ],\r\n  read: [{ action: 'plugin::upload.read', subject: null }],\r\n  configureView: [{ action: 'plugin::upload.configure-view', subject: null }],\r\n  settings: [{ action: 'plugin::upload.settings.read', subject: null }],\r\n  update: [{ action: 'plugin::upload.assets.update', subject: null, fields: null }],\r\n};\r\n\r\nexport const tableHeaders = [\r\n  {\r\n    name: 'preview',\r\n    key: 'preview',\r\n    metadatas: {\r\n      label: { id: getTrad('list.table.header.preview'), defaultMessage: 'preview' },\r\n      isSortable: false,\r\n    },\r\n    type: 'image',\r\n  },\r\n  {\r\n    name: 'name',\r\n    key: 'name',\r\n    metadatas: {\r\n      label: { id: getTrad('list.table.header.name'), defaultMessage: 'name' },\r\n      isSortable: true,\r\n    },\r\n    type: 'text',\r\n  },\r\n  {\r\n    name: 'ext',\r\n    key: 'extension',\r\n    metadatas: {\r\n      label: { id: getTrad('list.table.header.ext'), defaultMessage: 'extension' },\r\n      isSortable: false,\r\n    },\r\n    type: 'ext',\r\n  },\r\n  {\r\n    name: 'size',\r\n    key: 'size',\r\n    metadatas: {\r\n      label: { id: getTrad('list.table.header.size'), defaultMessage: 'size' },\r\n      isSortable: false,\r\n    },\r\n    type: 'size',\r\n  },\r\n  {\r\n    name: 'createdAt',\r\n    key: 'createdAt',\r\n    metadatas: {\r\n      label: { id: getTrad('list.table.header.createdAt'), defaultMessage: 'created' },\r\n      isSortable: true,\r\n    },\r\n    type: 'date',\r\n  },\r\n  {\r\n    name: 'updatedAt',\r\n    key: 'updatedAt',\r\n    metadatas: {\r\n      label: { id: getTrad('list.table.header.updatedAt'), defaultMessage: 'last update' },\r\n      isSortable: true,\r\n    },\r\n    type: 'date',\r\n  },\r\n];\r\n\r\nexport const sortOptions = [\r\n  { key: 'sort.created_at_desc', value: 'createdAt:DESC' },\r\n  { key: 'sort.created_at_asc', value: 'createdAt:ASC' },\r\n  { key: 'sort.name_asc', value: 'name:ASC' },\r\n  { key: 'sort.name_desc', value: 'name:DESC' },\r\n  { key: 'sort.updated_at_desc', value: 'updatedAt:DESC' },\r\n  { key: 'sort.updated_at_asc', value: 'updatedAt:ASC' },\r\n];\r\n\r\nexport const pageSizes = [10, 20, 50, 100];\r\n\r\nexport const localStorageKeys = {\r\n  modalView: `STRAPI_UPLOAD_MODAL_VIEW`,\r\n  view: `STRAPI_UPLOAD_LIBRARY_VIEW`,\r\n};\r\n\r\nexport const viewOptions = {\r\n  GRID: 0,\r\n  LIST: 1,\r\n};\r\n","import { useRBAC } from '@strapi/admin/strapi-admin';\r\n\r\nimport { PERMISSIONS } from '../constants';\r\n\r\nconst { main: _main, ...restPermissions } = PERMISSIONS;\r\n\r\ntype UseRBACReturnType = ReturnType<typeof useRBAC>;\r\n\r\ntype AllowedActionsType = UseRBACReturnType['allowedActions'];\r\n\r\nexport const useMediaLibraryPermissions = (): AllowedActionsType & { isLoading: boolean } => {\r\n  const { allowedActions, isLoading } = useRBAC(restPermissions);\r\n\r\n  return { ...allowedActions, isLoading };\r\n};\r\n","import { useTracking, useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQuery, UseMutationResult, UseQueryResult } from 'react-query';\r\n\r\nimport { GetConfiguration, UpdateConfiguration } from '../../../shared/contracts/configuration';\r\nimport { pluginId } from '../pluginId';\r\n\r\nconst endpoint = `/${pluginId}/configuration`;\r\nconst queryKey = [pluginId, 'configuration'];\r\n\r\nexport const useConfig = () => {\r\n  const { trackUsage } = useTracking();\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { get, put } = useFetchClient();\r\n\r\n  const config: UseQueryResult<\r\n    GetConfiguration.Response['data']['data'] | GetConfiguration.Response['error']\r\n  > = useQuery(\r\n    queryKey,\r\n    async () => {\r\n      const res: GetConfiguration.Response = await get(endpoint);\r\n\r\n      return res.data.data;\r\n    },\r\n    {\r\n      onError() {\r\n        return toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error' }),\r\n        });\r\n      },\r\n      /**\r\n       * We're cementing that we always expect an object to be returned.\r\n       */\r\n      select: (data) => data || {},\r\n    }\r\n  );\r\n\r\n  const putMutation: UseMutationResult<\r\n    void,\r\n    UpdateConfiguration.Response['error'],\r\n    UpdateConfiguration.Request['body']\r\n  > = useMutation(\r\n    async (body) => {\r\n      await put<UpdateConfiguration.Response>(endpoint, body);\r\n    },\r\n    {\r\n      onSuccess() {\r\n        trackUsage('didEditMediaLibraryConfig');\r\n        config.refetch();\r\n      },\r\n      onError() {\r\n        return toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error' }),\r\n        });\r\n      },\r\n    }\r\n  );\r\n\r\n  return {\r\n    config,\r\n    mutateConfig: putMutation,\r\n  };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { stringify } from 'qs';\r\n\r\nimport { useConfig } from './useConfig';\r\n\r\nimport type { Query, FilterCondition } from '../../../shared/contracts/files';\r\n\r\nexport const useModalQueryParams = (initialState?: Partial<Query>) => {\r\n  const { trackUsage } = useTracking();\r\n  const {\r\n    config: { data: config },\r\n  } = useConfig();\r\n\r\n  const [queryObject, setQueryObject] = React.useState<Query>({\r\n    page: 1,\r\n    sort: 'updatedAt:DESC',\r\n    pageSize: 10,\r\n    filters: {\r\n      $and: [],\r\n    },\r\n    ...initialState,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (config && 'sort' in config && 'pageSize' in config) {\r\n      setQueryObject((prevQuery) => ({\r\n        ...prevQuery,\r\n        sort: config.sort,\r\n        pageSize: config.pageSize,\r\n      }));\r\n    }\r\n  }, [config]);\r\n\r\n  const handleChangeFilters = (nextFilters: FilterCondition<string>[]) => {\r\n    if (nextFilters) {\r\n      trackUsage('didFilterMediaLibraryElements', {\r\n        location: 'content-manager',\r\n        filter: Object.keys(nextFilters[nextFilters.length - 1])[0],\r\n      });\r\n      setQueryObject((prev) => ({ ...prev, page: 1, filters: { $and: nextFilters } }));\r\n    }\r\n  };\r\n\r\n  const handleChangePageSize = (pageSize: Query['pageSize']) => {\r\n    setQueryObject((prev) => ({\r\n      ...prev,\r\n      pageSize: typeof pageSize === 'string' ? parseInt(pageSize, 10) : pageSize,\r\n      page: 1,\r\n    }));\r\n  };\r\n\r\n  const handeChangePage = (page: Query['page']) => {\r\n    setQueryObject((prev) => ({ ...prev, page }));\r\n  };\r\n\r\n  const handleChangeSort = (sort: Query['sort']) => {\r\n    if (sort) {\r\n      trackUsage('didSortMediaLibraryElements', {\r\n        location: 'content-manager',\r\n        sort,\r\n      });\r\n      setQueryObject((prev) => ({ ...prev, sort }));\r\n    }\r\n  };\r\n\r\n  const handleChangeSearch = (_q: Query['_q'] | null) => {\r\n    if (_q) {\r\n      setQueryObject((prev) => ({ ...prev, _q, page: 1 }));\r\n    } else {\r\n      const newState: Query = { page: 1 };\r\n\r\n      Object.keys(queryObject).forEach((key) => {\r\n        if (!['page', '_q'].includes(key)) {\r\n          (newState as Record<string, string | number | undefined>)[key] = (\r\n            queryObject as Record<string, string | number | undefined>\r\n          )[key];\r\n        }\r\n      });\r\n\r\n      setQueryObject(newState);\r\n    }\r\n  };\r\n\r\n  const handleChangeFolder = (folder: Query['folder'], folderPath: Query['folderPath']) => {\r\n    setQueryObject((prev) => ({ ...prev, folder: folder ?? null, folderPath }));\r\n  };\r\n\r\n  return [\r\n    { queryObject, rawQuery: stringify(queryObject, { encode: false }) },\r\n    {\r\n      onChangeFilters: handleChangeFilters,\r\n      onChangeFolder: handleChangeFolder,\r\n      onChangePage: handeChangePage,\r\n      onChangePageSize: handleChangePageSize,\r\n      onChangeSort: handleChangeSort,\r\n      onChangeSearch: handleChangeSearch,\r\n    },\r\n  ];\r\n};\r\n","import * as React from 'react';\r\n\r\nexport const useSelectionState = <TValues extends object>(\r\n  keys: Array<keyof TValues>,\r\n  initialValue: TValues[]\r\n) => {\r\n  const [selections, setSelections] = React.useState(initialValue);\r\n\r\n  const selectOne = (selection: TValues) => {\r\n    const index = selections.findIndex((currentSelection) =>\r\n      keys.every((key) => currentSelection[key] === selection[key])\r\n    );\r\n\r\n    if (index > -1) {\r\n      setSelections((prevSelected) => [\r\n        ...prevSelected.slice(0, index),\r\n        ...prevSelected.slice(index + 1),\r\n      ]);\r\n    } else {\r\n      setSelections((prevSelected) => [...prevSelected, selection]);\r\n    }\r\n  };\r\n\r\n  const selectAll = (nextSelections?: TValues[]) => {\r\n    if (selections.length > 0) {\r\n      setSelections([]);\r\n    } else {\r\n      setSelections(nextSelections!);\r\n    }\r\n  };\r\n\r\n  const selectOnly = (nextSelection: TValues) => {\r\n    const index = selections.findIndex((currentSelection) =>\r\n      keys.every((key) => currentSelection[key] === nextSelection[key])\r\n    );\r\n\r\n    if (index > -1) {\r\n      setSelections([]);\r\n    } else {\r\n      setSelections([nextSelection]);\r\n    }\r\n  };\r\n\r\n  const selectMultiple = (nextSelections: TValues[]) => {\r\n    setSelections((currSelections) => [\r\n      // already selected items\r\n      ...currSelections,\r\n      // filter out already selected items from nextSelections\r\n      ...nextSelections.filter(\r\n        (nextSelection) =>\r\n          currSelections.findIndex((currentSelection) =>\r\n            keys.every((key) => currentSelection[key] === nextSelection[key])\r\n          ) === -1\r\n      ),\r\n    ]);\r\n  };\r\n\r\n  const deselectMultiple = (nextSelections: TValues[]) => {\r\n    setSelections((currSelections) => [\r\n      // filter out items in currSelections that are in nextSelections\r\n      ...currSelections.filter(\r\n        (currentSelection) =>\r\n          nextSelections.findIndex((nextSelection) =>\r\n            keys.every((key) => currentSelection[key] === nextSelection[key])\r\n          ) === -1\r\n      ),\r\n    ]);\r\n  };\r\n\r\n  return [\r\n    selections,\r\n    { selectOne, selectAll, selectOnly, selectMultiple, deselectMultiple, setSelections },\r\n  ] as const;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useNotification, useFetchClient, FetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nimport { UpdateFile, File as FileAsset } from '../../../shared/contracts/files';\r\nimport { pluginId } from '../pluginId';\r\nimport { getTrad } from '../utils';\r\n\r\nexport type ErrorMutation = {\r\n  message: string;\r\n  response: {\r\n    status: number;\r\n    data: {\r\n      error: Error;\r\n    };\r\n  };\r\n} | null;\r\n\r\nconst editAssetRequest = (\r\n  asset: FileAsset,\r\n  file: File,\r\n  signal: AbortSignal,\r\n  onProgress: (progress: number) => void,\r\n  post: FetchClient['post']\r\n) => {\r\n  const endpoint = `/${pluginId}?id=${asset.id}`;\r\n\r\n  const formData = new FormData();\r\n\r\n  if (file) {\r\n    formData.append('files', file);\r\n  }\r\n\r\n  formData.append(\r\n    'fileInfo',\r\n    JSON.stringify({\r\n      alternativeText: asset.alternativeText,\r\n      caption: asset.caption,\r\n      folder: asset.folder,\r\n      name: asset.name,\r\n    })\r\n  );\r\n\r\n  /**\r\n   * onProgress is not possible using native fetch\r\n   * need to look into an alternative to make it work\r\n   * perhaps using xhr like Axios does\r\n   */\r\n  return post(endpoint, formData, {\r\n    signal,\r\n  }).then((res) => res.data);\r\n};\r\n\r\nexport const useEditAsset = () => {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const queryClient = useQueryClient();\r\n  const abortController = new AbortController();\r\n  const signal = abortController.signal;\r\n  const { post } = useFetchClient();\r\n\r\n  const mutation = useMutation<\r\n    UpdateFile.Response['data'],\r\n    ErrorMutation,\r\n    { asset: FileAsset; file: File }\r\n  >(({ asset, file }) => editAssetRequest(asset, file, signal, setProgress, post), {\r\n    onSuccess() {\r\n      queryClient.refetchQueries([pluginId, 'assets'], { active: true });\r\n      queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\r\n      queryClient.refetchQueries([pluginId, 'folders'], { active: true });\r\n    },\r\n    onError(reason) {\r\n      if (reason?.response?.status === 403) {\r\n        toggleNotification({\r\n          type: 'info',\r\n          message: formatMessage({ id: getTrad('permissions.not-allowed.update') }),\r\n        });\r\n      } else {\r\n        toggleNotification({ type: 'danger', message: reason?.message });\r\n      }\r\n    },\r\n  });\r\n\r\n  const editAsset = (asset: FileAsset, file: File) => mutation.mutateAsync({ asset, file });\r\n\r\n  const cancel = () => abortController.abort();\r\n\r\n  return { ...mutation, cancel, editAsset, progress, status: mutation.status };\r\n};\r\n","type Primitive = string | number | boolean | null | undefined;\r\n\r\nexport type DeepRecord<T> = {\r\n  [K in keyof T]: T[K] extends Primitive ? T[K] : DeepRecord<T[K]>;\r\n};\r\n\r\nexport const recursiveRenameKeys = <T extends object>(\r\n  obj: T,\r\n  fn: (key: string) => string\r\n): DeepRecord<T> =>\r\n  Object.fromEntries(\r\n    Object.entries(obj).map(([key, value]) => {\r\n      const getValue = (v: unknown): unknown =>\r\n        typeof v === 'object' && v !== null ? recursiveRenameKeys(v, fn) : v;\r\n\r\n      return [fn(key), Array.isArray(value) ? value.map((val) => getValue(val)) : getValue(value)];\r\n    })\r\n  ) as DeepRecord<T>;\r\n","import { useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { FolderNode, GetFolderStructure } from '../../../shared/contracts/folders';\r\nimport { pluginId } from '../pluginId';\r\nimport { getTrad } from '../utils';\r\n\r\nimport { recursiveRenameKeys } from './utils/renameKeys';\r\n\r\nconst FIELD_MAPPING: Record<string, string> = {\r\n  name: 'label',\r\n  id: 'value',\r\n};\r\n\r\ninterface FolderNodeWithChildren extends Omit<FolderNode, 'children'> {\r\n  children: FolderNodeWithChildren[];\r\n  label?: string;\r\n  value: string | number | null;\r\n}\r\n\r\nexport const useFolderStructure = ({ enabled = true } = {}) => {\r\n  const { formatMessage } = useIntl();\r\n  const { get } = useFetchClient();\r\n\r\n  const fetchFolderStructure = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await get<GetFolderStructure.Response['data']>('/upload/folder-structure');\r\n    const children = data.map((f: FolderNodeWithChildren) =>\r\n      recursiveRenameKeys(f, (key) => FIELD_MAPPING?.[key] ?? key)\r\n    );\r\n\r\n    return [\r\n      {\r\n        value: null,\r\n        label: formatMessage({\r\n          id: getTrad('form.input.label.folder-location-default-label'),\r\n          defaultMessage: 'Media Library',\r\n        }),\r\n        children,\r\n      },\r\n    ];\r\n  };\r\n\r\n  const { data, error, isLoading } = useQuery(\r\n    [pluginId, 'folder', 'structure'],\r\n    fetchFolderStructure,\r\n    {\r\n      enabled,\r\n      staleTime: 0,\r\n      cacheTime: 0,\r\n    }\r\n  );\r\n\r\n  return { data, error, isLoading };\r\n};\r\n","import { Box, Flex, Grid, Typography } from '@strapi/design-system';\r\n\r\ninterface ContextInfoProps {\r\n  blocks: { label: string; value: string | number | null }[];\r\n}\r\n\r\nexport const ContextInfo = ({ blocks }: ContextInfoProps) => {\r\n  return (\r\n    <Box\r\n      hasRadius\r\n      paddingLeft={6}\r\n      paddingRight={6}\r\n      paddingTop={4}\r\n      paddingBottom={4}\r\n      background=\"neutral100\"\r\n    >\r\n      <Grid.Root gap={4}>\r\n        {blocks.map(({ label, value }) => (\r\n          <Grid.Item col={6} xs={12} key={label} direction=\"column\" alignItems=\"stretch\">\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {label}\r\n              </Typography>\r\n              <Typography variant=\"pi\" textColor=\"neutral700\">\r\n                {value}\r\n              </Typography>\r\n            </Flex>\r\n          </Grid.Item>\r\n        ))}\r\n      </Grid.Root>\r\n    </Box>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { components, OptionProps as ReactSelectOptionProps } from 'react-select';\r\nimport { styled } from 'styled-components';\r\n\r\nimport type { Folder } from '../../../../shared/contracts/folders';\r\n\r\nconst ToggleButton = styled(Flex)`\r\n  align-self: flex-end;\r\n  height: 2.2rem;\r\n  width: 2.8rem;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: ${({ theme }) => theme.colors.primary200};\r\n  }\r\n`;\r\n\r\ninterface SelectProps {\r\n  maxDisplayDepth: number;\r\n  openValues: string[];\r\n  onOptionToggle: (value: string) => void;\r\n}\r\n\r\ninterface FolderWithDepth extends Folder {\r\n  depth: number;\r\n  value: string;\r\n}\r\n\r\ninterface OptionProps extends ReactSelectOptionProps<FolderWithDepth, false> {\r\n  selectProps: SelectProps & ReactSelectOptionProps<FolderWithDepth, false>['selectProps'];\r\n}\r\n\r\nexport const Option = ({ children, data, selectProps, ...props }: OptionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { depth, value, children: options } = data;\r\n  const { maxDisplayDepth, openValues, onOptionToggle } = selectProps;\r\n  const isOpen = openValues.includes(value);\r\n\r\n  const Icon = isOpen ? ChevronUp : ChevronDown;\r\n\r\n  return (\r\n    <components.Option data={data} selectProps={selectProps} {...props}>\r\n      <Flex alignItems=\"start\">\r\n        <Typography textColor=\"neutral800\" ellipsis>\r\n          <span style={{ paddingLeft: `${Math.min(depth, maxDisplayDepth) * 14}px` }}>\r\n            {children}\r\n          </span>\r\n        </Typography>\r\n\r\n        {options && options?.length > 0 && (\r\n          <ToggleButton\r\n            aria-label={formatMessage({\r\n              id: 'app.utils.toggle',\r\n              defaultMessage: 'Toggle',\r\n            })}\r\n            tag=\"button\"\r\n            alignItems=\"center\"\r\n            hasRadius\r\n            justifyContent=\"center\"\r\n            marginLeft=\"auto\"\r\n            onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\r\n              event.preventDefault();\r\n              event.stopPropagation();\r\n\r\n              onOptionToggle(value);\r\n            }}\r\n          >\r\n            <Icon width=\"1.4rem\" fill=\"neutral500\" />\r\n          </ToggleButton>\r\n        )}\r\n      </Flex>\r\n    </components.Option>\r\n  );\r\n};\r\n","interface Option {\r\n  value: number | string | null;\r\n  parent?: number | string | null;\r\n}\r\n\r\ninterface DefaultValue {\r\n  value?: number | string | null;\r\n}\r\n\r\nexport function getOpenValues(options: Option[], defaultValue: DefaultValue = {}) {\r\n  const values: Option['value'][] = [];\r\n  const { value } = defaultValue;\r\n  const option = options.find((option) => option.value === value);\r\n\r\n  if (!option) {\r\n    return values;\r\n  }\r\n\r\n  values.push(option.value);\r\n\r\n  let { parent } = option;\r\n\r\n  while (parent !== undefined) {\r\n    const option = options.find(({ value }) => value === parent);\r\n\r\n    if (!option) {\r\n      break;\r\n    }\r\n\r\n    values.push(option.value);\r\n    parent = option.parent;\r\n  }\r\n\r\n  return values.reverse();\r\n}\r\n","interface Option {\r\n  value: string | number | null;\r\n  depth: number;\r\n}\r\n\r\nexport function getValuesToClose(options: Option[], value: number | string | null) {\r\n  const optionForValue = options.find((option) => option.value === value);\r\n\r\n  if (!optionForValue) {\r\n    return [];\r\n  }\r\n\r\n  return options\r\n    .filter((option) => option.depth >= optionForValue.depth)\r\n    .map((option) => option.value);\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport { Cross, CaretDown } from '@strapi/icons';\r\nimport ReactSelect, {\r\n  components,\r\n  GroupBase,\r\n  StylesConfig,\r\n  ClearIndicatorProps,\r\n} from 'react-select';\r\nimport { styled, useTheme, DefaultTheme } from 'styled-components';\r\n\r\nimport { Option } from './Option';\r\nimport { flattenTree, FlattenedNode } from './utils/flattenTree';\r\nimport { getOpenValues } from './utils/getOpenValues';\r\nimport { getValuesToClose } from './utils/getValuesToClose';\r\n\r\nconst hasParent = (option: FlattenedNode<string | number | null>) => !option.parent;\r\n\r\nexport type OptionSelectTree = {\r\n  value: string | number | null;\r\n  label?: string;\r\n  children?: OptionSelectTree[];\r\n};\r\n\r\nexport interface SelectTreeProps<\r\n  Option = unknown,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  IsMulti extends boolean = false,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Group extends GroupBase<Option> = GroupBase<Option>,\r\n> {\r\n  maxDisplayDepth?: number;\r\n  defaultValue?: {\r\n    value?: string | number | null;\r\n  };\r\n  options: OptionSelectTree[];\r\n  onChange?: (value: Record<string, string | number>) => void;\r\n  name?: string;\r\n  menuPortalTarget?: HTMLElement | null;\r\n  inputId?: string;\r\n  error?: string;\r\n  ariaErrorMessage?: string;\r\n  isDisabled?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const SelectTree = ({\r\n  options: defaultOptions,\r\n  maxDisplayDepth = 5,\r\n  defaultValue,\r\n  ...props\r\n}: SelectTreeProps) => {\r\n  const flatDefaultOptions = React.useMemo(() => flattenTree(defaultOptions), [defaultOptions]);\r\n  const optionsFiltered = React.useMemo(\r\n    () => flatDefaultOptions.filter(hasParent),\r\n    [flatDefaultOptions]\r\n  );\r\n  const [options, setOptions] = React.useState(optionsFiltered);\r\n  const [openValues, setOpenValues] = React.useState(\r\n    getOpenValues(flatDefaultOptions, defaultValue)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (openValues.length === 0) {\r\n      setOptions(flatDefaultOptions.filter((option) => option.parent === undefined));\r\n    } else {\r\n      const allOpenValues = openValues.reduce<(string | number | null)[]>((acc, value) => {\r\n        const options = flatDefaultOptions.filter(\r\n          (option) => option.value === value || option.parent === value\r\n        );\r\n\r\n        options.forEach((option) => {\r\n          const values = getOpenValues(flatDefaultOptions, option);\r\n          acc = [...acc, ...values];\r\n        });\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      const nextOptions = flatDefaultOptions.filter((option) =>\r\n        allOpenValues.includes(option.value)\r\n      );\r\n\r\n      setOptions(nextOptions);\r\n    }\r\n  }, [openValues, flatDefaultOptions, optionsFiltered]);\r\n\r\n  const handleToggle = (value: string | number | null) => {\r\n    if (openValues.includes(value)) {\r\n      const valuesToClose = getValuesToClose(flatDefaultOptions, value);\r\n      setOpenValues((prev) => prev.filter((prevData) => !valuesToClose.includes(prevData)));\r\n    } else {\r\n      setOpenValues((prev) => [...prev, value]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      components={{ Option }}\r\n      options={options}\r\n      defaultValue={defaultValue}\r\n      isSearchable={false}\r\n      /* -- custom props, used by the Option component */\r\n      maxDisplayDepth={maxDisplayDepth}\r\n      openValues={openValues}\r\n      onOptionToggle={handleToggle}\r\n      /* -- / custom props */\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\ntype SelectOption = { value?: string | number | null; label?: string };\r\n\r\ninterface SelectProps<\r\n  Option = SelectOption,\r\n  IsMulti extends boolean = false,\r\n  Group extends GroupBase<Option> = GroupBase<Option>,\r\n> {\r\n  components?: object;\r\n  styles?: StylesConfig<Option, IsMulti, Group>;\r\n  error?: string;\r\n  ariaErrorMessage?: string;\r\n  options: OptionSelectTree[];\r\n  defaultValue?: {\r\n    value?: string | number | null;\r\n  };\r\n  isSearchable?: boolean;\r\n  maxDisplayDepth?: number;\r\n  openValues?: (string | number | null)[];\r\n  onOptionToggle?: (value: string | number | null) => void;\r\n}\r\n\r\nconst Select = ({\r\n  components = {},\r\n  styles = {},\r\n  error,\r\n  ariaErrorMessage,\r\n  ...props\r\n}: SelectProps) => {\r\n  const theme = useTheme();\r\n  const customStyles = getSelectStyles(theme, error);\r\n\r\n  return (\r\n    <ReactSelect\r\n      menuPosition=\"fixed\"\r\n      components={{\r\n        ...components,\r\n        ClearIndicator,\r\n        DropdownIndicator,\r\n        IndicatorSeparator: () => null,\r\n        LoadingIndicator: () => null,\r\n      }}\r\n      aria-errormessage={error && ariaErrorMessage}\r\n      aria-invalid={!!error}\r\n      styles={\r\n        { ...customStyles, ...styles } as StylesConfig<SelectOption, false, GroupBase<SelectOption>>\r\n      }\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nconst IconBox = styled(Box)`\r\n  background: transparent;\r\n  border: none;\r\n  position: relative;\r\n  z-index: 1;\r\n\r\n  svg {\r\n    height: 1.1rem;\r\n    width: 1.1rem;\r\n  }\r\n\r\n  svg path {\r\n    fill: ${({ theme }) => theme.colors.neutral600};\r\n  }\r\n`;\r\n\r\nconst ClearIndicator = (\r\n  props: ClearIndicatorProps<SelectOption, false, GroupBase<SelectOption>>\r\n) => {\r\n  const Component = components.ClearIndicator;\r\n\r\n  return (\r\n    <Component {...props}>\r\n      <IconBox tag=\"button\" type=\"button\">\r\n        <Cross />\r\n      </IconBox>\r\n    </Component>\r\n  );\r\n};\r\n\r\nconst CarretBox = styled(IconBox)`\r\n  display: flex;\r\n  background: none;\r\n  border: none;\r\n\r\n  svg {\r\n    width: 0.9rem;\r\n  }\r\n`;\r\n\r\nconst DropdownIndicator = ({ innerProps }: { innerProps: object }) => {\r\n  return (\r\n    <CarretBox paddingRight={3} {...innerProps}>\r\n      <CaretDown />\r\n    </CarretBox>\r\n  );\r\n};\r\n\r\nconst getSelectStyles = (\r\n  theme: DefaultTheme,\r\n  error?: string\r\n): StylesConfig<SelectOption, false, GroupBase<SelectOption>> => {\r\n  return {\r\n    clearIndicator: (base: object) => ({ ...base, padding: 0, paddingRight: theme.spaces[3] }),\r\n    container: (base: object) => ({\r\n      ...base,\r\n      background: theme.colors.neutral0,\r\n      lineHeight: 'normal',\r\n    }),\r\n    control(base: object, state: { isFocused: boolean; isDisabled: boolean }) {\r\n      let borderColor = theme.colors.neutral200;\r\n      let boxShadowColor: string | undefined = undefined;\r\n      let backgroundColor: string | undefined = undefined;\r\n\r\n      if (state.isFocused) {\r\n        borderColor = theme.colors.primary600;\r\n        boxShadowColor = theme.colors.primary600;\r\n      } else if (error) {\r\n        borderColor = theme.colors.danger600;\r\n      }\r\n\r\n      if (state.isDisabled) {\r\n        backgroundColor = `${theme.colors.neutral150} !important`;\r\n      }\r\n\r\n      return {\r\n        ...base,\r\n        fontSize: theme.fontSizes[2],\r\n        height: 40,\r\n        border: `1px solid ${borderColor} !important`,\r\n        outline: 0,\r\n        backgroundColor,\r\n        borderRadius: theme.borderRadius,\r\n        boxShadow: boxShadowColor ? `${boxShadowColor} 0px 0px 0px 2px` : '',\r\n      };\r\n    },\r\n    indicatorsContainer: (base: object) => ({ ...base, padding: 0, paddingRight: theme.spaces[3] }),\r\n    input: (base: object) => ({\r\n      ...base,\r\n      margin: 0,\r\n      padding: 0,\r\n      color: theme.colors.neutral800,\r\n      gridTemplateColumns: '0 100%',\r\n    }),\r\n    menuPortal: (base: object) => ({\r\n      ...base,\r\n      zIndex: theme.zIndices.dialog,\r\n      pointerEvents: 'auto',\r\n    }),\r\n    menu(base: object) {\r\n      return {\r\n        ...base,\r\n        width: '100%',\r\n        marginTop: theme.spaces[1],\r\n        backgroundColor: theme.colors.neutral0,\r\n        color: theme.colors.neutral800,\r\n        borderRadius: theme.borderRadius,\r\n        border: `1px solid ${theme.colors.neutral200}`,\r\n        boxShadow: theme.shadows.tableShadow,\r\n        fontSize: theme.fontSizes[2],\r\n        zIndex: 2,\r\n      };\r\n    },\r\n    menuList: (base: object) => ({\r\n      ...base,\r\n      paddingLeft: theme.spaces[1],\r\n      paddingTop: theme.spaces[1],\r\n      paddingRight: theme.spaces[1],\r\n      paddingBottom: theme.spaces[1],\r\n    }),\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    option(base: any, state: { isFocused: boolean; isSelected: boolean }) {\r\n      let backgroundColor = base?.backgroundColor as string;\r\n\r\n      if (state.isFocused || state.isSelected) {\r\n        backgroundColor = theme.colors.primary100;\r\n      }\r\n\r\n      return {\r\n        ...base,\r\n        color: theme.colors.neutral800,\r\n        lineHeight: theme.spaces[5],\r\n        backgroundColor,\r\n        borderRadius: theme.borderRadius,\r\n        '&:active': {\r\n          backgroundColor: theme.colors.primary100,\r\n        },\r\n      };\r\n    },\r\n    placeholder: (base: object) => ({\r\n      ...base,\r\n      color: theme.colors.neutral600,\r\n      marginLeft: 0,\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      whiteSpace: 'nowrap',\r\n      maxWidth: '80%',\r\n    }),\r\n    singleValue(base: object, state: { isDisabled: boolean }) {\r\n      let color = theme.colors.neutral800;\r\n\r\n      if (state.isDisabled) {\r\n        color = theme.colors.neutral600;\r\n      }\r\n\r\n      return { ...base, marginLeft: 0, color };\r\n    },\r\n    valueContainer: (base: object) => ({\r\n      ...base,\r\n      cursor: 'pointer',\r\n      padding: 0,\r\n      paddingLeft: theme.spaces[4],\r\n      marginLeft: 0,\r\n      marginRight: 0,\r\n    }),\r\n  };\r\n};\r\n","import { Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport const DialogHeader = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Modal.Header>\r\n      <Modal.Title>\r\n        {formatMessage({ id: 'global.details', defaultMessage: 'Details' })}\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport Cropper from 'cropperjs';\r\n\r\nconst QUALITY = 1;\r\n\r\ntype Size = {\r\n  width?: number;\r\n  height?: number;\r\n};\r\n\r\ntype Resize = {\r\n  detail: {\r\n    height: number;\r\n    width: number;\r\n  };\r\n};\r\n\r\nexport const useCropImg = () => {\r\n  const cropperRef = React.useRef<Cropper>();\r\n  const [isCropping, setIsCropping] = React.useState(false);\r\n  const [size, setSize] = React.useState<Size>({ width: undefined, height: undefined });\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (cropperRef.current) {\r\n        cropperRef.current.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleResize = ({ detail: { height, width } }: Resize) => {\r\n    const roundedDataWidth = Math.round(width);\r\n    const roundedDataHeight = Math.round(height);\r\n\r\n    setSize({ width: roundedDataWidth, height: roundedDataHeight });\r\n  };\r\n\r\n  const crop = (image: HTMLImageElement) => {\r\n    if (!cropperRef.current) {\r\n      cropperRef.current = new Cropper(image, {\r\n        modal: true,\r\n        initialAspectRatio: 16 / 9,\r\n        movable: true,\r\n        zoomable: false,\r\n        cropBoxResizable: true,\r\n        background: false,\r\n        checkCrossOrigin: false,\r\n        crop: handleResize,\r\n      });\r\n\r\n      setIsCropping(true);\r\n    }\r\n  };\r\n\r\n  const stopCropping = () => {\r\n    if (cropperRef.current) {\r\n      cropperRef.current.destroy();\r\n      cropperRef.current = undefined;\r\n      setIsCropping(false);\r\n    }\r\n  };\r\n\r\n  const produceFile = (name: string, mimeType: string, lastModifiedDate: string) =>\r\n    new Promise((resolve, reject) => {\r\n      if (!cropperRef.current) {\r\n        reject(\r\n          new Error(\r\n            'The cropper has not been instantiated: make sure to call the crop() function before calling produceFile().'\r\n          )\r\n        );\r\n      } else {\r\n        const canvas = cropperRef.current.getCroppedCanvas();\r\n\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            resolve(\r\n              new File([blob!], name, {\r\n                type: mimeType,\r\n                lastModified: new Date(lastModifiedDate).getTime(),\r\n              })\r\n            );\r\n          },\r\n          mimeType,\r\n          QUALITY\r\n        );\r\n      }\r\n    });\r\n\r\n  return {\r\n    crop,\r\n    produceFile,\r\n    stopCropping,\r\n    isCropping,\r\n    isCropperReady: Boolean(cropperRef.current),\r\n    ...size,\r\n  };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useFetchClient, FetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nimport { File, RawFile, CreateFile } from '../../../shared/contracts/files';\r\nimport { pluginId } from '../pluginId';\r\n\r\nconst endpoint = `/${pluginId}`;\r\n\r\ninterface Asset extends Omit<File, 'id' | 'hash'> {\r\n  rawFile?: RawFile;\r\n  id?: File['id'];\r\n  hash?: File['hash'];\r\n}\r\n\r\nconst uploadAsset = (\r\n  asset: Asset,\r\n  folderId: number | null,\r\n  signal: AbortSignal,\r\n  onProgress: (progress: number) => void,\r\n  post: FetchClient['post']\r\n) => {\r\n  const { rawFile, caption, name, alternativeText } = asset;\r\n  const formData = new FormData();\r\n\r\n  formData.append('files', rawFile!);\r\n\r\n  formData.append(\r\n    'fileInfo',\r\n    JSON.stringify({\r\n      name,\r\n      caption,\r\n      alternativeText,\r\n      folder: folderId,\r\n    })\r\n  );\r\n\r\n  /**\r\n   * onProgress is not possible using native fetch\r\n   * need to look into an alternative to make it work\r\n   * perhaps using xhr like Axios does\r\n   */\r\n  return post(endpoint, formData, {\r\n    signal,\r\n  }).then((res) => res.data);\r\n};\r\n\r\nexport const useUpload = () => {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const queryClient = useQueryClient();\r\n  const abortController = new AbortController();\r\n  const signal = abortController.signal;\r\n  const { post } = useFetchClient();\r\n\r\n  const mutation = useMutation<\r\n    CreateFile.Response['data'],\r\n    CreateFile.Response['error'],\r\n    { asset: Asset; folderId: number | null }\r\n  >(\r\n    ({ asset, folderId }) => {\r\n      return uploadAsset(asset, folderId, signal, setProgress, post);\r\n    },\r\n    {\r\n      onSuccess() {\r\n        queryClient.refetchQueries([pluginId, 'assets'], { active: true });\r\n        queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\r\n      },\r\n    }\r\n  );\r\n\r\n  const upload = (asset: Asset, folderId: number | null) =>\r\n    mutation.mutateAsync({ asset, folderId });\r\n\r\n  const cancel = () => abortController.abort();\r\n\r\n  return {\r\n    upload,\r\n    isLoading: mutation.isLoading,\r\n    cancel,\r\n    error: mutation.error,\r\n    progress,\r\n    status: mutation.status,\r\n  };\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { useNotification, useClipboard } from '@strapi/admin/strapi-admin';\r\nimport { IconButton } from '@strapi/design-system';\r\nimport { Link as LinkIcon } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../utils';\r\n\r\nexport const CopyLinkButton = ({ url }: { url: string }) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const { copy } = useClipboard();\r\n\r\n  const handleClick = async () => {\r\n    const didCopy = await copy(url);\r\n\r\n    if (didCopy) {\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'notification.link-copied',\r\n          defaultMessage: 'Link copied into the clipboard',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <IconButton\r\n      label={formatMessage({\r\n        id: getTrad('control-card.copy-link'),\r\n        defaultMessage: 'Copy link',\r\n      })}\r\n      onClick={handleClick}\r\n    >\r\n      <LinkIcon />\r\n    </IconButton>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { Flex, ProgressBar, Typography } from '@strapi/design-system';\r\nimport { Cross } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { UpdateFile } from '../../../../shared/contracts/files';\r\n\r\nconst BoxWrapper = styled(Flex)`\r\n  border-radius: ${({ theme }) => `${theme.borderRadius} ${theme.borderRadius} 0 0`};\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  svg {\r\n    path {\r\n      fill: ${({ theme, error }) => (error ? theme.colors.danger600 : undefined)};\r\n    }\r\n  }\r\n`;\r\n\r\nconst CancelButton = styled.button`\r\n  border: none;\r\n  background: none;\r\n  width: min-content;\r\n  color: ${({ theme }) => theme.colors.neutral600};\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: ${({ theme }) => theme.colors.neutral700};\r\n  }\r\n\r\n  svg {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    path {\r\n      fill: currentColor;\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface UploadProgressProps {\r\n  error?: UpdateFile.Response['error'] | Error | null;\r\n  onCancel: () => void;\r\n  progress?: number;\r\n}\r\n\r\nexport const UploadProgress = ({ onCancel, progress = 0, error }: UploadProgressProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <BoxWrapper alignItems=\"center\" background={error ? 'danger100' : 'neutral150'} error={error}>\r\n      {error ? (\r\n        <Cross aria-label={error?.message} />\r\n      ) : (\r\n        <Flex direction=\"column\" alignItems=\"center\" gap={2} width=\"100%\">\r\n          <ProgressBar value={progress} />\r\n          <Typography>{`${progress}/100%`}</Typography>\r\n\r\n          <CancelButton type=\"button\" onClick={onCancel}>\r\n            <Flex gap={2}>\r\n              <Typography variant=\"pi\" tag=\"span\" textColor=\"inherit\">\r\n                {formatMessage({\r\n                  id: 'app.components.Button.cancel',\r\n                  defaultMessage: 'Cancel',\r\n                })}\r\n              </Typography>\r\n\r\n              <Cross aria-hidden />\r\n            </Flex>\r\n          </CancelButton>\r\n        </Flex>\r\n      )}\r\n    </BoxWrapper>\r\n  );\r\n};\r\n","import { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nimport { pluginId } from '../pluginId';\r\n\r\nimport type { DeleteFile } from '../../../shared/contracts/files';\r\n\r\nexport const useRemoveAsset = (onSuccess: () => void) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const queryClient = useQueryClient();\r\n  const { del } = useFetchClient();\r\n\r\n  const mutation = useMutation(\r\n    (assetId: number) => del<DeleteFile.Response>(`/upload/files/${assetId}`),\r\n    {\r\n      onSuccess() {\r\n        queryClient.refetchQueries([pluginId, 'assets'], { active: true });\r\n        queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'modal.remove.success-label',\r\n            defaultMessage: 'Elements have been successfully deleted.',\r\n          }),\r\n        });\r\n\r\n        onSuccess();\r\n      },\r\n      onError(error: Error) {\r\n        toggleNotification({ type: 'danger', message: error.message });\r\n      },\r\n    }\r\n  );\r\n\r\n  const removeAsset = async (assetId: number) => {\r\n    await mutation.mutateAsync(assetId);\r\n  };\r\n\r\n  return { ...mutation, removeAsset };\r\n};\r\n","import { ConfirmDialog } from '@strapi/admin/strapi-admin';\r\nimport { Dialog } from '@strapi/design-system';\r\n\r\nimport { useRemoveAsset } from '../../hooks/useRemoveAsset';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\n\r\ninterface RemoveAssetDialogProps {\r\n  open: boolean;\r\n  onClose: (open: boolean | null) => void;\r\n  asset: File;\r\n}\r\n\r\nexport const RemoveAssetDialog = ({ open, onClose, asset }: RemoveAssetDialogProps) => {\r\n  // `null` means asset is deleted\r\n  const { removeAsset } = useRemoveAsset(() => {\r\n    onClose(null);\r\n  });\r\n\r\n  const handleConfirm = async (event?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    event?.preventDefault();\r\n    await removeAsset(asset.id);\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root open={open} onOpenChange={onClose}>\r\n      <ConfirmDialog onConfirm={handleConfirm} />\r\n    </Dialog.Root>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst usePersistentState = <T>(key: string, defaultValue: T) => {\r\n  const [value, setValue] = useState<T>(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n\r\n    if (stickyValue !== null) {\r\n      try {\r\n        return JSON.parse(stickyValue);\r\n      } catch {\r\n        // JSON.parse fails when the stored value is a primitive\r\n        return stickyValue;\r\n      }\r\n    }\r\n\r\n    return defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n\r\n  return [value, setValue] as const;\r\n};\r\n\r\nexport { usePersistentState };\r\n","/* eslint-disable jsx-a11y/media-has-caption */\r\nimport * as React from 'react';\r\n\r\nimport { Flex } from '@strapi/design-system';\r\nimport { File, FilePdf } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetType } from '../../../constants';\r\nimport { usePersistentState } from '../../../hooks/usePersistentState';\r\n\r\nconst CardAsset = styled(Flex)`\r\n  border-radius: ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius} 0 0;\r\n  background: linear-gradient(180deg, #ffffff 0%, #f6f6f9 121.48%);\r\n`;\r\n\r\ninterface AssetPreviewProps {\r\n  mime: string;\r\n  name: string;\r\n  url: string;\r\n  onLoad?: () => void;\r\n}\r\n\r\nexport const AssetPreview = React.forwardRef<\r\n  HTMLImageElement | HTMLVideoElement | HTMLAudioElement,\r\n  AssetPreviewProps\r\n>(({ mime, url, name, ...props }, ref) => {\r\n  const [lang] = usePersistentState('strapi-admin-language', 'en');\r\n\r\n  if (mime.includes(AssetType.Image)) {\r\n    return (\r\n      <img ref={ref as React.ForwardedRef<HTMLImageElement>} src={url} alt={name} {...props} />\r\n    );\r\n  }\r\n\r\n  if (mime.includes(AssetType.Video)) {\r\n    return (\r\n      <video controls src={url} ref={ref as React.ForwardedRef<HTMLVideoElement>} {...props}>\r\n        <track label={name} default kind=\"captions\" srcLang={lang} src=\"\" />\r\n      </video>\r\n    );\r\n  }\r\n\r\n  if (mime.includes(AssetType.Audio)) {\r\n    return (\r\n      <audio controls src={url} ref={ref as React.ForwardedRef<HTMLAudioElement>} {...props}>\r\n        {name}\r\n      </audio>\r\n    );\r\n  }\r\n\r\n  if (mime.includes('pdf')) {\r\n    return (\r\n      <CardAsset justifyContent=\"center\" {...props}>\r\n        <FilePdf aria-label={name} />\r\n      </CardAsset>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CardAsset justifyContent=\"center\" {...props}>\r\n      <File aria-label={name} />\r\n    </CardAsset>\r\n  );\r\n});\r\n\r\nAssetPreview.displayName = 'AssetPreview';\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { Badge, Box, Flex } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nexport const RelativeBox = styled(Box)`\r\n  position: relative;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  background: repeating-conic-gradient(\r\n      ${({ theme }) => theme.colors.neutral100} 0% 25%,\r\n      transparent 0% 50%\r\n    )\r\n    50% / 20px 20px;\r\n\r\n  svg {\r\n    font-size: 4.8rem;\r\n    height: 26.4rem;\r\n  }\r\n\r\n  img,\r\n  video {\r\n    margin: 0;\r\n    padding: 0;\r\n    max-height: 26.4rem;\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nexport const ActionRow = styled(Flex)`\r\n  height: 5.2rem;\r\n  background-color: ${({ $blurry }) => ($blurry ? `rgba(33, 33, 52, 0.4)` : undefined)};\r\n`;\r\n\r\nexport const CroppingActionRow = styled(Flex)`\r\n  z-index: 1;\r\n  height: 5.2rem;\r\n  position: absolute;\r\n  background-color: rgba(33, 33, 52, 0.4);\r\n  width: 100%;\r\n`;\r\n\r\n// TODO: fix in parts, this shouldn't happen\r\nexport const BadgeOverride = styled(Badge)`\r\n  span {\r\n    color: inherit;\r\n    font-weight: ${({ theme }) => theme.fontWeights.regular};\r\n  }\r\n`;\r\n\r\nexport const UploadProgressWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 2;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n","import { Flex, FocusTrap, IconButton, Menu } from '@strapi/design-system';\r\nimport { Check, Cross } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, useTheme } from 'styled-components';\r\n\r\nimport { getTrad } from '../../../utils';\r\n\r\nimport { CroppingActionRow } from './PreviewComponents';\r\n\r\ninterface CroppingActionsProps {\r\n  onCancel: () => void;\r\n  onValidate: () => void;\r\n  onDuplicate?: () => void;\r\n}\r\n\r\nexport const CroppingActions = ({ onCancel, onValidate, onDuplicate }: CroppingActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <FocusTrap onEscape={onCancel}>\r\n      <CroppingActionRow justifyContent=\"flex-end\" paddingLeft={3} paddingRight={3}>\r\n        <Flex gap={1}>\r\n          <IconButton\r\n            label={formatMessage({\r\n              id: getTrad('control-card.stop-crop'),\r\n              defaultMessage: 'Stop cropping',\r\n            })}\r\n            onClick={onCancel}\r\n          >\r\n            <Cross />\r\n          </IconButton>\r\n\r\n          <Menu.Root>\r\n            <Trigger\r\n              aria-label={formatMessage({\r\n                id: getTrad('control-card.crop'),\r\n                defaultMessage: 'Crop',\r\n              })}\r\n              variant=\"tertiary\"\r\n              paddingLeft={2}\r\n              paddingRight={2}\r\n              endIcon={null}\r\n            >\r\n              <Check\r\n                aria-hidden\r\n                focusable={false}\r\n                style={{ position: 'relative', top: 2 }}\r\n                fill=\"#C0C0D0\"\r\n              />\r\n            </Trigger>\r\n            <Menu.Content zIndex={theme.zIndices.dialog}>\r\n              <Menu.Item onSelect={onValidate}>\r\n                {formatMessage({\r\n                  id: getTrad('checkControl.crop-original'),\r\n                  defaultMessage: 'Crop the original asset',\r\n                })}\r\n              </Menu.Item>\r\n\r\n              {onDuplicate && (\r\n                <Menu.Item onSelect={onDuplicate}>\r\n                  {formatMessage({\r\n                    id: getTrad('checkControl.crop-duplicate'),\r\n                    defaultMessage: 'Duplicate & crop the asset',\r\n                  })}\r\n                </Menu.Item>\r\n              )}\r\n            </Menu.Content>\r\n          </Menu.Root>\r\n        </Flex>\r\n      </CroppingActionRow>\r\n    </FocusTrap>\r\n  );\r\n};\r\n\r\nconst Trigger = styled(Menu.Trigger)`\r\n  svg {\r\n    > g,\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    svg {\r\n      > g,\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.neutral600};\r\n      }\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    svg {\r\n      > g,\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.neutral400};\r\n      }\r\n    }\r\n  }\r\n`;\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { Flex, IconButton } from '@strapi/design-system';\r\nimport { Crop as Resize, Download as DownloadIcon, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { AssetType } from '../../../constants';\r\nimport { useCropImg } from '../../../hooks/useCropImg';\r\nimport { useEditAsset } from '../../../hooks/useEditAsset';\r\nimport { useUpload } from '../../../hooks/useUpload';\r\nimport { createAssetUrl, getTrad, downloadFile } from '../../../utils';\r\nimport { CopyLinkButton } from '../../CopyLinkButton/CopyLinkButton';\r\nimport { UploadProgress } from '../../UploadProgress/UploadProgress';\r\nimport { RemoveAssetDialog } from '../RemoveAssetDialog';\r\n\r\nimport { AssetPreview } from './AssetPreview';\r\nimport { CroppingActions } from './CroppingActions';\r\nimport {\r\n  ActionRow,\r\n  BadgeOverride,\r\n  RelativeBox,\r\n  UploadProgressWrapper,\r\n  Wrapper,\r\n} from './PreviewComponents';\r\n\r\nimport type { File as FileDefinition, RawFile } from '../../../../../shared/contracts/files';\r\n\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Asset extends Omit<FileDefinition, 'folder'> {\r\n  isLocal?: boolean;\r\n  rawFile?: RawFile;\r\n  folder?: FileDefinition['folder'] & { id: number };\r\n}\r\n\r\ninterface PreviewBoxProps {\r\n  asset: Asset;\r\n  canUpdate: boolean;\r\n  canCopyLink: boolean;\r\n  canDownload: boolean;\r\n  replacementFile?: File;\r\n  onDelete: (asset?: Asset | null) => void;\r\n  onCropFinish: () => void;\r\n  onCropStart: () => void;\r\n  onCropCancel: () => void;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const PreviewBox = ({\r\n  asset,\r\n  canUpdate,\r\n  canCopyLink,\r\n  canDownload,\r\n  onDelete,\r\n  onCropFinish,\r\n  onCropStart,\r\n  onCropCancel,\r\n  replacementFile,\r\n  trackedLocation,\r\n}: PreviewBoxProps) => {\r\n  const { trackUsage } = useTracking();\r\n  const previewRef = React.useRef(null);\r\n  const [isCropImageReady, setIsCropImageReady] = React.useState(false);\r\n  const [hasCropIntent, setHasCropIntent] = React.useState<boolean | null>(null);\r\n  const [assetUrl, setAssetUrl] = React.useState(createAssetUrl(asset, false));\r\n  const [thumbnailUrl, setThumbnailUrl] = React.useState(createAssetUrl(asset, true));\r\n  const { formatMessage } = useIntl();\r\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\r\n  const { crop, produceFile, stopCropping, isCropping, isCropperReady, width, height } =\r\n    useCropImg();\r\n  const { editAsset, error, isLoading, progress, cancel } = useEditAsset();\r\n\r\n  const {\r\n    upload,\r\n    isLoading: isLoadingUpload,\r\n    cancel: cancelUpload,\r\n    error: uploadError,\r\n    progress: progressUpload,\r\n  } = useUpload();\r\n\r\n  React.useEffect(() => {\r\n    // Whenever a replacementUrl is set, make sure to permutate the real asset.url by\r\n    // the locally generated one\r\n    if (replacementFile) {\r\n      const fileLocalUrl = URL.createObjectURL(replacementFile);\r\n\r\n      if (asset.isLocal) {\r\n        asset.url = fileLocalUrl;\r\n      }\r\n\r\n      setAssetUrl(fileLocalUrl);\r\n      setThumbnailUrl(fileLocalUrl);\r\n    }\r\n  }, [replacementFile, asset]);\r\n\r\n  React.useEffect(() => {\r\n    if (hasCropIntent === false) {\r\n      stopCropping();\r\n      onCropCancel();\r\n    }\r\n  }, [hasCropIntent, stopCropping, onCropCancel, onCropFinish]);\r\n\r\n  React.useEffect(() => {\r\n    if (hasCropIntent && isCropImageReady) {\r\n      crop(previewRef.current!);\r\n      onCropStart();\r\n    }\r\n  }, [isCropImageReady, hasCropIntent, onCropStart, crop]);\r\n\r\n  const handleCropping = async () => {\r\n    const nextAsset = { ...asset, width, height, folder: asset.folder?.id };\r\n    const file = (await produceFile(nextAsset.name, nextAsset.mime!, nextAsset.updatedAt!)) as File;\r\n\r\n    // Making sure that when persisting the new asset, the URL changes with width and height\r\n    // So that the browser makes a request and handle the image caching correctly at the good size\r\n    let optimizedCachingImage;\r\n    let optimizedCachingThumbnailImage;\r\n\r\n    if (asset.isLocal) {\r\n      optimizedCachingImage = URL.createObjectURL(file);\r\n      optimizedCachingThumbnailImage = optimizedCachingImage;\r\n      asset.url = optimizedCachingImage;\r\n      asset.rawFile = file;\r\n\r\n      trackUsage('didCropFile', { duplicatedFile: null, location: trackedLocation! });\r\n    } else {\r\n      const updatedAsset = await editAsset(nextAsset, file);\r\n      optimizedCachingImage = createAssetUrl(updatedAsset, false);\r\n      optimizedCachingThumbnailImage = createAssetUrl(updatedAsset, true);\r\n\r\n      trackUsage('didCropFile', { duplicatedFile: false, location: trackedLocation! });\r\n    }\r\n\r\n    setAssetUrl(optimizedCachingImage);\r\n    setThumbnailUrl(optimizedCachingThumbnailImage);\r\n    setHasCropIntent(false);\r\n  };\r\n\r\n  const isInCroppingMode = isCropping && !isLoading;\r\n\r\n  const handleDuplication = async () => {\r\n    const nextAsset = { ...asset, width, height };\r\n    const file = (await produceFile(\r\n      nextAsset.name,\r\n      nextAsset.mime!,\r\n      nextAsset.updatedAt!\r\n    )) as RawFile;\r\n\r\n    await upload({ name: file.name, rawFile: file }, asset.folder?.id ? asset.folder.id : null);\r\n\r\n    trackUsage('didCropFile', { duplicatedFile: true, location: trackedLocation! });\r\n\r\n    setHasCropIntent(false);\r\n    onCropFinish();\r\n  };\r\n\r\n  const handleCropCancel = () => {\r\n    setHasCropIntent(false);\r\n  };\r\n\r\n  const handleCropStart = () => {\r\n    setHasCropIntent(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <RelativeBox hasRadius background=\"neutral150\" borderColor=\"neutral200\">\r\n        {isCropperReady && isInCroppingMode && (\r\n          <CroppingActions\r\n            onValidate={handleCropping}\r\n            onDuplicate={asset.isLocal ? undefined : handleDuplication}\r\n            onCancel={handleCropCancel}\r\n          />\r\n        )}\r\n\r\n        <ActionRow paddingLeft={3} paddingRight={3} justifyContent=\"flex-end\">\r\n          <Flex gap={1}>\r\n            {canUpdate && !asset.isLocal && (\r\n              <IconButton\r\n                label={formatMessage({\r\n                  id: 'global.delete',\r\n                  defaultMessage: 'Delete',\r\n                })}\r\n                onClick={() => setShowConfirmDialog(true)}\r\n              >\r\n                <Trash />\r\n              </IconButton>\r\n            )}\r\n\r\n            {canDownload && (\r\n              <IconButton\r\n                label={formatMessage({\r\n                  id: getTrad('control-card.download'),\r\n                  defaultMessage: 'Download',\r\n                })}\r\n                onClick={() => downloadFile(assetUrl!, asset.name)}\r\n              >\r\n                <DownloadIcon />\r\n              </IconButton>\r\n            )}\r\n\r\n            {canCopyLink && <CopyLinkButton url={assetUrl!} />}\r\n\r\n            {canUpdate && asset.mime?.includes(AssetType.Image) && (\r\n              <IconButton\r\n                label={formatMessage({ id: getTrad('control-card.crop'), defaultMessage: 'Crop' })}\r\n                onClick={handleCropStart}\r\n              >\r\n                <Resize />\r\n              </IconButton>\r\n            )}\r\n          </Flex>\r\n        </ActionRow>\r\n\r\n        <Wrapper>\r\n          {/* This one is for editting an asset */}\r\n          {isLoading && (\r\n            <UploadProgressWrapper>\r\n              <UploadProgress error={error} onCancel={cancel} progress={progress} />\r\n            </UploadProgressWrapper>\r\n          )}\r\n\r\n          {/* This one is for duplicating an asset after cropping */}\r\n          {isLoadingUpload && (\r\n            <UploadProgressWrapper>\r\n              <UploadProgress\r\n                error={uploadError}\r\n                onCancel={cancelUpload}\r\n                progress={progressUpload}\r\n              />\r\n            </UploadProgressWrapper>\r\n          )}\r\n\r\n          <AssetPreview\r\n            ref={previewRef}\r\n            mime={asset.mime!}\r\n            name={asset.name}\r\n            url={hasCropIntent ? assetUrl! : thumbnailUrl!}\r\n            onLoad={() => {\r\n              if (asset.isLocal || hasCropIntent) {\r\n                setIsCropImageReady(true);\r\n              }\r\n            }}\r\n          />\r\n        </Wrapper>\r\n\r\n        <ActionRow\r\n          paddingLeft={2}\r\n          paddingRight={2}\r\n          justifyContent=\"flex-end\"\r\n          $blurry={isInCroppingMode}\r\n        >\r\n          {isInCroppingMode && width && height && (\r\n            <BadgeOverride background=\"neutral900\" color=\"neutral0\">\r\n              {width && height ? `${height}✕${width}` : 'N/A'}\r\n            </BadgeOverride>\r\n          )}\r\n        </ActionRow>\r\n      </RelativeBox>\r\n\r\n      <RemoveAssetDialog\r\n        open={showConfirmDialog}\r\n        onClose={() => {\r\n          setShowConfirmDialog(false);\r\n          onDelete(null);\r\n        }}\r\n        asset={asset}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { Button, VisuallyHidden, ButtonProps } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../utils';\r\n\r\ninterface ReplaceMediaButtonProps extends ButtonProps {\r\n  acceptedMime: string;\r\n  onSelectMedia: (file?: File) => void;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const ReplaceMediaButton = ({\r\n  onSelectMedia,\r\n  acceptedMime,\r\n  trackedLocation,\r\n  ...props\r\n}: ReplaceMediaButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const { trackUsage } = useTracking();\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (trackedLocation) {\r\n      trackUsage('didReplaceMedia', { location: trackedLocation });\r\n    }\r\n\r\n    inputRef.current?.click();\r\n  };\r\n\r\n  const handleChange = () => {\r\n    const file = inputRef.current?.files?.[0];\r\n\r\n    onSelectMedia(file);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"secondary\" onClick={handleClick} {...props}>\r\n        {formatMessage({\r\n          id: getTrad('control-card.replace-media'),\r\n          defaultMessage: 'Replace media',\r\n        })}\r\n      </Button>\r\n      <VisuallyHidden>\r\n        <input\r\n          accept={acceptedMime}\r\n          type=\"file\"\r\n          name=\"file\"\r\n          data-testid=\"file-input\"\r\n          tabIndex={-1}\r\n          ref={inputRef}\r\n          onChange={handleChange}\r\n          aria-hidden\r\n        />\r\n      </VisuallyHidden>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n *\r\n * EditAssetDialog\r\n *\r\n */\r\nimport * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Button,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Loader,\r\n  Modal,\r\n  TextInput,\r\n  VisuallyHidden,\r\n} from '@strapi/design-system';\r\nimport { Form, Formik } from 'formik';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\nimport * as yup from 'yup';\r\n\r\nimport { useEditAsset } from '../../hooks/useEditAsset';\r\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\r\nimport { findRecursiveFolderByValue, getTrad, getFileExtension, formatBytes } from '../../utils';\r\nimport { ContextInfo } from '../ContextInfo/ContextInfo';\r\nimport { SelectTree } from '../SelectTree/SelectTree';\r\n\r\nimport { DialogHeader } from './DialogHeader';\r\nimport { PreviewBox } from './PreviewBox/PreviewBox';\r\nimport { ReplaceMediaButton } from './ReplaceMediaButton';\r\n\r\nimport type { File as FileDefinition, RawFile } from '../../../../shared/contracts/files';\r\n\r\nconst LoadingBody = styled(Flex)`\r\n  /* 80px are coming from the Tabs component that is not included in the ModalBody */\r\n  min-height: ${() => `calc(60vh + 8rem)`};\r\n`;\r\n\r\nconst fileInfoSchema = yup.object({\r\n  name: yup.string().required(),\r\n  alternativeText: yup.string(),\r\n  caption: yup.string(),\r\n  folder: yup.number(),\r\n});\r\n\r\nexport interface Asset extends Omit<FileDefinition, 'folder'> {\r\n  isLocal?: boolean;\r\n  rawFile?: RawFile;\r\n  folder?: FileDefinition['folder'] & { id: number };\r\n}\r\n\r\ninterface EditAssetContentProps {\r\n  asset?: Asset;\r\n  canUpdate?: boolean;\r\n  canCopyLink?: boolean;\r\n  canDownload?: boolean;\r\n  trackedLocation?: string;\r\n  onClose: (arg?: Asset | null | boolean) => void;\r\n}\r\n\r\ninterface FormInitialData {\r\n  name?: string;\r\n  alternativeText?: string;\r\n  caption?: string;\r\n  parent?: {\r\n    value?: number;\r\n    label: string;\r\n  };\r\n}\r\n\r\nexport const EditAssetContent = ({\r\n  onClose,\r\n  asset,\r\n  canUpdate = false,\r\n  canCopyLink = false,\r\n  canDownload = false,\r\n  trackedLocation,\r\n}: EditAssetContentProps) => {\r\n  const { formatMessage, formatDate } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const submitButtonRef = React.useRef<HTMLButtonElement>(null);\r\n  const [isCropping, setIsCropping] = React.useState(false);\r\n  const [replacementFile, setReplacementFile] = React.useState<File | undefined>();\r\n  const { editAsset, isLoading } = useEditAsset();\r\n\r\n  const { data: folderStructure, isLoading: folderStructureIsLoading } = useFolderStructure({\r\n    enabled: true,\r\n  });\r\n\r\n  const handleSubmit = async (values: FormInitialData) => {\r\n    const nextAsset = { ...asset, ...values, folder: values.parent?.value } as Asset;\r\n\r\n    if (asset?.isLocal) {\r\n      onClose(nextAsset);\r\n    } else {\r\n      const editedAsset = (await editAsset(nextAsset, replacementFile!)) as Asset;\r\n\r\n      const assetType = asset?.mime?.split('/')[0];\r\n      // if the folder parent was the root of Media Library, its id is null\r\n      // we know it changed location if the new parent value exists\r\n      const didChangeLocation = asset?.folder?.id\r\n        ? asset.folder.id !== values.parent?.value\r\n        : asset?.folder === null && !!values.parent?.value;\r\n\r\n      trackUsage('didEditMediaLibraryElements', {\r\n        location: trackedLocation,\r\n        type: assetType,\r\n        changeLocation: didChangeLocation,\r\n      });\r\n\r\n      onClose(editedAsset);\r\n    }\r\n  };\r\n\r\n  const handleStartCropping = () => {\r\n    setIsCropping(true);\r\n  };\r\n\r\n  const handleCancelCropping = () => {\r\n    setIsCropping(false);\r\n  };\r\n\r\n  const handleFinishCropping = () => {\r\n    setIsCropping(false);\r\n    onClose();\r\n  };\r\n\r\n  const formDisabled = !canUpdate || isCropping;\r\n\r\n  const handleConfirmClose = () => {\r\n    // eslint-disable-next-line no-alert\r\n    const confirm = window.confirm(\r\n      formatMessage({\r\n        id: 'window.confirm.close-modal.file',\r\n        defaultMessage: 'Are you sure? Your changes will be lost.',\r\n      })\r\n    );\r\n\r\n    if (confirm) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const activeFolderId = asset?.folder?.id;\r\n  const initialFormData = !folderStructureIsLoading && {\r\n    name: asset?.name,\r\n    alternativeText: asset?.alternativeText ?? undefined,\r\n    caption: asset?.caption ?? undefined,\r\n    parent: {\r\n      value: activeFolderId ?? undefined,\r\n      label:\r\n        findRecursiveFolderByValue(folderStructure!, activeFolderId!)?.label ??\r\n        folderStructure![0].label,\r\n    },\r\n  };\r\n\r\n  const handleClose = (values?: { [key: string]: unknown }) => {\r\n    if (!isEqual(initialFormData, values)) {\r\n      handleConfirmClose();\r\n    } else {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  if (folderStructureIsLoading) {\r\n    return (\r\n      <>\r\n        <DialogHeader />\r\n        <LoadingBody minHeight=\"60vh\" justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\r\n          <Loader>\r\n            {formatMessage({\r\n              id: getTrad('content.isLoading'),\r\n              defaultMessage: 'Content is loading.',\r\n            })}\r\n          </Loader>\r\n        </LoadingBody>\r\n        <Modal.Footer>\r\n          <Button onClick={() => handleClose()} variant=\"tertiary\">\r\n            {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={fileInfoSchema}\r\n      validateOnChange={false}\r\n      onSubmit={handleSubmit}\r\n      initialValues={initialFormData}\r\n    >\r\n      {({ values, errors, handleChange, setFieldValue }) => (\r\n        <>\r\n          <DialogHeader />\r\n          <Modal.Body>\r\n            <Grid.Root gap={4}>\r\n              <Grid.Item xs={12} col={6} direction=\"column\" alignItems=\"stretch\">\r\n                <PreviewBox\r\n                  asset={asset!}\r\n                  canUpdate={canUpdate}\r\n                  canCopyLink={canCopyLink}\r\n                  canDownload={canDownload}\r\n                  onDelete={onClose}\r\n                  onCropFinish={handleFinishCropping}\r\n                  onCropStart={handleStartCropping}\r\n                  onCropCancel={handleCancelCropping}\r\n                  replacementFile={replacementFile}\r\n                  trackedLocation={trackedLocation}\r\n                />\r\n              </Grid.Item>\r\n              <Grid.Item xs={12} col={6} direction=\"column\" alignItems=\"stretch\">\r\n                <Form noValidate>\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={3}>\r\n                    <ContextInfo\r\n                      blocks={[\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.file-details.size'),\r\n                            defaultMessage: 'Size',\r\n                          }),\r\n                          value: formatBytes(asset?.size ? asset.size : 0),\r\n                        },\r\n\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.file-details.dimensions'),\r\n                            defaultMessage: 'Dimensions',\r\n                          }),\r\n                          value:\r\n                            asset?.height && asset.width ? `${asset.width}✕${asset.height}` : null,\r\n                        },\r\n\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.file-details.date'),\r\n                            defaultMessage: 'Date',\r\n                          }),\r\n                          value: formatDate(new Date(asset?.createdAt ? asset.createdAt : '')),\r\n                        },\r\n\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.file-details.extension'),\r\n                            defaultMessage: 'Extension',\r\n                          }),\r\n                          value: getFileExtension(asset?.ext)!,\r\n                        },\r\n\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.file-details.id'),\r\n                            defaultMessage: 'Asset ID',\r\n                          }),\r\n                          value: asset?.id ? asset.id : null,\r\n                        },\r\n                      ]}\r\n                    />\r\n                    <Field.Root name=\"name\" error={errors.name}>\r\n                      <Field.Label>\r\n                        {formatMessage({\r\n                          id: getTrad('form.input.label.file-name'),\r\n                          defaultMessage: 'File name',\r\n                        })}\r\n                      </Field.Label>\r\n                      <TextInput\r\n                        value={values.name}\r\n                        onChange={handleChange}\r\n                        disabled={formDisabled}\r\n                      />\r\n                      <Field.Error />\r\n                    </Field.Root>\r\n\r\n                    <Field.Root\r\n                      name=\"alternativeText\"\r\n                      hint={formatMessage({\r\n                        id: getTrad('form.input.decription.file-alt'),\r\n                        defaultMessage: 'This text will be displayed if the asset can’t be shown.',\r\n                      })}\r\n                      error={errors.alternativeText}\r\n                    >\r\n                      <Field.Label>\r\n                        {formatMessage({\r\n                          id: getTrad('form.input.label.file-alt'),\r\n                          defaultMessage: 'Alternative text',\r\n                        })}\r\n                      </Field.Label>\r\n                      <TextInput\r\n                        value={values.alternativeText}\r\n                        onChange={handleChange}\r\n                        disabled={formDisabled}\r\n                      />\r\n                      <Field.Hint />\r\n                      <Field.Error />\r\n                    </Field.Root>\r\n\r\n                    <Field.Root name=\"caption\" error={errors.caption}>\r\n                      <Field.Label>\r\n                        {formatMessage({\r\n                          id: getTrad('form.input.label.file-caption'),\r\n                          defaultMessage: 'Caption',\r\n                        })}\r\n                      </Field.Label>\r\n                      <TextInput\r\n                        value={values.caption}\r\n                        onChange={handleChange}\r\n                        disabled={formDisabled}\r\n                      />\r\n                    </Field.Root>\r\n\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n                      <Field.Root name=\"parent\" id=\"asset-folder\">\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: getTrad('form.input.label.file-location'),\r\n                            defaultMessage: 'Location',\r\n                          })}\r\n                        </Field.Label>\r\n\r\n                        <SelectTree\r\n                          name=\"parent\"\r\n                          defaultValue={values.parent}\r\n                          options={folderStructure!}\r\n                          onChange={(value) => {\r\n                            setFieldValue('parent', value);\r\n                          }}\r\n                          menuPortalTarget={document.querySelector('body')}\r\n                          inputId=\"asset-folder\"\r\n                          isDisabled={formDisabled}\r\n                          error={errors?.parent}\r\n                          ariaErrorMessage=\"folder-parent-error\"\r\n                        />\r\n                      </Field.Root>\r\n                    </Flex>\r\n                  </Flex>\r\n\r\n                  <VisuallyHidden>\r\n                    <button\r\n                      type=\"submit\"\r\n                      tabIndex={-1}\r\n                      ref={submitButtonRef}\r\n                      disabled={formDisabled}\r\n                    >\r\n                      {formatMessage({ id: 'submit', defaultMessage: 'Submit' })}\r\n                    </button>\r\n                  </VisuallyHidden>\r\n                </Form>\r\n              </Grid.Item>\r\n            </Grid.Root>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button onClick={() => handleClose({ ...values })} variant=\"tertiary\">\r\n              {formatMessage({ id: 'global.cancel', defaultMessage: 'Cancel' })}\r\n            </Button>\r\n            <Flex gap={2}>\r\n              <ReplaceMediaButton\r\n                onSelectMedia={setReplacementFile}\r\n                acceptedMime={asset?.mime ?? ''}\r\n                disabled={formDisabled}\r\n                trackedLocation={trackedLocation}\r\n              />\r\n\r\n              <Button\r\n                onClick={() => submitButtonRef.current?.click()}\r\n                loading={isLoading}\r\n                disabled={formDisabled}\r\n              >\r\n                {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n              </Button>\r\n            </Flex>\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\ninterface EditAssetDialogProps {\r\n  asset: Asset;\r\n  canUpdate?: boolean;\r\n  canCopyLink?: boolean;\r\n  canDownload?: boolean;\r\n  trackedLocation?: string;\r\n  open: boolean;\r\n  onClose: (arg?: Asset | null | boolean) => void;\r\n}\r\n\r\nexport const EditAssetDialog = ({\r\n  open,\r\n  onClose,\r\n  canUpdate = false,\r\n  canCopyLink = false,\r\n  canDownload = false,\r\n  ...restProps\r\n}: EditAssetDialogProps) => {\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={onClose}>\r\n      <Modal.Content>\r\n        <EditAssetContent\r\n          onClose={onClose}\r\n          canUpdate={canUpdate}\r\n          canCopyLink={canCopyLink}\r\n          canDownload={canDownload}\r\n          {...restProps}\r\n        />\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n","import { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nimport { BulkDeleteFiles, File } from '../../../shared/contracts/files';\r\nimport { pluginId } from '../pluginId';\r\nimport { getTrad } from '../utils';\r\n\r\nimport type { BulkDeleteFolders, FolderDefinition } from '../../../shared/contracts/folders';\r\n\r\nexport interface FileWithType extends File {\r\n  type: string;\r\n}\r\n\r\ntype BulkRemovePayload = Partial<BulkDeleteFiles.Request['body']> &\r\n  Partial<BulkDeleteFolders.Request['body']>;\r\n\r\nexport const useBulkRemove = () => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const queryClient = useQueryClient();\r\n  const { post } = useFetchClient();\r\n\r\n  const bulkRemoveQuery = (filesAndFolders: Array<FileWithType | FolderDefinition>) => {\r\n    const payload = filesAndFolders.reduce<BulkRemovePayload>((acc, selected) => {\r\n      const { id, type } = selected;\r\n      const key = type === 'asset' ? 'fileIds' : 'folderIds';\r\n\r\n      if (!acc[key]) {\r\n        acc[key] = [];\r\n      }\r\n\r\n      acc[key]!.push(id);\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return post('/upload/actions/bulk-delete', payload);\r\n  };\r\n\r\n  const mutation = useMutation<\r\n    BulkDeleteFiles.Response | BulkDeleteFolders.Response,\r\n    BulkDeleteFiles.Response['error'] | BulkDeleteFolders.Response['error'],\r\n    Array<FileWithType | FolderDefinition>\r\n  >(bulkRemoveQuery, {\r\n    onSuccess(res) {\r\n      const {\r\n        data: { data },\r\n      } = res;\r\n\r\n      if (data?.files?.length > 0) {\r\n        queryClient.refetchQueries([pluginId, 'assets'], { active: true });\r\n        queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\r\n      }\r\n\r\n      if (data?.folders?.length > 0) {\r\n        queryClient.refetchQueries([pluginId, 'folders'], { active: true });\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTrad('modal.remove.success-label'),\r\n          defaultMessage: 'Elements have been successfully deleted.',\r\n        }),\r\n      });\r\n    },\r\n    onError(error) {\r\n      toggleNotification({ type: 'danger', message: error?.message });\r\n    },\r\n  });\r\n\r\n  const remove = (...args: Parameters<typeof mutation.mutateAsync>) =>\r\n    mutation.mutateAsync(...args);\r\n\r\n  return { ...mutation, remove };\r\n};\r\n","import { useFetchClient, FetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nimport { CreateFolders, UpdateFolder } from '../../../shared/contracts/folders';\r\nimport { pluginId } from '../pluginId';\r\n\r\ninterface EditFolderRequestParams {\r\n  attrs: CreateFolders.Request['body'] | UpdateFolder.Request['body'];\r\n  id?: UpdateFolder.Request['params']['id'];\r\n}\r\n\r\nconst editFolderRequest = (\r\n  put: FetchClient['put'],\r\n  post: FetchClient['post'],\r\n  { attrs, id }: EditFolderRequestParams\r\n): Promise<UpdateFolder.Response['data'] | CreateFolders.Response['data']> => {\r\n  const isEditing = !!id;\r\n  const method = isEditing ? put : post;\r\n\r\n  return method(`/upload/folders/${id ?? ''}`, attrs).then((res) => res.data);\r\n};\r\n\r\nexport const useEditFolder = () => {\r\n  const queryClient = useQueryClient();\r\n  const { put, post } = useFetchClient();\r\n\r\n  const mutation = useMutation<\r\n    UpdateFolder.Response['data'] | CreateFolders.Response['data'],\r\n    UpdateFolder.Response['error'] | CreateFolders.Response['error'],\r\n    EditFolderRequestParams\r\n  >((...args) => editFolderRequest(put, post, ...args), {\r\n    async onSuccess() {\r\n      await queryClient.refetchQueries([pluginId, 'folders'], { active: true });\r\n      await queryClient.refetchQueries([pluginId, 'folder', 'structure'], { active: true });\r\n    },\r\n  });\r\n\r\n  const editFolder = (\r\n    attrs: EditFolderRequestParams['attrs'],\r\n    id?: EditFolderRequestParams['id']\r\n  ) => mutation.mutateAsync({ attrs, id });\r\n\r\n  return { ...mutation, editFolder, status: mutation.status };\r\n};\r\n","import { Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../utils';\r\n\r\ninterface EditFolderModalHeaderProps {\r\n  isEditing?: boolean;\r\n}\r\n\r\nexport const EditFolderModalHeader = ({ isEditing = false }: EditFolderModalHeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Modal.Header>\r\n      <Modal.Title>\r\n        {formatMessage(\r\n          isEditing\r\n            ? {\r\n                id: getTrad('modal.folder.edit.title'),\r\n                defaultMessage: 'Edit folder',\r\n              }\r\n            : {\r\n                id: getTrad('modal.folder.create.title'),\r\n                defaultMessage: 'Add new folder',\r\n              }\r\n        )}\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n  );\r\n};\r\n","import { ConfirmDialog } from '@strapi/admin/strapi-admin';\r\nimport { Dialog } from '@strapi/design-system';\r\n\r\ninterface RemoveFolderDialogProps {\r\n  onClose: () => void;\r\n  onConfirm: () => void;\r\n  open: boolean;\r\n}\r\n\r\nexport const RemoveFolderDialog = ({ onClose, onConfirm, open }: RemoveFolderDialogProps) => {\r\n  return (\r\n    <Dialog.Root open={open} onOpenChange={onClose}>\r\n      <ConfirmDialog onConfirm={onConfirm} />\r\n    </Dialog.Root>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useTracking, useNotification } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Button,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Loader,\r\n  Modal,\r\n  TextInput,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Form, Formik, FormikErrors } from 'formik';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { useBulkRemove } from '../../hooks/useBulkRemove';\r\nimport { useEditFolder } from '../../hooks/useEditFolder';\r\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\r\nimport { useMediaLibraryPermissions } from '../../hooks/useMediaLibraryPermissions';\r\nimport { findRecursiveFolderByValue, getTrad, getAPIInnerErrors } from '../../utils';\r\nimport { ContextInfo } from '../ContextInfo/ContextInfo';\r\nimport { SelectTree } from '../SelectTree/SelectTree';\r\n\r\nimport { EditFolderModalHeader } from './ModalHeader/ModalHeader';\r\nimport { RemoveFolderDialog } from './RemoveFolderDialog';\r\n\r\nimport type { FolderDefinition } from '../../../../shared/contracts/folders';\r\nimport type { FetchError } from '@strapi/admin/strapi-admin';\r\n\r\nconst folderSchema = yup.object({\r\n  name: yup.string().required(),\r\n  parent: yup\r\n    .object({\r\n      label: yup.string(),\r\n      value: yup.number().nullable(true),\r\n    })\r\n    .nullable(true),\r\n});\r\n\r\ninterface ValuesSubmit {\r\n  name: string;\r\n  parent: null | { label?: string; value?: number };\r\n}\r\n\r\nexport interface EditFolderDialogProps {\r\n  parentFolderId?: string | number | null;\r\n  location?: string;\r\n  folder?: FolderDefinition;\r\n  open?: boolean;\r\n  onClose: (payload?: { created?: boolean | undefined } | boolean) => void;\r\n}\r\n\r\nexport const EditFolderContent = ({\r\n  onClose,\r\n  folder,\r\n  location,\r\n  parentFolderId,\r\n}: EditFolderDialogProps) => {\r\n  const { data: folderStructure, isLoading: folderStructureIsLoading } = useFolderStructure({\r\n    enabled: true,\r\n  });\r\n  const { canCreate, isLoading: isLoadingPermissions, canUpdate } = useMediaLibraryPermissions();\r\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\r\n  const { formatMessage, formatDate } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { editFolder, isLoading: isEditFolderLoading } = useEditFolder();\r\n  const { remove } = useBulkRemove();\r\n  const { toggleNotification } = useNotification();\r\n  const isLoading = isLoadingPermissions || folderStructureIsLoading;\r\n  const isEditing = !!folder;\r\n  const formDisabled = (folder && !canUpdate) || (!folder && !canCreate);\r\n  const initialFormData: ValuesSubmit = !folderStructureIsLoading\r\n    ? {\r\n        name: folder?.name ?? '',\r\n        parent: {\r\n          /* ideally we would use folderStructure[0].value, but since it is null\r\n         react complains about rendering null as field value */\r\n          value: parentFolderId ? parseInt(parentFolderId.toString(), 10) : undefined,\r\n          label: parentFolderId\r\n            ? folderStructure &&\r\n              findRecursiveFolderByValue(folderStructure, parseInt(parentFolderId.toString(), 10))\r\n                ?.label\r\n            : folderStructure?.[0].label,\r\n        },\r\n      }\r\n    : {\r\n        name: '',\r\n        parent: null,\r\n      };\r\n\r\n  const handleSubmit = async (\r\n    values: ValuesSubmit,\r\n    { setErrors }: { setErrors: (errors: FormikErrors<ValuesSubmit>) => void }\r\n  ) => {\r\n    try {\r\n      await editFolder(\r\n        {\r\n          ...values,\r\n          parent: values.parent?.value ?? null,\r\n        },\r\n        folder?.id\r\n      );\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: isEditing\r\n          ? formatMessage({\r\n              id: getTrad('modal.folder-notification-edited-success'),\r\n              defaultMessage: 'Folder successfully edited',\r\n            })\r\n          : formatMessage({\r\n              id: getTrad('modal.folder-notification-created-success'),\r\n              defaultMessage: 'Folder successfully created',\r\n            }),\r\n      });\r\n\r\n      if (isEditing) {\r\n        const didChangeLocation = parentFolderId\r\n          ? parseInt(parentFolderId.toString(), 10) !== values.parent?.value\r\n          : parentFolderId === null && !!values.parent?.value;\r\n        trackUsage('didEditMediaLibraryElements', {\r\n          location,\r\n          type: 'folder',\r\n          changeLocation: didChangeLocation,\r\n        });\r\n      } else {\r\n        trackUsage('didAddMediaLibraryFolders', { location: location! });\r\n      }\r\n\r\n      onClose({ created: true });\r\n    } catch (err) {\r\n      const errors = getAPIInnerErrors(err as FetchError, { getTrad });\r\n      const formikErrors = Object.entries(errors!).reduce(\r\n        (acc: Record<string, string>, [key, error]) => {\r\n          acc[key] = error.defaultMessage;\r\n\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n\r\n      if (!isEmpty(formikErrors)) {\r\n        setErrors(formikErrors);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (folder) {\r\n      await remove([folder]);\r\n    }\r\n\r\n    setShowConfirmDialog(false);\r\n    onClose();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <EditFolderModalHeader isEditing={isEditing} />\r\n        <Modal.Body>\r\n          <Flex justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\r\n            <Loader>\r\n              {formatMessage({\r\n                id: getTrad('content.isLoading'),\r\n                defaultMessage: 'Content is loading.',\r\n              })}\r\n            </Loader>\r\n          </Flex>\r\n        </Modal.Body>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        validationSchema={folderSchema}\r\n        validateOnChange={false}\r\n        onSubmit={handleSubmit}\r\n        initialValues={initialFormData}\r\n      >\r\n        {({ values, errors, handleChange, setFieldValue }) => (\r\n          <Form noValidate>\r\n            <EditFolderModalHeader isEditing={isEditing} />\r\n            <Modal.Body>\r\n              <Grid.Root gap={4}>\r\n                {isEditing && (\r\n                  <Grid.Item xs={12} col={12} direction=\"column\" alignItems=\"stretch\">\r\n                    <ContextInfo\r\n                      blocks={[\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.folder.create.elements'),\r\n                            defaultMessage: 'Elements',\r\n                          }),\r\n                          value: formatMessage(\r\n                            {\r\n                              id: getTrad('modal.folder.elements.count'),\r\n                              defaultMessage: '{folderCount} folders, {assetCount} assets',\r\n                            },\r\n                            {\r\n                              assetCount: folder?.files?.count ?? 0,\r\n                              folderCount: folder?.children?.count ?? 0,\r\n                            }\r\n                          ),\r\n                        },\r\n\r\n                        {\r\n                          label: formatMessage({\r\n                            id: getTrad('modal.folder.create.creation-date'),\r\n                            defaultMessage: 'Creation Date',\r\n                          }),\r\n                          value: formatDate(new Date(folder.createdAt!)),\r\n                        },\r\n                      ]}\r\n                    />\r\n                  </Grid.Item>\r\n                )}\r\n\r\n                <Grid.Item xs={12} col={6} direction=\"column\" alignItems=\"stretch\">\r\n                  <Field.Root\r\n                    name=\"name\"\r\n                    error={typeof errors.name === 'string' ? errors.name : undefined}\r\n                  >\r\n                    <Field.Label>\r\n                      {formatMessage({\r\n                        id: getTrad('form.input.label.folder-name'),\r\n                        defaultMessage: 'Name',\r\n                      })}\r\n                    </Field.Label>\r\n                    <TextInput\r\n                      value={values.name}\r\n                      onChange={handleChange}\r\n                      disabled={formDisabled}\r\n                    />\r\n                    <Field.Error />\r\n                  </Field.Root>\r\n                </Grid.Item>\r\n\r\n                <Grid.Item xs={12} col={6} direction=\"column\" alignItems=\"stretch\">\r\n                  <Field.Root id=\"folder-parent\">\r\n                    <Field.Label>\r\n                      {formatMessage({\r\n                        id: getTrad('form.input.label.folder-location'),\r\n                        defaultMessage: 'Location',\r\n                      })}\r\n                    </Field.Label>\r\n\r\n                    <SelectTree\r\n                      options={folderStructure!}\r\n                      onChange={(value) => {\r\n                        setFieldValue('parent', value);\r\n                      }}\r\n                      isDisabled={formDisabled}\r\n                      defaultValue={values.parent!}\r\n                      name=\"parent\"\r\n                      menuPortalTarget={document.querySelector('body')}\r\n                      inputId=\"folder-parent\"\r\n                      disabled={formDisabled}\r\n                      error={typeof errors.parent === 'string' ? errors.parent : undefined}\r\n                      ariaErrorMessage=\"folder-parent-error\"\r\n                    />\r\n\r\n                    {errors.parent && (\r\n                      <Typography\r\n                        variant=\"pi\"\r\n                        tag=\"p\"\r\n                        id=\"folder-parent-error\"\r\n                        textColor=\"danger600\"\r\n                      >\r\n                        {typeof errors.parent === 'string' ? errors.parent : undefined}\r\n                      </Typography>\r\n                    )}\r\n                  </Field.Root>\r\n                </Grid.Item>\r\n              </Grid.Root>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={() => onClose()} variant=\"tertiary\" name=\"cancel\">\r\n                {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\r\n              </Button>\r\n              <Flex gap={2}>\r\n                {isEditing && canUpdate && (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"danger-light\"\r\n                    onClick={() => setShowConfirmDialog(true)}\r\n                    name=\"delete\"\r\n                    disabled={!canUpdate || isEditFolderLoading}\r\n                  >\r\n                    {formatMessage({\r\n                      id: getTrad('modal.folder.create.delete'),\r\n                      defaultMessage: 'Delete folder',\r\n                    })}\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  name=\"submit\"\r\n                  loading={isEditFolderLoading}\r\n                  disabled={formDisabled}\r\n                  type=\"submit\"\r\n                >\r\n                  {formatMessage(\r\n                    isEditing\r\n                      ? { id: getTrad('modal.folder.edit.submit'), defaultMessage: 'Save' }\r\n                      : { id: getTrad('modal.folder.create.submit'), defaultMessage: 'Create' }\r\n                  )}\r\n                </Button>\r\n              </Flex>\r\n            </Modal.Footer>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <RemoveFolderDialog\r\n        open={showConfirmDialog}\r\n        onClose={() => setShowConfirmDialog(false)}\r\n        onConfirm={handleDelete}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport const EditFolderDialog = ({ open, onClose, ...restProps }: EditFolderDialogProps) => {\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={onClose}>\r\n      <Modal.Content>\r\n        <EditFolderContent {...restProps} onClose={onClose} open={open} />\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n","import { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { GetFolder } from '../../../shared/contracts/folders';\r\nimport { pluginId } from '../pluginId';\r\nimport { getTrad } from '../utils';\r\n\r\nexport const useFolder = (id: number | null | undefined, { enabled = true } = {}) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { get } = useFetchClient();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { data, error, isLoading } = useQuery<\r\n    GetFolder.Response['data'],\r\n    GetFolder.Response['error']\r\n  >(\r\n    [pluginId, 'folder', id],\r\n    async () => {\r\n      const {\r\n        data: { data },\r\n      } = await get(`/upload/folders/${id}`, {\r\n        params: {\r\n          populate: {\r\n            parent: {\r\n              populate: {\r\n                parent: '*',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return data;\r\n    },\r\n    {\r\n      retry: false,\r\n      enabled,\r\n      staleTime: 0,\r\n      cacheTime: 0,\r\n      onError() {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: getTrad('notification.warning.404'),\r\n            defaultMessage: 'Not found',\r\n          }),\r\n        });\r\n      },\r\n    }\r\n  );\r\n\r\n  return { data, error, isLoading };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardAction,\r\n  CardBadge,\r\n  CardBody,\r\n  CardCheckbox,\r\n  CardContent,\r\n  CardHeader,\r\n  CardSubtitle,\r\n  CardTitle,\r\n  Flex,\r\n  IconButton,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Pencil, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTrad } from '../../utils';\r\n\r\nconst Extension = styled.span`\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst CardActionsContainer = styled(CardAction)`\r\n  opacity: 0;\r\n\r\n  &:focus-within {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled(Card)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    ${CardActionsContainer} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface AssetCardBaseProps {\r\n  children?: React.ReactNode;\r\n  extension: string;\r\n  isSelectable?: boolean;\r\n  name: string;\r\n  onSelect?: () => void;\r\n  onRemove?: () => void;\r\n  onEdit?: (\r\n    event:\r\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n      | React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => void;\r\n  selected?: boolean;\r\n  subtitle?: string;\r\n  variant: 'Image' | 'Video' | 'Audio' | 'Doc';\r\n}\r\n\r\nexport const AssetCardBase = ({\r\n  children,\r\n  extension,\r\n  isSelectable = true,\r\n  name,\r\n  onSelect,\r\n  onRemove,\r\n  onEdit,\r\n  selected = false,\r\n  subtitle = '',\r\n  variant = 'Image',\r\n}: AssetCardBaseProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (onEdit) {\r\n      onEdit(e);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This is required because we need to stop the propagation of the event\r\n   * bubbling to the `CardContainer`, however the `CardCheckbox` only returns\r\n   * the `boolean` value as opposed to the event itself.\r\n   */\r\n  const handlePropagationClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  return (\r\n    <CardContainer role=\"button\" height=\"100%\" tabIndex={-1} onClick={handleClick}>\r\n      <CardHeader>\r\n        {isSelectable && (\r\n          <div onClick={handlePropagationClick}>\r\n            <CardCheckbox checked={selected} onCheckedChange={onSelect} />\r\n          </div>\r\n        )}\r\n        {(onRemove || onEdit) && (\r\n          <CardActionsContainer onClick={handlePropagationClick} position=\"end\">\r\n            {onRemove && (\r\n              <IconButton\r\n                label={formatMessage({\r\n                  id: getTrad('control-card.remove-selection'),\r\n                  defaultMessage: 'Remove from selection',\r\n                })}\r\n                onClick={onRemove}\r\n              >\r\n                <Trash />\r\n              </IconButton>\r\n            )}\r\n\r\n            {onEdit && (\r\n              <IconButton\r\n                label={formatMessage({ id: getTrad('control-card.edit'), defaultMessage: 'Edit' })}\r\n                onClick={onEdit}\r\n              >\r\n                <Pencil />\r\n              </IconButton>\r\n            )}\r\n          </CardActionsContainer>\r\n        )}\r\n        {children}\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardContent>\r\n          <Box paddingTop={1}>\r\n            <Typography tag=\"h2\">\r\n              <CardTitle tag=\"span\">{name}</CardTitle>\r\n            </Typography>\r\n          </Box>\r\n          <CardSubtitle>\r\n            <Extension>{extension}</Extension>\r\n            {subtitle}\r\n          </CardSubtitle>\r\n        </CardContent>\r\n        <Flex paddingTop={1} grow={1}>\r\n          <CardBadge>\r\n            {formatMessage({\r\n              id: getTrad(`settings.section.${variant.toLowerCase()}.label`),\r\n              defaultMessage: variant,\r\n            })}\r\n          </CardBadge>\r\n        </Flex>\r\n      </CardBody>\r\n    </CardContainer>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/media-has-caption */\r\nimport { Box } from '@strapi/design-system';\r\n\r\ninterface AudioPreviewProps {\r\n  alt: string;\r\n  url: string;\r\n}\r\n\r\nexport const AudioPreview = ({ url, alt }: AudioPreviewProps) => {\r\n  return (\r\n    <Box>\r\n      <audio controls src={url}>\r\n        {alt}\r\n      </audio>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, CardAsset } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetCardBase, AssetCardBaseProps } from './AssetCardBase';\r\nimport { AudioPreview } from './AudioPreview';\r\n\r\nconst AudioPreviewWrapper = styled(Box)`\r\n  canvas,\r\n  audio {\r\n    display: block;\r\n    max-width: 100%;\r\n    max-height: ${({ size }) => (size === 'M' ? 16.4 : 8.8)}rem;\r\n  }\r\n`;\r\n\r\ninterface AudioAssetCardProps extends Omit<AssetCardBaseProps, 'variant' | 'children'> {\r\n  size?: 'S' | 'M';\r\n  url: string;\r\n}\r\n\r\nexport const AudioAssetCard = ({\r\n  name,\r\n  url,\r\n  size = 'M',\r\n  selected = false,\r\n  ...restProps\r\n}: AudioAssetCardProps) => {\r\n  return (\r\n    <AssetCardBase name={name} selected={selected} {...restProps} variant=\"Audio\">\r\n      <CardAsset size={size}>\r\n        <AudioPreviewWrapper size={size}>\r\n          <AudioPreview url={url} alt={name} />\r\n        </AudioPreviewWrapper>\r\n      </CardAsset>\r\n    </AssetCardBase>\r\n  );\r\n};\r\n","import { Flex } from '@strapi/design-system';\r\nimport { File, FilePdf } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetCardBase, AssetCardBaseProps } from './AssetCardBase';\r\n\r\nconst IconWrapper = styled.span`\r\n  svg {\r\n    font-size: 4.8rem;\r\n  }\r\n`;\r\n\r\nconst CardAsset = styled(Flex)`\r\n  border-radius: ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius} 0 0;\r\n  background: linear-gradient(180deg, #ffffff 0%, #f6f6f9 121.48%);\r\n`;\r\n\r\ninterface DocAssetCardProps extends Omit<AssetCardBaseProps, 'variant' | 'children'> {\r\n  size?: 'S' | 'M';\r\n  extension: string;\r\n}\r\n\r\nexport const DocAssetCard = ({\r\n  name,\r\n  extension,\r\n  size = 'M',\r\n  selected = false,\r\n  ...restProps\r\n}: DocAssetCardProps) => {\r\n  return (\r\n    <AssetCardBase\r\n      name={name}\r\n      extension={extension}\r\n      selected={selected}\r\n      {...restProps}\r\n      variant=\"Doc\"\r\n    >\r\n      <CardAsset width=\"100%\" height={size === 'S' ? `8.8rem` : `16.4rem`} justifyContent=\"center\">\r\n        <IconWrapper>\r\n          {extension === 'pdf' ? <FilePdf aria-label={name} /> : <File aria-label={name} />}\r\n        </IconWrapper>\r\n      </CardAsset>\r\n    </AssetCardBase>\r\n  );\r\n};\r\n","import { CardAsset } from '@strapi/design-system';\r\n\r\nimport { appendSearchParamsToUrl } from '../../utils';\r\n\r\nimport { AssetCardBase, AssetCardBaseProps } from './AssetCardBase';\r\n\r\ninterface ImageAssetCardProps extends Omit<AssetCardBaseProps, 'variant' | 'children'> {\r\n  height?: number;\r\n  width?: number;\r\n  size?: 'S' | 'M';\r\n  thumbnail: string;\r\n  alt: string;\r\n  updatedAt?: string;\r\n  isUrlSigned: boolean;\r\n}\r\n\r\nexport const ImageAssetCard = ({\r\n  height,\r\n  width,\r\n  thumbnail,\r\n  size = 'M',\r\n  alt,\r\n  isUrlSigned,\r\n  selected = false,\r\n  ...props\r\n}: ImageAssetCardProps) => {\r\n  // appending the updatedAt param to the thumbnail URL prevents it from being cached by the browser (cache busting)\r\n  // applied only if the url is not signed to prevent the signature from being invalidated\r\n  const thumbnailUrl = isUrlSigned\r\n    ? thumbnail\r\n    : appendSearchParamsToUrl({\r\n        url: thumbnail,\r\n        params: { updatedAt: props.updatedAt },\r\n      });\r\n  const subtitle = height && width ? ` - ${width}✕${height}` : undefined;\r\n\r\n  return (\r\n    <AssetCardBase {...props} selected={selected} subtitle={subtitle} variant=\"Image\">\r\n      <CardAsset src={thumbnailUrl} size={size} alt={alt} />\r\n    </AssetCardBase>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Box, VisuallyHidden } from '@strapi/design-system';\r\n\r\n// According to MDN\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState#value\r\nconst HAVE_FUTURE_DATA = 3;\r\n\r\ninterface VideoPreviewProps {\r\n  alt: string;\r\n  url: string;\r\n  mime: string;\r\n  onLoadDuration?: (duration?: number) => void;\r\n  size?: 'S' | 'M';\r\n}\r\n\r\nexport const VideoPreview = ({\r\n  url,\r\n  mime,\r\n  onLoadDuration = () => {},\r\n  alt,\r\n  ...props\r\n}: VideoPreviewProps) => {\r\n  const handleTimeUpdate = (e: React.SyntheticEvent<HTMLVideoElement>) => {\r\n    if (e.currentTarget.currentTime > 0) {\r\n      const video = e.currentTarget;\r\n      const canvas = document.createElement('canvas');\r\n\r\n      canvas.height = video.videoHeight;\r\n      canvas.width = video.videoWidth;\r\n      canvas.getContext('2d')?.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\r\n\r\n      video.replaceWith(canvas);\r\n      onLoadDuration && onLoadDuration(video.duration);\r\n    }\r\n  };\r\n\r\n  const handleThumbnailVisibility = (e: React.SyntheticEvent<HTMLVideoElement>) => {\r\n    const video = e.currentTarget;\r\n\r\n    if (video.readyState < HAVE_FUTURE_DATA) return;\r\n\r\n    video.play();\r\n  };\r\n\r\n  return (\r\n    <Box tag=\"figure\" key={url} {...props}>\r\n      <video\r\n        muted\r\n        onLoadedData={handleThumbnailVisibility}\r\n        src={url}\r\n        crossOrigin=\"anonymous\"\r\n        onTimeUpdate={handleTimeUpdate}\r\n      >\r\n        <source type={mime} />\r\n      </video>\r\n      <VisuallyHidden tag=\"figcaption\">{alt}</VisuallyHidden>\r\n    </Box>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Box, CardAsset, CardTimer } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { formatDuration } from '../../utils';\r\n\r\nimport { AssetCardBase, AssetCardBaseProps } from './AssetCardBase';\r\nimport { VideoPreview } from './VideoPreview';\r\n\r\nconst VideoPreviewWrapper = styled(Box)`\r\n  canvas,\r\n  video {\r\n    display: block;\r\n    pointer-events: none;\r\n    max-width: 100%;\r\n    max-height: ${({ size }) => (size === 'M' ? 16.4 : 8.8)}rem;\r\n  }\r\n`;\r\n\r\ninterface VideoAssetCardProps extends Omit<AssetCardBaseProps, 'variant' | 'children'> {\r\n  mime: string;\r\n  url: string;\r\n  size?: 'S' | 'M';\r\n}\r\n\r\nexport const VideoAssetCard = ({\r\n  name,\r\n  url,\r\n  mime,\r\n  size = 'M',\r\n  selected = false,\r\n  ...props\r\n}: VideoAssetCardProps) => {\r\n  const [duration, setDuration] = React.useState<number>();\r\n\r\n  const formattedDuration = duration && formatDuration(duration);\r\n\r\n  return (\r\n    <AssetCardBase selected={selected} name={name} {...props} variant=\"Video\">\r\n      <CardAsset size={size}>\r\n        <VideoPreviewWrapper size={size}>\r\n          <VideoPreview url={url} mime={mime} onLoadDuration={setDuration} alt={name} />\r\n        </VideoPreviewWrapper>\r\n      </CardAsset>\r\n      <CardTimer>{formattedDuration || '...'}</CardTimer>\r\n    </AssetCardBase>\r\n  );\r\n};\r\n","import { AssetType } from '../../constants';\r\nimport { createAssetUrl, getFileExtension, prefixFileUrlWithBackendUrl } from '../../utils';\r\n\r\nimport { AudioAssetCard } from './AudioAssetCard';\r\nimport { DocAssetCard } from './DocAssetCard';\r\nimport { ImageAssetCard } from './ImageAssetCard';\r\nimport { VideoAssetCard } from './VideoAssetCard';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\n\r\ntype FileSelectable = File & { isSelectable?: boolean };\r\n\r\nexport type AllowedTypes = 'files' | 'images' | 'videos' | 'audios';\r\n\r\ninterface AssetCardProps {\r\n  asset: FileSelectable;\r\n  local?: boolean;\r\n  onSelect?: (asset: FileSelectable) => void;\r\n  onEdit?: (asset: FileSelectable) => void;\r\n  onRemove?: (asset: FileSelectable) => void;\r\n  isSelected?: boolean;\r\n  size?: 'S' | 'M';\r\n  allowedTypes?: AllowedTypes[];\r\n  alt?: string;\r\n}\r\n\r\nexport const AssetCard = ({\r\n  asset,\r\n  isSelected = false,\r\n  onSelect,\r\n  onEdit,\r\n  onRemove,\r\n  size = 'M',\r\n  local = false,\r\n}: AssetCardProps) => {\r\n  const handleSelect = onSelect ? () => onSelect(asset) : undefined;\r\n\r\n  const commonAssetCardProps = {\r\n    id: asset.id,\r\n    isSelectable: asset.isSelectable,\r\n    extension: getFileExtension(asset.ext)!,\r\n    name: asset.name,\r\n    url: local ? asset.url! : createAssetUrl(asset, true)!,\r\n    mime: asset.mime!,\r\n    onEdit: onEdit ? () => onEdit(asset) : undefined,\r\n    onSelect: handleSelect,\r\n    onRemove: onRemove ? () => onRemove(asset) : undefined,\r\n    selected: isSelected,\r\n    size,\r\n  };\r\n\r\n  if (asset.mime?.includes(AssetType.Video)) {\r\n    return <VideoAssetCard {...commonAssetCardProps} />;\r\n  }\r\n\r\n  if (asset.mime?.includes(AssetType.Image)) {\r\n    return (\r\n      <ImageAssetCard\r\n        alt={asset.alternativeText || asset.name}\r\n        height={asset.height!}\r\n        thumbnail={prefixFileUrlWithBackendUrl(asset?.formats?.thumbnail?.url || asset.url)!}\r\n        width={asset.width!}\r\n        updatedAt={asset.updatedAt}\r\n        isUrlSigned={asset?.isUrlSigned || false}\r\n        {...commonAssetCardProps}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (asset.mime?.includes(AssetType.Audio)) {\r\n    return <AudioAssetCard {...commonAssetCardProps} />;\r\n  }\r\n\r\n  return <DocAssetCard {...commonAssetCardProps} />;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\ninterface DraggableProps {\r\n  id: string | number;\r\n  index: number;\r\n  children: React.ReactNode;\r\n  moveItem: (fromIndex: number, toIndex: number) => void;\r\n}\r\n\r\nexport const Draggable = ({ children, id, index, moveItem }: DraggableProps) => {\r\n  const ref = React.useRef(null);\r\n\r\n  const [, drop] = useDrop({\r\n    accept: 'draggable',\r\n    hover(hoveredOverItem: { id: number; index: number }) {\r\n      if (!ref.current) {\r\n        return;\r\n      }\r\n\r\n      if (hoveredOverItem.id !== id) {\r\n        moveItem(hoveredOverItem.index, index);\r\n\r\n        hoveredOverItem.index = index;\r\n      }\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: 'draggable',\r\n    item() {\r\n      return { index, id };\r\n    },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0.2 : 1;\r\n\r\n  drag(drop(ref));\r\n\r\n  return (\r\n    <div ref={ref} style={{ opacity, cursor: 'move' }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { Box, Grid, KeyboardNavigable, Typography } from '@strapi/design-system';\r\n\r\nimport { AssetCard } from '../AssetCard/AssetCard';\r\n\r\nimport { Draggable } from './Draggable';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\r\n\r\nexport interface AssetGridListProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  assets: File[];\r\n  onEditAsset?: (asset: File) => void;\r\n  onSelectAsset: (asset: File) => void;\r\n  selectedAssets: File[];\r\n  size?: 'S' | 'M';\r\n  onReorderAsset?: (fromIndex: number, toIndex: number) => void;\r\n  title?: string | null;\r\n}\r\n\r\nexport const AssetGridList = ({\r\n  allowedTypes = ['files', 'images', 'videos', 'audios'],\r\n  assets,\r\n  onEditAsset,\r\n  onSelectAsset,\r\n  selectedAssets,\r\n  size = 'M',\r\n  onReorderAsset,\r\n  title = null,\r\n}: AssetGridListProps) => {\r\n  return (\r\n    <KeyboardNavigable tagName=\"article\">\r\n      {title && (\r\n        <Box paddingTop={2} paddingBottom={2}>\r\n          <Typography tag=\"h2\" variant=\"delta\" fontWeight=\"semiBold\">\r\n            {title}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      <Grid.Root gap={4}>\r\n        {assets.map((asset, index) => {\r\n          const isSelected = !!selectedAssets.find((currentAsset) => currentAsset.id === asset.id);\r\n\r\n          if (onReorderAsset) {\r\n            return (\r\n              <Grid.Item key={asset.id} col={3} height=\"100%\">\r\n                <Draggable index={index} moveItem={onReorderAsset} id={asset.id}>\r\n                  <AssetCard\r\n                    allowedTypes={allowedTypes}\r\n                    asset={asset}\r\n                    isSelected={isSelected}\r\n                    onEdit={onEditAsset ? () => onEditAsset(asset) : undefined}\r\n                    onSelect={() => onSelectAsset(asset)}\r\n                    size={size}\r\n                  />\r\n                </Draggable>\r\n              </Grid.Item>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <Grid.Item col={3} key={asset.id} height=\"100%\" direction=\"column\" alignItems=\"stretch\">\r\n              <AssetCard\r\n                key={asset.id}\r\n                allowedTypes={allowedTypes}\r\n                asset={asset}\r\n                isSelected={isSelected}\r\n                onEdit={onEditAsset ? () => onEditAsset(asset) : undefined}\r\n                onSelect={() => onSelectAsset(asset)}\r\n                size={size}\r\n              />\r\n            </Grid.Item>\r\n          );\r\n        })}\r\n      </Grid.Root>\r\n    </KeyboardNavigable>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { CrumbSimpleMenu, Loader, MenuItem } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\r\nimport { getFolderParents, getFolderURL, getTrad } from '../../utils';\r\n\r\ninterface CrumbSimpleMenuAsyncProps {\r\n  parentsToOmit?: number[];\r\n  currentFolderId?: number;\r\n  onChangeFolder?: (id: number, path?: string) => void;\r\n}\r\n\r\nexport const CrumbSimpleMenuAsync = ({\r\n  parentsToOmit = [],\r\n  currentFolderId,\r\n  onChangeFolder,\r\n}: CrumbSimpleMenuAsyncProps) => {\r\n  const [shouldFetch, setShouldFetch] = React.useState(false);\r\n  const { data, isLoading } = useFolderStructure({ enabled: shouldFetch });\r\n  const { pathname } = useLocation();\r\n  const [{ query }] = useQueryParams();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const allAscendants = data && getFolderParents(data, currentFolderId!);\r\n  const filteredAscendants =\r\n    allAscendants &&\r\n    allAscendants.filter(\r\n      (ascendant) =>\r\n        typeof ascendant.id === 'number' &&\r\n        !parentsToOmit.includes(ascendant.id) &&\r\n        ascendant.id !== null\r\n    );\r\n\r\n  return (\r\n    <CrumbSimpleMenu\r\n      onOpen={() => setShouldFetch(true)}\r\n      onClose={() => setShouldFetch(false)}\r\n      aria-label={formatMessage({\r\n        id: getTrad('header.breadcrumbs.menu.label'),\r\n        defaultMessage: 'Get more ascendants folders',\r\n      })}\r\n      label=\"...\"\r\n    >\r\n      {isLoading && (\r\n        <MenuItem>\r\n          <Loader small>\r\n            {formatMessage({\r\n              id: getTrad('content.isLoading'),\r\n              defaultMessage: 'Content is loading.',\r\n            })}\r\n          </Loader>\r\n        </MenuItem>\r\n      )}\r\n      {filteredAscendants &&\r\n        filteredAscendants.map((ascendant) => {\r\n          if (onChangeFolder) {\r\n            return (\r\n              <MenuItem\r\n                tag=\"button\"\r\n                type=\"button\"\r\n                onClick={() => onChangeFolder(Number(ascendant.id), ascendant.path)}\r\n                key={ascendant.id}\r\n              >\r\n                {ascendant.label}\r\n              </MenuItem>\r\n            );\r\n          }\r\n\r\n          const url = getFolderURL(pathname, query, {\r\n            folder: typeof ascendant?.id === 'string' ? ascendant.id : undefined,\r\n            folderPath: ascendant?.path,\r\n          });\r\n\r\n          return (\r\n            <MenuItem isLink href={url} key={ascendant.id}>\r\n              {ascendant.label}\r\n            </MenuItem>\r\n          );\r\n        })}\r\n    </CrumbSimpleMenu>\r\n  );\r\n};\r\n","import {\r\n  Breadcrumbs as BaseBreadcrumbs,\r\n  Crumb,\r\n  CrumbLink,\r\n  BreadcrumbsProps as BaseBreadcrumbsProps,\r\n} from '@strapi/design-system';\r\nimport { useIntl, MessageDescriptor } from 'react-intl';\r\nimport { Link as ReactRouterLink } from 'react-router-dom';\r\n\r\nimport { CrumbSimpleMenuAsync } from './CrumbSimpleMenuAsync';\r\n\r\nexport type CrumbDefinition = {\r\n  id?: number | null;\r\n  label?: MessageDescriptor | string;\r\n  href?: string;\r\n  path?: string;\r\n};\r\n\r\nexport interface BreadcrumbsProps extends BaseBreadcrumbsProps {\r\n  breadcrumbs: Array<CrumbDefinition>;\r\n  currentFolderId?: number;\r\n  onChangeFolder?: (id: number, path?: string) => void;\r\n}\r\n\r\nexport const Breadcrumbs = ({\r\n  breadcrumbs,\r\n  onChangeFolder,\r\n  currentFolderId,\r\n  ...props\r\n}: BreadcrumbsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <BaseBreadcrumbs {...props}>\r\n      {breadcrumbs.map((crumb, index) => {\r\n        if (Array.isArray(crumb)) {\r\n          return (\r\n            <CrumbSimpleMenuAsync\r\n              parentsToOmit={[...breadcrumbs]\r\n                .splice(index + 1, breadcrumbs.length - 1)\r\n                .map((parent) => parent.id!)}\r\n              key={`breadcrumb-${crumb?.id ?? 'menu'}`}\r\n              currentFolderId={currentFolderId}\r\n              onChangeFolder={onChangeFolder}\r\n            />\r\n          );\r\n        }\r\n\r\n        const isCurrentFolderMediaLibrary = crumb.id === null && currentFolderId === undefined;\r\n\r\n        if (currentFolderId !== crumb.id && !isCurrentFolderMediaLibrary) {\r\n          if (onChangeFolder) {\r\n            return (\r\n              <CrumbLink\r\n                key={`breadcrumb-${crumb?.id ?? 'root'}`}\r\n                type=\"button\"\r\n                onClick={() => onChangeFolder(crumb.id!, crumb.path)}\r\n              >\r\n                {typeof crumb.label !== 'string' && crumb.label?.id\r\n                  ? formatMessage(crumb.label)\r\n                  : (crumb.label as string)}\r\n              </CrumbLink>\r\n            );\r\n          }\r\n          return (\r\n            <CrumbLink\r\n              key={`breadcrumb-${crumb?.id ?? 'root'}`}\r\n              to={crumb.href}\r\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n              // @ts-ignore - `tag` prop is not defined in the `BaseLinkProps` type\r\n              tag={ReactRouterLink}\r\n            >\r\n              {typeof crumb.label !== 'string' && crumb.label?.id\r\n                ? formatMessage(crumb.label)\r\n                : (crumb.label as string)}\r\n            </CrumbLink>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <Crumb\r\n            key={`breadcrumb-${crumb?.id ?? 'root'}`}\r\n            isCurrent={index + 1 === breadcrumbs.length}\r\n          >\r\n            {typeof crumb.label !== 'string' && crumb.label?.id\r\n              ? formatMessage(crumb.label)\r\n              : (crumb.label as string)}\r\n          </Crumb>\r\n        );\r\n      })}\r\n    </BaseBreadcrumbs>\r\n  );\r\n};\r\n","import { Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst EmptyAssetCard = styled(Box)`\r\n  background: linear-gradient(\r\n    180deg,\r\n    rgba(234, 234, 239, 0) 0%,\r\n    ${({ theme }) => theme.colors.neutral200} 100%\r\n  );\r\n  opacity: 0.33;\r\n`;\r\n\r\nconst PlaceholderSize = {\r\n  S: 138,\r\n  M: 234,\r\n};\r\n\r\ninterface EmptyAssetGridProps {\r\n  count: number;\r\n  size: 'S' | 'M';\r\n}\r\n\r\nexport const EmptyAssetGrid = ({ count, size }: EmptyAssetGridProps) => {\r\n  return (\r\n    <Layouts.Grid size={size}>\r\n      {Array(count)\r\n        .fill(null)\r\n        .map((_, idx) => (\r\n          <EmptyAssetCard\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            key={`empty-asset-card-${idx}`}\r\n            height={`${PlaceholderSize[size]}px`}\r\n            hasRadius\r\n          />\r\n        ))}\r\n    </Layouts.Grid>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\n\r\nimport { EmptyAssetGrid } from './EmptyAssetGrid';\r\n\r\ninterface EmptyAssetsProps {\r\n  action?: React.ReactNode;\r\n  icon?: React.ElementType;\r\n  content: string;\r\n  size?: 'S' | 'M';\r\n  count?: number;\r\n}\r\n\r\nexport const EmptyAssets = ({\r\n  icon: Icon = EmptyDocuments,\r\n  content,\r\n  action,\r\n  size = 'M',\r\n  count = 12,\r\n}: EmptyAssetsProps) => {\r\n  return (\r\n    <Box position=\"relative\">\r\n      <EmptyAssetGrid size={size} count={count} />\r\n\r\n      <Box position=\"absolute\" top={11} width=\"100%\">\r\n        <Flex direction=\"column\" alignItems=\"center\" gap={4} textAlign=\"center\">\r\n          <Flex direction=\"column\" alignItems=\"center\" gap={6}>\r\n            <Icon width=\"160px\" height=\"88px\" />\r\n\r\n            <Typography variant=\"delta\" tag=\"p\" textColor=\"neutral600\">\r\n              {content}\r\n            </Typography>\r\n          </Flex>\r\n\r\n          {action}\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { createContext, useContext } from 'react';\r\n\r\nexport const FolderCardContext = createContext<{\r\n  id?: string;\r\n}>({});\r\n\r\nexport function useFolderCard() {\r\n  return useContext(FolderCardContext);\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { Box, CardAction, Flex, BoxProps } from '@strapi/design-system';\r\nimport { Folder } from '@strapi/icons';\r\nimport { NavLink, LinkProps } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { FolderCardContext } from '../contexts/FolderCard';\r\n\r\nconst FauxClickWrapper = styled.button`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  opacity: 0;\r\n  top: 0;\r\n  width: 100%;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst StyledFolder = styled(Folder)`\r\n  path {\r\n    fill: currentColor;\r\n  }\r\n`;\r\n\r\nconst CardActionDisplay = styled(Box)`\r\n  display: none;\r\n`;\r\n\r\nconst Card = styled(Box)`\r\n  &:hover,\r\n  &:focus-within {\r\n    ${CardActionDisplay} {\r\n      display: ${({ $isCardActions }) => ($isCardActions ? 'block' : '')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface FolderCardProps extends Omit<BoxProps, 'id'> {\r\n  ariaLabel: string;\r\n  children: React.ReactNode;\r\n  id?: string;\r\n  startAction?: React.ReactNode;\r\n  cardActions?: React.ReactNode;\r\n  onClick?: () => void;\r\n  to?: LinkProps['to'];\r\n}\r\n\r\nexport const FolderCard = React.forwardRef(\r\n  (\r\n    {\r\n      children,\r\n      startAction = null,\r\n      cardActions = null,\r\n      ariaLabel,\r\n      onClick,\r\n      to,\r\n      ...props\r\n    }: FolderCardProps,\r\n    ref\r\n  ) => {\r\n    const generatedId = React.useId();\r\n    const fodlerCtxValue = React.useMemo(() => ({ id: generatedId }), [generatedId]);\r\n\r\n    return (\r\n      <FolderCardContext.Provider value={fodlerCtxValue}>\r\n        <Card position=\"relative\" tabIndex={0} $isCardActions={!!cardActions} ref={ref} {...props}>\r\n          <FauxClickWrapper\r\n            to={to || undefined}\r\n            as={to ? NavLink : 'button'}\r\n            type={to ? undefined : 'button'}\r\n            onClick={onClick}\r\n            tabIndex={-1}\r\n            aria-label={ariaLabel}\r\n            aria-hidden\r\n          />\r\n\r\n          <Flex\r\n            hasRadius\r\n            borderStyle=\"solid\"\r\n            borderWidth=\"1px\"\r\n            borderColor=\"neutral150\"\r\n            background=\"neutral0\"\r\n            shadow=\"tableShadow\"\r\n            padding={3}\r\n            gap={2}\r\n            cursor=\"pointer\"\r\n          >\r\n            {startAction}\r\n\r\n            <Box\r\n              hasRadius\r\n              background=\"secondary100\"\r\n              color=\"secondary500\"\r\n              paddingBottom={2}\r\n              paddingLeft={3}\r\n              paddingRight={3}\r\n              paddingTop={2}\r\n            >\r\n              <StyledFolder width=\"2.4rem\" height=\"2.4rem\" />\r\n            </Box>\r\n\r\n            {children}\r\n\r\n            <CardActionDisplay>\r\n              <CardAction right={4} position=\"end\">\r\n                {cardActions}\r\n              </CardAction>\r\n            </CardActionDisplay>\r\n          </Flex>\r\n        </Card>\r\n      </FolderCardContext.Provider>\r\n    );\r\n  }\r\n);\r\n","import { Flex, FlexProps } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useFolderCard } from '../contexts/FolderCard';\r\n\r\nconst StyledBox = styled(Flex)`\r\n  user-select: none;\r\n`;\r\n\r\nexport const FolderCardBody = (props: FlexProps) => {\r\n  const { id } = useFolderCard();\r\n\r\n  return (\r\n    <StyledBox\r\n      {...props}\r\n      id={`${id}-title`}\r\n      data-testid={`${id}-title`}\r\n      alignItems=\"flex-start\"\r\n      direction=\"column\"\r\n      maxWidth=\"100%\"\r\n      overflow=\"hidden\"\r\n      position=\"relative\"\r\n    />\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { Box, BoxProps } from '@strapi/design-system';\r\nimport { NavLink, LinkProps } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nconst BoxOutline = styled(Box)`\r\n  &:focus {\r\n    outline: 2px solid ${({ theme }) => theme.colors.primary600};\r\n    outline-offset: -2px;\r\n  }\r\n`;\r\n\r\nconst BoxTextDecoration = styled(BoxOutline)`\r\n  text-decoration: none;\r\n`;\r\n\r\ninterface FolderCardBodyActionProps extends BoxProps {\r\n  to?: LinkProps['to'];\r\n}\r\n\r\nexport const FolderCardBodyAction = ({ to, ...props }: FolderCardBodyActionProps) => {\r\n  if (to) {\r\n    return (\r\n      <BoxTextDecoration\r\n        // padding needed to give outline space to appear\r\n        // since FolderCardBody needs overflow hidden property\r\n        padding={1}\r\n        tag={NavLink}\r\n        maxWidth=\"100%\"\r\n        to={to}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <BoxOutline padding={1} tag=\"button\" type=\"button\" maxWidth=\"100%\" {...props} />;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Box, Grid, KeyboardNavigable, Typography } from '@strapi/design-system';\r\n\r\nexport interface FolderGridListProps {\r\n  children: React.ReactNode;\r\n  title?: string | null;\r\n}\r\n\r\nexport const FolderGridList = ({ title = null, children }: FolderGridListProps) => {\r\n  return (\r\n    <KeyboardNavigable tagName=\"article\">\r\n      {title && (\r\n        <Box paddingBottom={2}>\r\n          <Typography tag=\"h2\" variant=\"delta\" fontWeight=\"semiBold\">\r\n            {title}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      <Grid.Root gap={4}>{children}</Grid.Root>\r\n    </KeyboardNavigable>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { SingleSelect, SingleSelectOption } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { sortOptions } from '../../constants';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport type { Query } from '../../../../shared/contracts/files';\r\n\r\ninterface SortPickerProps {\r\n  onChangeSort: (value: Query['sort'] | string) => void;\r\n  value?: string;\r\n}\r\n\r\nexport const SortPicker = ({ onChangeSort, value }: SortPickerProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <SingleSelect\r\n      size=\"S\"\r\n      value={value}\r\n      onChange={(value) => onChangeSort(value.toString())}\r\n      aria-label={formatMessage({\r\n        id: getTrad('sort.label'),\r\n        defaultMessage: 'Sort by',\r\n      })}\r\n      placeholder={formatMessage({\r\n        id: getTrad('sort.label'),\r\n        defaultMessage: 'Sort by',\r\n      })}\r\n    >\r\n      {sortOptions.map((filter) => (\r\n        <SingleSelectOption key={filter.key} value={filter.value}>\r\n          {formatMessage({ id: getTrad(filter.key), defaultMessage: `${filter.value}` })}\r\n        </SingleSelectOption>\r\n      ))}\r\n    </SingleSelect>\r\n  );\r\n};\r\n","import { Avatar, Box, Flex } from '@strapi/design-system';\r\nimport { Folder } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetType } from '../../constants';\r\nimport {\r\n  createAssetUrl,\r\n  getFileExtension,\r\n  getTrad,\r\n  prefixFileUrlWithBackendUrl,\r\n} from '../../utils';\r\nimport { VideoPreview } from '../AssetCard/VideoPreview';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\n\r\nconst VideoPreviewWrapper = styled(Box)`\r\n  figure {\r\n    width: ${({ theme }) => theme.spaces[7]};\r\n    height: ${({ theme }) => theme.spaces[7]};\r\n  }\r\n\r\n  canvas,\r\n  video {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\ninterface PreviewCellProps {\r\n  content: File;\r\n  type?: string;\r\n}\r\n\r\nexport const PreviewCell = ({ type, content }: PreviewCellProps) => {\r\n  const { formatMessage } = useIntl();\r\n  if (type === 'folder') {\r\n    return (\r\n      <Flex\r\n        justifyContent=\"center\"\r\n        background=\"secondary100\"\r\n        width=\"3.2rem\"\r\n        height=\"3.2rem\"\r\n        borderRadius=\"50%\"\r\n      >\r\n        <Folder\r\n          aria-label={formatMessage({\r\n            id: getTrad('header.actions.add-assets.folder'),\r\n            defaultMessage: 'folder',\r\n          })}\r\n          fill=\"secondary500\"\r\n          width=\"1.6rem\"\r\n          height=\"1.6rem\"\r\n        />\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  const { alternativeText, ext, formats, mime, name, url } = content;\r\n\r\n  if (mime?.includes(AssetType.Image)) {\r\n    const mediaURL =\r\n      prefixFileUrlWithBackendUrl(formats?.thumbnail?.url) ?? prefixFileUrlWithBackendUrl(url);\r\n\r\n    return (\r\n      <Avatar.Item\r\n        src={mediaURL}\r\n        alt={alternativeText || undefined}\r\n        preview\r\n        fallback={alternativeText}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (mime?.includes(AssetType.Video)) {\r\n    return (\r\n      <VideoPreviewWrapper>\r\n        <VideoPreview\r\n          url={createAssetUrl(content, true) || ''}\r\n          mime={mime}\r\n          alt={alternativeText ?? name}\r\n        />\r\n      </VideoPreviewWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box background=\"secondary100\" color=\"secondary600\" width=\"3.2rem\" height=\"3.2rem\">\r\n      {getFileExtension(ext)}\r\n    </Box>\r\n  );\r\n};\r\n","import { Typography } from '@strapi/design-system';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { formatBytes, getFileExtension } from '../../utils';\r\n\r\nimport { PreviewCell } from './PreviewCell';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\n\r\nexport interface CellContentProps {\r\n  cellType: string;\r\n  contentType?: string;\r\n  content: File;\r\n  name: string;\r\n}\r\n\r\nexport const CellContent = ({ cellType, contentType, content, name }: CellContentProps) => {\r\n  const { formatDate, formatMessage } = useIntl();\r\n  const contentValue = content[name as Extract<keyof File, string>];\r\n\r\n  switch (cellType) {\r\n    case 'image':\r\n      return <PreviewCell type={contentType} content={content} />;\r\n\r\n    case 'date':\r\n      if (typeof contentValue === 'string') {\r\n        return <Typography>{formatDate(parseISO(contentValue), { dateStyle: 'full' })}</Typography>;\r\n      }\r\n\r\n    case 'size':\r\n      if (contentType === 'folder')\r\n        return (\r\n          <Typography\r\n            aria-label={formatMessage({\r\n              id: 'list.table.content.empty-label',\r\n              defaultMessage: 'This field is empty',\r\n            })}\r\n          >\r\n            -\r\n          </Typography>\r\n        );\r\n      if (typeof contentValue === 'string' || typeof contentValue === 'number') {\r\n        return <Typography>{formatBytes(contentValue)}</Typography>;\r\n      }\r\n\r\n    case 'ext':\r\n      if (contentType === 'folder')\r\n        return (\r\n          <Typography\r\n            aria-label={formatMessage({\r\n              id: 'list.table.content.empty-label',\r\n              defaultMessage: 'This field is empty',\r\n            })}\r\n          >\r\n            -\r\n          </Typography>\r\n        );\r\n\r\n      if (typeof contentValue === 'string') {\r\n        return <Typography>{getFileExtension(contentValue)?.toUpperCase()}</Typography>;\r\n      }\r\n    case 'text':\r\n      if (typeof contentValue === 'string') {\r\n        return <Typography>{contentValue}</Typography>;\r\n      }\r\n\r\n    default:\r\n      return (\r\n        <Typography\r\n          aria-label={formatMessage({\r\n            id: 'list.table.content.empty-label',\r\n            defaultMessage: 'This field is empty',\r\n          })}\r\n        >\r\n          -\r\n        </Typography>\r\n      );\r\n  }\r\n};\r\n","import { Checkbox, Flex, IconButton, Tbody, Td, Tr } from '@strapi/design-system';\r\nimport { Eye, Pencil } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { tableHeaders as cells } from '../../constants';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport { CellContent } from './CellContent';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\nimport type { Folder } from '../../../../shared/contracts/folders';\r\n\r\ninterface FileRow extends File {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\ninterface FolderRow extends Folder {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface TableRowsProps {\r\n  onChangeFolder?: ((folderId: number, folderPath?: string) => void) | null;\r\n  onEditAsset: (asset: FileRow) => void;\r\n  onEditFolder: (folder: FolderRow) => void;\r\n  onSelectOne: (element: FileRow | FolderRow) => void;\r\n  rows: FileRow[] | FolderRow[];\r\n  selected: FileRow[] | FolderRow[];\r\n}\r\n\r\nexport const TableRows = ({\r\n  onChangeFolder = null,\r\n  onEditAsset,\r\n  onEditFolder,\r\n  onSelectOne,\r\n  rows = [],\r\n  selected = [],\r\n}: TableRowsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleRowClickFn = (\r\n    element: FileRow | FolderRow,\r\n    id: number,\r\n    path: FolderRow['path'],\r\n    elementType?: string\r\n  ) => {\r\n    if (elementType === 'asset') {\r\n      onEditAsset(element as FileRow);\r\n    } else {\r\n      if (onChangeFolder) {\r\n        onChangeFolder(id, path);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Tbody>\r\n      {rows.map((element) => {\r\n        const { path, id, isSelectable, name, folderURL, type: contentType } = element;\r\n\r\n        const isSelected = !!selected.find(\r\n          (currentRow) => currentRow.id === id && currentRow.type === contentType\r\n        );\r\n\r\n        return (\r\n          <Tr\r\n            key={id}\r\n            onClick={() => handleRowClickFn(element, id, path || undefined, contentType)}\r\n          >\r\n            <Td onClick={(e) => e.stopPropagation()}>\r\n              <Checkbox\r\n                aria-label={formatMessage(\r\n                  {\r\n                    id: contentType === 'asset' ? 'list-assets-select' : 'list.folder.select',\r\n                    defaultMessage:\r\n                      contentType === 'asset' ? 'Select {name} asset' : 'Select {name} folder',\r\n                  },\r\n                  { name }\r\n                )}\r\n                disabled={!isSelectable}\r\n                onCheckedChange={() => onSelectOne(element)}\r\n                checked={isSelected}\r\n              />\r\n            </Td>\r\n            {cells.map(({ name, type: cellType }) => {\r\n              return (\r\n                <Td key={name}>\r\n                  <CellContent\r\n                    content={element as FileRow}\r\n                    cellType={cellType}\r\n                    contentType={contentType}\r\n                    name={name}\r\n                  />\r\n                </Td>\r\n              );\r\n            })}\r\n\r\n            <Td onClick={(e) => e.stopPropagation()}>\r\n              <Flex justifyContent=\"flex-end\">\r\n                {contentType === 'folder' &&\r\n                  (folderURL ? (\r\n                    <IconButton\r\n                      tag={Link}\r\n                      label={formatMessage({\r\n                        id: getTrad('list.folders.link-label'),\r\n                        defaultMessage: 'Access folder',\r\n                      })}\r\n                      to={folderURL}\r\n                      variant=\"ghost\"\r\n                    >\r\n                      <Eye />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <IconButton\r\n                      tag=\"button\"\r\n                      label={formatMessage({\r\n                        id: getTrad('list.folders.link-label'),\r\n                        defaultMessage: 'Access folder',\r\n                      })}\r\n                      onClick={() => onChangeFolder && onChangeFolder(id)}\r\n                      variant=\"ghost\"\r\n                    >\r\n                      <Eye />\r\n                    </IconButton>\r\n                  ))}\r\n                <IconButton\r\n                  label={formatMessage({\r\n                    id: getTrad('control-card.edit'),\r\n                    defaultMessage: 'Edit',\r\n                  })}\r\n                  onClick={() =>\r\n                    contentType === 'asset'\r\n                      ? onEditAsset(element as FileRow)\r\n                      : onEditFolder(element as FolderRow)\r\n                  }\r\n                  variant=\"ghost\"\r\n                >\r\n                  <Pencil />\r\n                </IconButton>\r\n              </Flex>\r\n            </Td>\r\n          </Tr>\r\n        );\r\n      })}\r\n    </Tbody>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport {\r\n  Checkbox,\r\n  IconButton,\r\n  Table,\r\n  Th,\r\n  Thead,\r\n  Tooltip,\r\n  Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n} from '@strapi/design-system';\r\nimport { CaretDown, CaretUp } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { tableHeaders } from '../../constants';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport { TableRows } from './TableRows';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\nimport type { Folder } from '../../../../shared/contracts/folders';\r\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\r\n\r\nexport interface FileRow extends File {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface FolderRow extends Folder {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface TableListProps {\r\n  isFolderSelectionAllowed?: boolean;\r\n  allowedTypes?: AllowedTypes[];\r\n  assetCount?: number;\r\n  folderCount?: number;\r\n  indeterminate?: boolean;\r\n  onChangeSort?: ((sortQuery: string) => void) | null;\r\n  onChangeFolder?: ((folderId: number, folderPath?: string) => void) | null;\r\n  onEditAsset?: ((asset: FileRow) => void) | null;\r\n  onEditFolder?: ((folder: FolderRow) => void) | null;\r\n  onSelectAll: (checked: boolean | string, rows?: FolderRow[] | FileRow[]) => void;\r\n  onSelectOne: (element: FileRow | FolderRow) => void;\r\n  rows?: FileRow[] | FolderRow[];\r\n  selected?: FileRow[] | FolderRow[];\r\n  shouldDisableBulkSelect?: boolean;\r\n  sortQuery?: string;\r\n}\r\n\r\nexport const TableList = ({\r\n  assetCount = 0,\r\n  folderCount = 0,\r\n  indeterminate = false,\r\n  onChangeSort = null,\r\n  onChangeFolder = null,\r\n  onEditAsset = null,\r\n  onEditFolder = null,\r\n  onSelectAll,\r\n  onSelectOne,\r\n  rows = [],\r\n  selected = [],\r\n  shouldDisableBulkSelect = false,\r\n  sortQuery = '',\r\n}: TableListProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [sortBy, sortOrder] = sortQuery.split(':');\r\n\r\n  const handleClickSort = (isSorted: boolean, name: string) => {\r\n    const nextSortOrder = isSorted && sortOrder === 'ASC' ? 'DESC' : 'ASC';\r\n    const nextSort = `${name}:${nextSortOrder}`;\r\n\r\n    onChangeSort && onChangeSort(nextSort);\r\n  };\r\n\r\n  return (\r\n    <Table colCount={tableHeaders.length + 2} rowCount={assetCount + folderCount + 1}>\r\n      <Thead>\r\n        <Tr>\r\n          <Th>\r\n            <Checkbox\r\n              aria-label={formatMessage({\r\n                id: getTrad('bulk.select.label'),\r\n                defaultMessage: 'Select all folders & assets',\r\n              })}\r\n              disabled={shouldDisableBulkSelect}\r\n              onCheckedChange={(checked) => onSelectAll(checked, rows)}\r\n              checked={\r\n                indeterminate && !shouldDisableBulkSelect\r\n                  ? 'indeterminate'\r\n                  : (assetCount > 0 || folderCount > 0) &&\r\n                    selected.length === assetCount + folderCount\r\n              }\r\n            />\r\n          </Th>\r\n          {tableHeaders.map(({ metadatas: { label, isSortable }, name, key }) => {\r\n            const isSorted = sortBy === name;\r\n            const isUp = sortOrder === 'ASC';\r\n            const tableHeaderLabel = formatMessage(label);\r\n            const sortLabel = formatMessage(\r\n              { id: 'list.table.header.sort', defaultMessage: 'Sort on {label}' },\r\n              { label: tableHeaderLabel }\r\n            );\r\n\r\n            return (\r\n              <Th\r\n                action={\r\n                  isSorted && (\r\n                    <IconButton\r\n                      label={sortLabel}\r\n                      onClick={() => handleClickSort(isSorted, name)}\r\n                      variant=\"ghost\"\r\n                    >\r\n                      {isUp ? <CaretUp /> : <CaretDown />}\r\n                    </IconButton>\r\n                  )\r\n                }\r\n                key={key}\r\n              >\r\n                <Tooltip label={isSortable ? sortLabel : tableHeaderLabel}>\r\n                  {isSortable ? (\r\n                    <Typography\r\n                      onClick={() => handleClickSort(isSorted, name)}\r\n                      tag={isSorted ? 'span' : 'button'}\r\n                      textColor=\"neutral600\"\r\n                      variant=\"sigma\"\r\n                    >\r\n                      {tableHeaderLabel}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Typography textColor=\"neutral600\" variant=\"sigma\">\r\n                      {tableHeaderLabel}\r\n                    </Typography>\r\n                  )}\r\n                </Tooltip>\r\n              </Th>\r\n            );\r\n          })}\r\n          <Th>\r\n            <VisuallyHidden>\r\n              {formatMessage({\r\n                id: getTrad('list.table.header.actions'),\r\n                defaultMessage: 'actions',\r\n              })}\r\n            </VisuallyHidden>\r\n          </Th>\r\n        </Tr>\r\n      </Thead>\r\n      <TableRows\r\n        onChangeFolder={onChangeFolder}\r\n        onEditAsset={onEditAsset!}\r\n        onEditFolder={onEditFolder!}\r\n        rows={rows}\r\n        onSelectOne={onSelectOne}\r\n        selected={selected}\r\n      />\r\n    </Table>\r\n  );\r\n};\r\n","import { Tag } from '@strapi/design-system';\r\nimport { Cross } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport type { FilterStructure } from './FilterList';\r\n\r\ntype FilterTagAttribute = {\r\n  fieldSchema?: {\r\n    type?: string; // \"date\" | \"enumeration\"\r\n    options?: {\r\n      label: string; // \"audio\" | \"video\" | \"image\" | \"file\"\r\n      value: string; // \"audio\" | \"video\" | \"image\" | \"file\"\r\n    }[];\r\n  };\r\n  metadatas?: {\r\n    label?: string; // \"createdAt\" | \"updatedAt\" | \"type\"\r\n  };\r\n  name: string; // \"createdAt\" | \"updatedAt\" | \"mime\"\r\n};\r\n\r\ninterface FilterTagProps {\r\n  attribute: FilterTagAttribute;\r\n  operator: string;\r\n  value: string;\r\n  filter: FilterStructure;\r\n  onClick: (filter: FilterStructure) => void;\r\n}\r\n\r\nexport const FilterTag = ({ attribute, filter, onClick, operator, value }: FilterTagProps) => {\r\n  const { formatMessage, formatDate, formatTime } = useIntl();\r\n\r\n  const handleClick = () => {\r\n    onClick(filter);\r\n  };\r\n\r\n  const { fieldSchema } = attribute;\r\n\r\n  const type = fieldSchema?.type;\r\n\r\n  let formattedValue = value;\r\n\r\n  if (type === 'date') {\r\n    formattedValue = formatDate(value, { dateStyle: 'full' });\r\n  }\r\n\r\n  if (type === 'datetime') {\r\n    formattedValue = formatDate(value, { dateStyle: 'full', timeStyle: 'short' });\r\n  }\r\n\r\n  if (type === 'time') {\r\n    const [hour, minute] = value.split(':');\r\n    const date = new Date();\r\n    date.setHours(Number(hour));\r\n    date.setMinutes(Number(minute));\r\n\r\n    formattedValue = formatTime(date, {\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n    });\r\n  }\r\n\r\n  const content = `${attribute.metadatas?.label} ${formatMessage({\r\n    id: `components.FilterOptions.FILTER_TYPES.${operator}`,\r\n    defaultMessage: operator,\r\n  })} ${formattedValue}`;\r\n\r\n  return (\r\n    <Tag onClick={handleClick} icon={<Cross />} padding={1}>\r\n      {content}\r\n    </Tag>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\n/**\r\n *\r\n * FilterList\r\n *\r\n */\r\nimport { FilterTag } from './FilterTag';\r\n\r\ntype NumberKeyedObject = Record<number, string>;\r\n\r\ntype StringFilter = {\r\n  [key: string]: string;\r\n};\r\n\r\ntype MimeFilter = {\r\n  [key: string]:\r\n    | string\r\n    | NumberKeyedObject\r\n    | Record<string, string | NumberKeyedObject>\r\n    | undefined;\r\n};\r\n\r\nexport type FilterStructure = {\r\n  [key: string]: MimeFilter | StringFilter | undefined;\r\n};\r\n\r\nexport interface FilterListProps {\r\n  appliedFilters: FilterStructure[];\r\n  filtersSchema: {\r\n    name: string;\r\n    metadatas?: {\r\n      label?: string;\r\n    };\r\n    fieldSchema?: {\r\n      type?: string;\r\n      mainField?: {\r\n        name: string;\r\n        type: string;\r\n      };\r\n      options?: {\r\n        label: string;\r\n        value: string;\r\n      }[];\r\n    };\r\n  }[];\r\n  onRemoveFilter: (filters: FilterStructure[]) => void;\r\n}\r\n\r\nexport const FilterList = ({ appliedFilters, filtersSchema, onRemoveFilter }: FilterListProps) => {\r\n  const handleClick = (filter: FilterStructure) => {\r\n    const nextFilters = appliedFilters.filter((prevFilter) => {\r\n      const name = Object.keys(filter)[0];\r\n      const filterName = filter[name];\r\n      if (filterName !== undefined) {\r\n        const filterType = Object.keys(filterName)[0];\r\n        const filterValue = filterName[filterType];\r\n        if (typeof filterValue === 'string') {\r\n          const decodedValue = decodeURIComponent(filterValue);\r\n          return prevFilter[name]?.[filterType] !== decodedValue;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    onRemoveFilter(nextFilters);\r\n  };\r\n\r\n  return appliedFilters.map((filter, i) => {\r\n    const attributeName = Object.keys(filter)[0];\r\n    const attribute = filtersSchema.find(({ name }) => name === attributeName);\r\n\r\n    if (!attribute) {\r\n      // Handle the case where attribute is undefined\r\n      return null;\r\n    }\r\n\r\n    const filterObj = filter[attributeName];\r\n    const operator = Object.keys(filterObj!)[0];\r\n    let value = filterObj![operator];\r\n\r\n    if (Array.isArray(value)) {\r\n      value = value.join(', ');\r\n    } else if (typeof value === 'object') {\r\n      value = Object.values(value).join(', ');\r\n    } else {\r\n      value =\r\n        Array.isArray(value) || typeof value === 'object'\r\n          ? Object.values(value).join(', ')\r\n          : decodeURIComponent(value!);\r\n    }\r\n\r\n    let displayedOperator = operator;\r\n\r\n    if (attribute?.name === 'mime') {\r\n      displayedOperator = operator === '$contains' ? '$eq' : '$ne';\r\n\r\n      // Type is file\r\n      // The filter for the file is the following: { mime: {$not: {$contains: ['image', 'video']}}}\r\n      if (operator === '$not') {\r\n        value = 'file';\r\n        displayedOperator = '$eq';\r\n      }\r\n\r\n      // Here the type is file and the filter is not file\r\n      // { mime: {$contains: ['image', 'video'] }}\r\n      if (['image', 'video'].includes(value[0]) && ['image', 'video'].includes(value[1])) {\r\n        value = 'file';\r\n        displayedOperator = '$ne';\r\n      }\r\n    }\r\n\r\n    return (\r\n      <FilterTag\r\n        // eslint-disable-next-line react/no-array-index-key\r\n        key={`${attributeName}-${i}`}\r\n        attribute={attribute}\r\n        filter={filter}\r\n        onClick={handleClick}\r\n        operator={displayedOperator}\r\n        value={value as string}\r\n      />\r\n    );\r\n  });\r\n};\r\n","import { DateTimePicker, SingleSelectOption, SingleSelect } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface FilterValueInputProps {\r\n  label?: string;\r\n  onChange: (value: string) => void;\r\n  options?: { label?: string; value: string }[];\r\n  type?: string;\r\n  value?: string;\r\n}\r\n\r\nexport const FilterValueInput = ({\r\n  label = '',\r\n  onChange,\r\n  options = [],\r\n  type,\r\n  value = '',\r\n}: FilterValueInputProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (type === 'date') {\r\n    return (\r\n      <DateTimePicker\r\n        clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\r\n        aria-label={label}\r\n        name=\"datetimepicker\"\r\n        onChange={(date) => {\r\n          const formattedDate = date ? new Date(date).toISOString() : '';\r\n\r\n          onChange(formattedDate);\r\n        }}\r\n        onClear={() => onChange('')}\r\n        value={value ? new Date(value) : undefined}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SingleSelect\r\n      aria-label={label}\r\n      onChange={(value: string | number) => onChange(value.toString())}\r\n      value={value}\r\n    >\r\n      {options?.map((option) => {\r\n        return (\r\n          <SingleSelectOption key={option.value} value={option.value}>\r\n            {option.label}\r\n          </SingleSelectOption>\r\n        );\r\n      })}\r\n    </SingleSelect>\r\n  );\r\n};\r\n","interface GetFilterListProps {\r\n  fieldSchema: {\r\n    type: string;\r\n    options?: { value: string }[];\r\n    mainField?: {\r\n      schema: {\r\n        type: string;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport const getFilterList = ({\r\n  fieldSchema: { type: fieldType, mainField },\r\n}: GetFilterListProps) => {\r\n  const type = mainField?.schema.type ? mainField.schema.type : fieldType;\r\n\r\n  switch (type) {\r\n    case 'enumeration': {\r\n      return [\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$eq',\r\n            defaultMessage: 'is',\r\n          },\r\n          value: '$contains',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$ne',\r\n            defaultMessage: 'is not',\r\n          },\r\n          value: '$notContains',\r\n        },\r\n      ];\r\n    }\r\n\r\n    case 'date': {\r\n      return [\r\n        {\r\n          intlLabel: { id: 'components.FilterOptions.FILTER_TYPES.$eq', defaultMessage: 'is' },\r\n          value: '$eq',\r\n        },\r\n        {\r\n          intlLabel: { id: 'components.FilterOptions.FILTER_TYPES.$ne', defaultMessage: 'is not' },\r\n          value: '$ne',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$gt',\r\n            defaultMessage: 'is greater than',\r\n          },\r\n          value: '$gt',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$gte',\r\n            defaultMessage: 'is greater than or equal to',\r\n          },\r\n          value: '$gte',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$lt',\r\n            defaultMessage: 'is less than',\r\n          },\r\n          value: '$lt',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$lte',\r\n            defaultMessage: 'is less than or equal to',\r\n          },\r\n          value: '$lte',\r\n        },\r\n      ];\r\n    }\r\n\r\n    default:\r\n      return [\r\n        {\r\n          intlLabel: { id: 'components.FilterOptions.FILTER_TYPES.$eq', defaultMessage: 'is' },\r\n          value: '$eq',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$eqi',\r\n            defaultMessage: 'is (case insensitive)',\r\n          },\r\n          value: '$eqi',\r\n        },\r\n        {\r\n          intlLabel: { id: 'components.FilterOptions.FILTER_TYPES.$ne', defaultMessage: 'is not' },\r\n          value: '$ne',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$null',\r\n            defaultMessage: 'is null',\r\n          },\r\n          value: '$null',\r\n        },\r\n        {\r\n          intlLabel: {\r\n            id: 'components.FilterOptions.FILTER_TYPES.$notNull',\r\n            defaultMessage: 'is not null',\r\n          },\r\n          value: '$notNull',\r\n        },\r\n      ];\r\n  }\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\n/**\r\n *\r\n * FilterPopover\r\n *\r\n */\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  SingleSelectOption,\r\n  Popover,\r\n  SingleSelect,\r\n} from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { FilterValueInput } from './FilterValueInput';\r\nimport { getFilterList } from './utils/getFilterList';\r\n\r\ntype Filter = {\r\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\r\n    | {\r\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\r\n          | string[]\r\n          | string\r\n          | { $contains: string[] };\r\n      }\r\n    | undefined;\r\n};\r\n\r\nexport interface FilterPopoverProps {\r\n  displayedFilters: {\r\n    name: string;\r\n    metadatas?: {\r\n      label?: string;\r\n    };\r\n    fieldSchema: {\r\n      type: string;\r\n      options?: {\r\n        value: string;\r\n      }[];\r\n      mainField?: {\r\n        schema: {\r\n          type: string;\r\n        };\r\n      };\r\n    };\r\n  }[];\r\n  filters: Filter[];\r\n  onSubmit: (filters: Filter[]) => void;\r\n  onToggle: () => void;\r\n}\r\n\r\nexport const FilterPopover = ({\r\n  displayedFilters,\r\n  filters,\r\n  onSubmit,\r\n  onToggle,\r\n}: FilterPopoverProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const [modifiedData, setModifiedData] = React.useState({\r\n    name: 'createdAt',\r\n    filter: '$eq',\r\n    value: '',\r\n  });\r\n\r\n  const handleChangeFilterField = (value: string | number) => {\r\n    const nextField = displayedFilters.find((f) => f.name === value);\r\n    if (!nextField) {\r\n      return;\r\n    }\r\n    const {\r\n      fieldSchema: { type, options },\r\n    } = nextField;\r\n    let filterValue = '';\r\n\r\n    if (type === 'enumeration') {\r\n      filterValue = options?.[0].value || '';\r\n    }\r\n\r\n    const filter = getFilterList(nextField)[0].value;\r\n\r\n    setModifiedData({ name: value.toString(), filter, value: filterValue });\r\n  };\r\n\r\n  const handleChangeOperator = (operator: string | number) => {\r\n    if (modifiedData.name === 'mime') {\r\n      setModifiedData((prev) => ({ ...prev, filter: operator.toString(), value: 'image' }));\r\n    } else {\r\n      setModifiedData((prev) => ({ ...prev, filter: operator.toString(), value: '' }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    const encodedValue = encodeURIComponent(modifiedData.value);\r\n\r\n    if (encodedValue) {\r\n      if (modifiedData.name === 'mime') {\r\n        const alreadyAppliedFilters = filters.filter((filter) => {\r\n          return Object.keys(filter)[0] === 'mime';\r\n        });\r\n\r\n        if (modifiedData.value === 'file') {\r\n          const filtersWithoutMimeType = filters.filter((filter) => {\r\n            return Object.keys(filter)[0] !== 'mime';\r\n          });\r\n\r\n          let hasCurrentFilter = false;\r\n\r\n          let filterToAdd: Filter;\r\n\r\n          if (modifiedData.filter === '$contains') {\r\n            hasCurrentFilter =\r\n              alreadyAppliedFilters.find((filter) => {\r\n                if (typeof filter.mime?.$not !== 'string' && !Array.isArray(filter.mime?.$not)) {\r\n                  return filter.mime?.$not?.$contains !== undefined;\r\n                }\r\n              }) !== undefined;\r\n\r\n            filterToAdd = {\r\n              mime: {\r\n                $not: {\r\n                  $contains: ['image', 'video'],\r\n                },\r\n              },\r\n            };\r\n          } else {\r\n            hasCurrentFilter =\r\n              alreadyAppliedFilters.find((filter) => {\r\n                return Array.isArray(filter.mime?.$contains);\r\n              }) !== undefined;\r\n\r\n            filterToAdd = {\r\n              mime: {\r\n                $contains: ['image', 'video'],\r\n              },\r\n            };\r\n          }\r\n\r\n          if (hasCurrentFilter) {\r\n            onToggle();\r\n\r\n            return;\r\n          }\r\n\r\n          const nextFilters = [...filtersWithoutMimeType, filterToAdd];\r\n          onSubmit(nextFilters);\r\n\r\n          onToggle();\r\n\r\n          return;\r\n        }\r\n\r\n        const hasFilter =\r\n          alreadyAppliedFilters.find((filter) => {\r\n            const modifiedDataFilter = modifiedData.filter;\r\n            return (\r\n              filter.mime &&\r\n              filter.mime[modifiedDataFilter as keyof typeof filter.mime] === modifiedData.value\r\n            );\r\n          }) !== undefined;\r\n\r\n        // Don't apply the same filter twice\r\n        if (hasFilter) {\r\n          onToggle();\r\n\r\n          return;\r\n        }\r\n\r\n        const filtersWithoutFile = filters.filter((filter) => {\r\n          const filterType = Object.keys(filter)[0];\r\n\r\n          if (filterType !== 'mime') {\r\n            return true;\r\n          }\r\n\r\n          if (\r\n            typeof filter.mime?.$not !== 'string' &&\r\n            !Array.isArray(filter.mime?.$not) &&\r\n            filter.mime?.$not?.$contains !== undefined\r\n          ) {\r\n            return false;\r\n          }\r\n\r\n          if (Array.isArray(filter?.mime?.$contains)) {\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        });\r\n\r\n        const oppositeFilter = modifiedData.filter === '$contains' ? '$notContains' : '$contains';\r\n\r\n        const oppositeFilterIndex = filtersWithoutFile.findIndex((filter) => {\r\n          return filter.mime?.[oppositeFilter] === modifiedData.value;\r\n        });\r\n        const hasOppositeFilter = oppositeFilterIndex !== -1;\r\n\r\n        const filterToAdd = { [modifiedData.name]: { [modifiedData.filter]: modifiedData.value } };\r\n\r\n        if (!hasOppositeFilter) {\r\n          const nextFilters = [...filtersWithoutFile, filterToAdd];\r\n\r\n          onSubmit(nextFilters);\r\n\r\n          onToggle();\r\n\r\n          return;\r\n        }\r\n\r\n        if (hasOppositeFilter) {\r\n          const nextFilters = filtersWithoutFile.slice();\r\n          nextFilters.splice(oppositeFilterIndex, 1, filterToAdd);\r\n          onSubmit(nextFilters);\r\n\r\n          onToggle();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const hasFilter =\r\n        filters.find((filter) => {\r\n          const modifiedDataName = modifiedData.name as\r\n            | 'mime'\r\n            | 'createdAt'\r\n            | 'updatedAt'\r\n            | '$contains'\r\n            | '$notContains'\r\n            | '$eq'\r\n            | '$not';\r\n          return (\r\n            filter[modifiedDataName as 'mime' | 'createdAt' | 'updatedAt'] &&\r\n            filter[modifiedDataName as 'mime' | 'createdAt' | 'updatedAt']?.[\r\n              modifiedDataName as '$contains' | '$notContains' | '$eq' | '$not'\r\n            ] === encodedValue\r\n          );\r\n        }) !== undefined;\r\n\r\n      if (!hasFilter) {\r\n        const filterToAdd = { [modifiedData.name]: { [modifiedData.filter]: encodedValue } };\r\n\r\n        const nextFilters = [...filters, filterToAdd];\r\n\r\n        onSubmit(nextFilters);\r\n      }\r\n    }\r\n\r\n    onToggle();\r\n  };\r\n\r\n  const appliedFilter = displayedFilters.find((filter) => filter.name === modifiedData.name);\r\n\r\n  return (\r\n    <Popover.Content sideOffset={4}>\r\n      <form onSubmit={handleSubmit}>\r\n        <Flex padding={3} direction=\"column\" alignItems=\"stretch\" gap={1} style={{ minWidth: 184 }}>\r\n          <Box>\r\n            <SingleSelect\r\n              aria-label={formatMessage({\r\n                id: 'app.utils.select-field',\r\n                defaultMessage: 'Select field',\r\n              })}\r\n              name=\"name\"\r\n              size=\"M\"\r\n              onChange={handleChangeFilterField}\r\n              value={modifiedData.name}\r\n            >\r\n              {displayedFilters.map((filter) => {\r\n                return (\r\n                  <SingleSelectOption key={filter.name} value={filter.name}>\r\n                    {filter.metadatas?.label}\r\n                  </SingleSelectOption>\r\n                );\r\n              })}\r\n            </SingleSelect>\r\n          </Box>\r\n          <Box>\r\n            <SingleSelect\r\n              aria-label={formatMessage({\r\n                id: 'app.utils.select-filter',\r\n                defaultMessage: 'Select filter',\r\n              })}\r\n              name=\"filter\"\r\n              size=\"M\"\r\n              value={modifiedData.filter}\r\n              onChange={handleChangeOperator}\r\n            >\r\n              {getFilterList(appliedFilter!).map((option) => {\r\n                return (\r\n                  <SingleSelectOption key={option.value} value={option.value}>\r\n                    {formatMessage(option.intlLabel)}\r\n                  </SingleSelectOption>\r\n                );\r\n              })}\r\n            </SingleSelect>\r\n          </Box>\r\n          <Box>\r\n            <FilterValueInput\r\n              {...appliedFilter?.metadatas}\r\n              {...appliedFilter?.fieldSchema}\r\n              value={modifiedData.value}\r\n              onChange={(value) => setModifiedData((prev) => ({ ...prev, value }))}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Button size=\"L\" variant=\"secondary\" startIcon={<Plus />} type=\"submit\" fullWidth>\r\n              {formatMessage({ id: 'app.utils.add-filter', defaultMessage: 'Add filter' })}\r\n            </Button>\r\n          </Box>\r\n        </Flex>\r\n      </form>\r\n    </Popover.Content>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Button, Popover } from '@strapi/design-system';\r\nimport { Filter } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { displayedFilters } from '../../../utils';\r\nimport { FilterList } from '../../FilterList/FilterList';\r\nimport { FilterPopover } from '../../FilterPopover/FilterPopover';\r\n\r\ntype NumberKeyedObject = Record<number, string>;\r\n\r\ntype StringFilter = {\r\n  [key: string]: string;\r\n};\r\n\r\ntype MimeFilter = {\r\n  [key: string]:\r\n    | string\r\n    | NumberKeyedObject\r\n    | Record<string, string | NumberKeyedObject>\r\n    | undefined;\r\n};\r\n\r\nexport type FilterStructure = {\r\n  [key: string]: MimeFilter | StringFilter | undefined;\r\n};\r\n\r\nexport type Filter = {\r\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\r\n    | {\r\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\r\n          | string[]\r\n          | string\r\n          | { $contains: string[] };\r\n      }\r\n    | undefined;\r\n};\r\n\r\ninterface FiltersProps {\r\n  appliedFilters: FilterStructure[];\r\n  onChangeFilters: (filters: Filter[]) => void;\r\n}\r\n\r\nexport const Filters = ({ appliedFilters, onChangeFilters }: FiltersProps) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Popover.Root open={open} onOpenChange={setOpen}>\r\n      <Popover.Trigger>\r\n        <Button variant=\"tertiary\" startIcon={<Filter />} size=\"S\">\r\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <FilterPopover\r\n        onToggle={() => setOpen((prev) => !prev)}\r\n        displayedFilters={displayedFilters}\r\n        filters={appliedFilters}\r\n        onSubmit={onChangeFilters}\r\n      />\r\n\r\n      {appliedFilters && (\r\n        <FilterList\r\n          appliedFilters={appliedFilters}\r\n          filtersSchema={displayedFilters}\r\n          onRemoveFilter={onChangeFilters}\r\n        />\r\n      )}\r\n    </Popover.Root>\r\n  );\r\n};\r\n","import { Box, Flex, SingleSelectOption, SingleSelect, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface PageSizeProps {\r\n  onChangePageSize: (value: number) => void;\r\n  pageSize: number;\r\n}\r\n\r\nexport const PageSize = ({ onChangePageSize, pageSize }: PageSizeProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleChange = (value: string | number) => {\r\n    onChangePageSize(Number(value));\r\n  };\r\n\r\n  return (\r\n    <Flex>\r\n      <SingleSelect\r\n        size=\"S\"\r\n        aria-label={formatMessage({\r\n          id: 'components.PageFooter.select',\r\n          defaultMessage: 'Entries per page',\r\n        })}\r\n        onChange={handleChange}\r\n        value={pageSize.toString()}\r\n      >\r\n        <SingleSelectOption value=\"10\">10</SingleSelectOption>\r\n        <SingleSelectOption value=\"20\">20</SingleSelectOption>\r\n        <SingleSelectOption value=\"50\">50</SingleSelectOption>\r\n        <SingleSelectOption value=\"100\">100</SingleSelectOption>\r\n      </SingleSelect>\r\n      <Box paddingLeft={2}>\r\n        <Typography textColor=\"neutral600\" tag=\"label\" htmlFor=\"page-size\">\r\n          {formatMessage({\r\n            id: 'components.PageFooter.select',\r\n            defaultMessage: 'Entries per page',\r\n          })}\r\n        </Typography>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Box, Flex } from '@strapi/design-system';\r\n\r\nconst PaginationContext = React.createContext({ activePage: 1, pageCount: 1 });\r\nexport const usePagination = () => React.useContext(PaginationContext);\r\n\r\ninterface PaginationProps {\r\n  activePage: number;\r\n  children: React.ReactNode;\r\n  label?: string;\r\n  pageCount: number;\r\n}\r\n\r\nexport const Pagination = ({\r\n  children,\r\n  activePage,\r\n  pageCount,\r\n  label = 'pagination',\r\n}: PaginationProps) => {\r\n  const paginationValue = React.useMemo(() => ({ activePage, pageCount }), [activePage, pageCount]);\r\n\r\n  return (\r\n    <PaginationContext.Provider value={paginationValue}>\r\n      <Box tag=\"nav\" aria-label={label}>\r\n        <Flex tag=\"ul\" gap={1}>\r\n          {children}\r\n        </Flex>\r\n      </Box>\r\n    </PaginationContext.Provider>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\n/**\r\n * The component works as follows: this is a duplicate of the helper-plugin one but without the router\r\n * `1` , 2, 3, ... 10\r\n * 1, `2`, 3, ... 10\r\n * 1, 2, `3`, 4, ... 10\r\n * 1, 2, 3, `4`, 5, ... 10\r\n * 1, ..,4, `5`, 6, ... 10\r\n *\r\n * 1, ...., 8, 9, `10`\r\n * 1, ...., 8, `9`, 10\r\n * 1, ...., 7, `8`, 9, 10\r\n * 1, ... 6, `7`, 8, 9, 10\r\n */\r\nimport { Typography, VisuallyHidden } from '@strapi/design-system';\r\nimport { ChevronLeft, ChevronRight } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, css } from 'styled-components';\r\n\r\nimport { Pagination, usePagination } from './Pagination';\r\n\r\nconst PaginationText = styled(Typography)`\r\n  line-height: revert;\r\n`;\r\n\r\nconst linkWrapperStyles = css<{ $active?: boolean }>`\r\n  padding: ${({ theme }) => theme.spaces[3]};\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  box-shadow: ${({ $active, theme }) => ($active ? theme.shadows.filterShadow : undefined)};\r\n  text-decoration: none;\r\n  display: flex;\r\n  position: relative;\r\n  outline: none;\r\n\r\n  &:after {\r\n    transition-property: all;\r\n    transition-duration: 0.2s;\r\n    border-radius: 8px;\r\n    content: '';\r\n    position: absolute;\r\n    top: -4px;\r\n    bottom: -4px;\r\n    left: -4px;\r\n    right: -4px;\r\n    border: 2px solid transparent;\r\n  }\r\n\r\n  &:focus-visible {\r\n    outline: none;\r\n\r\n    &:after {\r\n      border-radius: 8px;\r\n      content: '';\r\n      position: absolute;\r\n      top: -5px;\r\n      bottom: -5px;\r\n      left: -5px;\r\n      right: -5px;\r\n      border: 2px solid ${(props) => props.theme.colors.primary600};\r\n    }\r\n  }\r\n`;\r\n\r\nconst LinkWrapperButton = styled.button<{ $active?: boolean }>`\r\n  ${linkWrapperStyles}\r\n`;\r\n\r\nconst LinkWrapperDiv = styled.div<{ $active?: boolean }>`\r\n  ${linkWrapperStyles}\r\n`;\r\n\r\nLinkWrapperButton.defaultProps = { type: 'button' };\r\n\r\nconst PageLinkWrapper = styled(LinkWrapperButton)`\r\n  color: ${({ theme, $active }) => ($active ? theme.colors.primary700 : theme.colors.neutral800)};\r\n  background: ${({ theme, $active }) => ($active ? theme.colors.neutral0 : undefined)};\r\n\r\n  &:hover {\r\n    box-shadow: ${({ theme }) => theme.shadows.filterShadow};\r\n  }\r\n`;\r\n\r\nconst ActionLinkWrapper = styled(LinkWrapperButton)`\r\n  font-size: 1.1rem;\r\n  svg path {\r\n    fill: ${(p) => (p['aria-disabled'] ? p.theme.colors.neutral300 : p.theme.colors.neutral600)};\r\n  }\r\n\r\n  &:focus,\r\n  &:hover {\r\n    svg path {\r\n      fill: ${(p) => (p['aria-disabled'] ? p.theme.colors.neutral300 : p.theme.colors.neutral700)};\r\n    }\r\n  }\r\n\r\n  ${(p) =>\r\n    p['aria-disabled']\r\n      ? `\r\n  pointer-events: none;\r\n    `\r\n      : undefined}\r\n`;\r\n\r\nconst DotsWrapper = styled(LinkWrapperDiv)`\r\n  color: ${({ theme }) => theme.colors.neutral800};\r\n`;\r\n\r\ninterface PaginationLinkProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface PageLinkProps extends PaginationLinkProps {\r\n  number: number;\r\n}\r\n\r\nconst PreviousLink = ({ children, ...props }: PaginationLinkProps) => {\r\n  const { activePage } = usePagination();\r\n\r\n  const disabled = activePage === 1;\r\n\r\n  return (\r\n    <li>\r\n      <ActionLinkWrapper aria-disabled={disabled} tabIndex={disabled ? -1 : undefined} {...props}>\r\n        <VisuallyHidden>{children}</VisuallyHidden>\r\n        <ChevronLeft aria-hidden />\r\n      </ActionLinkWrapper>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst NextLink = ({ children, ...props }: PaginationLinkProps) => {\r\n  const { activePage, pageCount } = usePagination();\r\n\r\n  const disabled = activePage === pageCount;\r\n\r\n  return (\r\n    <li>\r\n      <ActionLinkWrapper aria-disabled={disabled} tabIndex={disabled ? -1 : undefined} {...props}>\r\n        <VisuallyHidden>{children}</VisuallyHidden>\r\n        <ChevronRight aria-hidden />\r\n      </ActionLinkWrapper>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst PageLink = ({ number, children, ...props }: PageLinkProps) => {\r\n  const { activePage } = usePagination();\r\n\r\n  const isActive = activePage === number;\r\n\r\n  return (\r\n    <li>\r\n      <PageLinkWrapper {...props} $active={isActive}>\r\n        <VisuallyHidden>{children}</VisuallyHidden>\r\n        <PaginationText aria-hidden variant=\"pi\" fontWeight={isActive ? 'bold' : ''}>\r\n          {number}\r\n        </PaginationText>\r\n      </PageLinkWrapper>\r\n    </li>\r\n  );\r\n};\r\n\r\ninterface DotsProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Dots = ({ children, ...props }: DotsProps) => (\r\n  <li>\r\n    <DotsWrapper {...props} as=\"div\">\r\n      <VisuallyHidden>{children}</VisuallyHidden>\r\n      <PaginationText aria-hidden small>\r\n        …\r\n      </PaginationText>\r\n    </DotsWrapper>\r\n  </li>\r\n);\r\n\r\ninterface PaginationFooterProps {\r\n  activePage: number;\r\n  onChangePage: (page: number) => void;\r\n  pagination: {\r\n    pageCount: number;\r\n  };\r\n}\r\n\r\nexport const PaginationFooter = ({\r\n  activePage,\r\n  onChangePage,\r\n  pagination: { pageCount },\r\n}: PaginationFooterProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const previousActivePage = activePage - 1;\r\n  const nextActivePage = activePage + 1;\r\n\r\n  const firstLinks = [\r\n    <PageLink\r\n      key={1}\r\n      number={1}\r\n      onClick={() => {\r\n        onChangePage(1);\r\n      }}\r\n    >\r\n      {formatMessage(\r\n        { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n        { page: 1 }\r\n      )}\r\n    </PageLink>,\r\n  ];\r\n\r\n  if (pageCount <= 4) {\r\n    const links = Array.from({ length: pageCount })\r\n      .map((_, i) => i + 1)\r\n      .map((number) => {\r\n        return (\r\n          <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n            {formatMessage(\r\n              { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n              { page: number }\r\n            )}\r\n          </PageLink>\r\n        );\r\n      });\r\n\r\n    return (\r\n      <Pagination activePage={activePage} pageCount={pageCount}>\r\n        <PreviousLink onClick={() => onChangePage(previousActivePage)}>\r\n          {formatMessage({\r\n            id: 'components.pagination.go-to-previous',\r\n            defaultMessage: 'Go to previous page',\r\n          })}\r\n        </PreviousLink>\r\n        {links}\r\n        <NextLink onClick={() => onChangePage(nextActivePage)}>\r\n          {formatMessage({\r\n            id: 'components.pagination.go-to-next',\r\n            defaultMessage: 'Go to next page',\r\n          })}\r\n        </NextLink>\r\n      </Pagination>\r\n    );\r\n  }\r\n\r\n  let firstLinksToCreate: number[] = [];\r\n  const lastLinks: JSX.Element[] = [];\r\n  let lastLinksToCreate: number[] = [];\r\n  const middleLinks: JSX.Element[] = [];\r\n\r\n  if (pageCount > 1) {\r\n    lastLinks.push(\r\n      <PageLink key={pageCount} number={pageCount} onClick={() => onChangePage(pageCount)}>\r\n        {formatMessage(\r\n          { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n          { page: pageCount }\r\n        )}\r\n      </PageLink>\r\n    );\r\n  }\r\n\r\n  if (activePage === 1 && pageCount >= 3) {\r\n    firstLinksToCreate = [2];\r\n  }\r\n\r\n  if (activePage === 2 && pageCount >= 3) {\r\n    if (pageCount === 5) {\r\n      firstLinksToCreate = [2, 3, 4];\r\n    } else if (pageCount === 3) {\r\n      firstLinksToCreate = [2];\r\n    } else {\r\n      firstLinksToCreate = [2, 3];\r\n    }\r\n  }\r\n\r\n  if (activePage === 4 && pageCount >= 3) {\r\n    firstLinksToCreate = [2];\r\n  }\r\n\r\n  if (activePage === pageCount && pageCount >= 3) {\r\n    lastLinksToCreate = [pageCount - 1];\r\n  }\r\n\r\n  if (activePage === pageCount - 2 && pageCount > 3) {\r\n    lastLinksToCreate = [activePage + 1, activePage, activePage - 1];\r\n  }\r\n\r\n  if (activePage === pageCount - 3 && pageCount > 3 && activePage > 5) {\r\n    lastLinksToCreate = [activePage + 2, activePage + 1, activePage, activePage - 1];\r\n  }\r\n\r\n  if (activePage === pageCount - 1 && pageCount > 3) {\r\n    lastLinksToCreate = [activePage, activePage - 1];\r\n  }\r\n\r\n  lastLinksToCreate.forEach((number) => {\r\n    lastLinks.unshift(\r\n      <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n        Go to page {number}\r\n      </PageLink>\r\n    );\r\n  });\r\n\r\n  firstLinksToCreate.forEach((number) => {\r\n    firstLinks.push(\r\n      <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n        {formatMessage(\r\n          { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n          { page: number }\r\n        )}\r\n      </PageLink>\r\n    );\r\n  });\r\n\r\n  if (\r\n    ![1, 2].includes(activePage) &&\r\n    activePage <= pageCount - 3 &&\r\n    firstLinks.length + lastLinks.length < 6\r\n  ) {\r\n    const middleLinksToCreate = [activePage - 1, activePage, activePage + 1];\r\n\r\n    middleLinksToCreate.forEach((number) => {\r\n      middleLinks.push(\r\n        <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n          {formatMessage(\r\n            { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n            { page: number }\r\n          )}\r\n        </PageLink>\r\n      );\r\n    });\r\n  }\r\n\r\n  const shouldShowDotsAfterFirstLink =\r\n    pageCount > 5 || (pageCount === 5 && (activePage === 1 || activePage === 5));\r\n  const shouldShowMiddleDots = middleLinks.length > 2 && activePage > 4 && pageCount > 5;\r\n\r\n  const beforeDotsLinksLength = shouldShowMiddleDots\r\n    ? pageCount - activePage - 1\r\n    : pageCount - firstLinks.length - lastLinks.length;\r\n  const afterDotsLength = shouldShowMiddleDots\r\n    ? pageCount - firstLinks.length - lastLinks.length\r\n    : pageCount - activePage - 1;\r\n\r\n  return (\r\n    <Pagination activePage={activePage} pageCount={pageCount}>\r\n      <PreviousLink onClick={() => onChangePage(previousActivePage)}>\r\n        {formatMessage({\r\n          id: 'components.pagination.go-to-previous',\r\n          defaultMessage: 'Go to previous page',\r\n        })}\r\n      </PreviousLink>\r\n      {firstLinks}\r\n      {shouldShowMiddleDots && (\r\n        <Dots>\r\n          {formatMessage(\r\n            {\r\n              id: 'components.pagination.remaining-links',\r\n              defaultMessage: 'And {number} other links',\r\n            },\r\n            { number: beforeDotsLinksLength }\r\n          )}\r\n        </Dots>\r\n      )}\r\n      {middleLinks}\r\n      {shouldShowDotsAfterFirstLink && (\r\n        <Dots>\r\n          {formatMessage(\r\n            {\r\n              id: 'components.pagination.remaining-links',\r\n              defaultMessage: 'And {number} other links',\r\n            },\r\n            { number: afterDotsLength }\r\n          )}\r\n        </Dots>\r\n      )}\r\n      {lastLinks}\r\n      <NextLink onClick={() => onChangePage(nextActivePage)}>\r\n        {formatMessage({\r\n          id: 'components.pagination.go-to-next',\r\n          defaultMessage: 'Go to next page',\r\n        })}\r\n      </NextLink>\r\n    </Pagination>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { IconButton, Searchbar, SearchForm } from '@strapi/design-system';\r\nimport { Search } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../../utils';\r\n\r\nimport type { Query } from '../../../../../../shared/contracts/files';\r\n\r\ninterface SearchAssetProps {\r\n  onChangeSearch: (_q: Query['_q'] | null) => void;\r\n  queryValue?: Query['_q'] | null;\r\n}\r\n\r\nexport const SearchAsset = ({ onChangeSearch, queryValue = null }: SearchAssetProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const [isOpen, setIsOpen] = React.useState(!!queryValue);\r\n  const [value, setValue] = React.useState(queryValue || '');\r\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (isOpen) {\r\n      setTimeout(() => {\r\n        wrapperRef.current?.querySelector('input')?.focus();\r\n      }, 0);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleToggle = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    handleToggle();\r\n    onChangeSearch(null);\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    trackUsage('didSearchMediaLibraryElements', { location: 'content-manager' });\r\n    onChangeSearch(value);\r\n  };\r\n\r\n  if (isOpen) {\r\n    return (\r\n      <div ref={wrapperRef}>\r\n        <SearchForm onSubmit={handleSubmit}>\r\n          <Searchbar\r\n            name=\"search\"\r\n            onClear={handleClear}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            clearLabel={formatMessage({\r\n              id: getTrad('search.clear.label'),\r\n              defaultMessage: 'Clear the search',\r\n            })}\r\n            aria-label=\"search\"\r\n            size=\"S\"\r\n            value={value}\r\n            placeholder={formatMessage({\r\n              id: getTrad('search.placeholder'),\r\n              defaultMessage: 'e.g: the first dog on the moon',\r\n            })}\r\n          >\r\n            {formatMessage({ id: getTrad('search.label'), defaultMessage: 'Search for an asset' })}\r\n          </Searchbar>\r\n        </SearchForm>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <IconButton label=\"Search\" onClick={handleToggle}>\r\n      <Search />\r\n    </IconButton>\r\n  );\r\n};\r\n","export const isSelectable = (allowedTypes: string[], mime = '') => {\r\n  if (!mime) return false;\r\n\r\n  const fileType = mime.split('/')[0];\r\n\r\n  return (\r\n    allowedTypes.includes(fileType) ||\r\n    (allowedTypes.includes('file') && !['video', 'image', 'audio'].includes(fileType))\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport {\r\n  Checkbox,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  IconButton,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Grid,\r\n} from '@strapi/design-system';\r\nimport { GridFour as GridIcon, List, Pencil, Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { localStorageKeys, viewOptions } from '../../../constants';\r\nimport { useFolder } from '../../../hooks/useFolder';\r\nimport { usePersistentState } from '../../../hooks/usePersistentState';\r\nimport {\r\n  getBreadcrumbDataCM,\r\n  toSingularTypes,\r\n  getTrad,\r\n  getAllowedFiles,\r\n  BreadcrumbDataFolder,\r\n  AllowedFiles,\r\n} from '../../../utils';\r\nimport { AssetGridList } from '../../AssetGridList/AssetGridList';\r\nimport { Breadcrumbs } from '../../Breadcrumbs/Breadcrumbs';\r\nimport { EmptyAssets } from '../../EmptyAssets/EmptyAssets';\r\nimport { FolderCard } from '../../FolderCard/FolderCard/FolderCard';\r\nimport { FolderCardBody } from '../../FolderCard/FolderCardBody/FolderCardBody';\r\nimport { FolderCardBodyAction } from '../../FolderCard/FolderCardBodyAction/FolderCardBodyAction';\r\nimport { FolderGridList } from '../../FolderGridList/FolderGridList';\r\nimport { SortPicker } from '../../SortPicker/SortPicker';\r\nimport { TableList, FolderRow, FileRow } from '../../TableList/TableList';\r\n\r\nimport { Filters, FilterStructure as ImportedFilterStructure } from './Filters';\r\nimport { PageSize } from './PageSize';\r\nimport { PaginationFooter } from './PaginationFooter/PaginationFooter';\r\nimport { SearchAsset } from './SearchAsset/SearchAsset';\r\nimport { isSelectable } from './utils/isSelectable';\r\n\r\nimport type { File, Query, FilterCondition } from '../../../../../shared/contracts/files';\r\nimport type { Folder } from '../../../../../shared/contracts/folders';\r\nimport type { AllowedTypes } from '../../AssetCard/AssetCard';\r\n\r\nconst TypographyMaxWidth = styled(Typography)`\r\n  max-width: 100%;\r\n`;\r\n\r\nconst ActionContainer = styled(Box)`\r\n  svg {\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n`;\r\n\r\ntype NumberKeyedObject = Record<number, string>;\r\n\r\ntype StringFilter = {\r\n  [key: string]: string;\r\n};\r\n\r\ntype MimeFilter = {\r\n  [key: string]:\r\n    | string\r\n    | NumberKeyedObject\r\n    | Record<string, string | NumberKeyedObject>\r\n    | undefined;\r\n};\r\n\r\nexport type FilterStructure = {\r\n  [key: string]: MimeFilter | StringFilter | undefined;\r\n};\r\n\r\nexport type Filter = {\r\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\r\n    | {\r\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\r\n          | string[]\r\n          | string\r\n          | { $contains: string[] };\r\n      }\r\n    | undefined;\r\n};\r\n\r\nexport interface FolderWithType extends Omit<Folder, 'children' | 'files'> {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n  children?: Folder['children'] & {\r\n    count: number;\r\n  };\r\n  files?: Folder['files'] & {\r\n    count: number;\r\n  };\r\n}\r\n\r\nexport interface FileWithType extends File {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface BrowseStepProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  assets: File[];\r\n  canCreate: boolean;\r\n  canRead: boolean;\r\n  folders?: FolderWithType[];\r\n  multiple?: boolean;\r\n  onAddAsset: () => void;\r\n  onChangeFilters: (filters: FilterCondition<string>[] | Filter[]) => void;\r\n  onChangeFolder: (id: number, path?: string) => void;\r\n  onChangePage: (page: number) => void;\r\n  onChangePageSize: (value: number) => void;\r\n  onChangeSort: (value: Query['sort'] | string) => void;\r\n  onChangeSearch: (_q?: Query['_q'] | null) => void;\r\n  onEditAsset: ((asset: FileWithType) => void) | null;\r\n  onEditFolder: ((folder: FolderRow) => void) | null;\r\n  onSelectAsset: (element: FileRow | FolderRow) => void;\r\n  onSelectAllAsset?: (checked: boolean | string, rows?: FolderRow[] | FileRow[]) => void;\r\n  queryObject: Query;\r\n  pagination: { pageCount: number };\r\n  selectedAssets: FileWithType[] | FolderWithType[];\r\n}\r\n\r\nexport const BrowseStep = ({\r\n  allowedTypes = [],\r\n  assets: rawAssets,\r\n  canCreate,\r\n  canRead,\r\n  folders = [],\r\n  multiple = false,\r\n  onAddAsset,\r\n  onChangeFilters,\r\n  onChangePage,\r\n  onChangePageSize,\r\n  onChangeSearch,\r\n  onChangeSort,\r\n  onChangeFolder,\r\n  onEditAsset,\r\n  onEditFolder,\r\n  onSelectAllAsset,\r\n  onSelectAsset,\r\n  pagination,\r\n  queryObject,\r\n  selectedAssets,\r\n}: BrowseStepProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [view, setView] = usePersistentState(localStorageKeys.modalView, viewOptions.GRID);\r\n  const isGridView = view === viewOptions.GRID;\r\n\r\n  const { data: currentFolder, isLoading: isCurrentFolderLoading } = useFolder(\r\n    queryObject?.folder as number | null | undefined,\r\n    {\r\n      enabled: canRead && !!queryObject?.folder,\r\n    }\r\n  );\r\n\r\n  const singularTypes = toSingularTypes(allowedTypes);\r\n  const assets = rawAssets.map((asset) => ({\r\n    ...asset,\r\n    isSelectable: isSelectable(singularTypes, asset?.mime),\r\n    type: 'asset',\r\n  }));\r\n\r\n  const breadcrumbs = !isCurrentFolderLoading\r\n    ? getBreadcrumbDataCM(currentFolder as BreadcrumbDataFolder)\r\n    : undefined;\r\n\r\n  const allAllowedAsset = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\r\n  const areAllAssetSelected =\r\n    allAllowedAsset.length > 0 &&\r\n    selectedAssets.length > 0 &&\r\n    allAllowedAsset.every(\r\n      (asset) => selectedAssets.findIndex((currAsset) => currAsset.id === asset.id) !== -1\r\n    );\r\n  const hasSomeAssetSelected = allAllowedAsset.some(\r\n    (asset) => selectedAssets.findIndex((currAsset) => currAsset.id === asset.id) !== -1\r\n  );\r\n  const isSearching = !!queryObject?._q;\r\n  const isFiltering = !!queryObject?.filters?.$and?.length && queryObject.filters.$and.length > 0;\r\n  const isSearchingOrFiltering = isSearching || isFiltering;\r\n  const assetCount = assets.length;\r\n  const folderCount = folders.length;\r\n  const handleClickFolderCard = (...args: Parameters<typeof onChangeFolder>) => {\r\n    // Search query will always fetch the same results\r\n    // we remove it here to allow navigating in a folder and see the result of this navigation\r\n    onChangeSearch('');\r\n    onChangeFolder(...args);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {onSelectAllAsset && (\r\n        <Box paddingBottom={4}>\r\n          <Flex justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n            {(assetCount > 0 || folderCount > 0 || isFiltering) && (\r\n              <Flex gap={2} wrap=\"wrap\">\r\n                {multiple && isGridView && (\r\n                  <Flex\r\n                    paddingLeft={2}\r\n                    paddingRight={2}\r\n                    background=\"neutral0\"\r\n                    hasRadius\r\n                    borderColor=\"neutral200\"\r\n                    height=\"3.2rem\"\r\n                  >\r\n                    <Checkbox\r\n                      aria-label={formatMessage({\r\n                        id: getTrad('bulk.select.label'),\r\n                        defaultMessage: 'Select all assets',\r\n                      })}\r\n                      checked={\r\n                        !areAllAssetSelected && hasSomeAssetSelected\r\n                          ? 'indeterminate'\r\n                          : areAllAssetSelected\r\n                      }\r\n                      onCheckedChange={onSelectAllAsset}\r\n                    />\r\n                  </Flex>\r\n                )}\r\n                {isGridView && <SortPicker onChangeSort={onChangeSort} value={queryObject?.sort} />}\r\n                <Filters\r\n                  appliedFilters={queryObject?.filters?.$and as ImportedFilterStructure[]}\r\n                  onChangeFilters={onChangeFilters}\r\n                />\r\n              </Flex>\r\n            )}\r\n\r\n            {(assetCount > 0 || folderCount > 0 || isSearching) && (\r\n              <Flex marginLeft=\"auto\" shrink={0} gap={2}>\r\n                <ActionContainer paddingTop={1} paddingBottom={1}>\r\n                  <IconButton\r\n                    label={\r\n                      isGridView\r\n                        ? formatMessage({\r\n                            id: 'view-switch.list',\r\n                            defaultMessage: 'List View',\r\n                          })\r\n                        : formatMessage({\r\n                            id: 'view-switch.grid',\r\n                            defaultMessage: 'Grid View',\r\n                          })\r\n                    }\r\n                    onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\r\n                  >\r\n                    {isGridView ? <List /> : <GridIcon />}\r\n                  </IconButton>\r\n                </ActionContainer>\r\n                <SearchAsset onChangeSearch={onChangeSearch} queryValue={queryObject._q || ''} />\r\n              </Flex>\r\n            )}\r\n          </Flex>\r\n        </Box>\r\n      )}\r\n\r\n      {canRead && breadcrumbs?.length && breadcrumbs.length > 0 && currentFolder && (\r\n        <Box paddingTop={3}>\r\n          <Breadcrumbs\r\n            onChangeFolder={onChangeFolder}\r\n            label={formatMessage({\r\n              id: getTrad('header.breadcrumbs.nav.label'),\r\n              defaultMessage: 'Folders navigation',\r\n            })}\r\n            breadcrumbs={breadcrumbs as BreadcrumbDataFolder[]}\r\n            currentFolderId={queryObject?.folder as number | undefined}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {assetCount === 0 && folderCount === 0 && (\r\n        <Box paddingBottom={6}>\r\n          <EmptyAssets\r\n            size=\"S\"\r\n            count={6}\r\n            action={\r\n              canCreate &&\r\n              !isFiltering &&\r\n              !isSearching && (\r\n                <Button variant=\"secondary\" startIcon={<Plus />} onClick={onAddAsset}>\r\n                  {formatMessage({\r\n                    id: getTrad('header.actions.add-assets'),\r\n                    defaultMessage: 'Add new assets',\r\n                  })}\r\n                </Button>\r\n              )\r\n            }\r\n            content={\r\n              // eslint-disable-next-line no-nested-ternary\r\n              isSearchingOrFiltering\r\n                ? formatMessage({\r\n                    id: getTrad('list.assets-empty.title-withSearch'),\r\n                    defaultMessage: 'There are no assets with the applied filters',\r\n                  })\r\n                : canCreate && !isSearching\r\n                  ? formatMessage({\r\n                      id: getTrad('list.assets.empty'),\r\n                      defaultMessage: 'Upload your first assets...',\r\n                    })\r\n                  : formatMessage({\r\n                      id: getTrad('list.assets.empty.no-permissions'),\r\n                      defaultMessage: 'The asset list is empty',\r\n                    })\r\n            }\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {!isGridView && (folderCount > 0 || assetCount > 0) && (\r\n        <TableList\r\n          allowedTypes={allowedTypes}\r\n          assetCount={assetCount}\r\n          folderCount={folderCount}\r\n          indeterminate={!areAllAssetSelected && hasSomeAssetSelected}\r\n          isFolderSelectionAllowed={false}\r\n          onChangeSort={onChangeSort}\r\n          onChangeFolder={handleClickFolderCard}\r\n          onEditAsset={onEditAsset}\r\n          onEditFolder={onEditFolder}\r\n          onSelectOne={onSelectAsset}\r\n          onSelectAll={onSelectAllAsset!}\r\n          rows={\r\n            [...folders.map((folder) => ({ ...folder, type: 'folder' })), ...assets] as\r\n              | FolderRow[]\r\n              | FileRow[]\r\n          }\r\n          selected={selectedAssets}\r\n          shouldDisableBulkSelect={!multiple}\r\n          sortQuery={queryObject?.sort ?? ''}\r\n        />\r\n      )}\r\n\r\n      {isGridView && (\r\n        <>\r\n          {folderCount > 0 && (\r\n            <FolderGridList\r\n              title={\r\n                (((isSearchingOrFiltering && assetCount > 0) || !isSearchingOrFiltering) &&\r\n                  formatMessage(\r\n                    {\r\n                      id: getTrad('list.folders.title'),\r\n                      defaultMessage: 'Folders ({count})',\r\n                    },\r\n                    { count: folderCount }\r\n                  )) ||\r\n                ''\r\n              }\r\n            >\r\n              {folders.map((folder) => {\r\n                return (\r\n                  <Grid.Item\r\n                    col={3}\r\n                    key={`folder-${folder.id}`}\r\n                    direction=\"column\"\r\n                    alignItems=\"stretch\"\r\n                  >\r\n                    <FolderCard\r\n                      ariaLabel={folder.name}\r\n                      id={`folder-${folder.id}`}\r\n                      onClick={() => handleClickFolderCard(folder.id, folder.path)}\r\n                      cardActions={\r\n                        onEditFolder && (\r\n                          <IconButton\r\n                            withTooltip={false}\r\n                            label={formatMessage({\r\n                              id: getTrad('list.folder.edit'),\r\n                              defaultMessage: 'Edit folder',\r\n                            })}\r\n                            onClick={() => onEditFolder(folder)}\r\n                          >\r\n                            <Pencil />\r\n                          </IconButton>\r\n                        )\r\n                      }\r\n                    >\r\n                      <FolderCardBody>\r\n                        <FolderCardBodyAction\r\n                          onClick={() => handleClickFolderCard(folder.id, folder.path)}\r\n                        >\r\n                          <Flex tag=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\r\n                            <TypographyMaxWidth\r\n                              fontWeight=\"semiBold\"\r\n                              ellipsis\r\n                              textColor=\"neutral800\"\r\n                            >\r\n                              {folder.name}\r\n                              {/* VisuallyHidden dash here allows to separate folder title and count informations\r\n                              for voice reading structure purpose */}\r\n                              <VisuallyHidden>-</VisuallyHidden>\r\n                            </TypographyMaxWidth>\r\n                            <TypographyMaxWidth\r\n                              tag=\"span\"\r\n                              textColor=\"neutral600\"\r\n                              variant=\"pi\"\r\n                              ellipsis\r\n                            >\r\n                              {formatMessage(\r\n                                {\r\n                                  id: getTrad('list.folder.subtitle'),\r\n                                  defaultMessage:\r\n                                    '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\r\n                                },\r\n                                {\r\n                                  folderCount: folder.children?.count,\r\n                                  filesCount: folder.files?.count,\r\n                                }\r\n                              )}\r\n                            </TypographyMaxWidth>\r\n                          </Flex>\r\n                        </FolderCardBodyAction>\r\n                      </FolderCardBody>\r\n                    </FolderCard>\r\n                  </Grid.Item>\r\n                );\r\n              })}\r\n            </FolderGridList>\r\n          )}\r\n\r\n          {assetCount > 0 && folderCount > 0 && (\r\n            <Box paddingTop={6}>\r\n              <Divider />\r\n            </Box>\r\n          )}\r\n\r\n          {assetCount > 0 && (\r\n            <Box paddingTop={6}>\r\n              <AssetGridList\r\n                allowedTypes={allowedTypes}\r\n                size=\"S\"\r\n                assets={assets}\r\n                onSelectAsset={onSelectAsset}\r\n                selectedAssets={selectedAssets as FileWithType[]}\r\n                onEditAsset={onEditAsset!}\r\n                title={\r\n                  ((!isSearchingOrFiltering || (isSearchingOrFiltering && folderCount > 0)) &&\r\n                    queryObject.page === 1 &&\r\n                    formatMessage(\r\n                      {\r\n                        id: getTrad('list.assets.title'),\r\n                        defaultMessage: 'Assets ({count})',\r\n                      },\r\n                      { count: assetCount }\r\n                    )) ||\r\n                  ''\r\n                }\r\n              />\r\n            </Box>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {pagination.pageCount > 0 && (\r\n        <Flex justifyContent=\"space-between\" paddingTop={4}>\r\n          <PageSize\r\n            pageSize={queryObject.pageSize! as number}\r\n            onChangePageSize={onChangePageSize}\r\n          />\r\n          <PaginationFooter\r\n            activePage={queryObject.page as number}\r\n            onChangePage={onChangePage}\r\n            pagination={pagination}\r\n          />\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Button, Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface DialogFooterProps {\r\n  onClose: () => void;\r\n  onValidate?: () => void;\r\n}\r\n\r\nexport const DialogFooter = ({ onClose, onValidate }: DialogFooterProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Modal.Footer>\r\n      <Button onClick={onClose} variant=\"tertiary\">\r\n        {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n      </Button>\r\n      {onValidate && (\r\n        <Button onClick={onValidate}>\r\n          {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n        </Button>\r\n      )}\r\n    </Modal.Footer>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../utils';\r\nimport { AssetGridList } from '../../AssetGridList/AssetGridList';\r\n\r\nimport type { File } from '../../../../../shared/contracts/files';\r\n\r\ninterface SelectedStepProps {\r\n  onSelectAsset: (asset: File) => void;\r\n  selectedAssets: File[];\r\n  onReorderAsset?: (fromIndex: number, toIndex: number) => void;\r\n}\r\n\r\nexport const SelectedStep = ({\r\n  selectedAssets,\r\n  onSelectAsset,\r\n  onReorderAsset,\r\n}: SelectedStepProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n      <Flex gap={0} direction=\"column\" alignItems=\"start\">\r\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\">\r\n          {formatMessage(\r\n            {\r\n              id: getTrad('list.assets.to-upload'),\r\n              defaultMessage:\r\n                '{number, plural, =0 {No asset} one {1 asset} other {# assets}} ready to upload',\r\n            },\r\n            { number: selectedAssets.length }\r\n          )}\r\n        </Typography>\r\n        <Typography variant=\"pi\" textColor=\"neutral600\">\r\n          {formatMessage({\r\n            id: getTrad('modal.upload-list.sub-header-subtitle'),\r\n            defaultMessage: 'Manage the assets before adding them to the Media Library',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n\r\n      <AssetGridList\r\n        size=\"S\"\r\n        assets={selectedAssets}\r\n        onSelectAsset={onSelectAsset}\r\n        selectedAssets={selectedAssets}\r\n        onReorderAsset={onReorderAsset}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { Page } from '@strapi/admin/strapi-admin';\r\nimport { Badge, Button, Divider, Flex, Loader, Modal, Tabs } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useAssets } from '../../hooks/useAssets';\r\nimport { useFolders } from '../../hooks/useFolders';\r\nimport { useMediaLibraryPermissions } from '../../hooks/useMediaLibraryPermissions';\r\nimport { useModalQueryParams } from '../../hooks/useModalQueryParams';\r\nimport { useSelectionState } from '../../hooks/useSelectionState';\r\nimport {\r\n  containsAssetFilter,\r\n  getTrad,\r\n  getAllowedFiles,\r\n  moveElement,\r\n  AllowedFiles,\r\n} from '../../utils';\r\nimport { EditAssetContent, Asset as EditAsset } from '../EditAssetDialog/EditAssetContent';\r\nimport { EditFolderContent } from '../EditFolderDialog/EditFolderDialog';\r\n\r\nimport {\r\n  BrowseStep,\r\n  FolderWithType,\r\n  FileWithType,\r\n  Filter as BrowseFilter,\r\n} from './BrowseStep/BrowseStep';\r\nimport { DialogFooter } from './DialogFooter';\r\nimport { SelectedStep } from './SelectedStep/SelectedStep';\r\n\r\nimport type { File as Asset, FilterCondition, Query } from '../../../../shared/contracts/files';\r\nimport type { Folder, FolderDefinition } from '../../../../shared/contracts/folders';\r\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\r\n\r\nconst LoadingBody = styled(Flex)`\r\n  /* 80px are coming from the Tabs component that is not included in the ModalBody */\r\n  min-height: ${() => `calc(60vh + 8rem)`};\r\n`;\r\n\r\nexport interface FileRow extends Asset {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface FolderRow extends Folder {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\ninterface AssetContentProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  folderId?: number | null;\r\n  onClose: () => void;\r\n  onAddAsset: (arg?: { folderId: number | { id: number } | null | undefined }) => void;\r\n  onAddFolder: ({ folderId }: { folderId: number | { id: number } | null | undefined }) => void;\r\n  onChangeFolder: (folderId: number | null) => void;\r\n  onValidate: (selectedAssets: Asset[]) => void;\r\n  multiple?: boolean;\r\n  trackedLocation?: string;\r\n  initiallySelectedAssets?: Asset[];\r\n}\r\n\r\nexport const AssetContent = ({\r\n  allowedTypes = [],\r\n  folderId = null,\r\n  onClose,\r\n  onAddAsset,\r\n  onAddFolder,\r\n  onChangeFolder,\r\n  onValidate,\r\n  multiple = false,\r\n  initiallySelectedAssets = [],\r\n  trackedLocation,\r\n}: AssetContentProps) => {\r\n  const [assetToEdit, setAssetToEdit] = React.useState<FileWithType | undefined>(undefined);\r\n  const [folderToEdit, setFolderToEdit] = React.useState<FolderRow | undefined>(undefined);\r\n  const { formatMessage } = useIntl();\r\n  const {\r\n    canRead,\r\n    canCreate,\r\n    isLoading: isLoadingPermissions,\r\n    canUpdate,\r\n    canCopyLink,\r\n    canDownload,\r\n  } = useMediaLibraryPermissions();\r\n\r\n  const [\r\n    { queryObject },\r\n    {\r\n      onChangeFilters,\r\n      onChangePage,\r\n      onChangePageSize,\r\n      onChangeSort,\r\n      onChangeSearch,\r\n      onChangeFolder: onChangeFolderParam,\r\n    },\r\n  ] = useModalQueryParams({ folder: folderId });\r\n\r\n  const {\r\n    data: { pagination, results: assets } = {},\r\n    isLoading: isLoadingAssets,\r\n    error: errorAssets,\r\n  } = useAssets({ skipWhen: !canRead, query: queryObject });\r\n\r\n  const {\r\n    data: folders,\r\n    isLoading: isLoadingFolders,\r\n    error: errorFolders,\r\n  } = useFolders({\r\n    enabled: canRead && !containsAssetFilter(queryObject!) && pagination?.page === 1,\r\n    query: queryObject,\r\n  });\r\n\r\n  const [\r\n    selectedAssets,\r\n    { selectOne, selectOnly, setSelections, selectMultiple, deselectMultiple },\r\n  ] = useSelectionState(['id'], initiallySelectedAssets);\r\n\r\n  const handleSelectAllAssets = () => {\r\n    const allowedAssets = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\r\n\r\n    if (!multiple) {\r\n      return undefined;\r\n    }\r\n\r\n    // selected files in current folder\r\n    const alreadySelected = allowedAssets.filter(\r\n      (asset) => selectedAssets.findIndex((selectedAsset) => selectedAsset.id === asset.id) !== -1\r\n    );\r\n\r\n    if (alreadySelected.length > 0) {\r\n      deselectMultiple(alreadySelected);\r\n    } else {\r\n      selectMultiple(allowedAssets);\r\n    }\r\n  };\r\n\r\n  const handleSelectAsset = (asset: Asset | FileRow | FolderRow) => {\r\n    return multiple ? selectOne(asset as Asset) : selectOnly(asset as Asset);\r\n  };\r\n\r\n  const isLoading = isLoadingPermissions || isLoadingAssets || isLoadingFolders;\r\n  const hasError = errorAssets || errorFolders;\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <LoadingBody justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\r\n          <Loader>\r\n            {formatMessage({\r\n              id: getTrad('content.isLoading'),\r\n              defaultMessage: 'Content is loading.',\r\n            })}\r\n          </Loader>\r\n        </LoadingBody>\r\n        <DialogFooter onClose={onClose} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (hasError) {\r\n    return (\r\n      <>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Page.Error />\r\n        <DialogFooter onClose={onClose} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (!canRead) {\r\n    return (\r\n      <>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Page.NoPermissions />\r\n        <DialogFooter onClose={onClose} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (assetToEdit) {\r\n    return (\r\n      <EditAssetContent\r\n        onClose={() => setAssetToEdit(undefined)}\r\n        asset={assetToEdit as EditAsset}\r\n        canUpdate={canUpdate}\r\n        canCopyLink={canCopyLink}\r\n        canDownload={canDownload}\r\n        trackedLocation={trackedLocation}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (folderToEdit) {\r\n    return (\r\n      <EditFolderContent\r\n        folder={folderToEdit as FolderDefinition}\r\n        onClose={() => setFolderToEdit(undefined)}\r\n        location=\"content-manager\"\r\n        parentFolderId={queryObject?.folder as string | number | null | undefined}\r\n      />\r\n    );\r\n  }\r\n\r\n  const handleMoveItem = (hoverIndex: number, destIndex: number) => {\r\n    const offset = destIndex - hoverIndex;\r\n    const orderedAssetsClone = selectedAssets.slice();\r\n    const nextAssets = moveElement<Asset>(orderedAssetsClone, hoverIndex, offset);\r\n    setSelections(nextAssets);\r\n  };\r\n\r\n  const handleFolderChange = (folderId: number, folderPath?: string) => {\r\n    onChangeFolder(folderId);\r\n    if (onChangeFolderParam) {\r\n      onChangeFolderParam(folderId, folderPath);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header>\r\n        <Modal.Title>\r\n          {formatMessage({\r\n            id: getTrad('header.actions.add-assets'),\r\n            defaultMessage: 'Add new assets',\r\n          })}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <TabsRoot variant=\"simple\" defaultValue={selectedAssets.length > 0 ? 'selected' : 'browse'}>\r\n        <Flex paddingLeft={8} paddingRight={8} paddingTop={6} justifyContent=\"space-between\">\r\n          <Tabs.List>\r\n            <Tabs.Trigger value=\"browse\">\r\n              {formatMessage({\r\n                id: getTrad('modal.nav.browse'),\r\n                defaultMessage: 'Browse',\r\n              })}\r\n            </Tabs.Trigger>\r\n            <Tabs.Trigger value=\"selected\">\r\n              {formatMessage({\r\n                id: getTrad('modal.header.select-files'),\r\n                defaultMessage: 'Selected files',\r\n              })}\r\n              <Badge marginLeft={2}>{selectedAssets.length}</Badge>\r\n            </Tabs.Trigger>\r\n          </Tabs.List>\r\n          <Flex gap={2}>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => onAddFolder({ folderId: queryObject?.folder })}\r\n            >\r\n              {formatMessage({\r\n                id: getTrad('modal.upload-list.sub-header.add-folder'),\r\n                defaultMessage: 'Add folder',\r\n              })}\r\n            </Button>\r\n            <Button onClick={() => onAddAsset({ folderId: queryObject?.folder })}>\r\n              {formatMessage({\r\n                id: getTrad('modal.upload-list.sub-header.button'),\r\n                defaultMessage: 'Add more assets',\r\n              })}\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n        <Divider />\r\n        <Modal.Body>\r\n          <Tabs.Content value=\"browse\">\r\n            <BrowseStep\r\n              allowedTypes={allowedTypes}\r\n              assets={assets!}\r\n              canCreate={canCreate}\r\n              canRead={canRead}\r\n              folders={folders as FolderWithType[]}\r\n              onSelectAsset={handleSelectAsset}\r\n              selectedAssets={selectedAssets}\r\n              multiple={multiple}\r\n              onSelectAllAsset={handleSelectAllAssets}\r\n              onEditAsset={setAssetToEdit}\r\n              onEditFolder={setFolderToEdit}\r\n              pagination={pagination!}\r\n              queryObject={queryObject!}\r\n              onAddAsset={onAddAsset}\r\n              onChangeFilters={(filters: FilterCondition<string>[] | BrowseFilter[]) =>\r\n                onChangeFilters!(filters as FilterCondition<string>[])\r\n              }\r\n              onChangeFolder={handleFolderChange}\r\n              onChangePage={onChangePage!}\r\n              onChangePageSize={onChangePageSize!}\r\n              onChangeSort={(sort: string | undefined) => onChangeSort!(sort as Query['sort'])}\r\n              onChangeSearch={onChangeSearch!}\r\n            />\r\n          </Tabs.Content>\r\n          <Tabs.Content value=\"selected\">\r\n            <SelectedStep\r\n              selectedAssets={selectedAssets}\r\n              onSelectAsset={handleSelectAsset}\r\n              onReorderAsset={handleMoveItem}\r\n            />\r\n          </Tabs.Content>\r\n        </Modal.Body>\r\n      </TabsRoot>\r\n      <DialogFooter onClose={onClose} onValidate={() => onValidate(selectedAssets)} />\r\n    </>\r\n  );\r\n};\r\n\r\ninterface AssetDialogProps extends AssetContentProps {\r\n  open?: boolean;\r\n}\r\n\r\nexport const AssetDialog = ({ open = false, onClose, ...restProps }: AssetDialogProps) => {\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={onClose}>\r\n      <Modal.Content>\r\n        <AssetContent onClose={onClose} {...restProps} />\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nconst TabsRoot = styled(Tabs.Root)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n","import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { Box, Button, Flex, Modal, Typography } from '@strapi/design-system';\r\nimport { PlusCircle as PicturePlus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetSource } from '../../../constants';\r\nimport { getTrad, rawFileToAsset } from '../../../utils';\r\n\r\nimport type { FileWithRawFile } from './AddAssetStep';\r\n\r\nconst Wrapper = styled(Flex)`\r\n  flex-direction: column;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  font-size: 6rem;\r\n\r\n  svg path {\r\n    fill: ${({ theme }) => theme.colors.primary600};\r\n  }\r\n`;\r\n\r\nconst MediaBox = styled(Box)`\r\n  border-style: dashed;\r\n`;\r\n\r\nconst OpaqueBox = styled(Box)`\r\n  opacity: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface FromComputerFormProps {\r\n  onClose: () => void;\r\n  onAddAssets: (assets: FileWithRawFile[]) => void;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const FromComputerForm = ({\r\n  onClose,\r\n  onAddAssets,\r\n  trackedLocation,\r\n}: FromComputerFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [dragOver, setDragOver] = React.useState(false);\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const { trackUsage } = useTracking();\r\n\r\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleDragEnter = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = () => setDragOver(false);\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    inputRef.current?.click();\r\n  };\r\n\r\n  const handleChange = () => {\r\n    const files = inputRef.current?.files;\r\n    const assets: FileWithRawFile[] = [];\r\n\r\n    if (files) {\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files.item(i);\r\n        if (file) {\r\n          const asset = rawFileToAsset(file, AssetSource.Computer);\r\n          assets.push(asset);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (trackedLocation) {\r\n      trackUsage('didSelectFile', { source: 'computer', location: trackedLocation });\r\n    }\r\n\r\n    onAddAssets(assets);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (e?.dataTransfer?.files) {\r\n      const files = e.dataTransfer.files;\r\n      const assets = [];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files.item(i);\r\n        if (file) {\r\n          const asset = rawFileToAsset(file, AssetSource.Computer);\r\n          assets.push(asset);\r\n        }\r\n      }\r\n\r\n      onAddAssets(assets);\r\n    }\r\n\r\n    setDragOver(false);\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\r\n        <label>\r\n          <MediaBox\r\n            paddingTop={11}\r\n            paddingBottom={11}\r\n            hasRadius\r\n            justifyContent=\"center\"\r\n            borderColor={dragOver ? 'primary500' : 'neutral300'}\r\n            background={dragOver ? 'primary100' : 'neutral100'}\r\n            position=\"relative\"\r\n            onDragEnter={handleDragEnter}\r\n            onDragLeave={handleDragLeave}\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n          >\r\n            <Flex justifyContent=\"center\">\r\n              <Wrapper>\r\n                <IconWrapper>\r\n                  <PicturePlus aria-hidden width=\"3.2rem\" height=\"3.2rem\" />\r\n                </IconWrapper>\r\n\r\n                <Box paddingTop={3} paddingBottom={5}>\r\n                  <Typography variant=\"delta\" textColor=\"neutral600\" tag=\"span\">\r\n                    {formatMessage({\r\n                      id: getTrad('input.label'),\r\n                      defaultMessage: 'Drag & Drop here or',\r\n                    })}\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <OpaqueBox\r\n                  tag=\"input\"\r\n                  position=\"absolute\"\r\n                  left={0}\r\n                  right={0}\r\n                  bottom={0}\r\n                  top={0}\r\n                  width=\"100%\"\r\n                  type=\"file\"\r\n                  multiple\r\n                  name=\"files\"\r\n                  aria-label={formatMessage({\r\n                    id: getTrad('input.label'),\r\n                    defaultMessage: 'Drag & Drop here or',\r\n                  })}\r\n                  tabIndex={-1}\r\n                  ref={inputRef}\r\n                  zIndex={1}\r\n                  onChange={handleChange}\r\n                />\r\n\r\n                <Box position=\"relative\">\r\n                  <Button type=\"button\" onClick={handleClick}>\r\n                    {formatMessage({\r\n                      id: getTrad('input.button.label'),\r\n                      defaultMessage: 'Browse files',\r\n                    })}\r\n                  </Button>\r\n                </Box>\r\n              </Wrapper>\r\n            </Flex>\r\n          </MediaBox>\r\n        </label>\r\n      </Box>\r\n\r\n      <Modal.Footer>\r\n        <Button onClick={onClose} variant=\"tertiary\">\r\n          {formatMessage({\r\n            id: 'app.components.Button.cancel',\r\n            defaultMessage: 'cancel',\r\n          })}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </form>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { Box, Button, Field, Modal, Textarea } from '@strapi/design-system';\r\nimport { Form, Formik } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad, urlsToAssets, urlSchema } from '../../../utils';\r\n\r\nimport type { FileWithRawFile } from './AddAssetStep';\r\n\r\ninterface FromUrlFormProps {\r\n  onClose: () => void;\r\n  onAddAsset: (assets: FileWithRawFile[]) => void;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const FromUrlForm = ({ onClose, onAddAsset, trackedLocation }: FromUrlFormProps) => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState<Error | undefined>(undefined);\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n\r\n  const handleSubmit = async ({ urls }: { urls: string }) => {\r\n    setLoading(true);\r\n    const urlArray = urls.split(/\\r?\\n/);\r\n    try {\r\n      const assets: FileWithRawFile[] = await urlsToAssets(urlArray);\r\n\r\n      if (trackedLocation) {\r\n        trackUsage('didSelectFile', { source: 'url', location: trackedLocation });\r\n      }\r\n\r\n      // no need to set the loading to false since the component unmounts\r\n      onAddAsset(assets);\r\n    } catch (e: unknown) {\r\n      setError(e as Error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={{\r\n        urls: '',\r\n      }}\r\n      onSubmit={handleSubmit}\r\n      validationSchema={urlSchema}\r\n      validateOnChange={false}\r\n    >\r\n      {({ values, errors, handleChange }) => (\r\n        <Form noValidate>\r\n          <Box paddingLeft={8} paddingRight={8} paddingBottom={6} paddingTop={6}>\r\n            <Field.Root\r\n              hint={formatMessage({\r\n                id: getTrad('input.url.description'),\r\n                defaultMessage: 'Separate your URL links by a carriage return.',\r\n              })}\r\n              error={\r\n                error?.message ||\r\n                (errors.urls\r\n                  ? formatMessage({ id: errors.urls, defaultMessage: 'An error occured' })\r\n                  : undefined)\r\n              }\r\n            >\r\n              <Field.Label>\r\n                {formatMessage({ id: getTrad('input.url.label'), defaultMessage: 'URL' })}\r\n              </Field.Label>\r\n              <Textarea name=\"urls\" onChange={handleChange} value={values.urls} />\r\n              <Field.Hint />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          </Box>\r\n\r\n          <Modal.Footer>\r\n            <Button onClick={onClose} variant=\"tertiary\">\r\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'cancel' })}\r\n            </Button>\r\n            <Button type=\"submit\" loading={loading}>\r\n              {formatMessage({\r\n                id: getTrad('button.next'),\r\n                defaultMessage: 'Next',\r\n              })}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import { Box, Divider, Modal, Tabs } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../utils';\r\n\r\nimport { FromComputerForm } from './FromComputerForm';\r\nimport { FromUrlForm } from './FromUrlForm';\r\n\r\nimport type { RawFile, File } from '../../../../../shared/contracts/files';\r\n\r\nexport interface FileWithRawFile extends Omit<File, 'id' | 'hash'> {\r\n  id?: string;\r\n  hash?: string;\r\n  rawFile: RawFile;\r\n}\r\n\r\ninterface AddAssetStepProps {\r\n  onClose: () => void;\r\n  onAddAsset: (assets: FileWithRawFile[]) => void;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const AddAssetStep = ({ onClose, onAddAsset, trackedLocation }: AddAssetStepProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header>\r\n        <Modal.Title>\r\n          {formatMessage({\r\n            id: getTrad('header.actions.add-assets'),\r\n            defaultMessage: 'Add new assets',\r\n          })}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Tabs.Root variant=\"simple\" defaultValue=\"computer\">\r\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6}>\r\n          <Tabs.List\r\n            aria-label={formatMessage({\r\n              id: getTrad('tabs.title'),\r\n              defaultMessage: 'How do you want to upload your assets?',\r\n            })}\r\n          >\r\n            <Tabs.Trigger value=\"computer\">\r\n              {formatMessage({\r\n                id: getTrad('modal.nav.computer'),\r\n                defaultMessage: 'From computer',\r\n              })}\r\n            </Tabs.Trigger>\r\n            <Tabs.Trigger value=\"url\">\r\n              {formatMessage({\r\n                id: getTrad('modal.nav.url'),\r\n                defaultMessage: 'From URL',\r\n              })}\r\n            </Tabs.Trigger>\r\n          </Tabs.List>\r\n\r\n          <Divider />\r\n        </Box>\r\n        <Tabs.Content value=\"computer\">\r\n          <FromComputerForm\r\n            onClose={onClose}\r\n            onAddAssets={onAddAsset}\r\n            trackedLocation={trackedLocation}\r\n          />\r\n        </Tabs.Content>\r\n        <Tabs.Content value=\"url\">\r\n          <FromUrlForm\r\n            onClose={onClose}\r\n            onAddAsset={onAddAsset}\r\n            trackedLocation={trackedLocation}\r\n          />\r\n        </Tabs.Content>\r\n      </Tabs.Root>\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardBadge,\r\n  CardBody,\r\n  CardContent,\r\n  CardHeader,\r\n  CardSubtitle,\r\n  CardTitle,\r\n  Flex,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetType } from '../../constants';\r\nimport { useUpload } from '../../hooks/useUpload';\r\nimport { getTrad } from '../../utils';\r\nimport { UploadProgress } from '../UploadProgress/UploadProgress';\r\n\r\nimport type { RawFile, File } from '../../../../shared/contracts/files';\r\n\r\nconst UploadProgressWrapper = styled.div`\r\n  height: 8.8rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst Extension = styled.span`\r\n  text-transform: uppercase;\r\n`;\r\n\r\ninterface UploadingAssetCardProps {\r\n  onCancel: (rawFile: RawFile) => void;\r\n  onStatusChange: (status: string) => void;\r\n  addUploadedFiles: (files: File[]) => void;\r\n  folderId?: string | number | null;\r\n  asset: Asset;\r\n  id?: string;\r\n  size?: 'S' | 'M';\r\n}\r\n\r\ninterface Asset extends File {\r\n  rawFile?: RawFile;\r\n  type?: AssetType;\r\n}\r\n\r\nexport const UploadingAssetCard = ({\r\n  asset,\r\n  onCancel,\r\n  onStatusChange,\r\n  addUploadedFiles,\r\n  folderId = null,\r\n}: UploadingAssetCardProps) => {\r\n  const { upload, cancel, error, progress, status } = useUpload();\r\n  const { formatMessage } = useIntl();\r\n\r\n  let badgeContent = formatMessage({\r\n    id: getTrad('settings.section.doc.label'),\r\n    defaultMessage: 'Doc',\r\n  });\r\n\r\n  if (asset.type === AssetType.Image) {\r\n    badgeContent = formatMessage({\r\n      id: getTrad('settings.section.image.label'),\r\n      defaultMessage: 'Image',\r\n    });\r\n  } else if (asset.type === AssetType.Video) {\r\n    badgeContent = formatMessage({\r\n      id: getTrad('settings.section.video.label'),\r\n      defaultMessage: 'Video',\r\n    });\r\n  } else if (asset.type === AssetType.Audio) {\r\n    badgeContent = formatMessage({\r\n      id: getTrad('settings.section.audio.label'),\r\n      defaultMessage: 'Audio',\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const uploadFile = async () => {\r\n      const files = await upload(asset, folderId ? Number(folderId) : null);\r\n\r\n      if (addUploadedFiles) {\r\n        addUploadedFiles(files);\r\n      }\r\n    };\r\n\r\n    uploadFile();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    onStatusChange(status);\r\n  }, [status, onStatusChange]);\r\n\r\n  const handleCancel = () => {\r\n    cancel();\r\n    onCancel(asset.rawFile!);\r\n  };\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n      <Card borderColor={error ? 'danger600' : 'neutral150'}>\r\n        <CardHeader>\r\n          <UploadProgressWrapper>\r\n            <UploadProgress\r\n              error={error || undefined}\r\n              onCancel={handleCancel}\r\n              progress={progress}\r\n            />\r\n          </UploadProgressWrapper>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <CardContent>\r\n            <Box paddingTop={1}>\r\n              <Typography tag=\"h2\">\r\n                <CardTitle tag=\"span\">{asset.name}</CardTitle>\r\n              </Typography>\r\n            </Box>\r\n            <CardSubtitle>\r\n              <Extension>{asset.ext}</Extension>\r\n            </CardSubtitle>\r\n          </CardContent>\r\n          <Flex paddingTop={1} grow={1}>\r\n            <CardBadge>{badgeContent}</CardBadge>\r\n          </Flex>\r\n        </CardBody>\r\n      </Card>\r\n      {error ? (\r\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"danger600\">\r\n          {formatMessage(\r\n            error?.message\r\n              ? {\r\n                  id: getTrad(`apiError.${error.message}`),\r\n                  defaultMessage: error.message,\r\n                  /* See issue: https://github.com/strapi/strapi/issues/13867\r\n             A proxy might return an error, before the request reaches Strapi\r\n             and therefore we need to handle errors gracefully.\r\n          */\r\n                }\r\n              : {\r\n                  id: getTrad('upload.generic-error'),\r\n                  defaultMessage: 'An error occured while uploading the file.',\r\n                }\r\n          )}\r\n        </Typography>\r\n      ) : undefined}\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Grid, KeyboardNavigable, Modal, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { AssetType } from '../../../constants';\r\nimport { getTrad } from '../../../utils';\r\nimport { AssetCard } from '../../AssetCard/AssetCard';\r\nimport { UploadingAssetCard } from '../../AssetCard/UploadingAssetCard';\r\n\r\nimport type { File, RawFile } from '../../../../../shared/contracts/files';\r\n\r\nconst Status = {\r\n  Idle: 'IDLE',\r\n  Uploading: 'UPLOADING',\r\n  Intermediate: 'INTERMEDIATE',\r\n};\r\n\r\ninterface Asset extends File {\r\n  rawFile?: RawFile;\r\n  type?: AssetType;\r\n}\r\n\r\ninterface PendingAssetStepProps {\r\n  addUploadedFiles?: (files: File[]) => void;\r\n  folderId?: string | number | null;\r\n  onClose: () => void;\r\n  onEditAsset: (asset: File) => void;\r\n  onRemoveAsset: (asset: File) => void;\r\n  onAddAsset?: (asset: File) => void;\r\n  assets: Asset[];\r\n  onClickAddAsset: () => void;\r\n  onCancelUpload: (rawFile: RawFile) => void;\r\n  onUploadSucceed: (file: RawFile) => void;\r\n  trackedLocation?: string;\r\n  initialAssetsToAdd?: File[];\r\n}\r\n\r\nexport const PendingAssetStep = ({\r\n  addUploadedFiles,\r\n  folderId,\r\n  onClose,\r\n  onEditAsset,\r\n  onRemoveAsset,\r\n  assets,\r\n  onClickAddAsset,\r\n  onCancelUpload,\r\n  onUploadSucceed,\r\n  trackedLocation,\r\n}: PendingAssetStepProps) => {\r\n  const assetCountRef = React.useRef(0);\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const [uploadStatus, setUploadStatus] = React.useState(Status.Idle);\r\n\r\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    const assetsCountByType = assets.reduce(\r\n      (acc: Record<AssetType, string | number>, asset) => {\r\n        const { type } = asset;\r\n\r\n        if (type !== undefined && !acc[type]) {\r\n          acc[type] = 0;\r\n        }\r\n\r\n        if (type !== undefined) {\r\n          const accType = acc[type];\r\n          const currentCount = typeof accType === 'string' ? accType : accType.toString();\r\n          acc[type] = `${parseInt(currentCount, 10) + 1}`;\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      {} as Record<AssetType, string | number>\r\n    );\r\n\r\n    trackUsage('willAddMediaLibraryAssets', {\r\n      location: trackedLocation!,\r\n      ...assetsCountByType,\r\n    });\r\n\r\n    setUploadStatus(Status.Uploading);\r\n  };\r\n\r\n  const handleStatusChange = (status: string, file: RawFile) => {\r\n    if (status === 'success' || status === 'error') {\r\n      assetCountRef.current++;\r\n\r\n      // There's no \"terminated\" status. When all the files have called their\r\n      // onUploadSucceed callback, the parent component filters the asset list\r\n      // and closes the modal when the asset list is empty\r\n      if (assetCountRef.current === assets.length) {\r\n        assetCountRef.current = 0;\r\n        setUploadStatus(Status.Intermediate);\r\n      }\r\n    }\r\n\r\n    if (status === 'success') {\r\n      onUploadSucceed(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header>\r\n        <Modal.Title>\r\n          {formatMessage({\r\n            id: getTrad('header.actions.add-assets'),\r\n            defaultMessage: 'Add new assets',\r\n          })}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={0}>\r\n              <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\">\r\n                {formatMessage(\r\n                  {\r\n                    id: getTrad('list.assets.to-upload'),\r\n                    defaultMessage:\r\n                      '{number, plural, =0 {No asset} one {1 asset} other {# assets}} ready to upload',\r\n                  },\r\n                  { number: assets.length }\r\n                )}\r\n              </Typography>\r\n              <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                {formatMessage({\r\n                  id: getTrad('modal.upload-list.sub-header-subtitle'),\r\n                  defaultMessage: 'Manage the assets before adding them to the Media Library',\r\n                })}\r\n              </Typography>\r\n            </Flex>\r\n            <Button size=\"S\" onClick={onClickAddAsset}>\r\n              {formatMessage({\r\n                id: getTrad('header.actions.add-assets'),\r\n                defaultMessage: 'Add new assets',\r\n              })}\r\n            </Button>\r\n          </Flex>\r\n          <KeyboardNavigable tagName=\"article\">\r\n            <Grid.Root gap={4}>\r\n              {assets.map((asset) => {\r\n                const assetKey = asset.url;\r\n\r\n                if (uploadStatus === Status.Uploading || uploadStatus === Status.Intermediate) {\r\n                  return (\r\n                    <Grid.Item col={4} key={assetKey} direction=\"column\" alignItems=\"stretch\">\r\n                      <UploadingAssetCard\r\n                        // Props used to store the newly uploaded files\r\n                        addUploadedFiles={addUploadedFiles!}\r\n                        asset={asset}\r\n                        id={assetKey}\r\n                        onCancel={onCancelUpload}\r\n                        onStatusChange={(status) => handleStatusChange(status, asset.rawFile!)}\r\n                        size=\"S\"\r\n                        folderId={folderId}\r\n                      />\r\n                    </Grid.Item>\r\n                  );\r\n                }\r\n\r\n                return (\r\n                  <Grid.Item col={4} key={assetKey} direction=\"column\" alignItems=\"stretch\">\r\n                    <AssetCard\r\n                      asset={asset}\r\n                      size=\"S\"\r\n                      key={assetKey}\r\n                      local\r\n                      alt={asset.name}\r\n                      onEdit={onEditAsset}\r\n                      onRemove={onRemoveAsset}\r\n                    />\r\n                  </Grid.Item>\r\n                );\r\n              })}\r\n            </Grid.Root>\r\n          </KeyboardNavigable>\r\n        </Flex>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={onClose} variant=\"tertiary\">\r\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'cancel' })}\r\n        </Button>\r\n        <Button onClick={handleSubmit} loading={uploadStatus === Status.Uploading}>\r\n          {formatMessage(\r\n            {\r\n              id: getTrad('modal.upload-list.footer.button'),\r\n              defaultMessage:\r\n                'Upload {number, plural, one {# asset} other {# assets}} to the library',\r\n            },\r\n            { number: assets.length }\r\n          )}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { EditAssetContent } from '../EditAssetDialog/EditAssetContent';\r\n\r\nimport { AddAssetStep } from './AddAssetStep/AddAssetStep';\r\nimport { PendingAssetStep } from './PendingAssetStep/PendingAssetStep';\r\n\r\nimport type { File, RawFile } from '../../../../shared/contracts/files';\r\nimport type { AllowedFiles } from '../../utils';\r\n\r\nconst Steps = {\r\n  AddAsset: 'AddAsset',\r\n  PendingAsset: 'PendingAsset',\r\n};\r\n\r\ninterface FileWithRawFile extends Omit<File, 'id' | 'hash'> {\r\n  id?: string;\r\n  hash?: string;\r\n  rawFile: RawFile;\r\n}\r\n\r\ntype FileWithoutIdHash = Omit<File, 'id' | 'hash'>;\r\n\r\nexport interface Asset extends Omit<File, 'folder'> {\r\n  isLocal?: boolean;\r\n  rawFile?: RawFile;\r\n  folder?: File['folder'] & { id: number };\r\n}\r\n\r\nexport interface UploadAssetDialogProps {\r\n  addUploadedFiles?: (files: Asset[] | File[]) => void;\r\n  folderId?: string | number | null;\r\n  initialAssetsToAdd?: Asset[];\r\n  onClose: () => void;\r\n  open: boolean;\r\n  trackedLocation?: string;\r\n  validateAssetsTypes?: (\r\n    assets: FileWithoutIdHash[] | Asset[],\r\n    cb: (assets?: AllowedFiles[], error?: string) => void\r\n  ) => void;\r\n}\r\n\r\nexport const UploadAssetDialog = ({\r\n  initialAssetsToAdd,\r\n  folderId = null,\r\n  onClose = () => {},\r\n  addUploadedFiles,\r\n  trackedLocation,\r\n  open,\r\n  validateAssetsTypes = (_, cb) => cb(),\r\n}: UploadAssetDialogProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [step, setStep] = React.useState(initialAssetsToAdd ? Steps.PendingAsset : Steps.AddAsset);\r\n  const [assets, setAssets] = React.useState(initialAssetsToAdd || []);\r\n  const [assetToEdit, setAssetToEdit] = React.useState<File | Asset | undefined>(undefined);\r\n\r\n  const handleAddToPendingAssets = (nextAssets: Asset[]) => {\r\n    validateAssetsTypes(nextAssets, () => {\r\n      setAssets((prevAssets) => prevAssets.concat(nextAssets));\r\n      setStep(Steps.PendingAsset);\r\n    });\r\n  };\r\n\r\n  const moveToAddAsset = () => {\r\n    setStep(Steps.AddAsset);\r\n  };\r\n\r\n  const handleCancelUpload = (file: RawFile) => {\r\n    const nextAssets = assets.filter((asset) => asset.rawFile !== file);\r\n    setAssets(nextAssets);\r\n\r\n    // When there's no asset, transition to the AddAsset step\r\n    if (nextAssets.length === 0) {\r\n      moveToAddAsset();\r\n    }\r\n  };\r\n\r\n  const handleUploadSuccess = (file: RawFile) => {\r\n    const nextAssets = assets.filter((asset) => asset.rawFile !== file);\r\n    setAssets(nextAssets);\r\n\r\n    if (nextAssets.length === 0) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleAssetEditValidation = (nextAsset?: Asset | boolean | null) => {\r\n    if (nextAsset && typeof nextAsset !== 'boolean') {\r\n      const nextAssets = assets.map((asset) => (asset === assetToEdit ? nextAsset : asset));\r\n      setAssets(nextAssets);\r\n    }\r\n\r\n    setAssetToEdit(undefined);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (step === Steps.PendingAsset && assets.length > 0) {\r\n      // eslint-disable-next-line no-alert\r\n      const confirm = window.confirm(\r\n        formatMessage({\r\n          id: 'window.confirm.close-modal.files',\r\n          defaultMessage: 'Are you sure? You have some files that have not been uploaded yet.',\r\n        })\r\n      );\r\n\r\n      if (confirm) {\r\n        onClose();\r\n      }\r\n    } else {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleRemoveAsset = (assetToRemove: File) => {\r\n    const nextAssets = assets.filter((asset) => asset !== assetToRemove);\r\n    setAssets(nextAssets);\r\n  };\r\n\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={handleClose}>\r\n      {step === Steps.AddAsset && (\r\n        <Modal.Content>\r\n          <AddAssetStep\r\n            onClose={onClose}\r\n            onAddAsset={(assets: FileWithRawFile[]) =>\r\n              handleAddToPendingAssets(assets as unknown as Asset[])\r\n            }\r\n            trackedLocation={trackedLocation}\r\n          />\r\n        </Modal.Content>\r\n      )}\r\n\r\n      {step === Steps.PendingAsset && (\r\n        <Modal.Content>\r\n          <PendingAssetStep\r\n            onClose={handleClose}\r\n            assets={assets}\r\n            onEditAsset={setAssetToEdit}\r\n            onRemoveAsset={handleRemoveAsset}\r\n            onClickAddAsset={moveToAddAsset}\r\n            onCancelUpload={handleCancelUpload}\r\n            onUploadSucceed={handleUploadSuccess}\r\n            initialAssetsToAdd={initialAssetsToAdd}\r\n            addUploadedFiles={addUploadedFiles}\r\n            folderId={folderId}\r\n            trackedLocation={trackedLocation}\r\n          />\r\n        </Modal.Content>\r\n      )}\r\n\r\n      {assetToEdit && (\r\n        <Modal.Content>\r\n          <EditAssetContent\r\n            onClose={handleAssetEditValidation}\r\n            asset={assetToEdit as Asset}\r\n            canUpdate\r\n            canCopyLink={false}\r\n            canDownload={false}\r\n            trackedLocation={trackedLocation}\r\n          />\r\n        </Modal.Content>\r\n      )}\r\n    </Modal.Root>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { AssetDialog } from '../AssetDialog/AssetDialog';\r\nimport { EditFolderDialog } from '../EditFolderDialog/EditFolderDialog';\r\nimport { UploadAssetDialog } from '../UploadAssetDialog/UploadAssetDialog';\r\n\r\nconst STEPS = {\r\n  AssetSelect: 'SelectAsset',\r\n  AssetUpload: 'UploadAsset',\r\n  FolderCreate: 'FolderCreate',\r\n};\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\r\nexport interface MediaLibraryDialogProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  onClose: () => void;\r\n  onSelectAssets: (selectedAssets: File[]) => void;\r\n}\r\n\r\nexport const MediaLibraryDialog = ({\r\n  onClose,\r\n  onSelectAssets,\r\n  allowedTypes = ['files', 'images', 'videos', 'audios'],\r\n}: MediaLibraryDialogProps) => {\r\n  const [step, setStep] = React.useState(STEPS.AssetSelect);\r\n  const [folderId, setFolderId] = React.useState<number | null>(null);\r\n\r\n  switch (step) {\r\n    case STEPS.AssetSelect:\r\n      return (\r\n        <AssetDialog\r\n          allowedTypes={allowedTypes}\r\n          folderId={folderId}\r\n          open\r\n          onClose={onClose}\r\n          onValidate={onSelectAssets}\r\n          onAddAsset={() => setStep(STEPS.AssetUpload)}\r\n          onAddFolder={() => setStep(STEPS.FolderCreate)}\r\n          onChangeFolder={(folderId) => setFolderId(folderId)}\r\n          multiple\r\n        />\r\n      );\r\n\r\n    case STEPS.FolderCreate:\r\n      return (\r\n        <EditFolderDialog\r\n          open\r\n          onClose={() => setStep(STEPS.AssetSelect)}\r\n          parentFolderId={folderId}\r\n        />\r\n      );\r\n\r\n    default:\r\n      return (\r\n        <UploadAssetDialog open onClose={() => setStep(STEPS.AssetSelect)} folderId={folderId} />\r\n      );\r\n  }\r\n};\r\n","import { Box, Flex } from '@strapi/design-system';\r\nimport { File, FilePdf } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetType } from '../../../constants';\r\nimport { createAssetUrl } from '../../../utils';\r\nimport { AudioPreview } from '../../AssetCard/AudioPreview';\r\nimport { VideoPreview } from '../../AssetCard/VideoPreview';\r\n\r\nimport type { File as FileAsset } from '../../../../../shared/contracts/files';\r\n\r\nconst DocAsset = styled(Flex)`\r\n  background: linear-gradient(180deg, #ffffff 0%, #f6f6f9 121.48%);\r\n`;\r\n\r\nconst VideoPreviewWrapper = styled(Box)`\r\n  canvas,\r\n  video {\r\n    max-width: 100%;\r\n    height: 124px;\r\n  }\r\n`;\r\n\r\nconst AudioPreviewWrapper = styled(Box)`\r\n  canvas,\r\n  audio {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nexport const CarouselAsset = ({ asset }: { asset: FileAsset }) => {\r\n  if (asset.mime?.includes(AssetType.Video)) {\r\n    return (\r\n      <VideoPreviewWrapper height=\"100%\">\r\n        <VideoPreview\r\n          url={createAssetUrl(asset, true)!}\r\n          mime={asset.mime}\r\n          alt={asset.alternativeText || asset.name}\r\n        />\r\n      </VideoPreviewWrapper>\r\n    );\r\n  }\r\n\r\n  if (asset.mime?.includes(AssetType.Audio)) {\r\n    return (\r\n      <AudioPreviewWrapper>\r\n        <AudioPreview\r\n          url={createAssetUrl(asset, true)!}\r\n          alt={asset.alternativeText || asset.name}\r\n        />\r\n      </AudioPreviewWrapper>\r\n    );\r\n  }\r\n\r\n  if (asset.mime?.includes(AssetType.Image)) {\r\n    return (\r\n      <Box\r\n        tag=\"img\"\r\n        maxHeight=\"100%\"\r\n        maxWidth=\"100%\"\r\n        src={createAssetUrl(asset, true)}\r\n        alt={asset.alternativeText || asset.name}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DocAsset width=\"100%\" height=\"100%\" justifyContent=\"center\" hasRadius>\r\n      {asset.ext?.includes('pdf') ? (\r\n        <FilePdf aria-label={asset.alternativeText || asset.name} width=\"24px\" height=\"32px\" />\r\n      ) : (\r\n        <File aria-label={asset.alternativeText || asset.name} width=\"24px\" height=\"32px\" />\r\n      )}\r\n    </DocAsset>\r\n  );\r\n};\r\n","import { CarouselActions, IconButton } from '@strapi/design-system';\r\nimport { Pencil, Plus, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad, prefixFileUrlWithBackendUrl } from '../../../utils';\r\nimport { CopyLinkButton } from '../../CopyLinkButton/CopyLinkButton';\r\n\r\nimport type { File } from '../../../../../shared/contracts/files';\r\n\r\ninterface CarouselAssetActionsProps {\r\n  asset: File;\r\n  onDeleteAsset?: (asset: File) => void;\r\n  onAddAsset?: (asset: File) => void;\r\n  onEditAsset?: () => void;\r\n}\r\n\r\nexport const CarouselAssetActions = ({\r\n  asset,\r\n  onDeleteAsset,\r\n  onAddAsset,\r\n  onEditAsset,\r\n}: CarouselAssetActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <CarouselActions>\r\n      {onAddAsset && (\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: getTrad('control-card.add'),\r\n            defaultMessage: 'Add',\r\n          })}\r\n          onClick={() => onAddAsset(asset)}\r\n        >\r\n          <Plus />\r\n        </IconButton>\r\n      )}\r\n\r\n      <CopyLinkButton url={prefixFileUrlWithBackendUrl(asset.url)!} />\r\n\r\n      {onDeleteAsset && (\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: 'global.delete',\r\n            defaultMessage: 'Delete',\r\n          })}\r\n          onClick={() => onDeleteAsset(asset)}\r\n        >\r\n          <Trash />\r\n        </IconButton>\r\n      )}\r\n\r\n      {onEditAsset && (\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: getTrad('control-card.edit'),\r\n            defaultMessage: 'edit',\r\n          })}\r\n          onClick={onEditAsset}\r\n        >\r\n          <Pencil />\r\n        </IconButton>\r\n      )}\r\n    </CarouselActions>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport { PlusCircle as PicturePlus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetSource } from '../../../constants';\r\nimport { getTrad, rawFileToAsset } from '../../../utils';\r\n\r\nimport type { File } from '../../../../../shared/contracts/files';\r\n\r\nconst TextAlignTypography = styled(Typography)`\r\n  align-items: center;\r\n`;\r\n\r\ntype FileWithoutIdHash = Omit<File, 'id' | 'hash'>;\r\n\r\ninterface EmptyStateAssetProps {\r\n  disabled?: boolean;\r\n  onClick: (asset?: File, event?: React.MouseEventHandler<HTMLButtonElement>) => void;\r\n  onDropAsset: (assets: FileWithoutIdHash[]) => void;\r\n}\r\n\r\nexport const EmptyStateAsset = ({\r\n  disabled = false,\r\n  onClick,\r\n  onDropAsset,\r\n}: EmptyStateAssetProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [dragOver, setDragOver] = React.useState(false);\r\n\r\n  const handleDragEnter = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    if (!e.currentTarget.contains(e.relatedTarget as Node)) {\r\n      setDragOver(false);\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (e?.dataTransfer?.files) {\r\n      const files = e.dataTransfer.files;\r\n      const assets: FileWithoutIdHash[] = [];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files.item(i);\r\n        if (file) {\r\n          const asset = rawFileToAsset(file, AssetSource.Computer);\r\n\r\n          assets.push(asset);\r\n        }\r\n      }\r\n\r\n      onDropAsset(assets);\r\n    }\r\n\r\n    setDragOver(false);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      borderStyle={dragOver ? 'dashed' : undefined}\r\n      borderWidth={dragOver ? '1px' : undefined}\r\n      borderColor={dragOver ? 'primary600' : undefined}\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      height=\"100%\"\r\n      width=\"100%\"\r\n      tag=\"button\"\r\n      type=\"button\"\r\n      disabled={disabled}\r\n      onClick={onClick as unknown as React.MouseEventHandler<HTMLButtonElement>}\r\n      onDragEnter={handleDragEnter}\r\n      onDragLeave={handleDragLeave}\r\n      onDragOver={handleDragOver}\r\n      onDrop={handleDrop}\r\n      gap={3}\r\n      style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}\r\n    >\r\n      <PicturePlus\r\n        aria-hidden\r\n        width=\"3.2rem\"\r\n        height=\"3.2rem\"\r\n        fill={disabled ? 'neutral400' : 'primary600'}\r\n      />\r\n      <TextAlignTypography\r\n        variant=\"pi\"\r\n        fontWeight=\"bold\"\r\n        textColor=\"neutral600\"\r\n        style={{ textAlign: 'center' }}\r\n        tag=\"span\"\r\n      >\r\n        {formatMessage({\r\n          id: getTrad('mediaLibraryInput.placeholder'),\r\n          defaultMessage: 'Click to add an asset or drag and drop one in this area',\r\n        })}\r\n      </TextAlignTypography>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { CarouselInput, CarouselSlide } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { EditAssetDialog } from '../../EditAssetDialog/EditAssetContent';\r\n\r\nimport { CarouselAsset } from './CarouselAsset';\r\nimport { CarouselAssetActions } from './CarouselAssetActions';\r\nimport { EmptyStateAsset } from './EmptyStateAsset';\r\n\r\nimport type { File as FileAsset, RawFile } from '../../../../../shared/contracts/files';\r\n\r\nexport type FileWithoutIdHash = Omit<FileAsset, 'id' | 'hash'>;\r\n\r\ninterface Asset extends Omit<FileAsset, 'folder'> {\r\n  isLocal?: boolean;\r\n  rawFile?: RawFile;\r\n  folder?: FileAsset['folder'] & { id: number };\r\n}\r\n\r\nexport interface CarouselAssetsProps {\r\n  assets: FileAsset[];\r\n  disabled?: boolean;\r\n  error?: string;\r\n  hint?: string;\r\n  label: string;\r\n  labelAction?: React.ReactNode;\r\n  onAddAsset: (asset?: FileAsset, event?: React.MouseEventHandler<HTMLButtonElement>) => void;\r\n  onDeleteAsset: (asset: FileAsset) => void;\r\n  onDeleteAssetFromMediaLibrary: () => void;\r\n  onDropAsset?: (assets: FileWithoutIdHash[]) => void;\r\n  onEditAsset?: (asset: FileAsset) => void;\r\n  onNext: () => void;\r\n  onPrevious: () => void;\r\n  required?: boolean;\r\n  selectedAssetIndex: number;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const CarouselAssets = React.forwardRef(\r\n  (\r\n    {\r\n      assets,\r\n      disabled = false,\r\n      error,\r\n      hint,\r\n      label,\r\n      labelAction,\r\n      onAddAsset,\r\n      onDeleteAsset,\r\n      onDeleteAssetFromMediaLibrary,\r\n      onDropAsset,\r\n      onEditAsset,\r\n      onNext,\r\n      onPrevious,\r\n      required = false,\r\n      selectedAssetIndex,\r\n      trackedLocation,\r\n    }: CarouselAssetsProps,\r\n    forwardedRef\r\n  ) => {\r\n    const { formatMessage } = useIntl();\r\n    const [isEditingAsset, setIsEditingAsset] = React.useState(false);\r\n\r\n    const currentAsset = assets[selectedAssetIndex];\r\n\r\n    return (\r\n      <>\r\n        <CarouselInput\r\n          ref={forwardedRef as React.Ref<HTMLDivElement>}\r\n          label={label}\r\n          labelAction={labelAction}\r\n          secondaryLabel={currentAsset?.name}\r\n          selectedSlide={selectedAssetIndex}\r\n          previousLabel={formatMessage({\r\n            id: getTrad('mediaLibraryInput.actions.previousSlide'),\r\n            defaultMessage: 'Previous slide',\r\n          })}\r\n          nextLabel={formatMessage({\r\n            id: getTrad('mediaLibraryInput.actions.nextSlide'),\r\n            defaultMessage: 'Next slide',\r\n          })}\r\n          onNext={onNext}\r\n          onPrevious={onPrevious}\r\n          hint={hint}\r\n          error={error}\r\n          required={required}\r\n          actions={\r\n            currentAsset ? (\r\n              <CarouselAssetActions\r\n                asset={currentAsset}\r\n                onDeleteAsset={disabled ? undefined : onDeleteAsset}\r\n                onAddAsset={disabled ? undefined : onAddAsset}\r\n                onEditAsset={onEditAsset ? () => setIsEditingAsset(true) : undefined}\r\n              />\r\n            ) : undefined\r\n          }\r\n        >\r\n          {assets.length === 0 ? (\r\n            <CarouselSlide\r\n              label={formatMessage(\r\n                {\r\n                  id: getTrad('mediaLibraryInput.slideCount'),\r\n                  defaultMessage: '{n} of {m} slides',\r\n                },\r\n                { n: 1, m: 1 }\r\n              )}\r\n            >\r\n              <EmptyStateAsset\r\n                disabled={disabled}\r\n                onClick={onAddAsset}\r\n                onDropAsset={onDropAsset!}\r\n              />\r\n            </CarouselSlide>\r\n          ) : (\r\n            assets.map((asset, index) => (\r\n              <CarouselSlide\r\n                key={asset.id}\r\n                label={formatMessage(\r\n                  {\r\n                    id: getTrad('mediaLibraryInput.slideCount'),\r\n                    defaultMessage: '{n} of {m} slides',\r\n                  },\r\n                  { n: index + 1, m: assets.length }\r\n                )}\r\n              >\r\n                <CarouselAsset asset={asset} />\r\n              </CarouselSlide>\r\n            ))\r\n          )}\r\n        </CarouselInput>\r\n        <EditAssetDialog\r\n          open={isEditingAsset}\r\n          onClose={(editedAsset) => {\r\n            setIsEditingAsset(false);\r\n\r\n            // The asset has been deleted\r\n            if (editedAsset === null) {\r\n              onDeleteAssetFromMediaLibrary();\r\n            }\r\n            if (editedAsset && typeof editedAsset !== 'boolean') {\r\n              onEditAsset?.(editedAsset);\r\n            }\r\n          }}\r\n          asset={currentAsset as Asset}\r\n          canUpdate\r\n          canCopyLink\r\n          canDownload\r\n          trackedLocation={trackedLocation}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n);\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { useField, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad, getAllowedFiles, AllowedFiles } from '../../utils';\r\nimport { AssetDialog } from '../AssetDialog/AssetDialog';\r\nimport { EditFolderDialog } from '../EditFolderDialog/EditFolderDialog';\r\nimport { UploadAssetDialog, Asset } from '../UploadAssetDialog/UploadAssetDialog';\r\n\r\nimport { CarouselAssets, CarouselAssetsProps, FileWithoutIdHash } from './Carousel/CarouselAssets';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\ntype AllowedTypes = 'files' | 'images' | 'videos' | 'audios';\r\n\r\nconst STEPS = {\r\n  AssetSelect: 'SelectAsset',\r\n  AssetUpload: 'UploadAsset',\r\n  FolderCreate: 'FolderCreate',\r\n};\r\n\r\nexport interface MediaLibraryInputProps {\r\n  required?: boolean;\r\n  name: string;\r\n  labelAction?: React.ReactNode;\r\n  label?: string;\r\n  hint?: string;\r\n  disabled?: boolean;\r\n  attribute?: {\r\n    allowedTypes?: AllowedTypes[];\r\n    multiple?: boolean;\r\n  };\r\n}\r\n\r\nexport const MediaLibraryInput = React.forwardRef<CarouselAssetsProps, MediaLibraryInputProps>(\r\n  (\r\n    {\r\n      attribute: { allowedTypes = ['videos', 'files', 'images', 'audios'], multiple = false } = {},\r\n      label,\r\n      hint,\r\n      disabled = false,\r\n      labelAction = undefined,\r\n      name,\r\n      required = false,\r\n    },\r\n    forwardedRef\r\n  ) => {\r\n    const { formatMessage } = useIntl();\r\n    const { onChange, value, error } = useField(name);\r\n    const fieldAllowedTypes = allowedTypes || ['files', 'images', 'videos', 'audios'];\r\n    const [uploadedFiles, setUploadedFiles] = React.useState<Asset[] | File[]>([]);\r\n    const [step, setStep] = React.useState<string | undefined>(undefined);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n    const [droppedAssets, setDroppedAssets] = React.useState<AllowedFiles[]>();\r\n    const [folderId, setFolderId] = React.useState<number | null>(null);\r\n    const { toggleNotification } = useNotification();\r\n\r\n    React.useEffect(() => {\r\n      // Clear the uploaded files on close\r\n      if (step === undefined) {\r\n        setUploadedFiles([]);\r\n      }\r\n    }, [step]);\r\n\r\n    let selectedAssets: File[] = [];\r\n\r\n    if (Array.isArray(value)) {\r\n      selectedAssets = value;\r\n    } else if (value) {\r\n      selectedAssets = [value];\r\n    }\r\n\r\n    const handleValidation = (nextSelectedAssets: File[]) => {\r\n      const value = multiple ? nextSelectedAssets : nextSelectedAssets[0];\r\n      onChange(name, value);\r\n      setStep(undefined);\r\n    };\r\n\r\n    const handleDeleteAssetFromMediaLibrary = () => {\r\n      let nextValue;\r\n\r\n      if (multiple) {\r\n        const nextSelectedAssets = selectedAssets.filter(\r\n          (_, assetIndex) => assetIndex !== selectedIndex\r\n        );\r\n        nextValue = nextSelectedAssets.length > 0 ? nextSelectedAssets : null;\r\n      } else {\r\n        nextValue = null;\r\n      }\r\n\r\n      const value = nextValue;\r\n      onChange(name, value);\r\n\r\n      setSelectedIndex(0);\r\n    };\r\n\r\n    const handleDeleteAsset = (asset: File) => {\r\n      let nextValue;\r\n\r\n      if (multiple) {\r\n        const nextSelectedAssets = selectedAssets.filter((prevAsset) => prevAsset.id !== asset.id);\r\n\r\n        nextValue = nextSelectedAssets.length > 0 ? nextSelectedAssets : null;\r\n      } else {\r\n        nextValue = null;\r\n      }\r\n\r\n      onChange(name, nextValue);\r\n\r\n      setSelectedIndex(0);\r\n    };\r\n\r\n    const handleAssetEdit = (asset: File) => {\r\n      const nextSelectedAssets = selectedAssets.map((prevAsset) =>\r\n        prevAsset.id === asset.id ? asset : prevAsset\r\n      );\r\n\r\n      onChange(name, multiple ? nextSelectedAssets : nextSelectedAssets[0]);\r\n    };\r\n\r\n    const validateAssetsTypes = (\r\n      assets: FileWithoutIdHash[] | Asset[],\r\n      callback: (assets?: AllowedFiles[], error?: string) => void\r\n    ) => {\r\n      const allowedAssets = getAllowedFiles(fieldAllowedTypes, assets as AllowedFiles[]);\r\n\r\n      if (allowedAssets.length > 0) {\r\n        callback(allowedAssets);\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          timeout: 4000,\r\n          message: formatMessage(\r\n            {\r\n              id: getTrad('input.notification.not-supported'),\r\n              defaultMessage: `You can't upload this type of file.`,\r\n            },\r\n            {\r\n              fileTypes: fieldAllowedTypes.join(','),\r\n            }\r\n          ),\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleAssetDrop = (assets: FileWithoutIdHash[]) => {\r\n      validateAssetsTypes(assets, (allowedAssets?: AllowedFiles[]) => {\r\n        setDroppedAssets(allowedAssets);\r\n        setStep(STEPS.AssetUpload);\r\n      });\r\n    };\r\n\r\n    if (multiple && selectedAssets.length > 0) {\r\n      label = `${label} (${selectedIndex + 1} / ${selectedAssets.length})`;\r\n    }\r\n\r\n    const handleNext = () => {\r\n      setSelectedIndex((current) => (current < selectedAssets.length - 1 ? current + 1 : 0));\r\n    };\r\n\r\n    const handlePrevious = () => {\r\n      setSelectedIndex((current) => (current > 0 ? current - 1 : selectedAssets.length - 1));\r\n    };\r\n\r\n    const handleFilesUploadSucceeded = (uploadedFiles: Asset[] | File[]) => {\r\n      setUploadedFiles((prev) => [...prev, ...uploadedFiles]);\r\n    };\r\n\r\n    let initiallySelectedAssets = selectedAssets;\r\n\r\n    if (uploadedFiles.length > 0) {\r\n      const allowedUploadedFiles = getAllowedFiles(\r\n        fieldAllowedTypes,\r\n        uploadedFiles as AllowedFiles[]\r\n      );\r\n\r\n      initiallySelectedAssets = multiple\r\n        ? [...allowedUploadedFiles, ...selectedAssets]\r\n        : [allowedUploadedFiles[0]];\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <CarouselAssets\r\n          ref={forwardedRef}\r\n          assets={selectedAssets}\r\n          disabled={disabled}\r\n          label={label!}\r\n          labelAction={labelAction}\r\n          onDeleteAsset={handleDeleteAsset}\r\n          onDeleteAssetFromMediaLibrary={handleDeleteAssetFromMediaLibrary}\r\n          onAddAsset={() => setStep(STEPS.AssetSelect)}\r\n          onDropAsset={handleAssetDrop}\r\n          onEditAsset={handleAssetEdit}\r\n          onNext={handleNext}\r\n          onPrevious={handlePrevious}\r\n          error={error}\r\n          hint={hint}\r\n          required={required}\r\n          selectedAssetIndex={selectedIndex}\r\n          trackedLocation=\"content-manager\"\r\n        />\r\n\r\n        {step === STEPS.AssetSelect && (\r\n          <AssetDialog\r\n            allowedTypes={fieldAllowedTypes as AllowedTypes[]}\r\n            initiallySelectedAssets={initiallySelectedAssets}\r\n            folderId={folderId}\r\n            onClose={() => {\r\n              setStep(undefined);\r\n              setFolderId(null);\r\n            }}\r\n            open={step === STEPS.AssetSelect}\r\n            onValidate={handleValidation}\r\n            multiple={multiple}\r\n            onAddAsset={() => setStep(STEPS.AssetUpload)}\r\n            onAddFolder={() => setStep(STEPS.FolderCreate)}\r\n            onChangeFolder={(folder) => setFolderId(folder)}\r\n            trackedLocation=\"content-manager\"\r\n          />\r\n        )}\r\n\r\n        {step === STEPS.AssetUpload && (\r\n          <UploadAssetDialog\r\n            open={step === STEPS.AssetUpload}\r\n            onClose={() => setStep(STEPS.AssetSelect)}\r\n            initialAssetsToAdd={droppedAssets as Asset[]}\r\n            addUploadedFiles={handleFilesUploadSucceeded}\r\n            trackedLocation=\"content-manager\"\r\n            folderId={folderId}\r\n            validateAssetsTypes={validateAssetsTypes}\r\n          />\r\n        )}\r\n\r\n        {step === STEPS.FolderCreate && (\r\n          <EditFolderDialog\r\n            open={step === STEPS.FolderCreate}\r\n            onClose={() => setStep(STEPS.AssetSelect)}\r\n            parentFolderId={folderId}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n","import { Images } from '@strapi/icons';\r\n\r\nimport pluginPkg from '../../package.json';\r\n\r\nimport { MediaLibraryDialog } from './components/MediaLibraryDialog/MediaLibraryDialog';\r\nimport { MediaLibraryInput } from './components/MediaLibraryInput/MediaLibraryInput';\r\nimport { PERMISSIONS } from './constants';\r\nimport { pluginId } from './pluginId';\r\nimport { getTrad, prefixPluginTranslations } from './utils';\r\n\r\nimport type { MediaLibraryDialogProps } from './components/MediaLibraryDialog/MediaLibraryDialog';\r\nimport type { MediaLibraryInputProps } from './components/MediaLibraryInput/MediaLibraryInput';\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\nimport type { Plugin } from '@strapi/types';\r\n\r\nconst name = pluginPkg.strapi.name;\r\n\r\nconst admin: Plugin.Config.AdminInput = {\r\n  register(app: StrapiApp) {\r\n    app.addMenuLink({\r\n      to: `plugins/${pluginId}`,\r\n      icon: Images,\r\n      intlLabel: {\r\n        id: `${pluginId}.plugin.name`,\r\n        defaultMessage: 'Media Library',\r\n      },\r\n      permissions: PERMISSIONS.main,\r\n      Component: () => import('./pages/App/App').then((mod) => ({ default: mod.Upload })),\r\n      position: 4,\r\n    });\r\n\r\n    app.addSettingsLink('global', {\r\n      id: 'media-library-settings',\r\n      to: 'media-library',\r\n      intlLabel: {\r\n        id: getTrad('plugin.name'),\r\n        defaultMessage: 'Media Library',\r\n      },\r\n      async Component() {\r\n        const { ProtectedSettingsPage } = await import('./pages/SettingsPage/SettingsPage');\r\n        return { default: ProtectedSettingsPage };\r\n      },\r\n      permissions: PERMISSIONS.settings,\r\n    });\r\n\r\n    app.addFields({\r\n      type: 'media',\r\n      Component: MediaLibraryInput as React.FC<Partial<MediaLibraryInputProps>>,\r\n    });\r\n    app.addComponents([\r\n      {\r\n        name: 'media-library',\r\n        Component: MediaLibraryDialog as React.FC<Partial<MediaLibraryDialogProps>>,\r\n      },\r\n    ]);\r\n\r\n    app.registerPlugin({\r\n      id: pluginId,\r\n      name,\r\n    });\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, pluginId),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default admin;\r\n"],"names":["data","files","name","getTrad","error","pluginId","errorsTrads","AssetType","AssetSource","endpoint","option","value","options","components","LinkIcon","CardAsset","File","Wrapper","UploadProgressWrapper","DownloadIcon","Resize","LoadingBody","Extension","Card","isSelectable","AudioPreviewWrapper","IconWrapper","VideoPreviewWrapper","BaseBreadcrumbs","ReactRouterLink","cells","Link","displayedFilters","filterToAdd","hasFilter","GridIcon","folderId","PicturePlus","assets","STEPS","uploadedFiles"],"mappings":"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"}