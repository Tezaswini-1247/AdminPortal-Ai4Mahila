{"version":3,"file":"id-FuGqdNs8.mjs","sources":["../../admin/src/services/admin.ts","../../admin/src/routes/settings/hooks/useKeyboardDragAndDrop.ts","../../admin/src/routes/settings/hooks/useDragAndDrop.ts","../../admin/src/routes/settings/components/AddStage.tsx","../../admin/src/routes/settings/components/Stages.tsx","../../admin/src/routes/settings/components/WorkflowAttributes.tsx","../../admin/src/routes/settings/id.tsx"],"sourcesContent":["import { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\r\n\r\nimport { reviewWorkflowsApi } from './api';\r\n\r\ntype Roles = SanitizedAdminUser['roles'];\r\ntype RolesResponse = { data: Roles };\r\n\r\nconst adminApi = reviewWorkflowsApi.injectEndpoints({\r\n  endpoints(builder) {\r\n    return {\r\n      getAdminRoles: builder.query<Roles, void>({\r\n        query: () => ({\r\n          url: `/admin/roles`,\r\n          method: 'GET',\r\n        }),\r\n        transformResponse: (res: RolesResponse) => {\r\n          return res.data;\r\n        },\r\n      }),\r\n    };\r\n  },\r\n});\r\n\r\nconst { useGetAdminRolesQuery } = adminApi;\r\n\r\nexport { useGetAdminRolesQuery };\r\nexport type { SanitizedAdminUser, Roles };\r\n","import * as React from 'react';\r\n\r\nexport type UseKeyboardDragAndDropCallbacks<TIndex extends number | Array<number> = number> = {\r\n  onCancel?: (index: TIndex) => void;\r\n  onDropItem?: (currentIndex: TIndex, newIndex?: TIndex) => void;\r\n  onGrabItem?: (index: TIndex) => void;\r\n  onMoveItem?: (newIndex: TIndex, currentIndex: TIndex) => void;\r\n};\r\n\r\n/**\r\n * Utility hook designed to implement keyboard accessibile drag and drop by\r\n * returning an onKeyDown handler to be passed to the drag icon button.\r\n *\r\n * @internal - You should use `useDragAndDrop` instead.\r\n */\r\nexport const useKeyboardDragAndDrop = <TIndex extends number | Array<number> = number>(\r\n  active: boolean,\r\n  index: TIndex,\r\n  { onCancel, onDropItem, onGrabItem, onMoveItem }: UseKeyboardDragAndDropCallbacks<TIndex>\r\n) => {\r\n  const [isSelected, setIsSelected] = React.useState(false);\r\n\r\n  const handleMove = (movement: 'UP' | 'DOWN') => {\r\n    if (!isSelected) {\r\n      return;\r\n    }\r\n    if (typeof index === 'number' && onMoveItem) {\r\n      if (movement === 'UP') {\r\n        onMoveItem((index - 1) as TIndex, index);\r\n      } else if (movement === 'DOWN') {\r\n        onMoveItem((index + 1) as TIndex, index);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDragClick = () => {\r\n    if (isSelected) {\r\n      if (onDropItem) {\r\n        onDropItem(index);\r\n      }\r\n      setIsSelected(false);\r\n    } else {\r\n      if (onGrabItem) {\r\n        onGrabItem(index);\r\n      }\r\n      setIsSelected(true);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isSelected) {\r\n      setIsSelected(false);\r\n\r\n      if (onCancel) {\r\n        onCancel(index);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = <E extends Element>(e: React.KeyboardEvent<E>) => {\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    if (e.key === 'Tab' && !isSelected) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n\r\n    switch (e.key) {\r\n      case ' ':\r\n      case 'Enter':\r\n        handleDragClick();\r\n        break;\r\n\r\n      case 'Escape':\r\n        handleCancel();\r\n        break;\r\n\r\n      case 'ArrowDown':\r\n      case 'ArrowRight':\r\n        handleMove('DOWN');\r\n        break;\r\n\r\n      case 'ArrowUp':\r\n      case 'ArrowLeft':\r\n        handleMove('UP');\r\n        break;\r\n\r\n      default:\r\n    }\r\n  };\r\n\r\n  return handleKeyDown;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useDrag,\r\n  useDrop,\r\n  type HandlerManager,\r\n  type ConnectDragSource,\r\n  type ConnectDropTarget,\r\n  type ConnectDragPreview,\r\n  type DragSourceMonitor,\r\n} from 'react-dnd';\r\n\r\nimport {\r\n  useKeyboardDragAndDrop,\r\n  type UseKeyboardDragAndDropCallbacks,\r\n} from './useKeyboardDragAndDrop';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\nconst DIRECTIONS = {\r\n  UPWARD: 'upward',\r\n  DOWNWARD: 'downward',\r\n} as const;\r\n\r\nconst DROP_SENSITIVITY = {\r\n  REGULAR: 'regular',\r\n  IMMEDIATE: 'immediate',\r\n} as const;\r\n\r\ninterface UseDragAndDropOptions<\r\n  TIndex extends number | Array<number> = number,\r\n  TItem extends { index: TIndex } = { index: TIndex },\r\n> extends UseKeyboardDragAndDropCallbacks<TIndex> {\r\n  type?: string;\r\n  index: TIndex;\r\n  item?: TItem;\r\n  onStart?: () => void;\r\n  onEnd?: () => void;\r\n  dropSensitivity?: (typeof DROP_SENSITIVITY)[keyof typeof DROP_SENSITIVITY];\r\n}\r\n\r\ntype Identifier = ReturnType<HandlerManager['getHandlerId']>;\r\n\r\ntype UseDragAndDropReturn<E extends Element = HTMLElement> = [\r\n  props: {\r\n    handlerId: Identifier;\r\n    isDragging: boolean;\r\n    handleKeyDown: <E extends Element>(event: React.KeyboardEvent<E>) => void;\r\n    isOverDropTarget: boolean;\r\n    direction: (typeof DIRECTIONS)[keyof typeof DIRECTIONS] | null;\r\n  },\r\n  objectRef: React.RefObject<E>,\r\n  dropRef: ConnectDropTarget,\r\n  dragRef: ConnectDragSource,\r\n  dragPreviewRef: ConnectDragPreview,\r\n];\r\n\r\ntype DropCollectedProps = {\r\n  handlerId: Identifier;\r\n  isOver: boolean;\r\n};\r\n\r\n/**\r\n * A utility hook abstracting the general drag and drop hooks from react-dnd.\r\n * Centralising the same behaviours and by default offering keyboard support.\r\n */\r\nconst useDragAndDrop = <\r\n  TIndex extends number | Array<number>,\r\n  TItem extends { index: TIndex; id?: Data.ID; [key: string]: unknown } = {\r\n    index: TIndex;\r\n    [key: string]: unknown;\r\n  },\r\n  E extends Element = HTMLElement,\r\n>(\r\n  active: boolean,\r\n  {\r\n    type = 'STRAPI_DND',\r\n    index,\r\n    item,\r\n    onStart,\r\n    onEnd,\r\n    onGrabItem,\r\n    onDropItem,\r\n    onCancel,\r\n    onMoveItem,\r\n    dropSensitivity = DROP_SENSITIVITY.REGULAR,\r\n  }: UseDragAndDropOptions<TIndex, TItem>\r\n): UseDragAndDropReturn<E> => {\r\n  const objectRef = React.useRef<E>(null);\r\n\r\n  const [{ handlerId, isOver }, dropRef] = useDrop<TItem, void, DropCollectedProps>({\r\n    accept: type,\r\n    collect(monitor) {\r\n      return {\r\n        handlerId: monitor.getHandlerId(),\r\n        isOver: monitor.isOver({ shallow: true }),\r\n      };\r\n    },\r\n    drop(item) {\r\n      const draggedIndex = item.index;\r\n      const newIndex = index;\r\n\r\n      if (isOver && onDropItem) {\r\n        onDropItem(draggedIndex, newIndex);\r\n      }\r\n    },\r\n    hover(item, monitor) {\r\n      if (!objectRef.current || !onMoveItem) {\r\n        return;\r\n      }\r\n\r\n      const dragIndex = item.index;\r\n      const newIndex = index;\r\n\r\n      const hoverBoundingRect = objectRef.current?.getBoundingClientRect();\r\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      const clientOffset = monitor.getClientOffset();\r\n      if (!clientOffset) return;\r\n\r\n      const hoverClientY = clientOffset && clientOffset.y - hoverBoundingRect.top;\r\n      if (typeof dragIndex === 'number' && typeof newIndex === 'number') {\r\n        if (dragIndex === newIndex) {\r\n          // Don't replace items with themselves\r\n          return;\r\n        }\r\n\r\n        if (dropSensitivity === DROP_SENSITIVITY.REGULAR) {\r\n          // Dragging downwards\r\n          if (dragIndex < newIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n          }\r\n\r\n          // Dragging upwards\r\n          if (dragIndex > newIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        onMoveItem(newIndex, dragIndex);\r\n        item.index = newIndex;\r\n      } else {\r\n        // Using numbers as indices doesn't work for nested list items with path like [1, 1, 0]\r\n        if (Array.isArray(dragIndex) && Array.isArray(newIndex)) {\r\n          // Indices comparison to find item position in nested list\r\n          const minLength = Math.min(dragIndex.length, newIndex.length);\r\n          let areEqual = true;\r\n          let isLessThan = false;\r\n          let isGreaterThan = false;\r\n\r\n          for (let i = 0; i < minLength; i++) {\r\n            if (dragIndex[i] < newIndex[i]) {\r\n              isLessThan = true;\r\n              areEqual = false;\r\n              break;\r\n            } else if (dragIndex[i] > newIndex[i]) {\r\n              isGreaterThan = true;\r\n              areEqual = false;\r\n              break;\r\n            }\r\n          }\r\n\r\n          // Don't replace items with themselves\r\n          if (areEqual && dragIndex.length === newIndex.length) {\r\n            return;\r\n          }\r\n\r\n          if (dropSensitivity === DROP_SENSITIVITY.REGULAR) {\r\n            // Dragging downwards\r\n            if (isLessThan && !isGreaterThan && hoverClientY < hoverMiddleY) {\r\n              return;\r\n            }\r\n\r\n            // Dragging upwards\r\n            if (isGreaterThan && !isLessThan && hoverClientY > hoverMiddleY) {\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n        onMoveItem(newIndex, dragIndex);\r\n        item.index = newIndex;\r\n      }\r\n    },\r\n  });\r\n\r\n  const getDragDirection = (monitor: DragSourceMonitor<TItem, void>) => {\r\n    if (\r\n      monitor &&\r\n      monitor.isDragging() &&\r\n      !monitor.didDrop() &&\r\n      monitor.getInitialClientOffset() &&\r\n      monitor.getClientOffset()\r\n    ) {\r\n      const deltaY = monitor.getInitialClientOffset()!.y - monitor.getClientOffset()!.y;\r\n\r\n      if (deltaY > 0) return DIRECTIONS.UPWARD;\r\n\r\n      if (deltaY < 0) return DIRECTIONS.DOWNWARD;\r\n\r\n      return null;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const [{ isDragging, direction }, dragRef, dragPreviewRef] = useDrag({\r\n    type,\r\n    item() {\r\n      if (onStart) {\r\n        onStart();\r\n      }\r\n\r\n      /**\r\n       * This will be attached and it helps define the preview sizes\r\n       * when a component is flexy e.g. Relations\r\n       */\r\n      const { width } = objectRef.current?.getBoundingClientRect() ?? {};\r\n\r\n      return { index, width, ...item };\r\n    },\r\n    end() {\r\n      if (onEnd) {\r\n        onEnd();\r\n      }\r\n    },\r\n    canDrag: active,\r\n    /**\r\n     * This is useful when the item is in a virtualized list.\r\n     * However, if we don't have an ID then we want the libraries\r\n     * defaults to take care of this.\r\n     */\r\n    isDragging: item?.id\r\n      ? (monitor) => {\r\n          return item.id === monitor.getItem().id;\r\n        }\r\n      : undefined,\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n      initialOffset: monitor.getInitialClientOffset(),\r\n      currentOffset: monitor.getClientOffset(),\r\n      direction: getDragDirection(monitor),\r\n    }),\r\n  });\r\n\r\n  const handleKeyDown = useKeyboardDragAndDrop(active, index, {\r\n    onGrabItem,\r\n    onDropItem,\r\n    onCancel,\r\n    onMoveItem,\r\n  });\r\n\r\n  return [\r\n    { handlerId, isDragging, handleKeyDown, isOverDropTarget: isOver, direction },\r\n    objectRef,\r\n    dropRef,\r\n    dragRef,\r\n    dragPreviewRef,\r\n  ];\r\n};\r\n\r\nexport {\r\n  useDragAndDrop,\r\n  UseDragAndDropReturn,\r\n  UseDragAndDropOptions,\r\n  DIRECTIONS,\r\n  DROP_SENSITIVITY,\r\n};\r\n","import { Box, BoxComponent, ButtonProps, Flex, Typography } from '@strapi/design-system';\r\nimport { PlusCircle } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\nexport const AddStage = ({ children, ...props }: ButtonProps) => {\r\n  return (\r\n    <StyledButton\r\n      tag=\"button\"\r\n      background=\"neutral0\"\r\n      borderColor=\"neutral150\"\r\n      paddingBottom={3}\r\n      paddingLeft={4}\r\n      paddingRight={4}\r\n      paddingTop={3}\r\n      shadow=\"filterShadow\"\r\n      {...props}\r\n    >\r\n      <Typography variant=\"pi\" fontWeight=\"bold\">\r\n        <Flex tag=\"span\" gap={2}>\r\n          <PlusCircle width=\"2.4rem\" height=\"2.4rem\" aria-hidden />\r\n          {children}\r\n        </Flex>\r\n      </Typography>\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nconst StyledButton = styled<BoxComponent<'button'>>(Box)`\r\n  border-radius: 26px;\r\n  color: ${({ theme }) => theme.colors.neutral500};\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.primary600};\r\n  }\r\n\r\n  &:active {\r\n    color: ${({ theme }) => theme.colors.primary600};\r\n  }\r\n`;\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useField,\r\n  useForm,\r\n  useTracking,\r\n  ConfirmDialog,\r\n  useNotification,\r\n  InputRenderer as AdminInputRenderer,\r\n  InputProps,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  MultiSelectOption,\r\n  Accordion,\r\n  Grid,\r\n  IconButton,\r\n  MultiSelect,\r\n  MultiSelectGroup,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  TextInput,\r\n  VisuallyHidden,\r\n  useComposedRefs,\r\n  Menu,\r\n  MenuItem,\r\n  Field,\r\n  Dialog,\r\n} from '@strapi/design-system';\r\nimport { Duplicate, Drag, More, EyeStriked } from '@strapi/icons';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { Stage as IStage, StagePermission } from '../../../../../shared/contracts/review-workflows';\r\nimport { useGetAdminRolesQuery } from '../../../services/admin';\r\nimport { AVAILABLE_COLORS, getStageColorByHex } from '../../../utils/colors';\r\nimport { DRAG_DROP_TYPES } from '../constants';\r\nimport { useDragAndDrop } from '../hooks/useDragAndDrop';\r\n\r\nimport { AddStage } from './AddStage';\r\n\r\ninterface WorkflowStage extends Pick<IStage, 'id' | 'name' | 'permissions' | 'color'> {\r\n  __temp_key__: string;\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Stages\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface StagesProps {\r\n  canDelete?: boolean;\r\n  canUpdate?: boolean;\r\n  isCreating?: boolean;\r\n}\r\n\r\nconst Stages = ({ canDelete = true, canUpdate = true, isCreating }: StagesProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const addFieldRow = useForm('Stages', (state) => state.addFieldRow);\r\n  const { value: stages = [] } = useField<WorkflowStage[]>('stages');\r\n\r\n  return (\r\n    <Flex direction=\"column\" gap={6} width=\"100%\">\r\n      <Box position=\"relative\" width=\"100%\">\r\n        <Background\r\n          background=\"neutral200\"\r\n          height=\"100%\"\r\n          left=\"50%\"\r\n          position=\"absolute\"\r\n          top=\"0\"\r\n          width={2}\r\n        />\r\n\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={6} position=\"relative\" tag=\"ol\">\r\n          {stages.map((stage, index) => {\r\n            return (\r\n              <Box key={stage.__temp_key__} tag=\"li\">\r\n                <Stage\r\n                  index={index}\r\n                  canDelete={stages.length > 1 && canDelete}\r\n                  canReorder={stages.length > 1}\r\n                  canUpdate={canUpdate}\r\n                  stagesCount={stages.length}\r\n                  defaultOpen={!stage.id}\r\n                  {...stage}\r\n                />\r\n              </Box>\r\n            );\r\n          })}\r\n        </Flex>\r\n      </Box>\r\n\r\n      {canUpdate && (\r\n        <AddStage\r\n          type=\"button\"\r\n          onClick={() => {\r\n            addFieldRow('stages', { name: '' });\r\n            trackUsage('willCreateStage');\r\n          }}\r\n        >\r\n          {formatMessage({\r\n            id: 'Settings.review-workflows.stage.add',\r\n            defaultMessage: 'Add new stage',\r\n          })}\r\n        </AddStage>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst Background = styled(Box)`\r\n  transform: translateX(-50%);\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Stage\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface StageProps extends WorkflowStage {\r\n  canDelete?: boolean;\r\n  canReorder?: boolean;\r\n  canUpdate?: boolean;\r\n  index: number;\r\n  stagesCount: number;\r\n  defaultOpen?: boolean;\r\n}\r\n\r\nconst Stage = ({\r\n  index,\r\n  canDelete = false,\r\n  canReorder = false,\r\n  canUpdate = false,\r\n  stagesCount,\r\n  name,\r\n  permissions,\r\n  color,\r\n  defaultOpen,\r\n}: StageProps) => {\r\n  const [liveText, setLiveText] = React.useState<string>();\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const stageErrors = useForm('Stages', (state) => state.errors.stages as object[]);\r\n  const error = stageErrors?.[index];\r\n  const addFieldRow = useForm('Stage', (state) => state.addFieldRow);\r\n  const moveFieldRow = useForm('Stage', (state) => state.moveFieldRow);\r\n  const removeFieldRow = useForm('Stage', (state) => state.removeFieldRow);\r\n\r\n  const getItemPos = (index: number) => `${index + 1} of ${stagesCount}`;\r\n\r\n  const handleGrabStage = (index: number) => {\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: 'dnd.grab-item',\r\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\r\n        },\r\n        {\r\n          item: name,\r\n          position: getItemPos(index),\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDropStage = (index: number) => {\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: 'dnd.drop-item',\r\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\r\n        },\r\n        {\r\n          item: name,\r\n          position: getItemPos(index),\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCancelDragStage = () => {\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: 'dnd.cancel-item',\r\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\r\n        },\r\n        {\r\n          item: name,\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleMoveStage = (newIndex: number, oldIndex: number) => {\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: 'dnd.reorder',\r\n          defaultMessage: '{item}, moved. New position in list: {position}.',\r\n        },\r\n        {\r\n          item: name,\r\n          position: getItemPos(newIndex),\r\n        }\r\n      )\r\n    );\r\n\r\n    moveFieldRow('stages', oldIndex, newIndex);\r\n  };\r\n\r\n  const [{ handlerId, isDragging, handleKeyDown }, stageRef, dropRef, dragRef, dragPreviewRef] =\r\n    useDragAndDrop(canReorder, {\r\n      index,\r\n      item: {\r\n        index,\r\n        name,\r\n      },\r\n      onGrabItem: handleGrabStage,\r\n      onDropItem: handleDropStage,\r\n      onMoveItem: handleMoveStage,\r\n      onCancel: handleCancelDragStage,\r\n      type: DRAG_DROP_TYPES.STAGE,\r\n    });\r\n\r\n  // @ts-expect-error – the stageRef is incorrectly typed.\r\n  const composedRef = useComposedRefs<HTMLDivElement>(stageRef, dropRef);\r\n\r\n  React.useEffect(() => {\r\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\r\n  }, [dragPreviewRef, index]);\r\n\r\n  const handleCloneClick = () => {\r\n    addFieldRow('stages', { name, color, permissions });\r\n  };\r\n\r\n  const id = React.useId();\r\n\r\n  return (\r\n    <Box ref={composedRef} shadow=\"tableShadow\">\r\n      {liveText && <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>}\r\n\r\n      {isDragging ? (\r\n        <Box\r\n          background=\"primary100\"\r\n          borderStyle=\"dashed\"\r\n          borderColor=\"primary600\"\r\n          borderWidth=\"1px\"\r\n          display=\"block\"\r\n          hasRadius\r\n          padding={6}\r\n        />\r\n      ) : (\r\n        <AccordionRoot\r\n          onValueChange={(value) => {\r\n            if (value) {\r\n              trackUsage('willEditStage');\r\n            }\r\n          }}\r\n          defaultValue={defaultOpen ? id : undefined}\r\n          $error={Object.values(error ?? {}).length > 0}\r\n        >\r\n          <Accordion.Item value={id}>\r\n            <Accordion.Header>\r\n              <Accordion.Trigger>{name}</Accordion.Trigger>\r\n              <Accordion.Actions>\r\n                {canDelete || canUpdate ? (\r\n                  <>\r\n                    <Menu.Root>\r\n                      <ContextMenuTrigger size=\"S\" endIcon={null} paddingLeft={2} paddingRight={2}>\r\n                        <More aria-hidden focusable={false} />\r\n                        <VisuallyHidden tag=\"span\">\r\n                          {formatMessage({\r\n                            id: '[tbdb].components.DynamicZone.more-actions',\r\n                            defaultMessage: 'More actions',\r\n                          })}\r\n                        </VisuallyHidden>\r\n                      </ContextMenuTrigger>\r\n                      {/* z-index needs to be as big as the one defined for the wrapper in Stages, otherwise the menu\r\n                       * disappears behind the accordion\r\n                       */}\r\n                      <Menu.Content popoverPlacement=\"bottom-end\" zIndex={2}>\r\n                        <Menu.SubRoot>\r\n                          {canUpdate && (\r\n                            <MenuItem onClick={handleCloneClick}>\r\n                              {formatMessage({\r\n                                id: 'Settings.review-workflows.stage.delete',\r\n                                defaultMessage: 'Duplicate stage',\r\n                              })}\r\n                            </MenuItem>\r\n                          )}\r\n\r\n                          {canDelete && (\r\n                            <DeleteMenuItem onClick={() => removeFieldRow('stages', index)}>\r\n                              {formatMessage({\r\n                                id: 'Settings.review-workflows.stage.delete',\r\n                                defaultMessage: 'Delete',\r\n                              })}\r\n                            </DeleteMenuItem>\r\n                          )}\r\n                        </Menu.SubRoot>\r\n                      </Menu.Content>\r\n                    </Menu.Root>\r\n\r\n                    {canUpdate && (\r\n                      <IconButton\r\n                        background=\"transparent\"\r\n                        hasRadius\r\n                        variant=\"ghost\"\r\n                        data-handler-id={handlerId}\r\n                        ref={dragRef}\r\n                        label={formatMessage({\r\n                          id: 'Settings.review-workflows.stage.drag',\r\n                          defaultMessage: 'Drag',\r\n                        })}\r\n                        onClick={(e) => e.stopPropagation()}\r\n                        onKeyDown={handleKeyDown}\r\n                      >\r\n                        <Drag />\r\n                      </IconButton>\r\n                    )}\r\n                  </>\r\n                ) : null}\r\n              </Accordion.Actions>\r\n            </Accordion.Header>\r\n            <Accordion.Content>\r\n              <Grid.Root gap={4} padding={6}>\r\n                {[\r\n                  {\r\n                    disabled: !canUpdate,\r\n                    label: formatMessage({\r\n                      id: 'Settings.review-workflows.stage.name.label',\r\n                      defaultMessage: 'Stage name',\r\n                    }),\r\n                    name: `stages.${index}.name`,\r\n                    required: true,\r\n                    size: 6,\r\n                    type: 'string' as const,\r\n                  },\r\n                  {\r\n                    disabled: !canUpdate,\r\n                    label: formatMessage({\r\n                      id: 'content-manager.reviewWorkflows.stage.color',\r\n                      defaultMessage: 'Color',\r\n                    }),\r\n                    name: `stages.${index}.color`,\r\n                    required: true,\r\n                    size: 6,\r\n                    type: 'color' as const,\r\n                  },\r\n                  {\r\n                    disabled: !canUpdate,\r\n                    label: formatMessage({\r\n                      id: 'Settings.review-workflows.stage.permissions.label',\r\n                      defaultMessage: 'Roles that can change this stage',\r\n                    }),\r\n                    name: `stages.${index}.permissions`,\r\n                    placeholder: formatMessage({\r\n                      id: 'Settings.review-workflows.stage.permissions.placeholder',\r\n                      defaultMessage: 'Select a role',\r\n                    }),\r\n                    required: true,\r\n                    size: 6,\r\n                    type: 'permissions' as const,\r\n                  },\r\n                ].map(({ size, ...field }) => (\r\n                  <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                    <InputRenderer {...field} />\r\n                  </Grid.Item>\r\n                ))}\r\n              </Grid.Root>\r\n            </Accordion.Content>\r\n          </Accordion.Item>\r\n        </AccordionRoot>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst AccordionRoot = styled(Accordion.Root)<{ $error?: boolean }>`\r\n  border: 1px solid\r\n    ${({ theme, $error }) => ($error ? theme.colors.danger600 : theme.colors.neutral200)};\r\n`;\r\n\r\nconst DeleteMenuItem = styled(MenuItem)`\r\n  color: ${({ theme }) => theme.colors.danger600};\r\n`;\r\n\r\n// Removing the font-size from the child-span aligns the\r\n// more icon vertically\r\nconst ContextMenuTrigger = styled(Menu.Trigger)`\r\n  :hover,\r\n  :focus {\r\n    background-color: ${({ theme }) => theme.colors.neutral100};\r\n  }\r\n\r\n  > span {\r\n    font-size: 0;\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * InputRenderer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype InputRendererProps = InputProps | ColorSelectorProps | PermissionsFieldProps;\r\n\r\nconst InputRenderer = (props: InputRendererProps) => {\r\n  switch (props.type) {\r\n    case 'color':\r\n      return <ColorSelector {...props} />;\r\n    case 'permissions':\r\n      return <PermissionsField {...props} />;\r\n    default:\r\n      return <AdminInputRenderer {...props} />;\r\n  }\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ColorSelector\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ColorSelectorProps\r\n  extends Omit<Extract<InputProps, { type: 'enumeration' }>, 'type' | 'options'> {\r\n  type: 'color';\r\n}\r\n\r\nconst ColorSelector = ({ disabled, label, name, required }: ColorSelectorProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { value, error, onChange } = useField<string>(name);\r\n\r\n  const colorOptions = AVAILABLE_COLORS.map(({ hex, name }) => ({\r\n    value: hex,\r\n    label: formatMessage(\r\n      {\r\n        id: 'Settings.review-workflows.stage.color.name',\r\n        defaultMessage: '{name}',\r\n      },\r\n      { name }\r\n    ),\r\n    color: hex,\r\n  }));\r\n\r\n  const { themeColorName } = getStageColorByHex(value) ?? {};\r\n\r\n  return (\r\n    <Field.Root error={error} name={name} required={required}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <SingleSelect\r\n        disabled={disabled}\r\n        onChange={(v) => {\r\n          onChange(name, v.toString());\r\n        }}\r\n        value={value?.toUpperCase()}\r\n        startIcon={\r\n          <Flex\r\n            tag=\"span\"\r\n            height={2}\r\n            background={value}\r\n            borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\r\n            hasRadius\r\n            shrink={0}\r\n            width={2}\r\n          />\r\n        }\r\n      >\r\n        {colorOptions.map(({ value, label, color }) => {\r\n          const { themeColorName } = getStageColorByHex(color) || {};\r\n\r\n          return (\r\n            <SingleSelectOption\r\n              value={value}\r\n              key={value}\r\n              startIcon={\r\n                <Flex\r\n                  tag=\"span\"\r\n                  height={2}\r\n                  background={color}\r\n                  borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\r\n                  hasRadius\r\n                  shrink={0}\r\n                  width={2}\r\n                />\r\n              }\r\n            >\r\n              {label}\r\n            </SingleSelectOption>\r\n          );\r\n        })}\r\n      </SingleSelect>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PermissionsField\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface PermissionsFieldProps\r\n  extends Omit<Extract<InputProps, { type: 'enumeration' }>, 'type' | 'options'> {\r\n  type: 'permissions';\r\n}\r\n\r\nconst PermissionsField = ({ disabled, name, placeholder, required }: PermissionsFieldProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const [isApplyAllConfirmationOpen, setIsApplyAllConfirmationOpen] = React.useState(false);\r\n  const { value = [], error, onChange } = useField<StagePermission[]>(name);\r\n  const allStages = useForm<WorkflowStage[]>('PermissionsField', (state) => state.values.stages);\r\n  const onFormValueChange = useForm('PermissionsField', (state) => state.onChange);\r\n  const rolesErrorCount = React.useRef(0);\r\n\r\n  const { data: roles = [], isLoading, error: getRolesError } = useGetAdminRolesQuery();\r\n\r\n  // Super admins always have permissions to do everything and therefore\r\n  // there is no point for this role to show up in the role combobox\r\n  const filteredRoles = roles?.filter((role) => role.code !== 'strapi-super-admin') ?? [];\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      !isLoading &&\r\n      getRolesError &&\r\n      'status' in getRolesError &&\r\n      getRolesError.status == 403 &&\r\n      rolesErrorCount.current === 0\r\n    ) {\r\n      rolesErrorCount.current = 1;\r\n\r\n      toggleNotification({\r\n        blockTransition: true,\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'review-workflows.stage.permissions.noPermissions.description',\r\n          defaultMessage: 'You don’t have the permission to see roles. Contact your administrator.',\r\n        }),\r\n      });\r\n    }\r\n  }, [formatMessage, isLoading, roles, toggleNotification, getRolesError]);\r\n\r\n  if (!isLoading && filteredRoles.length === 0) {\r\n    return (\r\n      <Field.Root\r\n        name={name}\r\n        hint={formatMessage({\r\n          id: 'Settings.review-workflows.stage.permissions.noPermissions.description',\r\n          defaultMessage: 'You don’t have the permission to see roles',\r\n        })}\r\n        required={required}\r\n      >\r\n        <Field.Label>\r\n          {formatMessage({\r\n            id: 'Settings.review-workflows.stage.permissions.label',\r\n            defaultMessage: 'Roles that can change this stage',\r\n          })}\r\n        </Field.Label>\r\n        <TextInput\r\n          disabled\r\n          placeholder={formatMessage({\r\n            id: 'components.NotAllowedInput.text',\r\n            defaultMessage: 'No permissions to see this field',\r\n          })}\r\n          startAction={<EyeStriked fill=\"neutral600\" />}\r\n          type=\"text\"\r\n          value=\"\"\r\n        />\r\n        <Field.Hint />\r\n      </Field.Root>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"flex-end\" gap={3}>\r\n        <PermissionWrapper grow={1}>\r\n          <Field.Root error={error} name={name} required>\r\n            <Field.Label>\r\n              {formatMessage({\r\n                id: 'Settings.review-workflows.stage.permissions.label',\r\n                defaultMessage: 'Roles that can change this stage',\r\n              })}\r\n            </Field.Label>\r\n            <MultiSelect\r\n              disabled={disabled}\r\n              onChange={(values) => {\r\n                // Because the select components expects strings for values, but\r\n                // the yup schema validates we are sending full permission objects to the API,\r\n                // we must coerce the string value back to an object\r\n                const permissions = values.map((value) => ({\r\n                  role: parseInt(value, 10),\r\n                  action: 'admin::review-workflows.stage.transition',\r\n                }));\r\n\r\n                onChange(name, permissions);\r\n              }}\r\n              placeholder={placeholder}\r\n              // The Select component expects strings for values\r\n              value={value.map((permission) => `${permission.role}`)}\r\n              withTags\r\n            >\r\n              <MultiSelectGroup\r\n                label={formatMessage({\r\n                  id: 'Settings.review-workflows.stage.permissions.allRoles.label',\r\n                  defaultMessage: 'All roles',\r\n                })}\r\n                values={filteredRoles.map((r) => `${r.id}`)}\r\n              >\r\n                {filteredRoles.map((role) => {\r\n                  return (\r\n                    <NestedOption key={role.id} value={`${role.id}`}>\r\n                      {role.name}\r\n                    </NestedOption>\r\n                  );\r\n                })}\r\n              </MultiSelectGroup>\r\n            </MultiSelect>\r\n            <Field.Error />\r\n          </Field.Root>\r\n        </PermissionWrapper>\r\n        <Dialog.Root open={isApplyAllConfirmationOpen} onOpenChange={setIsApplyAllConfirmationOpen}>\r\n          <Dialog.Trigger>\r\n            <IconButton\r\n              disabled={disabled}\r\n              label={formatMessage({\r\n                id: 'Settings.review-workflows.stage.permissions.apply.label',\r\n                defaultMessage: 'Apply to all stages',\r\n              })}\r\n              size=\"L\"\r\n            >\r\n              <Duplicate />\r\n            </IconButton>\r\n          </Dialog.Trigger>\r\n          <ConfirmDialog\r\n            onConfirm={() => {\r\n              onFormValueChange(\r\n                'stages',\r\n                allStages.map((stage) => ({\r\n                  ...stage,\r\n                  permissions: value,\r\n                }))\r\n              );\r\n\r\n              setIsApplyAllConfirmationOpen(false);\r\n              toggleNotification({\r\n                type: 'success',\r\n                message: formatMessage({\r\n                  id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy.success',\r\n                  defaultMessage: 'Applied roles to all other stages of the workflow',\r\n                }),\r\n              });\r\n            }}\r\n            variant=\"default\"\r\n          >\r\n            {formatMessage({\r\n              id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy',\r\n              defaultMessage:\r\n                'Roles that can change that stage will be applied to all the other stages.',\r\n            })}\r\n          </ConfirmDialog>\r\n        </Dialog.Root>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nconst NestedOption = styled(MultiSelectOption)`\r\n  padding-left: ${({ theme }) => theme.spaces[7]};\r\n`;\r\n\r\n// Grow the size of the permission Select\r\nconst PermissionWrapper = styled(Flex)`\r\n  > * {\r\n    flex-grow: 1;\r\n  }\r\n`;\r\n\r\nexport { Stages };\r\nexport type { StagesProps, WorkflowStage };\r\n","import { InputRenderer, useField, useForm } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Field,\r\n  Grid,\r\n  MultiSelect,\r\n  MultiSelectGroup,\r\n  MultiSelectOption,\r\n  Typography,\r\n  useCollator,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useGetContentTypesQuery } from '../../../services/content-manager';\r\nimport { useReviewWorkflows } from '../hooks/useReviewWorkflows';\r\n\r\nimport type { WorkflowStage } from './Stages';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * WorkflowAttributes\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface WorkflowAttributesProps {\r\n  canUpdate?: boolean;\r\n}\r\n\r\nconst WorkflowAttributes = ({ canUpdate = true }: WorkflowAttributesProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Grid.Root background=\"neutral0\" hasRadius gap={4} padding={6} shadow=\"tableShadow\">\r\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n        <InputRenderer\r\n          disabled={!canUpdate}\r\n          label={formatMessage({\r\n            id: 'Settings.review-workflows.workflow.name.label',\r\n            defaultMessage: 'Workflow Name',\r\n          })}\r\n          name=\"name\"\r\n          required\r\n          type=\"string\"\r\n        />\r\n      </Grid.Item>\r\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n        <ContentTypesSelector disabled={!canUpdate} />\r\n      </Grid.Item>\r\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n        <StageSelector disabled={!canUpdate} />\r\n      </Grid.Item>\r\n    </Grid.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ContentTypesSelector\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface ContentTypesSelectorProps {\r\n  disabled?: boolean;\r\n}\r\n\r\nconst ContentTypesSelector = ({ disabled }: ContentTypesSelectorProps) => {\r\n  const { formatMessage, locale } = useIntl();\r\n  const { data: contentTypes, isLoading } = useGetContentTypesQuery();\r\n  const { workflows } = useReviewWorkflows();\r\n  const currentWorkflow = useForm('ContentTypesSelector', (state) => state.values);\r\n\r\n  const { error, value, onChange } = useField('contentTypes');\r\n\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const isDisabled =\r\n    disabled ||\r\n    isLoading ||\r\n    !contentTypes ||\r\n    (contentTypes.collectionType.length === 0 && contentTypes.singleType.length === 0);\r\n\r\n  const collectionTypes = (contentTypes?.collectionType ?? [])\r\n    .toSorted((a, b) => formatter.compare(a.info.displayName, b.info.displayName))\r\n    .map((contentType) => ({\r\n      label: contentType.info.displayName,\r\n      value: contentType.uid,\r\n    }));\r\n\r\n  const singleTypes = (contentTypes?.singleType ?? []).map((contentType) => ({\r\n    label: contentType.info.displayName,\r\n    value: contentType.uid,\r\n  }));\r\n\r\n  return (\r\n    <Field.Root error={error} name={'contentTypes'}>\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'Settings.review-workflows.workflow.contentTypes.label',\r\n          defaultMessage: 'Associated to',\r\n        })}\r\n      </Field.Label>\r\n      <MultiSelect\r\n        customizeContent={(value) =>\r\n          formatMessage(\r\n            {\r\n              id: 'Settings.review-workflows.workflow.contentTypes.displayValue',\r\n              defaultMessage:\r\n                '{count} {count, plural, one {content type} other {content types}} selected',\r\n            },\r\n            { count: value?.length }\r\n          )\r\n        }\r\n        disabled={isDisabled}\r\n        onChange={(values) => {\r\n          onChange('contentTypes', values);\r\n        }}\r\n        value={value}\r\n        placeholder={formatMessage({\r\n          id: 'Settings.review-workflows.workflow.contentTypes.placeholder',\r\n          defaultMessage: 'Select',\r\n        })}\r\n      >\r\n        {[\r\n          ...(collectionTypes.length > 0\r\n            ? [\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'Settings.review-workflows.workflow.contentTypes.collectionTypes.label',\r\n                    defaultMessage: 'Collection Types',\r\n                  }),\r\n                  children: collectionTypes,\r\n                },\r\n              ]\r\n            : []),\r\n\r\n          ...(singleTypes.length > 0\r\n            ? [\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'Settings.review-workflows.workflow.contentTypes.singleTypes.label',\r\n                    defaultMessage: 'Single Types',\r\n                  }),\r\n                  children: singleTypes,\r\n                },\r\n              ]\r\n            : []),\r\n        ].map((opt) => {\r\n          return (\r\n            <MultiSelectGroup\r\n              key={opt.label}\r\n              label={opt.label}\r\n              values={opt.children.map((child) => child.value.toString())}\r\n            >\r\n              {opt.children.map((child) => {\r\n                const { name: assignedWorkflowName } =\r\n                  workflows?.find(\r\n                    (workflow) =>\r\n                      ((currentWorkflow && workflow.id !== currentWorkflow.id) ||\r\n                        !currentWorkflow) &&\r\n                      workflow.contentTypes.includes(child.value)\r\n                  ) ?? {};\r\n\r\n                return (\r\n                  <NestedOption key={child.value} value={child.value}>\r\n                    <Typography>\r\n                      {\r\n                        // @ts-expect-error - formatMessage options doesn't expect to be a React component but that's what we need actually for the <i> and <em> components\r\n                        formatMessage(\r\n                          {\r\n                            id: 'Settings.review-workflows.workflow.contentTypes.assigned.notice',\r\n                            defaultMessage:\r\n                              '{label} {name, select, undefined {} other {<i>(assigned to <em>{name}</em> workflow)</i>}}',\r\n                          },\r\n                          {\r\n                            label: child.label,\r\n                            name: assignedWorkflowName,\r\n                            em: (...children) => (\r\n                              <Typography tag=\"em\" fontWeight=\"bold\">\r\n                                {children}\r\n                              </Typography>\r\n                            ),\r\n                            i: (...children) => (\r\n                              <ContentTypeTakeNotice>{children}</ContentTypeTakeNotice>\r\n                            ),\r\n                          }\r\n                        )\r\n                      }\r\n                    </Typography>\r\n                  </NestedOption>\r\n                );\r\n              })}\r\n            </MultiSelectGroup>\r\n          );\r\n        })}\r\n      </MultiSelect>\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nconst NestedOption = styled(MultiSelectOption)`\r\n  padding-left: ${({ theme }) => theme.spaces[7]};\r\n`;\r\n\r\nconst ContentTypeTakeNotice = styled(Typography)`\r\n  font-style: italic;\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * StageSelector\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface StageSelectorProps {\r\n  disabled?: boolean;\r\n}\r\n\r\nconst StageSelector = ({ disabled }: StageSelectorProps) => {\r\n  const { value: stages = [] } = useField<WorkflowStage[]>('stages');\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { error, value, onChange } = useField('stageRequiredToPublish');\r\n\r\n  // stages with empty names are not valid, so we avoid them from being used to avoid errors\r\n  const validStages = stages.filter((stage) => stage.name);\r\n\r\n  return (\r\n    <Field.Root\r\n      error={error}\r\n      name=\"stageRequiredToPublish\"\r\n      hint={formatMessage({\r\n        id: 'settings.review-workflows.workflow.stageRequiredToPublish.hint',\r\n        defaultMessage:\r\n          'Prevents entries from being published if they are not at the required stage.',\r\n      })}\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'settings.review-workflows.workflow.stageRequiredToPublish.label',\r\n          defaultMessage: 'Required stage for publishing',\r\n        })}\r\n      </Field.Label>\r\n      <SingleSelect\r\n        disabled={disabled}\r\n        onChange={(value) => {\r\n          onChange('stageRequiredToPublish', value);\r\n        }}\r\n        value={value}\r\n      >\r\n        <SingleSelectOption value={''}>\r\n          {formatMessage({\r\n            id: 'settings.review-workflows.workflow.stageRequiredToPublish.any',\r\n            defaultMessage: 'Any stage',\r\n          })}\r\n        </SingleSelectOption>\r\n        {validStages.map((stage, i) => (\r\n          <SingleSelectOption\r\n            key={`requiredToPublishStage-${stage.id || stage.__temp_key__}`}\r\n            value={stage.id?.toString() || stage.__temp_key__}\r\n          >\r\n            {stage.name}\r\n          </SingleSelectOption>\r\n        ))}\r\n      </SingleSelect>\r\n      <Field.Hint />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nexport { WorkflowAttributes };\r\nexport type { WorkflowAttributesProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  ConfirmDialog,\r\n  BackButton,\r\n  useNotification,\r\n  useAPIErrorHandler,\r\n  useRBAC,\r\n  Form,\r\n  Page,\r\n  FormProps,\r\n  FormHelpers,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\r\nimport { Button, Dialog, Flex, Typography } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { generateNKeysBetween } from 'fractional-indexing';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { LimitsModal } from '../../components/LimitsModal';\r\nimport {\r\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\r\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\r\n} from '../../constants';\r\nimport { useTypedSelector } from '../../modules/hooks';\r\nimport { isBaseQueryError } from '../../utils/api';\r\n\r\nimport * as Layout from './components/Layout';\r\nimport { Stages, WorkflowStage } from './components/Stages';\r\nimport { WorkflowAttributes } from './components/WorkflowAttributes';\r\nimport { useReviewWorkflows } from './hooks/useReviewWorkflows';\r\n\r\nimport type { Stage, Workflow } from '../../../../shared/contracts/review-workflows';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst WORKFLOW_SCHEMA = yup.object({\r\n  contentTypes: yup.array().of(yup.string()),\r\n  name: yup\r\n    .string()\r\n    .max(255, {\r\n      id: 'review-workflows.validation.name.max-length',\r\n      defaultMessage: 'Name can not be longer than 255 characters',\r\n    })\r\n    .required()\r\n    .nullable(),\r\n  stages: yup\r\n    .array()\r\n    .of(\r\n      yup.object().shape({\r\n        name: yup\r\n          .string()\r\n          .nullable()\r\n          .required({\r\n            id: 'review-workflows.validation.stage.name',\r\n            defaultMessage: 'Name is required',\r\n          })\r\n          .max(255, {\r\n            id: 'review-workflows.validation.stage.max-length',\r\n            defaultMessage: 'Name can not be longer than 255 characters',\r\n          })\r\n          .test(\r\n            'unique-name',\r\n            {\r\n              id: 'review-workflows.validation.stage.duplicate',\r\n              defaultMessage: 'Stage name must be unique',\r\n            },\r\n            (stageName, context) => {\r\n              // @ts-expect-error it does exist.\r\n              const { stages } = context.from[1].value;\r\n\r\n              return stages.filter((stage: Stage) => stage.name === stageName).length === 1;\r\n            }\r\n          ),\r\n        color: yup\r\n          .string()\r\n          .nullable()\r\n          .required({\r\n            id: 'review-workflows.validation.stage.color',\r\n            defaultMessage: 'Color is required',\r\n          })\r\n          .matches(/^#(?:[0-9a-fA-F]{3}){1,2}$/i),\r\n\r\n        permissions: yup\r\n          .array(\r\n            yup.object({\r\n              role: yup\r\n                .number()\r\n                .strict()\r\n                .typeError({\r\n                  id: 'review-workflows.validation.stage.permissions.role.number',\r\n                  defaultMessage: 'Role must be of type number',\r\n                })\r\n                .required(),\r\n              action: yup.string().required({\r\n                id: 'review-workflows.validation.stage.permissions.action.required',\r\n                defaultMessage: 'Action is a required argument',\r\n              }),\r\n            })\r\n          )\r\n          .strict(),\r\n      })\r\n    )\r\n    .min(1),\r\n  stageRequiredToPublish: yup.string().nullable(),\r\n});\r\n\r\nconst EditPage = () => {\r\n  const { id = '' } = useParams<{ id: string }>();\r\n  const isCreatingWorkflow = id === 'create';\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    isLoading: isLoadingWorkflow,\r\n    meta,\r\n    workflows,\r\n    error,\r\n    update,\r\n    create,\r\n  } = useReviewWorkflows();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['review-workflows']\r\n  );\r\n  const {\r\n    allowedActions: { canDelete, canUpdate, canCreate },\r\n  } = useRBAC(permissions);\r\n\r\n  const [savePrompts, setSavePrompts] = React.useState<{\r\n    hasDeletedServerStages?: boolean;\r\n    hasReassignedContentTypes?: boolean;\r\n  }>({});\r\n  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();\r\n  const [showLimitModal, setShowLimitModal] = React.useState<'workflow' | 'stage' | null>(null);\r\n\r\n  const currentWorkflow = workflows?.find((workflow) => workflow.id === parseInt(id, 10));\r\n  const contentTypesFromOtherWorkflows = workflows\r\n    ?.filter((workflow) => workflow.id !== parseInt(id, 10))\r\n    .flatMap((workflow) => workflow.contentTypes);\r\n\r\n  const limits = getFeature<string>('review-workflows');\r\n  const numberOfWorkflows = limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];\r\n  const stagesPerWorkflow = limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME];\r\n\r\n  interface FormValues {\r\n    name: string;\r\n    stages: WorkflowStage[];\r\n    contentTypes: string[];\r\n    stageRequiredToPublish: string | null;\r\n  }\r\n\r\n  const submitForm = async (data: FormValues, helpers: Pick<FormHelpers, 'setErrors'>) => {\r\n    try {\r\n      const { stageRequiredToPublish, ...rest } = data;\r\n      const stageRequiredToPublishName =\r\n        stageRequiredToPublish === ''\r\n          ? null\r\n          : rest.stages.find(\r\n              (stage) =>\r\n                stage.id === Number(stageRequiredToPublish) ||\r\n                stage.__temp_key__ === stageRequiredToPublish\r\n            )?.name;\r\n\r\n      if (!isCreatingWorkflow) {\r\n        const res = await update(id, {\r\n          ...rest,\r\n          // compare permissions of stages and only submit them if at least one has\r\n          // changed; this enables partial updates e.g. for users who don't have\r\n          // permissions to see roles\r\n          stages: rest.stages.map((stage) => {\r\n            let hasUpdatedPermissions = true;\r\n            const serverStage = currentWorkflow?.stages?.find(\r\n              (serverStage) => serverStage.id === stage?.id\r\n            );\r\n            if (serverStage) {\r\n              hasUpdatedPermissions =\r\n                serverStage.permissions?.length !== stage.permissions?.length ||\r\n                !serverStage.permissions?.every(\r\n                  (serverPermission) =>\r\n                    !!stage.permissions?.find(\r\n                      (permission) => permission.role === serverPermission.role\r\n                    )\r\n                );\r\n            }\r\n            return {\r\n              ...stage,\r\n              permissions: hasUpdatedPermissions ? stage.permissions : undefined,\r\n            } satisfies Stage;\r\n          }),\r\n          stageRequiredToPublishName,\r\n        });\r\n\r\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          helpers.setErrors(formatValidationErrors(res.error));\r\n        }\r\n      } else {\r\n        const res = await create({\r\n          ...rest,\r\n          stageRequiredToPublishName,\r\n        });\r\n\r\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          helpers.setErrors(formatValidationErrors(res.error));\r\n        } else if ('data' in res) {\r\n          navigate(`../${res.data.id}`, { replace: true });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n    setSavePrompts({});\r\n  };\r\n\r\n  const handleConfirmDeleteDialog =\r\n    (data: FormValues, helpers: Pick<FormHelpers, 'setErrors'>) => async () => {\r\n      await submitForm(data, helpers);\r\n    };\r\n\r\n  const handleConfirmClose = () => {\r\n    setSavePrompts({});\r\n  };\r\n\r\n  const handleSubmit: FormProps<FormValues>['onSubmit'] = async (data, helpers) => {\r\n    const isContentTypeReassignment = data.contentTypes.some((contentType) =>\r\n      contentTypesFromOtherWorkflows?.includes(contentType)\r\n    );\r\n    const hasDeletedServerStages =\r\n      !isCreatingWorkflow &&\r\n      !currentWorkflow?.stages.every((stage) =>\r\n        data.stages.some((newStage) => newStage.id === stage.id)\r\n      );\r\n\r\n    if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\r\n      /**\r\n       * If the current license has a limit, check if the total count of workflows\r\n       * exceeds that limit and display the limits modal instead of sending the\r\n       * update, because it would throw an API error.\r\n       */\r\n      setShowLimitModal('workflow');\r\n\r\n      /**\r\n       * If the current license has a limit, check if the total count of stages\r\n       * exceeds that limit and display the limits modal instead of sending the\r\n       * update, because it would throw an API error.\r\n       */\r\n    } else if (\r\n      data.stages &&\r\n      stagesPerWorkflow &&\r\n      data.stages.length > parseInt(stagesPerWorkflow, 10)\r\n    ) {\r\n      setShowLimitModal('stage');\r\n    } else if (hasDeletedServerStages || isContentTypeReassignment) {\r\n      if (hasDeletedServerStages) {\r\n        setSavePrompts((prev) => ({ ...prev, hasDeletedServerStages: true }));\r\n      }\r\n\r\n      if (isContentTypeReassignment) {\r\n        setSavePrompts((prev) => ({ ...prev, hasReassignedContentTypes: true }));\r\n      }\r\n    } else {\r\n      await submitForm(data, helpers);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * If the current license has a limit:\r\n   * check if the total count of workflows or stages exceeds that limit and display\r\n   * the limits modal on page load. It can be closed by the user, but the\r\n   * API will throw an error in case they try to create a new workflow or update the\r\n   * stages.\r\n   *\r\n   * If the current license does not have a limit (e.g. offline license):\r\n   * do nothing (for now). In case they are trying to create the 201st workflow/ stage\r\n   * the API will throw an error.\r\n   *\r\n   */\r\n  React.useEffect(() => {\r\n    if (!isLoadingWorkflow && !isLicenseLoading) {\r\n      if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\r\n        setShowLimitModal('workflow');\r\n      } else if (\r\n        currentWorkflow &&\r\n        currentWorkflow.stages &&\r\n        stagesPerWorkflow &&\r\n        currentWorkflow.stages.length > parseInt(stagesPerWorkflow, 10)\r\n      ) {\r\n        setShowLimitModal('stage');\r\n      }\r\n    }\r\n  }, [\r\n    currentWorkflow,\r\n    isLicenseLoading,\r\n    isLoadingWorkflow,\r\n    limits,\r\n    meta,\r\n    numberOfWorkflows,\r\n    stagesPerWorkflow,\r\n  ]);\r\n\r\n  const initialValues: FormValues = React.useMemo(() => {\r\n    if (isCreatingWorkflow || !currentWorkflow) {\r\n      return {\r\n        name: '',\r\n        stages: [],\r\n        contentTypes: [],\r\n        stageRequiredToPublish: '',\r\n      };\r\n    } else {\r\n      return {\r\n        name: currentWorkflow.name,\r\n        stages: addTmpKeysToStages(currentWorkflow.stages),\r\n        contentTypes: currentWorkflow.contentTypes,\r\n        stageRequiredToPublish: currentWorkflow.stageRequiredToPublish?.id.toString() ?? '',\r\n      };\r\n    }\r\n  }, [currentWorkflow, isCreatingWorkflow]);\r\n\r\n  if (isLoadingWorkflow) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Layout.DragLayerRendered />\r\n\r\n      <Form\r\n        method={isCreatingWorkflow ? 'POST' : 'PUT'}\r\n        initialValues={initialValues}\r\n        validationSchema={WORKFLOW_SCHEMA}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ modified, isSubmitting, values, setErrors }) => (\r\n          <>\r\n            <Layout.Header\r\n              navigationAction={<BackButton fallback=\"..\" />}\r\n              primaryAction={\r\n                canUpdate || canCreate ? (\r\n                  <Button\r\n                    startIcon={<Check />}\r\n                    type=\"submit\"\r\n                    disabled={!modified || isSubmitting || values.stages.length === 0}\r\n                    // if the confirm dialog is open the loading state is on\r\n                    // the confirm button already\r\n                    loading={!Boolean(Object.keys(savePrompts).length > 0) && isSubmitting}\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'global.save',\r\n                      defaultMessage: 'Save',\r\n                    })}\r\n                  </Button>\r\n                ) : null\r\n              }\r\n              subtitle={formatMessage(\r\n                {\r\n                  id: 'review-workflows.page.subtitle',\r\n                  defaultMessage: '{count, plural, one {# stage} other {# stages}}',\r\n                },\r\n                { count: currentWorkflow?.stages?.length ?? 0 }\r\n              )}\r\n              title={\r\n                currentWorkflow?.name ||\r\n                formatMessage({\r\n                  id: 'Settings.review-workflows.create.page.title',\r\n                  defaultMessage: 'Create Review Workflow',\r\n                })\r\n              }\r\n            />\r\n            <Layout.Root>\r\n              <Flex alignItems=\"stretch\" direction=\"column\" gap={7}>\r\n                <WorkflowAttributes canUpdate={canUpdate || canCreate} />\r\n                <Stages\r\n                  canDelete={canDelete}\r\n                  canUpdate={canUpdate || canCreate}\r\n                  isCreating={isCreatingWorkflow}\r\n                />\r\n              </Flex>\r\n            </Layout.Root>\r\n            <Dialog.Root\r\n              open={Object.keys(savePrompts).length > 0}\r\n              onOpenChange={handleConfirmClose}\r\n            >\r\n              <ConfirmDialog onConfirm={handleConfirmDeleteDialog(values, { setErrors })}>\r\n                <Flex direction=\"column\" gap={5}>\r\n                  {savePrompts.hasDeletedServerStages && (\r\n                    <Typography textAlign=\"center\" variant=\"omega\">\r\n                      {formatMessage({\r\n                        id: 'review-workflows.page.delete.confirm.stages.body',\r\n                        defaultMessage:\r\n                          'All entries assigned to deleted stages will be moved to the previous stage.',\r\n                      })}\r\n                    </Typography>\r\n                  )}\r\n\r\n                  {savePrompts.hasReassignedContentTypes && (\r\n                    <Typography textAlign=\"center\" variant=\"omega\">\r\n                      {formatMessage(\r\n                        {\r\n                          id: 'review-workflows.page.delete.confirm.contentType.body',\r\n                          defaultMessage:\r\n                            '{count} {count, plural, one {content-type} other {content-types}} {count, plural, one {is} other {are}} already mapped to {count, plural, one {another workflow} other {other workflows}}. If you save changes, {count, plural, one {this} other {these}} {count, plural, one {content-type} other {{count} content-types}} will no more be mapped to the {count, plural, one {another workflow} other {other workflows}} and all corresponding information will be removed.',\r\n                        },\r\n                        {\r\n                          count:\r\n                            contentTypesFromOtherWorkflows?.filter((contentType) =>\r\n                              values.contentTypes.includes(contentType)\r\n                            ).length ?? 0,\r\n                        }\r\n                      )}\r\n                    </Typography>\r\n                  )}\r\n\r\n                  <Typography textAlign=\"center\" variant=\"omega\">\r\n                    {formatMessage({\r\n                      id: 'review-workflows.page.delete.confirm.confirm',\r\n                      defaultMessage: 'Are you sure you want to save?',\r\n                    })}\r\n                  </Typography>\r\n                </Flex>\r\n              </ConfirmDialog>\r\n            </Dialog.Root>\r\n          </>\r\n        )}\r\n      </Form>\r\n\r\n      <LimitsModal.Root\r\n        open={showLimitModal === 'workflow'}\r\n        onOpenChange={() => setShowLimitModal(null)}\r\n      >\r\n        <LimitsModal.Title>\r\n          {formatMessage({\r\n            id: 'review-workflows.edit.page.workflows.limit.title',\r\n            defaultMessage: 'You’ve reached the limit of workflows in your plan',\r\n          })}\r\n        </LimitsModal.Title>\r\n\r\n        <LimitsModal.Body>\r\n          {formatMessage({\r\n            id: 'review-workflows.edit.page.workflows.limit.body',\r\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\r\n          })}\r\n        </LimitsModal.Body>\r\n      </LimitsModal.Root>\r\n\r\n      <LimitsModal.Root\r\n        open={showLimitModal === 'stage'}\r\n        onOpenChange={() => setShowLimitModal(null)}\r\n      >\r\n        <LimitsModal.Title>\r\n          {formatMessage({\r\n            id: 'review-workflows.edit.page.stages.limit.title',\r\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\r\n          })}\r\n        </LimitsModal.Title>\r\n\r\n        <LimitsModal.Body>\r\n          {formatMessage({\r\n            id: 'review-workflows.edit.page.stages.limit.body',\r\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\r\n          })}\r\n        </LimitsModal.Body>\r\n      </LimitsModal.Root>\r\n    </>\r\n  );\r\n};\r\n\r\nconst addTmpKeysToStages = (data: Workflow['stages']) => {\r\n  const keys = generateNKeysBetween(undefined, undefined, data.length);\r\n\r\n  return data.map((datum, index) => ({\r\n    ...datum,\r\n    __temp_key__: keys[index],\r\n  }));\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedEditPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedEditPage = () => {\r\n  const permissions = useTypedSelector((state) => {\r\n    const {\r\n      create = [],\r\n      update = [],\r\n      read = [],\r\n    } = state.admin_app.permissions.settings?.['review-workflows'] ?? {};\r\n\r\n    return [...create, ...update, ...read];\r\n  });\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedEditPage };\r\n"],"names":["item","index","AdminInputRenderer","name","value","label","themeColorName","NestedOption","InputRenderer","serverStage","error","Layout.DragLayerRendered","Layout.Header","Layout.Root"],"mappings":"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"}