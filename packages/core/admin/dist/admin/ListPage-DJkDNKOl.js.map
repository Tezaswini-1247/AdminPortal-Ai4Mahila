{"version":3,"file":"ListPage-DJkDNKOl.js","sources":["../../ee/admin/src/services/auditLogs.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useFormatTimeStamp.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useAuditLogsData.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/ComboboxFilter.tsx","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getDisplayedFilters.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/ListPage.tsx"],"sourcesContent":["import { adminApi } from '../../../../admin/src/services/api';\r\nimport * as AuditLogs from '../../../../shared/contracts/audit-logs';\r\n\r\nconst auditLogsService = adminApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getAuditLogs: builder.query<AuditLogs.GetAll.Response, AuditLogs.GetAll.Request['query']>({\r\n      query: (params) => ({\r\n        url: `/admin/audit-logs`,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n    }),\r\n    getAuditLog: builder.query<AuditLogs.Get.Response, AuditLogs.Get.Params['id']>({\r\n      query: (id) => `/admin/audit-logs/${id}`,\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nconst { useGetAuditLogsQuery, useGetAuditLogQuery } = auditLogsService;\r\n\r\nexport { useGetAuditLogsQuery, useGetAuditLogQuery };\r\n","import parseISO from 'date-fns/parseISO';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport const useFormatTimeStamp = () => {\r\n  const { formatDate } = useIntl();\r\n\r\n  const formatTimeStamp = (value: string) => {\r\n    const date = parseISO(value);\r\n\r\n    const formattedDate = formatDate(date, {\r\n      dateStyle: 'long',\r\n    });\r\n    const formattedTime = formatDate(date, {\r\n      timeStyle: 'medium',\r\n      hourCycle: 'h24',\r\n    });\r\n\r\n    return `${formattedDate}, ${formattedTime}`;\r\n  };\r\n\r\n  return formatTimeStamp;\r\n};\r\n","export const actionTypes = {\r\n  'entry.create': 'Create entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.update': 'Update entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.delete': 'Delete entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.publish': 'Publish entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.unpublish': 'Unpublish entry{model, select, undefined {} other { ({model})}}',\r\n  'media.create': 'Create media',\r\n  'media.update': 'Update media',\r\n  'media.delete': 'Delete media',\r\n  'media-folder.create': 'Create media folder',\r\n  'media-folder.update': 'Update media folder',\r\n  'media-folder.delete': 'Delete media folder',\r\n  'user.create': 'Create user',\r\n  'user.update': 'Update user',\r\n  'user.delete': 'Delete user',\r\n  'admin.auth.success': 'Admin login',\r\n  'admin.logout': 'Admin logout',\r\n  'content-type.create': 'Create content type',\r\n  'content-type.update': 'Update content type',\r\n  'content-type.delete': 'Delete content type',\r\n  'component.create': 'Create component',\r\n  'component.update': 'Update component',\r\n  'component.delete': 'Delete component',\r\n  'role.create': 'Create role',\r\n  'role.update': 'Update role',\r\n  'role.delete': 'Delete role',\r\n  'permission.create': 'Create permission',\r\n  'permission.update': 'Update permission',\r\n  'permission.delete': 'Delete permission',\r\n};\r\n\r\nexport const getDefaultMessage = (value: keyof typeof actionTypes) => {\r\n  return actionTypes[value] || value;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  JSONInput,\r\n  Loader,\r\n  Modal as DSModal,\r\n  Typography,\r\n  Breadcrumbs,\r\n  Crumb,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\r\nimport { AuditLog } from '../../../../../../../../shared/contracts/audit-logs';\r\nimport { useGetAuditLogQuery } from '../../../../../services/auditLogs';\r\nimport { useFormatTimeStamp } from '../hooks/useFormatTimeStamp';\r\nimport { actionTypes, getDefaultMessage } from '../utils/getActionTypesDefaultMessages';\r\n\r\ninterface ModalProps {\r\n  handleClose: () => void;\r\n  logId: string;\r\n}\r\n\r\nexport const Modal = ({ handleClose, logId }: ModalProps) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { data, error, isLoading } = useGetAuditLogQuery(logId);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n      handleClose();\r\n    }\r\n  }, [error, formatAPIError, handleClose, toggleNotification]);\r\n\r\n  const formatTimeStamp = useFormatTimeStamp();\r\n  const formattedDate = data && 'date' in data ? formatTimeStamp(data.date) : '';\r\n\r\n  return (\r\n    <DSModal.Root defaultOpen onOpenChange={handleClose}>\r\n      <DSModal.Content>\r\n        <DSModal.Header>\r\n          {/**\r\n           * TODO: this is not semantically correct and should be amended.\r\n           */}\r\n          <Breadcrumbs label={formattedDate} id=\"title\">\r\n            <Crumb isCurrent>{formattedDate}</Crumb>\r\n          </Breadcrumbs>\r\n        </DSModal.Header>\r\n        <DSModal.Body>\r\n          <ActionBody isLoading={isLoading} data={data as AuditLog} formattedDate={formattedDate} />\r\n        </DSModal.Body>\r\n      </DSModal.Content>\r\n    </DSModal.Root>\r\n  );\r\n};\r\n\r\ninterface ActionBodyProps {\r\n  isLoading?: boolean;\r\n  data: AuditLog;\r\n  formattedDate: string;\r\n}\r\n\r\nconst ActionBody = ({ isLoading, data, formattedDate }: ActionBodyProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Flex padding={7} justifyContent=\"center\" alignItems=\"center\">\r\n        {/**\r\n         * TODO: this will need to be translated.\r\n         */}\r\n        <Loader>Loading content...</Loader>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  const { action, user, payload } = data;\r\n\r\n  return (\r\n    <>\r\n      <Box marginBottom={3}>\r\n        <Typography variant=\"delta\" id=\"title\">\r\n          {formatMessage({\r\n            id: 'Settings.permissions.auditLogs.details',\r\n            defaultMessage: 'Log Details',\r\n          })}\r\n        </Typography>\r\n      </Box>\r\n      <Grid.Root\r\n        gap={4}\r\n        gridCols={2}\r\n        paddingTop={4}\r\n        paddingBottom={4}\r\n        paddingLeft={6}\r\n        paddingRight={6}\r\n        marginBottom={4}\r\n        background=\"neutral100\"\r\n        hasRadius\r\n      >\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.action',\r\n            defaultMessage: 'Action',\r\n          })}\r\n          actionName={formatMessage(\r\n            {\r\n              id: `Settings.permissions.auditLogs.${action}`,\r\n              defaultMessage: getDefaultMessage(action as keyof typeof actionTypes),\r\n            },\r\n            // @ts-expect-error - any\r\n            { model: payload?.model }\r\n          )}\r\n        />\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.date',\r\n            defaultMessage: 'Date',\r\n          })}\r\n          actionName={formattedDate}\r\n        />\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.user',\r\n            defaultMessage: 'User',\r\n          })}\r\n          actionName={user?.displayName || '-'}\r\n        />\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.userId',\r\n            defaultMessage: 'User ID',\r\n          })}\r\n          actionName={user?.id.toString() || '-'}\r\n        />\r\n      </Grid.Root>\r\n      <Field.Root>\r\n        <Field.Label>\r\n          {formatMessage({\r\n            id: 'Settings.permissions.auditLogs.payload',\r\n            defaultMessage: 'Payload',\r\n          })}\r\n        </Field.Label>\r\n        <Payload value={JSON.stringify(payload, null, 2)} disabled />\r\n      </Field.Root>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Payload = styled(JSONInput)`\r\n  max-width: 100%;\r\n  overflow: scroll;\r\n`;\r\n\r\ninterface ActionItemProps {\r\n  actionLabel: string;\r\n  actionName: string;\r\n}\r\n\r\nconst ActionItem = ({ actionLabel, actionName }: ActionItemProps) => {\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"baseline\" gap={1}>\r\n      <Typography textColor=\"neutral600\" variant=\"sigma\">\r\n        {actionLabel}\r\n      </Typography>\r\n      <Typography textColor=\"neutral600\">{actionName}</Typography>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\r\nimport { useQueryParams } from '../../../../../../../../admin/src/hooks/useQueryParams';\r\nimport { useAdminUsers } from '../../../../../../../../admin/src/services/users';\r\nimport { useGetAuditLogsQuery } from '../../../../../services/auditLogs';\r\n\r\nexport const useAuditLogsData = ({\r\n  canReadAuditLogs,\r\n  canReadUsers,\r\n}: {\r\n  canReadAuditLogs: boolean;\r\n  canReadUsers: boolean;\r\n}) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }] = useQueryParams();\r\n\r\n  const {\r\n    data,\r\n    error,\r\n    isError: isUsersError,\r\n    isLoading: isLoadingUsers,\r\n  } = useAdminUsers(\r\n    {},\r\n    {\r\n      skip: !canReadUsers,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\r\n    }\r\n  }, [error, toggleNotification, formatAPIError]);\r\n\r\n  const {\r\n    data: auditLogs,\r\n    isLoading: isLoadingAuditLogs,\r\n    isError: isAuditLogsError,\r\n    error: auditLogsError,\r\n  } = useGetAuditLogsQuery(query, {\r\n    refetchOnMountOrArgChange: true,\r\n    skip: !canReadAuditLogs,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (auditLogsError) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(auditLogsError) });\r\n    }\r\n  }, [auditLogsError, toggleNotification, formatAPIError]);\r\n\r\n  return {\r\n    auditLogs,\r\n    users: data?.users ?? [],\r\n    isLoading: isLoadingUsers || isLoadingAuditLogs,\r\n    hasError: isAuditLogsError || isUsersError,\r\n  };\r\n};\r\n","import { Combobox, ComboboxOption } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\r\nimport { useField } from '../../../../../../../../admin/src/components/Form';\r\n\r\nexport const ComboboxFilter = (props: Filters.ValueInputProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const field = useField(props.name);\r\n  const ariaLabel = formatMessage({\r\n    id: 'Settings.permissions.auditLogs.filter.aria-label',\r\n    defaultMessage: 'Search and select an option to filter',\r\n  });\r\n\r\n  const handleChange = (value?: string) => {\r\n    field.onChange(props.name, value);\r\n  };\r\n\r\n  return (\r\n    <Combobox aria-label={ariaLabel} value={field.value} onChange={handleChange}>\r\n      {props.options?.map((opt) => {\r\n        const value = typeof opt === 'string' ? opt : opt.value;\r\n        const label = typeof opt === 'string' ? opt : opt.label;\r\n        return (\r\n          <ComboboxOption key={value} value={value}>\r\n            {label}\r\n          </ComboboxOption>\r\n        );\r\n      })}\r\n    </Combobox>\r\n  );\r\n};\r\n","import { IntlShape } from 'react-intl';\r\n\r\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\r\nimport { getDisplayName } from '../../../../../../../../admin/src/utils/users';\r\nimport { SanitizedAdminUser } from '../../../../../../../../shared/contracts/shared';\r\nimport { ComboboxFilter } from '../components/ComboboxFilter';\r\n\r\nimport { actionTypes, getDefaultMessage } from './getActionTypesDefaultMessages';\r\n\r\nexport const getDisplayedFilters = ({\r\n  formatMessage,\r\n  users,\r\n  canReadUsers,\r\n}: {\r\n  formatMessage: IntlShape['formatMessage'];\r\n  users: SanitizedAdminUser[];\r\n  canReadUsers: boolean;\r\n}): Filters.Filter[] => {\r\n  const operators = [\r\n    {\r\n      label: formatMessage({\r\n        id: 'components.FilterOptions.FILTER_TYPES.$eq',\r\n        defaultMessage: 'is',\r\n      }),\r\n      value: '$eq',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: 'components.FilterOptions.FILTER_TYPES.$ne',\r\n        defaultMessage: 'is not',\r\n      }),\r\n      value: '$ne',\r\n    },\r\n  ] as NonNullable<Filters.Filter['operators']>;\r\n\r\n  const filters = [\r\n    {\r\n      input: ComboboxFilter,\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.action',\r\n        defaultMessage: 'Action',\r\n      }),\r\n      name: 'action',\r\n      operators,\r\n      options: (Object.keys(actionTypes) as (keyof typeof actionTypes)[]).map((action) => ({\r\n        label: formatMessage(\r\n          {\r\n            id: `Settings.permissions.auditLogs.${action}`,\r\n            defaultMessage: getDefaultMessage(action),\r\n          },\r\n          { model: undefined }\r\n        ),\r\n        value: action,\r\n      })),\r\n      type: 'enumeration',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.date',\r\n        defaultMessage: 'Date',\r\n      }),\r\n      name: 'date',\r\n      type: 'datetime',\r\n    },\r\n  ] satisfies Filters.Filter[];\r\n\r\n  if (canReadUsers && users) {\r\n    return [\r\n      ...filters,\r\n      {\r\n        input: ComboboxFilter,\r\n        label: formatMessage({\r\n          id: 'Settings.permissions.auditLogs.user',\r\n          defaultMessage: 'User',\r\n        }),\r\n        mainField: { name: 'id', type: 'integer' },\r\n        name: 'user',\r\n        operators,\r\n        options: users.map((user) => ({\r\n          label: getDisplayName(user),\r\n          value: user.id.toString(),\r\n        })),\r\n        type: 'relation',\r\n      } satisfies Filters.Filter,\r\n    ];\r\n  }\r\n\r\n  return filters;\r\n};\r\n","import { Flex, IconButton, Typography } from '@strapi/design-system';\r\nimport { Eye } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Filters } from '../../../../../../../admin/src/components/Filters';\r\nimport { Layouts } from '../../../../../../../admin/src/components/Layouts/Layout';\r\nimport { Page } from '../../../../../../../admin/src/components/PageHelpers';\r\nimport { Pagination } from '../../../../../../../admin/src/components/Pagination';\r\nimport { Table } from '../../../../../../../admin/src/components/Table';\r\nimport { useTypedSelector } from '../../../../../../../admin/src/core/store/hooks';\r\nimport { useQueryParams } from '../../../../../../../admin/src/hooks/useQueryParams';\r\nimport { useRBAC } from '../../../../../../../admin/src/hooks/useRBAC';\r\nimport { AuditLog } from '../../../../../../../shared/contracts/audit-logs';\r\n\r\nimport { Modal } from './components/Modal';\r\nimport { useAuditLogsData } from './hooks/useAuditLogsData';\r\nimport { useFormatTimeStamp } from './hooks/useFormatTimeStamp';\r\nimport { getDefaultMessage } from './utils/getActionTypesDefaultMessages';\r\nimport { getDisplayedFilters } from './utils/getDisplayedFilters';\r\n\r\nconst ListPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings);\r\n\r\n  const {\r\n    allowedActions: { canRead: canReadAuditLogs, canReadUsers },\r\n    isLoading: isLoadingRBAC,\r\n  } = useRBAC({\r\n    ...permissions?.auditLogs,\r\n    readUsers: permissions?.users.read || [],\r\n  });\r\n\r\n  const [{ query }, setQuery] = useQueryParams<{ id?: AuditLog['id'] }>();\r\n  const {\r\n    auditLogs,\r\n    users,\r\n    isLoading: isLoadingData,\r\n    hasError,\r\n  } = useAuditLogsData({\r\n    canReadAuditLogs,\r\n    canReadUsers,\r\n  });\r\n\r\n  const formatTimeStamp = useFormatTimeStamp();\r\n\r\n  const displayedFilters = getDisplayedFilters({ formatMessage, users, canReadUsers });\r\n\r\n  const headers: Table.Header<AuditLog, object>[] = [\r\n    {\r\n      name: 'action',\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.action',\r\n        defaultMessage: 'Action',\r\n      }),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'date',\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.date',\r\n        defaultMessage: 'Date',\r\n      }),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'user',\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.user',\r\n        defaultMessage: 'User',\r\n      }),\r\n      sortable: false,\r\n      // In this case, the passed parameter cannot and shouldn't be something else than User\r\n      cellFormatter: ({ user }) => (user ? user.displayName : ''),\r\n    },\r\n  ];\r\n\r\n  if (hasError) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  const isLoading = isLoadingData || isLoadingRBAC;\r\n\r\n  const { results = [] } = auditLogs ?? {};\r\n\r\n  return (\r\n    <Page.Main aria-busy={isLoading}>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: formatMessage({\r\n              id: 'global.auditLogs',\r\n              defaultMessage: 'Audit Logs',\r\n            }),\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        title={formatMessage({\r\n          id: 'global.auditLogs',\r\n          defaultMessage: 'Audit Logs',\r\n        })}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.permissions.auditLogs.listview.header.subtitle',\r\n          defaultMessage: 'Logs of all the activities that happened in your environment',\r\n        })}\r\n      />\r\n      <Layouts.Action\r\n        startActions={\r\n          <Filters.Root options={displayedFilters}>\r\n            <Filters.Trigger />\r\n            <Filters.Popover />\r\n            <Filters.List />\r\n          </Filters.Root>\r\n        }\r\n      />\r\n      <Layouts.Content>\r\n        <Table.Root rows={results} headers={headers} isLoading={isLoading}>\r\n          <Table.Content>\r\n            <Table.Head>\r\n              {headers.map((header) => (\r\n                <Table.HeaderCell key={header.name} {...header} />\r\n              ))}\r\n            </Table.Head>\r\n            <Table.Empty />\r\n            <Table.Loading />\r\n            <Table.Body>\r\n              {results.map((log) => (\r\n                <Table.Row key={log.id} onClick={() => setQuery({ id: log.id })}>\r\n                  {headers.map((header) => {\r\n                    const { name, cellFormatter } = header;\r\n\r\n                    switch (name) {\r\n                      case 'action':\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {formatMessage(\r\n                                {\r\n                                  id: `Settings.permissions.auditLogs.${log.action}`,\r\n                                  // @ts-expect-error – getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.\r\n                                  defaultMessage: getDefaultMessage(log.action),\r\n                                },\r\n                                { model: (log.payload?.model as string) ?? '' }\r\n                              )}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                      case 'date':\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {formatTimeStamp(log.date)}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                      case 'user':\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {cellFormatter ? cellFormatter(log, header) : '-'}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                      default:\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {(log[name as keyof AuditLog] as string) || '-'}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                    }\r\n                  })}\r\n                  <Table.Cell onClick={(e) => e.stopPropagation()}>\r\n                    <Flex justifyContent=\"end\">\r\n                      <IconButton\r\n                        onClick={() => setQuery({ id: log.id })}\r\n                        withTooltip={false}\r\n                        label={formatMessage(\r\n                          { id: 'app.component.table.view', defaultMessage: '{target} details' },\r\n                          { target: `${log.action} action` }\r\n                        )}\r\n                        variant=\"ghost\"\r\n                      >\r\n                        <Eye />\r\n                      </IconButton>\r\n                    </Flex>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              ))}\r\n            </Table.Body>\r\n          </Table.Content>\r\n        </Table.Root>\r\n\r\n        <Pagination.Root {...auditLogs?.pagination}>\r\n          <Pagination.PageSize />\r\n          <Pagination.Links />\r\n        </Pagination.Root>\r\n      </Layouts.Content>\r\n      {query?.id && (\r\n        <Modal handleClose={() => setQuery({ id: '' }, 'remove')} logId={query.id.toString()} />\r\n      )}\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.auditLogs?.main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListPage, ProtectedListPage };\r\n"],"names":["adminApi","useIntl","parseISO","useNotification","useAPIErrorHandler","React","jsx","DSModal","jsxs","Breadcrumbs","Crumb","Flex","Loader","Fragment","Box","Typography","Grid","Field","styled","JSONInput","useQueryParams","useAdminUsers","useField","Combobox","ComboboxOption","users","getDisplayName","useTypedSelector","useRBAC","Page","Layouts","Filters","Table","IconButton","Eye","Pagination"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,gBAAA,GAAmBA,eAAS,eAAgB,CAAA;AAAA,EAChD,SAAA,EAAW,CAAC,OAAa,MAAA;AAAA,IACvB,YAAA,EAAc,QAAQ,KAAoE,CAAA;AAAA,MACxF,KAAA,EAAO,CAAC,MAAY,MAAA;AAAA,QAClB,GAAK,EAAA,CAAA,iBAAA,CAAA;AAAA,QACL,MAAQ,EAAA;AAAA,UACN;AAAA;AACF,OACF;AAAA,KACD,CAAA;AAAA,IACD,WAAA,EAAa,QAAQ,KAA0D,CAAA;AAAA,MAC7E,KAAO,EAAA,CAAC,EAAO,KAAA,CAAA,kBAAA,EAAqB,EAAE,CAAA;AAAA,KACvC;AAAA,GACH,CAAA;AAAA,EACA,gBAAkB,EAAA;AACpB,CAAC,CAAA;AAED,MAAM,EAAE,oBAAsB,EAAA,mBAAA,EAAwB,GAAA,gBAAA;;ACjB/C,MAAM,qBAAqB,MAAM;AACtC,EAAM,MAAA,EAAE,UAAW,EAAA,GAAIC,iBAAQ,EAAA;AAE/B,EAAM,MAAA,eAAA,GAAkB,CAAC,KAAkB,KAAA;AACzC,IAAM,MAAA,IAAA,GAAOC,0BAAS,KAAK,CAAA;AAE3B,IAAM,MAAA,aAAA,GAAgB,WAAW,IAAM,EAAA;AAAA,MACrC,SAAW,EAAA;AAAA,KACZ,CAAA;AACD,IAAM,MAAA,aAAA,GAAgB,WAAW,IAAM,EAAA;AAAA,MACrC,SAAW,EAAA,QAAA;AAAA,MACX,SAAW,EAAA;AAAA,KACZ,CAAA;AAED,IAAO,OAAA,CAAA,EAAG,aAAa,CAAA,EAAA,EAAK,aAAa,CAAA,CAAA;AAAA,GAC3C;AAEA,EAAO,OAAA,eAAA;AACT,CAAA;;ACrBO,MAAM,WAAc,GAAA;AAAA,EACzB,cAAgB,EAAA,8DAAA;AAAA,EAChB,cAAgB,EAAA,8DAAA;AAAA,EAChB,cAAgB,EAAA,8DAAA;AAAA,EAChB,eAAiB,EAAA,+DAAA;AAAA,EACjB,iBAAmB,EAAA,iEAAA;AAAA,EACnB,cAAgB,EAAA,cAAA;AAAA,EAChB,cAAgB,EAAA,cAAA;AAAA,EAChB,cAAgB,EAAA,cAAA;AAAA,EAChB,qBAAuB,EAAA,qBAAA;AAAA,EACvB,qBAAuB,EAAA,qBAAA;AAAA,EACvB,qBAAuB,EAAA,qBAAA;AAAA,EACvB,aAAe,EAAA,aAAA;AAAA,EACf,aAAe,EAAA,aAAA;AAAA,EACf,aAAe,EAAA,aAAA;AAAA,EACf,oBAAsB,EAAA,aAAA;AAAA,EACtB,cAAgB,EAAA,cAAA;AAAA,EAChB,qBAAuB,EAAA,qBAAA;AAAA,EACvB,qBAAuB,EAAA,qBAAA;AAAA,EACvB,qBAAuB,EAAA,qBAAA;AAAA,EACvB,kBAAoB,EAAA,kBAAA;AAAA,EACpB,kBAAoB,EAAA,kBAAA;AAAA,EACpB,kBAAoB,EAAA,kBAAA;AAAA,EACpB,aAAe,EAAA,aAAA;AAAA,EACf,aAAe,EAAA,aAAA;AAAA,EACf,aAAe,EAAA,aAAA;AAAA,EACf,mBAAqB,EAAA,mBAAA;AAAA,EACrB,mBAAqB,EAAA,mBAAA;AAAA,EACrB,mBAAqB,EAAA;AACvB,CAAA;AAEa,MAAA,iBAAA,GAAoB,CAAC,KAAoC,KAAA;AACpE,EAAO,OAAA,WAAA,CAAY,KAAK,CAAK,IAAA,KAAA;AAC/B,CAAA;;ACJO,MAAM,KAAQ,GAAA,CAAC,EAAE,WAAA,EAAa,OAAwB,KAAA;AAC3D,EAAM,MAAA,EAAE,kBAAmB,EAAA,GAAIC,qBAAgB,EAAA;AAC/C,EAAA,MAAM,EAAE,uBAAA,EAAyB,cAAe,EAAA,GAAIC,wBAAmB,EAAA;AAEvE,EAAA,MAAM,EAAE,IAAM,EAAA,KAAA,EAAO,SAAU,EAAA,GAAI,oBAAoB,KAAK,CAAA;AAE5D,EAAAC,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,KAAO,EAAA;AACT,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,OAAA,EAAS,eAAe,KAAK;AAAA,OAC9B,CAAA;AACD,MAAY,WAAA,EAAA;AAAA;AACd,KACC,CAAC,KAAA,EAAO,cAAgB,EAAA,WAAA,EAAa,kBAAkB,CAAC,CAAA;AAE3D,EAAA,MAAM,kBAAkB,kBAAmB,EAAA;AAC3C,EAAA,MAAM,gBAAgB,IAAQ,IAAA,MAAA,IAAU,OAAO,eAAgB,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,EAAA;AAE5E,EACE,uBAAAC,cAAA,CAACC,kBAAQ,CAAA,IAAA,EAAR,EAAa,WAAA,EAAW,IAAC,EAAA,YAAA,EAAc,WACtC,EAAA,QAAA,kBAAAC,eAAA,CAACD,kBAAQ,CAAA,OAAA,EAAR,EACC,QAAA,EAAA;AAAA,oBAAAD,cAAA,CAACC,kBAAQ,CAAA,MAAA,EAAR,EAIC,QAAA,kBAAAD,cAAA,CAACG,4BAAY,KAAO,EAAA,aAAA,EAAe,EAAG,EAAA,OAAA,EACpC,yCAACC,kBAAM,EAAA,EAAA,SAAA,EAAS,IAAE,EAAA,QAAA,EAAA,aAAA,EAAc,GAClC,CACF,EAAA,CAAA;AAAA,oBACAJ,cAAA,CAACC,mBAAQ,IAAR,EAAA,EACC,yCAAC,UAAW,EAAA,EAAA,SAAA,EAAsB,IAAwB,EAAA,aAAA,EAA8B,CAC1F,EAAA;AAAA,GAAA,EACF,CACF,EAAA,CAAA;AAEJ,CAAA;AAQA,MAAM,aAAa,CAAC,EAAE,SAAW,EAAA,IAAA,EAAM,eAAqC,KAAA;AAC1E,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIN,iBAAQ,EAAA;AAElC,EAAA,IAAI,SAAW,EAAA;AACb,IACE,uBAAAK,cAAA,CAACK,iBAAK,EAAA,EAAA,OAAA,EAAS,CAAG,EAAA,cAAA,EAAe,QAAS,EAAA,UAAA,EAAW,QAInD,EAAA,QAAA,kBAAAL,cAAA,CAACM,mBAAO,EAAA,EAAA,QAAA,EAAA,oBAAA,EAAkB,CAC5B,EAAA,CAAA;AAAA;AAIJ,EAAA,MAAM,EAAE,MAAA,EAAQ,IAAM,EAAA,OAAA,EAAY,GAAA,IAAA;AAElC,EAAA,uBAEIJ,eAAA,CAAAK,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAACP,cAAA,CAAAQ,gBAAA,EAAA,EAAI,cAAc,CACjB,EAAA,QAAA,kBAAAR,cAAA,CAACS,2BAAW,OAAQ,EAAA,OAAA,EAAQ,EAAG,EAAA,OAAA,EAC5B,QAAc,EAAA,aAAA,CAAA;AAAA,MACb,EAAI,EAAA,wCAAA;AAAA,MACJ,cAAgB,EAAA;AAAA,KACjB,GACH,CACF,EAAA,CAAA;AAAA,oBACAP,eAAA;AAAA,MAACQ,iBAAK,CAAA,IAAA;AAAA,MAAL;AAAA,QACC,GAAK,EAAA,CAAA;AAAA,QACL,QAAU,EAAA,CAAA;AAAA,QACV,UAAY,EAAA,CAAA;AAAA,QACZ,aAAe,EAAA,CAAA;AAAA,QACf,WAAa,EAAA,CAAA;AAAA,QACb,YAAc,EAAA,CAAA;AAAA,QACd,YAAc,EAAA,CAAA;AAAA,QACd,UAAW,EAAA,YAAA;AAAA,QACX,SAAS,EAAA,IAAA;AAAA,QAET,QAAA,EAAA;AAAA,0BAAAV,cAAA;AAAA,YAAC,UAAA;AAAA,YAAA;AAAA,cACC,aAAa,aAAc,CAAA;AAAA,gBACzB,EAAI,EAAA,uCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,UAAY,EAAA,aAAA;AAAA,gBACV;AAAA,kBACE,EAAA,EAAI,kCAAkC,MAAM,CAAA,CAAA;AAAA,kBAC5C,cAAA,EAAgB,kBAAkB,MAAkC;AAAA,iBACtE;AAAA;AAAA,gBAEA,EAAE,KAAO,EAAA,OAAA,EAAS,KAAM;AAAA;AAC1B;AAAA,WACF;AAAA,0BACAA,cAAA;AAAA,YAAC,UAAA;AAAA,YAAA;AAAA,cACC,aAAa,aAAc,CAAA;AAAA,gBACzB,EAAI,EAAA,qCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,UAAY,EAAA;AAAA;AAAA,WACd;AAAA,0BACAA,cAAA;AAAA,YAAC,UAAA;AAAA,YAAA;AAAA,cACC,aAAa,aAAc,CAAA;AAAA,gBACzB,EAAI,EAAA,qCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,UAAA,EAAY,MAAM,WAAe,IAAA;AAAA;AAAA,WACnC;AAAA,0BACAA,cAAA;AAAA,YAAC,UAAA;AAAA,YAAA;AAAA,cACC,aAAa,aAAc,CAAA;AAAA,gBACzB,EAAI,EAAA,uCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,UAAY,EAAA,IAAA,EAAM,EAAG,CAAA,QAAA,EAAc,IAAA;AAAA;AAAA;AACrC;AAAA;AAAA,KACF;AAAA,oBACAE,eAAA,CAACS,kBAAM,CAAA,IAAA,EAAN,EACC,QAAA,EAAA;AAAA,sBAACX,cAAA,CAAAW,kBAAA,CAAM,KAAN,EAAA,EACE,QAAc,EAAA,aAAA,CAAA;AAAA,QACb,EAAI,EAAA,wCAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CACH,EAAA,CAAA;AAAA,sBACAX,cAAA,CAAC,OAAQ,EAAA,EAAA,KAAA,EAAO,IAAK,CAAA,SAAA,CAAU,SAAS,IAAM,EAAA,CAAC,CAAG,EAAA,QAAA,EAAQ,IAAC,EAAA;AAAA,KAC7D,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAEA,MAAM,OAAA,GAAUY,wBAAOC,sBAAS,CAAA;AAAA;AAAA;AAAA,CAAA;AAUhC,MAAM,UAAa,GAAA,CAAC,EAAE,WAAA,EAAa,YAAkC,KAAA;AACnE,EAAA,uCACGR,iBAAK,EAAA,EAAA,SAAA,EAAU,UAAS,UAAW,EAAA,UAAA,EAAW,KAAK,CAClD,EAAA,QAAA,EAAA;AAAA,oBAAAL,cAAA,CAACS,uBAAW,EAAA,EAAA,SAAA,EAAU,YAAa,EAAA,OAAA,EAAQ,SACxC,QACH,EAAA,WAAA,EAAA,CAAA;AAAA,oBACCT,cAAA,CAAAS,uBAAA,EAAA,EAAW,SAAU,EAAA,YAAA,EAAc,QAAW,EAAA,UAAA,EAAA;AAAA,GACjD,EAAA,CAAA;AAEJ,CAAA;;AC1KO,MAAM,mBAAmB,CAAC;AAAA,EAC/B,gBAAA;AAAA,EACA;AACF,CAGM,KAAA;AACJ,EAAM,MAAA,EAAE,kBAAmB,EAAA,GAAIZ,qBAAgB,EAAA;AAC/C,EAAA,MAAM,EAAE,uBAAA,EAAyB,cAAe,EAAA,GAAIC,wBAAmB,EAAA;AACvE,EAAA,MAAM,CAAC,EAAE,KAAM,EAAC,IAAIgB,oBAAe,EAAA;AAEnC,EAAM,MAAA;AAAA,IACJ,IAAA;AAAA,IACA,KAAA;AAAA,IACA,OAAS,EAAA,YAAA;AAAA,IACT,SAAW,EAAA;AAAA,GACT,GAAAC,mBAAA;AAAA,IACF,EAAC;AAAA,IACD;AAAA,MACE,MAAM,CAAC,YAAA;AAAA,MACP,yBAA2B,EAAA;AAAA;AAC7B,GACF;AAEA,EAAAhB,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,kBAAA,CAAmB,EAAE,IAAM,EAAA,QAAA,EAAU,SAAS,cAAe,CAAA,KAAK,GAAG,CAAA;AAAA;AACvE,GACC,EAAA,CAAC,KAAO,EAAA,kBAAA,EAAoB,cAAc,CAAC,CAAA;AAE9C,EAAM,MAAA;AAAA,IACJ,IAAM,EAAA,SAAA;AAAA,IACN,SAAW,EAAA,kBAAA;AAAA,IACX,OAAS,EAAA,gBAAA;AAAA,IACT,KAAO,EAAA;AAAA,GACT,GAAI,qBAAqB,KAAO,EAAA;AAAA,IAC9B,yBAA2B,EAAA,IAAA;AAAA,IAC3B,MAAM,CAAC;AAAA,GACR,CAAA;AAED,EAAAA,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,cAAgB,EAAA;AAClB,MAAA,kBAAA,CAAmB,EAAE,IAAM,EAAA,QAAA,EAAU,SAAS,cAAe,CAAA,cAAc,GAAG,CAAA;AAAA;AAChF,GACC,EAAA,CAAC,cAAgB,EAAA,kBAAA,EAAoB,cAAc,CAAC,CAAA;AAEvD,EAAO,OAAA;AAAA,IACL,SAAA;AAAA,IACA,KAAA,EAAO,IAAM,EAAA,KAAA,IAAS,EAAC;AAAA,IACvB,WAAW,cAAkB,IAAA,kBAAA;AAAA,IAC7B,UAAU,gBAAoB,IAAA;AAAA,GAChC;AACF,CAAA;;ACtDa,MAAA,cAAA,GAAiB,CAAC,KAAmC,KAAA;AAChE,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIJ,iBAAQ,EAAA;AAClC,EAAM,MAAA,KAAA,GAAQqB,cAAS,CAAA,KAAA,CAAM,IAAI,CAAA;AACjC,EAAA,MAAM,YAAY,aAAc,CAAA;AAAA,IAC9B,EAAI,EAAA,kDAAA;AAAA,IACJ,cAAgB,EAAA;AAAA,GACjB,CAAA;AAED,EAAM,MAAA,YAAA,GAAe,CAAC,KAAmB,KAAA;AACvC,IAAM,KAAA,CAAA,QAAA,CAAS,KAAM,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA,GAClC;AAEA,EAAA,uBACGhB,cAAA,CAAAiB,qBAAA,EAAA,EAAS,YAAY,EAAA,SAAA,EAAW,KAAO,EAAA,KAAA,CAAM,KAAO,EAAA,QAAA,EAAU,YAC5D,EAAA,QAAA,EAAA,KAAA,CAAM,OAAS,EAAA,GAAA,CAAI,CAAC,GAAQ,KAAA;AAC3B,IAAA,MAAM,KAAQ,GAAA,OAAO,GAAQ,KAAA,QAAA,GAAW,MAAM,GAAI,CAAA,KAAA;AAClD,IAAA,MAAM,KAAQ,GAAA,OAAO,GAAQ,KAAA,QAAA,GAAW,MAAM,GAAI,CAAA,KAAA;AAClD,IAAA,uBACGjB,cAAA,CAAAkB,2BAAA,EAAA,EAA2B,KACzB,EAAA,QAAA,EAAA,KAAA,EAAA,EADkB,KAErB,CAAA;AAAA,GAEH,CACH,EAAA,CAAA;AAEJ,CAAA;;ACtBO,MAAM,sBAAsB,CAAC;AAAA,EAClC,aAAA;AAAA,SACAC,OAAA;AAAA,EACA;AACF,CAIwB,KAAA;AACtB,EAAA,MAAM,SAAY,GAAA;AAAA,IAChB;AAAA,MACE,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,2CAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,KAAO,EAAA;AAAA,KACT;AAAA,IACA;AAAA,MACE,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,2CAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,KAAO,EAAA;AAAA;AACT,GACF;AAEA,EAAA,MAAM,OAAU,GAAA;AAAA,IACd;AAAA,MACE,KAAO,EAAA,cAAA;AAAA,MACP,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,uCAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,IAAM,EAAA,QAAA;AAAA,MACN,SAAA;AAAA,MACA,SAAU,MAAO,CAAA,IAAA,CAAK,WAAW,CAAmC,CAAA,GAAA,CAAI,CAAC,MAAY,MAAA;AAAA,QACnF,KAAO,EAAA,aAAA;AAAA,UACL;AAAA,YACE,EAAA,EAAI,kCAAkC,MAAM,CAAA,CAAA;AAAA,YAC5C,cAAA,EAAgB,kBAAkB,MAAM;AAAA,WAC1C;AAAA,UACA,EAAE,OAAO,KAAU,CAAA;AAAA,SACrB;AAAA,QACA,KAAO,EAAA;AAAA,OACP,CAAA,CAAA;AAAA,MACF,IAAM,EAAA;AAAA,KACR;AAAA,IACA;AAAA,MACE,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,qCAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA;AAAA;AACR,GACF;AAEA,EAAA,IAAI,gBAAgBA,OAAO,EAAA;AACzB,IAAO,OAAA;AAAA,MACL,GAAG,OAAA;AAAA,MACH;AAAA,QACE,KAAO,EAAA,cAAA;AAAA,QACP,OAAO,aAAc,CAAA;AAAA,UACnB,EAAI,EAAA,qCAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CAAA;AAAA,QACD,SAAW,EAAA,EAAE,IAAM,EAAA,IAAA,EAAM,MAAM,SAAU,EAAA;AAAA,QACzC,IAAM,EAAA,MAAA;AAAA,QACN,SAAA;AAAA,QACA,OAAS,EAAAA,OAAA,CAAM,GAAI,CAAA,CAAC,IAAU,MAAA;AAAA,UAC5B,KAAA,EAAOC,qBAAe,IAAI,CAAA;AAAA,UAC1B,KAAA,EAAO,IAAK,CAAA,EAAA,CAAG,QAAS;AAAA,SACxB,CAAA,CAAA;AAAA,QACF,IAAM,EAAA;AAAA;AACR,KACF;AAAA;AAGF,EAAO,OAAA,OAAA;AACT,CAAA;;ACpEA,MAAM,WAAW,MAAM;AACrB,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIzB,iBAAQ,EAAA;AAClC,EAAA,MAAM,cAAc0B,sBAAiB,CAAA,CAAC,UAAU,KAAM,CAAA,SAAA,CAAU,YAAY,QAAQ,CAAA;AAEpF,EAAM,MAAA;AAAA,IACJ,cAAgB,EAAA,EAAE,OAAS,EAAA,gBAAA,EAAkB,YAAa,EAAA;AAAA,IAC1D,SAAW,EAAA;AAAA,MACTC,aAAQ,CAAA;AAAA,IACV,GAAG,WAAa,EAAA,SAAA;AAAA,IAChB,SAAW,EAAA,WAAA,EAAa,KAAM,CAAA,IAAA,IAAQ;AAAC,GACxC,CAAA;AAED,EAAA,MAAM,CAAC,EAAE,KAAA,EAAS,EAAA,QAAQ,IAAIR,oBAAwC,EAAA;AACtE,EAAM,MAAA;AAAA,IACJ,SAAA;AAAA,IACA,KAAA;AAAA,IACA,SAAW,EAAA,aAAA;AAAA,IACX;AAAA,MACE,gBAAiB,CAAA;AAAA,IACnB,gBAAA;AAAA,IACA;AAAA,GACD,CAAA;AAED,EAAA,MAAM,kBAAkB,kBAAmB,EAAA;AAE3C,EAAA,MAAM,mBAAmB,mBAAoB,CAAA,EAAE,aAAe,EAAA,KAAA,EAAO,cAAc,CAAA;AAEnF,EAAA,MAAM,OAA4C,GAAA;AAAA,IAChD;AAAA,MACE,IAAM,EAAA,QAAA;AAAA,MACN,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,uCAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,QAAU,EAAA;AAAA,KACZ;AAAA,IACA;AAAA,MACE,IAAM,EAAA,MAAA;AAAA,MACN,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,qCAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,QAAU,EAAA;AAAA,KACZ;AAAA,IACA;AAAA,MACE,IAAM,EAAA,MAAA;AAAA,MACN,OAAO,aAAc,CAAA;AAAA,QACnB,EAAI,EAAA,qCAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CAAA;AAAA,MACD,QAAU,EAAA,KAAA;AAAA;AAAA,MAEV,eAAe,CAAC,EAAE,MAAY,KAAA,IAAA,GAAO,KAAK,WAAc,GAAA;AAAA;AAC1D,GACF;AAEA,EAAA,IAAI,QAAU,EAAA;AACZ,IAAO,uBAAAd,cAAA,CAACuB,UAAK,CAAA,KAAA,EAAL,EAAW,CAAA;AAAA;AAGrB,EAAA,MAAM,YAAY,aAAiB,IAAA,aAAA;AAEnC,EAAA,MAAM,EAAE,OAAU,GAAA,EAAG,EAAA,GAAI,aAAa,EAAC;AAEvC,EAAA,uBACGrB,eAAA,CAAAqB,UAAA,CAAK,IAAL,EAAA,EAAU,aAAW,SACpB,EAAA,QAAA,EAAA;AAAA,oBAACvB,cAAA,CAAAuB,UAAA,CAAK,OAAL,EACE,QAAA,EAAA,aAAA;AAAA,MACC,EAAE,EAAA,EAAI,oBAAsB,EAAA,cAAA,EAAgB,mBAAoB,EAAA;AAAA,MAChE;AAAA,QACE,MAAM,aAAc,CAAA;AAAA,UAClB,EAAI,EAAA,kBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA;AACH,KAEJ,EAAA,CAAA;AAAA,oBACAvB,cAAA;AAAA,MAACwB,aAAQ,CAAA,MAAA;AAAA,MAAR;AAAA,QACC,OAAO,aAAc,CAAA;AAAA,UACnB,EAAI,EAAA,kBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CAAA;AAAA,QACD,UAAU,aAAc,CAAA;AAAA,UACtB,EAAI,EAAA,yDAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA;AAAA,KACH;AAAA,oBACAxB,cAAA;AAAA,MAACwB,aAAQ,CAAA,MAAA;AAAA,MAAR;AAAA,QACC,8BACGtB,eAAA,CAAAuB,aAAA,CAAQ,IAAR,EAAA,EAAa,SAAS,gBACrB,EAAA,QAAA,EAAA;AAAA,0BAACzB,cAAA,CAAAyB,aAAA,CAAQ,SAAR,EAAgB,CAAA;AAAA,0BACjBzB,cAAA,CAACyB,aAAQ,CAAA,OAAA,EAAR,EAAgB,CAAA;AAAA,0BACjBzB,cAAA,CAACyB,aAAQ,CAAA,IAAA,EAAR,EAAa;AAAA,SAChB,EAAA;AAAA;AAAA,KAEJ;AAAA,oBACAvB,eAAA,CAACsB,aAAQ,CAAA,OAAA,EAAR,EACC,QAAA,EAAA;AAAA,sBAACxB,cAAA,CAAA0B,WAAA,CAAM,IAAN,EAAA,EAAW,IAAM,EAAA,OAAA,EAAS,SAAkB,SAC3C,EAAA,QAAA,kBAAAxB,eAAA,CAACwB,WAAM,CAAA,OAAA,EAAN,EACC,QAAA,EAAA;AAAA,wBAAA1B,cAAA,CAAC0B,YAAM,IAAN,EAAA,EACE,QAAQ,EAAA,OAAA,CAAA,GAAA,CAAI,CAAC,MACZ,qBAAA1B,cAAA,CAAC0B,WAAM,CAAA,UAAA,EAAN,EAAoC,GAAG,MAAA,EAAA,EAAjB,MAAO,CAAA,IAAkB,CACjD,CACH,EAAA,CAAA;AAAA,wBACA1B,cAAA,CAAC0B,WAAM,CAAA,KAAA,EAAN,EAAY,CAAA;AAAA,wBACb1B,cAAA,CAAC0B,WAAM,CAAA,OAAA,EAAN,EAAc,CAAA;AAAA,wBACf1B,cAAA,CAAC0B,YAAM,IAAN,EAAA,EACE,kBAAQ,GAAI,CAAA,CAAC,wBACXxB,eAAA,CAAAwB,WAAA,CAAM,KAAN,EAAuB,OAAA,EAAS,MAAM,QAAS,CAAA,EAAE,IAAI,GAAI,CAAA,EAAA,EAAI,CAC3D,EAAA,QAAA,EAAA;AAAA,UAAQ,OAAA,CAAA,GAAA,CAAI,CAAC,MAAW,KAAA;AACvB,YAAM,MAAA,EAAE,IAAM,EAAA,aAAA,EAAkB,GAAA,MAAA;AAEhC,YAAA,QAAQ,IAAM;AAAA,cACZ,KAAK,QAAA;AACH,gBAAA,sCACGA,WAAM,CAAA,IAAA,EAAN,EACC,QAAC,kBAAA1B,cAAA,CAAAS,uBAAA,EAAA,EAAW,WAAU,YACnB,EAAA,QAAA,EAAA,aAAA;AAAA,kBACC;AAAA,oBACE,EAAA,EAAI,CAAkC,+BAAA,EAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AAAA;AAAA,oBAEhD,cAAA,EAAgB,iBAAkB,CAAA,GAAA,CAAI,MAAM;AAAA,mBAC9C;AAAA,kBACA,EAAE,KAAA,EAAQ,GAAI,CAAA,OAAA,EAAS,SAAoB,EAAG;AAAA,iBAChD,EACF,KAVe,IAWjB,CAAA;AAAA,cAEJ,KAAK,MAAA;AACH,gBAAA,uBACGT,cAAA,CAAA0B,WAAA,CAAM,IAAN,EAAA,EACC,QAAC,kBAAA1B,cAAA,CAAAS,uBAAA,EAAA,EAAW,SAAU,EAAA,YAAA,EACnB,QAAgB,EAAA,eAAA,CAAA,GAAA,CAAI,IAAI,CAAA,EAC3B,KAHe,IAIjB,CAAA;AAAA,cAEJ,KAAK,MAAA;AACH,gBAAA,uBACGT,cAAA,CAAA0B,WAAA,CAAM,IAAN,EAAA,EACC,yCAACjB,uBAAW,EAAA,EAAA,SAAA,EAAU,YACnB,EAAA,QAAA,EAAA,aAAA,GAAgB,cAAc,GAAK,EAAA,MAAM,CAAI,GAAA,GAAA,EAChD,KAHe,IAIjB,CAAA;AAAA,cAEJ;AACE,gBAAA,uBACGT,cAAA,CAAA0B,WAAA,CAAM,IAAN,EAAA,EACC,QAAC,kBAAA1B,cAAA,CAAAS,uBAAA,EAAA,EAAW,SAAU,EAAA,YAAA,EAClB,QAAI,EAAA,GAAA,CAAA,IAAsB,CAAgB,IAAA,GAAA,EAC9C,KAHe,IAIjB,CAAA;AAAA;AAEN,WACD,CAAA;AAAA,0BACAT,cAAA,CAAA0B,WAAA,CAAM,IAAN,EAAA,EAAW,OAAS,EAAA,CAAC,CAAM,KAAA,CAAA,CAAE,eAAgB,EAAA,EAC5C,QAAC,kBAAA1B,cAAA,CAAAK,iBAAA,EAAA,EAAK,gBAAe,KACnB,EAAA,QAAA,kBAAAL,cAAA;AAAA,YAAC2B,uBAAA;AAAA,YAAA;AAAA,cACC,SAAS,MAAM,QAAA,CAAS,EAAE,EAAI,EAAA,GAAA,CAAI,IAAI,CAAA;AAAA,cACtC,WAAa,EAAA,KAAA;AAAA,cACb,KAAO,EAAA,aAAA;AAAA,gBACL,EAAE,EAAA,EAAI,0BAA4B,EAAA,cAAA,EAAgB,kBAAmB,EAAA;AAAA,gBACrE,EAAE,MAAA,EAAQ,CAAG,EAAA,GAAA,CAAI,MAAM,CAAU,OAAA,CAAA;AAAA,eACnC;AAAA,cACA,OAAQ,EAAA,OAAA;AAAA,cAER,yCAACC,SAAI,EAAA,EAAA;AAAA;AAAA,aAET,CACF,EAAA;AAAA,SA5Dc,EAAA,EAAA,GAAA,CAAI,EA6DpB,CACD,CACH,EAAA;AAAA,OAAA,EACF,CACF,EAAA,CAAA;AAAA,sCAECC,gBAAW,CAAA,IAAA,EAAX,EAAiB,GAAG,WAAW,UAC9B,EAAA,QAAA,EAAA;AAAA,wBAAC7B,cAAA,CAAA6B,gBAAA,CAAW,UAAX,EAAoB,CAAA;AAAA,wBACrB7B,cAAA,CAAC6B,gBAAW,CAAA,KAAA,EAAX,EAAiB;AAAA,OACpB,EAAA;AAAA,KACF,EAAA,CAAA;AAAA,IACC,OAAO,EACN,oBAAA7B,cAAA,CAAC,KAAM,EAAA,EAAA,WAAA,EAAa,MAAM,QAAS,CAAA,EAAE,EAAI,EAAA,EAAA,IAAM,QAAQ,CAAA,EAAG,OAAO,KAAM,CAAA,EAAA,CAAG,UAAY,EAAA;AAAA,GAE1F,EAAA,CAAA;AAEJ;AAEA,MAAM,oBAAoB,MAAM;AAC9B,EAAA,MAAM,WAAc,GAAAqB,sBAAA;AAAA,IAClB,CAAC,KAAU,KAAA,KAAA,CAAM,SAAU,CAAA,WAAA,CAAY,UAAU,SAAW,EAAA;AAAA,GAC9D;AAEA,EAAA,sCACGE,UAAK,CAAA,OAAA,EAAL,EAAa,WACZ,EAAA,QAAA,kBAAAvB,cAAA,CAAC,YAAS,CACZ,EAAA,CAAA;AAEJ;;;;;"}