{"version":3,"file":"ListPage-Dht1du1x.js","sources":["../../admin/src/pages/Settings/pages/Webhooks/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {\r\n  useNotifyAT,\r\n  Checkbox,\r\n  Button,\r\n  EmptyStateLayout,\r\n  Flex,\r\n  IconButton,\r\n  Switch,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  TFooter,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n  LinkButton,\r\n  Dialog,\r\n} from '@strapi/design-system';\r\nimport { Pencil, Plus, Trash } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\n\r\nimport { UpdateWebhook } from '../../../../../../shared/contracts/webhooks';\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\n\r\nimport { useWebhooks } from './hooks/useWebhooks';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ListPage = () => {\r\n  const [showModal, setShowModal] = React.useState(false);\r\n  const [webhooksToDelete, setWebhooksToDelete] = React.useState<string[]>([]);\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.webhooks);\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    isLoading: isRBACLoading,\r\n    allowedActions: { canCreate, canUpdate, canDelete },\r\n  } = useRBAC(permissions);\r\n  const { notifyStatus } = useNotifyAT();\r\n\r\n  const {\r\n    isLoading: isWebhooksLoading,\r\n    webhooks,\r\n    error: webhooksError,\r\n    updateWebhook,\r\n    deleteManyWebhooks,\r\n  } = useWebhooks();\r\n\r\n  React.useEffect(() => {\r\n    if (webhooksError) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(webhooksError),\r\n      });\r\n\r\n      return;\r\n    }\r\n    if (webhooks) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: 'Settings.webhooks.list.loading.success',\r\n          defaultMessage: 'Webhooks have been loaded',\r\n        })\r\n      );\r\n    }\r\n  }, [webhooks, webhooksError, toggleNotification, formatMessage, notifyStatus, formatAPIError]);\r\n\r\n  const enableWebhook = async (body: UpdateWebhook.Request['body'] & UpdateWebhook.Params) => {\r\n    try {\r\n      const res = await updateWebhook(body);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteWebhook = async (id: string) => {\r\n    try {\r\n      const res = await deleteManyWebhooks({\r\n        ids: [id],\r\n      });\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const confirmBulkDelete = async () => {\r\n    try {\r\n      const res = await deleteManyWebhooks({\r\n        ids: webhooksToDelete,\r\n      });\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      setWebhooksToDelete([]);\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    } finally {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const selectAllCheckbox = (selected: boolean) =>\r\n    selected\r\n      ? setWebhooksToDelete(webhooks?.map((webhook) => webhook.id) ?? [])\r\n      : setWebhooksToDelete([]);\r\n\r\n  const selectOneCheckbox = (selected: boolean, id: string) =>\r\n    selected\r\n      ? setWebhooksToDelete((prev) => [...prev, id])\r\n      : setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\r\n\r\n  const isLoading = isRBACLoading || isWebhooksLoading;\r\n  const numberOfWebhooks = webhooks?.length ?? 0;\r\n  const webhooksToDeleteLength = webhooksToDelete.length;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Webhooks',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main aria-busy={isLoading}>\r\n        <Layouts.Header\r\n          title={formatMessage({ id: 'Settings.webhooks.title', defaultMessage: 'Webhooks' })}\r\n          subtitle={formatMessage({\r\n            id: 'Settings.webhooks.list.description',\r\n            defaultMessage: 'Get POST changes notifications',\r\n          })}\r\n          primaryAction={\r\n            canCreate &&\r\n            !isLoading && (\r\n              <LinkButton tag={NavLink} startIcon={<Plus />} variant=\"default\" to=\"create\" size=\"S\">\r\n                {formatMessage({\r\n                  id: 'Settings.webhooks.list.button.add',\r\n                  defaultMessage: 'Create new webhook',\r\n                })}\r\n              </LinkButton>\r\n            )\r\n          }\r\n        />\r\n        {webhooksToDeleteLength > 0 && canDelete && (\r\n          <Layouts.Action\r\n            startActions={\r\n              <>\r\n                <Typography variant=\"epsilon\" textColor=\"neutral600\">\r\n                  {formatMessage(\r\n                    {\r\n                      id: 'Settings.webhooks.to.delete',\r\n                      defaultMessage:\r\n                        '{webhooksToDeleteLength, plural, one {# webhook} other {# webhooks}} selected',\r\n                    },\r\n                    { webhooksToDeleteLength }\r\n                  )}\r\n                </Typography>\r\n                <Button\r\n                  onClick={() => setShowModal(true)}\r\n                  startIcon={<Trash />}\r\n                  size=\"L\"\r\n                  variant=\"danger-light\"\r\n                >\r\n                  {formatMessage({\r\n                    id: 'global.delete',\r\n                    defaultMessage: 'Delete',\r\n                  })}\r\n                </Button>\r\n              </>\r\n            }\r\n          />\r\n        )}\r\n        <Layouts.Content>\r\n          {numberOfWebhooks > 0 ? (\r\n            <Table\r\n              colCount={5}\r\n              rowCount={numberOfWebhooks + 1}\r\n              footer={\r\n                <TFooter\r\n                  onClick={() => {\r\n                    if (canCreate) {\r\n                      navigate('create');\r\n                    }\r\n                  }}\r\n                  icon={<Plus />}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'Settings.webhooks.list.button.add',\r\n                    defaultMessage: 'Create new webhook',\r\n                  })}\r\n                </TFooter>\r\n              }\r\n            >\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>\r\n                    <Checkbox\r\n                      aria-label={formatMessage({\r\n                        id: 'global.select-all-entries',\r\n                        defaultMessage: 'Select all entries',\r\n                      })}\r\n                      checked={\r\n                        webhooksToDeleteLength > 0 && webhooksToDeleteLength < numberOfWebhooks\r\n                          ? 'indeterminate'\r\n                          : webhooksToDeleteLength === numberOfWebhooks\r\n                      }\r\n                      onCheckedChange={selectAllCheckbox}\r\n                    />\r\n                  </Th>\r\n                  <Th width=\"20%\">\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'global.name',\r\n                        defaultMessage: 'Name',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th width=\"60%\">\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'Settings.webhooks.form.url',\r\n                        defaultMessage: 'URL',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th width=\"20%\">\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'Settings.webhooks.list.th.status',\r\n                        defaultMessage: 'Status',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th>\r\n                    <VisuallyHidden>\r\n                      {formatMessage({\r\n                        id: 'Settings.webhooks.list.th.actions',\r\n                        defaultMessage: 'Actions',\r\n                      })}\r\n                    </VisuallyHidden>\r\n                  </Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {webhooks?.map((webhook) => (\r\n                  <Tr\r\n                    key={webhook.id}\r\n                    onClick={() => {\r\n                      if (canUpdate) {\r\n                        navigate(webhook.id);\r\n                      }\r\n                    }}\r\n                    style={{ cursor: canUpdate ? 'pointer' : 'default' }}\r\n                  >\r\n                    <Td onClick={(e) => e.stopPropagation()}>\r\n                      <Checkbox\r\n                        aria-label={`${formatMessage({\r\n                          id: 'global.select',\r\n                          defaultMessage: 'Select',\r\n                        })} ${webhook.name}`}\r\n                        checked={webhooksToDelete?.includes(webhook.id)}\r\n                        onCheckedChange={(selected) => selectOneCheckbox(!!selected, webhook.id)}\r\n                        name=\"select\"\r\n                      />\r\n                    </Td>\r\n                    <Td>\r\n                      <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\r\n                        {webhook.name}\r\n                      </Typography>\r\n                    </Td>\r\n                    <Td>\r\n                      <Typography textColor=\"neutral800\">{webhook.url}</Typography>\r\n                    </Td>\r\n                    <Td onClick={(e) => e.stopPropagation()}>\r\n                      <Flex>\r\n                        <Switch\r\n                          onLabel={formatMessage({\r\n                            id: 'global.enabled',\r\n                            defaultMessage: 'Enabled',\r\n                          })}\r\n                          offLabel={formatMessage({\r\n                            id: 'global.disabled',\r\n                            defaultMessage: 'Disabled',\r\n                          })}\r\n                          aria-label={`${webhook.name} ${formatMessage({\r\n                            id: 'Settings.webhooks.list.th.status',\r\n                            defaultMessage: 'Status',\r\n                          })}`}\r\n                          checked={webhook.isEnabled}\r\n                          onCheckedChange={(enabled) => {\r\n                            enableWebhook({\r\n                              ...webhook,\r\n                              isEnabled: enabled,\r\n                            });\r\n                          }}\r\n                          visibleLabels\r\n                        />\r\n                      </Flex>\r\n                    </Td>\r\n                    <Td>\r\n                      <Flex gap={1}>\r\n                        {canUpdate && (\r\n                          <IconButton\r\n                            label={formatMessage({\r\n                              id: 'Settings.webhooks.events.update',\r\n                              defaultMessage: 'Update',\r\n                            })}\r\n                            variant=\"ghost\"\r\n                          >\r\n                            <Pencil />\r\n                          </IconButton>\r\n                        )}\r\n                        {canDelete && (\r\n                          <DeleteActionButton\r\n                            onDelete={() => {\r\n                              deleteWebhook(webhook.id);\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </Flex>\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            </Table>\r\n          ) : (\r\n            <EmptyStateLayout\r\n              icon={<EmptyDocuments width=\"160px\" />}\r\n              content={formatMessage({\r\n                id: 'Settings.webhooks.list.empty.description',\r\n                defaultMessage: 'No webhooks found',\r\n              })}\r\n              action={\r\n                canCreate ? (\r\n                  <LinkButton variant=\"secondary\" startIcon={<Plus />} tag={NavLink} to=\"create\">\r\n                    {formatMessage({\r\n                      id: 'Settings.webhooks.list.button.add',\r\n                      defaultMessage: 'Create new webhook',\r\n                    })}\r\n                  </LinkButton>\r\n                ) : null\r\n              }\r\n            />\r\n          )}\r\n        </Layouts.Content>\r\n      </Page.Main>\r\n      <Dialog.Root open={showModal} onOpenChange={setShowModal}>\r\n        <ConfirmDialog onConfirm={confirmBulkDelete} />\r\n      </Dialog.Root>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DeleteActionButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype DeleteActionButtonProps = {\r\n  onDelete: () => void;\r\n};\r\n\r\nconst DeleteActionButton = ({ onDelete }: DeleteActionButtonProps) => {\r\n  const [showModal, setShowModal] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          setShowModal(true);\r\n        }}\r\n        label={formatMessage({\r\n          id: 'Settings.webhooks.events.delete',\r\n          defaultMessage: 'Delete webhook',\r\n        })}\r\n        variant=\"ghost\"\r\n      >\r\n        <Trash />\r\n      </IconButton>\r\n\r\n      <Dialog.Root open={showModal} onOpenChange={setShowModal}>\r\n        <ConfirmDialog\r\n          onConfirm={(e) => {\r\n            e?.stopPropagation();\r\n            onDelete();\r\n          }}\r\n        />\r\n      </Dialog.Root>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.webhooks.main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListPage, ProtectedListPage };\r\n"],"names":["React","useTypedSelector","useIntl","useAPIErrorHandler","useNotification","useNavigate","useRBAC","useNotifyAT","useWebhooks","jsx","Page","jsxs","Layouts","LinkButton","NavLink","Plus","Fragment","Typography","Button","Trash","Table","TFooter","Thead","Tr","Th","Checkbox","VisuallyHidden","Tbody","Td","Flex","Switch","IconButton","Pencil","EmptyStateLayout","EmptyDocuments","Dialog","ConfirmDialog"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,MAAM,WAAW,MAAM;AACrB,EAAA,MAAM,CAAC,SAAW,EAAA,YAAY,CAAI,GAAAA,gBAAA,CAAM,SAAS,KAAK,CAAA;AACtD,EAAA,MAAM,CAAC,gBAAkB,EAAA,mBAAmB,IAAIA,gBAAM,CAAA,QAAA,CAAmB,EAAE,CAAA;AAC3E,EAAM,MAAA,WAAA,GAAcC,uBAAiB,CAAC,KAAA,KAAU,MAAM,SAAU,CAAA,WAAA,CAAY,UAAU,QAAQ,CAAA;AAC9F,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIC,iBAAQ,EAAA;AAClC,EAAA,MAAM,EAAE,uBAAA,EAAyB,cAAe,EAAA,GAAIC,wBAAmB,EAAA;AACvE,EAAM,MAAA,EAAE,kBAAmB,EAAA,GAAIC,qBAAgB,EAAA;AAC/C,EAAA,MAAM,WAAWC,0BAAY,EAAA;AAE7B,EAAM,MAAA;AAAA,IACJ,SAAW,EAAA,aAAA;AAAA,IACX,cAAgB,EAAA,EAAE,SAAW,EAAA,SAAA,EAAW,SAAU;AAAA,GACpD,GAAIC,cAAQ,WAAW,CAAA;AACvB,EAAM,MAAA,EAAE,YAAa,EAAA,GAAIC,wBAAY,EAAA;AAErC,EAAM,MAAA;AAAA,IACJ,SAAW,EAAA,iBAAA;AAAA,IACX,QAAA;AAAA,IACA,KAAO,EAAA,aAAA;AAAA,IACP,aAAA;AAAA,IACA;AAAA,MACEC,uBAAY,EAAA;AAEhB,EAAAR,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,aAAe,EAAA;AACjB,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,OAAA,EAAS,eAAe,aAAa;AAAA,OACtC,CAAA;AAED,MAAA;AAAA;AAEF,IAAA,IAAI,QAAU,EAAA;AACZ,MAAA,YAAA;AAAA,QACE,aAAc,CAAA;AAAA,UACZ,EAAI,EAAA,wCAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACH;AAAA;AACF,GACF,EAAG,CAAC,QAAU,EAAA,aAAA,EAAe,oBAAoB,aAAe,EAAA,YAAA,EAAc,cAAc,CAAC,CAAA;AAE7F,EAAM,MAAA,aAAA,GAAgB,OAAO,IAA+D,KAAA;AAC1F,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,MAAM,aAAA,CAAc,IAAI,CAAA;AAEpC,MAAA,IAAI,WAAW,GAAK,EAAA;AAClB,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAAA;AACH,KACM,CAAA,MAAA;AACN,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA;AAAA,UACrB,EAAI,EAAA,oBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA;AACH,GACF;AAEA,EAAM,MAAA,aAAA,GAAgB,OAAO,EAAe,KAAA;AAC1C,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,MAAM,kBAAmB,CAAA;AAAA,QACnC,GAAA,EAAK,CAAC,EAAE;AAAA,OACT,CAAA;AAED,MAAA,IAAI,WAAW,GAAK,EAAA;AAClB,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAED,QAAA;AAAA;AAGF,MAAoB,mBAAA,CAAA,CAAC,SAAS,IAAK,CAAA,MAAA,CAAO,CAAC,SAAc,KAAA,SAAA,KAAc,EAAE,CAAC,CAAA;AAAA,KACpE,CAAA,MAAA;AACN,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA;AAAA,UACrB,EAAI,EAAA,oBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA;AACH,GACF;AAEA,EAAA,MAAM,oBAAoB,YAAY;AACpC,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,MAAM,kBAAmB,CAAA;AAAA,QACnC,GAAK,EAAA;AAAA,OACN,CAAA;AAED,MAAA,IAAI,WAAW,GAAK,EAAA;AAClB,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAED,QAAA;AAAA;AAGF,MAAA,mBAAA,CAAoB,EAAE,CAAA;AAAA,KAChB,CAAA,MAAA;AACN,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA;AAAA,UACrB,EAAI,EAAA,oBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA,KACD,SAAA;AACA,MAAA,YAAA,CAAa,KAAK,CAAA;AAAA;AACpB,GACF;AAEA,EAAA,MAAM,oBAAoB,CAAC,QAAA,KACzB,QACI,GAAA,mBAAA,CAAoB,UAAU,GAAI,CAAA,CAAC,OAAY,KAAA,OAAA,CAAQ,EAAE,CAAK,IAAA,EAAE,CAChE,GAAA,mBAAA,CAAoB,EAAE,CAAA;AAE5B,EAAM,MAAA,iBAAA,GAAoB,CAAC,QAAmB,EAAA,EAAA,KAC5C,WACI,mBAAoB,CAAA,CAAC,IAAS,KAAA,CAAC,GAAG,IAAA,EAAM,EAAE,CAAC,CAAA,GAC3C,mBAAoB,CAAA,CAAC,IAAS,KAAA,IAAA,CAAK,OAAO,CAAC,SAAA,KAAc,SAAc,KAAA,EAAE,CAAC,CAAA;AAEhF,EAAA,MAAM,YAAY,aAAiB,IAAA,iBAAA;AACnC,EAAM,MAAA,gBAAA,GAAmB,UAAU,MAAU,IAAA,CAAA;AAC7C,EAAA,MAAM,yBAAyB,gBAAiB,CAAA,MAAA;AAEhD,EAAA,IAAI,SAAW,EAAA;AACb,IAAO,uBAAAS,cAAA,CAACC,UAAK,CAAA,OAAA,EAAL,EAAa,CAAA;AAAA;AAGvB,EACE,uBAAAC,eAAA,CAACC,aAAQ,CAAA,IAAA,EAAR,EACC,QAAA,EAAA;AAAA,oBAACH,cAAA,CAAAC,UAAA,CAAK,OAAL,EACE,QAAA,EAAA,aAAA;AAAA,MACC,EAAE,EAAA,EAAI,oBAAsB,EAAA,cAAA,EAAgB,mBAAoB,EAAA;AAAA,MAChE;AAAA,QACE,IAAM,EAAA;AAAA;AACR,KAEJ,EAAA,CAAA;AAAA,oBACCC,eAAA,CAAAD,UAAA,CAAK,IAAL,EAAA,EAAU,aAAW,SACpB,EAAA,QAAA,EAAA;AAAA,sBAAAD,cAAA;AAAA,QAACG,aAAQ,CAAA,MAAA;AAAA,QAAR;AAAA,UACC,OAAO,aAAc,CAAA,EAAE,IAAI,yBAA2B,EAAA,cAAA,EAAgB,YAAY,CAAA;AAAA,UAClF,UAAU,aAAc,CAAA;AAAA,YACtB,EAAI,EAAA,oCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CAAA;AAAA,UACD,eACE,SACA,IAAA,CAAC,6BACEH,cAAA,CAAAI,uBAAA,EAAA,EAAW,KAAKC,sBAAS,EAAA,SAAA,kBAAYL,cAAA,CAAAM,UAAA,EAAA,EAAK,GAAI,OAAQ,EAAA,SAAA,EAAU,IAAG,QAAS,EAAA,IAAA,EAAK,KAC/E,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,mCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA;AAAA;AAAA,OAGN;AAAA,MACC,sBAAA,GAAyB,KAAK,SAC7B,oBAAAN,cAAA;AAAA,QAACG,aAAQ,CAAA,MAAA;AAAA,QAAR;AAAA,UACC,8BAEID,eAAA,CAAAK,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,4BAAAP,cAAA,CAACQ,uBAAW,EAAA,EAAA,OAAA,EAAQ,SAAU,EAAA,SAAA,EAAU,YACrC,EAAA,QAAA,EAAA,aAAA;AAAA,cACC;AAAA,gBACE,EAAI,EAAA,6BAAA;AAAA,gBACJ,cACE,EAAA;AAAA,eACJ;AAAA,cACA,EAAE,sBAAuB;AAAA,aAE7B,EAAA,CAAA;AAAA,4BACAR,cAAA;AAAA,cAACS,mBAAA;AAAA,cAAA;AAAA,gBACC,OAAA,EAAS,MAAM,YAAA,CAAa,IAAI,CAAA;AAAA,gBAChC,SAAA,iCAAYC,WAAM,EAAA,EAAA,CAAA;AAAA,gBAClB,IAAK,EAAA,GAAA;AAAA,gBACL,OAAQ,EAAA,cAAA;AAAA,gBAEP,QAAc,EAAA,aAAA,CAAA;AAAA,kBACb,EAAI,EAAA,eAAA;AAAA,kBACJ,cAAgB,EAAA;AAAA,iBACjB;AAAA;AAAA;AACH,WACF,EAAA;AAAA;AAAA,OAEJ;AAAA,sBAEDV,cAAA,CAAAG,aAAA,CAAQ,OAAR,EAAA,EACE,6BAAmB,CAClB,mBAAAD,eAAA;AAAA,QAACS,kBAAA;AAAA,QAAA;AAAA,UACC,QAAU,EAAA,CAAA;AAAA,UACV,UAAU,gBAAmB,GAAA,CAAA;AAAA,UAC7B,MACE,kBAAAX,cAAA;AAAA,YAACY,oBAAA;AAAA,YAAA;AAAA,cACC,SAAS,MAAM;AACb,gBAAA,IAAI,SAAW,EAAA;AACb,kBAAA,QAAA,CAAS,QAAQ,CAAA;AAAA;AACnB,eACF;AAAA,cACA,IAAA,iCAAON,UAAK,EAAA,EAAA,CAAA;AAAA,cAEX,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,mCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB;AAAA;AAAA,WACH;AAAA,UAGF,QAAA,EAAA;AAAA,4BAACN,cAAA,CAAAa,kBAAA,EAAA,EACC,0CAACC,eACC,EAAA,EAAA,QAAA,EAAA;AAAA,8BAAAd,cAAA,CAACe,eACC,EAAA,EAAA,QAAA,kBAAAf,cAAA;AAAA,gBAACgB,qBAAA;AAAA,gBAAA;AAAA,kBACC,cAAY,aAAc,CAAA;AAAA,oBACxB,EAAI,EAAA,2BAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBACjB,CAAA;AAAA,kBACD,SACE,sBAAyB,GAAA,CAAA,IAAK,sBAAyB,GAAA,gBAAA,GACnD,kBACA,sBAA2B,KAAA,gBAAA;AAAA,kBAEjC,eAAiB,EAAA;AAAA;AAAA,eAErB,EAAA,CAAA;AAAA,8BACAhB,cAAA,CAACe,eAAG,EAAA,EAAA,KAAA,EAAM,KACR,EAAA,QAAA,kBAAAf,cAAA,CAACQ,2BAAW,OAAQ,EAAA,OAAA,EAAQ,SAAU,EAAA,YAAA,EACnC,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,aAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA,CAAA;AAAA,8BACAR,cAAA,CAACe,eAAG,EAAA,EAAA,KAAA,EAAM,KACR,EAAA,QAAA,kBAAAf,cAAA,CAACQ,2BAAW,OAAQ,EAAA,OAAA,EAAQ,SAAU,EAAA,YAAA,EACnC,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,4BAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA,CAAA;AAAA,8BACAR,cAAA,CAACe,eAAG,EAAA,EAAA,KAAA,EAAM,KACR,EAAA,QAAA,kBAAAf,cAAA,CAACQ,2BAAW,OAAQ,EAAA,OAAA,EAAQ,SAAU,EAAA,YAAA,EACnC,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,kCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA,CAAA;AAAA,8BACCR,cAAA,CAAAe,eAAA,EAAA,EACC,QAAC,kBAAAf,cAAA,CAAAiB,2BAAA,EAAA,EACE,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,mCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA;AAAA,aAAA,EACF,CACF,EAAA,CAAA;AAAA,4BACCjB,cAAA,CAAAkB,kBAAA,EAAA,EACE,QAAU,EAAA,QAAA,EAAA,GAAA,CAAI,CAAC,OACd,qBAAAhB,eAAA;AAAA,cAACY,eAAA;AAAA,cAAA;AAAA,gBAEC,SAAS,MAAM;AACb,kBAAA,IAAI,SAAW,EAAA;AACb,oBAAA,QAAA,CAAS,QAAQ,EAAE,CAAA;AAAA;AACrB,iBACF;AAAA,gBACA,KAAO,EAAA,EAAE,MAAQ,EAAA,SAAA,GAAY,YAAY,SAAU,EAAA;AAAA,gBAEnD,QAAA,EAAA;AAAA,kCAAAd,cAAA,CAACmB,mBAAG,OAAS,EAAA,CAAC,CAAM,KAAA,CAAA,CAAE,iBACpB,EAAA,QAAA,kBAAAnB,cAAA;AAAA,oBAACgB,qBAAA;AAAA,oBAAA;AAAA,sBACC,YAAA,EAAY,GAAG,aAAc,CAAA;AAAA,wBAC3B,EAAI,EAAA,eAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAC,CAAI,CAAA,EAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AAAA,sBAClB,OAAS,EAAA,gBAAA,EAAkB,QAAS,CAAA,OAAA,CAAQ,EAAE,CAAA;AAAA,sBAC9C,eAAA,EAAiB,CAAC,QAAa,KAAA,iBAAA,CAAkB,CAAC,CAAC,QAAA,EAAU,QAAQ,EAAE,CAAA;AAAA,sBACvE,IAAK,EAAA;AAAA;AAAA,mBAET,EAAA,CAAA;AAAA,kCACAhB,cAAA,CAACmB,eACC,EAAA,EAAA,QAAA,kBAAAnB,cAAA,CAACQ,uBAAW,EAAA,EAAA,UAAA,EAAW,YAAW,SAAU,EAAA,YAAA,EACzC,QAAQ,EAAA,OAAA,CAAA,IAAA,EACX,CACF,EAAA,CAAA;AAAA,kCACAR,cAAA,CAACmB,mBACC,QAAC,kBAAAnB,cAAA,CAAAQ,uBAAA,EAAA,EAAW,WAAU,YAAc,EAAA,QAAA,EAAA,OAAA,CAAQ,KAAI,CAClD,EAAA,CAAA;AAAA,kCACAR,cAAA,CAACmB,mBAAG,OAAS,EAAA,CAAC,MAAM,CAAE,CAAA,eAAA,EACpB,EAAA,QAAA,kBAAAnB,cAAA,CAACoB,iBACC,EAAA,EAAA,QAAA,kBAAApB,cAAA;AAAA,oBAACqB,mBAAA;AAAA,oBAAA;AAAA,sBACC,SAAS,aAAc,CAAA;AAAA,wBACrB,EAAI,EAAA,gBAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAA;AAAA,sBACD,UAAU,aAAc,CAAA;AAAA,wBACtB,EAAI,EAAA,iBAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAA;AAAA,sBACD,YAAY,EAAA,CAAA,EAAG,OAAQ,CAAA,IAAI,IAAI,aAAc,CAAA;AAAA,wBAC3C,EAAI,EAAA,kCAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAC,CAAA,CAAA;AAAA,sBACF,SAAS,OAAQ,CAAA,SAAA;AAAA,sBACjB,eAAA,EAAiB,CAAC,OAAY,KAAA;AAC5B,wBAAc,aAAA,CAAA;AAAA,0BACZ,GAAG,OAAA;AAAA,0BACH,SAAW,EAAA;AAAA,yBACZ,CAAA;AAAA,uBACH;AAAA,sBACA,aAAa,EAAA;AAAA;AAAA,qBAEjB,CACF,EAAA,CAAA;AAAA,kCACCrB,cAAA,CAAAmB,eAAA,EAAA,EACC,QAAC,kBAAAjB,eAAA,CAAAkB,iBAAA,EAAA,EAAK,KAAK,CACR,EAAA,QAAA,EAAA;AAAA,oBACC,SAAA,oBAAApB,cAAA;AAAA,sBAACsB,uBAAA;AAAA,sBAAA;AAAA,wBACC,OAAO,aAAc,CAAA;AAAA,0BACnB,EAAI,EAAA,iCAAA;AAAA,0BACJ,cAAgB,EAAA;AAAA,yBACjB,CAAA;AAAA,wBACD,OAAQ,EAAA,OAAA;AAAA,wBAER,yCAACC,YAAO,EAAA,EAAA;AAAA;AAAA,qBACV;AAAA,oBAED,SACC,oBAAAvB,cAAA;AAAA,sBAAC,kBAAA;AAAA,sBAAA;AAAA,wBACC,UAAU,MAAM;AACd,0BAAA,aAAA,CAAc,QAAQ,EAAE,CAAA;AAAA;AAC1B;AAAA;AACF,mBAAA,EAEJ,CACF,EAAA;AAAA;AAAA,eAAA;AAAA,cA1EK,OAAQ,CAAA;AAAA,aA4EhB,CACH,EAAA;AAAA;AAAA;AAAA,OAGF,mBAAAA,cAAA;AAAA,QAACwB,6BAAA;AAAA,QAAA;AAAA,UACC,IAAM,kBAAAxB,cAAA,CAACyB,sBAAe,EAAA,EAAA,KAAA,EAAM,OAAQ,EAAA,CAAA;AAAA,UACpC,SAAS,aAAc,CAAA;AAAA,YACrB,EAAI,EAAA,0CAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CAAA;AAAA,UACD,MACE,EAAA,SAAA,mBACGzB,cAAA,CAAAI,uBAAA,EAAA,EAAW,SAAQ,WAAY,EAAA,SAAA,kBAAYJ,cAAA,CAAAM,UAAA,EAAA,EAAK,CAAI,EAAA,GAAA,EAAKD,sBAAS,EAAA,EAAA,EAAG,UACnE,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,mCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,GACH,CACE,GAAA;AAAA;AAAA,OAIZ,EAAA;AAAA,KACF,EAAA,CAAA;AAAA,oBACCL,cAAA,CAAA0B,mBAAA,CAAO,IAAP,EAAA,EAAY,IAAM,EAAA,SAAA,EAAW,YAAc,EAAA,YAAA,EAC1C,QAAC,kBAAA1B,cAAA,CAAA2B,mBAAA,EAAA,EAAc,SAAW,EAAA,iBAAA,EAAmB,CAC/C,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ;AAUA,MAAM,kBAAqB,GAAA,CAAC,EAAE,QAAA,EAAwC,KAAA;AACpE,EAAA,MAAM,CAAC,SAAW,EAAA,YAAY,CAAI,GAAApC,gBAAA,CAAM,SAAS,KAAK,CAAA;AACtD,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIE,iBAAQ,EAAA;AAElC,EAAA,uBAEIS,eAAA,CAAAK,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAAP,cAAA;AAAA,MAACsB,uBAAA;AAAA,MAAA;AAAA,QACC,OAAA,EAAS,CAAC,CAAM,KAAA;AACd,UAAA,CAAA,CAAE,eAAgB,EAAA;AAClB,UAAA,YAAA,CAAa,IAAI,CAAA;AAAA,SACnB;AAAA,QACA,OAAO,aAAc,CAAA;AAAA,UACnB,EAAI,EAAA,iCAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CAAA;AAAA,QACD,OAAQ,EAAA,OAAA;AAAA,QAER,yCAACZ,WAAM,EAAA,EAAA;AAAA;AAAA,KACT;AAAA,mCAECgB,mBAAO,CAAA,IAAA,EAAP,EAAY,IAAM,EAAA,SAAA,EAAW,cAAc,YAC1C,EAAA,QAAA,kBAAA1B,cAAA;AAAA,MAAC2B,mBAAA;AAAA,MAAA;AAAA,QACC,SAAA,EAAW,CAAC,CAAM,KAAA;AAChB,UAAA,CAAA,EAAG,eAAgB,EAAA;AACnB,UAAS,QAAA,EAAA;AAAA;AACX;AAAA,KAEJ,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAMA,MAAM,oBAAoB,MAAM;AAC9B,EAAA,MAAM,WAAc,GAAAnC,sBAAA;AAAA,IAClB,CAAC,KAAU,KAAA,KAAA,CAAM,SAAU,CAAA,WAAA,CAAY,UAAU,QAAS,CAAA;AAAA,GAC5D;AAEA,EAAA,sCACGS,UAAK,CAAA,OAAA,EAAL,EAAa,WACZ,EAAA,QAAA,kBAAAD,cAAA,CAAC,YAAS,CACZ,EAAA,CAAA;AAEJ;;;;;"}