{"version":3,"file":"EditViewPage-BYGUYLJ3.js","sources":["../../admin/src/services/contentApi.ts","../../admin/src/pages/Settings/pages/ApiTokens/EditView/apiTokenPermissions.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/FormApiTokenContainer.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/BoundRoute.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/ActionBoundRoutes.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/CollapsableContentType.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/ContentTypesSection.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/Permissions.tsx","../../admin/src/pages/Settings/pages/ApiTokens/EditView/constants.ts","../../admin/src/pages/Settings/pages/ApiTokens/EditView/utils/transformPermissionsData.ts","../../admin/src/pages/Settings/pages/ApiTokens/EditView/reducer.ts","../../admin/src/pages/Settings/pages/ApiTokens/EditView/EditViewPage.tsx"],"sourcesContent":["import { adminApi } from './api';\r\n\r\nimport type { List as ListContentApiPermissions } from '../../../shared/contracts/content-api/permissions';\r\nimport type { List as ListContentApiRoutes } from '../../../shared/contracts/content-api/routes';\r\n\r\nconst contentApiService = adminApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getPermissions: builder.query<ListContentApiPermissions.Response['data'], void>({\r\n      query: () => '/admin/content-api/permissions',\r\n      transformResponse: (response: ListContentApiPermissions.Response) => response.data,\r\n    }),\r\n    getRoutes: builder.query<ListContentApiRoutes.Response['data'], void>({\r\n      query: () => '/admin/content-api/routes',\r\n      transformResponse: (response: ListContentApiRoutes.Response) => response.data,\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nconst { useGetPermissionsQuery, useGetRoutesQuery } = contentApiService;\r\n\r\nexport { useGetPermissionsQuery, useGetRoutesQuery };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\n\r\nimport * as React from 'react';\r\n\r\nimport { createContext } from '@radix-ui/react-context';\r\n\r\nimport { List as ListContentApiPermissions } from '../../../../../../../shared/contracts/content-api/permissions';\r\nimport { List as ListContentApiRoutes } from '../../../../../../../shared/contracts/content-api/routes';\r\n\r\nexport interface PseudoEvent {\r\n  target: { value: string };\r\n}\r\n\r\ninterface ApiTokenPermissionsContextValue {\r\n  value: {\r\n    selectedAction: string | null;\r\n    routes: ListContentApiRoutes.Response['data'];\r\n    selectedActions: string[];\r\n    data: {\r\n      allActionsIds: string[];\r\n      permissions: ListContentApiPermissions.Response['data'][];\r\n    };\r\n    onChange: ({ target: { value } }: PseudoEvent) => void;\r\n    onChangeSelectAll: ({\r\n      target: { value },\r\n    }: {\r\n      target: { value: { action: string; actionId: string }[] };\r\n    }) => void;\r\n    setSelectedAction: ({ target: { value } }: PseudoEvent) => void;\r\n  };\r\n}\r\n\r\ninterface ApiTokenPermissionsContextProviderProps extends ApiTokenPermissionsContextValue {\r\n  children: React.ReactNode | React.ReactNode[];\r\n}\r\n\r\nconst [ApiTokenPermissionsContextProvider, useApiTokenPermissionsContext] =\r\n  createContext<ApiTokenPermissionsContextValue>('ApiTokenPermissionsContext');\r\n\r\nconst ApiTokenPermissionsProvider = ({\r\n  children,\r\n  ...rest\r\n}: ApiTokenPermissionsContextProviderProps) => {\r\n  return (\r\n    <ApiTokenPermissionsContextProvider {...rest}>{children}</ApiTokenPermissionsContextProvider>\r\n  );\r\n};\r\n\r\nconst useApiTokenPermissions = () => useApiTokenPermissionsContext('useApiTokenPermissions');\r\n\r\nexport { ApiTokenPermissionsProvider, useApiTokenPermissions };\r\nexport type { ApiTokenPermissionsContextValue, ApiTokenPermissionsContextProviderProps };\r\n","import * as React from 'react';\r\n\r\nimport { Box, Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { FormikErrors } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { LifeSpanInput } from '../../../../components/Tokens/LifeSpanInput';\r\nimport { TokenDescription } from '../../../../components/Tokens/TokenDescription';\r\nimport { TokenName } from '../../../../components/Tokens/TokenName';\r\nimport { TokenTypeSelect } from '../../../../components/Tokens/TokenTypeSelect';\r\n\r\nimport type { ApiToken } from '../../../../../../../../shared/contracts/api-token';\r\n\r\ninterface FormApiTokenContainerProps {\r\n  errors?: FormikErrors<Pick<ApiToken, 'name' | 'description' | 'lifespan' | 'type'>>;\r\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\r\n  canEditInputs: boolean;\r\n  values?: Partial<Pick<ApiToken, 'name' | 'description' | 'lifespan' | 'type'>>;\r\n  isCreating: boolean;\r\n  apiToken?: null | Partial<ApiToken>;\r\n  onDispatch: React.Dispatch<any>;\r\n  setHasChangedPermissions: (hasChanged: boolean) => void;\r\n}\r\n\r\nexport const FormApiTokenContainer = ({\r\n  errors = {},\r\n  onChange,\r\n  canEditInputs,\r\n  isCreating,\r\n  values = {},\r\n  apiToken = {},\r\n  onDispatch,\r\n  setHasChangedPermissions,\r\n}: FormApiTokenContainerProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleChangeSelectApiTokenType = ({ target: { value } }: { target: { value: string } }) => {\r\n    setHasChangedPermissions(false);\r\n\r\n    if (value === 'full-access') {\r\n      onDispatch({\r\n        type: 'SELECT_ALL_ACTIONS',\r\n      });\r\n    }\r\n    if (value === 'read-only') {\r\n      onDispatch({\r\n        type: 'ON_CHANGE_READ_ONLY',\r\n      });\r\n    }\r\n  };\r\n\r\n  const typeOptions = [\r\n    {\r\n      value: 'read-only',\r\n      label: {\r\n        id: 'Settings.tokens.types.read-only',\r\n        defaultMessage: 'Read-only',\r\n      },\r\n    },\r\n    {\r\n      value: 'full-access',\r\n      label: {\r\n        id: 'Settings.tokens.types.full-access',\r\n        defaultMessage: 'Full access',\r\n      },\r\n    },\r\n    {\r\n      value: 'custom',\r\n      label: {\r\n        id: 'Settings.tokens.types.custom',\r\n        defaultMessage: 'Custom',\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box\r\n      background=\"neutral0\"\r\n      hasRadius\r\n      shadow=\"filterShadow\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n    >\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Typography variant=\"delta\" tag=\"h2\">\r\n          {formatMessage({\r\n            id: 'global.details',\r\n            defaultMessage: 'Details',\r\n          })}\r\n        </Typography>\r\n        <Grid.Root gap={5}>\r\n          <Grid.Item key=\"name\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <TokenName\r\n              error={errors['name']}\r\n              value={values['name']}\r\n              canEditInputs={canEditInputs}\r\n              onChange={onChange}\r\n            />\r\n          </Grid.Item>\r\n          <Grid.Item key=\"description\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <TokenDescription\r\n              error={errors['description']}\r\n              value={values['description']}\r\n              canEditInputs={canEditInputs}\r\n              onChange={onChange}\r\n            />\r\n          </Grid.Item>\r\n          <Grid.Item key=\"lifespan\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <LifeSpanInput\r\n              isCreating={isCreating}\r\n              error={errors['lifespan']}\r\n              value={values['lifespan']}\r\n              onChange={onChange}\r\n              token={apiToken}\r\n            />\r\n          </Grid.Item>\r\n\r\n          <Grid.Item key=\"type\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <TokenTypeSelect\r\n              value={values['type']}\r\n              error={errors['type']}\r\n              label={{\r\n                id: 'Settings.tokens.form.type',\r\n                defaultMessage: 'Token type',\r\n              }}\r\n              onChange={(value) => {\r\n                // @ts-expect-error – DS Select supports numbers & strings, will be removed in V2\r\n                handleChangeSelectApiTokenType({ target: { value } });\r\n\r\n                // @ts-expect-error – DS Select supports numbers & strings, will be removed in V2\r\n                onChange({ target: { name: 'type', value } });\r\n              }}\r\n              options={typeOptions}\r\n              canEditInputs={canEditInputs}\r\n            />\r\n          </Grid.Item>\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Box, BoxComponent, Flex, Typography } from '@strapi/design-system';\r\nimport map from 'lodash/map';\r\nimport tail from 'lodash/tail';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, DefaultTheme } from 'styled-components';\r\n\r\ntype HttpVerb = 'POST' | 'GET' | 'PUT' | 'DELETE';\r\n\r\ntype MethodColor = {\r\n  text: keyof DefaultTheme['colors'];\r\n  border: keyof DefaultTheme['colors'];\r\n  background: keyof DefaultTheme['colors'];\r\n};\r\n\r\nconst getMethodColor = (verb: HttpVerb): MethodColor => {\r\n  switch (verb) {\r\n    case 'POST': {\r\n      return {\r\n        text: 'success600',\r\n        border: 'success200',\r\n        background: 'success100',\r\n      };\r\n    }\r\n    case 'GET': {\r\n      return {\r\n        text: 'secondary600',\r\n        border: 'secondary200',\r\n        background: 'secondary100',\r\n      };\r\n    }\r\n    case 'PUT': {\r\n      return {\r\n        text: 'warning600',\r\n        border: 'warning200',\r\n        background: 'warning100',\r\n      };\r\n    }\r\n    case 'DELETE': {\r\n      return {\r\n        text: 'danger600',\r\n        border: 'danger200',\r\n        background: 'danger100',\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        text: 'neutral600',\r\n        border: 'neutral200',\r\n        background: 'neutral100',\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst MethodBox = styled<BoxComponent>(Box)`\r\n  margin: -1px;\r\n  border-radius: ${({ theme }) => theme.spaces[1]} 0 0 ${({ theme }) => theme.spaces[1]};\r\n`;\r\n\r\ninterface BoundRouteProps {\r\n  route: {\r\n    handler: string;\r\n    method: HttpVerb;\r\n    path: string;\r\n  };\r\n}\r\n\r\nexport const BoundRoute = ({\r\n  route = {\r\n    handler: 'Nocontroller.error',\r\n    method: 'GET',\r\n    path: '/there-is-no-path',\r\n  },\r\n}: BoundRouteProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { method, handler: title, path } = route;\r\n  const formattedRoute = path ? tail(path.split('/')) : [];\r\n  const [controller = '', action = ''] = title ? title.split('.') : [];\r\n  const colors = getMethodColor(route.method);\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <Typography variant=\"delta\" tag=\"h3\">\r\n        {formatMessage({\r\n          id: 'Settings.apiTokens.createPage.BoundRoute.title',\r\n          defaultMessage: 'Bound route to',\r\n        })}\r\n        &nbsp;\r\n        <span>{controller}</span>\r\n        <Typography variant=\"delta\" textColor=\"primary600\">\r\n          .{action}\r\n        </Typography>\r\n      </Typography>\r\n      <Flex hasRadius background=\"neutral0\" borderColor=\"neutral200\" gap={0}>\r\n        <MethodBox background={colors.background} borderColor={colors.border} padding={2}>\r\n          <Typography fontWeight=\"bold\" textColor={colors.text}>\r\n            {method}\r\n          </Typography>\r\n        </MethodBox>\r\n        <Box paddingLeft={2} paddingRight={2}>\r\n          {map(formattedRoute, (value) => (\r\n            <Typography key={value} textColor={value.includes(':') ? 'neutral600' : 'neutral900'}>\r\n              /{value}\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Grid, Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApiTokenPermissions } from '../apiTokenPermissions';\r\n\r\nimport { BoundRoute } from './BoundRoute';\r\n\r\nexport const ActionBoundRoutes = () => {\r\n  const {\r\n    value: { selectedAction, routes },\r\n  } = useApiTokenPermissions();\r\n  const { formatMessage } = useIntl();\r\n  const actionSection = selectedAction?.split('.')[0];\r\n\r\n  return (\r\n    <Grid.Item\r\n      col={5}\r\n      background=\"neutral150\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n      style={{ minHeight: '100%' }}\r\n      direction=\"column\"\r\n      alignItems=\"stretch\"\r\n    >\r\n      {selectedAction ? (\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          {actionSection &&\r\n            actionSection in routes &&\r\n            routes[actionSection].map((route) => {\r\n              return route.config.auth?.scope?.includes(selectedAction) ||\r\n                route.handler === selectedAction ? (\r\n                <BoundRoute key={route.handler} route={route} />\r\n              ) : null;\r\n            })}\r\n        </Flex>\r\n      ) : (\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          <Typography variant=\"delta\" tag=\"h3\">\r\n            {formatMessage({\r\n              id: 'Settings.apiTokens.createPage.permissions.header.title',\r\n              defaultMessage: 'Advanced settings',\r\n            })}\r\n          </Typography>\r\n          <Typography tag=\"p\" textColor=\"neutral600\">\r\n            {formatMessage({\r\n              id: 'Settings.apiTokens.createPage.permissions.header.hint',\r\n              defaultMessage:\r\n                \"Select the application's actions or the plugin's actions and click on the cog icon to display the bound route\",\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n      )}\r\n    </Grid.Item>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Accordion,\r\n  Box,\r\n  BoxComponent,\r\n  Checkbox,\r\n  Flex,\r\n  Grid,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Cog } from '@strapi/icons';\r\nimport capitalize from 'lodash/capitalize';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, css } from 'styled-components';\r\n\r\nimport { ContentApiPermission } from '../../../../../../../../shared/contracts/content-api/permissions';\r\nimport { useApiTokenPermissions } from '../apiTokenPermissions';\r\n\r\nconst activeCheckboxWrapperStyles = css`\r\n  background: ${(props) => props.theme.colors.primary100};\r\n\r\n  #cog {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst CheckboxWrapper = styled<BoxComponent>(Box)<{ $isActive: boolean }>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  #cog {\r\n    opacity: 0;\r\n    path {\r\n      fill: ${(props) => props.theme.colors.primary600};\r\n    }\r\n  }\r\n\r\n  /* Show active style both on hover and when the action is selected */\r\n  ${(props) => props.$isActive && activeCheckboxWrapperStyles}\r\n  &:hover {\r\n    ${activeCheckboxWrapperStyles}\r\n  }\r\n`;\r\n\r\nconst Border = styled.div`\r\n  flex: 1;\r\n  align-self: center;\r\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n`;\r\n\r\ninterface CollapsableContentTypeProps {\r\n  controllers?: ContentApiPermission['controllers'];\r\n  label: ContentApiPermission['label'];\r\n  orderNumber?: number;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const CollapsableContentType = ({\r\n  controllers = [],\r\n  label,\r\n  orderNumber = 0,\r\n  disabled = false,\r\n}: CollapsableContentTypeProps) => {\r\n  const {\r\n    value: { onChangeSelectAll, onChange, selectedActions, setSelectedAction, selectedAction },\r\n  } = useApiTokenPermissions();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const isActionSelected = (actionId: string) => actionId === selectedAction;\r\n\r\n  return (\r\n    <Accordion.Item value={`${label}-${orderNumber}`}>\r\n      <Accordion.Header variant={orderNumber % 2 ? 'primary' : 'secondary'}>\r\n        <Accordion.Trigger>{capitalize(label)}</Accordion.Trigger>\r\n      </Accordion.Header>\r\n      <Accordion.Content>\r\n        {controllers?.map((controller) => {\r\n          const allActionsSelected = controller.actions.every((action) =>\r\n            selectedActions.includes(action.actionId)\r\n          );\r\n\r\n          const someActionsSelected = controller.actions.some((action) =>\r\n            selectedActions.includes(action.actionId)\r\n          );\r\n\r\n          return (\r\n            <Box key={`${label}.${controller?.controller}`}>\r\n              <Flex justifyContent=\"space-between\" alignItems=\"center\" padding={4}>\r\n                <Box paddingRight={4}>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                    {controller?.controller}\r\n                  </Typography>\r\n                </Box>\r\n                <Border />\r\n                <Box paddingLeft={4}>\r\n                  <Checkbox\r\n                    checked={\r\n                      !allActionsSelected && someActionsSelected\r\n                        ? 'indeterminate'\r\n                        : allActionsSelected\r\n                    }\r\n                    onCheckedChange={() => {\r\n                      onChangeSelectAll({ target: { value: [...controller.actions] } });\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\r\n                  </Checkbox>\r\n                </Box>\r\n              </Flex>\r\n              <Grid.Root gap={4} padding={4}>\r\n                {controller?.actions &&\r\n                  controller?.actions.map((action) => {\r\n                    return (\r\n                      <Grid.Item\r\n                        col={6}\r\n                        key={action.actionId}\r\n                        direction=\"column\"\r\n                        alignItems=\"stretch\"\r\n                      >\r\n                        <CheckboxWrapper\r\n                          $isActive={isActionSelected(action.actionId)}\r\n                          padding={2}\r\n                          hasRadius\r\n                        >\r\n                          <Checkbox\r\n                            checked={selectedActions.includes(action.actionId)}\r\n                            name={action.actionId}\r\n                            onCheckedChange={() => {\r\n                              onChange({ target: { value: action.actionId } });\r\n                            }}\r\n                            disabled={disabled}\r\n                          >\r\n                            {action.action}\r\n                          </Checkbox>\r\n                          <button\r\n                            type=\"button\"\r\n                            data-testid=\"action-cog\"\r\n                            onClick={() =>\r\n                              setSelectedAction({ target: { value: action.actionId } })\r\n                            }\r\n                            style={{ display: 'inline-flex', alignItems: 'center' }}\r\n                          >\r\n                            <Cog id=\"cog\" />\r\n                          </button>\r\n                        </CheckboxWrapper>\r\n                      </Grid.Item>\r\n                    );\r\n                  })}\r\n              </Grid.Root>\r\n            </Box>\r\n          );\r\n        })}\r\n      </Accordion.Content>\r\n    </Accordion.Item>\r\n  );\r\n};\r\n","import { Accordion, Box } from '@strapi/design-system';\r\n\r\nimport { ContentApiPermission } from '../../../../../../../../shared/contracts/content-api/permissions';\r\n\r\nimport { CollapsableContentType } from './CollapsableContentType';\r\n\r\ninterface ContentTypesSectionProps {\r\n  section: ContentApiPermission[] | null;\r\n}\r\n\r\nexport const ContentTypesSection = ({ section = null, ...props }: ContentTypesSectionProps) => {\r\n  return (\r\n    <Box padding={4} background=\"neutral0\">\r\n      <Accordion.Root size=\"M\">\r\n        {section &&\r\n          section.map((api, index) => (\r\n            <CollapsableContentType\r\n              key={api.apiId}\r\n              label={api.label}\r\n              controllers={api.controllers}\r\n              orderNumber={index}\r\n              {...props}\r\n            />\r\n          ))}\r\n      </Accordion.Root>\r\n    </Box>\r\n  );\r\n};\r\n","import { Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApiTokenPermissions } from '../apiTokenPermissions';\r\n\r\nimport { ActionBoundRoutes } from './ActionBoundRoutes';\r\nimport { ContentTypesSection } from './ContentTypesSection';\r\n\r\nexport const Permissions = ({ ...props }) => {\r\n  const {\r\n    value: { data },\r\n  } = useApiTokenPermissions();\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Grid.Root gap={0} shadow=\"filterShadow\" hasRadius background=\"neutral0\">\r\n      <Grid.Item\r\n        col={7}\r\n        paddingTop={6}\r\n        paddingBottom={6}\r\n        paddingLeft={7}\r\n        paddingRight={7}\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n      >\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          <Typography variant=\"delta\" tag=\"h2\">\r\n            {formatMessage({\r\n              id: 'Settings.apiTokens.createPage.permissions.title',\r\n              defaultMessage: 'Permissions',\r\n            })}\r\n          </Typography>\r\n          <Typography tag=\"p\" textColor=\"neutral600\">\r\n            {formatMessage({\r\n              id: 'Settings.apiTokens.createPage.permissions.description',\r\n              defaultMessage: 'Only actions bound by a route are listed below.',\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n        {data?.permissions && <ContentTypesSection section={data?.permissions} {...props} />}\r\n      </Grid.Item>\r\n      <ActionBoundRoutes />\r\n    </Grid.Root>\r\n  );\r\n};\r\n","import * as yup from 'yup';\r\n\r\nimport { translatedErrors } from '../../../../../utils/translatedErrors';\r\n\r\nexport const schema = yup.object().shape({\r\n  name: yup.string().max(100).required(translatedErrors.required.id),\r\n  type: yup\r\n    .string()\r\n    .oneOf(['read-only', 'full-access', 'custom'])\r\n    .required(translatedErrors.required.id),\r\n  description: yup.string().nullable(),\r\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required.id),\r\n});\r\n","import { ContentApiPermission } from '../../../../../../../../shared/contracts/content-api/permissions';\r\n\r\ninterface Layout {\r\n  allActionsIds: string[];\r\n  permissions: {\r\n    apiId: string;\r\n    label: string;\r\n    controllers: { controller: string; actions: { action: string; actionId: string }[] }[];\r\n  }[];\r\n}\r\n\r\nexport const transformPermissionsData = (data: ContentApiPermission) => {\r\n  const layout: Layout = {\r\n    allActionsIds: [],\r\n    permissions: [],\r\n  };\r\n\r\n  layout.permissions = Object.entries(data).map(([apiId, permission]) => ({\r\n    apiId,\r\n    label: apiId.split('::')[1],\r\n    controllers: Object.keys(permission.controllers)\r\n      .map((controller) => ({\r\n        controller,\r\n        actions:\r\n          controller in permission.controllers\r\n            ? permission.controllers[controller]\r\n                .map((action: ContentApiPermission['controllers']) => {\r\n                  const actionId = `${apiId}.${controller}.${action}`;\r\n\r\n                  if (apiId.includes('api::')) {\r\n                    layout.allActionsIds.push(actionId);\r\n                  }\r\n\r\n                  return {\r\n                    action,\r\n                    actionId,\r\n                  };\r\n                })\r\n                .flat()\r\n            : [],\r\n      }))\r\n      .flat(),\r\n  }));\r\n\r\n  return layout;\r\n};\r\n","/* eslint-disable consistent-return */\r\nimport { produce } from 'immer';\r\nimport pull from 'lodash/pull';\r\n\r\nimport { ContentApiPermission } from '../../../../../../../shared/contracts/content-api/permissions';\r\n\r\nimport { ApiTokenPermissionsContextValue } from './apiTokenPermissions';\r\nimport { transformPermissionsData } from './utils/transformPermissionsData';\r\n\r\ntype InitialState = Pick<\r\n  ApiTokenPermissionsContextValue['value'],\r\n  'data' | 'routes' | 'selectedAction' | 'selectedActions'\r\n>;\r\n\r\ninterface ActionOnChange {\r\n  type: 'ON_CHANGE';\r\n  value: string;\r\n}\r\n\r\ninterface ActionSelectAllInPermission {\r\n  type: 'SELECT_ALL_IN_PERMISSION';\r\n  value: { action: string; actionId: string }[];\r\n}\r\n\r\ninterface ActionSelectAllActions {\r\n  type: 'SELECT_ALL_ACTIONS';\r\n}\r\n\r\ninterface ActionOnChangeReadOnly {\r\n  type: 'ON_CHANGE_READ_ONLY';\r\n}\r\n\r\ninterface ActionUpdatePermissionsLayout {\r\n  type: 'UPDATE_PERMISSIONS_LAYOUT';\r\n  value: ContentApiPermission;\r\n}\r\n\r\ninterface ActionUpdateRoutes {\r\n  type: 'UPDATE_ROUTES';\r\n  value: ApiTokenPermissionsContextValue['value']['routes'] | undefined;\r\n}\r\n\r\ninterface ActionUpdatePermissions {\r\n  type: 'UPDATE_PERMISSIONS';\r\n  value: any[];\r\n}\r\n\r\ninterface ActionSetSelectedAction {\r\n  type: 'SET_SELECTED_ACTION';\r\n  value: string;\r\n}\r\n\r\ntype Action =\r\n  | ActionOnChange\r\n  | ActionSelectAllInPermission\r\n  | ActionSelectAllActions\r\n  | ActionOnChangeReadOnly\r\n  | ActionUpdatePermissionsLayout\r\n  | ActionUpdateRoutes\r\n  | ActionUpdatePermissions\r\n  | ActionSetSelectedAction;\r\n\r\nexport const initialState: InitialState = {\r\n  data: {\r\n    allActionsIds: [],\r\n    permissions: [],\r\n  },\r\n  routes: {},\r\n  selectedAction: '',\r\n  selectedActions: [],\r\n};\r\n\r\nexport const reducer = (state: InitialState, action: Action) =>\r\n  produce(state, (draftState) => {\r\n    switch (action.type) {\r\n      case 'ON_CHANGE': {\r\n        if (draftState.selectedActions.includes(action.value)) {\r\n          pull(draftState.selectedActions, action.value);\r\n        } else {\r\n          draftState.selectedActions.push(action.value);\r\n        }\r\n        break;\r\n      }\r\n      case 'SELECT_ALL_IN_PERMISSION': {\r\n        const areAllSelected = action.value.every((item) =>\r\n          draftState.selectedActions.includes(item.actionId)\r\n        );\r\n\r\n        if (areAllSelected) {\r\n          action.value.forEach((item) => {\r\n            pull(draftState.selectedActions, item.actionId);\r\n          });\r\n        } else {\r\n          action.value.forEach((item) => {\r\n            draftState.selectedActions.push(item.actionId);\r\n          });\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'SELECT_ALL_ACTIONS': {\r\n        draftState.selectedActions = [...draftState.data.allActionsIds];\r\n\r\n        break;\r\n      }\r\n      case 'ON_CHANGE_READ_ONLY': {\r\n        const onlyReadOnlyActions = draftState.data.allActionsIds.filter(\r\n          (actionId) => actionId.includes('find') || actionId.includes('findOne')\r\n        );\r\n        draftState.selectedActions = [...onlyReadOnlyActions];\r\n        break;\r\n      }\r\n      case 'UPDATE_PERMISSIONS_LAYOUT': {\r\n        draftState.data = transformPermissionsData(action.value);\r\n        break;\r\n      }\r\n      case 'UPDATE_ROUTES': {\r\n        draftState.routes = { ...action.value };\r\n        break;\r\n      }\r\n      case 'UPDATE_PERMISSIONS': {\r\n        draftState.selectedActions = [...action.value];\r\n        break;\r\n      }\r\n      case 'SET_SELECTED_ACTION': {\r\n        draftState.selectedAction = action.value;\r\n        break;\r\n      }\r\n      default:\r\n        return draftState;\r\n    }\r\n  });\r\n","import * as React from 'react';\r\n\r\nimport { Flex } from '@strapi/design-system';\r\nimport { Formik, Form, FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation, useMatch, useNavigate } from 'react-router-dom';\r\n\r\nimport { useGuidedTour } from '../../../../../components/GuidedTour/Provider';\r\nimport { Layouts } from '../../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../../features/Notifications';\r\nimport { useTracking } from '../../../../../features/Tracking';\r\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\r\nimport { useRBAC } from '../../../../../hooks/useRBAC';\r\nimport {\r\n  useCreateAPITokenMutation,\r\n  useGetAPITokenQuery,\r\n  useUpdateAPITokenMutation,\r\n} from '../../../../../services/apiTokens';\r\nimport { useGetPermissionsQuery, useGetRoutesQuery } from '../../../../../services/contentApi';\r\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\r\nimport { API_TOKEN_TYPE } from '../../../components/Tokens/constants';\r\nimport { FormHead } from '../../../components/Tokens/FormHead';\r\nimport { TokenBox } from '../../../components/Tokens/TokenBox';\r\n\r\nimport {\r\n  ApiTokenPermissionsContextValue,\r\n  ApiTokenPermissionsProvider,\r\n} from './apiTokenPermissions';\r\nimport { FormApiTokenContainer } from './components/FormApiTokenContainer';\r\nimport { Permissions } from './components/Permissions';\r\nimport { schema } from './constants';\r\nimport { initialState, reducer } from './reducer';\r\n\r\nimport type { Get, ApiToken } from '../../../../../../../shared/contracts/api-token';\r\n\r\n/**\r\n * TODO: this could definitely be refactored to avoid using redux and instead just use the\r\n * server response as the source of the truth for the data.\r\n */\r\nexport const EditView = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { state: locationState } = useLocation();\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\r\n  const [apiToken, setApiToken] = React.useState<ApiToken | null>(\r\n    locationState?.apiToken?.accessKey\r\n      ? {\r\n          ...locationState.apiToken,\r\n        }\r\n      : null\r\n  );\r\n  const { trackUsage } = useTracking();\r\n  const setCurrentStep = useGuidedTour('EditView', (state) => state.setCurrentStep);\r\n  const {\r\n    allowedActions: { canCreate, canUpdate, canRegenerate },\r\n  } = useRBAC(permissions.settings?.['api-tokens']);\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n  const match = useMatch('/settings/api-tokens/:id');\r\n  const id = match?.params?.id;\r\n  const isCreating = id === 'create';\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidtionErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const contentAPIPermissionsQuery = useGetPermissionsQuery();\r\n  const contentAPIRoutesQuery = useGetRoutesQuery();\r\n\r\n  /**\r\n   * Separate effects otherwise we could end\r\n   * up duplicating the same notification.\r\n   */\r\n  React.useEffect(() => {\r\n    if (contentAPIPermissionsQuery.error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(contentAPIPermissionsQuery.error),\r\n      });\r\n    }\r\n  }, [contentAPIPermissionsQuery.error, formatAPIError, toggleNotification]);\r\n\r\n  React.useEffect(() => {\r\n    if (contentAPIRoutesQuery.error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(contentAPIRoutesQuery.error),\r\n      });\r\n    }\r\n  }, [contentAPIRoutesQuery.error, formatAPIError, toggleNotification]);\r\n\r\n  React.useEffect(() => {\r\n    if (contentAPIPermissionsQuery.data) {\r\n      dispatch({\r\n        type: 'UPDATE_PERMISSIONS_LAYOUT',\r\n        value: contentAPIPermissionsQuery.data,\r\n      });\r\n    }\r\n  }, [contentAPIPermissionsQuery.data]);\r\n\r\n  React.useEffect(() => {\r\n    if (contentAPIRoutesQuery.data) {\r\n      dispatch({\r\n        type: 'UPDATE_ROUTES',\r\n        value: contentAPIRoutesQuery.data,\r\n      });\r\n    }\r\n  }, [contentAPIRoutesQuery.data]);\r\n\r\n  React.useEffect(() => {\r\n    if (apiToken) {\r\n      if (apiToken.type === 'read-only') {\r\n        dispatch({\r\n          type: 'ON_CHANGE_READ_ONLY',\r\n        });\r\n      }\r\n      if (apiToken.type === 'full-access') {\r\n        dispatch({\r\n          type: 'SELECT_ALL_ACTIONS',\r\n        });\r\n      }\r\n      if (apiToken.type === 'custom') {\r\n        dispatch({\r\n          type: 'UPDATE_PERMISSIONS',\r\n          value: apiToken?.permissions,\r\n        });\r\n      }\r\n    }\r\n  }, [apiToken]);\r\n\r\n  React.useEffect(() => {\r\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\r\n      tokenType: API_TOKEN_TYPE,\r\n    });\r\n  }, [isCreating, trackUsage]);\r\n\r\n  const { data, error, isLoading } = useGetAPITokenQuery(id!, {\r\n    skip: !id || isCreating || !!apiToken,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      setApiToken(data);\r\n\r\n      if (data.type === 'read-only') {\r\n        dispatch({\r\n          type: 'ON_CHANGE_READ_ONLY',\r\n        });\r\n      }\r\n      if (data.type === 'full-access') {\r\n        dispatch({\r\n          type: 'SELECT_ALL_ACTIONS',\r\n        });\r\n      }\r\n      if (data.type === 'custom') {\r\n        dispatch({\r\n          type: 'UPDATE_PERMISSIONS',\r\n          value: data?.permissions,\r\n        });\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  const [createToken] = useCreateAPITokenMutation();\r\n  const [updateToken] = useUpdateAPITokenMutation();\r\n\r\n  interface FormValues extends Pick<Get.Response['data'], 'name' | 'description'> {\r\n    lifespan: Get.Response['data']['lifespan'] | undefined;\r\n    type: Get.Response['data']['type'] | undefined;\r\n  }\r\n\r\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\r\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\r\n      tokenType: API_TOKEN_TYPE,\r\n    });\r\n\r\n    try {\r\n      if (isCreating) {\r\n        const res = await createToken({\r\n          ...body,\r\n          // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\r\n          lifespan:\r\n            body?.lifespan && body.lifespan !== '0' ? parseInt(body.lifespan.toString(), 10) : null,\r\n          permissions: body.type === 'custom' ? state.selectedActions : null,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n            formik.setErrors(formatValidtionErrors(res.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(res.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'notification.success.apitokencreated',\r\n            defaultMessage: 'API Token successfully created',\r\n          }),\r\n        });\r\n\r\n        trackUsage('didCreateToken', {\r\n          type: res.data.type,\r\n          tokenType: API_TOKEN_TYPE,\r\n        });\r\n\r\n        navigate(`../api-tokens/${res.data.id.toString()}`, {\r\n          state: { apiToken: res.data },\r\n          replace: true,\r\n        });\r\n        setCurrentStep('apiTokens.success');\r\n      } else {\r\n        const res = await updateToken({\r\n          id: id!,\r\n          name: body.name,\r\n          description: body.description,\r\n          type: body.type,\r\n          permissions: body.type === 'custom' ? state.selectedActions : null,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n            formik.setErrors(formatValidtionErrors(res.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(res.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'notification.success.apitokenedited',\r\n            defaultMessage: 'API Token successfully edited',\r\n          }),\r\n        });\r\n\r\n        trackUsage('didEditToken', {\r\n          type: res.data.type,\r\n          tokenType: API_TOKEN_TYPE,\r\n        });\r\n      }\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'Something went wrong',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const [hasChangedPermissions, setHasChangedPermissions] = React.useState(false);\r\n\r\n  const handleChangeCheckbox = ({\r\n    target: { value },\r\n  }: Parameters<ApiTokenPermissionsContextValue['value']['onChange']>[0]) => {\r\n    setHasChangedPermissions(true);\r\n    dispatch({\r\n      type: 'ON_CHANGE',\r\n      value,\r\n    });\r\n  };\r\n\r\n  const handleChangeSelectAllCheckbox = ({\r\n    target: { value },\r\n  }: Parameters<ApiTokenPermissionsContextValue['value']['onChangeSelectAll']>[0]) => {\r\n    setHasChangedPermissions(true);\r\n    dispatch({\r\n      type: 'SELECT_ALL_IN_PERMISSION',\r\n      value,\r\n    });\r\n  };\r\n\r\n  const setSelectedAction = ({\r\n    target: { value },\r\n  }: Parameters<ApiTokenPermissionsContextValue['value']['setSelectedAction']>[0]) => {\r\n    dispatch({\r\n      type: 'SET_SELECTED_ACTION',\r\n      value,\r\n    });\r\n  };\r\n\r\n  const providerValue = {\r\n    ...state,\r\n    onChange: handleChangeCheckbox,\r\n    onChangeSelectAll: handleChangeSelectAllCheckbox,\r\n    setSelectedAction,\r\n  };\r\n\r\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <ApiTokenPermissionsProvider value={providerValue}>\r\n      <Page.Main>\r\n        <Page.Title>\r\n          {formatMessage(\r\n            { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n            { name: 'API Tokens' }\r\n          )}\r\n        </Page.Title>\r\n        <Formik\r\n          validationSchema={schema}\r\n          validateOnChange={false}\r\n          initialValues={{\r\n            name: apiToken?.name || '',\r\n            description: apiToken?.description || '',\r\n            type: apiToken?.type,\r\n            lifespan: apiToken?.lifespan,\r\n          }}\r\n          enableReinitialize\r\n          onSubmit={(body, actions) => handleSubmit(body, actions)}\r\n        >\r\n          {({ errors, handleChange, isSubmitting, values, setFieldValue }) => {\r\n            if (hasChangedPermissions && values?.type !== 'custom') {\r\n              setFieldValue('type', 'custom');\r\n            }\r\n\r\n            return (\r\n              <Form>\r\n                <FormHead\r\n                  title={{\r\n                    id: 'Settings.apiTokens.createPage.title',\r\n                    defaultMessage: 'Create API Token',\r\n                  }}\r\n                  token={apiToken}\r\n                  setToken={setApiToken}\r\n                  canEditInputs={canEditInputs}\r\n                  canRegenerate={canRegenerate}\r\n                  isSubmitting={isSubmitting}\r\n                  regenerateUrl=\"/admin/api-tokens/\"\r\n                />\r\n\r\n                <Layouts.Content>\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                    {Boolean(apiToken?.name) && (\r\n                      <TokenBox token={apiToken?.accessKey} tokenType={API_TOKEN_TYPE} />\r\n                    )}\r\n                    <FormApiTokenContainer\r\n                      errors={errors}\r\n                      onChange={handleChange}\r\n                      canEditInputs={canEditInputs}\r\n                      isCreating={isCreating}\r\n                      values={values}\r\n                      apiToken={apiToken}\r\n                      onDispatch={dispatch}\r\n                      setHasChangedPermissions={setHasChangedPermissions}\r\n                    />\r\n                    <Permissions\r\n                      disabled={\r\n                        !canEditInputs ||\r\n                        values?.type === 'read-only' ||\r\n                        values?.type === 'full-access'\r\n                      }\r\n                    />\r\n                  </Flex>\r\n                </Layouts.Content>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Page.Main>\r\n    </ApiTokenPermissionsProvider>\r\n  );\r\n};\r\n\r\nexport const ProtectedEditView = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['api-tokens'].read\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditView />\r\n    </Page.Protect>\r\n  );\r\n};\r\n"],"names":["adminApi","createContext","jsx","useIntl","Box","Flex","Typography","jsxs","Grid","TokenName","TokenDescription","LifeSpanInput","TokenTypeSelect","styled","tail","css","Accordion","capitalize","Checkbox","Cog","yup","translatedErrors","produce","pull","useNotification","useLocation","useTypedSelector","state","React","useTracking","useGuidedTour","useRBAC","useMatch","useAPIErrorHandler","useNavigate","API_TOKEN_TYPE","useGetAPITokenQuery","useCreateAPITokenMutation","useUpdateAPITokenMutation","isBaseQueryError","Page","Formik","Form","FormHead","Layouts","TokenBox"],"mappings":"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"}