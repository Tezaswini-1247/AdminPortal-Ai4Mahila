{"version":3,"file":"transferTokens-DRhm3E2K.mjs","sources":["../../admin/src/services/transferTokens.ts"],"sourcesContent":["import * as TransferTokens from '../../../shared/contracts/transfer';\r\n\r\nimport { adminApi } from './api';\r\n\r\nconst transferTokenService = adminApi\r\n  .enhanceEndpoints({\r\n    addTagTypes: ['TransferToken'],\r\n  })\r\n  .injectEndpoints({\r\n    endpoints: (builder) => ({\r\n      regenerateToken: builder.mutation<TransferTokens.TokenRegenerate.Response['data'], string>({\r\n        query: (url) => ({\r\n          method: 'POST',\r\n          url: `${url}/regenerate`,\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenRegenerate.Response) => response.data,\r\n      }),\r\n      getTransferTokens: builder.query<TransferTokens.TokenList.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/transfer/tokens',\r\n          method: 'GET',\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenList.Response) => response.data,\r\n        providesTags: (res, _err) => [\r\n          ...(res?.map(({ id }) => ({ type: 'TransferToken' as const, id })) ?? []),\r\n          { type: 'TransferToken' as const, id: 'LIST' },\r\n        ],\r\n      }),\r\n      getTransferToken: builder.query<\r\n        TransferTokens.TokenGetById.Response['data'],\r\n        TransferTokens.TokenGetById.Params['id']\r\n      >({\r\n        query: (id) => `/admin/transfer/tokens/${id}`,\r\n        transformResponse: (response: TransferTokens.TokenGetById.Response) => response.data,\r\n        providesTags: (res, _err, id) => [{ type: 'TransferToken' as const, id }],\r\n      }),\r\n      createTransferToken: builder.mutation<\r\n        TransferTokens.TokenCreate.Response['data'],\r\n        TransferTokens.TokenCreate.Request['body']\r\n      >({\r\n        query: (body) => ({\r\n          url: '/admin/transfer/tokens',\r\n          method: 'POST',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenCreate.Response) => response.data,\r\n        invalidatesTags: [{ type: 'TransferToken' as const, id: 'LIST' }],\r\n      }),\r\n      deleteTransferToken: builder.mutation<\r\n        TransferTokens.TokenRevoke.Response['data'],\r\n        TransferTokens.TokenRevoke.Params['id']\r\n      >({\r\n        query: (id) => ({\r\n          url: `/admin/transfer/tokens/${id}`,\r\n          method: 'DELETE',\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenRevoke.Response) => response.data,\r\n        invalidatesTags: (_res, _err, id) => [{ type: 'TransferToken' as const, id }],\r\n      }),\r\n      updateTransferToken: builder.mutation<\r\n        TransferTokens.TokenUpdate.Response['data'],\r\n        TransferTokens.TokenUpdate.Params & TransferTokens.TokenUpdate.Request['body']\r\n      >({\r\n        query: ({ id, ...body }) => ({\r\n          url: `/admin/transfer/tokens/${id}`,\r\n          method: 'PUT',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenUpdate.Response) => response.data,\r\n        invalidatesTags: (_res, _err, { id }) => [{ type: 'TransferToken' as const, id }],\r\n      }),\r\n    }),\r\n    overrideExisting: false,\r\n  });\r\n\r\nconst {\r\n  useGetTransferTokensQuery,\r\n  useGetTransferTokenQuery,\r\n  useCreateTransferTokenMutation,\r\n  useDeleteTransferTokenMutation,\r\n  useUpdateTransferTokenMutation,\r\n  useRegenerateTokenMutation,\r\n} = transferTokenService;\r\n\r\nexport {\r\n  useGetTransferTokensQuery,\r\n  useGetTransferTokenQuery,\r\n  useCreateTransferTokenMutation,\r\n  useDeleteTransferTokenMutation,\r\n  useUpdateTransferTokenMutation,\r\n  useRegenerateTokenMutation,\r\n};\r\n"],"names":[],"mappings":"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"}