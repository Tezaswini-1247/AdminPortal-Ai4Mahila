{"version":3,"file":"Permissions-CFMbSqfB.js","sources":["../../admin/src/pages/Settings/pages/Roles/hooks/usePermissionsDataManager.ts","../../admin/src/pages/Settings/pages/Roles/utils/difference.ts","../../admin/src/utils/arrays.ts","../../admin/src/pages/Settings/pages/Roles/utils/createArrayOfValues.ts","../../admin/src/pages/Settings/pages/Roles/utils/permissions.ts","../../admin/src/pages/Settings/pages/Roles/utils/forms.ts","../../admin/src/pages/Settings/pages/Roles/utils/layouts.ts","../../admin/src/pages/Settings/pages/Roles/utils/updateConditionsToFalse.ts","../../admin/src/pages/Settings/pages/Roles/utils/updateValues.ts","../../admin/src/pages/Settings/pages/Roles/utils/constants.ts","../../admin/src/pages/Settings/pages/Roles/utils/removeConditionKeyFromData.ts","../../admin/src/pages/Settings/pages/Roles/utils/getCheckboxState.ts","../../admin/src/pages/Settings/pages/Roles/components/CollapseLabel.tsx","../../admin/src/pages/Settings/pages/Roles/components/HiddenAction.tsx","../../admin/src/pages/Settings/pages/Roles/components/RequiredSign.tsx","../../admin/src/pages/Settings/pages/Roles/components/RowLabelWithCheckbox.tsx","../../admin/src/pages/Settings/pages/Roles/components/CollapsePropertyMatrix.tsx","../../admin/src/pages/Settings/pages/Roles/components/ConditionsButton.tsx","../../admin/src/pages/Settings/pages/Roles/components/ConditionsModal.tsx","../../admin/src/pages/Settings/pages/Roles/components/ContentTypeCollapses.tsx","../../admin/src/pages/Settings/pages/Roles/components/GlobalActions.tsx","../../admin/src/pages/Settings/pages/Roles/components/ContentTypes.tsx","../../admin/src/pages/Settings/pages/Roles/components/PluginsAndSettings.tsx","../../admin/src/pages/Settings/pages/Roles/components/Permissions.tsx"],"sourcesContent":["import { createContext } from '@radix-ui/react-context';\r\n\r\nimport { Condition } from '../../../../../../../shared/contracts/permissions';\r\n\r\nimport type {\r\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\r\n  OnChangeCollectionTypeRowLeftCheckboxAction,\r\n  OnChangeConditionsAction,\r\n  State,\r\n} from '../components/Permissions';\r\n\r\n// Note: I had to guess most of these types based on the name and usage, but I actually don't\r\n// know if they are correct, because the usage is very generic. Feel free to correct them if\r\n// they create problems.\r\nexport interface PermissionsDataManagerContextValue extends Pick<State, 'modifiedData'> {\r\n  availableConditions: Condition[];\r\n  onChangeCollectionTypeLeftActionRowCheckbox: (\r\n    pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\r\n    propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\r\n    rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\r\n    value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\r\n  ) => void;\r\n  onChangeConditions: (conditions: OnChangeConditionsAction['conditions']) => void;\r\n  onChangeSimpleCheckbox: (event: { target: { name: string; value: boolean } }) => void;\r\n  onChangeParentCheckbox: (event: { target: { name: string; value: boolean } }) => void;\r\n  onChangeCollectionTypeGlobalActionCheckbox: (\r\n    collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\r\n    actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\r\n    value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\r\n  ) => void;\r\n}\r\n\r\nconst [PermissionsDataManagerProvider, usePermissionsDataManagerContext] =\r\n  createContext<PermissionsDataManagerContextValue>('PermissionsDataManager');\r\n\r\nexport const usePermissionsDataManager = () =>\r\n  usePermissionsDataManagerContext('usePermissionsDataManager');\r\n\r\nexport { PermissionsDataManagerProvider };\r\n","import isEqual from 'lodash/isEqual';\r\nimport isObject from 'lodash/isObject';\r\nimport transform from 'lodash/transform';\r\n\r\ntype ObjectDiff<T> = {\r\n  [P in keyof T]?: T[P] extends Record<string, unknown> ? ObjectDiff<T[P]> : T[P];\r\n};\r\n\r\nfunction difference<T extends Record<string, unknown>>(object: T, base: T): ObjectDiff<T> {\r\n  function changes(object: T, base: T): ObjectDiff<T> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return transform(object, (result, value: any, key: keyof ObjectDiff<T>) => {\r\n      if (!isEqual(value, base[key])) {\r\n        result[key] =\r\n          isObject(value) && isObject(base[key]) ? changes(value as T, base[key] as T) : value;\r\n      }\r\n      return result;\r\n    });\r\n  }\r\n\r\n  return changes(object, base);\r\n}\r\n\r\nexport { difference };\r\n","/**\r\n * @internal\r\n * @description Mutates a value to be a union of flat values, no arrays allowed.\r\n */\r\ntype Flat<T> = T extends string ? T : T extends ArrayLike<any> ? never : T;\r\n\r\n/**\r\n * @internal\r\n */\r\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\r\n/**\r\n * @internal\r\n */\r\ninterface ArrayOfRecursiveArraysOrValues<T> extends ArrayLike<T | RecursiveArray<T>> {}\r\n\r\n/**\r\n * @internal\r\n *\r\n * @description Flattens an array recursively.\r\n */\r\nconst flattenDeep = <T>(\r\n  array?: ArrayOfRecursiveArraysOrValues<T> | null | undefined\r\n): Array<Flat<T>> => {\r\n  if (Array.isArray(array)) {\r\n    return array.reduce(\r\n      (acc, value) => {\r\n        if (Array.isArray(value)) {\r\n          acc.push(...flattenDeep(value));\r\n        } else {\r\n          acc.push(value);\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      [] as Array<Flat<T>>\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport { flattenDeep };\r\nexport type { Flat, RecursiveArray, ArrayOfRecursiveArraysOrValues };\r\n","import { Flat, flattenDeep } from '../../../../../utils/arrays';\r\nimport { isObject } from '../../../../../utils/objects';\r\n\r\nconst createArrayOfValues = <TData>(obj: unknown): Array<Flat<TData>> => {\r\n  if (!isObject(obj)) {\r\n    return [];\r\n  }\r\n\r\n  return flattenDeep(\r\n    Object.values(obj).map((value) => {\r\n      if (isObject(value)) {\r\n        return createArrayOfValues(value);\r\n      }\r\n\r\n      return value;\r\n    })\r\n  );\r\n};\r\n\r\nexport { createArrayOfValues };\r\n","import { isObject } from '../../../../../utils/objects';\r\n\r\nimport { createArrayOfValues } from './createArrayOfValues';\r\n\r\nimport type { ConditionForm, Form, PropertyChildForm } from './forms';\r\nimport type { UpdatePermissions } from '../../../../../../../shared/contracts/roles';\r\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\r\nimport type { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\r\n\r\ntype PermissionApiBody = UpdatePermissions.Request['body']['permissions'];\r\n\r\n/**\r\n * @description Given a users permissions array we find the first one that matches a provided subject & action\r\n */\r\nconst findMatchingPermission = (\r\n  permissions: Permission[],\r\n  action: string,\r\n  subject: string | null\r\n) => permissions.find((perm) => perm.action === action && perm.subject === subject);\r\n\r\nconst formatPermissionsForAPI = (\r\n  modifiedData: PermissionsDataManagerContextValue['modifiedData']\r\n): PermissionApiBody => {\r\n  const pluginsPermissions = formatSettingsPermissions(modifiedData.plugins);\r\n  const settingsPermissions = formatSettingsPermissions(modifiedData.settings);\r\n  const collectionTypesPermissions = formatContentTypesPermissions(modifiedData.collectionTypes);\r\n  const singleTypesPermissions = formatContentTypesPermissions(modifiedData.singleTypes);\r\n\r\n  return [\r\n    ...pluginsPermissions,\r\n    ...settingsPermissions,\r\n    ...collectionTypesPermissions,\r\n    ...singleTypesPermissions,\r\n  ];\r\n};\r\n\r\nconst formatSettingsPermissions = (\r\n  settingsPermissionsObject:\r\n    | PermissionsDataManagerContextValue['modifiedData']['plugins']\r\n    | PermissionsDataManagerContextValue['modifiedData']['settings']\r\n): PermissionApiBody => {\r\n  return Object.values(settingsPermissionsObject).reduce<PermissionApiBody>((formAcc, form) => {\r\n    const currentCategoryPermissions = Object.values(form).reduce<PermissionApiBody>(\r\n      (childFormAcc, childForm) => {\r\n        const permissions = Object.entries(childForm).reduce<PermissionApiBody>(\r\n          (\r\n            responsesAcc,\r\n            [\r\n              actionName,\r\n              {\r\n                conditions,\r\n                properties: { enabled },\r\n              },\r\n            ]\r\n          ) => {\r\n            if (!enabled) {\r\n              return responsesAcc;\r\n            }\r\n\r\n            responsesAcc.push({\r\n              action: actionName,\r\n              subject: null,\r\n              conditions: createConditionsArray(conditions),\r\n              properties: {},\r\n            });\r\n\r\n            return responsesAcc;\r\n          },\r\n          []\r\n        );\r\n\r\n        return [...childFormAcc, ...permissions];\r\n      },\r\n      []\r\n    );\r\n\r\n    return [...formAcc, ...currentCategoryPermissions];\r\n  }, []);\r\n};\r\n\r\nconst formatContentTypesPermissions = (contentTypesPermissions: Form): PermissionApiBody => {\r\n  const permissions = Object.entries(contentTypesPermissions).reduce<PermissionApiBody>(\r\n    (allPermissions, current) => {\r\n      const [subject, currentSubjectActions] = current;\r\n\r\n      const permissions = Object.entries(currentSubjectActions).reduce<PermissionApiBody>(\r\n        (acc, current) => {\r\n          const [actionName, permissions] = current;\r\n          const shouldCreatePermission = createArrayOfValues(permissions).some((val) => val);\r\n\r\n          if (!shouldCreatePermission) {\r\n            return acc;\r\n          }\r\n\r\n          if (!permissions?.properties?.enabled) {\r\n            const createdPermissionsArray = Object.entries(permissions.properties).reduce<\r\n              PermissionApiBody[number]\r\n            >(\r\n              (acc, current) => {\r\n                const [propertyName, propertyValue] = current;\r\n\r\n                // @ts-expect-error – `propertyValue` can be boolean or an object, but we don't account for it...\r\n                acc.properties[propertyName] = createPropertyArray(propertyValue);\r\n\r\n                return acc;\r\n              },\r\n              {\r\n                action: actionName,\r\n                subject,\r\n                conditions: createConditionsArray(permissions.conditions),\r\n                properties: {},\r\n              }\r\n            );\r\n\r\n            return [...acc, createdPermissionsArray];\r\n          }\r\n\r\n          if (!permissions.properties.enabled) {\r\n            return acc;\r\n          }\r\n\r\n          acc.push({\r\n            action: actionName,\r\n            subject,\r\n            properties: {},\r\n            conditions: createConditionsArray(permissions.conditions),\r\n          });\r\n\r\n          return acc;\r\n        },\r\n        []\r\n      );\r\n\r\n      return [...allPermissions, ...permissions];\r\n    },\r\n    []\r\n  );\r\n\r\n  return permissions;\r\n};\r\n\r\nconst createPropertyArray = (propertyValue: PropertyChildForm, prefix = ''): string[] => {\r\n  return Object.entries(propertyValue).reduce<string[]>((acc, current) => {\r\n    const [name, value] = current;\r\n\r\n    if (isObject(value)) {\r\n      return [...acc, ...createPropertyArray(value, `${prefix}${name}.`)];\r\n    }\r\n\r\n    if (value && !isObject(value)) {\r\n      acc.push(`${prefix}${name}`);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n};\r\n\r\nconst createConditionsArray = (conditions: ConditionForm) =>\r\n  Object.entries(conditions)\r\n    .filter(([, conditionValue]) => {\r\n      return conditionValue;\r\n    })\r\n    .map(([conditionName]) => conditionName);\r\n\r\nexport { findMatchingPermission, formatPermissionsForAPI };\r\n","import isEmpty from 'lodash/isEmpty';\r\nimport merge from 'lodash/merge';\r\n\r\nimport { findMatchingPermission } from './permissions';\r\n\r\nimport type { GenericLayout } from './layouts';\r\nimport type {\r\n  Condition,\r\n  SettingPermission,\r\n  ContentPermission,\r\n  Subject,\r\n  SubjectProperty,\r\n} from '../../../../../../../shared/contracts/permissions';\r\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\r\n\r\ntype ConditionForm = Record<string, boolean>;\r\n\r\n/**\r\n * Creates the default condition form: { [conditionId]: false }\r\n */\r\nconst createDefaultConditionsForm = (\r\n  conditions: Condition[],\r\n  initialConditions: Permission['conditions'] = []\r\n): ConditionForm =>\r\n  conditions.reduce<ConditionForm>((acc, current) => {\r\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\r\n\r\n    return acc;\r\n  }, {});\r\n\r\ninterface SubCategoryForm {\r\n  properties: {\r\n    enabled: boolean;\r\n  };\r\n  conditions: ConditionForm;\r\n}\r\n\r\ntype ChildrenForm = Record<\r\n  string,\r\n  SubCategoryForm | (Omit<SubCategoryForm, 'properties'> & PropertyForm)\r\n>;\r\n\r\ntype Form = Record<string, ChildrenForm>;\r\n\r\nconst createDefaultForm = <TLayout extends Omit<SettingPermission, 'category'>>(\r\n  layout: GenericLayout<TLayout>[],\r\n  conditions: Condition[],\r\n  initialPermissions: Permission[] = []\r\n) => {\r\n  return layout.reduce<Record<string, Form>>((acc, { categoryId, childrenForm }) => {\r\n    const childrenDefaultForm = childrenForm.reduce<Form>((acc, current) => {\r\n      acc[current.subCategoryId] = current.actions.reduce<ChildrenForm>((acc, current) => {\r\n        const foundMatchingPermission = findMatchingPermission(\r\n          initialPermissions,\r\n          current.action,\r\n          null\r\n        );\r\n\r\n        acc[current.action] = {\r\n          properties: {\r\n            enabled: foundMatchingPermission !== undefined,\r\n          },\r\n          conditions: createDefaultConditionsForm(\r\n            conditions,\r\n            foundMatchingPermission?.conditions ?? []\r\n          ),\r\n        };\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    acc[categoryId] = childrenDefaultForm;\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\ninterface PropertyChildForm extends Record<string, boolean | PropertyChildForm> {}\r\n\r\ninterface PropertyForm {\r\n  properties: PropertyChildForm;\r\n}\r\n\r\n/**\r\n * Creates the default form for all the properties found in a content type's layout\r\n */\r\nconst createDefaultPropertiesForm = (\r\n  properties: string[],\r\n  subject: Subject,\r\n  matchingPermission?: Permission\r\n): PropertyForm => {\r\n  const recursivelyCreatePropertyForm = (\r\n    { children = [] }: SubjectProperty,\r\n    propertyValues: string[],\r\n    prefix = ''\r\n  ): PropertyChildForm => {\r\n    return children.reduce<PropertyChildForm>((acc, current) => {\r\n      if (current.children) {\r\n        return {\r\n          ...acc,\r\n          [current.value]: recursivelyCreatePropertyForm(\r\n            current,\r\n            propertyValues,\r\n            `${prefix}${current.value}.`\r\n          ),\r\n        };\r\n      }\r\n\r\n      const hasProperty = propertyValues.indexOf(`${prefix}${current.value}`) !== -1;\r\n\r\n      acc[current.value] = hasProperty;\r\n\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n  return properties.reduce<PropertyForm>(\r\n    (acc, currentPropertyName) => {\r\n      const foundProperty = subject.properties.find(({ value }) => value === currentPropertyName);\r\n\r\n      if (foundProperty) {\r\n        const matchingPermissionPropertyValues =\r\n          matchingPermission?.properties[foundProperty.value] ?? [];\r\n\r\n        const propertyForm = recursivelyCreatePropertyForm(\r\n          foundProperty,\r\n          matchingPermissionPropertyValues\r\n        );\r\n\r\n        acc.properties[currentPropertyName] = propertyForm;\r\n      }\r\n\r\n      return acc;\r\n    },\r\n    { properties: {} }\r\n  );\r\n};\r\n\r\n/**\r\n * Creates the default for for a content type\r\n */\r\nconst createDefaultCTForm = (\r\n  { subjects, actions = [] }: ContentPermission,\r\n  conditions: Condition[],\r\n  initialPermissions: Permission[] = []\r\n) => {\r\n  return actions.reduce<Form>((defaultForm, action) => {\r\n    type SubjectLayouts = Record<string, Subject>;\r\n\r\n    const subjectLayouts = action.subjects.reduce<SubjectLayouts>((acc, current) => {\r\n      const foundLayout = subjects.find(({ uid }) => uid === current) || null;\r\n\r\n      if (foundLayout) {\r\n        acc[current] = foundLayout;\r\n      }\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    // This can happen when an action is not related to a content type\r\n    // for instance the D&P permission is applied only with the cts that\r\n    // have the D&P features enabled\r\n    if (isEmpty(subjectLayouts)) {\r\n      return defaultForm;\r\n    }\r\n\r\n    // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\r\n    const contentTypesActions = Object.keys(subjectLayouts).reduce<Form>((acc, currentCTUID) => {\r\n      const { actionId, applyToProperties } = action;\r\n      const currentSubjectLayout = subjectLayouts[currentCTUID];\r\n      const properties = currentSubjectLayout.properties.map(({ value }) => value);\r\n      const doesNothaveProperty = properties.every(\r\n        (property) => (applyToProperties || []).indexOf(property) === -1\r\n      );\r\n\r\n      const matchingPermission = findMatchingPermission(initialPermissions, actionId, currentCTUID);\r\n      const conditionsForm = createDefaultConditionsForm(\r\n        conditions,\r\n        matchingPermission?.conditions ?? []\r\n      );\r\n\r\n      if (!acc[currentCTUID]) {\r\n        acc[currentCTUID] = {};\r\n      }\r\n\r\n      if (isEmpty(applyToProperties) || doesNothaveProperty) {\r\n        acc[currentCTUID][actionId] = {\r\n          properties: {\r\n            enabled: matchingPermission !== undefined,\r\n          },\r\n          conditions: conditionsForm,\r\n        };\r\n\r\n        return acc;\r\n      }\r\n\r\n      const propertiesForm = createDefaultPropertiesForm(\r\n        applyToProperties,\r\n        subjectLayouts[currentCTUID],\r\n        matchingPermission\r\n      );\r\n\r\n      acc[currentCTUID][actionId] = { ...propertiesForm, conditions: conditionsForm };\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return merge(defaultForm, contentTypesActions);\r\n  }, {});\r\n};\r\n\r\nexport { createDefaultConditionsForm, createDefaultForm, createDefaultCTForm };\r\nexport type { ConditionForm, Form, PropertyForm, SubCategoryForm, ChildrenForm, PropertyChildForm };\r\n","import groupBy from 'lodash/groupBy';\r\n\r\nimport { SettingPermission } from '../../../../../../../shared/contracts/permissions';\r\n\r\ninterface GenericLayout<TLayout> {\r\n  category: string;\r\n  categoryId: string;\r\n  childrenForm: Array<{\r\n    subCategoryName: string;\r\n    subCategoryId: string;\r\n    actions: TLayout[];\r\n  }>;\r\n}\r\n\r\nconst formatLayout = <TLayout extends Omit<SettingPermission, 'category'>>(\r\n  layout: TLayout[],\r\n  groupByKey: keyof TLayout\r\n): GenericLayout<TLayout>[] => {\r\n  return Object.entries(groupBy(layout, groupByKey)).map(([itemName, item]) => ({\r\n    category: itemName,\r\n    categoryId: itemName.split(' ').join('-'),\r\n    childrenForm: Object.entries(groupBy(item, 'subCategory')).map(\r\n      ([subCategoryName, actions]) => ({\r\n        subCategoryName,\r\n        subCategoryId: subCategoryName.split(' ').join('-'),\r\n        actions,\r\n      })\r\n    ),\r\n  }));\r\n};\r\n\r\nexport { formatLayout };\r\nexport type { GenericLayout };\r\n","import has from 'lodash/has';\r\nimport omit from 'lodash/omit';\r\n\r\nimport { isObject } from '../../../../../utils/objects';\r\n\r\nimport { createArrayOfValues } from './createArrayOfValues';\r\n/**\r\n * Changes all the conditions leaf when the properties are all falsy\r\n */\r\nconst updateConditionsToFalse = (obj: object): object => {\r\n  return Object.keys(obj).reduce((acc, current) => {\r\n    // @ts-expect-error – TODO: type better\r\n    const currentValue = obj[current];\r\n\r\n    if (isObject(currentValue) && !has(currentValue, 'conditions')) {\r\n      return { ...acc, [current]: updateConditionsToFalse(currentValue) };\r\n    }\r\n\r\n    if (isObject(currentValue) && has(currentValue, 'conditions')) {\r\n      const isActionEnabled = createArrayOfValues(omit(currentValue, 'conditions')).some(\r\n        (val) => val\r\n      );\r\n\r\n      if (!isActionEnabled) {\r\n        // @ts-expect-error – TODO: type better\r\n        const updatedConditions = Object.keys(currentValue.conditions).reduce((acc1, current) => {\r\n          // @ts-expect-error – TODO: type better\r\n          acc1[current] = false;\r\n\r\n          return acc1;\r\n        }, {});\r\n\r\n        return { ...acc, [current]: { ...currentValue, conditions: updatedConditions } };\r\n      }\r\n    }\r\n\r\n    // @ts-expect-error – TODO: type better\r\n    acc[current] = currentValue;\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport { updateConditionsToFalse };\r\n","import { isObject } from '../../../../../utils/objects';\r\n\r\n/**\r\n * Sets all the none object values of an object to the given one\r\n * It preserves the shape of the object, it only modifies the leafs\r\n * of an object.\r\n * This utility is very helpful when dealing with parent<>children checkboxes\r\n */\r\nconst updateValues = (obj: object, valueToSet: boolean, isFieldUpdate = false): object => {\r\n  return Object.keys(obj).reduce((acc, current) => {\r\n    const currentValue = obj[current as keyof object];\r\n\r\n    if (current === 'conditions' && !isFieldUpdate) {\r\n      // @ts-expect-error – TODO: type better\r\n      acc[current] = currentValue;\r\n\r\n      return acc;\r\n    }\r\n\r\n    if (isObject(currentValue)) {\r\n      return { ...acc, [current]: updateValues(currentValue, valueToSet, current === 'fields') };\r\n    }\r\n\r\n    // @ts-expect-error – TODO: type better\r\n    acc[current] = valueToSet;\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport { updateValues };\r\n","export const cellWidth = `12rem`;\r\nexport const firstRowWidth = `20rem`;\r\nexport const rowHeight = `5.3rem`;\r\n","type DataWithoutCondition<TData extends { conditions?: unknown }> = Omit<TData, 'conditions'>;\r\n\r\nconst removeConditionKeyFromData = <TData extends { conditions?: unknown }>(\r\n  obj?: TData\r\n): DataWithoutCondition<TData> | null => {\r\n  if (!obj) {\r\n    return null;\r\n  }\r\n\r\n  return Object.entries(obj).reduce((acc, [key, value]) => {\r\n    if (key !== 'conditions') {\r\n      // @ts-expect-error – TODO: fix this type error correctly.\r\n      acc[key] = value;\r\n    }\r\n\r\n    return acc;\r\n  }, {} as DataWithoutCondition<TData>);\r\n};\r\n\r\nexport { removeConditionKeyFromData };\r\nexport type { DataWithoutCondition };\r\n","import { createArrayOfValues } from './createArrayOfValues';\r\nimport { removeConditionKeyFromData } from './removeConditionKeyFromData';\r\n\r\ninterface RecursiveRecordOfBooleans extends Record<string, boolean | RecursiveRecordOfBooleans> {}\r\n\r\nconst getCheckboxState = (dataObj: RecursiveRecordOfBooleans) => {\r\n  const dataWithoutCondition = removeConditionKeyFromData(dataObj);\r\n\r\n  const arrayOfValues = createArrayOfValues(dataWithoutCondition);\r\n\r\n  if (!arrayOfValues.length) {\r\n    return { hasAllActionsSelected: false, hasSomeActionsSelected: false };\r\n  }\r\n\r\n  const hasAllActionsSelected = arrayOfValues.every((val) => val);\r\n  const hasSomeActionsSelected = arrayOfValues.some((val) => val) && !hasAllActionsSelected;\r\n\r\n  return { hasAllActionsSelected, hasSomeActionsSelected };\r\n};\r\n\r\nexport { getCheckboxState };\r\nexport type { RecursiveRecordOfBooleans };\r\n","import { Flex, FlexComponent } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst CollapseLabel = styled<FlexComponent>(Flex)<{ $isCollapsable: boolean }>`\r\n  padding-right: ${({ theme }) => theme.spaces[2]};\r\n  overflow: hidden;\r\n  flex: 1;\r\n  ${({ $isCollapsable }) => $isCollapsable && 'cursor: pointer;'}\r\n`;\r\n\r\nexport { CollapseLabel };\r\n","import { styled } from 'styled-components';\r\n\r\nimport { cellWidth } from '../utils/constants';\r\n\r\nconst HiddenAction = styled.div`\r\n  width: ${cellWidth};\r\n`;\r\n\r\nexport { HiddenAction };\r\n","import { Box } from '@strapi/design-system';\r\n\r\nconst RequiredSign = () => (\r\n  <Box color=\"danger700\" paddingLeft={1}>\r\n    *\r\n  </Box>\r\n);\r\n\r\nexport { RequiredSign };\r\n","import * as React from 'react';\r\n\r\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\r\nimport { firstRowWidth } from '../utils/constants';\r\n\r\nimport { CollapseLabel } from './CollapseLabel';\r\n\r\ninterface RowLabelWithCheckboxProps {\r\n  children: React.ReactNode;\r\n  checkboxName?: string;\r\n  isActive?: boolean;\r\n  isCollapsable?: boolean;\r\n  isFormDisabled?: boolean;\r\n  label: string;\r\n  onChange: PermissionsDataManagerContextValue['onChangeParentCheckbox'];\r\n  onClick: () => void;\r\n  someChecked?: boolean;\r\n  value: boolean;\r\n}\r\n\r\nconst RowLabelWithCheckbox = ({\r\n  checkboxName = '',\r\n  children,\r\n  isActive = false,\r\n  isCollapsable = false,\r\n  isFormDisabled = false,\r\n  label,\r\n  onChange,\r\n  onClick,\r\n  someChecked = false,\r\n  value,\r\n}: RowLabelWithCheckboxProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const collapseLabelProps = {\r\n    title: label,\r\n    alignItems: 'center',\r\n    $isCollapsable: isCollapsable,\r\n  };\r\n\r\n  if (isCollapsable) {\r\n    Object.assign(collapseLabelProps, {\r\n      onClick,\r\n      'aria-expanded': isActive,\r\n      onKeyDown({ key }: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (key === 'Enter' || key === ' ') {\r\n          onClick();\r\n        }\r\n      },\r\n      tabIndex: 0,\r\n      role: 'button',\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" paddingLeft={6} width={firstRowWidth} shrink={0}>\r\n      <Box paddingRight={2}>\r\n        <Checkbox\r\n          name={checkboxName}\r\n          aria-label={formatMessage(\r\n            {\r\n              id: `Settings.permissions.select-all-by-permission`,\r\n              defaultMessage: 'Select all {label} permissions',\r\n            },\r\n            { label }\r\n          )}\r\n          disabled={isFormDisabled}\r\n          // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\r\n          onCheckedChange={(value) =>\r\n            onChange({\r\n              target: {\r\n                name: checkboxName,\r\n                value: !!value,\r\n              },\r\n            })\r\n          }\r\n          checked={someChecked ? 'indeterminate' : value}\r\n        />\r\n      </Box>\r\n      <CollapseLabel {...collapseLabelProps}>\r\n        <Typography ellipsis>{label}</Typography>\r\n        {children}\r\n      </CollapseLabel>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { RowLabelWithCheckbox };\r\nexport type { RowLabelWithCheckboxProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Checkbox,\r\n  Box,\r\n  BoxComponent,\r\n  Flex,\r\n  FlexComponent,\r\n  Typography,\r\n  TypographyComponent,\r\n} from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, DefaultTheme, css } from 'styled-components';\r\n\r\nimport { Action, SubjectProperty } from '../../../../../../../shared/contracts/permissions';\r\nimport {\r\n  PermissionsDataManagerContextValue,\r\n  usePermissionsDataManager,\r\n} from '../hooks/usePermissionsDataManager';\r\nimport { cellWidth, firstRowWidth, rowHeight } from '../utils/constants';\r\nimport { getCheckboxState } from '../utils/getCheckboxState';\r\n\r\nimport { CollapseLabel } from './CollapseLabel';\r\nimport { HiddenAction } from './HiddenAction';\r\nimport { RequiredSign } from './RequiredSign';\r\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CollapsePropertyMatrix\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CollapsePropertyMatrixProps\r\n  extends Pick<\r\n    ActionRowProps,\r\n    'childrenForm' | 'isFormDisabled' | 'label' | 'pathToData' | 'propertyName'\r\n  > {\r\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\r\n}\r\n\r\ninterface PropertyAction {\r\n  label: string;\r\n  actionId: string;\r\n  isActionRelatedToCurrentProperty: boolean;\r\n}\r\n\r\nconst CollapsePropertyMatrix = ({\r\n  availableActions = [],\r\n  childrenForm = [],\r\n  isFormDisabled,\r\n  label,\r\n  pathToData,\r\n  propertyName,\r\n}: CollapsePropertyMatrixProps) => {\r\n  const propertyActions = React.useMemo(\r\n    () =>\r\n      availableActions.map((action) => {\r\n        const isActionRelatedToCurrentProperty =\r\n          Array.isArray(action.applyToProperties) &&\r\n          action.applyToProperties.indexOf(propertyName) !== -1 &&\r\n          action.isDisplayed;\r\n\r\n        return { label: action.label, actionId: action.actionId, isActionRelatedToCurrentProperty };\r\n      }) satisfies PropertyAction[],\r\n    [availableActions, propertyName]\r\n  );\r\n\r\n  return (\r\n    <Flex display=\"inline-flex\" direction=\"column\" alignItems=\"stretch\" minWidth={0}>\r\n      <Header label={label} headers={propertyActions} />\r\n      <Box>\r\n        {childrenForm.map(({ children: childrenForm, label, value, required }, i) => (\r\n          <ActionRow\r\n            childrenForm={childrenForm}\r\n            key={value}\r\n            label={label}\r\n            isFormDisabled={isFormDisabled}\r\n            name={value}\r\n            required={required}\r\n            propertyActions={propertyActions}\r\n            pathToData={pathToData}\r\n            propertyName={propertyName}\r\n            isOdd={i % 2 === 0}\r\n          />\r\n        ))}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ActionRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ActionRowProps\r\n  extends Pick<\r\n    SubActionRowProps,\r\n    'childrenForm' | 'isFormDisabled' | 'propertyActions' | 'propertyName'\r\n  > {\r\n  label: string;\r\n  name: string;\r\n  required?: boolean;\r\n  pathToData: string;\r\n  isOdd?: boolean;\r\n}\r\n\r\nconst ActionRow = ({\r\n  childrenForm = [],\r\n  label,\r\n  isFormDisabled = false,\r\n  name,\r\n  required = false,\r\n  pathToData,\r\n  propertyActions,\r\n  propertyName,\r\n  isOdd = false,\r\n}: ActionRowProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\r\n  const {\r\n    modifiedData,\r\n    onChangeCollectionTypeLeftActionRowCheckbox,\r\n    onChangeParentCheckbox,\r\n    onChangeSimpleCheckbox,\r\n  } = usePermissionsDataManager();\r\n\r\n  const isActive = rowToOpen === name;\r\n\r\n  const recursiveChildren = React.useMemo(() => {\r\n    if (!Array.isArray(childrenForm)) {\r\n      return [];\r\n    }\r\n\r\n    return childrenForm;\r\n  }, [childrenForm]);\r\n\r\n  const isCollapsable = recursiveChildren.length > 0;\r\n\r\n  const handleClick = React.useCallback(() => {\r\n    if (isCollapsable) {\r\n      setRowToOpen((prev) => {\r\n        if (prev === name) {\r\n          return null;\r\n        }\r\n\r\n        return name;\r\n      });\r\n    }\r\n  }, [isCollapsable, name]);\r\n\r\n  const handleChangeLeftRowCheckbox: RowLabelWithCheckboxProps['onChange'] = ({\r\n    target: { value },\r\n  }) => {\r\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\r\n  };\r\n\r\n  const { hasAllActionsSelected, hasSomeActionsSelected } = React.useMemo(() => {\r\n    return getRowLabelCheckboxState(propertyActions, modifiedData, pathToData, propertyName, name);\r\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\r\n\r\n  return (\r\n    <>\r\n      <Wrapper\r\n        alignItems=\"center\"\r\n        $isCollapsable={isCollapsable}\r\n        $isActive={isActive}\r\n        background={isOdd ? 'neutral100' : 'neutral0'}\r\n      >\r\n        <Flex>\r\n          <RowLabelWithCheckbox\r\n            onChange={handleChangeLeftRowCheckbox}\r\n            onClick={handleClick}\r\n            isCollapsable={isCollapsable}\r\n            isFormDisabled={isFormDisabled}\r\n            label={label}\r\n            someChecked={hasSomeActionsSelected}\r\n            value={hasAllActionsSelected}\r\n            isActive={isActive}\r\n          >\r\n            {required && <RequiredSign />}\r\n            <CarretIcon $isActive={isActive} />\r\n          </RowLabelWithCheckbox>\r\n          <Flex>\r\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\r\n              if (!isActionRelatedToCurrentProperty) {\r\n                return <HiddenAction key={label} />;\r\n              }\r\n\r\n              const checkboxName = [\r\n                ...pathToData.split('..'),\r\n                actionId,\r\n                'properties',\r\n                propertyName,\r\n                name,\r\n              ];\r\n\r\n              if (!isCollapsable) {\r\n                const checkboxValue = get(modifiedData, checkboxName, false);\r\n\r\n                return (\r\n                  <Flex\r\n                    key={actionId}\r\n                    width={cellWidth}\r\n                    position=\"relative\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Checkbox\r\n                      disabled={isFormDisabled}\r\n                      name={checkboxName.join('..')}\r\n                      aria-label={formatMessage(\r\n                        {\r\n                          id: `Settings.permissions.select-by-permission`,\r\n                          defaultMessage: 'Select {label} permission',\r\n                        },\r\n                        { label: `${name} ${label}` }\r\n                      )}\r\n                      onCheckedChange={(value) => {\r\n                        onChangeSimpleCheckbox({\r\n                          target: {\r\n                            name: checkboxName.join('..'),\r\n                            value: !!value,\r\n                          },\r\n                        });\r\n                      }}\r\n                      checked={checkboxValue}\r\n                    />\r\n                  </Flex>\r\n                );\r\n              }\r\n\r\n              const data = get(modifiedData, checkboxName, {});\r\n\r\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\r\n\r\n              return (\r\n                <Flex\r\n                  key={label}\r\n                  width={cellWidth}\r\n                  position=\"relative\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Checkbox\r\n                    disabled={isFormDisabled}\r\n                    name={checkboxName.join('..')}\r\n                    onCheckedChange={(value) => {\r\n                      onChangeParentCheckbox({\r\n                        target: {\r\n                          name: checkboxName.join('..'),\r\n                          value: !!value,\r\n                        },\r\n                      });\r\n                    }}\r\n                    aria-label={formatMessage(\r\n                      {\r\n                        id: `Settings.permissions.select-by-permission`,\r\n                        defaultMessage: 'Select {label} permission',\r\n                      },\r\n                      { label: `${name} ${label}` }\r\n                    )}\r\n                    checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\r\n                  />\r\n                </Flex>\r\n              );\r\n            })}\r\n          </Flex>\r\n        </Flex>\r\n      </Wrapper>\r\n      {isActive && (\r\n        <SubActionRow\r\n          childrenForm={recursiveChildren}\r\n          isFormDisabled={isFormDisabled}\r\n          parentName={name}\r\n          pathToDataFromActionRow={pathToData}\r\n          propertyName={propertyName}\r\n          propertyActions={propertyActions}\r\n          recursiveLevel={0}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * Returns the state of the left checkbox of a ActionRow main checkbox\r\n */\r\nconst getRowLabelCheckboxState = (\r\n  propertyActions: PropertyAction[],\r\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\r\n  pathToContentType: string,\r\n  propertyToCheck: string,\r\n  targetKey: string\r\n) => {\r\n  const actionIds = propertyActions.reduce<string[]>((acc, current) => {\r\n    if (current.isActionRelatedToCurrentProperty) {\r\n      acc.push(current.actionId);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  const data = actionIds.reduce<Record<string, boolean>>((acc, current) => {\r\n    const mainData = get(\r\n      modifiedData,\r\n      [...pathToContentType.split('..'), current, 'properties', propertyToCheck, targetKey],\r\n      false\r\n    );\r\n\r\n    acc[current] = mainData;\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  return getCheckboxState(data);\r\n};\r\n\r\nconst Wrapper = styled<FlexComponent>(Flex)<{ $isCollapsable?: boolean; $isActive?: boolean }>`\r\n  height: ${rowHeight};\r\n  flex: 1;\r\n\r\n  &:hover {\r\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\r\n  }\r\n\r\n  ${({ $isCollapsable }) =>\r\n    $isCollapsable &&\r\n    `\r\n      ${CarretIcon} {\r\n        display: flex;\r\n      }\r\n  `}\r\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\r\n`;\r\n\r\nconst CarretIcon = styled(CaretDown)<{ $isActive: boolean }>`\r\n  display: none;\r\n\r\n  svg {\r\n    width: 1.4rem;\r\n  }\r\n\r\n  path {\r\n    fill: ${({ theme }) => theme.colors.neutral200};\r\n  }\r\n\r\n  transform: rotate(${({ $isActive }) => ($isActive ? '180' : '0')}deg);\r\n  margin-left: ${({ theme }) => theme.spaces[2]};\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SubActionRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface SubActionRowProps {\r\n  childrenForm: SubjectProperty['children'];\r\n  isFormDisabled?: boolean;\r\n  parentName: string;\r\n  pathToDataFromActionRow: string;\r\n  propertyActions: PropertyAction[];\r\n  propertyName: string;\r\n  recursiveLevel: number;\r\n}\r\n\r\nconst SubActionRow = ({\r\n  childrenForm = [],\r\n  isFormDisabled,\r\n  recursiveLevel,\r\n  pathToDataFromActionRow,\r\n  propertyActions,\r\n  parentName,\r\n  propertyName,\r\n}: SubActionRowProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\r\n    usePermissionsDataManager();\r\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\r\n\r\n  const handleClickToggleSubLevel = (name: string) => {\r\n    setRowToOpen((prev) => {\r\n      if (prev === name) {\r\n        return null;\r\n      }\r\n\r\n      return name;\r\n    });\r\n  };\r\n\r\n  const displayedRecursiveChildren = React.useMemo(() => {\r\n    if (!rowToOpen) {\r\n      return null;\r\n    }\r\n\r\n    return childrenForm.find(({ value }) => value === rowToOpen);\r\n  }, [rowToOpen, childrenForm]);\r\n\r\n  return (\r\n    <Box paddingLeft={`3.2rem`}>\r\n      <TopTimeline />\r\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\r\n        const isVisible = index + 1 < childrenForm.length;\r\n        const isArrayType = Array.isArray(subChildrenForm);\r\n        const isActive = rowToOpen === value;\r\n\r\n        return (\r\n          <LeftBorderTimeline key={value} $isVisible={isVisible}>\r\n            <Flex height={rowHeight}>\r\n              <StyledBox>\r\n                <Svg\r\n                  width=\"20\"\r\n                  height=\"23\"\r\n                  viewBox=\"0 0 20 23\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  $color=\"primary200\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    clipRule=\"evenodd\"\r\n                    d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\r\n                    fill=\"#D9D8FF\"\r\n                  />\r\n                </Svg>\r\n              </StyledBox>\r\n              <Flex style={{ flex: 1 }}>\r\n                <RowStyle $level={recursiveLevel} $isActive={isActive} $isCollapsable={isArrayType}>\r\n                  <CollapseLabel\r\n                    alignItems=\"center\"\r\n                    $isCollapsable={isArrayType}\r\n                    {...(isArrayType && {\r\n                      onClick: () => handleClickToggleSubLevel(value),\r\n                      'aria-expanded': isActive,\r\n                      onKeyDown: ({ key }: React.KeyboardEvent<HTMLDivElement>) =>\r\n                        (key === 'Enter' || key === ' ') && handleClickToggleSubLevel(value),\r\n                      tabIndex: 0,\r\n                      role: 'button',\r\n                    })}\r\n                    title={label}\r\n                  >\r\n                    <RowLabel ellipsis>{label}</RowLabel>\r\n                    {required && <RequiredSign />}\r\n                    <CarretIcon $isActive={isActive} />\r\n                  </CollapseLabel>\r\n                </RowStyle>\r\n                <Flex style={{ flex: 1 }}>\r\n                  {propertyActions.map(\r\n                    ({ actionId, label: propertyLabel, isActionRelatedToCurrentProperty }) => {\r\n                      if (!isActionRelatedToCurrentProperty) {\r\n                        return <HiddenAction key={actionId} />;\r\n                      }\r\n                      /*\r\n                       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\r\n                       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\r\n                       */\r\n                      const checkboxName = [\r\n                        ...pathToDataFromActionRow.split('..'),\r\n                        actionId,\r\n                        'properties',\r\n                        propertyName,\r\n                        ...parentName.split('..'),\r\n                        value,\r\n                      ];\r\n\r\n                      const checkboxValue = get(modifiedData, checkboxName, false);\r\n\r\n                      if (!subChildrenForm) {\r\n                        return (\r\n                          <Flex\r\n                            key={propertyLabel}\r\n                            position=\"relative\"\r\n                            width={cellWidth}\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Checkbox\r\n                              disabled={isFormDisabled}\r\n                              name={checkboxName.join('..')}\r\n                              aria-label={formatMessage(\r\n                                {\r\n                                  id: `Settings.permissions.select-by-permission`,\r\n                                  defaultMessage: 'Select {label} permission',\r\n                                },\r\n                                { label: `${parentName} ${label} ${propertyLabel}` }\r\n                              )}\r\n                              onCheckedChange={(value) => {\r\n                                onChangeSimpleCheckbox({\r\n                                  target: {\r\n                                    name: checkboxName.join('..'),\r\n                                    value: !!value,\r\n                                  },\r\n                                });\r\n                              }}\r\n                              checked={checkboxValue}\r\n                            />\r\n                          </Flex>\r\n                        );\r\n                      }\r\n\r\n                      const { hasAllActionsSelected, hasSomeActionsSelected } =\r\n                        getCheckboxState(checkboxValue);\r\n\r\n                      return (\r\n                        <Flex\r\n                          key={propertyLabel}\r\n                          position=\"relative\"\r\n                          width={cellWidth}\r\n                          justifyContent=\"center\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Checkbox\r\n                            key={propertyLabel}\r\n                            disabled={isFormDisabled}\r\n                            name={checkboxName.join('..')}\r\n                            aria-label={formatMessage(\r\n                              {\r\n                                id: `Settings.permissions.select-by-permission`,\r\n                                defaultMessage: 'Select {label} permission',\r\n                              },\r\n                              { label: `${parentName} ${label} ${propertyLabel}` }\r\n                            )}\r\n                            // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\r\n                            onCheckedChange={(value) => {\r\n                              onChangeParentCheckbox({\r\n                                target: {\r\n                                  name: checkboxName.join('..'),\r\n                                  value: !!value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            checked={\r\n                              hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected\r\n                            }\r\n                          />\r\n                        </Flex>\r\n                      );\r\n                    }\r\n                  )}\r\n                </Flex>\r\n              </Flex>\r\n            </Flex>\r\n            {displayedRecursiveChildren && isActive && (\r\n              <Box paddingBottom={2}>\r\n                <SubActionRow\r\n                  isFormDisabled={isFormDisabled}\r\n                  parentName={`${parentName}..${value}`}\r\n                  pathToDataFromActionRow={pathToDataFromActionRow}\r\n                  propertyActions={propertyActions}\r\n                  propertyName={propertyName}\r\n                  recursiveLevel={recursiveLevel + 1}\r\n                  childrenForm={displayedRecursiveChildren.children}\r\n                />\r\n              </Box>\r\n            )}\r\n          </LeftBorderTimeline>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst LeftBorderTimeline = styled<BoxComponent>(Box)<{ $isVisible?: boolean }>`\r\n  border-left: ${({ $isVisible, theme }) =>\r\n    $isVisible ? `4px solid ${theme.colors.primary200}` : '4px solid transparent'};\r\n`;\r\n\r\nconst RowStyle = styled<FlexComponent>(Flex)<{\r\n  $level: number;\r\n  $isCollapsable?: boolean;\r\n  $isActive?: boolean;\r\n}>`\r\n  padding-left: ${({ theme }) => theme.spaces[4]};\r\n  width: ${({ $level }) => 145 - $level * 36}px;\r\n\r\n  &:hover {\r\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\r\n  }\r\n\r\n  ${({ $isCollapsable }) =>\r\n    $isCollapsable &&\r\n    `\r\n      ${CarretIcon} {\r\n        display: flex;\r\n      }\r\n  `}\r\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\r\n`;\r\n\r\nconst RowLabel = styled<TypographyComponent>(Typography)``;\r\n\r\nconst TopTimeline = styled.div`\r\n  padding-top: ${({ theme }) => theme.spaces[2]};\r\n  margin-top: ${({ theme }) => theme.spaces[2]};\r\n  width: 0.4rem;\r\n  background-color: ${({ theme }) => theme.colors.primary200};\r\n  border-top-left-radius: 2px;\r\n  border-top-right-radius: 2px;\r\n`;\r\n\r\nconst StyledBox = styled<BoxComponent>(Box)`\r\n  transform: translate(-4px, -12px);\r\n\r\n  &:before {\r\n    content: '';\r\n    width: 0.4rem;\r\n    height: 1.2rem;\r\n    background: ${({ theme }) => theme.colors.primary200};\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Svg = styled.svg<{ $color: keyof DefaultTheme['colors'] }>`\r\n  position: relative;\r\n  flex-shrink: 0;\r\n  transform: translate(-0.5px, -1px);\r\n\r\n  * {\r\n    fill: ${({ theme, $color }) => theme.colors[$color]};\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Header\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderProps {\r\n  headers?: PropertyAction[];\r\n  label: string;\r\n}\r\n\r\nconst Header = ({ headers = [], label }: HeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Flex>\r\n      <Flex width={firstRowWidth} height={rowHeight} shrink={0} alignItems=\"center\" paddingLeft={6}>\r\n        <Typography variant=\"sigma\" textColor=\"neutral500\">\r\n          {formatMessage(\r\n            {\r\n              id: 'Settings.roles.form.permission.property-label',\r\n              defaultMessage: '{label} permissions',\r\n            },\r\n            { label }\r\n          )}\r\n        </Typography>\r\n      </Flex>\r\n      {headers.map((header) => {\r\n        if (!header.isActionRelatedToCurrentProperty) {\r\n          return <Flex width={cellWidth} shrink={0} key={header.label} />;\r\n        }\r\n\r\n        return (\r\n          <Flex width={cellWidth} shrink={0} justifyContent=\"center\" key={header.label}>\r\n            <Typography variant=\"sigma\" textColor=\"neutral500\">\r\n              {formatMessage({\r\n                id: `Settings.roles.form.permissions.${header.label.toLowerCase()}`,\r\n                defaultMessage: header.label,\r\n              })}\r\n            </Typography>\r\n          </Flex>\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst activeStyle = (theme: DefaultTheme) => css`\r\n  color: ${theme.colors.primary600};\r\n  font-weight: ${theme.fontWeights.bold};\r\n\r\n  ${CarretIcon} {\r\n    path {\r\n      fill: ${theme.colors.primary600};\r\n    }\r\n  }\r\n`;\r\n\r\nexport { CollapsePropertyMatrix };\r\n","import * as React from 'react';\r\n\r\nimport { Box, BoxComponent, Button, ButtonProps } from '@strapi/design-system';\r\nimport { Cog } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\ninterface ConditionsButtonProps extends Pick<ButtonProps, 'className' | 'onClick' | 'variant'> {\r\n  hasConditions?: boolean;\r\n}\r\n\r\nconst ConditionsButtonImpl = React.forwardRef<HTMLButtonElement, ConditionsButtonProps>(\r\n  ({ onClick, className, hasConditions = false, variant = 'tertiary' }, ref) => {\r\n    const { formatMessage } = useIntl();\r\n\r\n    return (\r\n      <ButtonContainer $hasConditions={hasConditions} className={className}>\r\n        <Button variant={variant} startIcon={<Cog />} onClick={onClick} ref={ref} type=\"button\">\r\n          {formatMessage({\r\n            id: 'global.settings',\r\n            defaultMessage: 'Settings',\r\n          })}\r\n        </Button>\r\n      </ButtonContainer>\r\n    );\r\n  }\r\n);\r\n\r\nconst ButtonContainer = styled<BoxComponent>(Box)<{ $hasConditions?: boolean }>`\r\n  ${({ $hasConditions, theme }) =>\r\n    $hasConditions &&\r\n    `\r\n    &:before {\r\n      content: '';\r\n      position: absolute;\r\n      top: -3px;\r\n      left: -10px;\r\n      width: 6px;\r\n      height: 6px;\r\n      border-radius: 2rem;\r\n      background: ${theme.colors.primary600};\r\n    }\r\n  `}\r\n`;\r\n\r\n/**\r\n * We reference the component directly in other styled-components\r\n * and as such we need it to have a className already assigned.\r\n * Therefore we wrapped the implementation in a styled function.\r\n */\r\nconst ConditionsButton = styled(ConditionsButtonImpl)``;\r\n\r\nexport { ConditionsButton };\r\nexport type { ConditionsButtonProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Modal,\r\n  MultiSelectNested,\r\n  MultiSelectNestedProps,\r\n  Typography,\r\n  Breadcrumbs,\r\n  Crumb,\r\n} from '@strapi/design-system';\r\nimport { produce } from 'immer';\r\nimport get from 'lodash/get';\r\nimport groupBy from 'lodash/groupBy';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { capitalise } from '../../../../../utils/strings';\r\nimport {\r\n  PermissionsDataManagerContextValue,\r\n  usePermissionsDataManager,\r\n} from '../hooks/usePermissionsDataManager';\r\n\r\nimport type { HiddenCheckboxAction, VisibleCheckboxAction } from './ContentTypeCollapses';\r\nimport type { ConditionForm } from '../utils/forms';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ConditionsModal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ConditionAction extends Pick<ActionRowProps, 'label'> {\r\n  actionId: string;\r\n  isDisplayed: boolean;\r\n  hasSomeActionsSelected?: boolean;\r\n  hasAllActionsSelected?: boolean;\r\n  pathToConditionsObject: string[];\r\n}\r\n\r\ninterface ConditionsModalProps extends Pick<ActionRowProps, 'isFormDisabled'> {\r\n  actions?: Array<ConditionAction | HiddenCheckboxAction | VisibleCheckboxAction>;\r\n  headerBreadCrumbs?: string[];\r\n  onClose?: () => void;\r\n}\r\n\r\nconst ConditionsModal = ({\r\n  actions = [],\r\n  headerBreadCrumbs = [],\r\n  isFormDisabled,\r\n  onClose,\r\n}: ConditionsModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { availableConditions, modifiedData, onChangeConditions } = usePermissionsDataManager();\r\n\r\n  const arrayOfOptionsGroupedByCategory = React.useMemo(() => {\r\n    return Object.entries(groupBy(availableConditions, 'category'));\r\n  }, [availableConditions]);\r\n\r\n  const actionsToDisplay = actions.filter<VisibleCheckboxAction | ConditionAction>(\r\n    // @ts-expect-error – TODO: fix this type issue\r\n    ({ isDisplayed, hasSomeActionsSelected, hasAllActionsSelected }) =>\r\n      isDisplayed && Boolean(hasSomeActionsSelected || hasAllActionsSelected)\r\n  );\r\n\r\n  const [state, setState] = React.useState(\r\n    createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\r\n  );\r\n\r\n  const handleChange = (name: string, values: ConditionForm) => {\r\n    setState(\r\n      produce((draft) => {\r\n        if (!draft[name]) {\r\n          draft[name] = {};\r\n        }\r\n\r\n        if (!draft[name].default) {\r\n          draft[name].default = {};\r\n        }\r\n\r\n        draft[name].default = values;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const conditionsWithoutCategory = Object.entries(state).reduce<Record<string, ConditionForm>>(\r\n      (acc, current) => {\r\n        const [key, value] = current;\r\n\r\n        const merged = Object.values(value).reduce((acc1, current1) => {\r\n          return { ...acc1, ...current1 };\r\n        }, {});\r\n\r\n        acc[key] = merged;\r\n\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    onChangeConditions(conditionsWithoutCategory);\r\n    onClose && onClose();\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setState(\r\n      createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\r\n    );\r\n\r\n    onClose && onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal.Content>\r\n      <Modal.Header>\r\n        <Breadcrumbs id=\"condition-modal-breadcrumbs\" label={headerBreadCrumbs.join(', ')}>\r\n          {headerBreadCrumbs.map((label, index, arr) => (\r\n            <Crumb isCurrent={index === arr.length - 1} key={label}>\r\n              {upperFirst(\r\n                formatMessage({\r\n                  id: label,\r\n                  defaultMessage: label,\r\n                })\r\n              )}\r\n            </Crumb>\r\n          ))}\r\n        </Breadcrumbs>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {actionsToDisplay.length === 0 && (\r\n          <Typography>\r\n            {formatMessage({\r\n              id: 'Settings.permissions.conditions.no-actions',\r\n              defaultMessage:\r\n                'You first need to select actions (create, read, update, ...) before defining conditions on them.',\r\n            })}\r\n          </Typography>\r\n        )}\r\n        <ul>\r\n          {actionsToDisplay.map(({ actionId, label, pathToConditionsObject }, index) => {\r\n            const name = pathToConditionsObject.join('..');\r\n\r\n            return (\r\n              <ActionRow\r\n                key={actionId}\r\n                arrayOfOptionsGroupedByCategory={arrayOfOptionsGroupedByCategory}\r\n                label={label}\r\n                isFormDisabled={isFormDisabled}\r\n                isGrey={index % 2 === 0}\r\n                name={name}\r\n                onChange={handleChange}\r\n                value={get(state, name, {})}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"tertiary\" onClick={() => onCloseModal()}>\r\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n        </Button>\r\n        <Button onClick={handleSubmit}>\r\n          {formatMessage({\r\n            id: 'Settings.permissions.conditions.apply',\r\n            defaultMessage: 'Apply',\r\n          })}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\nconst createDefaultConditionsForm = (\r\n  actionsToDisplay: Array<ConditionAction | VisibleCheckboxAction>,\r\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\r\n  arrayOfOptionsGroupedByCategory: ActionRowProps['arrayOfOptionsGroupedByCategory']\r\n) => {\r\n  return actionsToDisplay.reduce<Record<string, Record<string, ConditionForm>>>((acc, current) => {\r\n    const valueFromModifiedData: ConditionForm = get(\r\n      modifiedData,\r\n      [...current.pathToConditionsObject, 'conditions'],\r\n      {}\r\n    );\r\n\r\n    const categoryDefaultForm = arrayOfOptionsGroupedByCategory.reduce<\r\n      Record<string, ConditionForm>\r\n    >((acc, current) => {\r\n      const [categoryName, relatedConditions] = current;\r\n\r\n      const conditionsForm = relatedConditions.reduce<ConditionForm>((acc, current) => {\r\n        acc[current.id] = get(valueFromModifiedData, current.id, false);\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      acc[categoryName] = conditionsForm;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    acc[current.pathToConditionsObject.join('..')] = categoryDefaultForm;\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ActionRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ActionRowProps {\r\n  arrayOfOptionsGroupedByCategory: Array<\r\n    [string, PermissionsDataManagerContextValue['availableConditions']]\r\n  >;\r\n  isFormDisabled?: boolean;\r\n  isGrey?: boolean;\r\n  label: string;\r\n  name: string;\r\n  onChange?: (name: string, values: Record<string, boolean>) => void;\r\n  value: Record<string, ConditionForm>;\r\n}\r\n\r\nconst ActionRow = ({\r\n  arrayOfOptionsGroupedByCategory,\r\n  isFormDisabled = false,\r\n  isGrey = false,\r\n  label,\r\n  name,\r\n  onChange,\r\n  value,\r\n}: ActionRowProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleChange: MultiSelectNestedProps['onChange'] = (val) => {\r\n    if (onChange) {\r\n      onChange(name, getNewStateFromChangedValues(arrayOfOptionsGroupedByCategory, val));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      tag=\"li\"\r\n      background={isGrey ? 'neutral100' : 'neutral0'}\r\n      paddingBottom={3}\r\n      paddingTop={3}\r\n      justifyContent={'space-evenly'}\r\n    >\r\n      <Flex style={{ width: 180 }}>\r\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n          {formatMessage({\r\n            id: 'Settings.permissions.conditions.can',\r\n            defaultMessage: 'Can',\r\n          })}\r\n          &nbsp;\r\n        </Typography>\r\n        <Typography variant=\"sigma\" title={label} textColor=\"primary600\" ellipsis>\r\n          {formatMessage({\r\n            id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\r\n            defaultMessage: label,\r\n          })}\r\n        </Typography>\r\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n          &nbsp;\r\n          {formatMessage({\r\n            id: 'Settings.permissions.conditions.when',\r\n            defaultMessage: 'When',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n      <Box style={{ maxWidth: 430, width: '100%' }}>\r\n        <MultiSelectNested\r\n          id={name}\r\n          customizeContent={(values = []) => `${values.length} currently selected`}\r\n          onChange={handleChange}\r\n          value={getSelectedValues(value)}\r\n          options={getNestedOptions(arrayOfOptionsGroupedByCategory)}\r\n          disabled={isFormDisabled}\r\n        />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst getSelectedValues = (rawValue: Record<string, ConditionForm>): string[] =>\r\n  Object.values(rawValue)\r\n    .map((x) =>\r\n      Object.entries(x)\r\n        .filter(([, value]) => value)\r\n        .map(([key]) => key)\r\n    )\r\n    .flat();\r\n\r\nconst getNestedOptions = (options: ActionRowProps['arrayOfOptionsGroupedByCategory']) =>\r\n  options.reduce<MultiSelectNestedProps['options']>((acc, [label, children]) => {\r\n    acc.push({\r\n      label: capitalise(label),\r\n      children: children.map((child) => ({\r\n        label: child.displayName,\r\n        value: child.id,\r\n      })),\r\n    });\r\n\r\n    return acc;\r\n  }, []);\r\n\r\nconst getNewStateFromChangedValues = (\r\n  options: ActionRowProps['arrayOfOptionsGroupedByCategory'],\r\n  changedValues: string[]\r\n) =>\r\n  options\r\n    .map(([, values]) => values)\r\n    .flat()\r\n    .reduce<Record<string, boolean>>(\r\n      (acc, curr) => ({ [curr.id]: changedValues.includes(curr.id), ...acc }),\r\n      {}\r\n    );\r\n\r\nexport { ConditionsModal };\r\nexport type { ConditionsModalProps };\r\n","import * as React from 'react';\r\n\r\nimport { Checkbox, Box, BoxComponent, Flex, FlexComponent, Modal } from '@strapi/design-system';\r\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport omit from 'lodash/omit';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, DefaultTheme } from 'styled-components';\r\n\r\nimport { Action, Subject } from '../../../../../../../shared/contracts/permissions';\r\nimport { capitalise } from '../../../../../utils/strings';\r\nimport {\r\n  PermissionsDataManagerContextValue,\r\n  usePermissionsDataManager,\r\n} from '../hooks/usePermissionsDataManager';\r\nimport { cellWidth, rowHeight } from '../utils/constants';\r\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\r\nimport { ConditionForm } from '../utils/forms';\r\nimport { getCheckboxState } from '../utils/getCheckboxState';\r\n\r\nimport { CollapsePropertyMatrix } from './CollapsePropertyMatrix';\r\nimport { ConditionsButton } from './ConditionsButton';\r\nimport { ConditionsModal } from './ConditionsModal';\r\nimport { HiddenAction } from './HiddenAction';\r\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ContentTypeCollapses\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ContentTypeCollapsesProps extends Pick<CollapseProps, 'pathToData'> {\r\n  actions?: Action[];\r\n  isFormDisabled?: boolean;\r\n  subjects?: Subject[];\r\n}\r\n\r\nconst ContentTypeCollapses = ({\r\n  actions = [],\r\n  isFormDisabled,\r\n  pathToData,\r\n  subjects = [],\r\n}: ContentTypeCollapsesProps) => {\r\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string | null>(null);\r\n\r\n  const handleClickToggleCollapse = (collapseName: string) => () => {\r\n    const nextCollapseToOpen = collapseToOpen === collapseName ? null : collapseName;\r\n\r\n    setCollapseToOpen(nextCollapseToOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {subjects.map(({ uid, label, properties }, index) => {\r\n        const isActive = collapseToOpen === uid;\r\n        const availableActions = actions.map((action) => ({\r\n          ...action,\r\n          isDisplayed: Array.isArray(action.subjects) && action.subjects.indexOf(uid) !== -1,\r\n        }));\r\n        return (\r\n          <Flex\r\n            key={uid}\r\n            direction=\"column\"\r\n            display=\"inline-flex\"\r\n            alignItems=\"stretch\"\r\n            minWidth=\"100%\"\r\n            borderColor={isActive ? 'primary600' : undefined}\r\n          >\r\n            <Collapse\r\n              availableActions={availableActions}\r\n              isActive={isActive}\r\n              isGrey={index % 2 === 0}\r\n              isFormDisabled={isFormDisabled}\r\n              label={label}\r\n              onClickToggle={handleClickToggleCollapse(uid)}\r\n              pathToData={[pathToData, uid].join('..')}\r\n            />\r\n            {isActive &&\r\n              properties.map(({ label: propertyLabel, value, children: childrenForm }) => {\r\n                return (\r\n                  <CollapsePropertyMatrix\r\n                    availableActions={availableActions}\r\n                    childrenForm={childrenForm}\r\n                    isFormDisabled={isFormDisabled}\r\n                    label={propertyLabel}\r\n                    pathToData={[pathToData, uid].join('..')}\r\n                    propertyName={value}\r\n                    key={value}\r\n                  />\r\n                );\r\n              })}\r\n          </Flex>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Collapse\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CollapseProps\r\n  extends Pick<RowLabelWithCheckboxProps, 'isActive' | 'isFormDisabled' | 'label'> {\r\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\r\n  isGrey?: boolean;\r\n  onClickToggle: RowLabelWithCheckboxProps['onClick'];\r\n  pathToData: string;\r\n}\r\n\r\nconst Collapse = ({\r\n  availableActions = [],\r\n  isActive = false,\r\n  isGrey = false,\r\n  isFormDisabled = false,\r\n  label,\r\n  onClickToggle,\r\n  pathToData,\r\n}: CollapseProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\r\n    usePermissionsDataManager();\r\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\r\n\r\n  // This corresponds to the data related to the CT left checkbox\r\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\r\n  const mainData = get(modifiedData, pathToData.split('..'), {});\r\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\r\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\r\n  const dataWithoutCondition = React.useMemo(() => {\r\n    return Object.keys(mainData).reduce<Record<string, ConditionForm>>((acc, current) => {\r\n      acc[current] = omit(mainData[current], 'conditions');\r\n\r\n      return acc;\r\n    }, {});\r\n  }, [mainData]);\r\n\r\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\r\n\r\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\r\n  // order to know if whether or not we need to display the associated action in\r\n  // the <ConditionsModal />\r\n  const checkboxesActions = React.useMemo(() => {\r\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\r\n  }, [availableActions, modifiedData, pathToData]);\r\n\r\n  // @ts-expect-error – hasConditions does not exist on all versions of checkboxesActions.\r\n  const doesConditionButtonHasConditions = checkboxesActions.some((action) => action.hasConditions);\r\n\r\n  return (\r\n    <BoxWrapper $isActive={isActive}>\r\n      <Wrapper\r\n        height={rowHeight}\r\n        flex={1}\r\n        alignItems=\"center\"\r\n        background={isGrey ? 'neutral100' : 'neutral0'}\r\n      >\r\n        <RowLabelWithCheckbox\r\n          isCollapsable\r\n          isFormDisabled={isFormDisabled}\r\n          label={capitalise(label)}\r\n          checkboxName={pathToData}\r\n          onChange={onChangeParentCheckbox}\r\n          onClick={onClickToggle}\r\n          someChecked={hasSomeActionsSelected}\r\n          value={hasAllActionsSelected}\r\n          isActive={isActive}\r\n        >\r\n          <Chevron paddingLeft={2}>{isActive ? <ChevronUp /> : <ChevronDown />}</Chevron>\r\n        </RowLabelWithCheckbox>\r\n\r\n        <Flex style={{ flex: 1 }}>\r\n          {checkboxesActions.map(\r\n            ({ actionId, hasSomeActionsSelected, isDisplayed, ...restAction }) => {\r\n              if (!isDisplayed) {\r\n                return <HiddenAction key={actionId} />;\r\n              }\r\n\r\n              const {\r\n                hasConditions,\r\n                hasAllActionsSelected,\r\n                isParentCheckbox,\r\n                checkboxName,\r\n                label: permissionLabel,\r\n              } = restAction as VisibleCheckboxAction;\r\n\r\n              if (isParentCheckbox) {\r\n                return (\r\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\r\n                    {hasConditions && (\r\n                      <Box\r\n                        tag=\"span\"\r\n                        position=\"absolute\"\r\n                        top=\"-6px\"\r\n                        left=\"37px\"\r\n                        width=\"6px\"\r\n                        height=\"6px\"\r\n                        borderRadius=\"20px\"\r\n                        background=\"primary600\"\r\n                      />\r\n                    )}\r\n                    <Checkbox\r\n                      disabled={isFormDisabled}\r\n                      name={checkboxName}\r\n                      aria-label={formatMessage(\r\n                        {\r\n                          id: `Settings.permissions.select-by-permission`,\r\n                          defaultMessage: 'Select {label} permission',\r\n                        },\r\n                        { label: `${permissionLabel} ${label}` }\r\n                      )}\r\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\r\n                      onCheckedChange={(value) => {\r\n                        onChangeParentCheckbox({\r\n                          target: {\r\n                            name: checkboxName,\r\n                            value: !!value,\r\n                          },\r\n                        });\r\n                      }}\r\n                      checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\r\n                    />\r\n                  </Cell>\r\n                );\r\n              }\r\n\r\n              return (\r\n                <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\r\n                  {hasConditions && (\r\n                    <Box\r\n                      tag=\"span\"\r\n                      position=\"absolute\"\r\n                      top=\"-6px\"\r\n                      left=\"37px\"\r\n                      width=\"6px\"\r\n                      height=\"6px\"\r\n                      borderRadius=\"20px\"\r\n                      background=\"primary600\"\r\n                    />\r\n                  )}\r\n                  <Checkbox\r\n                    disabled={isFormDisabled}\r\n                    name={checkboxName}\r\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\r\n                    onCheckedChange={(value) => {\r\n                      onChangeSimpleCheckbox({\r\n                        target: {\r\n                          name: checkboxName,\r\n                          value: !!value,\r\n                        },\r\n                      });\r\n                    }}\r\n                    checked={hasConditions ? 'indeterminate' : hasAllActionsSelected}\r\n                  />\r\n                </Cell>\r\n              );\r\n            }\r\n          )}\r\n        </Flex>\r\n      </Wrapper>\r\n      <Box bottom=\"10px\" right=\"9px\" position=\"absolute\">\r\n        <Modal.Root\r\n          open={isConditionModalOpen}\r\n          onOpenChange={() => {\r\n            setIsConditionModalOpen((prev) => !prev);\r\n          }}\r\n        >\r\n          <Modal.Trigger>\r\n            <ConditionsButton hasConditions={doesConditionButtonHasConditions} />\r\n          </Modal.Trigger>\r\n          <ConditionsModal\r\n            headerBreadCrumbs={[label, 'Settings.permissions.conditions.conditions']}\r\n            actions={checkboxesActions}\r\n            isFormDisabled={isFormDisabled}\r\n            onClose={() => {\r\n              setIsConditionModalOpen(false);\r\n            }}\r\n          />\r\n        </Modal.Root>\r\n      </Box>\r\n    </BoxWrapper>\r\n  );\r\n};\r\n\r\ninterface VisibleCheckboxAction {\r\n  actionId: string;\r\n  hasAllActionsSelected: boolean;\r\n  hasSomeActionsSelected: boolean;\r\n  isDisplayed: true;\r\n  isParentCheckbox: boolean;\r\n  checkboxName: string;\r\n  label: string;\r\n  hasConditions: boolean;\r\n  pathToConditionsObject: string[];\r\n}\r\n\r\ninterface HiddenCheckboxAction {\r\n  actionId: string;\r\n  isDisplayed: false;\r\n  hasAllActionsSelected?: never;\r\n  hasSomeActionsSelected: boolean;\r\n}\r\n\r\nconst generateCheckboxesActions = (\r\n  availableActions: Array<Action & { isDisplayed: boolean }>,\r\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\r\n  pathToData: string\r\n): Array<VisibleCheckboxAction | HiddenCheckboxAction> => {\r\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\r\n    if (!isDisplayed) {\r\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\r\n    }\r\n\r\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\r\n    const checkboxNameArray = isEmpty(applyToProperties)\r\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\r\n      : baseCheckboxNameArray;\r\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\r\n\r\n    const baseCheckboxAction = {\r\n      actionId,\r\n      checkboxName: checkboxNameArray.join('..'),\r\n      hasConditions: createArrayOfValues(conditionsValue).some((val) => val),\r\n      isDisplayed,\r\n      label,\r\n      pathToConditionsObject: baseCheckboxNameArray,\r\n    };\r\n\r\n    if (isEmpty(applyToProperties)) {\r\n      const value = get(modifiedData, checkboxNameArray, false);\r\n\r\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\r\n      // equal to hasSomeActionsSelected\r\n      return {\r\n        ...baseCheckboxAction,\r\n        hasAllActionsSelected: value,\r\n        hasSomeActionsSelected: value,\r\n        isParentCheckbox: false,\r\n      };\r\n    }\r\n\r\n    const mainData = get(modifiedData, checkboxNameArray, null);\r\n\r\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\r\n\r\n    return {\r\n      ...baseCheckboxAction,\r\n      hasAllActionsSelected,\r\n      hasSomeActionsSelected,\r\n      isParentCheckbox: true,\r\n    };\r\n  });\r\n};\r\n\r\nconst activeRowStyle = (theme: DefaultTheme, isActive?: boolean): string => `\r\n  ${Wrapper} {\r\n    background-color: ${theme.colors.primary100};\r\n    color: ${theme.colors.primary600};\r\n    border-radius: ${isActive ? '2px 2px 0 0' : '2px'};\r\n    font-weight: ${theme.fontWeights.bold};\r\n  }\r\n\r\n  ${Chevron} {\r\n    display: flex;\r\n  }\r\n  ${ConditionsButton} {\r\n    display: block;\r\n  }\r\n\r\n  &:focus-within {\r\n    ${() => activeRowStyle(theme, isActive)}\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled<FlexComponent>(Flex)`\r\n  border: 1px solid transparent;\r\n`;\r\n\r\nconst BoxWrapper = styled.div<{ $isActive: boolean }>`\r\n  display: inline-flex;\r\n  min-width: 100%;\r\n  position: relative;\r\n\r\n  ${ConditionsButton} {\r\n    display: none;\r\n  }\r\n\r\n  ${({ $isActive, theme }) => $isActive && activeRowStyle(theme, $isActive)}\r\n\r\n  &:hover {\r\n    ${({ theme, $isActive }) => activeRowStyle(theme, $isActive)}\r\n  }\r\n`;\r\n\r\nconst Cell = styled<FlexComponent>(Flex)`\r\n  width: ${cellWidth};\r\n  position: relative;\r\n`;\r\n\r\nconst Chevron = styled<BoxComponent>(Box)`\r\n  display: none;\r\n\r\n  svg {\r\n    width: 1.4rem;\r\n  }\r\n\r\n  path {\r\n    fill: ${({ theme }) => theme.colors.primary600};\r\n  }\r\n`;\r\n\r\nexport { ContentTypeCollapses };\r\nexport type { ContentTypeCollapsesProps, HiddenCheckboxAction, VisibleCheckboxAction };\r\n","import * as React from 'react';\r\n\r\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\r\nimport get from 'lodash/get';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Action } from '../../../../../../../shared/contracts/permissions';\r\nimport {\r\n  PermissionsDataManagerContextValue,\r\n  usePermissionsDataManager,\r\n} from '../hooks/usePermissionsDataManager';\r\nimport { cellWidth, firstRowWidth } from '../utils/constants';\r\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\r\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\r\n\r\ninterface GlobalActionsProps {\r\n  actions: Action[];\r\n  isFormDisabled?: boolean;\r\n  kind: Extract<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\r\n}\r\n\r\nconst GlobalActions = ({ actions = [], isFormDisabled, kind }: GlobalActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { modifiedData, onChangeCollectionTypeGlobalActionCheckbox } = usePermissionsDataManager();\r\n\r\n  const displayedActions = actions.filter(({ subjects }) => subjects && subjects.length);\r\n\r\n  const checkboxesState = React.useMemo(() => {\r\n    const actionsIds = displayedActions.map(({ actionId }) => actionId);\r\n\r\n    const data = modifiedData[kind];\r\n\r\n    const relatedActionsData = actionsIds.reduce<Record<string, RecursiveRecordOfBooleans>>(\r\n      (acc, actionId) => {\r\n        Object.keys(data).forEach((ctUid) => {\r\n          const actionIdData = get(data, [ctUid, actionId]);\r\n\r\n          const actionIdState = { [ctUid]: removeConditionKeyFromData(actionIdData)! };\r\n\r\n          if (!acc[actionId]) {\r\n            acc[actionId] = actionIdState;\r\n          } else {\r\n            acc[actionId] = { ...acc[actionId], ...actionIdState };\r\n          }\r\n        });\r\n\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    const checkboxesState = Object.keys(relatedActionsData).reduce<\r\n      Record<\r\n        string,\r\n        {\r\n          hasAllActionsSelected: boolean;\r\n          hasSomeActionsSelected: boolean;\r\n        }\r\n      >\r\n    >((acc, current) => {\r\n      acc[current] = getCheckboxState(relatedActionsData[current]);\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return checkboxesState;\r\n  }, [modifiedData, displayedActions, kind]);\r\n\r\n  return (\r\n    <Box paddingBottom={4} paddingTop={6} style={{ paddingLeft: firstRowWidth }}>\r\n      <Flex gap={0}>\r\n        {displayedActions.map(({ label, actionId }) => {\r\n          return (\r\n            <Flex\r\n              shrink={0}\r\n              width={cellWidth}\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              key={actionId}\r\n              gap={3}\r\n            >\r\n              <Typography variant=\"sigma\" textColor=\"neutral500\">\r\n                {formatMessage({\r\n                  id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\r\n                  defaultMessage: label,\r\n                })}\r\n              </Typography>\r\n              <Checkbox\r\n                disabled={isFormDisabled}\r\n                onCheckedChange={(value) => {\r\n                  onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, !!value);\r\n                }}\r\n                name={actionId}\r\n                aria-label={formatMessage(\r\n                  {\r\n                    id: `Settings.permissions.select-all-by-permission`,\r\n                    defaultMessage: 'Select all {label} permissions',\r\n                  },\r\n                  {\r\n                    label: formatMessage({\r\n                      id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\r\n                      defaultMessage: label,\r\n                    }),\r\n                  }\r\n                )}\r\n                checked={\r\n                  get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)\r\n                    ? 'indeterminate'\r\n                    : get(checkboxesState, [actionId, 'hasAllActionsSelected'], false)\r\n                }\r\n              />\r\n            </Flex>\r\n          );\r\n        })}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { GlobalActions };\r\nexport type { GlobalActionsProps };\r\n","import { Box } from '@strapi/design-system';\r\n\r\nimport { ContentPermission } from '../../../../../../../shared/contracts/permissions';\r\n\r\nimport { ContentTypeCollapses } from './ContentTypeCollapses';\r\nimport { GlobalActions, GlobalActionsProps } from './GlobalActions';\r\n\r\ninterface ContentTypesProps extends Pick<GlobalActionsProps, 'kind'> {\r\n  isFormDisabled?: boolean;\r\n  layout: ContentPermission;\r\n}\r\n\r\nconst ContentTypes = ({\r\n  isFormDisabled,\r\n  kind,\r\n  layout: { actions, subjects },\r\n}: ContentTypesProps) => {\r\n  const sortedSubjects = [...subjects].sort((a, b) => a.label.localeCompare(b.label));\r\n\r\n  return (\r\n    <Box background=\"neutral0\">\r\n      <GlobalActions actions={actions} kind={kind} isFormDisabled={isFormDisabled} />\r\n      <ContentTypeCollapses\r\n        actions={actions}\r\n        isFormDisabled={isFormDisabled}\r\n        pathToData={kind}\r\n        subjects={sortedSubjects}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { ContentTypes };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Accordion,\r\n  Box,\r\n  BoxComponent,\r\n  Checkbox,\r\n  Flex,\r\n  Grid,\r\n  Modal,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport get from 'lodash/get';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport {\r\n  SettingPermission,\r\n  PluginPermission,\r\n} from '../../../../../../../shared/contracts/permissions';\r\nimport { capitalise } from '../../../../../utils/strings';\r\nimport {\r\n  PermissionsDataManagerContextValue,\r\n  usePermissionsDataManager,\r\n} from '../hooks/usePermissionsDataManager';\r\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\r\nimport { ChildrenForm, ConditionForm } from '../utils/forms';\r\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\r\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\r\n\r\nimport { ConditionsButton } from './ConditionsButton';\r\nimport { ConditionsModal } from './ConditionsModal';\r\n\r\nimport type { GenericLayout } from '../utils/layouts';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PluginsAndSettingsPermissions\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype Layout = GenericLayout<SettingPermission | PluginPermission>[];\r\n\r\ninterface PluginsAndSettingsPermissionsProps extends Pick<RowProps, 'kind' | 'isFormDisabled'> {\r\n  layout: Layout;\r\n}\r\n\r\nconst PluginsAndSettingsPermissions = ({\r\n  layout,\r\n  ...restProps\r\n}: PluginsAndSettingsPermissionsProps) => {\r\n  return (\r\n    <Box padding={6} background=\"neutral0\">\r\n      <Accordion.Root size=\"M\">\r\n        {layout.map(({ category, categoryId, childrenForm }, index) => {\r\n          return (\r\n            <Row\r\n              key={category}\r\n              childrenForm={childrenForm}\r\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\r\n              name={category}\r\n              pathToData={[restProps.kind, categoryId]}\r\n              {...restProps}\r\n            />\r\n          );\r\n        })}\r\n      </Accordion.Root>\r\n    </Box>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Row\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface RowProps\r\n  extends Pick<Layout[number], 'childrenForm'>,\r\n    Pick<Accordion.HeaderProps, 'variant'> {\r\n  kind: Exclude<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\r\n  name: string;\r\n  isFormDisabled?: boolean;\r\n  pathToData: string[];\r\n}\r\n\r\nconst Row = ({\r\n  childrenForm,\r\n  kind,\r\n  name,\r\n  isFormDisabled = false,\r\n  variant,\r\n  pathToData,\r\n}: RowProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const categoryName = name.split('::').pop() ?? '';\r\n\r\n  return (\r\n    <Accordion.Item value={name}>\r\n      <Accordion.Header variant={variant}>\r\n        <Accordion.Trigger\r\n          caretPosition=\"right\"\r\n          description={`${formatMessage(\r\n            { id: 'Settings.permissions.category', defaultMessage: categoryName },\r\n            { category: categoryName }\r\n          )} ${kind === 'plugins' ? 'plugin' : kind}`}\r\n        >\r\n          {capitalise(categoryName)}\r\n        </Accordion.Trigger>\r\n      </Accordion.Header>\r\n      <Accordion.Content>\r\n        <Box padding={6}>\r\n          {childrenForm.map(({ actions, subCategoryName, subCategoryId }) => (\r\n            <SubCategory\r\n              key={subCategoryName}\r\n              actions={actions}\r\n              categoryName={categoryName}\r\n              isFormDisabled={isFormDisabled}\r\n              subCategoryName={subCategoryName}\r\n              pathToData={[...pathToData, subCategoryId]}\r\n            />\r\n          ))}\r\n        </Box>\r\n      </Accordion.Content>\r\n    </Accordion.Item>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SubCategory\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface SubCategoryProps {\r\n  actions?: Array<SettingPermission | PluginPermission>;\r\n  categoryName: string;\r\n  isFormDisabled?: boolean;\r\n  subCategoryName: string;\r\n  pathToData: string[];\r\n}\r\n\r\nconst SubCategory = ({\r\n  actions = [],\r\n  categoryName,\r\n  isFormDisabled,\r\n  subCategoryName,\r\n  pathToData,\r\n}: SubCategoryProps) => {\r\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\r\n    usePermissionsDataManager();\r\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n\r\n  const mainData = get(modifiedData, pathToData, {});\r\n\r\n  const dataWithoutCondition = React.useMemo(() => {\r\n    return Object.keys(mainData).reduce<RecursiveRecordOfBooleans>((acc, current) => {\r\n      acc[current] = removeConditionKeyFromData(mainData[current])!;\r\n\r\n      return acc;\r\n    }, {});\r\n  }, [mainData]);\r\n\r\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\r\n\r\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\r\n  const formattedActions = React.useMemo(() => {\r\n    return actions.map((action) => {\r\n      const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\r\n      const checkboxValue = get(modifiedData, checkboxName, false);\r\n      const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\r\n      const hasConditions = createArrayOfValues(conditionValue).some((val) => val);\r\n\r\n      return {\r\n        ...action,\r\n        isDisplayed: checkboxValue,\r\n        checkboxName: checkboxName.join('..'),\r\n        hasSomeActionsSelected: checkboxValue,\r\n        value: checkboxValue,\r\n        hasConditions,\r\n        label: action.displayName,\r\n        actionId: action.action,\r\n        pathToConditionsObject: [...pathToData, action.action],\r\n      };\r\n    });\r\n  }, [actions, modifiedData, pathToData]);\r\n\r\n  const datum: ChildrenForm = get(modifiedData, [...pathToData], {});\r\n\r\n  const doesButtonHasCondition = createArrayOfValues(\r\n    Object.entries(datum).reduce<Record<string, ConditionForm>>((acc, current) => {\r\n      const [catName, { conditions }] = current;\r\n\r\n      acc[catName] = conditions;\r\n\r\n      return acc;\r\n    }, {})\r\n  ).some((val) => val);\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Box paddingRight={4}>\r\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n              {subCategoryName}\r\n            </Typography>\r\n          </Box>\r\n          <Border flex={1} />\r\n          <Box paddingLeft={4}>\r\n            <Checkbox\r\n              name={pathToData.join('..')}\r\n              disabled={isFormDisabled}\r\n              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\r\n              onCheckedChange={(value) => {\r\n                onChangeParentCheckbox({\r\n                  target: {\r\n                    name: pathToData.join('..'),\r\n                    value: !!value,\r\n                  },\r\n                });\r\n              }}\r\n              checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\r\n            >\r\n              {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\r\n            </Checkbox>\r\n          </Box>\r\n        </Flex>\r\n        <Flex paddingTop={6} paddingBottom={6}>\r\n          <Grid.Root gap={2} style={{ flex: 1 }}>\r\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\r\n              return (\r\n                <Grid.Item col={3} key={action} direction=\"column\" alignItems=\"start\">\r\n                  <CheckboxWrapper $disabled={isFormDisabled} $hasConditions={hasConditions}>\r\n                    <Checkbox\r\n                      name={checkboxName}\r\n                      disabled={isFormDisabled}\r\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\r\n                      onCheckedChange={(value) => {\r\n                        onChangeSimpleCheckbox({\r\n                          target: {\r\n                            name: checkboxName,\r\n                            value: !!value,\r\n                          },\r\n                        });\r\n                      }}\r\n                      checked={value}\r\n                    >\r\n                      {displayName}\r\n                    </Checkbox>\r\n                  </CheckboxWrapper>\r\n                </Grid.Item>\r\n              );\r\n            })}\r\n          </Grid.Root>\r\n          <Modal.Root\r\n            open={isConditionModalOpen}\r\n            onOpenChange={() => {\r\n              setIsConditionModalOpen((prev) => !prev);\r\n            }}\r\n          >\r\n            <Modal.Trigger>\r\n              <ConditionsButton hasConditions={doesButtonHasCondition} />\r\n            </Modal.Trigger>\r\n            <ConditionsModal\r\n              headerBreadCrumbs={[categoryName, subCategoryName]}\r\n              actions={formattedActions}\r\n              isFormDisabled={isFormDisabled}\r\n              onClose={() => {\r\n                setIsConditionModalOpen(false);\r\n              }}\r\n            />\r\n          </Modal.Root>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Border = styled<BoxComponent>(Box)`\r\n  align-self: center;\r\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n`;\r\n\r\nconst CheckboxWrapper = styled.div<{ $hasConditions?: boolean; $disabled?: boolean }>`\r\n  position: relative;\r\n  word-break: keep-all;\r\n  ${({ $hasConditions, $disabled, theme }) =>\r\n    $hasConditions &&\r\n    `\r\n    &:before {\r\n      content: '';\r\n      position: absolute;\r\n      top: -0.4rem;\r\n      left: -0.8rem;\r\n      width: 0.6rem;\r\n      height: 0.6rem;\r\n      border-radius: 2rem;\r\n      background: ${$disabled ? theme.colors.neutral100 : theme.colors.primary600};\r\n    }\r\n  `}\r\n`;\r\n\r\nexport { PluginsAndSettingsPermissions };\r\n","import * as React from 'react';\r\n\r\nimport { Tabs } from '@strapi/design-system';\r\nimport { produce } from 'immer';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport set from 'lodash/set';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport * as PermissonContracts from '../../../../../../../shared/contracts/permissions';\r\nimport { Permission } from '../../../../../../../shared/contracts/shared';\r\nimport { isObject } from '../../../../../utils/objects';\r\nimport {\r\n  PermissionsDataManagerContextValue,\r\n  PermissionsDataManagerProvider,\r\n} from '../hooks/usePermissionsDataManager';\r\nimport { difference } from '../utils/difference';\r\nimport { ConditionForm, Form, createDefaultCTForm, createDefaultForm } from '../utils/forms';\r\nimport { GenericLayout, formatLayout } from '../utils/layouts';\r\nimport { formatPermissionsForAPI } from '../utils/permissions';\r\nimport { updateConditionsToFalse } from '../utils/updateConditionsToFalse';\r\nimport { updateValues } from '../utils/updateValues';\r\n\r\nimport { ContentTypes } from './ContentTypes';\r\nimport { PluginsAndSettingsPermissions } from './PluginsAndSettings';\r\n\r\nconst TAB_LABELS = [\r\n  {\r\n    labelId: 'app.components.LeftMenuLinkContainer.collectionTypes',\r\n    defaultMessage: 'Collection Types',\r\n    id: 'collectionTypes',\r\n  },\r\n  {\r\n    labelId: 'app.components.LeftMenuLinkContainer.singleTypes',\r\n    id: 'singleTypes',\r\n    defaultMessage: 'Single Types',\r\n  },\r\n  {\r\n    labelId: 'app.components.LeftMenuLinkContainer.plugins',\r\n    defaultMessage: 'Plugins',\r\n    id: 'plugins',\r\n  },\r\n  {\r\n    labelId: 'app.components.LeftMenuLinkContainer.settings',\r\n    defaultMessage: 'Settings',\r\n    id: 'settings',\r\n  },\r\n] as const;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Permissions\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PermissionsAPI {\r\n  getPermissions: () => {\r\n    didUpdateConditions: boolean;\r\n    permissionsToSend: Omit<Permission, 'id' | 'createdAt' | 'updatedAt' | 'actionParameters'>[];\r\n  };\r\n  resetForm: () => void;\r\n  setFormAfterSubmit: () => void;\r\n}\r\n\r\ninterface PermissionsProps {\r\n  isFormDisabled?: boolean;\r\n  permissions?: Permission[];\r\n  layout: PermissonContracts.GetAll.Response['data'];\r\n}\r\n\r\nconst Permissions = React.forwardRef<PermissionsAPI, PermissionsProps>(\r\n  ({ layout, isFormDisabled, permissions = [] }, api) => {\r\n    const [{ initialData, layouts, modifiedData }, dispatch] = React.useReducer(\r\n      reducer,\r\n      initialState,\r\n      () => init(layout, permissions)\r\n    );\r\n    const { formatMessage } = useIntl();\r\n\r\n    React.useImperativeHandle(api, () => {\r\n      return {\r\n        getPermissions() {\r\n          const collectionTypesDiff = difference(\r\n            initialData.collectionTypes,\r\n            modifiedData.collectionTypes\r\n          );\r\n          const singleTypesDiff = difference(initialData.singleTypes, modifiedData.singleTypes);\r\n\r\n          const contentTypesDiff = { ...collectionTypesDiff, ...singleTypesDiff };\r\n\r\n          let didUpdateConditions;\r\n\r\n          if (isEmpty(contentTypesDiff)) {\r\n            didUpdateConditions = false;\r\n          } else {\r\n            didUpdateConditions = Object.values(contentTypesDiff).some((permission = {}) => {\r\n              return Object.values(permission).some((permissionValue) =>\r\n                has(permissionValue, 'conditions')\r\n              );\r\n            });\r\n          }\r\n\r\n          return { permissionsToSend: formatPermissionsForAPI(modifiedData), didUpdateConditions };\r\n        },\r\n        resetForm() {\r\n          dispatch({ type: 'RESET_FORM' });\r\n        },\r\n        setFormAfterSubmit() {\r\n          dispatch({ type: 'SET_FORM_AFTER_SUBMIT' });\r\n        },\r\n      } satisfies PermissionsAPI;\r\n    });\r\n\r\n    const handleChangeCollectionTypeLeftActionRowCheckbox = (\r\n      pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\r\n      propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\r\n      rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\r\n      value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\r\n    ) => {\r\n      dispatch({\r\n        type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX',\r\n        pathToCollectionType,\r\n        propertyName,\r\n        rowName,\r\n        value,\r\n      });\r\n    };\r\n\r\n    const handleChangeCollectionTypeGlobalActionCheckbox = (\r\n      collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\r\n      actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\r\n      value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\r\n    ) => {\r\n      dispatch({\r\n        type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX',\r\n        collectionTypeKind,\r\n        actionId,\r\n        value,\r\n      });\r\n    };\r\n\r\n    const handleChangeConditions = (conditions: OnChangeConditionsAction['conditions']) => {\r\n      dispatch({ type: 'ON_CHANGE_CONDITIONS', conditions });\r\n    };\r\n\r\n    const handleChangeSimpleCheckbox: PermissionsDataManagerContextValue['onChangeSimpleCheckbox'] =\r\n      React.useCallback(({ target: { name, value } }) => {\r\n        dispatch({\r\n          type: 'ON_CHANGE_SIMPLE_CHECKBOX',\r\n          keys: name,\r\n          value,\r\n        });\r\n      }, []);\r\n\r\n    const handleChangeParentCheckbox: PermissionsDataManagerContextValue['onChangeParentCheckbox'] =\r\n      React.useCallback(({ target: { name, value } }) => {\r\n        dispatch({\r\n          type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX',\r\n          keys: name,\r\n          value,\r\n        });\r\n      }, []);\r\n\r\n    return (\r\n      <PermissionsDataManagerProvider\r\n        availableConditions={layout.conditions}\r\n        modifiedData={modifiedData}\r\n        onChangeConditions={handleChangeConditions}\r\n        onChangeSimpleCheckbox={handleChangeSimpleCheckbox}\r\n        onChangeParentCheckbox={handleChangeParentCheckbox}\r\n        onChangeCollectionTypeLeftActionRowCheckbox={\r\n          handleChangeCollectionTypeLeftActionRowCheckbox\r\n        }\r\n        onChangeCollectionTypeGlobalActionCheckbox={handleChangeCollectionTypeGlobalActionCheckbox}\r\n      >\r\n        <Tabs.Root defaultValue={TAB_LABELS[0].id}>\r\n          <Tabs.List\r\n            aria-label={formatMessage({\r\n              id: 'Settings.permissions.users.tabs.label',\r\n              defaultMessage: 'Tabs Permissions',\r\n            })}\r\n          >\r\n            {TAB_LABELS.map((tabLabel) => (\r\n              <Tabs.Trigger key={tabLabel.id} value={tabLabel.id}>\r\n                {formatMessage({ id: tabLabel.labelId, defaultMessage: tabLabel.defaultMessage })}\r\n              </Tabs.Trigger>\r\n            ))}\r\n          </Tabs.List>\r\n          <Tabs.Content value={TAB_LABELS[0].id}>\r\n            <ContentTypes\r\n              layout={layouts.collectionTypes}\r\n              kind=\"collectionTypes\"\r\n              isFormDisabled={isFormDisabled}\r\n            />\r\n          </Tabs.Content>\r\n          <Tabs.Content value={TAB_LABELS[1].id}>\r\n            <ContentTypes\r\n              layout={layouts.singleTypes}\r\n              kind=\"singleTypes\"\r\n              isFormDisabled={isFormDisabled}\r\n            />\r\n          </Tabs.Content>\r\n          <Tabs.Content value={TAB_LABELS[2].id}>\r\n            <PluginsAndSettingsPermissions\r\n              layout={layouts.plugins}\r\n              kind=\"plugins\"\r\n              isFormDisabled={isFormDisabled}\r\n            />\r\n          </Tabs.Content>\r\n          <Tabs.Content value={TAB_LABELS[3].id}>\r\n            <PluginsAndSettingsPermissions\r\n              layout={layouts.settings}\r\n              kind=\"settings\"\r\n              isFormDisabled={isFormDisabled}\r\n            />\r\n          </Tabs.Content>\r\n        </Tabs.Root>\r\n      </PermissionsDataManagerProvider>\r\n    );\r\n  }\r\n);\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * reducer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface PermissionForms {\r\n  collectionTypes: Form;\r\n  plugins: Record<string, Form>;\r\n  settings: Record<string, Form>;\r\n  singleTypes: Form;\r\n}\r\n\r\ninterface State {\r\n  initialData: PermissionForms;\r\n  modifiedData: PermissionForms;\r\n  layouts: {\r\n    collectionTypes: PermissonContracts.ContentPermission;\r\n    singleTypes: PermissonContracts.ContentPermission;\r\n    plugins: GenericLayout<PermissonContracts.PluginPermission>[];\r\n    settings: GenericLayout<PermissonContracts.SettingPermission>[];\r\n  };\r\n}\r\n\r\nconst initialState = {\r\n  initialData: {},\r\n  modifiedData: {},\r\n  layouts: {},\r\n};\r\n\r\ninterface OnChangeCollectionTypeGlobalActionCheckboxAction {\r\n  type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX';\r\n  collectionTypeKind: keyof PermissionForms;\r\n  actionId: string;\r\n  value: boolean;\r\n}\r\n\r\ninterface OnChangeCollectionTypeRowLeftCheckboxAction {\r\n  type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX';\r\n  pathToCollectionType: string;\r\n  propertyName: string;\r\n  rowName: string;\r\n  value: boolean;\r\n}\r\n\r\ninterface OnChangeConditionsAction {\r\n  type: 'ON_CHANGE_CONDITIONS';\r\n  conditions: Record<string, ConditionForm>;\r\n}\r\n\r\ninterface OnChangeSimpleCheckboxAction {\r\n  type: 'ON_CHANGE_SIMPLE_CHECKBOX';\r\n  keys: string;\r\n  value: boolean;\r\n}\r\n\r\ninterface OnChangeToggleParentCheckbox {\r\n  type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX';\r\n  keys: string;\r\n  value: boolean;\r\n}\r\n\r\ninterface ResetFormAction {\r\n  type: 'RESET_FORM';\r\n}\r\n\r\ninterface SetFormAfterSubmitAction {\r\n  type: 'SET_FORM_AFTER_SUBMIT';\r\n}\r\n\r\ntype Action =\r\n  | OnChangeCollectionTypeGlobalActionCheckboxAction\r\n  | OnChangeCollectionTypeRowLeftCheckboxAction\r\n  | OnChangeConditionsAction\r\n  | OnChangeSimpleCheckboxAction\r\n  | OnChangeToggleParentCheckbox\r\n  | ResetFormAction\r\n  | SetFormAfterSubmitAction;\r\n\r\n/* eslint-disable consistent-return */\r\nconst reducer = (state: State, action: Action) =>\r\n  produce(state, (draftState) => {\r\n    switch (action.type) {\r\n      // This action is called when a checkbox in the <GlobalActions />\r\n      // changes\r\n      case 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX': {\r\n        const { collectionTypeKind, actionId, value } = action;\r\n        const pathToData = ['modifiedData', collectionTypeKind];\r\n\r\n        Object.keys(get(state, pathToData)).forEach((collectionType) => {\r\n          const collectionTypeActionData = get(\r\n            state,\r\n            [...pathToData, collectionType, actionId],\r\n            undefined\r\n          );\r\n\r\n          if (collectionTypeActionData) {\r\n            let updatedValues = updateValues(collectionTypeActionData, value);\r\n\r\n            // We need to remove the applied conditions\r\n            // @ts-expect-error – TODO: type better\r\n            if (!value && updatedValues.conditions) {\r\n              // @ts-expect-error – TODO: type better\r\n              const updatedConditions = updateValues(updatedValues.conditions, false);\r\n\r\n              updatedValues = { ...updatedValues, conditions: updatedConditions };\r\n            }\r\n\r\n            set(draftState, [...pathToData, collectionType, actionId], updatedValues);\r\n          }\r\n        });\r\n\r\n        break;\r\n      }\r\n      case 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX': {\r\n        const { pathToCollectionType, propertyName, rowName, value } = action;\r\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\r\n        const pathToModifiedDataCollectionType = pathToCollectionType.split('..');\r\n\r\n        const objToUpdate = get(nextModifiedDataState, pathToModifiedDataCollectionType, {});\r\n\r\n        Object.keys(objToUpdate).forEach((actionId) => {\r\n          // When a ct has multiple properties (ex: locales, field)\r\n          // We need to make sure that we add any new property to the modifiedData\r\n          // object.\r\n          if (has(objToUpdate[actionId], `properties.${propertyName}`)) {\r\n            const objValue = get(objToUpdate, [actionId, 'properties', propertyName, rowName]);\r\n            const pathToDataToSet = [\r\n              ...pathToModifiedDataCollectionType,\r\n              actionId,\r\n              'properties',\r\n              propertyName,\r\n              rowName,\r\n            ];\r\n\r\n            if (!isObject(objValue)) {\r\n              set(nextModifiedDataState, pathToDataToSet, value);\r\n            } else {\r\n              const updatedValue = updateValues(objValue, value);\r\n\r\n              set(nextModifiedDataState, pathToDataToSet, updatedValue);\r\n            }\r\n          }\r\n        });\r\n\r\n        // When we uncheck a row, we need to check if we also need to disable the conditions\r\n        if (!value) {\r\n          // @ts-expect-error – TODO: type better\r\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\r\n        }\r\n\r\n        set(draftState, 'modifiedData', nextModifiedDataState);\r\n\r\n        break;\r\n      }\r\n      case 'ON_CHANGE_CONDITIONS': {\r\n        Object.entries(action.conditions).forEach((array) => {\r\n          const [stringPathToData, conditionsToUpdate] = array;\r\n\r\n          set(\r\n            draftState,\r\n            ['modifiedData', ...stringPathToData.split('..'), 'conditions'],\r\n            conditionsToUpdate\r\n          );\r\n        });\r\n\r\n        break;\r\n      }\r\n      case 'ON_CHANGE_SIMPLE_CHECKBOX': {\r\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\r\n\r\n        set(nextModifiedDataState, [...action.keys.split('..')], action.value);\r\n\r\n        // When we uncheck a single checkbox we need to remove the conditions from the parent\r\n        if (!action.value) {\r\n          // @ts-expect-error – TODO: type better\r\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\r\n        }\r\n\r\n        set(draftState, 'modifiedData', nextModifiedDataState);\r\n\r\n        break;\r\n      }\r\n      /*\r\n       * Here the idea is to retrieve a specific value of the modifiedObject\r\n       * then update all the boolean values of the retrieved one\r\n       * and update the drafState.\r\n       *\r\n       * For instance in order to enable create action for all the fields and locales\r\n       * of the restaurant content type we need to :\r\n       * 1. Retrieve the modifiedData.collectionTypes.restaurant.create object\r\n       * 2. Toggle all the end boolean values to the desired one\r\n       * 3. Update the draftState\r\n       *\r\n       * Since the case works well in order to update what we called \"parent\" checkbox. We can\r\n       * reuse the action when we need to toggle change all the values that depends on this one.\r\n       * A parent checkbox is a checkbox which value is not a boolean but depends on its children ones, therefore,\r\n       * a parent checkbox does not have a represented value in the draftState, they are just helpers.\r\n       *\r\n       * Given the following data:\r\n       *\r\n       * const data = {\r\n       *  restaurant: {\r\n       *   create: {\r\n       *     fields: { name: true },\r\n       *     locales: { en: false }\r\n       *   }\r\n       *  }\r\n       * }\r\n       *\r\n       * The value of the create checkbox for the restaurant will be ƒalse since not all its children have\r\n       * truthy values and in order to set its value to true when need to have all the values of its children set to true.\r\n       *\r\n       * Similarly, we can reuse the logic for the components attributes\r\n       *\r\n       */\r\n      case 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX': {\r\n        const { keys, value } = action;\r\n        const pathToValue = [...keys.split('..')];\r\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\r\n        const oldValues = get(nextModifiedDataState, pathToValue, {});\r\n\r\n        const updatedValues = updateValues(oldValues, value);\r\n        set(nextModifiedDataState, pathToValue, updatedValues);\r\n\r\n        // When we uncheck a parent checkbox we need to remove the associated conditions\r\n        if (!value) {\r\n          // @ts-expect-error – TODO: type better\r\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\r\n        }\r\n\r\n        set(draftState, ['modifiedData'], nextModifiedDataState);\r\n\r\n        break;\r\n      }\r\n      case 'RESET_FORM': {\r\n        draftState.modifiedData = state.initialData;\r\n        break;\r\n      }\r\n      case 'SET_FORM_AFTER_SUBMIT': {\r\n        draftState.initialData = state.modifiedData;\r\n        break;\r\n      }\r\n      default:\r\n        return draftState;\r\n    }\r\n  });\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * init (reducer)\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst init = (\r\n  layout: PermissionsProps['layout'],\r\n  permissions: PermissionsProps['permissions']\r\n): State => {\r\n  const {\r\n    conditions,\r\n    sections: { collectionTypes, singleTypes, plugins, settings },\r\n  } = layout;\r\n\r\n  const layouts = {\r\n    collectionTypes,\r\n    singleTypes,\r\n    plugins: formatLayout(plugins, 'plugin'),\r\n    settings: formatLayout(settings, 'category'),\r\n  };\r\n\r\n  const defaultForm = {\r\n    collectionTypes: createDefaultCTForm(collectionTypes, conditions, permissions),\r\n    singleTypes: createDefaultCTForm(singleTypes, conditions, permissions),\r\n    plugins: createDefaultForm(layouts.plugins, conditions, permissions),\r\n    settings: createDefaultForm(layouts.settings, conditions, permissions),\r\n  };\r\n\r\n  return {\r\n    initialData: defaultForm,\r\n    modifiedData: defaultForm,\r\n    layouts,\r\n  };\r\n};\r\n\r\nexport { Permissions };\r\nexport type {\r\n  State,\r\n  OnChangeCollectionTypeRowLeftCheckboxAction,\r\n  OnChangeConditionsAction,\r\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\r\n};\r\n"],"names":["createContext","object","base","transform","isEqual","isObject","permissions","current","acc","createDefaultConditionsForm","isEmpty","merge","groupBy","has","omit","styled","Flex","jsx","Box","useIntl","jsxs","Checkbox","value","Typography","React","childrenForm","label","ActionRow","Fragment","Wrapper","get","hasAllActionsSelected","hasSomeActionsSelected","CaretDown","css","Button","Cog","produce","Modal","Breadcrumbs","Crumb","upperFirst","MultiSelectNested","capitalise","ChevronUp","ChevronDown","checkboxesState","Accordion","Grid","Tabs","set","cloneDeep"],"mappings":"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"}