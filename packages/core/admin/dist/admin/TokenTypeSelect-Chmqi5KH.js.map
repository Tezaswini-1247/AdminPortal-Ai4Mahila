{"version":3,"file":"TokenTypeSelect-Chmqi5KH.js","sources":["../../admin/src/pages/Settings/components/Tokens/FormHead.tsx","../../admin/src/pages/Settings/components/Tokens/TokenBox.tsx","../../admin/src/utils/locales.ts","../../admin/src/pages/Settings/pages/ApiTokens/EditView/utils/getDateOfExpiration.ts","../../admin/src/pages/Settings/utils/forms.ts","../../admin/src/pages/Settings/components/Tokens/LifeSpanInput.tsx","../../admin/src/pages/Settings/components/Tokens/TokenDescription.tsx","../../admin/src/pages/Settings/components/Tokens/TokenName.tsx","../../admin/src/pages/Settings/components/Tokens/TokenTypeSelect.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button, Dialog, Flex } from '@strapi/design-system';\r\nimport { Check, ArrowClockwise } from '@strapi/icons';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { BackButton } from '../../../../features/BackButton';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useRegenerateTokenMutation } from '../../../../services/transferTokens';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\ninterface RegenerateProps {\r\n  onRegenerate?: (newKey: string) => void;\r\n  url: string;\r\n}\r\n\r\nconst Regenerate = ({ onRegenerate, url }: RegenerateProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\r\n\r\n  const [isLoadingConfirmation, setIsLoadingConfirmation] = React.useState(false);\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const [regenerateToken] = useRegenerateTokenMutation();\r\n\r\n  const regenerateData = async () => {\r\n    try {\r\n      const res = await regenerateToken(url);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if (onRegenerate) {\r\n        onRegenerate(res.data.accessKey);\r\n      }\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'Something went wrong',\r\n        }),\r\n      });\r\n    } finally {\r\n      setIsLoadingConfirmation(false);\r\n    }\r\n  };\r\n\r\n  const handleConfirmRegeneration = async () => {\r\n    regenerateData();\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\r\n      <Dialog.Trigger>\r\n        <Button\r\n          startIcon={<ArrowClockwise />}\r\n          type=\"button\"\r\n          size=\"S\"\r\n          variant=\"tertiary\"\r\n          onClick={() => setShowConfirmDialog(true)}\r\n          name=\"regenerate\"\r\n        >\r\n          {formatMessage({\r\n            id: 'Settings.tokens.regenerate',\r\n            defaultMessage: 'Regenerate',\r\n          })}\r\n        </Button>\r\n      </Dialog.Trigger>\r\n\r\n      <ConfirmDialog\r\n        title={formatMessage({\r\n          id: 'Settings.tokens.RegenerateDialog.title',\r\n          defaultMessage: 'Regenerate token',\r\n        })}\r\n        endAction={\r\n          <Button\r\n            startIcon={<ArrowClockwise />}\r\n            loading={isLoadingConfirmation}\r\n            onClick={handleConfirmRegeneration}\r\n          >\r\n            {formatMessage({\r\n              id: 'Settings.tokens.Button.regenerate',\r\n              defaultMessage: 'Regenerate',\r\n            })}\r\n          </Button>\r\n        }\r\n      >\r\n        {formatMessage({\r\n          id: 'Settings.tokens.popUpWarning.message',\r\n          defaultMessage: 'Are you sure you want to regenerate this token?',\r\n        })}\r\n      </ConfirmDialog>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\ninterface Token {\r\n  id: Data.ID;\r\n  name: string;\r\n}\r\n\r\ninterface FormHeadProps<TToken extends Token | null> {\r\n  title: MessageDescriptor;\r\n  token: TToken;\r\n  canEditInputs: boolean;\r\n  canRegenerate: boolean;\r\n  setToken: (token: TToken) => void;\r\n  isSubmitting: boolean;\r\n  regenerateUrl: string;\r\n}\r\n\r\nexport const FormHead = <TToken extends Token | null>({\r\n  title,\r\n  token,\r\n  setToken,\r\n  canEditInputs,\r\n  canRegenerate,\r\n  isSubmitting,\r\n  regenerateUrl,\r\n}: FormHeadProps<TToken>) => {\r\n  const { formatMessage } = useIntl();\r\n  const handleRegenerate = (newKey: string) => {\r\n    setToken({\r\n      ...token,\r\n      accessKey: newKey,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Layouts.Header\r\n      title={token?.name || formatMessage(title)}\r\n      primaryAction={\r\n        canEditInputs ? (\r\n          <Flex gap={2}>\r\n            {canRegenerate && token?.id && (\r\n              <Regenerate\r\n                onRegenerate={handleRegenerate}\r\n                url={`${regenerateUrl}${token?.id ?? ''}`}\r\n              />\r\n            )}\r\n            <Button\r\n              disabled={isSubmitting}\r\n              loading={isSubmitting}\r\n              startIcon={<Check />}\r\n              type=\"submit\"\r\n              size=\"S\"\r\n            >\r\n              {formatMessage({\r\n                id: 'global.save',\r\n                defaultMessage: 'Save',\r\n              })}\r\n            </Button>\r\n          </Flex>\r\n        ) : (\r\n          canRegenerate &&\r\n          token?.id && (\r\n            <Regenerate\r\n              onRegenerate={handleRegenerate}\r\n              url={`${regenerateUrl}${token?.id ?? ''}`}\r\n            />\r\n          )\r\n        )\r\n      }\r\n      navigationAction={<BackButton />}\r\n      ellipsis\r\n    />\r\n  );\r\n};\r\n","import { IconButton } from '@strapi/design-system';\r\nimport { Duplicate, Key } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { ContentBox } from '../../../../components/ContentBox';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useClipboard } from '../../../../hooks/useClipboard';\r\n\r\ninterface TokenBoxProps {\r\n  token?: string;\r\n  tokenType: 'transfer-token' | 'api-token';\r\n}\r\n\r\nexport const TokenBox = ({ token, tokenType }: TokenBoxProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { trackUsage } = useTracking();\r\n\r\n  const { copy } = useClipboard();\r\n\r\n  const handleClick = (token: TokenBoxProps['token']) => async () => {\r\n    if (token) {\r\n      const didCopy = await copy(token);\r\n\r\n      if (didCopy) {\r\n        trackUsage('didCopyTokenKey', {\r\n          tokenType,\r\n        });\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'Settings.tokens.notification.copied' }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContentBox\r\n      endAction={\r\n        token && (\r\n          <span style={{ alignSelf: 'start' }}>\r\n            <IconButton\r\n              label={formatMessage({\r\n                id: 'app.component.CopyToClipboard.label',\r\n                defaultMessage: 'Copy to clipboard',\r\n              })}\r\n              onClick={handleClick(token)}\r\n              variant=\"ghost\"\r\n              type=\"button\"\r\n              style={{ padding: 0, height: '1.6rem' }}\r\n            >\r\n              <Duplicate />\r\n            </IconButton>\r\n          </span>\r\n        )\r\n      }\r\n      title={\r\n        token ||\r\n        formatMessage({\r\n          id: 'Settings.tokens.copy.editTitle',\r\n          defaultMessage: 'This token isn’t accessible anymore.',\r\n        })\r\n      }\r\n      subtitle={\r\n        token\r\n          ? formatMessage({\r\n              id: 'Settings.tokens.copy.lastWarning',\r\n              defaultMessage: 'Make sure to copy this token, you won’t be able to see it again!',\r\n            })\r\n          : formatMessage({\r\n              id: 'Settings.tokens.copy.editMessage',\r\n              defaultMessage: 'For security reasons, you can only see your token once.',\r\n            })\r\n      }\r\n      icon={<Key />}\r\n      iconBackground=\"neutral100\"\r\n    />\r\n  );\r\n};\r\n","import * as locales from 'date-fns/locale';\r\n\r\ntype LocaleName = keyof typeof locales;\r\n\r\n/**\r\n * Returns a valid date-fns locale name from a Strapi Admin locale.\r\n * Defaults to 'enUS' if the locale is not found.\r\n */\r\nconst getDateFnsLocaleName = (locale: string): LocaleName => {\r\n  if (Object.keys(locales).includes(locale)) {\r\n    return locale as LocaleName;\r\n  }\r\n\r\n  return 'enUS';\r\n};\r\n\r\nexport { getDateFnsLocaleName };\r\n","import { addDays, format } from 'date-fns';\r\nimport * as locales from 'date-fns/locale';\r\n\r\nimport { getDateFnsLocaleName } from '../../../../../../utils/locales';\r\n\r\nexport const getDateOfExpiration = (\r\n  createdAt: string,\r\n  duration: number | null,\r\n  language: string = 'en'\r\n) => {\r\n  if (duration && typeof duration === 'number') {\r\n    const durationInDays = duration / 24 / 60 / 60 / 1000;\r\n\r\n    return format(addDays(new Date(createdAt), durationInDays), 'PPP', {\r\n      locale: locales[getDateFnsLocaleName(language)],\r\n    });\r\n  }\r\n\r\n  return 'Unlimited';\r\n};\r\n","import { MessageDescriptor } from 'react-intl';\r\n\r\nconst isErrorMessageMessageDescriptor = (\r\n  message: string | MessageDescriptor\r\n): message is MessageDescriptor => {\r\n  return typeof message === 'object' && message !== null && 'id' in message;\r\n};\r\n\r\nexport { isErrorMessageMessageDescriptor };\r\n","import { SingleSelectOption, SingleSelect, Typography, Field } from '@strapi/design-system';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport { getDateOfExpiration } from '../../pages/ApiTokens/EditView/utils/getDateOfExpiration';\r\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\r\n\r\nimport type { ApiToken } from '../../../../../../shared/contracts/api-token';\r\nimport type { TransferToken } from '../../../../../../shared/contracts/transfer';\r\n\r\ninterface LifeSpanInputProps {\r\n  error?: string | MessageDescriptor;\r\n  value?: string | number | null;\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  isCreating: boolean;\r\n  token: Partial<TransferToken> | Partial<ApiToken> | null;\r\n}\r\n\r\nexport const LifeSpanInput = ({\r\n  token,\r\n  error,\r\n  value,\r\n  onChange,\r\n  isCreating,\r\n}: LifeSpanInputProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <>\r\n      <Field.Root\r\n        error={\r\n          error\r\n            ? formatMessage(\r\n                isErrorMessageMessageDescriptor(error)\r\n                  ? error\r\n                  : { id: error, defaultMessage: error }\r\n              )\r\n            : undefined\r\n        }\r\n        name=\"lifespan\"\r\n        required\r\n      >\r\n        <Field.Label>\r\n          {formatMessage({\r\n            id: 'Settings.tokens.form.duration',\r\n            defaultMessage: 'Token duration',\r\n          })}\r\n        </Field.Label>\r\n        <SingleSelect\r\n          value={value}\r\n          onChange={(value) => {\r\n            // @ts-expect-error – DS v2 won't support number types for select\r\n            onChange({ target: { name: 'lifespan', value } });\r\n          }}\r\n          disabled={!isCreating}\r\n          placeholder=\"Select\"\r\n        >\r\n          <SingleSelectOption value=\"604800000\">\r\n            {formatMessage({\r\n              id: 'Settings.tokens.duration.7-days',\r\n              defaultMessage: '7 days',\r\n            })}\r\n          </SingleSelectOption>\r\n          <SingleSelectOption value=\"2592000000\">\r\n            {formatMessage({\r\n              id: 'Settings.tokens.duration.30-days',\r\n              defaultMessage: '30 days',\r\n            })}\r\n          </SingleSelectOption>\r\n          <SingleSelectOption value=\"7776000000\">\r\n            {formatMessage({\r\n              id: 'Settings.tokens.duration.90-days',\r\n              defaultMessage: '90 days',\r\n            })}\r\n          </SingleSelectOption>\r\n          <SingleSelectOption value=\"0\">\r\n            {formatMessage({\r\n              id: 'Settings.tokens.duration.unlimited',\r\n              defaultMessage: 'Unlimited',\r\n            })}\r\n          </SingleSelectOption>\r\n        </SingleSelect>\r\n        <Field.Error />\r\n      </Field.Root>\r\n      <Typography variant=\"pi\" textColor=\"neutral600\">\r\n        {!isCreating &&\r\n          `${formatMessage({\r\n            id: 'Settings.tokens.duration.expiration-date',\r\n            defaultMessage: 'Expiration date',\r\n            // @ts-expect-error – TODO: fix this.\r\n          })}: ${getDateOfExpiration(token?.createdAt, parseInt(value ?? '', 10))}`}\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n","import { Field, Textarea, TextareaProps } from '@strapi/design-system';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\r\n\r\ninterface TokenDescriptionProps extends Pick<TextareaProps, 'onChange' | 'value'> {\r\n  error?: string | MessageDescriptor;\r\n  canEditInputs: boolean;\r\n}\r\n\r\nexport const TokenDescription = ({\r\n  error,\r\n  value,\r\n  onChange,\r\n  canEditInputs,\r\n}: TokenDescriptionProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Field.Root\r\n      name=\"description\"\r\n      error={\r\n        error\r\n          ? formatMessage(\r\n              isErrorMessageMessageDescriptor(error)\r\n                ? error\r\n                : {\r\n                    id: error,\r\n                    defaultMessage: error,\r\n                  }\r\n            )\r\n          : undefined\r\n      }\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'Settings.tokens.form.description',\r\n          defaultMessage: 'Description',\r\n        })}\r\n      </Field.Label>\r\n      <Textarea onChange={onChange} disabled={!canEditInputs} value={value} />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { Field, TextInput, TextInputProps } from '@strapi/design-system';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\r\n\r\ninterface TokenNameProps extends Pick<TextInputProps, 'onChange' | 'value'> {\r\n  error?: string | MessageDescriptor;\r\n  canEditInputs: boolean;\r\n}\r\n\r\nexport const TokenName = ({ error, value, onChange, canEditInputs }: TokenNameProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Field.Root\r\n      name=\"name\"\r\n      error={\r\n        error\r\n          ? formatMessage(\r\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\r\n            )\r\n          : undefined\r\n      }\r\n      required\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'Settings.tokens.form.name',\r\n          defaultMessage: 'Name',\r\n        })}\r\n      </Field.Label>\r\n      <TextInput onChange={onChange} value={value} disabled={!canEditInputs} />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n","import { SingleSelectOption, SingleSelect, SingleSelectProps, Field } from '@strapi/design-system';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\r\n\r\ninterface TokenTypeSelectProps extends Pick<SingleSelectProps, 'onChange' | 'value'> {\r\n  name?: string;\r\n  options: Array<{\r\n    label: MessageDescriptor;\r\n    value: string;\r\n  }>;\r\n  error?: string | MessageDescriptor;\r\n  canEditInputs: boolean;\r\n  label: MessageDescriptor;\r\n}\r\n\r\nexport const TokenTypeSelect = ({\r\n  name = 'type',\r\n  error,\r\n  value,\r\n  onChange,\r\n  canEditInputs,\r\n  options = [],\r\n  label,\r\n}: TokenTypeSelectProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Field.Root\r\n      error={\r\n        error\r\n          ? formatMessage(\r\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\r\n            )\r\n          : undefined\r\n      }\r\n      name={name}\r\n      required\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: label.id,\r\n          defaultMessage: label.defaultMessage,\r\n        })}\r\n      </Field.Label>\r\n      <SingleSelect\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder=\"Select\"\r\n        disabled={!canEditInputs}\r\n      >\r\n        {options &&\r\n          options.map(({ value, label }) => (\r\n            <SingleSelectOption key={value} value={value}>\r\n              {formatMessage(label)}\r\n            </SingleSelectOption>\r\n          ))}\r\n      </SingleSelect>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n"],"names":["useIntl","React","useNotification","useAPIErrorHandler","useRegenerateTokenMutation","Dialog","jsx","Button","ArrowClockwise","ConfirmDialog","Layouts","jsxs","Flex","Check","BackButton","useTracking","useClipboard","token","ContentBox","IconButton","Duplicate","Key","locales","format","addDays","Fragment","Field","SingleSelect","value","SingleSelectOption","Typography","Textarea","TextInput","label"],"mappings":"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"}