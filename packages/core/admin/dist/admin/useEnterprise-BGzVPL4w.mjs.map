{"version":3,"file":"useEnterprise-BGzVPL4w.mjs","sources":["../../admin/src/hooks/useEnterprise.ts"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { useCallbackRef } from '@strapi/design-system';\r\n\r\nfunction isEnterprise() {\r\n  return window.strapi.isEE;\r\n}\r\n\r\nexport interface UseEnterpriseOptions<TCEData, TEEData, TDefaultValue, TCombinedValue> {\r\n  defaultValue?: TDefaultValue;\r\n  combine?: (ceData: TCEData, eeData: TEEData) => TCombinedValue;\r\n  enabled?: boolean;\r\n}\r\n\r\ntype UseEnterpriseReturn<TCEData, TEEData, TDefaultValue, TCombinedValue> =\r\n  TDefaultValue extends null\r\n    ? TCEData | TEEData | TCombinedValue | null\r\n    : TCEData | TEEData | TCombinedValue | TDefaultValue;\r\n\r\nexport const useEnterprise = <\r\n  TCEData,\r\n  TEEData = TCEData,\r\n  TCombinedValue = TEEData,\r\n  TDefaultValue = TCEData,\r\n>(\r\n  ceData: TCEData,\r\n  eeCallback: () => Promise<TEEData>,\r\n  opts: UseEnterpriseOptions<TCEData, TEEData, TDefaultValue, TCombinedValue> = {}\r\n): UseEnterpriseReturn<TCEData, TEEData, TDefaultValue, TCombinedValue> => {\r\n  const { defaultValue = null, combine = (_ceData, eeData) => eeData, enabled = true } = opts;\r\n  const eeCallbackRef = useCallbackRef(eeCallback);\r\n  const combineCallbackRef = useCallbackRef(combine);\r\n\r\n  // We have to use a nested object here, because functions (e.g. Components)\r\n  // can not be stored as value directly\r\n  const [{ data }, setData] = React.useState<{\r\n    data: TCEData | TEEData | TDefaultValue | TCombinedValue | null;\r\n  }>({\r\n    data: isEnterprise() && enabled ? defaultValue : ceData,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    async function importEE() {\r\n      const eeData = await eeCallbackRef();\r\n      const combinedValue = combineCallbackRef(ceData, eeData);\r\n\r\n      setData({ data: combinedValue ? combinedValue : eeData });\r\n    }\r\n\r\n    if (isEnterprise() && enabled) {\r\n      importEE();\r\n    }\r\n  }, [ceData, eeCallbackRef, combineCallbackRef, enabled]);\r\n\r\n  // @ts-expect-error â€“ the hook type assertion works in practice. But seems to have issues here...\r\n  return data;\r\n};\r\n"],"names":[],"mappings":";;;AAIA,SAAS,YAAe,GAAA;AACtB,EAAA,OAAO,OAAO,MAAO,CAAA,IAAA;AACvB;AAaO,MAAM,gBAAgB,CAM3B,MAAA,EACA,UACA,EAAA,IAAA,GAA8E,EACL,KAAA;AACzE,EAAM,MAAA,EAAE,YAAe,GAAA,IAAA,EAAM,OAAU,GAAA,CAAC,SAAS,MAAW,KAAA,MAAA,EAAQ,OAAU,GAAA,IAAA,EAAS,GAAA,IAAA;AACvF,EAAM,MAAA,aAAA,GAAgB,eAAe,UAAU,CAAA;AAC/C,EAAM,MAAA,kBAAA,GAAqB,eAAe,OAAO,CAAA;AAIjD,EAAA,MAAM,CAAC,EAAE,IAAA,IAAQ,OAAO,CAAA,GAAI,MAAM,QAE/B,CAAA;AAAA,IACD,IAAM,EAAA,YAAA,EAAkB,IAAA,OAAA,GAAU,YAAe,GAAA;AAAA,GAClD,CAAA;AAED,EAAA,KAAA,CAAM,UAAU,MAAM;AACpB,IAAA,eAAe,QAAW,GAAA;AACxB,MAAM,MAAA,MAAA,GAAS,MAAM,aAAc,EAAA;AACnC,MAAM,MAAA,aAAA,GAAgB,kBAAmB,CAAA,MAAA,EAAQ,MAAM,CAAA;AAEvD,MAAA,OAAA,CAAQ,EAAE,IAAA,EAAM,aAAgB,GAAA,aAAA,GAAgB,QAAQ,CAAA;AAAA;AAG1D,IAAI,IAAA,YAAA,MAAkB,OAAS,EAAA;AAC7B,MAAS,QAAA,EAAA;AAAA;AACX,KACC,CAAC,MAAA,EAAQ,aAAe,EAAA,kBAAA,EAAoB,OAAO,CAAC,CAAA;AAGvD,EAAO,OAAA,IAAA;AACT;;;;"}