{"version":3,"file":"Table-Tm5XxNoq.mjs","sources":["../../admin/src/components/RelativeTime.tsx","../../admin/src/pages/Settings/components/Tokens/Table.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\r\n\r\ninterface CustomInterval {\r\n  unit: keyof Duration;\r\n  text: string;\r\n  threshold: number;\r\n}\r\n\r\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\r\n  timestamp: Date;\r\n  customIntervals?: CustomInterval[];\r\n}\r\n\r\n/**\r\n * Displays the relative time between a given timestamp and the current time.\r\n * You can display a custom message for given time intervals by passing an array of custom intervals.\r\n *\r\n * @example\r\n * ```jsx\r\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\r\n * <RelativeTime\r\n *  timestamp={new Date('2021-01-01')}\r\n *  customIntervals={[\r\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\r\n *  ]}\r\n * ```\r\n */\r\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\r\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\r\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\r\n\r\n    /**\r\n     * TODO: make this auto-update, like a clock.\r\n     */\r\n    const interval = intervalToDuration({\r\n      start: timestamp,\r\n      end: Date.now(),\r\n      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.\r\n    }) as Required<Duration>;\r\n\r\n    const unit = intervals.find((intervalUnit) => {\r\n      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\r\n    })!;\r\n\r\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\r\n\r\n    // Display custom text if interval is less than the threshold\r\n    const customInterval = customIntervals.find(\r\n      (custom) => interval[custom.unit] < custom.threshold\r\n    );\r\n\r\n    const displayText = customInterval\r\n      ? customInterval.text\r\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\r\n\r\n    return (\r\n      <time\r\n        ref={forwardedRef}\r\n        dateTime={timestamp.toISOString()}\r\n        role=\"time\"\r\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\r\n        {...restProps}\r\n      >\r\n        {displayText}\r\n      </time>\r\n    );\r\n  }\r\n);\r\n\r\nexport { RelativeTime };\r\nexport type { CustomInterval, RelativeTimeProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  IconButton,\r\n  Typography,\r\n  useCollator,\r\n  Dialog,\r\n  LinkButton,\r\n} from '@strapi/design-system';\r\nimport { Pencil, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { ApiToken } from '../../../../../../shared/contracts/api-token';\r\nimport { SanitizedTransferToken } from '../../../../../../shared/contracts/transfer';\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { RelativeTime } from '../../../../components/RelativeTime';\r\nimport { Table as TableImpl } from '../../../../components/Table';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Table\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TableProps\r\n  extends Pick<TableImpl.Props<SanitizedTransferToken | ApiToken>, 'headers' | 'isLoading'> {\r\n  onConfirmDelete: (id: Data.ID) => void;\r\n  permissions: {\r\n    canRead: boolean;\r\n    canDelete: boolean;\r\n    canUpdate: boolean;\r\n  };\r\n  tokens: SanitizedTransferToken[] | ApiToken[];\r\n  tokenType: 'api-token' | 'transfer-token';\r\n}\r\n\r\nconst Table = ({\r\n  permissions,\r\n  headers = [],\r\n  isLoading = false,\r\n  tokens = [],\r\n  onConfirmDelete,\r\n  tokenType,\r\n}: TableProps) => {\r\n  const [{ query }] = useQueryParams<{ sort?: string }>();\r\n  const { formatMessage, locale } = useIntl();\r\n  const [, sortOrder] = query && query.sort ? query.sort.split(':') : [undefined, 'ASC'];\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const formatter = useCollator(locale);\r\n\r\n  const sortedTokens = [...tokens].sort((a, b) => {\r\n    return sortOrder === 'DESC'\r\n      ? formatter.compare(b.name, a.name)\r\n      : formatter.compare(a.name, b.name);\r\n  });\r\n\r\n  const { canDelete, canUpdate, canRead } = permissions;\r\n\r\n  const handleRowClick = (id: Data.ID) => () => {\r\n    if (canRead) {\r\n      trackUsage('willEditTokenFromList', {\r\n        tokenType,\r\n      });\r\n      navigate(id.toString());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableImpl.Root headers={headers} rows={sortedTokens} isLoading={isLoading}>\r\n      <TableImpl.Content>\r\n        <TableImpl.Head>\r\n          {headers.map((header) => (\r\n            <TableImpl.HeaderCell key={header.name} {...header} />\r\n          ))}\r\n        </TableImpl.Head>\r\n        <TableImpl.Empty />\r\n        <TableImpl.Loading />\r\n        <TableImpl.Body>\r\n          {sortedTokens.map((token) => (\r\n            <TableImpl.Row key={token.id} onClick={handleRowClick(token.id)}>\r\n              <TableImpl.Cell maxWidth=\"25rem\">\r\n                <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\r\n                  {token.name}\r\n                </Typography>\r\n              </TableImpl.Cell>\r\n              <TableImpl.Cell maxWidth=\"25rem\">\r\n                <Typography textColor=\"neutral800\" ellipsis>\r\n                  {token.description}\r\n                </Typography>\r\n              </TableImpl.Cell>\r\n              <TableImpl.Cell>\r\n                <Typography textColor=\"neutral800\">\r\n                  {/* @ts-expect-error One of the tokens doesn't have createdAt */}\r\n                  <RelativeTime timestamp={new Date(token.createdAt)} />\r\n                </Typography>\r\n              </TableImpl.Cell>\r\n              <TableImpl.Cell>\r\n                {token.lastUsedAt && (\r\n                  <Typography textColor=\"neutral800\">\r\n                    <RelativeTime\r\n                      timestamp={new Date(token.lastUsedAt)}\r\n                      customIntervals={[\r\n                        {\r\n                          unit: 'hours',\r\n                          threshold: 1,\r\n                          text: formatMessage({\r\n                            id: 'Settings.apiTokens.lastHour',\r\n                            defaultMessage: 'last hour',\r\n                          }),\r\n                        },\r\n                      ]}\r\n                    />\r\n                  </Typography>\r\n                )}\r\n              </TableImpl.Cell>\r\n              {canUpdate || canRead || canDelete ? (\r\n                <TableImpl.Cell>\r\n                  <Flex justifyContent=\"end\">\r\n                    {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\r\n                    {canDelete && (\r\n                      <DeleteButton\r\n                        tokenName={token.name}\r\n                        onClickDelete={() => onConfirmDelete?.(token.id)}\r\n                        tokenType={tokenType}\r\n                      />\r\n                    )}\r\n                  </Flex>\r\n                </TableImpl.Cell>\r\n              ) : null}\r\n            </TableImpl.Row>\r\n          ))}\r\n        </TableImpl.Body>\r\n      </TableImpl.Content>\r\n    </TableImpl.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CRUD Buttons\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst MESSAGES_MAP = {\r\n  edit: {\r\n    id: 'app.component.table.edit',\r\n    defaultMessage: 'Edit {target}',\r\n  },\r\n  read: {\r\n    id: 'app.component.table.read',\r\n    defaultMessage: 'Read {target}',\r\n  },\r\n};\r\n\r\ninterface DefaultButtonProps {\r\n  tokenName: string;\r\n  tokenId: Data.ID;\r\n  buttonType?: 'edit' | 'read';\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst DefaultButton = ({\r\n  tokenName,\r\n  tokenId,\r\n  buttonType = 'edit',\r\n  children,\r\n}: DefaultButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <LinkButtonStyled\r\n      tag={NavLink}\r\n      to={tokenId.toString()}\r\n      onClick={(e: React.MouseEvent) => e.stopPropagation()}\r\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\r\n      variant=\"ghost\"\r\n      size=\"S\"\r\n    >\r\n      {children}\r\n    </LinkButtonStyled>\r\n  );\r\n};\r\n\r\nconst LinkButtonStyled = styled(LinkButton)`\r\n  padding: 0.7rem;\r\n\r\n  & > span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\ninterface DeleteButtonProps extends Pick<ButtonProps, 'tokenName'>, Pick<TableProps, 'tokenType'> {\r\n  onClickDelete: () => void;\r\n}\r\n\r\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }: DeleteButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const handleClickDelete = () => {\r\n    trackUsage('willDeleteToken', {\r\n      tokenType,\r\n    });\r\n    onClickDelete();\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root>\r\n      <Box<'div'> paddingLeft={1} onClick={(e) => e.stopPropagation()}>\r\n        <Dialog.Trigger>\r\n          <IconButton\r\n            label={formatMessage(\r\n              {\r\n                id: 'global.delete-target',\r\n                defaultMessage: 'Delete {target}',\r\n              },\r\n              { target: `${tokenName}` }\r\n            )}\r\n            name=\"delete\"\r\n            variant=\"ghost\"\r\n          >\r\n            <Trash />\r\n          </IconButton>\r\n        </Dialog.Trigger>\r\n        <ConfirmDialog onConfirm={handleClickDelete} />\r\n      </Box>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\ninterface ButtonProps {\r\n  tokenName: string;\r\n  tokenId: Data.ID;\r\n}\r\n\r\nconst UpdateButton = ({ tokenName, tokenId }: ButtonProps) => {\r\n  return (\r\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\r\n      <Pencil />\r\n    </DefaultButton>\r\n  );\r\n};\r\n\r\nexport { Table };\r\nexport type { TableProps };\r\n"],"names":["TableImpl"],"mappings":"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"}