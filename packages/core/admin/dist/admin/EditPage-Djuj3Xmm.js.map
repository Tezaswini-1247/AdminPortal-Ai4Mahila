{"version":3,"file":"EditPage-Djuj3Xmm.js","sources":["../../admin/src/pages/Settings/pages/Users/EditPage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport pick from 'lodash/pick';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMatch, useNavigate } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { Update } from '../../../../../../shared/contracts/user';\r\nimport { Form, FormHelpers } from '../../../../components/Form';\r\nimport { InputRenderer } from '../../../../components/FormInputs/Renderer';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { BackButton } from '../../../../features/BackButton';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport { selectAdminPermissions } from '../../../../selectors';\r\nimport { useAdminUsers, useUpdateUserMutation } from '../../../../services/users';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../utils/translatedErrors';\r\nimport { getDisplayName } from '../../../../utils/users';\r\n\r\nimport { MagicLinkCE } from './components/MagicLinkCE';\r\nimport { SelectRoles } from './components/SelectRoles';\r\nimport { COMMON_USER_SCHEMA } from './utils/validation';\r\n\r\nconst EDIT_VALIDATION_SCHEMA = yup.object().shape({\r\n  ...COMMON_USER_SCHEMA,\r\n  isActive: yup.bool(),\r\n  roles: yup\r\n    .array()\r\n    .min(1, {\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    })\r\n    .required({\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    }),\r\n});\r\n\r\nconst fieldsToPick = ['email', 'firstname', 'lastname', 'username', 'isActive', 'roles'] as const;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst EditPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const match = useMatch('/settings/users/:id');\r\n  const id = match?.params?.id ?? '';\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const MagicLink = useEnterprise(\r\n    MagicLinkCE,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\r\n        )\r\n      ).MagicLinkEE\r\n  );\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const permissions = useTypedSelector(selectAdminPermissions);\r\n\r\n  const {\r\n    isLoading: isLoadingRBAC,\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC({\r\n    read: permissions.settings?.users.read ?? [],\r\n    update: permissions.settings?.users.update ?? [],\r\n  });\r\n\r\n  const [updateUser] = useUpdateUserMutation();\r\n\r\n  const {\r\n    data,\r\n    error,\r\n    isLoading: isLoadingAdminUsers,\r\n  } = useAdminUsers(\r\n    { id },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const [user] = data?.users ?? [];\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      // Redirect the user to the homepage if is not allowed to read\r\n      if (error.name === 'UnauthorizedError') {\r\n        toggleNotification({\r\n          type: 'info',\r\n          message: formatMessage({\r\n            id: 'notification.permission.not-allowed-read',\r\n            defaultMessage: 'You are not allowed to see this document',\r\n          }),\r\n        });\r\n\r\n        navigate('/');\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(error),\r\n        });\r\n      }\r\n    }\r\n  }, [error, formatAPIError, formatMessage, navigate, toggleNotification]);\r\n\r\n  const isLoading = isLoadingAdminUsers || !MagicLink || isLoadingRBAC;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  type InitialData = Pick<Update.Request['body'], (typeof fieldsToPick)[number]> & {\r\n    confirmPassword: string;\r\n    password: string;\r\n  };\r\n\r\n  const initialData = {\r\n    ...pick(user, fieldsToPick),\r\n    roles: user.roles.map(({ id }) => id),\r\n    password: '',\r\n    confirmPassword: '',\r\n  } satisfies InitialData;\r\n\r\n  const handleSubmit = async (body: InitialData, actions: FormHelpers<InitialData>) => {\r\n    const { confirmPassword: _confirmPassword, ...bodyRest } = body;\r\n\r\n    const res = await updateUser({\r\n      id,\r\n      ...bodyRest,\r\n    });\r\n\r\n    if ('error' in res && isBaseQueryError(res.error)) {\r\n      if (res.error.name === 'ValidationError') {\r\n        actions.setErrors(formatValidationErrors(res.error));\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(res.error),\r\n      });\r\n    } else {\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\r\n      });\r\n\r\n      actions.setValues({\r\n        ...pick(body, fieldsToPick),\r\n        password: '',\r\n        confirmPassword: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page.Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Users',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Form\r\n        method=\"PUT\"\r\n        onSubmit={handleSubmit}\r\n        initialValues={initialData}\r\n        validationSchema={EDIT_VALIDATION_SCHEMA}\r\n      >\r\n        {({ isSubmitting, modified }) => {\r\n          return (\r\n            <>\r\n              <Layouts.Header\r\n                primaryAction={\r\n                  <Button\r\n                    disabled={isSubmitting || !canUpdate || !modified}\r\n                    startIcon={<Check />}\r\n                    loading={isSubmitting}\r\n                    type=\"submit\"\r\n                  >\r\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n                  </Button>\r\n                }\r\n                title={formatMessage(\r\n                  {\r\n                    id: 'app.containers.Users.EditPage.header.label',\r\n                    defaultMessage: 'Edit {name}',\r\n                  },\r\n                  {\r\n                    // @ts-expect-error â€“ issues with the Entity ID type, still.\r\n                    name: getDisplayName(initialData),\r\n                  }\r\n                )}\r\n                navigationAction={<BackButton fallback=\"../users\" />}\r\n              />\r\n              <Layouts.Content>\r\n                {user?.registrationToken && (\r\n                  <Box paddingBottom={6}>\r\n                    <MagicLink registrationToken={user.registrationToken} />\r\n                  </Box>\r\n                )}\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\r\n                  <Box\r\n                    background=\"neutral0\"\r\n                    hasRadius\r\n                    shadow=\"filterShadow\"\r\n                    paddingTop={6}\r\n                    paddingBottom={6}\r\n                    paddingLeft={7}\r\n                    paddingRight={7}\r\n                  >\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                      <Typography variant=\"delta\" tag=\"h2\">\r\n                        {formatMessage({\r\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\r\n                          defaultMessage: 'Details',\r\n                        })}\r\n                      </Typography>\r\n                      <Grid.Root gap={5}>\r\n                        {LAYOUT.map((row) =>\r\n                          row.map(({ size, label, ...field }) => {\r\n                            return (\r\n                              <Grid.Item\r\n                                key={field.name}\r\n                                col={size}\r\n                                direction=\"column\"\r\n                                alignItems=\"stretch\"\r\n                              >\r\n                                <InputRenderer\r\n                                  {...field}\r\n                                  disabled={!canUpdate}\r\n                                  label={formatMessage(label)}\r\n                                  placeholder={\r\n                                    'placeholder' in field\r\n                                      ? formatMessage(field.placeholder)\r\n                                      : undefined\r\n                                  }\r\n                                />\r\n                              </Grid.Item>\r\n                            );\r\n                          })\r\n                        )}\r\n                      </Grid.Root>\r\n                    </Flex>\r\n                  </Box>\r\n                  <Box\r\n                    background=\"neutral0\"\r\n                    hasRadius\r\n                    shadow=\"filterShadow\"\r\n                    paddingTop={6}\r\n                    paddingBottom={6}\r\n                    paddingLeft={7}\r\n                    paddingRight={7}\r\n                  >\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                      <Typography variant=\"delta\" tag=\"h2\">\r\n                        {formatMessage({\r\n                          id: 'global.roles',\r\n                          defaultMessage: \"User's role\",\r\n                        })}\r\n                      </Typography>\r\n                      <Grid.Root gap={5}>\r\n                        <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n                          <SelectRoles disabled={!canUpdate} />\r\n                        </Grid.Item>\r\n                      </Grid.Root>\r\n                    </Flex>\r\n                  </Box>\r\n                </Flex>\r\n              </Layouts.Content>\r\n            </>\r\n          );\r\n        }}\r\n      </Form>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditPage LAYOUT\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst LAYOUT = [\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.firstname.label',\r\n        defaultMessage: 'First name',\r\n      },\r\n      name: 'firstname',\r\n      placeholder: {\r\n        id: 'Auth.form.firstname.placeholder',\r\n        defaultMessage: 'e.g. Kai',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n      required: true,\r\n    },\r\n    {\r\n      label: {\r\n        id: 'Auth.form.lastname.label',\r\n        defaultMessage: 'Last name',\r\n      },\r\n      name: 'lastname',\r\n      placeholder: {\r\n        id: 'Auth.form.lastname.placeholder',\r\n        defaultMessage: 'e.g. Doe',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.email.label',\r\n        defaultMessage: 'Email',\r\n      },\r\n      name: 'email',\r\n      placeholder: {\r\n        id: 'Auth.form.email.placeholder',\r\n        defaultMessage: 'e.g. kai.doe@strapi.io',\r\n      },\r\n      type: 'email' as const,\r\n      size: 6,\r\n      required: true,\r\n    },\r\n    {\r\n      label: {\r\n        id: 'Auth.form.username.label',\r\n        defaultMessage: 'Username',\r\n      },\r\n      name: 'username',\r\n      placeholder: {\r\n        id: 'Auth.form.username.placeholder',\r\n        defaultMessage: 'e.g. Kai_Doe',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      autoComplete: 'new-password',\r\n      label: {\r\n        id: 'global.password',\r\n        defaultMessage: 'Password',\r\n      },\r\n      name: 'password',\r\n      type: 'password' as const,\r\n      size: 6,\r\n    },\r\n    {\r\n      autoComplete: 'new-password',\r\n      label: {\r\n        id: 'Auth.form.confirmPassword.label',\r\n        defaultMessage: 'Password confirmation',\r\n      },\r\n      name: 'confirmPassword',\r\n      type: 'password' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.active.label',\r\n        defaultMessage: 'Active',\r\n      },\r\n      name: 'isActive',\r\n      type: 'boolean' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n];\r\n\r\nconst ProtectedEditPage = () => {\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { EditPage, ProtectedEditPage };\r\n"],"names":["yup","COMMON_USER_SCHEMA","translatedErrors","useIntl","useMatch","useNavigate","useNotification","useEnterprise","MagicLinkCE","useAPIErrorHandler","useTypedSelector","selectAdminPermissions","useRBAC","useUpdateUserMutation","useAdminUsers","React","jsx","Page","pick","id","isBaseQueryError","jsxs","Form","Fragment","Layouts","Button","Check","getDisplayName","BackButton","Box","Flex","Typography","Grid","InputRenderer","SelectRoles"],"mappings":"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"}