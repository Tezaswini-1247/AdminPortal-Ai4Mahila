{"version":3,"file":"ListView-7r-R-Igx.js","sources":["../../admin/src/pages/Settings/pages/TransferTokens/ListView.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { EmptyStateLayout, LinkButton } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { Data } from '@strapi/types';\r\nimport * as qs from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useOnce } from '../../../../hooks/useOnce';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport {\r\n  useDeleteTransferTokenMutation,\r\n  useGetTransferTokensQuery,\r\n} from '../../../../services/transferTokens';\r\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\r\nimport { Table } from '../../components/Tokens/Table';\r\n\r\nconst tableHeaders = [\r\n  {\r\n    name: 'name',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.name',\r\n      defaultMessage: 'Name',\r\n    },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'description',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.description',\r\n      defaultMessage: 'Description',\r\n    },\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: 'createdAt',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.createdAt',\r\n      defaultMessage: 'Created at',\r\n    },\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: 'lastUsedAt',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.lastUsedAt',\r\n      defaultMessage: 'Last used',\r\n    },\r\n    sortable: false,\r\n  },\r\n] as const;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ListView = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\r\n  );\r\n  const {\r\n    isLoading: isLoadingRBAC,\r\n    allowedActions: { canCreate, canDelete, canUpdate, canRead },\r\n  } = useRBAC(permissions);\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  React.useEffect(() => {\r\n    navigate({ search: qs.stringify({ sort: 'name:ASC' }, { encode: false }) });\r\n  }, [navigate]);\r\n\r\n  useOnce(() => {\r\n    trackUsage('willAccessTokenList', {\r\n      tokenType: TRANSFER_TOKEN_TYPE,\r\n    });\r\n  });\r\n\r\n  const headers = tableHeaders.map((header) => ({\r\n    ...header,\r\n    label: formatMessage(header.label),\r\n  }));\r\n\r\n  const {\r\n    data: transferTokens = [],\r\n    isLoading: isLoadingTokens,\r\n    error,\r\n  } = useGetTransferTokensQuery(undefined, {\r\n    skip: !canRead,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (transferTokens) {\r\n      trackUsage('didAccessTokenList', {\r\n        number: transferTokens.length,\r\n        tokenType: TRANSFER_TOKEN_TYPE,\r\n      });\r\n    }\r\n  }, [trackUsage, transferTokens]);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const [deleteToken] = useDeleteTransferTokenMutation();\r\n\r\n  const handleDelete = async (id: Data.ID) => {\r\n    try {\r\n      const res = await deleteToken(id);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isLoading = isLoadingTokens || isLoadingRBAC;\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Transfer Tokens',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        title={formatMessage({\r\n          id: 'Settings.transferTokens.title',\r\n          defaultMessage: 'Transfer Tokens',\r\n        })}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.transferTokens.description',\r\n          defaultMessage: '\"List of generated transfer tokens\"', // TODO change this message\r\n        })}\r\n        primaryAction={\r\n          canCreate ? (\r\n            <LinkButton\r\n              role=\"button\"\r\n              tag={Link}\r\n              data-testid=\"create-transfer-token-button\"\r\n              startIcon={<Plus />}\r\n              size=\"S\"\r\n              onClick={() =>\r\n                trackUsage('willAddTokenFromList', {\r\n                  tokenType: TRANSFER_TOKEN_TYPE,\r\n                })\r\n              }\r\n              to=\"/settings/transfer-tokens/create\"\r\n            >\r\n              {formatMessage({\r\n                id: 'Settings.transferTokens.create',\r\n                defaultMessage: 'Create new Transfer Token',\r\n              })}\r\n            </LinkButton>\r\n          ) : undefined\r\n        }\r\n      />\r\n      {!canRead ? (\r\n        <Page.NoPermissions />\r\n      ) : (\r\n        <Page.Main aria-busy={isLoading}>\r\n          <Layouts.Content>\r\n            {transferTokens.length > 0 && (\r\n              <Table\r\n                permissions={{ canRead, canDelete, canUpdate }}\r\n                headers={headers}\r\n                isLoading={isLoading}\r\n                onConfirmDelete={handleDelete}\r\n                tokens={transferTokens}\r\n                tokenType={TRANSFER_TOKEN_TYPE}\r\n              />\r\n            )}\r\n            {canCreate && transferTokens.length === 0 ? (\r\n              <EmptyStateLayout\r\n                action={\r\n                  <LinkButton\r\n                    tag={Link}\r\n                    variant=\"secondary\"\r\n                    startIcon={<Plus />}\r\n                    to=\"/settings/transfer-tokens/create\"\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'Settings.transferTokens.addNewToken',\r\n                      defaultMessage: 'Add new Transfer Token',\r\n                    })}\r\n                  </LinkButton>\r\n                }\r\n                icon={<EmptyDocuments width=\"16rem\" />}\r\n                content={formatMessage({\r\n                  id: 'Settings.transferTokens.addFirstToken',\r\n                  defaultMessage: 'Add your first Transfer Token',\r\n                })}\r\n              />\r\n            ) : null}\r\n            {!canCreate && transferTokens.length === 0 ? (\r\n              <EmptyStateLayout\r\n                icon={<EmptyDocuments width=\"16rem\" />}\r\n                content={formatMessage({\r\n                  id: 'Settings.transferTokens.emptyStateLayout',\r\n                  defaultMessage: 'You donâ€™t have any content yet...',\r\n                })}\r\n              />\r\n            ) : null}\r\n          </Layouts.Content>\r\n        </Page.Main>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListView = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListView />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListView, ProtectedListView };\r\n"],"names":["useIntl","useNotification","useTypedSelector","useRBAC","useNavigate","useTracking","useAPIErrorHandler","React","qs","useOnce","TRANSFER_TOKEN_TYPE","transferTokens","useGetTransferTokensQuery","useDeleteTransferTokenMutation","jsxs","Fragment","jsx","Page","Layouts","LinkButton","Link","Plus","Table","EmptyStateLayout","EmptyDocuments"],"mappings":"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"}