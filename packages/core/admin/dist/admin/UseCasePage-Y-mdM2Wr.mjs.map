{"version":3,"file":"UseCasePage-Y-mdM2Wr.mjs","sources":["../../admin/src/pages/UseCasePage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Main,\r\n  SingleSelectOption,\r\n  SingleSelect,\r\n  TextButton,\r\n  TextInput,\r\n  Typography,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { parse } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport { PrivateRoute } from '../components/PrivateRoute';\r\nimport { Logo } from '../components/UnauthenticatedLogo';\r\nimport { useAuth } from '../features/Auth';\r\nimport { useNotification } from '../features/Notifications';\r\nimport { LayoutContent, UnauthenticatedLayout } from '../layouts/UnauthenticatedLayout';\r\n\r\nexport const options = [\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.front-end',\r\n      defaultMessage: 'Front-end developer',\r\n    },\r\n    value: 'front_end_developer',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.back-end',\r\n      defaultMessage: 'Back-end developer',\r\n    },\r\n    value: 'back_end_developer',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.full-stack',\r\n      defaultMessage: 'Full-stack developer',\r\n    },\r\n    value: 'full_stack_developer',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'global.content-manager',\r\n      defaultMessage: 'Content Manager',\r\n    },\r\n    value: 'content_manager',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.content-creator',\r\n      defaultMessage: 'Content Creator',\r\n    },\r\n    value: 'content_creator',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.other',\r\n      defaultMessage: 'Other',\r\n    },\r\n    value: 'other',\r\n  },\r\n];\r\n\r\nconst UseCasePage = () => {\r\n  const { toggleNotification } = useNotification();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const [role, setRole] = React.useState<string | number | null>(null);\r\n  const [otherRole, setOtherRole] = React.useState('');\r\n\r\n  const { firstname, email } = useAuth('UseCasePage', (state) => state.user) ?? {};\r\n  const { hasAdmin } = parse(location.search, { ignoreQueryPrefix: true });\r\n  const isOther = role === 'other';\r\n\r\n  const handleSubmit = async (event: React.FormEvent, skipPersona: boolean) => {\r\n    event.preventDefault();\r\n    try {\r\n      await fetch('https://analytics.strapi.io/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email,\r\n          username: firstname,\r\n          firstAdmin: Boolean(!hasAdmin),\r\n          persona: {\r\n            role: skipPersona ? undefined : role,\r\n            otherRole: skipPersona ? undefined : otherRole,\r\n          },\r\n        }),\r\n      });\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'Usecase.notification.success.project-created',\r\n          defaultMessage: 'Project has been successfully created',\r\n        }),\r\n      });\r\n      navigate('/');\r\n    } catch (err) {\r\n      // Silent\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UnauthenticatedLayout>\r\n      <Main labelledBy=\"usecase-title\">\r\n        <LayoutContent>\r\n          <form onSubmit={(e) => handleSubmit(e, false)}>\r\n            <Flex direction=\"column\" paddingBottom={7}>\r\n              <Logo />\r\n              <Box paddingTop={6} paddingBottom={1} width={`25rem`}>\r\n                <Typography textAlign=\"center\" variant=\"alpha\" tag=\"h1\" id=\"usecase-title\">\r\n                  {formatMessage({\r\n                    id: 'Usecase.title',\r\n                    defaultMessage: 'Tell us a bit more about yourself',\r\n                  })}\r\n                </Typography>\r\n              </Box>\r\n            </Flex>\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n              <Field.Root name=\"usecase\">\r\n                <Field.Label>\r\n                  {formatMessage({\r\n                    id: 'Usecase.input.work-type',\r\n                    defaultMessage: 'What type of work do you do?',\r\n                  })}\r\n                </Field.Label>\r\n                <SingleSelect onChange={(value) => setRole(value)} value={role}>\r\n                  {options.map(({ intlLabel, value }) => (\r\n                    <SingleSelectOption key={value} value={value}>\r\n                      {formatMessage(intlLabel)}\r\n                    </SingleSelectOption>\r\n                  ))}\r\n                </SingleSelect>\r\n              </Field.Root>\r\n              {isOther && (\r\n                <Field.Root name=\"other\">\r\n                  <Field.Label>\r\n                    {formatMessage({ id: 'Usecase.other', defaultMessage: 'Other' })}\r\n                  </Field.Label>\r\n                  <TextInput value={otherRole} onChange={(e) => setOtherRole(e.target.value)} />\r\n                </Field.Root>\r\n              )}\r\n              <Button type=\"submit\" size=\"L\" fullWidth disabled={!role}>\r\n                {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n              </Button>\r\n            </Flex>\r\n          </form>\r\n        </LayoutContent>\r\n        <Flex justifyContent=\"center\">\r\n          <Box paddingTop={4}>\r\n            <TextButton\r\n              onClick={(event: React.MouseEvent<HTMLButtonElement>) => handleSubmit(event, true)}\r\n            >\r\n              {formatMessage({\r\n                id: 'Usecase.button.skip',\r\n                defaultMessage: 'Skip this question',\r\n              })}\r\n            </TextButton>\r\n          </Box>\r\n        </Flex>\r\n      </Main>\r\n    </UnauthenticatedLayout>\r\n  );\r\n};\r\n\r\nconst PrivateUseCasePage = () => {\r\n  return (\r\n    <PrivateRoute>\r\n      <UseCasePage />\r\n    </PrivateRoute>\r\n  );\r\n};\r\n\r\nexport { PrivateUseCasePage, UseCasePage };\r\n"],"names":[],"mappings":"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"}