{"version":3,"file":"admin-CoWMk1La.js","sources":["../../admin/src/utils/getFetchClient.ts","../../admin/src/utils/baseQuery.ts","../../admin/src/services/api.ts","../../admin/src/utils/urls.ts","../../admin/src/services/admin.ts"],"sourcesContent":["import pipe from 'lodash/fp/pipe';\r\nimport qs from 'qs';\r\n\r\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\r\n\r\nconst STORAGE_KEYS = {\r\n  TOKEN: 'jwtToken',\r\n  USER: 'userInfo',\r\n};\r\n\r\ntype FetchResponse<TData = any> = {\r\n  data: TData;\r\n  status?: number;\r\n};\r\n\r\ntype FetchOptions = {\r\n  params?: any;\r\n  signal?: AbortSignal;\r\n  headers?: Record<string, string>;\r\n  validateStatus?: ((status: number) => boolean) | null;\r\n};\r\n\r\ntype FetchConfig = {\r\n  signal?: AbortSignal;\r\n};\r\n\r\ninterface ErrorResponse {\r\n  data: {\r\n    data?: any;\r\n    error: ApiError & { status?: number };\r\n  };\r\n}\r\n\r\nclass FetchError extends Error {\r\n  public name: string;\r\n  public message: string;\r\n  public response?: ErrorResponse;\r\n  public code?: number;\r\n  public status?: number;\r\n\r\n  constructor(message: string, response?: ErrorResponse) {\r\n    super(message);\r\n    this.name = 'FetchError';\r\n    this.message = message;\r\n    this.response = response;\r\n    this.code = response?.data?.error?.status;\r\n    this.status = response?.data?.error?.status;\r\n\r\n    // Ensure correct stack trace in error object\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, FetchError);\r\n    }\r\n  }\r\n}\r\n\r\nconst isFetchError = (error: unknown): error is FetchError => {\r\n  return error instanceof FetchError;\r\n};\r\n\r\nconst getToken = () =>\r\n  JSON.parse(\r\n    localStorage.getItem(STORAGE_KEYS.TOKEN) ?? sessionStorage.getItem(STORAGE_KEYS.TOKEN) ?? '\"\"'\r\n  );\r\n\r\ntype FetchClient = {\r\n  get: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\r\n  put: <TData = any, TSend = any>(\r\n    url: string,\r\n    data?: TSend,\r\n    config?: FetchOptions\r\n  ) => Promise<FetchResponse<TData>>;\r\n  post: <TData = any, TSend = any>(\r\n    url: string,\r\n    data?: TSend,\r\n    config?: FetchOptions\r\n  ) => Promise<FetchResponse<TData>>;\r\n  del: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\r\n};\r\n\r\n/**\r\n * @public\r\n * @param {FetchConfig} [defaultOptions={}] - Fetch Configs.\r\n * @returns {FetchClient} A fetch client object with methods for making HTTP requests.\r\n * @description This is an abstraction around the native fetch exposed by a function. It provides a simple interface to handle API calls\r\n * to the Strapi backend.\r\n * @example\r\n * ```tsx\r\n * import { getFetchClient } from '@strapi/admin/admin';\r\n *\r\n * const myFunct = () => {\r\n *   const { get } = getFetchClient();\r\n *   const requestURL = \"/some-endpoint\";\r\n *\r\n *   const { data } = await get(requestURL);\r\n *\r\n *   return data;\r\n * };\r\n * ```\r\n */\r\nconst getFetchClient = (defaultOptions: FetchConfig = {}): FetchClient => {\r\n  const backendURL = window.strapi.backendURL;\r\n  const defaultHeader = {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${getToken()}`,\r\n  };\r\n\r\n  const isFormDataRequest = (body: unknown) => body instanceof FormData;\r\n  const addPrependingSlash = (url: string) => (url.charAt(0) !== '/' ? `/${url}` : url);\r\n\r\n  // This regular expression matches a string that starts with either \"http://\" or \"https://\" or any other protocol name in lower case letters, followed by \"://\" and ends with anything else\r\n  const hasProtocol = (url: string) => new RegExp('^(?:[a-z+]+:)?//', 'i').test(url);\r\n\r\n  // Check if the url has a prepending slash, if not add a slash\r\n  const normalizeUrl = (url: string) => (hasProtocol(url) ? url : addPrependingSlash(url));\r\n\r\n  // Add a response interceptor to return the response\r\n  const responseInterceptor = async <TData = any>(\r\n    response: Response,\r\n    validateStatus?: FetchOptions['validateStatus']\r\n  ): Promise<FetchResponse<TData>> => {\r\n    try {\r\n      const result = await response.json();\r\n\r\n      /**\r\n       * validateStatus allows us to customize when a response should throw an error\r\n       * In native Fetch API, a response is considered \"not ok\"\r\n       * when the status code falls in the 200 to 299 (inclusive) range\r\n       */\r\n      if (!response.ok && result.error && !validateStatus?.(response.status)) {\r\n        throw new FetchError(result.error.message, { data: result });\r\n      }\r\n\r\n      if (!response.ok && !validateStatus?.(response.status)) {\r\n        throw new FetchError('Unknown Server Error');\r\n      }\r\n\r\n      return { data: result };\r\n    } catch (error) {\r\n      if (error instanceof SyntaxError && response.ok) {\r\n        // Making sure that a SyntaxError doesn't throw if it's successful\r\n        return { data: [], status: response.status } as FetchResponse<any>;\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const paramsSerializer =\r\n    <Param = unknown>(params?: Param) =>\r\n    (url: string) => {\r\n      if (params) {\r\n        if (typeof params === 'string') {\r\n          return `${url}?${params}`;\r\n        }\r\n\r\n        /**\r\n         * TODO V6: Encoding should be enabled in this step\r\n         * So the rest of the app doesn't have to worry about it,\r\n         * It's considered a breaking change because it impacts any API request, including the user's custom code\r\n         */\r\n        const serializedParams = qs.stringify(params, { encode: false });\r\n        return `${url}?${serializedParams}`;\r\n      }\r\n      return url;\r\n    };\r\n\r\n  const addBaseUrl = (url: Parameters<typeof fetch>[0]) => {\r\n    return `${backendURL}${url}`;\r\n  };\r\n\r\n  /**\r\n   * We use the factory method because the options\r\n   * are unique to the individual request\r\n   */\r\n  const makeCreateRequestUrl = (options?: FetchOptions) =>\r\n    pipe(normalizeUrl, addBaseUrl, paramsSerializer(options?.params));\r\n\r\n  const fetchClient: FetchClient = {\r\n    get: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\r\n      const headers = new Headers({\r\n        ...defaultHeader,\r\n        ...options?.headers,\r\n      });\r\n      /**\r\n       * this applies all our transformations to the URL\r\n       * - normalizing (making sure it has the correct slash)\r\n       * - appending our BaseURL which comes from the window.strapi object\r\n       * - serializing our params with QS\r\n       */\r\n      const createRequestUrl = makeCreateRequestUrl(options);\r\n      const response = await fetch(createRequestUrl(url), {\r\n        signal: options?.signal ?? defaultOptions.signal,\r\n        method: 'GET',\r\n        headers,\r\n      });\r\n\r\n      return responseInterceptor<TData>(response, options?.validateStatus);\r\n    },\r\n    post: async <TData, TSend = any>(\r\n      url: string,\r\n      data?: TSend,\r\n      options?: FetchOptions\r\n    ): Promise<FetchResponse<TData>> => {\r\n      const headers = new Headers({\r\n        ...defaultHeader,\r\n        ...options?.headers,\r\n      });\r\n\r\n      const createRequestUrl = makeCreateRequestUrl(options);\r\n\r\n      /**\r\n       * we have to remove the Content-Type value if it was a formData request\r\n       * the browser will automatically set the header value\r\n       */\r\n      if (isFormDataRequest(data)) {\r\n        headers.delete('Content-Type');\r\n      }\r\n\r\n      const response = await fetch(createRequestUrl(url), {\r\n        signal: options?.signal ?? defaultOptions.signal,\r\n        method: 'POST',\r\n        headers,\r\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\r\n      });\r\n      return responseInterceptor<TData>(response, options?.validateStatus);\r\n    },\r\n    put: async <TData, TSend = any>(\r\n      url: string,\r\n      data?: TSend,\r\n      options?: FetchOptions\r\n    ): Promise<FetchResponse<TData>> => {\r\n      const headers = new Headers({\r\n        ...defaultHeader,\r\n        ...options?.headers,\r\n      });\r\n\r\n      const createRequestUrl = makeCreateRequestUrl(options);\r\n\r\n      /**\r\n       * we have to remove the Content-Type value if it was a formData request\r\n       * the browser will automatically set the header value\r\n       */\r\n      if (isFormDataRequest(data)) {\r\n        headers.delete('Content-Type');\r\n      }\r\n\r\n      const response = await fetch(createRequestUrl(url), {\r\n        signal: options?.signal ?? defaultOptions.signal,\r\n        method: 'PUT',\r\n        headers,\r\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\r\n      });\r\n\r\n      return responseInterceptor<TData>(response, options?.validateStatus);\r\n    },\r\n    del: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\r\n      const headers = new Headers({\r\n        ...defaultHeader,\r\n        ...options?.headers,\r\n      });\r\n\r\n      const createRequestUrl = makeCreateRequestUrl(options);\r\n      const response = await fetch(createRequestUrl(url), {\r\n        signal: options?.signal ?? defaultOptions.signal,\r\n        method: 'DELETE',\r\n        headers,\r\n      });\r\n      return responseInterceptor<TData>(response, options?.validateStatus);\r\n    },\r\n  };\r\n\r\n  return fetchClient;\r\n};\r\n\r\nexport { getFetchClient, isFetchError, FetchError };\r\nexport type { FetchOptions, FetchResponse, FetchConfig, FetchClient, ErrorResponse };\r\n","import { SerializedError } from '@reduxjs/toolkit';\r\nimport { BaseQueryFn } from '@reduxjs/toolkit/query';\r\n\r\nimport { getFetchClient, isFetchError, type FetchOptions } from '../utils/getFetchClient';\r\n\r\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\r\n\r\ninterface QueryArguments {\r\n  url: string;\r\n  method?: 'GET' | 'POST' | 'DELETE' | 'PUT';\r\n  data?: unknown;\r\n  config?: FetchOptions;\r\n}\r\n\r\ninterface UnknownApiError {\r\n  name: 'UnknownError';\r\n  message: string;\r\n  details?: unknown;\r\n  status?: number;\r\n}\r\n\r\ntype BaseQueryError = ApiError | UnknownApiError;\r\n\r\nconst fetchBaseQuery =\r\n  (): BaseQueryFn<string | QueryArguments, unknown, BaseQueryError> =>\r\n  async (query, { signal }) => {\r\n    try {\r\n      const { get, post, del, put } = getFetchClient();\r\n\r\n      if (typeof query === 'string') {\r\n        const result = await get(query, { signal });\r\n        return { data: result.data };\r\n      } else {\r\n        const { url, method = 'GET', data, config } = query;\r\n\r\n        if (method === 'POST') {\r\n          const result = await post(url, data, {\r\n            ...config,\r\n            signal,\r\n          });\r\n          return { data: result.data };\r\n        }\r\n\r\n        if (method === 'DELETE') {\r\n          const result = await del(url, {\r\n            ...config,\r\n            signal,\r\n          });\r\n          return { data: result.data };\r\n        }\r\n\r\n        if (method === 'PUT') {\r\n          const result = await put(url, data, {\r\n            ...config,\r\n            signal,\r\n          });\r\n          return { data: result.data };\r\n        }\r\n\r\n        /**\r\n         * Default is GET.\r\n         */\r\n        const result = await get(url, {\r\n          ...config,\r\n          signal,\r\n        });\r\n        return { data: result.data };\r\n      }\r\n    } catch (err) {\r\n      // Handle error of type FetchError\r\n\r\n      if (isFetchError(err)) {\r\n        if (\r\n          typeof err.response?.data === 'object' &&\r\n          err.response?.data !== null &&\r\n          'error' in err.response?.data\r\n        ) {\r\n          /**\r\n           * This will most likely be ApiError\r\n           */\r\n          return { data: undefined, error: err.response?.data.error as any };\r\n        } else {\r\n          return {\r\n            data: undefined,\r\n            error: {\r\n              name: 'UnknownError',\r\n              message: err.message,\r\n              details: err.response,\r\n              status: err.status,\r\n            } as UnknownApiError,\r\n          };\r\n        }\r\n      }\r\n\r\n      const error = err as Error;\r\n      return {\r\n        data: undefined,\r\n        error: {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: error.stack,\r\n        } satisfies SerializedError,\r\n      };\r\n    }\r\n  };\r\n\r\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\r\n  return error.name !== undefined;\r\n};\r\n\r\nexport { fetchBaseQuery, isBaseQueryError };\r\nexport type { BaseQueryError, UnknownApiError, QueryArguments };\r\n","import { createApi } from '@reduxjs/toolkit/query/react';\r\n\r\nimport { fetchBaseQuery } from '../utils/baseQuery';\r\n\r\n/**\r\n * @public\r\n * @description This is the redux toolkit api for the admin panel, users\r\n * should use a combination of `enhanceEndpoints` to add their TagTypes\r\n * to utilise in their `injectEndpoints` construction for automatic cache\r\n * re-validation. We specifically do not store any tagTypes by default leaving\r\n * the API surface as small as possible. None of the data-fetching looks for the\r\n * StrapiApp are stored here either.\r\n */\r\nconst adminApi = createApi({\r\n  reducerPath: 'adminApi',\r\n  baseQuery: fetchBaseQuery(),\r\n  tagTypes: [],\r\n  endpoints: () => ({}),\r\n});\r\n\r\nexport { adminApi };\r\n","const prefixFileUrlWithBackendUrl = (fileURL?: string): string | undefined => {\r\n  return !!fileURL && fileURL.startsWith('/') ? `${window.strapi.backendURL}${fileURL}` : fileURL;\r\n};\r\n\r\n/**\r\n * @description Creates an absolute URL, if there is no URL or it\r\n * is relative, we use the `window.location.origin` as a fallback.\r\n * IF it's an absolute URL, we return it as is.\r\n */\r\nconst createAbsoluteUrl = (url?: string): string => {\r\n  if (!url) {\r\n    return window.location.origin;\r\n  }\r\n  if (url.startsWith('/')) {\r\n    /**\r\n     * This will also manage protocol relative URLs which is fine because\r\n     * as we can see from the test, we still get the expected result.\r\n     */\r\n    return new URL(url, window.location.origin).toString();\r\n  } else {\r\n    return url;\r\n  }\r\n};\r\n\r\nexport { createAbsoluteUrl, prefixFileUrlWithBackendUrl };\r\n","import {\r\n  type TelemetryProperties,\r\n  type Init,\r\n  type Information,\r\n  type GetProjectSettings,\r\n  type UpdateProjectSettings,\r\n  type Plugins,\r\n  type GetLicenseLimitInformation,\r\n} from '../../../shared/contracts/admin';\r\nimport { prefixFileUrlWithBackendUrl } from '../utils/urls';\r\n\r\nimport { adminApi } from './api';\r\n\r\ninterface ConfigurationLogo {\r\n  custom?: {\r\n    name?: string;\r\n    url?: string;\r\n  };\r\n  default: string;\r\n}\r\n\r\nconst admin = adminApi\r\n  .enhanceEndpoints({\r\n    addTagTypes: ['ProjectSettings', 'LicenseLimits'],\r\n  })\r\n  .injectEndpoints({\r\n    endpoints: (builder) => ({\r\n      init: builder.query<Init.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/init',\r\n          method: 'GET',\r\n        }),\r\n        transformResponse(res: Init.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      information: builder.query<Information.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/information',\r\n          method: 'GET',\r\n        }),\r\n        transformResponse(res: Information.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      telemetryProperties: builder.query<TelemetryProperties.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/telemetry-properties',\r\n          method: 'GET',\r\n          config: {\r\n            validateStatus: (status) => status < 500,\r\n          },\r\n        }),\r\n        transformResponse(res: TelemetryProperties.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      projectSettings: builder.query<\r\n        { authLogo?: ConfigurationLogo['custom']; menuLogo?: ConfigurationLogo['custom'] },\r\n        void\r\n      >({\r\n        query: () => ({\r\n          url: '/admin/project-settings',\r\n          method: 'GET',\r\n        }),\r\n        providesTags: ['ProjectSettings'],\r\n        transformResponse(data: GetProjectSettings.Response) {\r\n          return {\r\n            authLogo: data.authLogo\r\n              ? {\r\n                  name: data.authLogo.name,\r\n                  url: prefixFileUrlWithBackendUrl(data.authLogo.url),\r\n                }\r\n              : undefined,\r\n            menuLogo: data.menuLogo\r\n              ? {\r\n                  name: data.menuLogo.name,\r\n                  url: prefixFileUrlWithBackendUrl(data.menuLogo.url),\r\n                }\r\n              : undefined,\r\n          };\r\n        },\r\n      }),\r\n      updateProjectSettings: builder.mutation<UpdateProjectSettings.Response, FormData>({\r\n        query: (data) => ({\r\n          url: '/admin/project-settings',\r\n          method: 'POST',\r\n          data,\r\n          config: {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          },\r\n        }),\r\n        invalidatesTags: ['ProjectSettings'],\r\n      }),\r\n      getPlugins: builder.query<Plugins.Response, void>({\r\n        query: () => ({\r\n          url: '/admin/plugins',\r\n          method: 'GET',\r\n        }),\r\n      }),\r\n      getLicenseLimits: builder.query<GetLicenseLimitInformation.Response, void>({\r\n        query: () => ({\r\n          url: '/admin/license-limit-information',\r\n          method: 'GET',\r\n        }),\r\n        providesTags: ['LicenseLimits'],\r\n      }),\r\n    }),\r\n    overrideExisting: false,\r\n  });\r\n\r\nconst {\r\n  useInitQuery,\r\n  useTelemetryPropertiesQuery,\r\n  useInformationQuery,\r\n  useProjectSettingsQuery,\r\n  useUpdateProjectSettingsMutation,\r\n  useGetPluginsQuery,\r\n  useGetLicenseLimitsQuery,\r\n} = admin;\r\n\r\nexport {\r\n  useInitQuery,\r\n  useTelemetryPropertiesQuery,\r\n  useInformationQuery,\r\n  useProjectSettingsQuery,\r\n  useUpdateProjectSettingsMutation,\r\n  useGetPluginsQuery,\r\n  useGetLicenseLimitsQuery,\r\n};\r\n\r\nexport type { ConfigurationLogo };\r\n"],"names":["qs","pipe","result","createApi"],"mappings":"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"}