{"version":3,"file":"EditView-5fAzDGcb.js","sources":["../../admin/src/pages/Settings/pages/TransferTokens/EditView.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Box, Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { Formik, Form, FormikErrors, FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation, useNavigate, useMatch } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { useGuidedTour } from '../../../../components/GuidedTour/Provider';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport {\r\n  useCreateTransferTokenMutation,\r\n  useGetTransferTokenQuery,\r\n  useUpdateTransferTokenMutation,\r\n} from '../../../../services/transferTokens';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../utils/translatedErrors';\r\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\r\nimport { FormHead } from '../../components/Tokens/FormHead';\r\nimport { LifeSpanInput } from '../../components/Tokens/LifeSpanInput';\r\nimport { TokenBox } from '../../components/Tokens/TokenBox';\r\nimport { TokenDescription } from '../../components/Tokens/TokenDescription';\r\nimport { TokenName } from '../../components/Tokens/TokenName';\r\nimport { TokenTypeSelect } from '../../components/Tokens/TokenTypeSelect';\r\n\r\nimport type {\r\n  TransferToken,\r\n  SanitizedTransferToken,\r\n} from '../../../../../../shared/contracts/transfer';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().max(100).required(translatedErrors.required.id),\r\n  description: yup.string().nullable(),\r\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required.id),\r\n  permissions: yup.string().required(translatedErrors.required.id),\r\n});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst EditView = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const navigate = useNavigate();\r\n  const { state: locationState } = useLocation();\r\n  const [transferToken, setTransferToken] = React.useState<\r\n    TransferToken | SanitizedTransferToken | null\r\n  >(\r\n    locationState && 'accessKey' in locationState.transferToken\r\n      ? {\r\n          ...locationState.transferToken,\r\n        }\r\n      : null\r\n  );\r\n  const { trackUsage } = useTracking();\r\n  const setCurrentStep = useGuidedTour('EditView', (state) => state.setCurrentStep);\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\r\n  );\r\n  const {\r\n    allowedActions: { canCreate, canUpdate, canRegenerate },\r\n  } = useRBAC(permissions);\r\n  const match = useMatch('/settings/transfer-tokens/:id');\r\n\r\n  const id = match?.params?.id;\r\n  const isCreating = id === 'create';\r\n\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  React.useEffect(() => {\r\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\r\n      tokenType: TRANSFER_TOKEN_TYPE,\r\n    });\r\n  }, [isCreating, trackUsage]);\r\n\r\n  const { data, error } = useGetTransferTokenQuery(id!, {\r\n    skip: isCreating || transferToken !== null || !id,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      setTransferToken(data);\r\n    }\r\n  }, [data]);\r\n\r\n  const [createToken] = useCreateTransferTokenMutation();\r\n  const [updateToken] = useUpdateTransferTokenMutation();\r\n\r\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\r\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\r\n      tokenType: TRANSFER_TOKEN_TYPE,\r\n    });\r\n\r\n    const permissions = body.permissions.split('-');\r\n\r\n    const isPermissionsTransferPermission = (\r\n      permission: string[]\r\n    ): permission is Array<'push' | 'pull'> => {\r\n      if (permission.length === 1) {\r\n        return permission[0] === 'push' || permission[0] === 'pull';\r\n      }\r\n\r\n      return permission[0] === 'push' && permission[1] === 'pull';\r\n    };\r\n\r\n    // this type-guard is necessary to satisfy the type for `permissions` in the request body,\r\n    // because String.split returns stringp[]\r\n    if (isPermissionsTransferPermission(permissions)) {\r\n      try {\r\n        if (isCreating) {\r\n          const res = await createToken({\r\n            ...body,\r\n            // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\r\n            lifespan:\r\n              body?.lifespan && body.lifespan !== '0'\r\n                ? parseInt(body.lifespan.toString(), 10)\r\n                : null,\r\n            permissions,\r\n          });\r\n\r\n          if ('error' in res) {\r\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n              formik.setErrors(formatValidationErrors(res.error));\r\n            } else {\r\n              toggleNotification({\r\n                type: 'danger',\r\n                message: formatAPIError(res.error),\r\n              });\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          setTransferToken(res.data);\r\n\r\n          toggleNotification({\r\n            type: 'success',\r\n            message: formatMessage({\r\n              id: 'notification.success.transfertokencreated',\r\n              defaultMessage: 'Transfer Token successfully created',\r\n            }),\r\n          });\r\n\r\n          trackUsage('didCreateToken', {\r\n            type: transferToken?.permissions,\r\n            tokenType: TRANSFER_TOKEN_TYPE,\r\n          });\r\n\r\n          navigate(`../transfer-tokens/${res.data.id.toString()}`, {\r\n            replace: true,\r\n            state: { transferToken: res.data },\r\n          });\r\n        } else {\r\n          const res = await updateToken({\r\n            id: id!,\r\n            name: body.name,\r\n            description: body.description,\r\n            permissions,\r\n          });\r\n\r\n          if ('error' in res) {\r\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n              formik.setErrors(formatValidationErrors(res.error));\r\n            } else {\r\n              toggleNotification({\r\n                type: 'danger',\r\n                message: formatAPIError(res.error),\r\n              });\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          setTransferToken(res.data);\r\n\r\n          toggleNotification({\r\n            type: 'success',\r\n            message: formatMessage({\r\n              id: 'notification.success.transfertokenedited',\r\n              defaultMessage: 'Transfer Token successfully edited',\r\n            }),\r\n          });\r\n\r\n          trackUsage('didEditToken', {\r\n            type: transferToken?.permissions,\r\n            tokenType: TRANSFER_TOKEN_TYPE,\r\n          });\r\n        }\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: 'notification.error',\r\n            defaultMessage: 'Something went wrong',\r\n          }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\r\n  const isLoading = !isCreating && !transferToken;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Page.Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Transfer Tokens',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Formik\r\n        validationSchema={schema}\r\n        validateOnChange={false}\r\n        initialValues={\r\n          {\r\n            name: transferToken?.name || '',\r\n            description: transferToken?.description || '',\r\n            lifespan: transferToken?.lifespan || null,\r\n            /**\r\n             * We need to cast the permissions to satisfy the type for `permissions`\r\n             * in the request body incase we don't have a transferToken and instead\r\n             * use an empty string.\r\n             */\r\n            permissions: (transferToken?.permissions.join('-') ?? '') as FormValues['permissions'],\r\n          } satisfies FormValues\r\n        }\r\n        enableReinitialize\r\n        onSubmit={(body, actions) => handleSubmit(body, actions)}\r\n      >\r\n        {({ errors, handleChange, isSubmitting, values }) => {\r\n          return (\r\n            <Form>\r\n              <FormHead\r\n                title={{\r\n                  id: 'Settings.transferTokens.createPage.title',\r\n                  defaultMessage: 'TokenCreate Transfer Token',\r\n                }}\r\n                token={transferToken}\r\n                setToken={setTransferToken}\r\n                canEditInputs={canEditInputs}\r\n                canRegenerate={canRegenerate}\r\n                isSubmitting={isSubmitting}\r\n                regenerateUrl=\"/admin/transfer/tokens/\"\r\n              />\r\n              <Layouts.Content>\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                  {transferToken &&\r\n                    Boolean(transferToken?.name) &&\r\n                    'accessKey' in transferToken && (\r\n                      <TokenBox token={transferToken.accessKey} tokenType={TRANSFER_TOKEN_TYPE} />\r\n                    )}\r\n                  <FormTransferTokenContainer\r\n                    errors={errors}\r\n                    onChange={handleChange}\r\n                    canEditInputs={canEditInputs}\r\n                    isCreating={isCreating}\r\n                    values={values}\r\n                    transferToken={transferToken}\r\n                  />\r\n                </Flex>\r\n              </Layouts.Content>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedEditView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedEditView = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].read\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditView />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * FormTransferTokenContainer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface FormValues extends Pick<TransferToken, 'description' | 'name' | 'lifespan'> {\r\n  permissions: Extract<TransferToken['permissions'][number], string>;\r\n}\r\n\r\ninterface FormTransferTokenContainerProps {\r\n  errors: FormikErrors<FormValues>;\r\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\r\n  canEditInputs: boolean;\r\n  values: FormValues;\r\n  isCreating: boolean;\r\n  transferToken: Partial<TransferToken> | null;\r\n}\r\n\r\nconst FormTransferTokenContainer = ({\r\n  errors = {},\r\n  onChange,\r\n  canEditInputs,\r\n  isCreating,\r\n  values,\r\n  transferToken = {},\r\n}: FormTransferTokenContainerProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const typeOptions = [\r\n    {\r\n      value: 'push',\r\n      label: {\r\n        id: 'Settings.transferTokens.types.push',\r\n        defaultMessage: 'Push',\r\n      },\r\n    },\r\n    {\r\n      value: 'pull',\r\n      label: {\r\n        id: 'Settings.transferTokens.types.pull',\r\n        defaultMessage: 'Pull',\r\n      },\r\n    },\r\n    {\r\n      value: 'push-pull',\r\n      label: {\r\n        id: 'Settings.transferTokens.types.push-pull',\r\n        defaultMessage: 'Full Access',\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box\r\n      background=\"neutral0\"\r\n      hasRadius\r\n      shadow=\"filterShadow\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n    >\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Typography variant=\"delta\" tag=\"h2\">\r\n          {formatMessage({\r\n            id: 'global.details',\r\n            defaultMessage: 'Details',\r\n          })}\r\n        </Typography>\r\n        <Grid.Root gap={5}>\r\n          <Grid.Item key=\"name\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <TokenName\r\n              error={errors['name']}\r\n              value={values['name']}\r\n              canEditInputs={canEditInputs}\r\n              onChange={onChange}\r\n            />\r\n          </Grid.Item>\r\n          <Grid.Item key=\"description\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <TokenDescription\r\n              error={errors['description']}\r\n              value={values['description']}\r\n              canEditInputs={canEditInputs}\r\n              onChange={onChange}\r\n            />\r\n          </Grid.Item>\r\n          <Grid.Item key=\"lifespan\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <LifeSpanInput\r\n              isCreating={isCreating}\r\n              error={errors['lifespan']}\r\n              value={values['lifespan']}\r\n              onChange={onChange}\r\n              token={transferToken}\r\n            />\r\n          </Grid.Item>\r\n          <Grid.Item key=\"permissions\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n            <TokenTypeSelect\r\n              name=\"permissions\"\r\n              value={values['permissions']}\r\n              error={errors['permissions']}\r\n              label={{\r\n                id: 'Settings.tokens.form.type',\r\n                defaultMessage: 'Token type',\r\n              }}\r\n              // @ts-expect-error – DS Select passes number | string, will be fixed in V2\r\n              onChange={(value: string) => {\r\n                onChange({ target: { name: 'permissions', value } });\r\n              }}\r\n              options={typeOptions}\r\n              canEditInputs={canEditInputs}\r\n            />\r\n          </Grid.Item>\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { EditView, ProtectedEditView };\r\n"],"names":["yup","translatedErrors","useIntl","useNotification","useNavigate","useLocation","React","useTracking","useGuidedTour","useTypedSelector","useRBAC","useMatch","useAPIErrorHandler","TRANSFER_TOKEN_TYPE","useGetTransferTokenQuery","useCreateTransferTokenMutation","useUpdateTransferTokenMutation","permissions","isBaseQueryError","jsx","Page","jsxs","Formik","Form","FormHead","Layouts","Flex","TokenBox","Box","Typography","Grid","TokenName","TokenDescription","LifeSpanInput","TokenTypeSelect"],"mappings":"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"}