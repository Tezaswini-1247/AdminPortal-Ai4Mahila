{"version":3,"file":"EditPage-CzZ0WCGB.js","sources":["../../admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx","../../admin/src/pages/Settings/pages/Roles/EditPage.tsx"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Textarea,\r\n  TextInput,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { FormikProps } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\r\nimport type { EditRoleFormValues } from '../EditPage';\r\n\r\ninterface RoleFormProps extends Pick<FormikProps<EditRoleFormValues>, 'values' | 'errors'> {\r\n  onBlur: FormikProps<EditRoleFormValues>['handleBlur'];\r\n  onChange: FormikProps<EditRoleFormValues>['handleChange'];\r\n  disabled?: boolean;\r\n  role: AdminRole;\r\n}\r\n\r\nconst RoleForm = ({ disabled, role, values, errors, onChange, onBlur }: RoleFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Box>\r\n            <Box>\r\n              <Typography fontWeight=\"bold\">\r\n                {role\r\n                  ? role.name\r\n                  : formatMessage({\r\n                      id: 'global.details',\r\n                      defaultMessage: 'Details',\r\n                    })}\r\n              </Typography>\r\n            </Box>\r\n            <Box>\r\n              <Typography textColor=\"neutral500\" variant=\"pi\">\r\n                {role\r\n                  ? role.description\r\n                  : formatMessage({\r\n                      id: 'Settings.roles.form.description',\r\n                      defaultMessage: 'Name and description of the role',\r\n                    })}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Button disabled variant=\"secondary\">\r\n            {formatMessage(\r\n              {\r\n                id: 'Settings.roles.form.button.users-with-role',\r\n                defaultMessage:\r\n                  '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\r\n              },\r\n              { number: role.usersCount }\r\n            )}\r\n          </Button>\r\n        </Flex>\r\n        <Grid.Root gap={4}>\r\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n            <Field.Root\r\n              name=\"name\"\r\n              error={errors.name && formatMessage({ id: errors.name })}\r\n              required\r\n            >\r\n              <Field.Label>\r\n                {formatMessage({\r\n                  id: 'global.name',\r\n                  defaultMessage: 'Name',\r\n                })}\r\n              </Field.Label>\r\n              <TextInput\r\n                disabled={disabled}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={values.name || ''}\r\n              />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          </Grid.Item>\r\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n            <Field.Root\r\n              name=\"description\"\r\n              error={errors.description && formatMessage({ id: errors.description })}\r\n            >\r\n              <Field.Label>\r\n                {formatMessage({\r\n                  id: 'global.description',\r\n                  defaultMessage: 'Description',\r\n                })}\r\n              </Field.Label>\r\n              <Textarea\r\n                disabled={disabled}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={values.description}\r\n              />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          </Grid.Item>\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { RoleForm };\r\nexport type { RoleFormProps };\r\n","import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, Main } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { Formik, FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate, useMatch } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { BackButton } from '../../../../features/BackButton';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAdminRoles } from '../../../../hooks/useAdminRoles';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport {\r\n  useGetRolePermissionLayoutQuery,\r\n  useGetRolePermissionsQuery,\r\n  useUpdateRoleMutation,\r\n  useUpdateRolePermissionsMutation,\r\n} from '../../../../services/users';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../utils/translatedErrors';\r\n\r\nimport { Permissions, PermissionsAPI } from './components/Permissions';\r\nimport { RoleForm } from './components/RoleForm';\r\n\r\nconst EDIT_ROLE_SCHEMA = yup.object().shape({\r\n  name: yup.string().required(translatedErrors.required.id),\r\n  description: yup.string().optional(),\r\n});\r\n\r\n/**\r\n * TODO: be nice if we could just infer this from the schema\r\n */\r\ninterface EditRoleFormValues {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nconst EditPage = () => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const match = useMatch('/settings/roles/:id');\r\n  const id = match?.params.id;\r\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\r\n  const { trackUsage } = useTracking();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } =\r\n    useGetRolePermissionLayoutQuery({\r\n      /**\r\n       * Role here is a query param so if there's no role we pass an empty string\r\n       * which returns us a default layout.\r\n       */\r\n      role: id ?? '',\r\n    });\r\n\r\n  const {\r\n    roles,\r\n    isLoading: isRoleLoading,\r\n    refetch: refetchRole,\r\n  } = useAdminRoles(\r\n    { id },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const role = roles[0] ?? {};\r\n\r\n  const { data: permissions, isLoading: isLoadingPermissions } = useGetRolePermissionsQuery(\r\n    {\r\n      id: id!,\r\n    },\r\n    {\r\n      skip: !id,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const [updateRole] = useUpdateRoleMutation();\r\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\r\n\r\n  if (!id) {\r\n    return <Navigate to=\"/settings/roles\" />;\r\n  }\r\n\r\n  const handleEditRoleSubmit = async (\r\n    data: EditRoleFormValues,\r\n    formik: FormikHelpers<EditRoleFormValues>\r\n  ) => {\r\n    try {\r\n      const { permissionsToSend, didUpdateConditions } =\r\n        permissionsRef.current?.getPermissions() ?? {};\r\n\r\n      const res = await updateRole({\r\n        id,\r\n        ...data,\r\n      });\r\n\r\n      if ('error' in res) {\r\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          formik.setErrors(formatValidationErrors(res.error));\r\n        } else {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (role.code !== 'strapi-super-admin' && permissionsToSend) {\r\n        const updateRes = await updateRolePermissions({\r\n          id: res.data.id,\r\n          permissions: permissionsToSend,\r\n        });\r\n\r\n        if ('error' in updateRes) {\r\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\r\n            formik.setErrors(formatValidationErrors(updateRes.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(updateRes.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if (didUpdateConditions) {\r\n          trackUsage('didUpdateConditions');\r\n        }\r\n      }\r\n\r\n      permissionsRef.current?.setFormAfterSubmit();\r\n\r\n      await refetchRole();\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'notification.success.saved' }),\r\n      });\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isFormDisabled = !isRoleLoading && role.code === 'strapi-super-admin';\r\n\r\n  if (isLoadingPermissionsLayout || isRoleLoading || isLoadingPermissions || !permissionsLayout) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Roles',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={\r\n          {\r\n            name: role.name ?? '',\r\n            description: role.description ?? '',\r\n          } satisfies EditRoleFormValues\r\n        }\r\n        onSubmit={handleEditRoleSubmit}\r\n        validationSchema={EDIT_ROLE_SCHEMA}\r\n        validateOnChange={false}\r\n      >\r\n        {({ handleSubmit, values, errors, handleChange, handleBlur, isSubmitting }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Layouts.Header\r\n              primaryAction={\r\n                <Flex gap={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    startIcon={<Check />}\r\n                    disabled={role.code === 'strapi-super-admin'}\r\n                    loading={isSubmitting}\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'global.save',\r\n                      defaultMessage: 'Save',\r\n                    })}\r\n                  </Button>\r\n                </Flex>\r\n              }\r\n              title={formatMessage({\r\n                id: 'Settings.roles.edit.title',\r\n                defaultMessage: 'Edit a role',\r\n              })}\r\n              subtitle={formatMessage({\r\n                id: 'Settings.roles.create.description',\r\n                defaultMessage: 'Define the rights given to the role',\r\n              })}\r\n              navigationAction={<BackButton fallback=\"../roles\" />}\r\n            />\r\n            <Layouts.Content>\r\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                <RoleForm\r\n                  disabled={isFormDisabled}\r\n                  errors={errors}\r\n                  values={values}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  role={role}\r\n                />\r\n                <Box shadow=\"filterShadow\" hasRadius>\r\n                  <Permissions\r\n                    isFormDisabled={isFormDisabled}\r\n                    permissions={permissions}\r\n                    ref={permissionsRef}\r\n                    layout={permissionsLayout}\r\n                  />\r\n                </Box>\r\n              </Flex>\r\n            </Layouts.Content>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Main>\r\n  );\r\n};\r\n\r\nconst ProtectedEditPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.roles.update\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { EditPage, ProtectedEditPage };\r\nexport type { EditRoleFormValues };\r\n"],"names":["useIntl","Box","Flex","jsxs","jsx","Typography","Button","Grid","Field","TextInput","Textarea","yup","translatedErrors","useNotification","useMatch","React","useTracking","useAPIErrorHandler","useGetRolePermissionLayoutQuery","useAdminRoles","useGetRolePermissionsQuery","useUpdateRoleMutation","useUpdateRolePermissionsMutation","Navigate","isBaseQueryError","Page","Main","Formik","Layouts","Check","BackButton","Permissions","useTypedSelector"],"mappings":"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"}