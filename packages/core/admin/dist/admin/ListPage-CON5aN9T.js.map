{"version":3,"file":"ListPage-CON5aN9T.js","sources":["../../admin/src/pages/Settings/pages/Roles/components/RoleRow.tsx","../../admin/src/pages/Settings/pages/Roles/ListPage.tsx"],"sourcesContent":["import { Box, Flex, IconButton, IconButtonProps, Td, Tr, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\r\n\r\ninterface RoleRowProps extends Pick<AdminRole, 'id' | 'name' | 'description' | 'usersCount'> {\r\n  icons: Array<Required<Pick<IconButtonProps, 'children' | 'label' | 'onClick'>>>;\r\n  rowIndex: number;\r\n  canUpdate?: boolean;\r\n}\r\n\r\nconst RoleRow = ({\r\n  id,\r\n  name,\r\n  description,\r\n  usersCount,\r\n  icons,\r\n  rowIndex,\r\n  canUpdate,\r\n}: RoleRowProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [, editObject] = icons;\r\n\r\n  const usersCountText = formatMessage(\r\n    {\r\n      id: `Roles.RoleRow.user-count`,\r\n      defaultMessage: '{number, plural, =0 {#  user} one {#  user} other {# users}}',\r\n    },\r\n    { number: usersCount }\r\n  );\r\n\r\n  return (\r\n    <Tr\r\n      aria-rowindex={rowIndex}\r\n      key={id}\r\n      // @ts-expect-error â€“ the prop uses `HTMLButtonElement` but we just specify `HTMLElement`\r\n      onClick={canUpdate ? editObject.onClick : undefined}\r\n    >\r\n      <Td maxWidth={`13rem`}>\r\n        <Typography ellipsis textColor=\"neutral800\">\r\n          {name}\r\n        </Typography>\r\n      </Td>\r\n      <Td maxWidth={`25rem`}>\r\n        <Typography ellipsis textColor=\"neutral800\">\r\n          {description}\r\n        </Typography>\r\n      </Td>\r\n      <Td>\r\n        <Typography textColor=\"neutral800\">{usersCountText}</Typography>\r\n      </Td>\r\n      <Td>\r\n        <Flex justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\r\n          {icons.map((icon, i) => {\r\n            if (icon) {\r\n              return (\r\n                <Box key={icon.label} paddingLeft={i === 0 ? 0 : 1}>\r\n                  <IconButton {...icon} variant=\"ghost\" />\r\n                </Box>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        </Flex>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport { RoleRow };\r\nexport type { RoleRowProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Table,\r\n  Tbody,\r\n  TFooter,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n} from '@strapi/design-system';\r\nimport { Duplicate, Pencil, Plus, Trash } from '@strapi/icons';\r\nimport { produce } from 'immer';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { SearchInput } from '../../../../components/SearchInput';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAdminRoles, AdminRole } from '../../../../hooks/useAdminRoles';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useFetchClient } from '../../../../hooks/useFetchClient';\r\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport { selectAdminPermissions } from '../../../../selectors';\r\nimport { isFetchError } from '../../../../utils/getFetchClient';\r\n\r\nimport { RoleRow, RoleRowProps } from './components/RoleRow';\r\n\r\nconst ListPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const permissions = useTypedSelector(selectAdminPermissions);\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const [isWarningDeleteAllOpened, setIsWarningDeleteAllOpenend] = React.useState(false);\r\n  const [{ query }] = useQueryParams<{ _q?: string }>();\r\n  const {\r\n    isLoading: isLoadingForPermissions,\r\n    allowedActions: { canCreate, canDelete, canRead, canUpdate },\r\n  } = useRBAC(permissions.settings?.roles);\r\n\r\n  const { roles, refetch: refetchRoles } = useAdminRoles(\r\n    { filters: query?._q ? { name: { $containsi: query._q } } : undefined },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n      skip: isLoadingForPermissions || !canRead,\r\n    }\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n  const [{ roleToDelete }, dispatch] = React.useReducer(reducer, initialState);\r\n  const { post } = useFetchClient();\r\n\r\n  const handleDeleteData = async () => {\r\n    try {\r\n      dispatch({\r\n        type: 'ON_REMOVE_ROLES',\r\n      });\r\n\r\n      await post('/admin/roles/batch-delete', {\r\n        ids: [roleToDelete],\r\n      });\r\n\r\n      await refetchRoles();\r\n\r\n      dispatch({\r\n        type: 'RESET_DATA_TO_DELETE',\r\n      });\r\n    } catch (error) {\r\n      if (isFetchError(error)) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(error),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNewRoleClick = () => navigate('new');\r\n\r\n  const handleToggleModal = () => setIsWarningDeleteAllOpenend((prev) => !prev);\r\n\r\n  const handleClickDelete = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (role.usersCount) {\r\n      toggleNotification({\r\n        type: 'info',\r\n        message: formatMessage({ id: 'Roles.ListPage.notification.delete-not-allowed' }),\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: 'SET_ROLE_TO_DELETE',\r\n        id: role.id,\r\n      });\r\n\r\n      handleToggleModal();\r\n    }\r\n  };\r\n\r\n  const handleClickDuplicate = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    navigate(`duplicate/${role.id}`);\r\n  };\r\n\r\n  const rowCount = roles.length + 1;\r\n  const colCount = 6;\r\n\r\n  if (isLoadingForPermissions) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Page.Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Roles',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        primaryAction={\r\n          canCreate ? (\r\n            <Button onClick={handleNewRoleClick} startIcon={<Plus />} size=\"S\">\r\n              {formatMessage({\r\n                id: 'Settings.roles.list.button.add',\r\n                defaultMessage: 'Add new role',\r\n              })}\r\n            </Button>\r\n          ) : null\r\n        }\r\n        title={formatMessage({\r\n          id: 'global.roles',\r\n          defaultMessage: 'roles',\r\n        })}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.roles.list.description',\r\n          defaultMessage: 'List of roles',\r\n        })}\r\n      />\r\n      {canRead && (\r\n        <Layouts.Action\r\n          startActions={\r\n            <SearchInput\r\n              label={formatMessage(\r\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\r\n                {\r\n                  target: formatMessage({\r\n                    id: 'global.roles',\r\n                    defaultMessage: 'roles',\r\n                  }),\r\n                }\r\n              )}\r\n            />\r\n          }\r\n        />\r\n      )}\r\n      {canRead && (\r\n        <Layouts.Content>\r\n          <Table\r\n            colCount={colCount}\r\n            rowCount={rowCount}\r\n            footer={\r\n              canCreate ? (\r\n                <TFooter onClick={handleNewRoleClick} icon={<Plus />}>\r\n                  {formatMessage({\r\n                    id: 'Settings.roles.list.button.add',\r\n                    defaultMessage: 'Add new role',\r\n                  })}\r\n                </TFooter>\r\n              ) : null\r\n            }\r\n          >\r\n            <Thead>\r\n              <Tr aria-rowindex={1}>\r\n                <Th>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                    {formatMessage({\r\n                      id: 'global.name',\r\n                      defaultMessage: 'Name',\r\n                    })}\r\n                  </Typography>\r\n                </Th>\r\n                <Th>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                    {formatMessage({\r\n                      id: 'global.description',\r\n                      defaultMessage: 'Description',\r\n                    })}\r\n                  </Typography>\r\n                </Th>\r\n                <Th>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                    {formatMessage({\r\n                      id: 'global.users',\r\n                      defaultMessage: 'Users',\r\n                    })}\r\n                  </Typography>\r\n                </Th>\r\n                <Th>\r\n                  <VisuallyHidden>\r\n                    {formatMessage({\r\n                      id: 'global.actions',\r\n                      defaultMessage: 'Actions',\r\n                    })}\r\n                  </VisuallyHidden>\r\n                </Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {roles?.map((role, index) => (\r\n                <RoleRow\r\n                  key={role.id}\r\n                  id={role.id}\r\n                  name={role.name}\r\n                  description={role.description}\r\n                  usersCount={role.usersCount}\r\n                  icons={\r\n                    [\r\n                      canCreate &&\r\n                        ({\r\n                          onClick: handleClickDuplicate(role),\r\n                          label: formatMessage({\r\n                            id: 'app.utils.duplicate',\r\n                            defaultMessage: 'Duplicate',\r\n                          }),\r\n                          children: <Duplicate />,\r\n                        } satisfies RoleRowProps['icons'][number]),\r\n                      canUpdate &&\r\n                        ({\r\n                          onClick: () => navigate(role.id.toString()),\r\n                          label: formatMessage({ id: 'app.utils.edit', defaultMessage: 'Edit' }),\r\n                          children: <Pencil />,\r\n                        } satisfies RoleRowProps['icons'][number]),\r\n                      canDelete &&\r\n                        ({\r\n                          onClick: handleClickDelete(role),\r\n                          label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\r\n                          children: <Trash />,\r\n                        } satisfies RoleRowProps['icons'][number]),\r\n                    ].filter(Boolean) as RoleRowProps['icons']\r\n                  }\r\n                  rowIndex={index + 2}\r\n                  canUpdate={canUpdate}\r\n                />\r\n              ))}\r\n            </Tbody>\r\n          </Table>\r\n        </Layouts.Content>\r\n      )}\r\n      <Dialog.Root open={isWarningDeleteAllOpened} onOpenChange={handleToggleModal}>\r\n        <ConfirmDialog onConfirm={handleDeleteData} />\r\n      </Dialog.Root>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Reducer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * TODO: do we actually need this reducer? It's not doing a lot...\r\n */\r\n\r\ninterface State {\r\n  roleToDelete: null | AdminRole['id'];\r\n  showModalConfirmButtonLoading: boolean;\r\n  shouldRefetchData: boolean;\r\n}\r\n\r\nconst initialState = {\r\n  roleToDelete: null,\r\n  showModalConfirmButtonLoading: false,\r\n  shouldRefetchData: false,\r\n} satisfies State;\r\n\r\ninterface SetRoleToDeleteAction extends Pick<AdminRole, 'id'> {\r\n  type: 'SET_ROLE_TO_DELETE';\r\n}\r\n\r\ninterface ResetDataToDeleteAction {\r\n  type: 'RESET_DATA_TO_DELETE';\r\n}\r\n\r\ninterface OnRemoveRolesAction {\r\n  type: 'ON_REMOVE_ROLES';\r\n}\r\n\r\ninterface OnRemoveRolesSucceededAction {\r\n  type: 'ON_REMOVE_ROLES_SUCCEEDED';\r\n}\r\n\r\ntype Action =\r\n  | SetRoleToDeleteAction\r\n  | ResetDataToDeleteAction\r\n  | OnRemoveRolesAction\r\n  | OnRemoveRolesSucceededAction;\r\n\r\nconst reducer = (state: State, action: Action) =>\r\n  produce(state, (draftState) => {\r\n    switch (action.type) {\r\n      case 'ON_REMOVE_ROLES': {\r\n        draftState.showModalConfirmButtonLoading = true;\r\n        break;\r\n      }\r\n      case 'ON_REMOVE_ROLES_SUCCEEDED': {\r\n        draftState.shouldRefetchData = true;\r\n        draftState.roleToDelete = null;\r\n        break;\r\n      }\r\n      case 'RESET_DATA_TO_DELETE': {\r\n        draftState.shouldRefetchData = false;\r\n        draftState.roleToDelete = null;\r\n        draftState.showModalConfirmButtonLoading = false;\r\n        break;\r\n      }\r\n      case 'SET_ROLE_TO_DELETE': {\r\n        draftState.roleToDelete = action.id;\r\n\r\n        break;\r\n      }\r\n      default:\r\n        return draftState;\r\n    }\r\n  });\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.roles.read);\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedListPage, ListPage };\r\n"],"names":["useIntl","jsxs","Tr","jsx","Td","Typography","Flex","Box","IconButton","useTypedSelector","selectAdminPermissions","useAPIErrorHandler","useNotification","React","useQueryParams","useRBAC","useAdminRoles","useNavigate","useFetchClient","isFetchError","Page","Layouts","Button","Plus","SearchInput","Table","TFooter","Thead","Th","VisuallyHidden","Tbody","Duplicate","Pencil","Trash","Dialog","ConfirmDialog","produce"],"mappings":"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"}