{"version":3,"file":"EditPage-o11xwcnG.js","sources":["../../admin/src/pages/Settings/pages/Webhooks/components/Events.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/EventsTable.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/HeadersInput.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/TriggerContainer.tsx","../../admin/src/pages/Settings/pages/Webhooks/components/WebhookForm.tsx","../../admin/src/pages/Settings/pages/Webhooks/EditPage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {\r\n  Checkbox,\r\n  Flex,\r\n  RawTable as Table,\r\n  RawTbody as Tbody,\r\n  RawTd as Td,\r\n  RawTh as Th,\r\n  RawThead as Thead,\r\n  RawTr as Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Field,\r\n  CheckboxProps,\r\n} from '@strapi/design-system';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useField } from '../../../../../components/Form';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsRoot\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EventsRootProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst EventsRoot = ({ children }: EventsRootProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const label = formatMessage({\r\n    id: 'Settings.webhooks.form.events',\r\n    defaultMessage: 'Events',\r\n  });\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n      <Field.Label aria-hidden>{label}</Field.Label>\r\n      {/* @ts-expect-error â€“ TODO: add colCount & rowCount */}\r\n      <StyledTable aria-label={label}>{children}</StyledTable>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n// TODO check whether we want to move alternating background colour tables to the design system\r\nconst StyledTable = styled(Table)`\r\n  tbody tr:nth-child(odd) {\r\n    background: ${({ theme }) => theme.colors.neutral100};\r\n  }\r\n\r\n  thead th span {\r\n    color: ${({ theme }) => theme.colors.neutral500};\r\n  }\r\n\r\n  td,\r\n  th {\r\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\r\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\r\n    width: 6%;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  tbody tr td:first-child {\r\n    /**\r\n     * Add padding to the start of the first column to avoid the checkbox appearing\r\n     * too close to the edge of the table\r\n     */\r\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsHeaders\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EventsHeadersProps {\r\n  getHeaders?: typeof getCEHeaders;\r\n}\r\n\r\nconst getCEHeaders = (): MessageDescriptor[] => {\r\n  const headers = [\r\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\r\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\r\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\r\n    { id: 'app.utils.publish', defaultMessage: 'Publish' },\r\n    { id: 'app.utils.unpublish', defaultMessage: 'Unpublish' },\r\n  ];\r\n\r\n  return headers;\r\n};\r\n\r\nconst EventsHeaders = ({ getHeaders = getCEHeaders }: EventsHeadersProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const headers = getHeaders();\r\n\r\n  return (\r\n    <Thead>\r\n      <Tr>\r\n        <Th>\r\n          <VisuallyHidden>\r\n            {formatMessage({\r\n              id: 'Settings.webhooks.event.select',\r\n              defaultMessage: 'Select event',\r\n            })}\r\n          </VisuallyHidden>\r\n        </Th>\r\n        {headers.map((header) => {\r\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header?.id ?? '')) {\r\n            return (\r\n              <Th\r\n                key={header.id}\r\n                title={formatMessage({\r\n                  id: 'Settings.webhooks.event.publish-tooltip',\r\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\r\n                })}\r\n              >\r\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                  {formatMessage(header)}\r\n                </Typography>\r\n              </Th>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <Th key={header.id}>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {formatMessage(header)}\r\n              </Typography>\r\n            </Th>\r\n          );\r\n        })}\r\n      </Tr>\r\n    </Thead>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsBody\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface FormikContextValue {\r\n  events: string[];\r\n}\r\n\r\ninterface EventsBodyProps {\r\n  providedEvents?: Record<string, FormikContextValue['events']>;\r\n}\r\n\r\nconst EventsBody = ({ providedEvents }: EventsBodyProps) => {\r\n  const events = providedEvents || getCEEvents();\r\n  const { value = [], onChange } = useField<string[]>('events');\r\n\r\n  const inputName = 'events';\r\n  const inputValue = value;\r\n  const disabledEvents: string[] = [];\r\n\r\n  const formattedValue = inputValue.reduce<Record<string, string[]>>((acc, curr) => {\r\n    const key = curr.split('.')[0];\r\n\r\n    if (!acc[key]) {\r\n      acc[key] = [];\r\n    }\r\n    acc[key].push(curr);\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSelect: EventsRowProps['handleSelect'] = (name, value) => {\r\n    const set = new Set(inputValue);\r\n\r\n    if (value) {\r\n      set.add(name);\r\n    } else {\r\n      set.delete(name);\r\n    }\r\n\r\n    onChange(inputName, Array.from(set));\r\n  };\r\n\r\n  const handleSelectAll: EventsRowProps['handleSelectAll'] = (name, value) => {\r\n    const set = new Set(inputValue);\r\n\r\n    if (value) {\r\n      events[name].forEach((event) => {\r\n        if (!disabledEvents.includes(event)) {\r\n          set.add(event);\r\n        }\r\n      });\r\n    } else {\r\n      events[name].forEach((event) => set.delete(event));\r\n    }\r\n\r\n    onChange(inputName, Array.from(set));\r\n  };\r\n\r\n  return (\r\n    <Tbody>\r\n      {Object.entries(events).map(([event, value]) => {\r\n        return (\r\n          <EventsRow\r\n            disabledEvents={disabledEvents}\r\n            key={event}\r\n            name={event}\r\n            events={value}\r\n            inputValue={formattedValue[event]}\r\n            handleSelect={handleSelect}\r\n            handleSelectAll={handleSelectAll}\r\n          />\r\n        );\r\n      })}\r\n    </Tbody>\r\n  );\r\n};\r\n\r\nconst getCEEvents = (): Required<Pick<EventsBodyProps, 'providedEvents'>>['providedEvents'] => {\r\n  const entryEvents: FormikContextValue['events'] = [\r\n    'entry.create',\r\n    'entry.update',\r\n    'entry.delete',\r\n    'entry.publish',\r\n    'entry.unpublish',\r\n  ];\r\n\r\n  return {\r\n    entry: entryEvents,\r\n    media: ['media.create', 'media.update', 'media.delete'],\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EventsRowProps {\r\n  disabledEvents?: string[];\r\n  events?: string[];\r\n  inputValue?: string[];\r\n  handleSelect: (name: string, value: boolean) => void;\r\n  handleSelectAll: (name: string, value: boolean) => void;\r\n  name: string;\r\n}\r\n\r\nconst EventsRow = ({\r\n  disabledEvents = [],\r\n  name,\r\n  events = [],\r\n  inputValue = [],\r\n  handleSelect,\r\n  handleSelectAll,\r\n}: EventsRowProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\r\n\r\n  const hasSomeCheckboxSelected = inputValue.length > 0;\r\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\r\n\r\n  const onChangeAll: CheckboxProps['onCheckedChange'] = () => {\r\n    const valueToSet = !areAllCheckboxesSelected;\r\n\r\n    handleSelectAll(name, valueToSet);\r\n  };\r\n\r\n  const targetColumns = 5;\r\n\r\n  return (\r\n    <Tr>\r\n      <Td>\r\n        <Checkbox\r\n          aria-label={formatMessage({\r\n            id: 'global.select-all-entries',\r\n            defaultMessage: 'Select all entries',\r\n          })}\r\n          name={name}\r\n          checked={\r\n            hasSomeCheckboxSelected && !areAllCheckboxesSelected\r\n              ? 'indeterminate'\r\n              : areAllCheckboxesSelected\r\n          }\r\n          onCheckedChange={onChangeAll}\r\n        >\r\n          {removeHyphensAndTitleCase(name)}\r\n        </Checkbox>\r\n      </Td>\r\n\r\n      {events.map((event) => {\r\n        return (\r\n          <Td key={event} textAlign=\"center\">\r\n            <Flex width=\"100%\" justifyContent=\"center\">\r\n              <Checkbox\r\n                disabled={disabledEvents.includes(event)}\r\n                aria-label={event}\r\n                name={event}\r\n                checked={inputValue.includes(event)}\r\n                onCheckedChange={(value) => handleSelect(event, !!value)}\r\n              />\r\n            </Flex>\r\n          </Td>\r\n        );\r\n      })}\r\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\r\n    </Tr>\r\n  );\r\n};\r\n\r\n/**\r\n * Converts a string to title case and removes hyphens.\r\n */\r\nconst removeHyphensAndTitleCase = (str: string): string =>\r\n  str\r\n    .replace(/-/g, ' ')\r\n    .split(' ')\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n    .join(' ');\r\n\r\nconst Events = { Root: EventsRoot, Headers: EventsHeaders, Body: EventsBody, Row: EventsRow };\r\n\r\nexport { Events };\r\nexport type { EventsRowProps, EventsHeadersProps, EventsRootProps, EventsBodyProps };\r\n","import { Events } from './Events';\r\n\r\nconst EventTableCE = () => {\r\n  return (\r\n    <Events.Root>\r\n      <Events.Headers />\r\n      <Events.Body />\r\n    </Events.Root>\r\n  );\r\n};\r\n\r\nexport { EventTableCE };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  TextButton,\r\n  ComboboxOption,\r\n  Combobox,\r\n  ComboboxProps,\r\n  IconButton,\r\n  Field as DSField,\r\n} from '@strapi/design-system';\r\nimport { Minus, Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useField, useForm } from '../../../../../components/Form';\r\nimport { StringInput } from '../../../../../components/FormInputs/String';\r\n\r\nconst AddHeaderButton = styled(TextButton)`\r\n  cursor: pointer;\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeadersInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface Header {\r\n  key: HTTPHeaders;\r\n  value: string;\r\n}\r\n\r\nconst HeadersInput = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const addFieldRow = useForm('HeadersInput', (state) => state.addFieldRow);\r\n  const removeFieldRow = useForm('HeadersInput', (state) => state.removeFieldRow);\r\n  const setFieldValue = useForm('HeadersInput', (state) => state.onChange);\r\n  const { value = [] } = useField<Header[]>('headers');\r\n\r\n  const removeRow = (index: number) => {\r\n    // if we are removing the last row, simply clear it\r\n    if (value.length === 1) {\r\n      setFieldValue('headers', [{ key: '', value: '' }]);\r\n    } else {\r\n      removeFieldRow('headers', index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n      <DSField.Label>\r\n        {formatMessage({\r\n          id: 'Settings.webhooks.form.headers',\r\n          defaultMessage: 'Headers',\r\n        })}\r\n      </DSField.Label>\r\n      <Box padding={8} background=\"neutral100\" hasRadius>\r\n        {value.map((val, index) => {\r\n          return (\r\n            <Grid.Root key={`${index}-${JSON.stringify(val.key)}`} gap={4} padding={2}>\r\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                <HeaderCombobox\r\n                  name={`headers.${index}.key`}\r\n                  aria-label={`row ${index + 1} key`}\r\n                  label={formatMessage({\r\n                    id: 'Settings.webhooks.key',\r\n                    defaultMessage: 'Key',\r\n                  })}\r\n                />\r\n              </Grid.Item>\r\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                <Flex alignItems=\"flex-end\" gap={2}>\r\n                  <Box style={{ flex: 1 }}>\r\n                    <StringInput\r\n                      name={`headers.${index}.value`}\r\n                      aria-label={`row ${index + 1} value`}\r\n                      label={formatMessage({\r\n                        id: 'Settings.webhooks.value',\r\n                        defaultMessage: 'Value',\r\n                      })}\r\n                      type=\"string\"\r\n                    />\r\n                  </Box>\r\n                  <IconButton\r\n                    width=\"4rem\"\r\n                    height=\"4rem\"\r\n                    onClick={() => removeRow(index)}\r\n                    color=\"primary600\"\r\n                    label={formatMessage(\r\n                      {\r\n                        id: 'Settings.webhooks.headers.remove',\r\n                        defaultMessage: 'Remove header row {number}',\r\n                      },\r\n                      { number: index + 1 }\r\n                    )}\r\n                    type=\"button\"\r\n                  >\r\n                    <Minus width=\"0.8rem\" />\r\n                  </IconButton>\r\n                </Flex>\r\n              </Grid.Item>\r\n            </Grid.Root>\r\n          );\r\n        })}\r\n        <Box paddingTop={4}>\r\n          <AddHeaderButton\r\n            type=\"button\"\r\n            onClick={() => {\r\n              addFieldRow('headers', { key: '', value: '' });\r\n            }}\r\n            startIcon={<Plus />}\r\n          >\r\n            {formatMessage({\r\n              id: 'Settings.webhooks.create.header',\r\n              defaultMessage: 'Create new header',\r\n            })}\r\n          </AddHeaderButton>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderCombobox\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderComboboxProps extends Omit<ComboboxProps, 'children' | 'name'> {\r\n  name: string;\r\n  label: string;\r\n}\r\n\r\nconst HeaderCombobox = ({ name, label, ...restProps }: HeaderComboboxProps) => {\r\n  const [options, setOptions] = React.useState<HTTPHeaders[]>([...HTTP_HEADERS]);\r\n  const { value: headers } = useField<Header[]>('headers');\r\n  const field = useField(name);\r\n\r\n  React.useEffect(() => {\r\n    const headerOptions = HTTP_HEADERS.filter(\r\n      (key) => !headers?.some((header) => header.key !== field.value && header.key === key)\r\n    );\r\n\r\n    setOptions(headerOptions);\r\n  }, [headers, field.value]);\r\n\r\n  const handleChange: ComboboxProps['onChange'] = (value) => {\r\n    field.onChange(name, value);\r\n  };\r\n\r\n  const handleCreateOption = (value: string) => {\r\n    setOptions((prev) => [...prev, value as HTTPHeaders]);\r\n\r\n    handleChange(value);\r\n  };\r\n\r\n  return (\r\n    <DSField.Root name={name} error={field.error}>\r\n      <DSField.Label>{label}</DSField.Label>\r\n      <Combobox\r\n        {...restProps}\r\n        onClear={() => handleChange('')}\r\n        onChange={handleChange}\r\n        onCreateOption={handleCreateOption}\r\n        placeholder=\"\"\r\n        creatable\r\n        value={field.value}\r\n      >\r\n        {options.map((key) => (\r\n          <ComboboxOption value={key} key={key}>\r\n            {key}\r\n          </ComboboxOption>\r\n        ))}\r\n      </Combobox>\r\n      <DSField.Error />\r\n    </DSField.Root>\r\n  );\r\n};\r\n\r\nconst HTTP_HEADERS = [\r\n  'A-IM',\r\n  'Accept',\r\n  'Accept-Charset',\r\n  'Accept-Encoding',\r\n  'Accept-Language',\r\n  'Accept-Datetime',\r\n  'Access-Control-Request-Method',\r\n  'Access-Control-Request-Headers',\r\n  'Authorization',\r\n  'Cache-Control',\r\n  'Connection',\r\n  'Content-Length',\r\n  'Content-Type',\r\n  'Cookie',\r\n  'Date',\r\n  'Expect',\r\n  'Forwarded',\r\n  'From',\r\n  'Host',\r\n  'If-Match',\r\n  'If-Modified-Since',\r\n  'If-None-Match',\r\n  'If-Range',\r\n  'If-Unmodified-Since',\r\n  'Max-Forwards',\r\n  'Origin',\r\n  'Pragma',\r\n  'Proxy-Authorization',\r\n  'Range',\r\n  'Referer',\r\n  'TE',\r\n  'User-Agent',\r\n  'Upgrade',\r\n  'Via',\r\n  'Warning',\r\n] as const;\r\n\r\ntype HTTPHeaders = (typeof HTTP_HEADERS)[number];\r\n\r\nexport { HeadersInput };\r\n","import { Box, Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { Check, Cross, Loader } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TriggerContainer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TriggerContainerProps extends Pick<StatusProps, 'isPending'> {\r\n  onCancel: () => void;\r\n  response?: {\r\n    statusCode: number;\r\n    message?: string;\r\n  };\r\n}\r\n\r\nconst TriggerContainer = ({ isPending, onCancel, response }: TriggerContainerProps) => {\r\n  const { statusCode, message } = response ?? {};\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box background=\"neutral0\" padding={5} shadow=\"filterShadow\" hasRadius>\r\n      <Grid.Root gap={4} style={{ alignItems: 'center' }}>\r\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\r\n          <Typography>\r\n            {formatMessage({\r\n              id: 'Settings.webhooks.trigger.test',\r\n              defaultMessage: 'Test-trigger',\r\n            })}\r\n          </Typography>\r\n        </Grid.Item>\r\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\r\n          <Status isPending={isPending} statusCode={statusCode} />\r\n        </Grid.Item>\r\n        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n          {!isPending ? (\r\n            <Message statusCode={statusCode} message={message} />\r\n          ) : (\r\n            <Flex justifyContent=\"flex-end\">\r\n              <button onClick={onCancel} type=\"button\">\r\n                <Flex gap={2} alignItems=\"center\">\r\n                  <Typography textColor=\"neutral400\">\r\n                    {formatMessage({\r\n                      id: 'Settings.webhooks.trigger.cancel',\r\n                      defaultMessage: 'cancel',\r\n                    })}\r\n                  </Typography>\r\n                  <Cross fill=\"neutral400\" height=\"1.2rem\" width=\"1.2rem\" />\r\n                </Flex>\r\n              </button>\r\n            </Flex>\r\n          )}\r\n        </Grid.Item>\r\n      </Grid.Root>\r\n    </Box>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Status\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface StatusProps {\r\n  isPending: boolean;\r\n  statusCode?: number;\r\n}\r\n\r\nconst Status = ({ isPending, statusCode }: StatusProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (isPending || !statusCode) {\r\n    return (\r\n      <Flex gap={2} alignItems=\"center\">\r\n        <Loader height=\"1.2rem\" width=\"1.2rem\" />\r\n        <Typography>\r\n          {formatMessage({ id: 'Settings.webhooks.trigger.pending', defaultMessage: 'pending' })}\r\n        </Typography>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (statusCode >= 200 && statusCode < 300) {\r\n    return (\r\n      <Flex gap={2} alignItems=\"center\">\r\n        <Check fill=\"success700\" height=\"1.2rem\" width=\"1.2rem\" />\r\n        <Typography>\r\n          {formatMessage({ id: 'Settings.webhooks.trigger.success', defaultMessage: 'success' })}\r\n        </Typography>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (statusCode >= 300) {\r\n    return (\r\n      <Flex gap={2} alignItems=\"center\">\r\n        <Cross fill=\"danger700\" height=\"1.2rem\" width=\"1.2rem\" />\r\n        <Typography>\r\n          {formatMessage({ id: 'Settings.error', defaultMessage: 'error' })} {statusCode}\r\n        </Typography>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Message\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface MessageProps {\r\n  statusCode?: number;\r\n  message?: string;\r\n}\r\n\r\nconst Message = ({ statusCode, message }: MessageProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!statusCode) {\r\n    return null;\r\n  }\r\n\r\n  if (statusCode >= 200 && statusCode < 300) {\r\n    return (\r\n      <Flex justifyContent=\"flex-end\">\r\n        <Typography textColor=\"neutral600\" ellipsis>\r\n          {formatMessage({\r\n            id: 'Settings.webhooks.trigger.success.label',\r\n            defaultMessage: 'Trigger succeeded',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (statusCode >= 300) {\r\n    return (\r\n      <Flex justifyContent=\"flex-end\">\r\n        <Flex maxWidth={`25rem`} justifyContent=\"flex-end\" title={message}>\r\n          <Typography ellipsis textColor=\"neutral600\">\r\n            {message}\r\n          </Typography>\r\n        </Flex>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport { TriggerContainer };\r\n","import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, Grid, TextInput } from '@strapi/design-system';\r\nimport { Check, Play as Publish } from '@strapi/icons';\r\nimport { IntlShape, useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { TriggerWebhook } from '../../../../../../../shared/contracts/webhooks';\r\nimport { Form, FormHelpers } from '../../../../../components/Form';\r\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\r\nimport { Layouts } from '../../../../../components/Layouts/Layout';\r\nimport { BackButton } from '../../../../../features/BackButton';\r\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\r\n\r\nimport { EventTableCE } from './EventsTable';\r\nimport { HeadersInput } from './HeadersInput';\r\nimport { TriggerContainer } from './TriggerContainer';\r\n\r\nimport type { Modules } from '@strapi/types';\r\n\r\ninterface WebhookFormValues {\r\n  name: Modules.WebhookStore.Webhook['name'];\r\n  url: Modules.WebhookStore.Webhook['url'];\r\n  headers: Array<{ key: string; value: string }>;\r\n  events: Modules.WebhookStore.Webhook['events'];\r\n}\r\n\r\ninterface WebhookFormProps {\r\n  data?: Modules.WebhookStore.Webhook;\r\n  handleSubmit: (\r\n    values: WebhookFormValues,\r\n    helpers: FormHelpers<WebhookFormValues>\r\n  ) => Promise<void>;\r\n  isCreating: boolean;\r\n  isTriggering: boolean;\r\n  triggerWebhook: () => void;\r\n  triggerResponse?: TriggerWebhook.Response['data'];\r\n}\r\n\r\nconst WebhookForm = ({\r\n  handleSubmit,\r\n  triggerWebhook,\r\n  isCreating,\r\n  isTriggering,\r\n  triggerResponse,\r\n  data,\r\n}: WebhookFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [showTriggerResponse, setShowTriggerResponse] = React.useState(false);\r\n  const EventTable = useEnterprise(\r\n    EventTableCE,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Webhooks/components/EventsTable'\r\n        )\r\n      ).EventsTableEE\r\n  );\r\n\r\n  /**\r\n   * Map the headers into a form that can be used within the formik form\r\n   */\r\n  const mapHeaders = (headers: Modules.WebhookStore.Webhook['headers']) => {\r\n    if (!Object.keys(headers).length) {\r\n      return [{ key: '', value: '' }];\r\n    }\r\n\r\n    return Object.entries(headers).map(([key, value]) => ({ key, value }));\r\n  };\r\n\r\n  // block rendering until the EE component is fully loaded\r\n  if (!EventTable) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      initialValues={{\r\n        name: data?.name || '',\r\n        url: data?.url || '',\r\n        headers: mapHeaders(data?.headers || {}),\r\n        events: data?.events || [],\r\n      }}\r\n      method={isCreating ? 'POST' : 'PUT'}\r\n      onSubmit={handleSubmit}\r\n      validationSchema={makeWebhookValidationSchema({ formatMessage })}\r\n    >\r\n      {({ isSubmitting, modified }) => (\r\n        <>\r\n          <Layouts.Header\r\n            primaryAction={\r\n              <Flex gap={2}>\r\n                <Button\r\n                  onClick={() => {\r\n                    triggerWebhook();\r\n                    setShowTriggerResponse(true);\r\n                  }}\r\n                  variant=\"tertiary\"\r\n                  startIcon={<Publish />}\r\n                  disabled={isCreating || isTriggering}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'Settings.webhooks.trigger',\r\n                    defaultMessage: 'Trigger',\r\n                  })}\r\n                </Button>\r\n                <Button\r\n                  startIcon={<Check />}\r\n                  type=\"submit\"\r\n                  disabled={!modified}\r\n                  loading={isSubmitting}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'global.save',\r\n                    defaultMessage: 'Save',\r\n                  })}\r\n                </Button>\r\n              </Flex>\r\n            }\r\n            title={\r\n              isCreating\r\n                ? formatMessage({\r\n                    id: 'Settings.webhooks.create',\r\n                    defaultMessage: 'Create a webhook',\r\n                  })\r\n                : data?.name\r\n            }\r\n            navigationAction={<BackButton fallback=\"../webhooks\" />}\r\n          />\r\n          <Layouts.Content>\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n              {showTriggerResponse && (\r\n                <TriggerContainer\r\n                  isPending={isTriggering}\r\n                  response={triggerResponse}\r\n                  onCancel={() => setShowTriggerResponse(false)}\r\n                />\r\n              )}\r\n              <Box background=\"neutral0\" padding={8} shadow=\"filterShadow\" hasRadius>\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                  <Grid.Root gap={6}>\r\n                    {[\r\n                      {\r\n                        label: formatMessage({\r\n                          id: 'global.name',\r\n                          defaultMessage: 'Name',\r\n                        }),\r\n                        name: 'name',\r\n                        required: true,\r\n                        size: 6,\r\n                        type: 'string' as const,\r\n                      },\r\n                      {\r\n                        label: formatMessage({\r\n                          id: 'Settings.roles.form.input.url',\r\n                          defaultMessage: 'Url',\r\n                        }),\r\n                        name: 'url',\r\n                        required: true,\r\n                        size: 12,\r\n                        type: 'string' as const,\r\n                      },\r\n                    ].map(({ size, ...field }) => (\r\n                      <Grid.Item\r\n                        key={field.name}\r\n                        col={size}\r\n                        direction=\"column\"\r\n                        alignItems=\"stretch\"\r\n                      >\r\n                        <InputRenderer {...field} />\r\n                      </Grid.Item>\r\n                    ))}\r\n                  </Grid.Root>\r\n                  <HeadersInput />\r\n                  <EventTable />\r\n                </Flex>\r\n              </Box>\r\n            </Flex>\r\n          </Layouts.Content>\r\n        </>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst NAME_REGEX = /(^$)|(^[A-Za-z][_0-9A-Za-z ]*$)/;\r\nconst URL_REGEX = /(^$)|((https?:\\/\\/.*)(d*)\\/?(.*))/;\r\n\r\nconst makeWebhookValidationSchema = ({ formatMessage }: Pick<IntlShape, 'formatMessage'>) =>\r\n  yup.object().shape({\r\n    name: yup\r\n      .string()\r\n      .nullable()\r\n      .required(\r\n        formatMessage({\r\n          id: 'Settings.webhooks.validation.name.required',\r\n          defaultMessage: 'Name is required',\r\n        })\r\n      )\r\n      .matches(\r\n        NAME_REGEX,\r\n        formatMessage({\r\n          id: 'Settings.webhooks.validation.name.regex',\r\n          defaultMessage:\r\n            'The name must start with a letter and only contain letters, numbers, spaces and underscores',\r\n        })\r\n      ),\r\n    url: yup\r\n      .string()\r\n      .nullable()\r\n      .required(\r\n        formatMessage({\r\n          id: 'Settings.webhooks.validation.url.required',\r\n          defaultMessage: 'Url is required',\r\n        })\r\n      )\r\n      .matches(\r\n        URL_REGEX,\r\n        formatMessage({\r\n          id: 'Settings.webhooks.validation.url.regex',\r\n          defaultMessage: 'The value must be a valid Url',\r\n        })\r\n      ),\r\n    headers: yup.lazy((array) => {\r\n      const baseSchema = yup.array();\r\n\r\n      if (array.length === 1) {\r\n        const { key, value } = array[0];\r\n\r\n        if (!key && !value) {\r\n          return baseSchema;\r\n        }\r\n      }\r\n\r\n      return baseSchema.of(\r\n        yup.object().shape({\r\n          key: yup\r\n            .string()\r\n            .required(\r\n              formatMessage({\r\n                id: 'Settings.webhooks.validation.key',\r\n                defaultMessage: 'Key is required',\r\n              })\r\n            )\r\n            .nullable(),\r\n          value: yup\r\n            .string()\r\n            .required(\r\n              formatMessage({\r\n                id: 'Settings.webhooks.validation.value',\r\n                defaultMessage: 'Value is required',\r\n              })\r\n            )\r\n            .nullable(),\r\n        })\r\n      );\r\n    }),\r\n    events: yup.array(),\r\n  });\r\n\r\nexport { WebhookForm };\r\nexport type { WebhookFormValues, WebhookFormProps };\r\n","import * as React from 'react';\r\n\r\nimport { Main } from '@strapi/design-system';\r\nimport { Modules } from '@strapi/types';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useMatch } from 'react-router-dom';\r\n\r\nimport { CreateWebhook, TriggerWebhook } from '../../../../../../shared/contracts/webhooks';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { selectAdminPermissions } from '../../../../selectors';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\n\r\nimport { WebhookForm, WebhookFormProps, WebhookFormValues } from './components/WebhookForm';\r\nimport { useWebhooks } from './hooks/useWebhooks';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst cleanData = (\r\n  data: WebhookFormValues\r\n): Omit<CreateWebhook.Request['body'], 'id' | 'isEnabled'> => ({\r\n  ...data,\r\n  headers: data.headers.reduce<Modules.WebhookStore.Webhook['headers']>((acc, { key, value }) => {\r\n    if (key !== '') {\r\n      acc[key] = value;\r\n    }\r\n\r\n    return acc;\r\n  }, {}),\r\n});\r\n\r\nconst EditPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const match = useMatch('/settings/webhooks/:id');\r\n  const id = match?.params.id;\r\n  const isCreating = id === 'create';\r\n\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  /**\r\n   * Prevents the notifications from showing up twice because the function identity\r\n   * coming from the helper plugin is not stable\r\n   */\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const stableFormatAPIError = React.useCallback(formatAPIError, []);\r\n  const [isTriggering, setIsTriggering] = React.useState(false);\r\n  const [triggerResponse, setTriggerResponse] = React.useState<TriggerWebhook.Response['data']>();\r\n\r\n  const { isLoading, webhooks, error, createWebhook, updateWebhook, triggerWebhook } = useWebhooks(\r\n    { id: id! },\r\n    {\r\n      skip: isCreating,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: stableFormatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, toggleNotification, stableFormatAPIError]);\r\n\r\n  const handleTriggerWebhook = async () => {\r\n    try {\r\n      setIsTriggering(true);\r\n\r\n      const res = await triggerWebhook(id!);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      setTriggerResponse(res.data);\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    } finally {\r\n      setIsTriggering(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit: WebhookFormProps['handleSubmit'] = async (data, helpers) => {\r\n    try {\r\n      if (isCreating) {\r\n        const res = await createWebhook(cleanData(data));\r\n\r\n        if ('error' in res) {\r\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n            helpers.setErrors(formatValidationErrors(res.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(res.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'Settings.webhooks.created' }),\r\n        });\r\n\r\n        navigate(`../webhooks/${res.data.id}`, { replace: true });\r\n      } else {\r\n        const res = await updateWebhook({ id: id!, ...cleanData(data) });\r\n\r\n        if ('error' in res) {\r\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n            helpers.setErrors(formatValidationErrors(res.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(res.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'notification.form.success.fields' }),\r\n        });\r\n      }\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  const [webhook] = webhooks ?? [];\r\n\r\n  return (\r\n    <Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Webhooks',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <WebhookForm\r\n        data={webhook}\r\n        handleSubmit={handleSubmit}\r\n        triggerWebhook={handleTriggerWebhook}\r\n        isCreating={isCreating}\r\n        isTriggering={isTriggering}\r\n        triggerResponse={triggerResponse}\r\n      />\r\n    </Main>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedEditView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedEditPage = () => {\r\n  const permissions = useTypedSelector(selectAdminPermissions);\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions.settings?.webhooks.update}>\r\n      <EditPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedEditPage, EditPage };\r\n"],"names":["useIntl","Flex","jsx","Field","styled","Table","Thead","jsxs","Tr","Th","VisuallyHidden","Typography","useField","value","Tbody","Td","Checkbox","TextButton","useForm","DSField","Box","index","Grid","StringInput","IconButton","Minus","Plus","React","Combobox","ComboboxOption","Cross","Loader","Check","useEnterprise","Form","Fragment","Layouts","Button","Publish","BackButton","InputRenderer","yup","useMatch","useNavigate","useNotification","useAPIErrorHandler","useWebhooks","isBaseQueryError","Page","Main","useTypedSelector","selectAdminPermissions"],"mappings":"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"}