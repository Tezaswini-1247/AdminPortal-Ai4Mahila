{"version":3,"file":"ListPage-DjuFRBhx.js","sources":["../../admin/src/pages/Settings/pages/Users/components/CreateActionCE.tsx","../../admin/src/pages/Settings/pages/Users/components/NewUserForm.tsx","../../admin/src/pages/Settings/pages/Users/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button, ButtonProps } from '@strapi/design-system';\r\nimport { Mail } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface CreateActionCEProps extends Pick<ButtonProps, 'onClick'> {}\r\n\r\nconst CreateActionCE = React.forwardRef<HTMLButtonElement, CreateActionCEProps>((props, ref) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Button ref={ref} startIcon={<Mail />} size=\"S\" {...props}>\r\n      {formatMessage({\r\n        id: 'Settings.permissions.users.create',\r\n        defaultMessage: 'Invite new user',\r\n      })}\r\n    </Button>\r\n  );\r\n});\r\n\r\nexport { CreateActionCE };\r\nexport type { CreateActionCEProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Grid,\r\n  Modal,\r\n  Typography,\r\n  Breadcrumbs,\r\n  Crumb,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { Form, type FormHelpers } from '../../../../../components/Form';\r\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\r\nimport { useNotification } from '../../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\r\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\r\nimport { useCreateUserMutation } from '../../../../../services/users';\r\nimport { FormLayoutInputProps } from '../../../../../types/forms';\r\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../../utils/translatedErrors';\r\n\r\nimport { MagicLinkCE } from './MagicLinkCE';\r\nimport { SelectRoles } from './SelectRoles';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\ninterface ModalFormProps {\r\n  onToggle: () => void;\r\n}\r\n\r\ntype FormLayout = FormLayoutInputProps[][];\r\n\r\nconst ModalForm = ({ onToggle }: ModalFormProps) => {\r\n  const [currentStep, setStep] = React.useState<keyof typeof STEPPER>('create');\r\n  const [registrationToken, setRegistrationToken] = React.useState('');\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n  const roleLayout = useEnterprise<FormLayout, FormLayout, FormLayout>(\r\n    ROLE_LAYOUT,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\r\n        )\r\n      ).ROLE_LAYOUT,\r\n    {\r\n      combine(ceRoles, eeRoles) {\r\n        return [...ceRoles, ...eeRoles];\r\n      },\r\n\r\n      defaultValue: [],\r\n    }\r\n  );\r\n\r\n  const initialValues = useEnterprise<InitialData>(\r\n    FORM_INITIAL_VALUES,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\r\n        )\r\n      ).FORM_INITIAL_VALUES,\r\n    {\r\n      combine(ceValues, eeValues) {\r\n        return {\r\n          ...ceValues,\r\n          ...eeValues,\r\n        };\r\n      },\r\n\r\n      defaultValue: FORM_INITIAL_VALUES,\r\n    }\r\n  );\r\n  const MagicLink = useEnterprise(\r\n    MagicLinkCE,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\r\n        )\r\n      ).MagicLinkEE\r\n  );\r\n\r\n  const [createUser] = useCreateUserMutation();\r\n\r\n  const headerTitle = formatMessage({\r\n    id: 'Settings.permissions.users.create',\r\n    defaultMessage: 'Invite new user',\r\n  });\r\n\r\n  const handleSubmit = async (body: InitialData, { setErrors }: FormHelpers<InitialData>) => {\r\n    const res = await createUser({\r\n      ...body,\r\n      roles: body.roles ?? [],\r\n    });\r\n\r\n    if ('data' in res) {\r\n      // NOTE: when enabling SSO, the user doesn't have to register and the token is undefined\r\n      if (res.data.registrationToken) {\r\n        setRegistrationToken(res.data.registrationToken);\r\n      }\r\n\r\n      goNext();\r\n    } else {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(res.error),\r\n      });\r\n\r\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n        setErrors(formatValidationErrors(res.error));\r\n      }\r\n    }\r\n  };\r\n\r\n  const goNext = () => {\r\n    if (next) {\r\n      setStep(next);\r\n    } else {\r\n      onToggle();\r\n    }\r\n  };\r\n\r\n  const { buttonSubmitLabel, isDisabled, next } = STEPPER[currentStep];\r\n\r\n  // block rendering until the EE component is fully loaded\r\n  if (!MagicLink) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Modal.Root defaultOpen onOpenChange={onToggle}>\r\n      <Modal.Content>\r\n        <Modal.Header>\r\n          {/**\r\n           * TODO: this is not semantically correct and should be amended.\r\n           */}\r\n          <Breadcrumbs label={headerTitle}>\r\n            <Crumb isCurrent>{headerTitle}</Crumb>\r\n          </Breadcrumbs>\r\n        </Modal.Header>\r\n        <Form\r\n          method={currentStep === 'create' ? 'POST' : 'PUT'}\r\n          initialValues={initialValues ?? {}}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={FORM_SCHEMA}\r\n        >\r\n          {({ isSubmitting }) => {\r\n            return (\r\n              <>\r\n                <Modal.Body>\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                    {currentStep !== 'create' && (\r\n                      <MagicLink registrationToken={registrationToken} />\r\n                    )}\r\n                    <Box>\r\n                      <Typography variant=\"beta\" tag=\"h2\">\r\n                        {formatMessage({\r\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\r\n                          defaultMessage: 'User details',\r\n                        })}\r\n                      </Typography>\r\n                      <Box paddingTop={4}>\r\n                        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n                          <Grid.Root gap={5}>\r\n                            {FORM_LAYOUT.map((row) => {\r\n                              return row.map(({ size, ...field }) => {\r\n                                return (\r\n                                  <Grid.Item\r\n                                    key={field.name}\r\n                                    col={size}\r\n                                    direction=\"column\"\r\n                                    alignItems=\"stretch\"\r\n                                  >\r\n                                    <InputRenderer\r\n                                      {...field}\r\n                                      disabled={isDisabled}\r\n                                      label={formatMessage(field.label)}\r\n                                      placeholder={formatMessage(field.placeholder)}\r\n                                    />\r\n                                  </Grid.Item>\r\n                                );\r\n                              });\r\n                            })}\r\n                          </Grid.Root>\r\n                        </Flex>\r\n                      </Box>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"beta\" tag=\"h2\">\r\n                        {formatMessage({\r\n                          id: 'global.roles',\r\n                          defaultMessage: \"User's role\",\r\n                        })}\r\n                      </Typography>\r\n                      <Box paddingTop={4}>\r\n                        <Grid.Root gap={5}>\r\n                          <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n                            <SelectRoles disabled={isDisabled} />\r\n                          </Grid.Item>\r\n                          {roleLayout.map((row) => {\r\n                            return row.map(({ size, ...field }) => {\r\n                              return (\r\n                                <Grid.Item\r\n                                  key={field.name}\r\n                                  col={size}\r\n                                  direction=\"column\"\r\n                                  alignItems=\"stretch\"\r\n                                >\r\n                                  <InputRenderer\r\n                                    {...field}\r\n                                    disabled={isDisabled}\r\n                                    label={formatMessage(field.label)}\r\n                                    placeholder={\r\n                                      field.placeholder\r\n                                        ? formatMessage(field.placeholder)\r\n                                        : undefined\r\n                                    }\r\n                                    hint={field.hint ? formatMessage(field.hint) : undefined}\r\n                                  />\r\n                                </Grid.Item>\r\n                              );\r\n                            });\r\n                          })}\r\n                        </Grid.Root>\r\n                      </Box>\r\n                    </Box>\r\n                  </Flex>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\r\n                    {formatMessage({\r\n                      id: 'app.components.Button.cancel',\r\n                      defaultMessage: 'Cancel',\r\n                    })}\r\n                  </Button>\r\n                  {currentStep === 'create' ? (\r\n                    <Button type=\"submit\" loading={isSubmitting}>\r\n                      {formatMessage(buttonSubmitLabel)}\r\n                    </Button>\r\n                  ) : (\r\n                    <Button type=\"button\" loading={isSubmitting} onClick={onToggle}>\r\n                      {formatMessage(buttonSubmitLabel)}\r\n                    </Button>\r\n                  )}\r\n                </Modal.Footer>\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\ninterface InitialData {\r\n  firstname?: string;\r\n  lastname?: string;\r\n  email?: string;\r\n  roles?: Data.ID[];\r\n  useSSORegistration?: boolean;\r\n}\r\n\r\nconst FORM_INITIAL_VALUES = {\r\n  firstname: '',\r\n  lastname: '',\r\n  email: '',\r\n  roles: [],\r\n};\r\n\r\nconst ROLE_LAYOUT: FormLayout = [];\r\n\r\nconst FORM_LAYOUT = [\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.firstname.label',\r\n        defaultMessage: 'First name',\r\n      },\r\n      name: 'firstname',\r\n      placeholder: {\r\n        id: 'Auth.form.firstname.placeholder',\r\n        defaultMessage: 'e.g. Kai',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n      required: true,\r\n    },\r\n    {\r\n      label: {\r\n        id: 'Auth.form.lastname.label',\r\n        defaultMessage: 'Last name',\r\n      },\r\n      name: 'lastname',\r\n      placeholder: {\r\n        id: 'Auth.form.lastname.placeholder',\r\n        defaultMessage: 'e.g. Doe',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.email.label',\r\n        defaultMessage: 'Email',\r\n      },\r\n      name: 'email',\r\n      placeholder: {\r\n        id: 'Auth.form.email.placeholder',\r\n        defaultMessage: 'e.g. kai.doe@strapi.io',\r\n      },\r\n      type: 'email' as const,\r\n      size: 6,\r\n      required: true,\r\n    },\r\n  ],\r\n] satisfies FormLayout;\r\n\r\nconst FORM_SCHEMA = yup.object().shape({\r\n  firstname: yup\r\n    .string()\r\n    .trim()\r\n    .required({\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    })\r\n    .nullable(),\r\n  lastname: yup.string(),\r\n  email: yup\r\n    .string()\r\n    .email(translatedErrors.email)\r\n    .required({\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    })\r\n    .nullable(),\r\n  roles: yup\r\n    .array()\r\n    .min(1, {\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    })\r\n    .required({\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    }),\r\n});\r\n\r\nconst STEPPER = {\r\n  create: {\r\n    buttonSubmitLabel: {\r\n      id: 'app.containers.Users.ModalForm.footer.button-success',\r\n      defaultMessage: 'Invite user',\r\n    },\r\n    isDisabled: false,\r\n    next: 'magic-link',\r\n  },\r\n  'magic-link': {\r\n    buttonSubmitLabel: { id: 'global.finish', defaultMessage: 'Finish' },\r\n    isDisabled: true,\r\n    next: null,\r\n  },\r\n} as const;\r\n\r\nexport { ModalForm };\r\nexport type { InitialData };\r\n","import * as React from 'react';\r\n\r\nimport { Flex, Typography, Status, IconButton, Dialog } from '@strapi/design-system';\r\nimport { Pencil, Trash } from '@strapi/icons';\r\nimport * as qs from 'qs';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { Filters } from '../../../../components/Filters';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { Pagination } from '../../../../components/Pagination';\r\nimport { SearchInput } from '../../../../components/SearchInput';\r\nimport { Table } from '../../../../components/Table';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport { useAdminUsers, useDeleteManyUsersMutation } from '../../../../services/users';\r\nimport { getDisplayName } from '../../../../utils/users';\r\n\r\nimport { CreateActionCE } from './components/CreateActionCE';\r\nimport { ModalForm } from './components/NewUserForm';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListPageCE\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ListPageCE = () => {\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\r\n  const {\r\n    allowedActions: { canCreate, canDelete, canRead },\r\n  } = useRBAC(permissions.settings?.users);\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const { search } = useLocation();\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = React.useState(false);\r\n  const [idsToDelete, setIdsToDelete] = React.useState<Array<SanitizedAdminUser['id']>>([]);\r\n  const { data, isError, isLoading } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }));\r\n\r\n  const { pagination, users = [] } = data ?? {};\r\n\r\n  const CreateAction = useEnterprise(\r\n    CreateActionCE,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\r\n        )\r\n      ).CreateActionEE\r\n  );\r\n\r\n  const headers = TABLE_HEADERS.map((header) => ({\r\n    ...header,\r\n    label: formatMessage(header.label),\r\n  }));\r\n\r\n  const title = formatMessage({\r\n    id: 'global.users',\r\n    defaultMessage: 'Users',\r\n  });\r\n\r\n  const handleToggle = () => {\r\n    setIsModalOpen((prev) => !prev);\r\n  };\r\n\r\n  const [deleteAll] = useDeleteManyUsersMutation();\r\n  const handleDeleteAll = async (ids: Array<SanitizedAdminUser['id']>) => {\r\n    try {\r\n      const res = await deleteAll({ ids });\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'global.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (id: SanitizedAdminUser['id']) => () => {\r\n    if (canRead) {\r\n      navigate(id.toString());\r\n    }\r\n  };\r\n\r\n  const handleDeleteClick = (id: SanitizedAdminUser['id']) => async () => {\r\n    setIdsToDelete([id]);\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    await handleDeleteAll(idsToDelete);\r\n    setShowDeleteConfirmation(false);\r\n  };\r\n\r\n  // block rendering until the EE component is fully loaded\r\n  if (!CreateAction) {\r\n    return null;\r\n  }\r\n\r\n  if (isError) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <Page.Main aria-busy={isLoading}>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Users',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\r\n        title={title}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.permissions.users.listview.header.subtitle',\r\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\r\n        })}\r\n      />\r\n      <Layouts.Action\r\n        startActions={\r\n          <>\r\n            <SearchInput\r\n              label={formatMessage(\r\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\r\n                { target: title }\r\n              )}\r\n            />\r\n            <Filters.Root options={FILTERS}>\r\n              <Filters.Trigger />\r\n              <Filters.Popover />\r\n              <Filters.List />\r\n            </Filters.Root>\r\n          </>\r\n        }\r\n      />\r\n      <Layouts.Content>\r\n        <Table.Root rows={users} headers={headers}>\r\n          <Table.ActionBar />\r\n          <Table.Content>\r\n            <Table.Head>\r\n              {canDelete ? <Table.HeaderCheckboxCell /> : null}\r\n              {headers.map((header) => (\r\n                <Table.HeaderCell key={header.name} {...header} />\r\n              ))}\r\n            </Table.Head>\r\n            <Table.Empty />\r\n            <Table.Loading />\r\n            <Table.Body>\r\n              {users.map((user) => (\r\n                <Table.Row\r\n                  key={user.id}\r\n                  onClick={handleRowClick(user.id)}\r\n                  cursor={canRead ? 'pointer' : 'default'}\r\n                >\r\n                  {canDelete ? <Table.CheckboxCell id={user.id} /> : null}\r\n                  {headers.map(({ cellFormatter, name, ...rest }) => {\r\n                    return (\r\n                      <Table.Cell key={name}>\r\n                        {typeof cellFormatter === 'function' ? (\r\n                          cellFormatter(user, { name, ...rest })\r\n                        ) : (\r\n                          // @ts-expect-error – name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\r\n                          <Typography textColor=\"neutral800\">{user[name] || '-'}</Typography>\r\n                        )}\r\n                      </Table.Cell>\r\n                    );\r\n                  })}\r\n                  {canRead || canDelete ? (\r\n                    <Table.Cell onClick={(e) => e.stopPropagation()}>\r\n                      <Flex justifyContent=\"end\">\r\n                        {canRead ? (\r\n                          <IconButton\r\n                            tag={NavLink}\r\n                            to={user.id.toString()}\r\n                            label={formatMessage(\r\n                              { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\r\n                              { target: getDisplayName(user) }\r\n                            )}\r\n                            variant=\"ghost\"\r\n                          >\r\n                            <Pencil />\r\n                          </IconButton>\r\n                        ) : null}\r\n                        {canDelete ? (\r\n                          <IconButton\r\n                            onClick={handleDeleteClick(user.id)}\r\n                            label={formatMessage(\r\n                              { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\r\n                              { target: getDisplayName(user) }\r\n                            )}\r\n                            variant=\"ghost\"\r\n                          >\r\n                            <Trash />\r\n                          </IconButton>\r\n                        ) : null}\r\n                      </Flex>\r\n                    </Table.Cell>\r\n                  ) : null}\r\n                </Table.Row>\r\n              ))}\r\n            </Table.Body>\r\n          </Table.Content>\r\n        </Table.Root>\r\n        <Pagination.Root {...pagination}>\r\n          <Pagination.PageSize />\r\n          <Pagination.Links />\r\n        </Pagination.Root>\r\n      </Layouts.Content>\r\n      {isModalOpened && <ModalForm onToggle={handleToggle} />}\r\n      <Dialog.Root open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\r\n        <ConfirmDialog onConfirm={confirmDelete} />\r\n      </Dialog.Root>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nconst TABLE_HEADERS: Array<\r\n  Omit<Table.Header<SanitizedAdminUser, any>, 'label'> & { label: MessageDescriptor }\r\n> = [\r\n  {\r\n    name: 'firstname',\r\n    label: {\r\n      id: 'Settings.permissions.users.firstname',\r\n      defaultMessage: 'Firstname',\r\n    },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'lastname',\r\n    label: {\r\n      id: 'Settings.permissions.users.lastname',\r\n      defaultMessage: 'Lastname',\r\n    },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'email',\r\n    label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'roles',\r\n    label: {\r\n      id: 'Settings.permissions.users.roles',\r\n      defaultMessage: 'Roles',\r\n    },\r\n    sortable: false,\r\n    cellFormatter({ roles }) {\r\n      return (\r\n        <Typography textColor=\"neutral800\">{roles.map((role) => role.name).join(',\\n')}</Typography>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    name: 'username',\r\n    label: {\r\n      id: 'Settings.permissions.users.username',\r\n      defaultMessage: 'Username',\r\n    },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'isActive',\r\n    label: {\r\n      id: 'Settings.permissions.users.user-status',\r\n      defaultMessage: 'User status',\r\n    },\r\n    sortable: false,\r\n    cellFormatter({ isActive }) {\r\n      return (\r\n        <Flex>\r\n          <Status\r\n            size=\"S\"\r\n            borderWidth={0}\r\n            background=\"transparent\"\r\n            color=\"neutral800\"\r\n            variant={isActive ? 'success' : 'danger'}\r\n          >\r\n            <Typography>{isActive ? 'Active' : 'Inactive'}</Typography>\r\n          </Status>\r\n        </Flex>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nconst FILTERS = [\r\n  {\r\n    name: 'firstname',\r\n    label: 'Firstname',\r\n    type: 'string',\r\n  },\r\n  {\r\n    name: 'lastname',\r\n    label: 'Lastname',\r\n    type: 'string',\r\n  },\r\n  {\r\n    name: 'email',\r\n    label: 'Email',\r\n    type: 'email',\r\n  },\r\n  {\r\n    name: 'username',\r\n    label: 'Username',\r\n    type: 'string',\r\n  },\r\n  {\r\n    name: 'isActive',\r\n    label: 'Active user',\r\n    type: 'boolean',\r\n  },\r\n] satisfies Filters.Filter[];\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n// component which determines whether this page should render the CE or EE page\r\nconst ListPage = () => {\r\n  const UsersListPage = useEnterprise(\r\n    ListPageCE,\r\n    async () =>\r\n      // eslint-disable-next-line import/no-cycle\r\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\r\n        .UserListPageEE\r\n  );\r\n\r\n  // block rendering until the EE component is fully loaded\r\n  if (!UsersListPage) {\r\n    return null;\r\n  }\r\n\r\n  return <UsersListPage />;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedListPage, ListPage, ListPageCE };\r\n"],"names":["React","useIntl","jsx","Button","Mail","useNotification","useAPIErrorHandler","useEnterprise","MagicLinkCE","useCreateUserMutation","isBaseQueryError","Modal","jsxs","Breadcrumbs","Crumb","Form","Fragment","Flex","Box","Typography","Grid","InputRenderer","SelectRoles","yup","translatedErrors","useTypedSelector","useRBAC","useNavigate","useLocation","useAdminUsers","qs","users","useDeleteManyUsersMutation","Page","Layouts","SearchInput","Filters","Table","IconButton","NavLink","getDisplayName","Pencil","Trash","Pagination","Dialog","ConfirmDialog","Status"],"mappings":"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"}