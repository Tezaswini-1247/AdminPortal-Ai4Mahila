{"version":3,"file":"CreatePage-CinCu6jj.js","sources":["../../admin/src/pages/Settings/pages/Roles/CreatePage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Main,\r\n  Textarea,\r\n  TextInput,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { format } from 'date-fns';\r\nimport { Formik, Form, FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\nimport * as yup from 'yup';\r\n\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { BackButton } from '../../../../features/BackButton';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport {\r\n  useCreateRoleMutation,\r\n  useGetRolePermissionLayoutQuery,\r\n  useGetRolePermissionsQuery,\r\n  useUpdateRolePermissionsMutation,\r\n} from '../../../../services/users';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../utils/translatedErrors';\r\n\r\nimport { Permissions, PermissionsAPI } from './components/Permissions';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CreatePage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst CREATE_SCHEMA = yup.object().shape({\r\n  name: yup.string().required(translatedErrors.required.id),\r\n  description: yup.string().required(translatedErrors.required.id),\r\n});\r\n\r\n/**\r\n * TODO: be nice if we could just infer this from the schema\r\n */\r\ninterface CreateRoleFormValues {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * TODO: this whole section of the app needs refactoring. Using a ref to\r\n * manage the state of the child is nonsensical.\r\n */\r\nconst CreatePage = () => {\r\n  const { id } = useParams();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\r\n  const { trackUsage } = useTracking();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const { isLoading: isLoadingPermissionsLayout, currentData: permissionsLayout } =\r\n    useGetRolePermissionLayoutQuery({\r\n      /**\r\n       * Role here is a query param so if there's no role we pass an empty string\r\n       * which returns us a default layout.\r\n       */\r\n      role: id ?? '',\r\n    });\r\n\r\n  /**\r\n   * We need this so if we're cloning a role, we can fetch\r\n   * the current permissions that role has.\r\n   */\r\n  const { currentData: rolePermissions, isLoading: isLoadingRole } = useGetRolePermissionsQuery(\r\n    {\r\n      id: id!,\r\n    },\r\n    {\r\n      skip: !id,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const [createRole] = useCreateRoleMutation();\r\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\r\n\r\n  const handleCreateRoleSubmit = async (\r\n    data: CreateRoleFormValues,\r\n    formik: FormikHelpers<CreateRoleFormValues>\r\n  ) => {\r\n    try {\r\n      if (id) {\r\n        trackUsage('willDuplicateRole');\r\n      } else {\r\n        trackUsage('willCreateNewRole');\r\n      }\r\n\r\n      const res = await createRole(data);\r\n\r\n      if ('error' in res) {\r\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          formik.setErrors(formatValidationErrors(res.error));\r\n        } else {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const { permissionsToSend } = permissionsRef.current?.getPermissions() ?? {};\r\n\r\n      if (res.data.id && Array.isArray(permissionsToSend) && permissionsToSend.length > 0) {\r\n        const updateRes = await updateRolePermissions({\r\n          id: res.data.id,\r\n          permissions: permissionsToSend,\r\n        });\r\n\r\n        if ('error' in updateRes) {\r\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\r\n            formik.setErrors(formatValidationErrors(updateRes.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(updateRes.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'Settings.roles.created', defaultMessage: 'created' }),\r\n      });\r\n\r\n      navigate(`../roles/${res.data.id.toString()}`, { replace: true });\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  if ((isLoadingPermissionsLayout && isLoadingRole) || !permissionsLayout) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Roles',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Formik\r\n        initialValues={\r\n          {\r\n            name: '',\r\n            description: `${formatMessage({\r\n              id: 'Settings.roles.form.created',\r\n              defaultMessage: 'Created',\r\n            })} ${format(new Date(), 'PPP')}`,\r\n          } satisfies CreateRoleFormValues\r\n        }\r\n        onSubmit={handleCreateRoleSubmit}\r\n        validationSchema={CREATE_SCHEMA}\r\n        validateOnChange={false}\r\n      >\r\n        {({ values, errors, handleReset, handleChange, isSubmitting }) => (\r\n          <Form>\r\n            <>\r\n              <Layouts.Header\r\n                primaryAction={\r\n                  <Flex gap={2}>\r\n                    <Button\r\n                      variant=\"secondary\"\r\n                      onClick={() => {\r\n                        handleReset();\r\n                        permissionsRef.current?.resetForm();\r\n                      }}\r\n                    >\r\n                      {formatMessage({\r\n                        id: 'app.components.Button.reset',\r\n                        defaultMessage: 'Reset',\r\n                      })}\r\n                    </Button>\r\n                    <Button type=\"submit\" loading={isSubmitting} startIcon={<Check />}>\r\n                      {formatMessage({\r\n                        id: 'global.save',\r\n                        defaultMessage: 'Save',\r\n                      })}\r\n                    </Button>\r\n                  </Flex>\r\n                }\r\n                title={formatMessage({\r\n                  id: 'Settings.roles.create.title',\r\n                  defaultMessage: 'Create a role',\r\n                })}\r\n                subtitle={formatMessage({\r\n                  id: 'Settings.roles.create.description',\r\n                  defaultMessage: 'Define the rights given to the role',\r\n                })}\r\n                navigationAction={<BackButton fallback=\"../roles\" />}\r\n              />\r\n              <Layouts.Content>\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                  <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                      <Flex justifyContent=\"space-between\">\r\n                        <Box>\r\n                          <Box>\r\n                            <Typography fontWeight=\"bold\">\r\n                              {formatMessage({\r\n                                id: 'global.details',\r\n                                defaultMessage: 'Details',\r\n                              })}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box>\r\n                            <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                              {formatMessage({\r\n                                id: 'Settings.roles.form.description',\r\n                                defaultMessage: 'Name and description of the role',\r\n                              })}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                        <UsersRoleNumber>\r\n                          {formatMessage(\r\n                            {\r\n                              id: 'Settings.roles.form.button.users-with-role',\r\n                              defaultMessage:\r\n                                '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\r\n                            },\r\n                            { number: 0 }\r\n                          )}\r\n                        </UsersRoleNumber>\r\n                      </Flex>\r\n                      <Grid.Root gap={4}>\r\n                        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                          <Field.Root\r\n                            name=\"name\"\r\n                            error={errors.name && formatMessage({ id: errors.name })}\r\n                            required\r\n                          >\r\n                            <Field.Label>\r\n                              {formatMessage({\r\n                                id: 'global.name',\r\n                                defaultMessage: 'Name',\r\n                              })}\r\n                            </Field.Label>\r\n                            <TextInput onChange={handleChange} value={values.name} />\r\n                            <Field.Error />\r\n                          </Field.Root>\r\n                        </Grid.Item>\r\n                        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                          <Field.Root\r\n                            name=\"description\"\r\n                            error={errors.description && formatMessage({ id: errors.description })}\r\n                          >\r\n                            <Field.Label>\r\n                              {formatMessage({\r\n                                id: 'global.description',\r\n                                defaultMessage: 'Description',\r\n                              })}\r\n                            </Field.Label>\r\n                            <Textarea onChange={handleChange} value={values.description} />\r\n                          </Field.Root>\r\n                        </Grid.Item>\r\n                      </Grid.Root>\r\n                    </Flex>\r\n                  </Box>\r\n                  <Box shadow=\"filterShadow\" hasRadius>\r\n                    <Permissions\r\n                      isFormDisabled={false}\r\n                      ref={permissionsRef}\r\n                      permissions={rolePermissions}\r\n                      layout={permissionsLayout}\r\n                    />\r\n                  </Box>\r\n                </Flex>\r\n              </Layouts.Content>\r\n            </>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Main>\r\n  );\r\n};\r\n\r\nconst UsersRoleNumber = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.colors.primary200};\r\n  background: ${({ theme }) => theme.colors.primary100};\r\n  padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[4]}`};\r\n  color: ${({ theme }) => theme.colors.primary600};\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedCreatePage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedCreatePage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.roles.create\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <CreatePage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { CreatePage, ProtectedCreatePage };\r\n"],"names":["yup","translatedErrors","useParams","useNotification","useIntl","useNavigate","React","useTracking","useAPIErrorHandler","useGetRolePermissionLayoutQuery","useGetRolePermissionsQuery","useCreateRoleMutation","useUpdateRolePermissionsMutation","isBaseQueryError","jsx","Page","Main","Formik","format","Form","jsxs","Fragment","Layouts","Flex","Button","Check","BackButton","Box","Typography","Grid","Field","TextInput","Textarea","Permissions","styled","useTypedSelector"],"mappings":"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"}