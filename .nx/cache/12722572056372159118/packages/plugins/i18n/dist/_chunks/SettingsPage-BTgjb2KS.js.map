{"version":3,"file":"SettingsPage-BTgjb2KS.js","sources":["../../admin/src/utils/baseQuery.ts","../../admin/src/components/CreateLocale.tsx","../../admin/src/components/DeleteLocale.tsx","../../admin/src/components/EditLocale.tsx","../../admin/src/components/LocaleTable.tsx","../../admin/src/pages/SettingsPage.tsx"],"sourcesContent":["import { SerializedError } from '@reduxjs/toolkit';\r\nimport { type ApiError, type UnknownApiError } from '@strapi/admin/strapi-admin';\r\n\r\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\r\n\r\nconst isBaseQueryError = (error: BaseQueryError): error is ApiError | UnknownApiError => {\r\n  return error.name !== undefined;\r\n};\r\n\r\nexport { isBaseQueryError };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Form,\r\n  type InputProps,\r\n  InputRenderer,\r\n  useField,\r\n  type FormHelpers,\r\n  useForm,\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useAuth,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonProps,\r\n  Divider,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Modal,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Tabs,\r\n  Typography,\r\n  useId,\r\n} from '@strapi/design-system';\r\nimport { Check, Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { CreateLocale } from '../../../shared/contracts/locales';\r\nimport { useCreateLocaleMutation, useGetDefaultLocalesQuery } from '../services/locales';\r\nimport { isBaseQueryError } from '../utils/baseQuery';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CreateLocale\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CreateLocaleProps extends Pick<ButtonProps, 'disabled' | 'variant'> {}\r\n\r\nconst CreateLocale = ({ disabled, variant = 'default' }: CreateLocaleProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [visible, setVisible] = React.useState(false);\r\n\r\n  return (\r\n    <Modal.Root open={visible} onOpenChange={setVisible}>\r\n      <Modal.Trigger>\r\n        <Button\r\n          variant={variant}\r\n          disabled={disabled}\r\n          startIcon={<Plus />}\r\n          onClick={() => setVisible(true)}\r\n          size=\"S\"\r\n        >\r\n          {formatMessage({\r\n            id: getTranslation('Settings.list.actions.add'),\r\n            defaultMessage: 'Add new locale',\r\n          })}\r\n        </Button>\r\n      </Modal.Trigger>\r\n      <CreateModal onClose={() => setVisible(false)} />\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CreateModal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst LOCALE_SCHEMA = yup.object().shape({\r\n  code: yup.string().nullable().required({\r\n    id: 'Settings.locales.modal.create.code.error',\r\n    defaultMessage: 'Please select a locale',\r\n  }),\r\n  name: yup\r\n    .string()\r\n    .nullable()\r\n    .max(50, {\r\n      id: 'Settings.locales.modal.create.name.error.min',\r\n      defaultMessage: 'The locale display name can only be less than 50 characters.',\r\n    })\r\n    .required({\r\n      id: 'Settings.locales.modal.create.name.error.required',\r\n      defaultMessage: 'Please give the locale a display name',\r\n    }),\r\n  isDefault: yup.boolean(),\r\n});\r\n\r\ntype FormValues = CreateLocale.Request['body'];\r\n\r\nconst initialFormValues = {\r\n  code: '',\r\n  name: '',\r\n  isDefault: false,\r\n} satisfies FormValues;\r\n\r\ntype ModalCreateProps = {\r\n  onClose: () => void;\r\n};\r\n\r\nconst CreateModal = ({ onClose }: ModalCreateProps) => {\r\n  const titleId = useId();\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n  const [createLocale] = useCreateLocaleMutation();\r\n  const { formatMessage } = useIntl();\r\n  const refetchPermissions = useAuth('CreateModal', (state) => state.refetchPermissions);\r\n\r\n  const handleSubmit = async (values: FormValues, helpers: FormHelpers<FormValues>) => {\r\n    try {\r\n      const res = await createLocale(values);\r\n\r\n      if ('error' in res) {\r\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          helpers.setErrors(formatValidationErrors(res.error));\r\n        } else {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTranslation('Settings.locales.modal.create.success'),\r\n          defaultMessage: 'Created locale',\r\n        }),\r\n      });\r\n\r\n      refetchPermissions();\r\n      onClose();\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred, please try again',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal.Content>\r\n      <Form\r\n        method=\"POST\"\r\n        initialValues={initialFormValues}\r\n        validationSchema={LOCALE_SCHEMA}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTranslation('Settings.list.actions.add'),\r\n              defaultMessage: 'Add new locale',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Tabs.Root variant=\"simple\" defaultValue=\"basic\">\r\n            <Flex justifyContent=\"space-between\">\r\n              <Typography tag=\"h2\" variant=\"beta\" id={titleId}>\r\n                {formatMessage({\r\n                  id: getTranslation('Settings.locales.modal.title'),\r\n                  defaultMessage: 'Configuration',\r\n                })}\r\n              </Typography>\r\n              <Tabs.List aria-labelledby={titleId}>\r\n                <Tabs.Trigger value=\"basic\">\r\n                  {formatMessage({\r\n                    id: getTranslation('Settings.locales.modal.base'),\r\n                    defaultMessage: 'Basic settings',\r\n                  })}\r\n                </Tabs.Trigger>\r\n                <Tabs.Trigger value=\"advanced\">\r\n                  {formatMessage({\r\n                    id: getTranslation('Settings.locales.modal.advanced'),\r\n                    defaultMessage: 'Advanced settings',\r\n                  })}\r\n                </Tabs.Trigger>\r\n              </Tabs.List>\r\n            </Flex>\r\n\r\n            <Divider />\r\n\r\n            <Box paddingTop={7} paddingBottom={7}>\r\n              <Tabs.Content value=\"basic\">\r\n                <BaseForm />\r\n              </Tabs.Content>\r\n              <Tabs.Content value=\"advanced\">\r\n                <AdvancedForm />\r\n              </Tabs.Content>\r\n            </Box>\r\n          </Tabs.Root>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Modal.Close>\r\n            <Button variant=\"tertiary\">\r\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n            </Button>\r\n          </Modal.Close>\r\n          <SubmitButton />\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SubmitButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst SubmitButton = () => {\r\n  const { formatMessage } = useIntl();\r\n  const isSubmitting = useForm('SubmitButton', (state) => state.isSubmitting);\r\n  const modified = useForm('SubmitButton', (state) => state.modified);\r\n\r\n  return (\r\n    <Button type=\"submit\" startIcon={<Check />} disabled={isSubmitting || !modified}>\r\n      {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n    </Button>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BaseForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface BaseFormProps {\r\n  mode?: 'create' | 'edit';\r\n}\r\n\r\nconst BaseForm = ({ mode = 'create' }: BaseFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { data: defaultLocales, error } = useGetDefaultLocalesQuery();\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  if (!Array.isArray(defaultLocales)) {\r\n    return null;\r\n  }\r\n\r\n  const options = defaultLocales.map((locale) => ({\r\n    label: locale.name,\r\n    value: locale.code,\r\n  }));\r\n\r\n  const translatedForm = [\r\n    {\r\n      disabled: mode !== 'create',\r\n      label: {\r\n        id: getTranslation('Settings.locales.modal.create.code.label'),\r\n        defaultMessage: 'Locales',\r\n      },\r\n      name: 'code',\r\n      options,\r\n      placeholder: {\r\n        id: 'components.placeholder.select',\r\n        defaultMessage: 'Select',\r\n      },\r\n      required: true,\r\n      size: 6,\r\n      type: 'enumeration' as const,\r\n    },\r\n    {\r\n      hint: {\r\n        id: getTranslation('Settings.locales.modal.create.name.label.description'),\r\n        defaultMessage: 'Locale will be displayed under that name in the administration panel',\r\n      },\r\n      label: {\r\n        id: getTranslation('Settings.locales.modal.create.name.label'),\r\n        defaultMessage: 'Locale display name',\r\n      },\r\n      name: 'name',\r\n      required: true,\r\n      size: 6,\r\n      type: 'string' as const,\r\n    },\r\n  ].map((field) => ({\r\n    ...field,\r\n    hint: field.hint ? formatMessage(field.hint) : undefined,\r\n    label: formatMessage(field.label),\r\n    placeholder: field.placeholder ? formatMessage(field.placeholder) : undefined,\r\n  }));\r\n\r\n  return (\r\n    <Grid.Root gap={4}>\r\n      {translatedForm.map(({ size, ...field }) => (\r\n        <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n          <FormRenderer {...field} />\r\n        </Grid.Item>\r\n      ))}\r\n    </Grid.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AdvancedForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype AdvancedFormProps = {\r\n  isDefaultLocale?: boolean;\r\n};\r\n\r\nconst AdvancedForm = ({ isDefaultLocale }: AdvancedFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const form = [\r\n    {\r\n      disabled: isDefaultLocale,\r\n      hint: {\r\n        id: getTranslation('Settings.locales.modal.advanced.setAsDefault.hint'),\r\n        defaultMessage: 'One default locale is required, change it by selecting another one',\r\n      },\r\n      label: {\r\n        id: getTranslation('Settings.locales.modal.advanced.setAsDefault'),\r\n        defaultMessage: 'Set as default locale',\r\n      },\r\n      name: 'isDefault',\r\n      size: 6,\r\n      type: 'boolean' as const,\r\n    },\r\n  ].map((field) => ({\r\n    ...field,\r\n    hint: field.hint ? formatMessage(field.hint) : undefined,\r\n    label: formatMessage(field.label),\r\n  })) satisfies InputProps[];\r\n\r\n  return (\r\n    <Grid.Root gap={4}>\r\n      {form.map(({ size, ...field }) => (\r\n        <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n          <FormRenderer {...field} />\r\n        </Grid.Item>\r\n      ))}\r\n    </Grid.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * FormRenderer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst FormRenderer = (field: InputProps) => {\r\n  switch (field.type) {\r\n    /**\r\n     * This will override the default input renderer\r\n     * choice for `enumeration`.\r\n     */\r\n    case 'enumeration':\r\n      return <EnumerationInput {...field} />;\r\n    default:\r\n      return <InputRenderer {...field} />;\r\n  }\r\n};\r\n\r\nconst EnumerationInput = ({\r\n  disabled,\r\n  hint,\r\n  label,\r\n  name,\r\n  options,\r\n  placeholder,\r\n  required,\r\n}: Extract<InputProps, { type: 'enumeration' }>) => {\r\n  const { value, error, onChange } = useField(name);\r\n  const { data: defaultLocales = [] } = useGetDefaultLocalesQuery();\r\n\r\n  const handleChange = (value: string) => {\r\n    if (Array.isArray(defaultLocales)) {\r\n      // We know it exists because the options are created from the list of default locales\r\n      const locale = defaultLocales.find((locale) => locale.code === value)!;\r\n\r\n      onChange(name, value);\r\n      // This lets us automatically fill the name field with the locale name\r\n      onChange('name', locale.name);\r\n    } else {\r\n      onChange(name, value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Field.Root error={error} hint={hint} name={name} required={required}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <SingleSelect\r\n        disabled={disabled}\r\n        // @ts-expect-error – This will dissapear when the DS removes support for numbers to be returned by SingleSelect.\r\n        onChange={handleChange}\r\n        placeholder={placeholder}\r\n        value={value}\r\n      >\r\n        {options.map((option) => (\r\n          <SingleSelectOption value={option.value} key={option.value}>\r\n            {option.label}\r\n          </SingleSelectOption>\r\n        ))}\r\n      </SingleSelect>\r\n      <Field.Error />\r\n      <Field.Hint />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nexport { CreateLocale, BaseForm, AdvancedForm, SubmitButton, LOCALE_SCHEMA };\r\n","import * as React from 'react';\r\n\r\nimport { ConfirmDialog, useAPIErrorHandler, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { Dialog, IconButton } from '@strapi/design-system';\r\nimport { Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDeleteLocaleMutation } from '../services/locales';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { Locale } from '../../../shared/contracts/locales';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DeleteLocale\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DeleteLocaleProps extends Locale {}\r\n\r\nconst DeleteLocale = ({ id, name }: DeleteLocaleProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n\r\n  const [deleteLocale] = useDeleteLocaleMutation();\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const res = await deleteLocale(id);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n\r\n        return;\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTranslation('Settings.locales.modal.delete.success'),\r\n          defaultMessage: 'Deleted locale',\r\n        }),\r\n      });\r\n\r\n      setVisible(false);\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred, please try again',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root open={visible} onOpenChange={setVisible}>\r\n      <Dialog.Trigger>\r\n        <IconButton\r\n          onClick={() => setVisible(true)}\r\n          label={formatMessage(\r\n            {\r\n              id: getTranslation('Settings.list.actions.delete'),\r\n              defaultMessage: 'Delete {name} locale',\r\n            },\r\n            {\r\n              name,\r\n            }\r\n          )}\r\n          variant=\"ghost\"\r\n        >\r\n          <Trash />\r\n        </IconButton>\r\n      </Dialog.Trigger>\r\n      <ConfirmDialog onConfirm={handleConfirm} />\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\nexport { DeleteLocale };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useNotification,\r\n  useAPIErrorHandler,\r\n  Form,\r\n  FormHelpers,\r\n  useAuth,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  IconButton,\r\n  Modal,\r\n  Tabs,\r\n  Typography,\r\n  useId,\r\n} from '@strapi/design-system';\r\nimport { Pencil } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Locale, UpdateLocale } from '../../../shared/contracts/locales';\r\nimport { useUpdateLocaleMutation } from '../services/locales';\r\nimport { isBaseQueryError } from '../utils/baseQuery';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport { AdvancedForm, BaseForm, LOCALE_SCHEMA, SubmitButton } from './CreateLocale';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditLocale\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EditLocaleProps extends Omit<EditModalProps, 'open' | 'onOpenChange'> {}\r\n\r\nconst EditLocale = (props: EditLocaleProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [visible, setVisible] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={() => setVisible(true)}\r\n        label={formatMessage(\r\n          {\r\n            id: getTranslation('Settings.list.actions.edit'),\r\n            defaultMessage: 'Edit {name} locale',\r\n          },\r\n          {\r\n            name: props.name,\r\n          }\r\n        )}\r\n        variant=\"ghost\"\r\n      >\r\n        <Pencil />\r\n      </IconButton>\r\n      <EditModal {...props} open={visible} onOpenChange={setVisible} />\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditModal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EditModalProps extends Pick<Locale, 'id' | 'isDefault' | 'name' | 'code'> {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\ntype FormValues = UpdateLocale.Request['body'] & { code: string };\r\n\r\n/**\r\n * @internal\r\n * @description Exported to be used when someone clicks on a table row.\r\n */\r\nconst EditModal = ({ id, code, isDefault, name, open, onOpenChange }: EditModalProps) => {\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n  const refetchPermissions = useAuth('EditModal', (state) => state.refetchPermissions);\r\n  const { formatMessage } = useIntl();\r\n  const titleId = useId();\r\n\r\n  const [updateLocale] = useUpdateLocaleMutation();\r\n  const handleSubmit = async (\r\n    { code: _code, ...data }: FormValues,\r\n    helpers: FormHelpers<FormValues>\r\n  ) => {\r\n    try {\r\n      /**\r\n       * We don't need to send the code, because the\r\n       * code can never be changed.\r\n       */\r\n      const res = await updateLocale({\r\n        id,\r\n        ...data,\r\n      });\r\n\r\n      if ('error' in res) {\r\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          helpers.setErrors(formatValidationErrors(res.error));\r\n        } else {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTranslation('Settings.locales.modal.edit.success'),\r\n          defaultMessage: 'Updated locale',\r\n        }),\r\n      });\r\n\r\n      refetchPermissions();\r\n      onOpenChange(false);\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred, please try again',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={onOpenChange}>\r\n      <Modal.Content>\r\n        <Form\r\n          method=\"PUT\"\r\n          onSubmit={handleSubmit}\r\n          initialValues={{\r\n            code,\r\n            name,\r\n            isDefault,\r\n          }}\r\n          validationSchema={LOCALE_SCHEMA}\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>\r\n              {formatMessage(\r\n                {\r\n                  id: getTranslation('Settings.list.actions.edit'),\r\n                  defaultMessage: 'Edit a locale',\r\n                },\r\n                {\r\n                  name,\r\n                }\r\n              )}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tabs.Root variant=\"simple\" defaultValue=\"basic\">\r\n              <Flex justifyContent=\"space-between\">\r\n                <Typography tag=\"h2\" variant=\"beta\" id={titleId}>\r\n                  {formatMessage({\r\n                    id: getTranslation('Settings.locales.modal.title'),\r\n                    defaultMessage: 'Configuration',\r\n                  })}\r\n                </Typography>\r\n                <Tabs.List aria-labelledby={titleId}>\r\n                  <Tabs.Trigger value=\"basic\">\r\n                    {formatMessage({\r\n                      id: getTranslation('Settings.locales.modal.base'),\r\n                      defaultMessage: 'Basic settings',\r\n                    })}\r\n                  </Tabs.Trigger>\r\n                  <Tabs.Trigger value=\"advanced\">\r\n                    {formatMessage({\r\n                      id: getTranslation('Settings.locales.modal.advanced'),\r\n                      defaultMessage: 'Advanced settings',\r\n                    })}\r\n                  </Tabs.Trigger>\r\n                </Tabs.List>\r\n              </Flex>\r\n              <Divider />\r\n              <Box paddingTop={7} paddingBottom={7}>\r\n                <Tabs.Content value=\"basic\">\r\n                  <BaseForm mode=\"edit\" />\r\n                </Tabs.Content>\r\n                <Tabs.Content value=\"advanced\">\r\n                  <AdvancedForm isDefaultLocale={isDefault} />\r\n                </Tabs.Content>\r\n              </Box>\r\n            </Tabs.Root>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Modal.Close>\r\n              <Button variant=\"tertiary\">\r\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n              </Button>\r\n            </Modal.Close>\r\n            <SubmitButton />\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nexport { EditLocale, EditModal };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Flex,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport { DeleteLocale } from './DeleteLocale';\r\nimport { EditLocale, EditModal } from './EditLocale';\r\n\r\nimport type { Locale } from '../../../shared/contracts/locales';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LocaleTable\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype LocaleTableProps = {\r\n  locales?: Locale[];\r\n  canDelete?: boolean;\r\n  canUpdate?: boolean;\r\n  onDeleteLocale?: (locale: Locale) => void;\r\n  onEditLocale?: (locale: Locale) => void;\r\n};\r\n\r\nconst LocaleTable = ({ locales = [], canDelete, canUpdate }: LocaleTableProps) => {\r\n  const [editLocaleId, setEditLocaleId] = React.useState<Locale['id']>();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleClick = (localeId: Locale['id']) => () => {\r\n    if (canUpdate) {\r\n      setEditLocaleId(localeId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Table colCount={4} rowCount={locales.length + 1}>\r\n      <Thead>\r\n        <Tr>\r\n          <Th>\r\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n              {formatMessage({\r\n                id: getTranslation('Settings.locales.row.id'),\r\n                defaultMessage: 'ID',\r\n              })}\r\n            </Typography>\r\n          </Th>\r\n          <Th>\r\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n              {formatMessage({\r\n                id: getTranslation('Settings.locales.row.displayName'),\r\n                defaultMessage: 'Display name',\r\n              })}\r\n            </Typography>\r\n          </Th>\r\n          <Th>\r\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n              {formatMessage({\r\n                id: getTranslation('Settings.locales.row.default-locale'),\r\n                defaultMessage: 'Default locale',\r\n              })}\r\n            </Typography>\r\n          </Th>\r\n          <Th>\r\n            <VisuallyHidden>Actions</VisuallyHidden>\r\n          </Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>\r\n        {locales.map((locale) => (\r\n          <React.Fragment key={locale.id}>\r\n            <Tr\r\n              onClick={handleClick(locale.id)}\r\n              style={{ cursor: canUpdate ? 'pointer' : 'default' }}\r\n            >\r\n              <Td>\r\n                <Typography textColor=\"neutral800\">{locale.id}</Typography>\r\n              </Td>\r\n              <Td>\r\n                <Typography textColor=\"neutral800\">{locale.name}</Typography>\r\n              </Td>\r\n              <Td>\r\n                <Typography textColor=\"neutral800\">\r\n                  {locale.isDefault\r\n                    ? formatMessage({\r\n                        id: getTranslation('Settings.locales.default'),\r\n                        defaultMessage: 'Default',\r\n                      })\r\n                    : null}\r\n                </Typography>\r\n              </Td>\r\n              <Td>\r\n                <Flex gap={1} justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\r\n                  {canUpdate && <EditLocale {...locale} />}\r\n                  {canDelete && !locale.isDefault && <DeleteLocale {...locale} />}\r\n                </Flex>\r\n              </Td>\r\n            </Tr>\r\n            <EditModal\r\n              {...locale}\r\n              onOpenChange={() => setEditLocaleId(undefined)}\r\n              open={editLocaleId === locale.id}\r\n            />\r\n          </React.Fragment>\r\n        ))}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport { LocaleTable };\r\nexport type { LocaleTableProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Page,\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useRBAC,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { EmptyStateLayout } from '@strapi/design-system';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { CreateLocale } from '../components/CreateLocale';\r\nimport { LocaleTable } from '../components/LocaleTable';\r\nimport { PERMISSIONS } from '../constants';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nconst SettingsPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const { data: locales, isLoading: isLoadingLocales, error } = useGetLocalesQuery();\r\n  const {\r\n    isLoading: isLoadingRBAC,\r\n    allowedActions: { canUpdate, canCreate, canDelete },\r\n  } = useRBAC(PERMISSIONS);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const isLoading = isLoadingLocales || isLoadingRBAC;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error || !Array.isArray(locales)) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <Page.Main tabIndex={-1}>\r\n      <Layouts.Header\r\n        primaryAction={<CreateLocale disabled={!canCreate} />}\r\n        title={formatMessage({\r\n          id: getTranslation('plugin.name'),\r\n          defaultMessage: 'Internationalization',\r\n        })}\r\n        subtitle={formatMessage({\r\n          id: getTranslation('Settings.list.description'),\r\n          defaultMessage: 'Configure the settings',\r\n        })}\r\n      />\r\n      <Layouts.Content>\r\n        {locales.length > 0 ? (\r\n          <LocaleTable locales={locales} canDelete={canDelete} canUpdate={canUpdate} />\r\n        ) : (\r\n          <EmptyStateLayout\r\n            icon={<EmptyDocuments width={undefined} height={undefined} />}\r\n            content={formatMessage({\r\n              id: getTranslation('Settings.list.empty.title'),\r\n              defaultMessage: 'There are no locales',\r\n            })}\r\n            action={<CreateLocale disabled={!canCreate} variant=\"secondary\" />}\r\n          />\r\n        )}\r\n      </Layouts.Content>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nconst ProtectedSettingsPage = () => {\r\n  return (\r\n    <Page.Protect permissions={PERMISSIONS.read}>\r\n      <SettingsPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedSettingsPage, SettingsPage };\r\n"],"names":["useIntl","React","Modal","jsx","Button","Plus","getTranslation","yup","useId","useNotification","useAPIErrorHandler","useCreateLocaleMutation","useAuth","jsxs","Form","Tabs","Flex","Typography","Divider","Box","useForm","Check","useGetDefaultLocalesQuery","Grid","InputRenderer","useField","value","locale","Field","SingleSelect","SingleSelectOption","useDeleteLocaleMutation","Dialog","IconButton","Trash","ConfirmDialog","Fragment","Pencil","useUpdateLocaleMutation","Table","Thead","Tr","Th","VisuallyHidden","Tbody","Td","useGetLocalesQuery","useRBAC","PERMISSIONS","Page","Layouts","EmptyStateLayout","EmptyDocuments"],"mappings":"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"}