{"version":3,"file":"index.js","sources":["../../server/src/utils/index.ts","../../server/src/bootstrap.ts","../../server/src/controllers/validate-locale-creation.ts","../../server/src/graphql.ts","../../server/src/register.ts","../../server/src/content-types/locale/index.ts","../../server/src/content-types/index.ts","../../server/src/services/permissions/actions.ts","../../server/src/services/permissions/sections-builder.ts","../../server/src/services/permissions/engine.ts","../../server/src/services/permissions.ts","../../server/src/services/metrics.ts","../../server/src/services/localizations.ts","../../server/src/constants/index.ts","../../server/src/services/locales.ts","../../server/src/services/iso-locales.ts","../../server/src/services/content-types.ts","../../server/src/services/sanitize/index.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/validation/locales.ts","../../server/src/domain/locale.ts","../../server/src/controllers/locales.ts","../../server/src/validation/content-types.ts","../../server/src/controllers/content-types.ts","../../server/src/controllers/iso-locales.ts","../../server/src/controllers/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { LocaleService } from '../services/locales';\r\nimport type { PermissionsService } from '../services/permissions';\r\nimport type { ContentTypesService } from '../services/content-types';\r\nimport type { MetricsService } from '../services/metrics';\r\nimport type { ISOLocalesService } from '../services/iso-locales';\r\nimport type { LocalizationsService } from '../services/localizations';\r\nimport type { SanitizeService } from '../services/sanitize';\r\n\r\ntype S = {\r\n  permissions: PermissionsService;\r\n  metrics: MetricsService;\r\n  locales: LocaleService;\r\n  localizations: LocalizationsService;\r\n  ['iso-locales']: ISOLocalesService;\r\n  ['content-types']: ContentTypesService;\r\n  sanitize: SanitizeService;\r\n};\r\n\r\nconst getCoreStore = () => {\r\n  return strapi.store({ type: 'plugin', name: 'i18n' });\r\n};\r\n\r\n// retrieve a local service\r\nconst getService = <T extends keyof S>(name: T): ReturnType<S[T]> => {\r\n  return strapi.plugin('i18n').service(name);\r\n};\r\n\r\nexport { getService, getCoreStore };\r\n","import type { Schema } from '@strapi/types';\r\nimport { getService } from './utils';\r\n\r\nconst registerModelsHooks = () => {\r\n  strapi.db.lifecycles.subscribe({\r\n    models: ['plugin::i18n.locale'],\r\n\r\n    async afterCreate() {\r\n      await getService('permissions').actions.syncSuperAdminPermissionsWithLocales();\r\n    },\r\n\r\n    async afterDelete() {\r\n      await getService('permissions').actions.syncSuperAdminPermissionsWithLocales();\r\n    },\r\n  });\r\n\r\n  strapi.documents.use(async (context, next) => {\r\n    const schema: Schema.ContentType = context.contentType;\r\n\r\n    if (!['create', 'update', 'discardDraft', 'publish'].includes(context.action)) {\r\n      return next();\r\n    }\r\n\r\n    if (!getService('content-types').isLocalizedContentType(schema)) {\r\n      return next();\r\n    }\r\n\r\n    // Build a populate array for all non localized fields within the schema\r\n    const { getNestedPopulateOfNonLocalizedAttributes } = getService('content-types');\r\n\r\n    const attributesToPopulate = getNestedPopulateOfNonLocalizedAttributes(schema.uid);\r\n\r\n    // Get the result of the document service action\r\n    const result = (await next()) as any;\r\n\r\n    // We may not have received a result with everything populated that we need\r\n    // Use the id and populate built from non localized fields to get the full\r\n    // result\r\n    let resultID;\r\n    // TODO: fix bug where an empty array can be returned\r\n    if (Array.isArray(result?.entries) && result.entries[0]?.id) {\r\n      resultID = result.entries[0].id;\r\n    } else if (result?.id) {\r\n      resultID = result.id;\r\n    } else {\r\n      return result;\r\n    }\r\n\r\n    if (attributesToPopulate.length > 0) {\r\n      const populatedResult = await strapi.db\r\n        .query(schema.uid)\r\n        .findOne({ where: { id: resultID }, populate: attributesToPopulate });\r\n\r\n      await getService('localizations').syncNonLocalizedAttributes(populatedResult, schema);\r\n    }\r\n\r\n    return result;\r\n  });\r\n};\r\n\r\nexport default async () => {\r\n  const { sendDidInitializeEvent } = getService('metrics');\r\n  const { initDefaultLocale } = getService('locales');\r\n  const { sectionsBuilder, actions, engine } = getService('permissions');\r\n\r\n  // Data\r\n  await initDefaultLocale();\r\n\r\n  // Sections Builder\r\n  sectionsBuilder.registerLocalesPropertyHandler();\r\n\r\n  // Actions\r\n  await actions.registerI18nActions();\r\n  actions.registerI18nActionsHooks();\r\n  actions.updateActionsProperties();\r\n\r\n  // Engine/Permissions\r\n  engine.registerI18nPermissionsHandlers();\r\n\r\n  // Hooks & Models\r\n  registerModelsHooks();\r\n\r\n  sendDidInitializeEvent();\r\n};\r\n","import { get } from 'lodash/fp';\r\nimport { errors } from '@strapi/utils';\r\nimport type { Core, Struct } from '@strapi/types';\r\nimport { getService } from '../utils';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\n// TODO: v5 if implemented in the CM => delete this middleware\r\nconst validateLocaleCreation: Core.MiddlewareHandler = async (ctx, next) => {\r\n  const { model } = ctx.params;\r\n  const { query } = ctx.request;\r\n\r\n  // Prevent empty body\r\n  if (!ctx.request.body) {\r\n    ctx.request.body = {};\r\n  }\r\n\r\n  const body = ctx.request.body as any;\r\n\r\n  const { getValidLocale, isLocalizedContentType } = getService('content-types');\r\n\r\n  const modelDef = strapi.getModel(model) as Struct.ContentTypeSchema;\r\n\r\n  if (!isLocalizedContentType(modelDef)) {\r\n    return next();\r\n  }\r\n\r\n  // Prevent empty string locale\r\n  const locale = get('locale', query) || get('locale', body) || undefined;\r\n\r\n  // cleanup to avoid creating duplicates in single types\r\n  ctx.request.query = {};\r\n\r\n  let entityLocale;\r\n  try {\r\n    entityLocale = await getValidLocale(locale);\r\n  } catch (e) {\r\n    throw new ApplicationError(\"This locale doesn't exist\");\r\n  }\r\n\r\n  body.locale = entityLocale;\r\n\r\n  if (modelDef.kind === 'singleType') {\r\n    const entity = await strapi.entityService.findMany(modelDef.uid, {\r\n      locale: entityLocale,\r\n    } as any); // TODO: add this type to entityService\r\n\r\n    ctx.request.query.locale = body.locale;\r\n\r\n    // updating\r\n    if (entity) {\r\n      return next();\r\n    }\r\n  }\r\n\r\n  return next();\r\n};\r\n\r\nexport default validateLocaleCreation;\r\n","import { propEq, identity } from 'lodash/fp';\r\nimport { errors } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\n\r\nconst { ValidationError } = errors;\r\n\r\nconst LOCALE_SCALAR_TYPENAME = 'I18NLocaleCode';\r\nconst LOCALE_ARG_PLUGIN_NAME = 'I18NLocaleArg';\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  register() {\r\n    const { service: getGraphQLService } = strapi.plugin('graphql');\r\n    const { service: getI18NService } = strapi.plugin('i18n');\r\n\r\n    const { isLocalizedContentType } = getI18NService('content-types');\r\n\r\n    const extensionService = getGraphQLService('extension');\r\n\r\n    extensionService.shadowCRUD('plugin::i18n.locale').disableMutations();\r\n\r\n    // Disable unwanted fields for localized content types\r\n    Object.entries(strapi.contentTypes).forEach(([uid, ct]) => {\r\n      if (isLocalizedContentType(ct)) {\r\n        // Disable locale field in localized inputs\r\n        extensionService.shadowCRUD(uid).field('locale').disableInput();\r\n\r\n        // Disable localizations field in localized inputs\r\n        extensionService.shadowCRUD(uid).field('localizations').disableInput();\r\n      }\r\n    });\r\n\r\n    extensionService.use(({ nexus, typeRegistry }: any) => {\r\n      const i18nLocaleArgPlugin = getI18nLocaleArgPlugin({ nexus, typeRegistry });\r\n      const i18nLocaleScalar = getLocaleScalar({ nexus });\r\n      return {\r\n        plugins: [i18nLocaleArgPlugin],\r\n        types: [i18nLocaleScalar],\r\n\r\n        resolversConfig: {\r\n          // Modify the default scope associated to find and findOne locale queries to match the actual action name\r\n          'Query.i18NLocale': { auth: { scope: 'plugin::i18n.locales.listLocales' } },\r\n          'Query.i18NLocales': { auth: { scope: 'plugin::i18n.locales.listLocales' } },\r\n        },\r\n      };\r\n    });\r\n  },\r\n});\r\n\r\nconst getLocaleScalar = ({ nexus }: any) => {\r\n  const { service: getI18NService } = strapi.plugin('i18n');\r\n\r\n  const locales = getI18NService('iso-locales').getIsoLocales();\r\n\r\n  return nexus.scalarType({\r\n    name: LOCALE_SCALAR_TYPENAME,\r\n\r\n    description: 'A string used to identify an i18n locale',\r\n\r\n    serialize: identity,\r\n    parseValue: identity,\r\n\r\n    parseLiteral(ast: any) {\r\n      if (ast.kind !== 'StringValue') {\r\n        throw new ValidationError('Locale cannot represent non string type');\r\n      }\r\n\r\n      const isValidLocale = ast.value === '*' || locales.find(propEq('code', ast.value));\r\n\r\n      if (!isValidLocale) {\r\n        throw new ValidationError('Unknown locale supplied');\r\n      }\r\n\r\n      return ast.value;\r\n    },\r\n  });\r\n};\r\n\r\nconst getI18nLocaleArgPlugin = ({ nexus, typeRegistry }: any) => {\r\n  const { service: getI18NService } = strapi.plugin('i18n');\r\n\r\n  const { isLocalizedContentType } = getI18NService('content-types');\r\n\r\n  return nexus.plugin({\r\n    name: LOCALE_ARG_PLUGIN_NAME,\r\n\r\n    onAddOutputField(config: any) {\r\n      // Add the locale arg to the queries on localized CTs\r\n\r\n      const { parentType } = config;\r\n\r\n      // Only target queries or mutations\r\n      if (parentType !== 'Query' && parentType !== 'Mutation') {\r\n        return;\r\n      }\r\n\r\n      let contentType;\r\n\r\n      if (config?.extensions?.strapi?.contentType) {\r\n        contentType = config.extensions.strapi.contentType;\r\n      } else {\r\n        const registryType = typeRegistry.get(config.type);\r\n\r\n        if (!registryType) {\r\n          return;\r\n        }\r\n\r\n        contentType = registryType.config.contentType;\r\n      }\r\n\r\n      // Ignore non-localized content types\r\n      if (!isLocalizedContentType(contentType)) {\r\n        return;\r\n      }\r\n\r\n      if (!config.args) {\r\n        config.args = {};\r\n      }\r\n\r\n      config.args.locale = nexus.arg({\r\n        type: LOCALE_SCALAR_TYPENAME,\r\n        description: 'The locale to use for the query',\r\n      });\r\n    },\r\n  });\r\n};\r\n","import _ from 'lodash';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport validateLocaleCreation from './controllers/validate-locale-creation';\r\nimport graphqlProvider from './graphql';\r\nimport { getService } from './utils';\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\r\n  extendContentTypes(strapi);\r\n  addContentManagerLocaleMiddleware(strapi);\r\n};\r\n\r\n// TODO: v5 if implemented in the CM => delete this middleware\r\n/**\r\n * Adds middleware on CM creation routes to use i18n locale passed in a specific param\r\n * @param {Strapi} strapi\r\n */\r\nconst addContentManagerLocaleMiddleware = (strapi: Core.Strapi) => {\r\n  strapi.server.router.use('/content-manager/collection-types/:model', (ctx, next) => {\r\n    if (ctx.method === 'POST' || ctx.method === 'PUT') {\r\n      return validateLocaleCreation(ctx, next);\r\n    }\r\n\r\n    return next();\r\n  });\r\n\r\n  strapi.server.router.use('/content-manager/single-types/:model', (ctx, next) => {\r\n    if (ctx.method === 'POST' || ctx.method === 'PUT') {\r\n      return validateLocaleCreation(ctx, next);\r\n    }\r\n\r\n    return next();\r\n  });\r\n};\r\n\r\n/**\r\n * Adds locale and localization fields to all content types\r\n * Even if content type is not localized, it will have these fields\r\n * @param {Strapi} strapi\r\n */\r\nconst extendContentTypes = (strapi: Core.Strapi) => {\r\n  const { isLocalizedContentType } = getService('content-types');\r\n\r\n  Object.values(strapi.contentTypes).forEach((contentType) => {\r\n    const { attributes } = contentType;\r\n\r\n    const isLocalized = isLocalizedContentType(contentType);\r\n\r\n    _.set(attributes, 'locale', {\r\n      writable: true,\r\n      private: !isLocalized,\r\n      configurable: false,\r\n      visible: false,\r\n      type: 'string',\r\n    });\r\n\r\n    _.set(attributes, 'localizations', {\r\n      type: 'relation',\r\n      relation: 'oneToMany',\r\n      target: contentType.uid,\r\n      writable: false,\r\n      private: !isLocalized,\r\n      configurable: false,\r\n      visible: false,\r\n      unstable_virtual: true,\r\n      joinColumn: {\r\n        name: 'document_id',\r\n        referencedColumn: 'document_id',\r\n        referencedTable: strapi.db.metadata.identifiers.getTableName(contentType.collectionName!),\r\n        // ensure the population will not include the results we already loaded\r\n        on({ results }: { results: any[] }) {\r\n          return {\r\n            id: {\r\n              $notIn: results.map((r) => r.id),\r\n            },\r\n          };\r\n        },\r\n      },\r\n    });\r\n  });\r\n\r\n  if (strapi.plugin('graphql')) {\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    graphqlProvider({ strapi }).register();\r\n  }\r\n};\r\n","import schema from './schema.json';\r\n\r\nexport default {\r\n  schema,\r\n};\r\n","import locale from './locale';\r\n\r\nexport default {\r\n  locale,\r\n};\r\n","import { isArray, getOr, prop } from 'lodash/fp';\r\nimport { getService } from '../../utils';\r\n\r\nconst actions = [\r\n  {\r\n    section: 'settings',\r\n    category: 'Internationalization',\r\n    subCategory: 'Locales',\r\n    pluginName: 'i18n',\r\n    displayName: 'Create',\r\n    uid: 'locale.create',\r\n  },\r\n  {\r\n    section: 'settings',\r\n    category: 'Internationalization',\r\n    subCategory: 'Locales',\r\n    pluginName: 'i18n',\r\n    displayName: 'Read',\r\n    uid: 'locale.read',\r\n    aliases: [\r\n      { actionId: 'plugin::content-manager.explorer.read', subjects: ['plugin::i18n.locale'] },\r\n    ],\r\n  },\r\n  {\r\n    section: 'settings',\r\n    category: 'Internationalization',\r\n    subCategory: 'Locales',\r\n    pluginName: 'i18n',\r\n    displayName: 'Update',\r\n    uid: 'locale.update',\r\n  },\r\n  {\r\n    section: 'settings',\r\n    category: 'Internationalization',\r\n    subCategory: 'Locales',\r\n    pluginName: 'i18n',\r\n    displayName: 'Delete',\r\n    uid: 'locale.delete',\r\n  },\r\n];\r\n\r\nconst addLocalesPropertyIfNeeded = ({ value: action }: any) => {\r\n  const {\r\n    section,\r\n    options: { applyToProperties },\r\n  } = action;\r\n\r\n  // Only add the locales property to contentTypes' actions\r\n  if (section !== 'contentTypes') {\r\n    return;\r\n  }\r\n\r\n  // If the 'locales' property is already declared within the applyToProperties array, then ignore the next steps\r\n  if (isArray(applyToProperties) && applyToProperties.includes('locales')) {\r\n    return;\r\n  }\r\n\r\n  // Add the 'locales' property to the applyToProperties array (create it if necessary)\r\n  action.options.applyToProperties = isArray(applyToProperties)\r\n    ? applyToProperties.concat('locales')\r\n    : ['locales'];\r\n};\r\n\r\nconst shouldApplyLocalesPropertyToSubject = ({ property, subject }: any) => {\r\n  if (property === 'locales') {\r\n    const model = strapi.getModel(subject);\r\n\r\n    return getService('content-types').isLocalizedContentType(model);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst addAllLocalesToPermissions = async (permissions: any) => {\r\n  const { actionProvider } = strapi.service('admin::permission');\r\n  const { find: findAllLocales } = getService('locales');\r\n\r\n  const allLocales = await findAllLocales();\r\n  const allLocalesCode = allLocales.map(prop('code'));\r\n\r\n  return Promise.all(\r\n    permissions.map(async (permission: any) => {\r\n      const { action, subject } = permission;\r\n\r\n      const appliesToLocalesProperty = await actionProvider.appliesToProperty(\r\n        'locales',\r\n        action,\r\n        subject\r\n      );\r\n\r\n      if (!appliesToLocalesProperty) {\r\n        return permission;\r\n      }\r\n\r\n      const oldPermissionProperties = getOr({}, 'properties', permission);\r\n\r\n      return { ...permission, properties: { ...oldPermissionProperties, locales: allLocalesCode } };\r\n    })\r\n  );\r\n};\r\n\r\nconst syncSuperAdminPermissionsWithLocales = async () => {\r\n  const roleService = strapi.service('admin::role');\r\n  const permissionService = strapi.service('admin::permission');\r\n\r\n  const superAdminRole = await roleService.getSuperAdmin();\r\n\r\n  if (!superAdminRole) {\r\n    return;\r\n  }\r\n\r\n  const superAdminPermissions = await permissionService.findMany({\r\n    where: {\r\n      role: {\r\n        id: superAdminRole.id,\r\n      },\r\n    },\r\n  });\r\n\r\n  const newSuperAdminPermissions = await addAllLocalesToPermissions(superAdminPermissions);\r\n\r\n  await roleService.assignPermissions(superAdminRole.id, newSuperAdminPermissions);\r\n};\r\n\r\nconst registerI18nActions = async () => {\r\n  const { actionProvider } = strapi.service('admin::permission');\r\n\r\n  await actionProvider.registerMany(actions);\r\n};\r\n\r\nconst registerI18nActionsHooks = () => {\r\n  const { actionProvider } = strapi.service('admin::permission');\r\n  const { hooks } = strapi.service('admin::role');\r\n\r\n  actionProvider.hooks.appliesPropertyToSubject.register(shouldApplyLocalesPropertyToSubject);\r\n  hooks.willResetSuperAdminPermissions.register(addAllLocalesToPermissions);\r\n};\r\n\r\nconst updateActionsProperties = () => {\r\n  const { actionProvider } = strapi.service('admin::permission');\r\n\r\n  // Register the transformation for every new action\r\n  actionProvider.hooks.willRegister.register(addLocalesPropertyIfNeeded);\r\n\r\n  // Handle already registered actions\r\n  actionProvider.values().forEach((action: any) => addLocalesPropertyIfNeeded({ value: action }));\r\n};\r\n\r\nexport default {\r\n  actions,\r\n  registerI18nActions,\r\n  registerI18nActionsHooks,\r\n  updateActionsProperties,\r\n  syncSuperAdminPermissionsWithLocales,\r\n};\r\n","import { isEmpty } from 'lodash/fp';\r\n\r\nimport { getService } from '../../utils';\r\n\r\n/**\r\n * Handler for the permissions layout (sections builder)\r\n * Adds the locales property to the subjects\r\n * @param {Action} action\r\n * @param {ContentTypesSection} section\r\n * @return {Promise<void>}\r\n */\r\nconst localesPropertyHandler = async ({ action, section }: any) => {\r\n  const { actionProvider } = strapi.service('admin::permission');\r\n\r\n  const locales = await getService('locales').find();\r\n\r\n  // Do not add the locales property if there is none registered\r\n  if (isEmpty(locales)) {\r\n    return;\r\n  }\r\n\r\n  for (const subject of section.subjects) {\r\n    const applies = await actionProvider.appliesToProperty('locales', action.actionId, subject.uid);\r\n    const hasLocalesProperty = subject.properties.find(\r\n      (property: any) => property.value === 'locales'\r\n    );\r\n\r\n    if (applies && !hasLocalesProperty) {\r\n      subject.properties.push({\r\n        label: 'Locales',\r\n        value: 'locales',\r\n        children: locales.map(({ name, code }: any) => ({ label: name || code, value: code })),\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst registerLocalesPropertyHandler = () => {\r\n  const { sectionsBuilder } = strapi.service('admin::permission');\r\n\r\n  sectionsBuilder.addHandler('singleTypes', localesPropertyHandler);\r\n  sectionsBuilder.addHandler('collectionTypes', localesPropertyHandler);\r\n};\r\n\r\nexport default {\r\n  localesPropertyHandler,\r\n  registerLocalesPropertyHandler,\r\n};\r\n","import { getService } from '../../utils';\r\n\r\n/**\r\n * @typedef {object} WillRegisterPermissionContext\r\n * @property {Permission} permission\r\n * @property {object} user\r\n * @property {object} condition\r\n */\r\n\r\n/**\r\n * Locales property handler for the permission engine\r\n * Add the has-locale-access condition if the locales property is defined\r\n * @param {WillRegisterPermissionContext} context\r\n */\r\nconst willRegisterPermission = (context: any) => {\r\n  const { permission, condition, user } = context;\r\n  const { subject, properties } = permission;\r\n\r\n  const isSuperAdmin = strapi.service('admin::role').hasSuperAdminRole(user);\r\n\r\n  if (isSuperAdmin) {\r\n    return;\r\n  }\r\n\r\n  const { locales } = properties || {};\r\n  const { isLocalizedContentType } = getService('content-types');\r\n\r\n  // If there is no subject defined, ignore the permission\r\n  if (!subject) {\r\n    return;\r\n  }\r\n\r\n  const ct = strapi.contentTypes[subject];\r\n\r\n  // If the subject exists but isn't localized, ignore the permission\r\n  if (!isLocalizedContentType(ct)) {\r\n    return;\r\n  }\r\n\r\n  // If the subject is localized but the locales property is null (access to all locales), ignore the permission\r\n  if (locales === null) {\r\n    return;\r\n  }\r\n\r\n  condition.and({\r\n    locale: {\r\n      $in: locales || [],\r\n    },\r\n  });\r\n};\r\n\r\nconst registerI18nPermissionsHandlers = () => {\r\n  const { engine } = strapi.service('admin::permission');\r\n\r\n  engine.hooks['before-register.permission'].register(willRegisterPermission);\r\n};\r\n\r\nexport default {\r\n  willRegisterPermission,\r\n  registerI18nPermissionsHandlers,\r\n};\r\n","import i18nActionsService from './permissions/actions';\r\nimport sectionsBuilderService from './permissions/sections-builder';\r\nimport engineService from './permissions/engine';\r\n\r\nconst permissions = () => ({\r\n  actions: i18nActionsService,\r\n  sectionsBuilder: sectionsBuilderService,\r\n  engine: engineService,\r\n});\r\n\r\ntype PermissionsService = typeof permissions;\r\n\r\nexport default permissions;\r\nexport type { PermissionsService };\r\n","import { reduce } from 'lodash/fp';\r\nimport { getService } from '../utils';\r\n\r\nconst sendDidInitializeEvent = async () => {\r\n  const { isLocalizedContentType } = getService('content-types');\r\n\r\n  // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\r\n  const numberOfContentTypes = reduce(\r\n    (sum, contentType) => (isLocalizedContentType(contentType) ? sum + 1 : sum),\r\n    0\r\n  )(strapi.contentTypes as any);\r\n\r\n  await strapi.telemetry.send('didInitializeI18n', { groupProperties: { numberOfContentTypes } });\r\n};\r\n\r\nconst sendDidUpdateI18nLocalesEvent = async () => {\r\n  const numberOfLocales = await getService('locales').count();\r\n\r\n  await strapi.telemetry.send('didUpdateI18nLocales', {\r\n    groupProperties: { numberOfLocales },\r\n  });\r\n};\r\n\r\nconst metrics = () => ({\r\n  sendDidInitializeEvent,\r\n  sendDidUpdateI18nLocalesEvent,\r\n});\r\n\r\ntype MetricsService = typeof metrics;\r\n\r\nexport default metrics;\r\nexport type { MetricsService };\r\n","import { cloneDeep, isEmpty } from 'lodash/fp';\r\n\r\nimport { type Schema } from '@strapi/types';\r\nimport { async } from '@strapi/utils';\r\nimport { getService } from '../utils';\r\n\r\n/**\r\n * Update non localized fields of all the related localizations of an entry with the entry values\r\n */\r\nconst syncNonLocalizedAttributes = async (sourceEntry: any, model: Schema.ContentType) => {\r\n  const { copyNonLocalizedAttributes } = getService('content-types');\r\n\r\n  const nonLocalizedAttributes = copyNonLocalizedAttributes(model, sourceEntry);\r\n  if (isEmpty(nonLocalizedAttributes)) {\r\n    return;\r\n  }\r\n\r\n  const uid = model.uid;\r\n  const documentId = sourceEntry.documentId;\r\n  const locale = sourceEntry.locale;\r\n  const status = sourceEntry?.publishedAt ? 'published' : 'draft';\r\n\r\n  // Find all the entries that need to be updated\r\n  // this is every other entry of the document in the same status but a different locale\r\n  const localeEntriesToUpdate = await strapi.db.query(uid).findMany({\r\n    where: {\r\n      documentId,\r\n      publishedAt: status === 'published' ? { $ne: null } : null,\r\n      locale: { $ne: locale },\r\n    },\r\n    select: ['locale', 'id'],\r\n  });\r\n\r\n  const entryData = await strapi.documents(uid).omitComponentData(nonLocalizedAttributes);\r\n\r\n  await async.map(localeEntriesToUpdate, async (entry: any) => {\r\n    const transformedData = await strapi.documents.utils.transformData(\r\n      cloneDeep(nonLocalizedAttributes),\r\n      {\r\n        uid,\r\n        status,\r\n        locale: entry.locale,\r\n        allowMissingId: true,\r\n      }\r\n    );\r\n\r\n    // Update or create non localized components for the entry\r\n    const componentData = await strapi\r\n      .documents(uid)\r\n      .updateComponents(entry, transformedData as any);\r\n\r\n    // Update every other locale entry of this documentId in the same status\r\n    await strapi.db.query(uid).update({\r\n      where: {\r\n        documentId,\r\n        publishedAt: status === 'published' ? { $ne: null } : null,\r\n        locale: { $eq: entry.locale },\r\n      },\r\n      // The data we send to the update function is the entry data merged with\r\n      // the updated component data\r\n      data: Object.assign(cloneDeep(entryData), componentData),\r\n    });\r\n  });\r\n};\r\n\r\nconst localizations = () => ({\r\n  syncNonLocalizedAttributes,\r\n});\r\n\r\ntype LocalizationsService = typeof localizations;\r\n\r\nexport default localizations;\r\nexport type { LocalizationsService };\r\n","import isoLocales from './iso-locales.json';\r\n\r\n/**\r\n * Returns the default locale based either on env var or english\r\n * @returns {string}\r\n */\r\nconst getInitLocale = () => {\r\n  const envLocaleCode = process.env.STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE;\r\n\r\n  if (envLocaleCode) {\r\n    const matchingLocale = isoLocales.find(({ code }) => code === envLocaleCode);\r\n\r\n    if (!matchingLocale) {\r\n      throw new Error(\r\n        'Unknown locale code provided in the environment variable STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE'\r\n      );\r\n    }\r\n\r\n    return { ...matchingLocale };\r\n  }\r\n\r\n  return {\r\n    code: 'en',\r\n    name: 'English (en)',\r\n  };\r\n};\r\n\r\nconst DEFAULT_LOCALE = getInitLocale();\r\n\r\nexport { isoLocales, DEFAULT_LOCALE, getInitLocale };\r\n","import { isNil } from 'lodash/fp';\r\nimport { DEFAULT_LOCALE } from '../constants';\r\nimport { getService, getCoreStore } from '../utils';\r\n\r\nconst find = (params: any = {}) =>\r\n  strapi.db.query('plugin::i18n.locale').findMany({ where: params });\r\n\r\nconst findById = (id: any) => strapi.db.query('plugin::i18n.locale').findOne({ where: { id } });\r\n\r\nconst findByCode = (code: any) =>\r\n  strapi.db.query('plugin::i18n.locale').findOne({ where: { code } });\r\n\r\nconst count = (params: any = {}) => strapi.db.query('plugin::i18n.locale').count({ where: params });\r\n\r\nconst create = async (locale: any) => {\r\n  const result = await strapi.db.query('plugin::i18n.locale').create({ data: locale });\r\n\r\n  getService('metrics').sendDidUpdateI18nLocalesEvent();\r\n\r\n  return result;\r\n};\r\n\r\nconst update = async (params: any, updates: any) => {\r\n  const result = await strapi.db\r\n    .query('plugin::i18n.locale')\r\n    .update({ where: params, data: updates });\r\n\r\n  getService('metrics').sendDidUpdateI18nLocalesEvent();\r\n\r\n  return result;\r\n};\r\n\r\nconst deleteFn = async ({ id }: any) => {\r\n  const localeToDelete = await findById(id);\r\n\r\n  if (localeToDelete) {\r\n    await deleteAllLocalizedEntriesFor({ locale: localeToDelete.code });\r\n    const result = await strapi.db.query('plugin::i18n.locale').delete({ where: { id } });\r\n\r\n    getService('metrics').sendDidUpdateI18nLocalesEvent();\r\n\r\n    return result;\r\n  }\r\n\r\n  return localeToDelete;\r\n};\r\n\r\nconst setDefaultLocale = ({ code }: any) =>\r\n  getCoreStore().set({ key: 'default_locale', value: code });\r\n\r\nconst getDefaultLocale = () => getCoreStore().get({ key: 'default_locale' });\r\n\r\nconst setIsDefault = async (locales: any) => {\r\n  if (isNil(locales)) {\r\n    return locales;\r\n  }\r\n\r\n  const actualDefault = await getDefaultLocale();\r\n\r\n  if (Array.isArray(locales)) {\r\n    return locales.map((locale) => ({ ...locale, isDefault: actualDefault === locale.code }));\r\n  }\r\n  // single locale\r\n  return { ...locales, isDefault: actualDefault === locales.code };\r\n};\r\n\r\nconst initDefaultLocale = async () => {\r\n  const existingLocalesNb = await strapi.db.query('plugin::i18n.locale').count();\r\n  if (existingLocalesNb === 0) {\r\n    await create(DEFAULT_LOCALE);\r\n    await setDefaultLocale({ code: DEFAULT_LOCALE.code });\r\n  }\r\n};\r\n\r\nconst deleteAllLocalizedEntriesFor = async ({ locale }: any) => {\r\n  const { isLocalizedContentType } = getService('content-types');\r\n\r\n  const localizedModels = Object.values(strapi.contentTypes).filter(isLocalizedContentType);\r\n\r\n  for (const model of localizedModels) {\r\n    // FIXME: delete many content & their associations\r\n    await strapi.db.query(model.uid).deleteMany({ where: { locale } });\r\n  }\r\n};\r\n\r\nconst locales = () => ({\r\n  find,\r\n  findById,\r\n  findByCode,\r\n  create,\r\n  update,\r\n  count,\r\n  setDefaultLocale,\r\n  getDefaultLocale,\r\n  setIsDefault,\r\n  delete: deleteFn,\r\n  initDefaultLocale,\r\n});\r\n\r\ntype LocaleService = typeof locales;\r\n\r\nexport default locales;\r\nexport type { LocaleService };\r\n","import { isoLocales } from '../constants';\r\n\r\nconst getIsoLocales = () => isoLocales;\r\n\r\nconst isoLocalesService = () => ({\r\n  getIsoLocales,\r\n});\r\n\r\ntype ISOLocalesService = typeof isoLocalesService;\r\n\r\nexport default isoLocalesService;\r\nexport type { ISOLocalesService };\r\n","import _ from 'lodash';\r\nimport { pick, pipe, has, prop, isNil, cloneDeep, isArray } from 'lodash/fp';\r\nimport { errors, contentTypes as contentTypeUtils } from '@strapi/utils';\r\nimport { getService } from '../utils';\r\n\r\nconst {\r\n  isRelationalAttribute,\r\n  getVisibleAttributes,\r\n  isTypedAttribute,\r\n  getScalarAttributes,\r\n  getRelationalAttributes,\r\n} = contentTypeUtils;\r\nconst { ApplicationError } = errors;\r\n\r\nconst hasLocalizedOption = (modelOrAttribute: any) => {\r\n  return prop('pluginOptions.i18n.localized', modelOrAttribute) === true;\r\n};\r\n\r\nconst getValidLocale = async (locale: any) => {\r\n  const localesService = getService('locales');\r\n\r\n  if (isNil(locale)) {\r\n    return localesService.getDefaultLocale();\r\n  }\r\n\r\n  const foundLocale = await localesService.findByCode(locale);\r\n  if (!foundLocale) {\r\n    throw new ApplicationError('Locale not found');\r\n  }\r\n\r\n  return locale;\r\n};\r\n\r\n/**\r\n * Returns whether an attribute is localized or not\r\n * @param {*} attribute\r\n * @returns\r\n */\r\nconst isLocalizedAttribute = (attribute: any) => {\r\n  return (\r\n    hasLocalizedOption(attribute) ||\r\n    isRelationalAttribute(attribute) ||\r\n    isTypedAttribute(attribute, 'uid')\r\n  );\r\n};\r\n\r\n/**\r\n * Returns whether a model is localized or not\r\n * @param {*} model\r\n * @returns\r\n */\r\nconst isLocalizedContentType = (model: any) => {\r\n  return hasLocalizedOption(model);\r\n};\r\n\r\n/**\r\n * Returns the list of attribute names that are not localized\r\n * @param {object} model\r\n * @returns {string[]}\r\n */\r\nconst getNonLocalizedAttributes = (model: any) => {\r\n  return getVisibleAttributes(model).filter(\r\n    (attrName) => !isLocalizedAttribute(model.attributes[attrName])\r\n  );\r\n};\r\n\r\nconst removeId = (value: any) => {\r\n  if (typeof value === 'object' && has('id', value)) {\r\n    delete value.id;\r\n  }\r\n};\r\n\r\nconst removeIds = (model: any) => (entry: any) => removeIdsMut(model, cloneDeep(entry));\r\n\r\nconst removeIdsMut = (model: any, entry: any) => {\r\n  if (isNil(entry)) {\r\n    return entry;\r\n  }\r\n\r\n  removeId(entry);\r\n\r\n  _.forEach(model.attributes, (attr, attrName) => {\r\n    const value = entry[attrName];\r\n    if (attr.type === 'dynamiczone' && isArray(value)) {\r\n      value.forEach((compo) => {\r\n        if (has('__component', compo)) {\r\n          const model = strapi.components[compo.__component];\r\n          removeIdsMut(model, compo);\r\n        }\r\n      });\r\n    } else if (attr.type === 'component') {\r\n      const model = strapi.components[attr.component];\r\n      if (isArray(value)) {\r\n        value.forEach((compo) => removeIdsMut(model, compo));\r\n      } else {\r\n        removeIdsMut(model, value);\r\n      }\r\n    }\r\n  });\r\n\r\n  return entry;\r\n};\r\n\r\n/**\r\n * Returns a copy of an entry picking only its non localized attributes\r\n * @param {object} model\r\n * @param {object} entry\r\n * @returns {object}\r\n */\r\nconst copyNonLocalizedAttributes = (model: any, entry: any) => {\r\n  const nonLocalizedAttributes = getNonLocalizedAttributes(model);\r\n\r\n  return pipe(pick(nonLocalizedAttributes), removeIds(model))(entry);\r\n};\r\n\r\n/**\r\n * Returns the list of attribute names that are localized\r\n * @param {object} model\r\n * @returns {string[]}\r\n */\r\nconst getLocalizedAttributes = (model: any) => {\r\n  return getVisibleAttributes(model).filter((attrName) =>\r\n    isLocalizedAttribute(model.attributes[attrName])\r\n  );\r\n};\r\n\r\n/**\r\n * Fill non localized fields of an entry if there are nil\r\n * @param {Object} entry entry to fill\r\n * @param {Object} relatedEntry values used to fill\r\n * @param {Object} options\r\n * @param {Object} options.model corresponding model\r\n */\r\nconst fillNonLocalizedAttributes = (entry: any, relatedEntry: any, { model }: any) => {\r\n  if (isNil(relatedEntry)) {\r\n    return;\r\n  }\r\n\r\n  const modelDef = strapi.getModel(model);\r\n  const relatedEntryCopy = copyNonLocalizedAttributes(modelDef, relatedEntry);\r\n\r\n  _.forEach(relatedEntryCopy, (value, field) => {\r\n    if (isNil(entry[field])) {\r\n      entry[field] = value;\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * build the populate param to\r\n * @param {String} modelUID uid of the model, could be of a content-type or a component\r\n */\r\nconst getNestedPopulateOfNonLocalizedAttributes = (modelUID: any) => {\r\n  const schema = strapi.getModel(modelUID);\r\n  const scalarAttributes = getScalarAttributes(schema);\r\n  const nonLocalizedAttributes = getNonLocalizedAttributes(schema);\r\n\r\n  const allAttributes = [...scalarAttributes, ...nonLocalizedAttributes];\r\n  if (schema.modelType === 'component') {\r\n    // When called recursively on a non localized component we\r\n    // need to explicitly populate that components relations\r\n    allAttributes.push(...getRelationalAttributes(schema));\r\n  }\r\n\r\n  const currentAttributesToPopulate = allAttributes.filter((value, index, self) => {\r\n    return self.indexOf(value) === index && self.lastIndexOf(value) === index;\r\n  });\r\n\r\n  const attributesToPopulate = [...currentAttributesToPopulate];\r\n  for (const attrName of currentAttributesToPopulate) {\r\n    const attr = schema.attributes[attrName];\r\n    if (attr.type === 'component') {\r\n      const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(attr.component).map(\r\n        (nestedAttr) => `${attrName}.${nestedAttr}`\r\n      );\r\n      attributesToPopulate.push(...nestedPopulate);\r\n    } else if (attr.type === 'dynamiczone') {\r\n      attr.components.forEach((componentName) => {\r\n        const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(componentName).map(\r\n          (nestedAttr) => `${attrName}.${nestedAttr}`\r\n        );\r\n        attributesToPopulate.push(...nestedPopulate);\r\n      });\r\n    }\r\n  }\r\n\r\n  return attributesToPopulate;\r\n};\r\n\r\nconst contentTypes = () => ({\r\n  isLocalizedContentType,\r\n  getValidLocale,\r\n  getLocalizedAttributes,\r\n  getNonLocalizedAttributes,\r\n  copyNonLocalizedAttributes,\r\n  fillNonLocalizedAttributes,\r\n  getNestedPopulateOfNonLocalizedAttributes,\r\n});\r\n\r\ntype ContentTypesService = typeof contentTypes;\r\n\r\nexport default contentTypes;\r\nexport { ContentTypesService };\r\n","import type { Core, Schema, Data } from '@strapi/types';\r\n\r\nimport { traverseEntity } from '@strapi/utils';\r\nimport { curry } from 'lodash/fp';\r\n\r\nimport { getService } from '../../utils';\r\n\r\nconst LOCALIZATION_FIELDS = ['locale', 'localizations'];\r\n\r\nconst sanitize = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const { isLocalizedContentType } = getService('content-types');\r\n\r\n  /**\r\n   * Sanitizes localization fields of a given entity based on its schema.\r\n   *\r\n   * Remove localization-related fields that are unnecessary, that is\r\n   * for schemas that aren't localized.\r\n   */\r\n  const sanitizeLocalizationFields = curry((schema: Schema.Schema, entity: Data.Entity) =>\r\n    traverseEntity(\r\n      ({ key, schema }, { remove }) => {\r\n        const isLocalized = isLocalizedContentType(schema);\r\n        const isLocalizationField = LOCALIZATION_FIELDS.includes(key);\r\n\r\n        if (!isLocalized && isLocalizationField) {\r\n          remove(key);\r\n        }\r\n      },\r\n      { schema, getModel: strapi.getModel.bind(strapi) },\r\n      entity\r\n    )\r\n  );\r\n\r\n  return {\r\n    sanitizeLocalizationFields,\r\n  };\r\n};\r\n\r\ntype SanitizeService = typeof sanitize;\r\n\r\nexport default sanitize;\r\nexport type { SanitizeService };\r\n","import permissions from './permissions';\r\nimport metrics from './metrics';\r\nimport localizations from './localizations';\r\nimport locales from './locales';\r\nimport isoLocales from './iso-locales';\r\nimport contentTypes from './content-types';\r\nimport sanitize from './sanitize';\r\n\r\nexport default {\r\n  permissions,\r\n  metrics,\r\n  localizations,\r\n  locales,\r\n  sanitize,\r\n  'iso-locales': isoLocales,\r\n  'content-types': contentTypes,\r\n};\r\n","export default {\r\n  type: 'admin',\r\n  routes: [\r\n    {\r\n      method: 'GET',\r\n      path: '/iso-locales',\r\n      handler: 'iso-locales.listIsoLocales',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'plugin::content-manager.hasPermissions',\r\n            config: { actions: ['plugin::i18n.locale.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/locales',\r\n      handler: 'locales.listLocales',\r\n      config: {\r\n        policies: ['admin::isAuthenticatedAdmin'],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/locales',\r\n      handler: 'locales.createLocale',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'plugin::content-manager.hasPermissions',\r\n            config: { actions: ['plugin::i18n.locale.create'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/locales/:id',\r\n      handler: 'locales.updateLocale',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'plugin::content-manager.hasPermissions',\r\n            config: { actions: ['plugin::i18n.locale.update'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/locales/:id',\r\n      handler: 'locales.deleteLocale',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'plugin::content-manager.hasPermissions',\r\n            config: { actions: ['plugin::i18n.locale.delete'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/content-manager/actions/get-non-localized-fields',\r\n      handler: 'content-types.getNonLocalizedAttributes',\r\n      config: {\r\n        policies: ['admin::isAuthenticatedAdmin'],\r\n      },\r\n    },\r\n  ],\r\n};\r\n","export default {\r\n  type: 'content-api',\r\n  routes: [\r\n    {\r\n      method: 'GET',\r\n      path: '/locales',\r\n      handler: 'locales.listLocales',\r\n    },\r\n  ],\r\n};\r\n","import admin from './admin';\r\nimport contentApi from './content-api';\r\n\r\nexport default {\r\n  admin,\r\n  'content-api': contentApi,\r\n};\r\n","import { prop } from 'lodash/fp';\r\nimport { yup, validateYupSchema } from '@strapi/utils';\r\n\r\nimport { isoLocales } from '../constants';\r\n\r\nconst allowedLocaleCodes = isoLocales.map(prop('code'));\r\n\r\nconst createLocaleSchema = yup\r\n  .object()\r\n  .shape({\r\n    name: yup.string().max(50).nullable(),\r\n    code: yup.string().oneOf(allowedLocaleCodes).required(),\r\n    isDefault: yup.boolean().required(),\r\n  })\r\n  .noUnknown();\r\n\r\nconst updateLocaleSchema = yup\r\n  .object()\r\n  .shape({\r\n    name: yup.string().min(1).max(50).nullable(),\r\n    isDefault: yup.boolean(),\r\n  })\r\n  .noUnknown();\r\n\r\nconst validateCreateLocaleInput = validateYupSchema(createLocaleSchema);\r\nconst validateUpdateLocaleInput = validateYupSchema(updateLocaleSchema);\r\n\r\nexport { validateCreateLocaleInput, validateUpdateLocaleInput };\r\n","const formatLocale = (locale: { name: string; code: string; isDefault: boolean }) => {\r\n  return {\r\n    ...locale,\r\n    name: locale.name || null,\r\n  };\r\n};\r\n\r\nexport { formatLocale };\r\n","import * as utils from '@strapi/utils';\r\nimport { pick } from 'lodash/fp';\r\nimport type { Core } from '@strapi/types';\r\nimport { getService } from '../utils';\r\nimport { validateCreateLocaleInput, validateUpdateLocaleInput } from '../validation/locales';\r\nimport { formatLocale } from '../domain/locale';\r\n\r\nconst { setCreatorFields } = utils;\r\nconst { ApplicationError } = utils.errors;\r\n\r\nconst sanitizeLocale = (locale: any) => {\r\n  const model = strapi.getModel('plugin::i18n.locale');\r\n\r\n  return strapi.contentAPI.sanitize.output(locale, model);\r\n};\r\n\r\nconst controller: Core.Controller = {\r\n  async listLocales(ctx) {\r\n    const localesService = getService('locales');\r\n\r\n    const locales = await localesService.find();\r\n    const sanitizedLocales = await sanitizeLocale(locales);\r\n\r\n    ctx.body = await localesService.setIsDefault(sanitizedLocales);\r\n  },\r\n\r\n  async createLocale(ctx) {\r\n    const { user } = ctx.state;\r\n    const body = ctx.request.body as any;\r\n    const { isDefault, ...localeToCreate } = body;\r\n\r\n    await validateCreateLocaleInput(body);\r\n\r\n    const localesService = getService('locales');\r\n\r\n    const existingLocale = await localesService.findByCode(body.code);\r\n    if (existingLocale) {\r\n      throw new ApplicationError('This locale already exists');\r\n    }\r\n\r\n    const localeToPersist = setCreatorFields({ user })(formatLocale(localeToCreate));\r\n\r\n    const locale = await localesService.create(localeToPersist);\r\n\r\n    if (isDefault) {\r\n      await localesService.setDefaultLocale(locale);\r\n    }\r\n\r\n    const sanitizedLocale = await sanitizeLocale(locale);\r\n\r\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\r\n  },\r\n\r\n  async updateLocale(ctx) {\r\n    const { user } = ctx.state;\r\n    const { id } = ctx.params;\r\n    const body = ctx.request.body as any;\r\n    const { isDefault, ...updates } = body;\r\n\r\n    await validateUpdateLocaleInput(body);\r\n\r\n    const localesService = getService('locales');\r\n\r\n    const existingLocale = await localesService.findById(id);\r\n    if (!existingLocale) {\r\n      return ctx.notFound('locale.notFound');\r\n    }\r\n\r\n    const allowedParams = ['name'];\r\n    const cleanUpdates = setCreatorFields({ user, isEdition: true })(pick(allowedParams, updates));\r\n\r\n    const updatedLocale = await localesService.update({ id }, cleanUpdates);\r\n\r\n    if (isDefault) {\r\n      await localesService.setDefaultLocale(updatedLocale);\r\n    }\r\n\r\n    const sanitizedLocale = await sanitizeLocale(updatedLocale);\r\n\r\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\r\n  },\r\n\r\n  async deleteLocale(ctx) {\r\n    const { id } = ctx.params;\r\n\r\n    const localesService = getService('locales');\r\n\r\n    const existingLocale = await localesService.findById(id);\r\n    if (!existingLocale) {\r\n      return ctx.notFound('locale.notFound');\r\n    }\r\n\r\n    const defaultLocaleCode = await localesService.getDefaultLocale();\r\n    if (existingLocale.code === defaultLocaleCode) {\r\n      throw new ApplicationError('Cannot delete the default locale');\r\n    }\r\n\r\n    await localesService.delete({ id });\r\n\r\n    const sanitizedLocale = await sanitizeLocale(existingLocale);\r\n\r\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\r\n  },\r\n};\r\n\r\nexport default controller;\r\n","import { yup, validateYupSchema } from '@strapi/utils';\r\n\r\nimport { get } from 'lodash/fp';\r\n\r\nconst validateGetNonLocalizedAttributesSchema = yup\r\n  .object()\r\n  .shape({\r\n    model: yup.string().required(),\r\n    id: yup.mixed().when('model', {\r\n      is: (model: any) => get('kind', strapi.contentType(model)) === 'singleType',\r\n      then: yup.strapiID().nullable(),\r\n      otherwise: yup.strapiID().required(),\r\n    }),\r\n    locale: yup.string().required(),\r\n  })\r\n  .noUnknown()\r\n  .required();\r\n\r\nconst validateGetNonLocalizedAttributesInput = validateYupSchema(\r\n  validateGetNonLocalizedAttributesSchema\r\n);\r\n\r\nexport { validateGetNonLocalizedAttributesInput };\r\n","import { pick, uniq, prop, getOr, flatten, pipe, map } from 'lodash/fp';\r\nimport { contentTypes as contentTypesUtils, errors } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\nimport { getService } from '../utils';\r\nimport { validateGetNonLocalizedAttributesInput } from '../validation/content-types';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\nconst { PUBLISHED_AT_ATTRIBUTE } = contentTypesUtils.constants;\r\n\r\nconst getLocalesProperty = getOr<string[]>([], 'properties.locales');\r\nconst getFieldsProperty = prop('properties.fields');\r\n\r\nconst getFirstLevelPath = map((path: string) => path.split('.')[0]);\r\n\r\nconst controller = {\r\n  async getNonLocalizedAttributes(ctx) {\r\n    const { user } = ctx.state;\r\n    const body = ctx.request.body as any;\r\n    const { model, id, locale } = body;\r\n\r\n    await validateGetNonLocalizedAttributesInput({ model, id, locale });\r\n\r\n    const {\r\n      copyNonLocalizedAttributes,\r\n      isLocalizedContentType,\r\n      getNestedPopulateOfNonLocalizedAttributes,\r\n    } = getService('content-types');\r\n\r\n    const {\r\n      default: { READ_ACTION, CREATE_ACTION },\r\n    } = strapi.service('admin::constants');\r\n\r\n    const modelDef = strapi.contentType(model);\r\n    const attributesToPopulate = getNestedPopulateOfNonLocalizedAttributes(model);\r\n\r\n    if (!isLocalizedContentType(modelDef)) {\r\n      throw new ApplicationError(`Model ${model} is not localized`);\r\n    }\r\n\r\n    const params = modelDef.kind === 'singleType' ? {} : { id };\r\n\r\n    const entity = await strapi.db\r\n      .query(model)\r\n      .findOne({ where: params, populate: attributesToPopulate });\r\n\r\n    if (!entity) {\r\n      return ctx.notFound();\r\n    }\r\n\r\n    const permissions = await strapi.admin.services.permission.findMany({\r\n      where: {\r\n        action: [READ_ACTION, CREATE_ACTION],\r\n        subject: model,\r\n        role: {\r\n          id: user.roles.map(prop('id')),\r\n        },\r\n      },\r\n    });\r\n\r\n    const localePermissions = permissions\r\n      .filter((perm: any) => getLocalesProperty(perm).includes(locale))\r\n      .map(getFieldsProperty);\r\n\r\n    const permittedFields = pipe(flatten, getFirstLevelPath, uniq)(localePermissions);\r\n\r\n    const nonLocalizedFields = copyNonLocalizedAttributes(modelDef, entity);\r\n    const sanitizedNonLocalizedFields = pick(permittedFields, nonLocalizedFields);\r\n\r\n    const availableLocalesResult = await strapi.plugins['content-manager']\r\n      .service('document-metadata')\r\n      .getMetadata(model, entity, {\r\n        availableLocales: true,\r\n      });\r\n\r\n    const availableLocales = availableLocalesResult.availableLocales.map((localeResult: any) =>\r\n      pick(['id', 'locale', PUBLISHED_AT_ATTRIBUTE], localeResult)\r\n    );\r\n\r\n    ctx.body = {\r\n      nonLocalizedFields: sanitizedNonLocalizedFields,\r\n      localizations: availableLocales.concat(\r\n        pick(['id', 'locale', PUBLISHED_AT_ATTRIBUTE], entity)\r\n      ),\r\n    };\r\n  },\r\n} satisfies Core.Controller;\r\n\r\nexport default controller;\r\n","import type { Core } from '@strapi/types';\r\nimport { getService } from '../utils';\r\n\r\nconst controller: Core.Controller = {\r\n  listIsoLocales(ctx) {\r\n    const isoLocalesService = getService('iso-locales');\r\n\r\n    ctx.body = isoLocalesService.getIsoLocales();\r\n  },\r\n};\r\n\r\nexport default controller;\r\n","import locales from './locales';\r\nimport contentTypes from './content-types';\r\nimport isoLocales from './iso-locales';\r\n\r\nexport default {\r\n  locales,\r\n  'iso-locales': isoLocales,\r\n  'content-types': contentTypes,\r\n};\r\n","import bootstrap from './bootstrap';\r\nimport register from './register';\r\nimport contentTypes from './content-types';\r\nimport services from './services';\r\nimport routes from './routes';\r\nimport controllers from './controllers';\r\n\r\nexport default () => ({\r\n  register,\r\n  bootstrap,\r\n  routes,\r\n  controllers,\r\n  contentTypes,\r\n  services,\r\n});\r\n"],"names":["schema","getNestedPopulateOfNonLocalizedAttributes","sendDidInitializeEvent","initDefaultLocale","actions","ApplicationError","errors","getValidLocale","isLocalizedContentType","locale","get","strapi","locales","identity","propEq","attributes","_","isArray","permissions","prop","getOr","isEmpty","reduce","copyNonLocalizedAttributes","async","cloneDeep","isNil","contentTypeUtils","has","model","pipe","pick","index","curry","traverseEntity","isoLocales","yup","validateYupSchema","utils","controller","contentTypesUtils","map","flatten","uniq","isoLocalesService","contentTypes"],"mappings":"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"}