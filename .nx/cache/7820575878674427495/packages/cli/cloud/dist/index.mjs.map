{"version":3,"file":"index.mjs","sources":["../src/config/api.ts","../src/utils/compress-files.ts","../src/config/local.ts","../src/services/cli-api.ts","../src/services/strapi-info-save.ts","../src/services/token.ts","../src/services/logger.ts","../src/utils/pkg.ts","../src/create-project/utils/get-project-name-from-pkg.ts","../src/utils/analytics.ts","../src/login/action.ts","../src/create-project/utils/project-questions.utils.ts","../src/create-project/action.ts","../src/services/notification.ts","../src/services/build-logs.ts","../src/deploy-project/action.ts","../src/utils/helpers.ts","../src/deploy-project/command.ts","../src/deploy-project/index.ts","../src/utils/get-local-config.ts","../src/link/action.ts","../src/link/command.ts","../src/link/index.ts","../src/login/command.ts","../src/login/index.ts","../src/logout/action.ts","../src/logout/command.ts","../src/logout/index.ts","../src/create-project/command.ts","../src/create-project/index.ts","../src/list-projects/action.ts","../src/list-projects/command.ts","../src/list-projects/index.ts","../src/environment/list/action.ts","../src/cloud/command.ts","../src/environment/command.ts","../src/environment/list/command.ts","../src/environment/list/index.ts","../src/environment/link/action.ts","../src/environment/link/command.ts","../src/environment/link/index.ts","../src/index.ts"],"sourcesContent":["import { env } from '@strapi/utils';\r\n\r\nexport const apiConfig = {\r\n  apiBaseUrl: env('STRAPI_CLI_CLOUD_API', 'https://cloud-cli-api.strapi.io'),\r\n  dashboardBaseUrl: env('STRAPI_CLI_CLOUD_DASHBOARD', 'https://cloud.strapi.io'),\r\n};\r\n","import * as fse from 'fs-extra';\r\nimport * as tar from 'tar';\r\nimport * as path from 'path';\r\nimport { minimatch } from 'minimatch';\r\n\r\nconst IGNORED_PATTERNS = [\r\n  '**/.git/**',\r\n  '**/node_modules/**',\r\n  '**/build/**',\r\n  '**/dist/**',\r\n  '**/.cache/**',\r\n  '**/.circleci/**',\r\n  '**/.github/**',\r\n  '**/.gitignore',\r\n  '**/.gitkeep',\r\n  '**/.gitlab-ci.yml',\r\n  '**/.idea/**',\r\n  '**/.vscode/**',\r\n];\r\n\r\nconst isIgnoredFile = (folderPath: string, file: string, ignorePatterns: string[]): boolean => {\r\n  ignorePatterns.push(...IGNORED_PATTERNS);\r\n  const relativeFilePath = path.join(folderPath, file);\r\n  let isIgnored = false;\r\n  for (const pattern of ignorePatterns) {\r\n    if (pattern.startsWith('!')) {\r\n      if (minimatch(relativeFilePath, pattern.slice(1), { matchBase: true, dot: true })) {\r\n        return false;\r\n      }\r\n    } else if (minimatch(relativeFilePath, pattern, { matchBase: true, dot: true })) {\r\n      if (path.basename(file) !== '.gitkeep') {\r\n        isIgnored = true;\r\n      }\r\n    }\r\n  }\r\n  return isIgnored;\r\n};\r\n\r\nconst getFiles = async (\r\n  dirPath: string,\r\n  ignorePatterns: string[] = [],\r\n  subfolder: string = ''\r\n): Promise<string[]> => {\r\n  const arrayOfFiles: string[] = [];\r\n  const entries = await fse.readdir(path.join(dirPath, subfolder));\r\n\r\n  for (const entry of entries) {\r\n    const entryPathFromRoot = path.join(subfolder, entry);\r\n    const entryPath = path.relative(dirPath, entryPathFromRoot);\r\n    const isIgnored = isIgnoredFile(dirPath, entryPathFromRoot, ignorePatterns);\r\n\r\n    if (!isIgnored) {\r\n      if (fse.statSync(entryPath).isDirectory()) {\r\n        const subFiles = await getFiles(dirPath, ignorePatterns, entryPathFromRoot);\r\n        arrayOfFiles.push(...subFiles);\r\n      } else {\r\n        arrayOfFiles.push(entryPath);\r\n      }\r\n    }\r\n  }\r\n  return arrayOfFiles;\r\n};\r\n\r\nconst readGitignore = async (folderPath: string): Promise<string[]> => {\r\n  const gitignorePath = path.resolve(folderPath, '.gitignore');\r\n  const pathExist = await fse.pathExists(gitignorePath);\r\n\r\n  if (!pathExist) return [];\r\n\r\n  const gitignoreContent = await fse.readFile(gitignorePath, 'utf8');\r\n\r\n  return gitignoreContent\r\n    .split(/\\r?\\n/)\r\n    .filter((line) => Boolean(line.trim()) && !line.startsWith('#'));\r\n};\r\n\r\nconst compressFilesToTar = async (\r\n  storagePath: string,\r\n  folderToCompress: string,\r\n  filename: string\r\n): Promise<void> => {\r\n  const ignorePatterns = await readGitignore(folderToCompress);\r\n  const filesToCompress = await getFiles(folderToCompress, ignorePatterns);\r\n\r\n  return tar.c(\r\n    {\r\n      gzip: true,\r\n      file: path.resolve(storagePath, filename),\r\n    },\r\n    filesToCompress\r\n  );\r\n};\r\n\r\nexport { compressFilesToTar, isIgnoredFile };\r\n","import path from 'path';\r\nimport os from 'os';\r\nimport fse from 'fs-extra';\r\nimport XDGAppPaths from 'xdg-app-paths';\r\n\r\nconst APP_FOLDER_NAME = 'com.strapi.cli';\r\n\r\nexport const CONFIG_FILENAME = 'config.json';\r\n\r\nexport type LocalConfig = {\r\n  token?: string;\r\n  deviceId?: string;\r\n};\r\n\r\nasync function checkDirectoryExists(directoryPath: string) {\r\n  try {\r\n    const fsStat = await fse.lstat(directoryPath);\r\n    return fsStat.isDirectory();\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Determine storage path based on the operating system\r\nexport async function getTmpStoragePath() {\r\n  const storagePath = path.join(os.tmpdir(), APP_FOLDER_NAME);\r\n  await fse.ensureDir(storagePath);\r\n  return storagePath;\r\n}\r\n\r\nasync function getConfigPath() {\r\n  const configDirs = XDGAppPaths(APP_FOLDER_NAME).configDirs();\r\n  const configPath = configDirs.find(checkDirectoryExists);\r\n\r\n  if (!configPath) {\r\n    await fse.ensureDir(configDirs[0]);\r\n    return configDirs[0];\r\n  }\r\n  return configPath;\r\n}\r\n\r\nexport async function getLocalConfig(): Promise<LocalConfig> {\r\n  const configPath = await getConfigPath();\r\n  const configFilePath = path.join(configPath, CONFIG_FILENAME);\r\n  await fse.ensureFile(configFilePath);\r\n  try {\r\n    return await fse.readJSON(configFilePath, { encoding: 'utf8', throws: true });\r\n  } catch (e) {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport async function saveLocalConfig(data: LocalConfig) {\r\n  const configPath = await getConfigPath();\r\n  const configFilePath = path.join(configPath, CONFIG_FILENAME);\r\n  await fse.writeJson(configFilePath, data, { encoding: 'utf8', spaces: 2, mode: 0o600 });\r\n}\r\n","import axios, { type AxiosResponse } from 'axios';\r\nimport fse from 'fs-extra';\r\nimport os from 'os';\r\nimport { apiConfig } from '../config/api';\r\nimport type { CLIContext, CloudCliConfig, TrackPayload } from '../types';\r\nimport { getLocalConfig } from '../config/local';\r\n\r\nimport packageJson from '../../package.json';\r\n\r\nexport const VERSION = 'v1';\r\n\r\nexport type ProjectInfo = {\r\n  id: string;\r\n  name: string;\r\n  targetEnvironment?: string;\r\n  displayName?: string;\r\n  nodeVersion?: string;\r\n  region?: string;\r\n  plan?: string;\r\n  url?: string;\r\n};\r\n\r\nexport type EnvironmentInfo = Record<string, unknown>;\r\n\r\nexport type EnvironmentDetails = {\r\n  name: string;\r\n  hasLiveDeployment: boolean;\r\n  hasPendingDeployment: boolean;\r\n};\r\n\r\nexport type ProjectInput = Omit<ProjectInfo, 'id'>;\r\n\r\nexport type DeployResponse = {\r\n  build_id: string;\r\n  image: string;\r\n};\r\n\r\nexport type ListProjectsResponse = {\r\n  data: {\r\n    data: string;\r\n  };\r\n};\r\n\r\nexport type ListEnvironmentsResponse = {\r\n  data: {\r\n    data: EnvironmentInfo[] | Record<string, never>;\r\n  };\r\n};\r\n\r\nexport type ListLinkProjectsResponse = {\r\n  data: {\r\n    data: ProjectInfo[] | Record<string, never>;\r\n  };\r\n};\r\n\r\nexport type ListLinkEnvironmentsResponse = {\r\n  data: {\r\n    data: EnvironmentDetails[] | Record<string, never>;\r\n  };\r\n};\r\n\r\nexport type GetProjectResponse = {\r\n  data: {\r\n    displayName: string;\r\n    updatedAt: string;\r\n    suspendedAt?: string;\r\n    isTrial: boolean;\r\n    environments: string[];\r\n    environmentsDetails: EnvironmentDetails[];\r\n  };\r\n  metadata: {\r\n    dashboardUrls: {\r\n      project: string;\r\n      deployments: string;\r\n    };\r\n  };\r\n};\r\n\r\nexport interface CloudApiService {\r\n  deploy(\r\n    deployInput: {\r\n      filePath: string;\r\n      project: { name: string; targetEnvironment?: string };\r\n    },\r\n    {\r\n      onUploadProgress,\r\n    }: {\r\n      onUploadProgress: (progressEvent: { loaded: number; total?: number }) => void;\r\n    }\r\n  ): Promise<AxiosResponse<DeployResponse>>;\r\n\r\n  createProject(createProjectInput: ProjectInput): Promise<{\r\n    data: ProjectInput;\r\n    status: number;\r\n  }>;\r\n\r\n  getUserInfo(): Promise<AxiosResponse>;\r\n\r\n  config(): Promise<AxiosResponse<CloudCliConfig>>;\r\n\r\n  listProjects(): Promise<AxiosResponse<ListProjectsResponse>>;\r\n\r\n  listLinkProjects(): Promise<AxiosResponse<ListLinkProjectsResponse>>;\r\n\r\n  listEnvironments(project: { name: string }): Promise<AxiosResponse<ListEnvironmentsResponse>>;\r\n\r\n  listLinkEnvironments(project: {\r\n    name: string;\r\n  }): Promise<AxiosResponse<ListLinkEnvironmentsResponse>>;\r\n\r\n  getProject(project: { name: string }): Promise<AxiosResponse<GetProjectResponse>>;\r\n\r\n  track(event: string, payload?: TrackPayload): Promise<AxiosResponse<void>>;\r\n}\r\n\r\nexport async function cloudApiFactory(\r\n  { logger }: { logger: CLIContext['logger'] },\r\n  token?: string\r\n): Promise<CloudApiService> {\r\n  const localConfig = await getLocalConfig();\r\n  const customHeaders = {\r\n    'x-device-id': localConfig.deviceId,\r\n    'x-app-version': packageJson.version,\r\n    'x-os-name': os.type(),\r\n    'x-os-version': os.version(),\r\n    'x-language': Intl.DateTimeFormat().resolvedOptions().locale,\r\n    'x-node-version': process.versions.node,\r\n  };\r\n  const axiosCloudAPI = axios.create({\r\n    baseURL: `${apiConfig.apiBaseUrl}/${VERSION}`,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...customHeaders,\r\n    },\r\n  });\r\n\r\n  if (token) {\r\n    axiosCloudAPI.defaults.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  return {\r\n    deploy({ filePath, project }, { onUploadProgress }) {\r\n      return axiosCloudAPI.post(\r\n        `/deploy/${project.name}`,\r\n        { file: fse.createReadStream(filePath), targetEnvironment: project.targetEnvironment },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n          onUploadProgress,\r\n        }\r\n      );\r\n    },\r\n\r\n    async createProject({ name, nodeVersion, region, plan }) {\r\n      const response = await axiosCloudAPI.post('/project', {\r\n        projectName: name,\r\n        region,\r\n        nodeVersion,\r\n        plan,\r\n      });\r\n\r\n      return {\r\n        data: {\r\n          id: response.data.id,\r\n          name: response.data.name,\r\n          nodeVersion: response.data.nodeVersion,\r\n          region: response.data.region,\r\n        },\r\n        status: response.status,\r\n      };\r\n    },\r\n\r\n    getUserInfo() {\r\n      return axiosCloudAPI.get('/user');\r\n    },\r\n\r\n    async config(): Promise<AxiosResponse<CloudCliConfig>> {\r\n      try {\r\n        const response = await axiosCloudAPI.get('/config');\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error('Error fetching cloud CLI config from the server.');\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        logger.debug(\r\n          \"🥲 Oops! Couldn't retrieve the cloud CLI config from the server. Please try again.\"\r\n        );\r\n\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async listProjects(): Promise<AxiosResponse<ListProjectsResponse>> {\r\n      try {\r\n        const response = await axiosCloudAPI.get('/projects');\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error('Error fetching cloud projects from the server.');\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        logger.debug(\r\n          \"🥲 Oops! Couldn't retrieve your project's list from the server. Please try again.\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async listLinkProjects(): Promise<AxiosResponse<ListLinkProjectsResponse, unknown>> {\r\n      try {\r\n        const response = await axiosCloudAPI.get('/projects-linkable');\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error('Error fetching cloud projects from the server.');\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        logger.debug(\r\n          \"🥲 Oops! Couldn't retrieve your project's list from the server. Please try again.\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async listEnvironments({ name }): Promise<AxiosResponse<ListEnvironmentsResponse>> {\r\n      try {\r\n        const response = await axiosCloudAPI.get(`/projects/${name}/environments`);\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error('Error fetching cloud environments from the server.');\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        logger.debug(\r\n          \"🥲 Oops! Couldn't retrieve your project's environments from the server. Please try again.\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async listLinkEnvironments({ name }): Promise<AxiosResponse<ListLinkEnvironmentsResponse>> {\r\n      try {\r\n        const response = await axiosCloudAPI.get(`/projects/${name}/environments-linkable`);\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error('Error fetching cloud environments from the server.');\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        logger.debug(\r\n          \"🥲 Oops! Couldn't retrieve your project's environments from the server. Please try again.\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async getProject({ name }): Promise<AxiosResponse<GetProjectResponse>> {\r\n      try {\r\n        const response = await axiosCloudAPI.get(`/projects/${name}`);\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error(\"Error fetching project's details.\");\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        logger.debug(\r\n          \"🥲 Oops! There was a problem retrieving your project's details. Please try again.\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    track(event, payload = {}) {\r\n      return axiosCloudAPI.post<void>('/track', {\r\n        event,\r\n        payload,\r\n      });\r\n    },\r\n  };\r\n}\r\n","import fse from 'fs-extra';\r\nimport path from 'path';\r\nimport { merge } from 'lodash';\r\nimport type { ProjectInfo } from './cli-api';\r\n\r\nexport const LOCAL_SAVE_FILENAME = '.strapi-cloud.json';\r\n\r\nexport type LocalSave = {\r\n  project?: Omit<ProjectInfo, 'id'>;\r\n};\r\n\r\n// Utility type for making all properties optional recursively\r\ntype DeepPartial<T> = {\r\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\r\n};\r\n\r\nexport type LocalPatch = {\r\n  project?: DeepPartial<Omit<ProjectInfo, 'id'>>;\r\n};\r\n\r\nconst getFilePath = (directoryPath?: string): string =>\r\n  path.join(directoryPath || process.cwd(), LOCAL_SAVE_FILENAME);\r\n\r\nexport async function save(data: LocalSave, { directoryPath }: { directoryPath?: string } = {}) {\r\n  const pathToFile = getFilePath(directoryPath);\r\n  // Ensure the directory exists and creates it if not\r\n  await fse.ensureDir(path.dirname(pathToFile));\r\n  await fse.writeJson(pathToFile, data, { encoding: 'utf8' });\r\n}\r\n\r\nexport async function retrieve({\r\n  directoryPath,\r\n}: { directoryPath?: string } = {}): Promise<LocalSave> {\r\n  const pathToFile = getFilePath(directoryPath);\r\n  const pathExists = await fse.pathExists(pathToFile);\r\n  if (!pathExists) {\r\n    return {};\r\n  }\r\n  return fse.readJSON(pathToFile, { encoding: 'utf8' });\r\n}\r\n\r\nexport async function patch(\r\n  patchData: LocalPatch,\r\n  { directoryPath }: { directoryPath?: string } = {}\r\n) {\r\n  const pathToFile = getFilePath(directoryPath);\r\n  const existingData = await retrieve({ directoryPath });\r\n  if (!existingData) {\r\n    throw new Error('No configuration data found to patch.');\r\n  }\r\n  const newData = merge(existingData, patchData);\r\n  await fse.writeJson(pathToFile, newData, { encoding: 'utf8' });\r\n}\r\n\r\nexport async function deleteConfig({ directoryPath }: { directoryPath?: string } = {}) {\r\n  const pathToFile = getFilePath(directoryPath);\r\n  const pathExists = await fse.pathExists(pathToFile);\r\n  if (pathExists) {\r\n    await fse.remove(pathToFile);\r\n  }\r\n}\r\n","import jwksClient, { type JwksClient, type SigningKey } from 'jwks-rsa';\r\nimport type { JwtHeader, VerifyErrors } from 'jsonwebtoken';\r\nimport jwt from 'jsonwebtoken';\r\nimport { getLocalConfig, saveLocalConfig } from '../config/local';\r\nimport type { CloudCliConfig, CLIContext } from '../types';\r\nimport { cloudApiFactory } from './cli-api';\r\n\r\nlet cliConfig: CloudCliConfig;\r\n\r\ninterface DecodedToken {\r\n  [key: string]: any;\r\n}\r\n\r\nexport async function tokenServiceFactory({ logger }: { logger: CLIContext['logger'] }) {\r\n  const cloudApiService = await cloudApiFactory({ logger });\r\n\r\n  async function saveToken(str: string) {\r\n    const appConfig = await getLocalConfig();\r\n\r\n    if (!appConfig) {\r\n      logger.error('There was a problem saving your token. Please try again.');\r\n      return;\r\n    }\r\n\r\n    appConfig.token = str;\r\n\r\n    try {\r\n      await saveLocalConfig(appConfig);\r\n    } catch (e: Error | unknown) {\r\n      logger.debug(e);\r\n      logger.error('There was a problem saving your token. Please try again.');\r\n    }\r\n  }\r\n\r\n  async function retrieveToken() {\r\n    const appConfig = await getLocalConfig();\r\n    if (appConfig.token) {\r\n      // check if token is still valid\r\n      if (await isTokenValid(appConfig.token)) {\r\n        return appConfig.token;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  async function validateToken(idToken: string, jwksUrl: string): Promise<void> {\r\n    const client: JwksClient = jwksClient({\r\n      jwksUri: jwksUrl,\r\n    });\r\n\r\n    // Get the Key from the JWKS using the token header's Key ID (kid)\r\n    const getKey = (header: JwtHeader, callback: (e: Error | null, key?: string) => void) => {\r\n      client.getSigningKey(header.kid, (e: Error | null, key?: SigningKey) => {\r\n        if (e) {\r\n          callback(e);\r\n        } else if (key) {\r\n          const publicKey = 'publicKey' in key ? key.publicKey : key.rsaPublicKey;\r\n          callback(null, publicKey);\r\n        } else {\r\n          callback(new Error('Key not found'));\r\n        }\r\n      });\r\n    };\r\n\r\n    const decodedToken = jwt.decode(idToken, { complete: true }) as DecodedToken;\r\n    if (!decodedToken) {\r\n      if (typeof idToken === 'undefined' || idToken === '') {\r\n        logger.warn('You need to be logged in to use this feature. Please log in and try again.');\r\n      } else {\r\n        logger.error(\r\n          'There seems to be a problem with your login information. Please try logging in again.'\r\n        );\r\n      }\r\n      return Promise.reject(new Error('Invalid token'));\r\n    }\r\n\r\n    // Verify the JWT token signature using the JWKS Key\r\n    return new Promise<void>((resolve, reject) => {\r\n      jwt.verify(idToken, getKey, (err: VerifyErrors | null) => {\r\n        if (err) {\r\n          reject(err);\r\n        }\r\n        if (decodedToken.payload.exp < Math.floor(Date.now() / 1000)) {\r\n          reject(new Error('Token is expired'));\r\n        }\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  async function isTokenValid(token: string) {\r\n    try {\r\n      const config = await cloudApiService.config();\r\n\r\n      cliConfig = config.data;\r\n      if (token) {\r\n        await validateToken(token, cliConfig.jwksUrl);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      logger.debug(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async function eraseToken() {\r\n    const appConfig = await getLocalConfig();\r\n    if (!appConfig) {\r\n      return;\r\n    }\r\n\r\n    delete appConfig.token;\r\n\r\n    try {\r\n      await saveLocalConfig(appConfig);\r\n    } catch (e: Error | unknown) {\r\n      logger.debug(e);\r\n      logger.error(\r\n        'There was an issue removing your login information. Please try logging out again.'\r\n      );\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async function getValidToken(\r\n    ctx: CLIContext,\r\n    loginAction: (ctx: CLIContext) => Promise<boolean>\r\n  ) {\r\n    let token = await retrieveToken();\r\n\r\n    while (!token || !(await isTokenValid(token))) {\r\n      logger.log(\r\n        token\r\n          ? 'Oops! Your token seems expired or invalid. Please login again.'\r\n          : \"We couldn't find a valid token. You need to be logged in to use this feature.\"\r\n      );\r\n      if (!(await loginAction(ctx))) return null;\r\n      token = await retrieveToken();\r\n    }\r\n\r\n    return token;\r\n  }\r\n\r\n  return {\r\n    saveToken,\r\n    retrieveToken,\r\n    validateToken,\r\n    isTokenValid,\r\n    eraseToken,\r\n    getValidToken,\r\n  };\r\n}\r\n","import chalk from 'chalk';\r\nimport stringify from 'fast-safe-stringify';\r\n\r\nimport ora from 'ora';\r\nimport * as cliProgress from 'cli-progress';\r\n\r\nexport interface LoggerOptions {\r\n  silent?: boolean;\r\n  debug?: boolean;\r\n  timestamp?: boolean;\r\n}\r\n\r\nexport interface Logger {\r\n  warnings: number;\r\n  errors: number;\r\n  debug: (...args: unknown[]) => void;\r\n  info: (...args: unknown[]) => void;\r\n  success: (...args: unknown[]) => void;\r\n  warn: (...args: unknown[]) => void;\r\n  error: (...args: unknown[]) => void;\r\n  log: (...args: unknown[]) => void;\r\n  spinner: (text: string) => Pick<ora.Ora, 'succeed' | 'fail' | 'start' | 'text' | 'isSpinning'>;\r\n  progressBar: (\r\n    totalSize: number,\r\n    text: string\r\n  ) => Pick<cliProgress.SingleBar, 'start' | 'stop' | 'update'>;\r\n}\r\n\r\nconst stringifyArg = (arg: unknown) => {\r\n  return typeof arg === 'object' ? stringify(arg) : arg;\r\n};\r\n\r\nconst createLogger = (options: LoggerOptions = {}): Logger => {\r\n  const { silent = false, debug = false, timestamp = true } = options;\r\n\r\n  const state = { errors: 0, warning: 0 };\r\n\r\n  return {\r\n    get warnings() {\r\n      return state.warning;\r\n    },\r\n\r\n    get errors() {\r\n      return state.errors;\r\n    },\r\n\r\n    async debug(...args) {\r\n      if (silent || !debug) {\r\n        return;\r\n      }\r\n\r\n      console.log(\r\n        chalk.cyan(`[DEBUG]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\r\n        ...args.map(stringifyArg)\r\n      );\r\n    },\r\n\r\n    info(...args) {\r\n      if (silent) {\r\n        return;\r\n      }\r\n\r\n      console.info(\r\n        chalk.blue(`[INFO]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\r\n        ...args.map(stringifyArg)\r\n      );\r\n    },\r\n\r\n    log(...args) {\r\n      if (silent) {\r\n        return;\r\n      }\r\n\r\n      console.info(\r\n        chalk.blue(`${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\r\n        ...args.map(stringifyArg)\r\n      );\r\n    },\r\n\r\n    success(...args) {\r\n      if (silent) {\r\n        return;\r\n      }\r\n\r\n      console.info(\r\n        chalk.green(`[SUCCESS]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\r\n        ...args.map(stringifyArg)\r\n      );\r\n    },\r\n\r\n    warn(...args) {\r\n      state.warning += 1;\r\n\r\n      if (silent) {\r\n        return;\r\n      }\r\n\r\n      console.warn(\r\n        chalk.yellow(`[WARN]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\r\n        ...args.map(stringifyArg)\r\n      );\r\n    },\r\n\r\n    error(...args) {\r\n      state.errors += 1;\r\n\r\n      if (silent) {\r\n        return;\r\n      }\r\n\r\n      console.error(\r\n        chalk.red(`[ERROR]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\r\n        ...args.map(stringifyArg)\r\n      );\r\n    },\r\n\r\n    // @ts-expect-error – returning a subpart of ora is fine because the types tell us what is what.\r\n    spinner(text: string) {\r\n      if (silent) {\r\n        return {\r\n          succeed() {\r\n            return this;\r\n          },\r\n          fail() {\r\n            return this;\r\n          },\r\n          start() {\r\n            return this;\r\n          },\r\n          text: '',\r\n          isSpinning: false,\r\n        };\r\n      }\r\n\r\n      return ora(text);\r\n    },\r\n\r\n    progressBar(totalSize: number, text: string) {\r\n      if (silent) {\r\n        return {\r\n          start() {\r\n            return this;\r\n          },\r\n          stop() {\r\n            return this;\r\n          },\r\n          update() {\r\n            return this;\r\n          },\r\n        };\r\n      }\r\n\r\n      const progressBar = new cliProgress.SingleBar({\r\n        format: `${text ? `${text} |` : ''}${chalk.green('{bar}')}| {percentage}%`,\r\n        barCompleteChar: '\\u2588',\r\n        barIncompleteChar: '\\u2591',\r\n        hideCursor: true,\r\n        forceRedraw: true,\r\n      });\r\n\r\n      progressBar.start(totalSize, 0);\r\n\r\n      return progressBar;\r\n    },\r\n  };\r\n};\r\n\r\nexport { createLogger };\r\n","import * as fse from 'fs-extra';\r\nimport os from 'os';\r\nimport pkgUp from 'pkg-up';\r\nimport * as yup from 'yup';\r\nimport chalk from 'chalk';\r\nimport { Logger } from '../services/logger';\r\n\r\ninterface Export {\r\n  types?: string;\r\n  source: string;\r\n  module?: string;\r\n  import?: string;\r\n  require?: string;\r\n  default: string;\r\n}\r\n\r\nconst packageJsonSchema = yup.object({\r\n  name: yup.string().required(),\r\n  exports: yup.lazy((value) =>\r\n    yup\r\n      .object(\r\n        typeof value === 'object'\r\n          ? Object.entries(value).reduce(\r\n              (acc, [key, value]) => {\r\n                if (typeof value === 'object') {\r\n                  acc[key] = yup\r\n                    .object({\r\n                      types: yup.string().optional(),\r\n                      source: yup.string().required(),\r\n                      module: yup.string().optional(),\r\n                      import: yup.string().required(),\r\n                      require: yup.string().required(),\r\n                      default: yup.string().required(),\r\n                    })\r\n                    .noUnknown(true);\r\n                } else {\r\n                  acc[key] = yup\r\n                    .string()\r\n                    .matches(/^\\.\\/.*\\.json$/)\r\n                    .required();\r\n                }\r\n\r\n                return acc;\r\n              },\r\n              {} as Record<string, yup.SchemaOf<string> | yup.SchemaOf<Export>>\r\n            )\r\n          : undefined\r\n      )\r\n      .optional()\r\n  ),\r\n});\r\n\r\ntype PackageJson = yup.Asserts<typeof packageJsonSchema>;\r\n\r\n/**\r\n * @description being a task to load the package.json starting from the current working directory\r\n * using a shallow find for the package.json  and `fs` to read the file. If no package.json is found,\r\n * the process will throw with an appropriate error message.\r\n */\r\nconst loadPkg = async ({ cwd, logger }: { cwd: string; logger: Logger }): Promise<PackageJson> => {\r\n  const pkgPath = await pkgUp({ cwd });\r\n\r\n  if (!pkgPath) {\r\n    throw new Error('Could not find a package.json in the current directory');\r\n  }\r\n\r\n  const buffer = await fse.readFile(pkgPath);\r\n\r\n  const pkg = JSON.parse(buffer.toString());\r\n\r\n  logger.debug('Loaded package.json:', os.EOL, pkg);\r\n\r\n  return pkg;\r\n};\r\n\r\n/**\r\n * @description validate the package.json against a standardised schema using `yup`.\r\n * If the validation fails, the process will throw with an appropriate error message.\r\n */\r\nconst validatePkg = async ({ pkg }: { pkg: object }): Promise<PackageJson> => {\r\n  try {\r\n    return await packageJsonSchema.validate(pkg, {\r\n      strict: true,\r\n    });\r\n  } catch (err) {\r\n    if (err instanceof yup.ValidationError) {\r\n      switch (err.type) {\r\n        case 'required':\r\n          if (err.path) {\r\n            throw new Error(\r\n              `'${err.path}' in 'package.json' is required as type '${chalk.magenta(\r\n                yup.reach(packageJsonSchema, err.path).type\r\n              )}'`\r\n            );\r\n          }\r\n          break;\r\n        /**\r\n         * This will only be thrown if there are keys in the export map\r\n         * that we don't expect so we can therefore make some assumptions\r\n         */\r\n        case 'noUnknown':\r\n          if (err.path && err.params && 'unknown' in err.params) {\r\n            throw new Error(\r\n              `'${err.path}' in 'package.json' contains the unknown key ${chalk.magenta(\r\n                err.params.unknown\r\n              )}, for compatability only the following keys are allowed: ${chalk.magenta(\r\n                \"['types', 'source', 'import', 'require', 'default']\"\r\n              )}`\r\n            );\r\n          }\r\n          break;\r\n        default:\r\n          if (err.path && err.params && 'type' in err.params && 'value' in err.params) {\r\n            throw new Error(\r\n              `'${err.path}' in 'package.json' must be of type '${chalk.magenta(\r\n                err.params.type\r\n              )}' (recieved '${chalk.magenta(typeof err.params.value)}')`\r\n            );\r\n          }\r\n      }\r\n    }\r\n\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport type { PackageJson, Export };\r\nexport { loadPkg, validatePkg };\r\n","import { CLIContext } from '../../types';\r\nimport { PackageJson, loadPkg } from '../../utils/pkg';\r\n\r\nexport async function getProjectNameFromPackageJson(ctx: CLIContext): Promise<string> {\r\n  try {\r\n    const packageJson = (await loadPkg(ctx)) as PackageJson;\r\n    return packageJson.name || 'my-strapi-project';\r\n  } catch (e) {\r\n    return 'my-strapi-project';\r\n  }\r\n}\r\n","import type { CLIContext, CloudApiService, TrackPayload } from '../types';\r\n\r\nconst trackEvent = async (\r\n  ctx: CLIContext,\r\n  cloudApiService: CloudApiService,\r\n  eventName: string,\r\n  eventData: TrackPayload\r\n) => {\r\n  try {\r\n    await cloudApiService.track(eventName, eventData);\r\n  } catch (e) {\r\n    ctx.logger.debug(`Failed to track ${eventName}`, e);\r\n  }\r\n};\r\n\r\nexport { trackEvent };\r\n","import axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport chalk from 'chalk';\r\nimport inquirer from 'inquirer';\r\nimport { tokenServiceFactory, cloudApiFactory } from '../services';\r\nimport type { CloudCliConfig, CLIContext } from '../types';\r\nimport { apiConfig } from '../config/api';\r\nimport { trackEvent } from '../utils/analytics';\r\n\r\nconst openModule = import('open');\r\n\r\nexport async function promptLogin(ctx: CLIContext) {\r\n  const response = await inquirer.prompt([\r\n    {\r\n      type: 'confirm',\r\n      name: 'login',\r\n      message: 'Would you like to login?',\r\n    },\r\n  ]);\r\n\r\n  if (response.login) {\r\n    const loginSuccessful = await loginAction(ctx);\r\n    return loginSuccessful;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default async function loginAction(ctx: CLIContext): Promise<boolean> {\r\n  const { logger } = ctx;\r\n  const tokenService = await tokenServiceFactory(ctx);\r\n  const existingToken = await tokenService.retrieveToken();\r\n  const cloudApiService = await cloudApiFactory(ctx, existingToken || undefined);\r\n\r\n  if (existingToken) {\r\n    const isTokenValid = await tokenService.isTokenValid(existingToken);\r\n    if (isTokenValid) {\r\n      try {\r\n        const userInfo = await cloudApiService.getUserInfo();\r\n        const { email } = userInfo.data.data;\r\n        if (email) {\r\n          logger.log(`You are already logged into your account (${email}).`);\r\n        } else {\r\n          logger.log('You are already logged in.');\r\n        }\r\n        logger.log(\r\n          'To access your dashboard, please copy and paste the following URL into your web browser:'\r\n        );\r\n        logger.log(chalk.underline(`${apiConfig.dashboardBaseUrl}/projects`));\r\n        return true;\r\n      } catch (e) {\r\n        logger.debug('Failed to fetch user info', e);\r\n      }\r\n    }\r\n  }\r\n\r\n  let cliConfig: CloudCliConfig;\r\n  try {\r\n    logger.info('🔌 Connecting to the Strapi Cloud API...');\r\n    const config = await cloudApiService.config();\r\n    cliConfig = config.data;\r\n  } catch (e: unknown) {\r\n    logger.error('🥲 Oops! Something went wrong while logging you in. Please try again.');\r\n    logger.debug(e);\r\n    return false;\r\n  }\r\n  await trackEvent(ctx, cloudApiService, 'willLoginAttempt', {});\r\n\r\n  logger.debug('🔐 Creating device authentication request...', {\r\n    client_id: cliConfig.clientId,\r\n    scope: cliConfig.scope,\r\n    audience: cliConfig.audience,\r\n  });\r\n  const deviceAuthResponse = (await axios\r\n    .post(cliConfig.deviceCodeAuthUrl, {\r\n      client_id: cliConfig.clientId,\r\n      scope: cliConfig.scope,\r\n      audience: cliConfig.audience,\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      logger.error('There was an issue with the authentication process. Please try again.');\r\n      if (e.message) {\r\n        logger.debug(e.message, e);\r\n      } else {\r\n        logger.debug(e);\r\n      }\r\n    })) as AxiosResponse;\r\n\r\n  openModule.then((open) => {\r\n    open.default(deviceAuthResponse.data.verification_uri_complete).catch((e: Error) => {\r\n      logger.error('We encountered an issue opening the browser. Please try again later.');\r\n      logger.debug(e.message, e);\r\n    });\r\n  });\r\n\r\n  logger.log('If a browser tab does not open automatically, please follow the next steps:');\r\n  logger.log(\r\n    `1. Open this url in your device: ${deviceAuthResponse.data.verification_uri_complete}`\r\n  );\r\n  logger.log(\r\n    `2. Enter the following code: ${deviceAuthResponse.data.user_code} and confirm to login.\\n`\r\n  );\r\n\r\n  const tokenPayload = {\r\n    grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\r\n    device_code: deviceAuthResponse.data.device_code,\r\n    client_id: cliConfig.clientId,\r\n  };\r\n\r\n  let isAuthenticated = false;\r\n\r\n  const authenticate = async () => {\r\n    const spinner = logger.spinner('Waiting for authentication');\r\n    spinner.start();\r\n    const spinnerFail = () => spinner.fail('Authentication failed!');\r\n\r\n    while (!isAuthenticated) {\r\n      try {\r\n        const tokenResponse = await axios.post(cliConfig.tokenUrl, tokenPayload);\r\n        const authTokenData = tokenResponse.data;\r\n\r\n        if (tokenResponse.status === 200) {\r\n          // Token validation\r\n          try {\r\n            logger.debug('🔐 Validating token...');\r\n            await tokenService.validateToken(authTokenData.id_token, cliConfig.jwksUrl);\r\n            logger.debug('🔐 Token validation successful!');\r\n          } catch (e: any) {\r\n            logger.debug(e);\r\n            spinnerFail();\r\n            throw new Error('Unable to proceed: Token validation failed');\r\n          }\r\n\r\n          logger.debug('🔍 Fetching user information...');\r\n          const cloudApiServiceWithToken = await cloudApiFactory(ctx, authTokenData.access_token);\r\n          // Call to get user info to create the user in DB if not exists\r\n          await cloudApiServiceWithToken.getUserInfo();\r\n          logger.debug('🔍 User information fetched successfully!');\r\n\r\n          try {\r\n            logger.debug('📝 Saving login information...');\r\n            await tokenService.saveToken(authTokenData.access_token);\r\n            logger.debug('📝 Login information saved successfully!');\r\n            isAuthenticated = true;\r\n          } catch (e) {\r\n            logger.error(\r\n              'There was a problem saving your login information. Please try logging in again.'\r\n            );\r\n            logger.debug(e);\r\n            spinnerFail();\r\n            return false;\r\n          }\r\n        }\r\n      } catch (e: any) {\r\n        if (e.message === 'Unable to proceed: Token validation failed') {\r\n          logger.error(\r\n            'There seems to be a problem with your login information. Please try logging in again.'\r\n          );\r\n          spinnerFail();\r\n          await trackEvent(ctx, cloudApiService, 'didNotLogin', { loginMethod: 'cli' });\r\n          return false;\r\n        }\r\n        if (\r\n          e.response?.data.error &&\r\n          !['authorization_pending', 'slow_down'].includes(e!.response.data.error)\r\n        ) {\r\n          logger.debug(e);\r\n          spinnerFail();\r\n          await trackEvent(ctx, cloudApiService, 'didNotLogin', { loginMethod: 'cli' });\r\n          return false;\r\n        }\r\n        // Await interval before retrying\r\n        await new Promise((resolve) => {\r\n          setTimeout(resolve, deviceAuthResponse.data.interval * 1000);\r\n        });\r\n      }\r\n    }\r\n    spinner.succeed('Authentication successful!');\r\n    logger.log('You are now logged into Strapi Cloud.');\r\n    logger.log(\r\n      'To access your dashboard, please copy and paste the following URL into your web browser:'\r\n    );\r\n    logger.log(chalk.underline(`${apiConfig.dashboardBaseUrl}/projects`));\r\n    await trackEvent(ctx, cloudApiService, 'didLogin', { loginMethod: 'cli' });\r\n  };\r\n\r\n  await authenticate();\r\n  return isAuthenticated;\r\n}\r\n","import { DistinctQuestion } from 'inquirer';\r\nimport type { ProjectAnswers } from '../../types';\r\n\r\n/**\r\n * Apply default values to questions based on the provided mapper\r\n * @param questionsMap - A partial object with keys matching the ProjectAnswers keys and values being the default value or a function to get the default value\r\n */\r\nexport function questionDefaultValuesMapper(\r\n  questionsMap: Partial<{\r\n    [K in keyof ProjectAnswers]:\r\n      | ((question: DistinctQuestion<ProjectAnswers>) => ProjectAnswers[K])\r\n      | ProjectAnswers[K];\r\n  }>\r\n) {\r\n  return (\r\n    questions: ReadonlyArray<DistinctQuestion<ProjectAnswers>>\r\n  ): ReadonlyArray<DistinctQuestion<ProjectAnswers>> => {\r\n    return questions.map((question) => {\r\n      const questionName = question.name as keyof ProjectAnswers;\r\n\r\n      // If the question is part of the mapper, apply the default value\r\n      if (questionName in questionsMap) {\r\n        const questionDefault = questionsMap[questionName];\r\n\r\n        // If the default value is a function, call it with the question and get the default value\r\n        if (typeof questionDefault === 'function') {\r\n          return {\r\n            ...question,\r\n            default: questionDefault(question),\r\n          };\r\n        }\r\n        // else we consider it as a static value\r\n        return {\r\n          ...question,\r\n          default: questionDefault,\r\n        };\r\n      }\r\n      // If the question is not part of the mapper, return the question as is\r\n      return question;\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Get default values from questions\r\n * @param questions - An array of questions for project creation\r\n */\r\nexport function getDefaultsFromQuestions(\r\n  questions: ReadonlyArray<DistinctQuestion<ProjectAnswers>>\r\n): Partial<ProjectAnswers> {\r\n  return questions.reduce((acc, question) => {\r\n    if (question.default && question.name) {\r\n      return { ...acc, [question.name]: question.default };\r\n    }\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Get the default node version based on the current node version if it is in the list of choices\r\n * @param question - The question for the node version in project creation\r\n */\r\nexport function getProjectNodeVersionDefault(question: DistinctQuestion<ProjectAnswers>): string {\r\n  const currentNodeVersion = process.versions.node.split('.')[0];\r\n\r\n  // Node Version question is set up as a list, but the type of inquirer is dynamic and the question can change in the future (it comes from API)\r\n  if (question.type === 'list' && Array.isArray(question.choices)) {\r\n    const choice = question.choices.find((choice) => choice.value === currentNodeVersion);\r\n    if (choice) {\r\n      return choice.value;\r\n    }\r\n  }\r\n  return question.default;\r\n}\r\n","import inquirer from 'inquirer';\r\nimport { AxiosError } from 'axios';\r\nimport { defaults } from 'lodash/fp';\r\nimport type { CLIContext, ProjectAnswers, ProjectInput } from '../types';\r\nimport { cloudApiFactory, local, tokenServiceFactory } from '../services';\r\nimport { getProjectNameFromPackageJson } from './utils/get-project-name-from-pkg';\r\nimport { promptLogin } from '../login/action';\r\nimport {\r\n  getDefaultsFromQuestions,\r\n  getProjectNodeVersionDefault,\r\n  questionDefaultValuesMapper,\r\n} from './utils/project-questions.utils';\r\n\r\nasync function handleError(ctx: CLIContext, error: Error) {\r\n  const { logger } = ctx;\r\n  logger.debug(error);\r\n  if (error instanceof AxiosError) {\r\n    const errorMessage = typeof error.response?.data === 'string' ? error.response.data : null;\r\n    switch (error.response?.status) {\r\n      case 403:\r\n        logger.error(\r\n          errorMessage ||\r\n            'You do not have permission to create a project. Please contact support for assistance.'\r\n        );\r\n        return;\r\n      case 400:\r\n        logger.error(errorMessage || 'Invalid input. Please check your inputs and try again.');\r\n        return;\r\n      case 503:\r\n        logger.error(\r\n          'Strapi Cloud project creation is currently unavailable. Please try again later.'\r\n        );\r\n        return;\r\n      default:\r\n        if (errorMessage) {\r\n          logger.error(errorMessage);\r\n          return;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  logger.error(\r\n    'We encountered an issue while creating your project. Please try again in a moment. If the problem persists, contact support for assistance.'\r\n  );\r\n}\r\n\r\nasync function createProject(ctx: CLIContext, cloudApi: any, projectInput: ProjectInput) {\r\n  const { logger } = ctx;\r\n  const spinner = logger.spinner('Setting up your project...').start();\r\n  try {\r\n    const { data } = await cloudApi.createProject(projectInput);\r\n    await local.save({ project: data });\r\n    spinner.succeed('Project created successfully!');\r\n    return data;\r\n  } catch (e: Error | unknown) {\r\n    spinner.fail('An error occurred while creating the project on Strapi Cloud.');\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport default async (ctx: CLIContext) => {\r\n  const { logger } = ctx;\r\n  const { getValidToken, eraseToken } = await tokenServiceFactory(ctx);\r\n\r\n  const token = await getValidToken(ctx, promptLogin);\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  const cloudApi = await cloudApiFactory(ctx, token);\r\n  const { data: config } = await cloudApi.config();\r\n  const projectName = await getProjectNameFromPackageJson(ctx);\r\n\r\n  const defaultAnswersMapper = questionDefaultValuesMapper({\r\n    name: projectName,\r\n    nodeVersion: getProjectNodeVersionDefault,\r\n  });\r\n  const questions = defaultAnswersMapper(config.projectCreation.questions);\r\n  const defaultValues = {\r\n    ...config.projectCreation.defaults,\r\n    ...getDefaultsFromQuestions(questions),\r\n  };\r\n\r\n  const projectAnswersDefaulted = defaults(defaultValues);\r\n  const projectAnswers = await inquirer.prompt<ProjectAnswers>(questions);\r\n\r\n  const projectInput: ProjectInput = projectAnswersDefaulted(projectAnswers);\r\n\r\n  try {\r\n    return await createProject(ctx, cloudApi, projectInput);\r\n  } catch (e: Error | unknown) {\r\n    if (e instanceof AxiosError && e.response?.status === 401) {\r\n      logger.warn('Oops! Your session has expired. Please log in again to retry.');\r\n      await eraseToken();\r\n      if (await promptLogin(ctx)) {\r\n        return await createProject(ctx, cloudApi, projectInput);\r\n      }\r\n    } else {\r\n      await handleError(ctx, e as Error);\r\n    }\r\n  }\r\n};\r\n","import EventSource from 'eventsource';\r\nimport type { CLIContext, CloudCliConfig } from '../types';\r\n\r\ntype Event = {\r\n  type: string;\r\n  data: string;\r\n  lastEventId: string;\r\n  origin: string;\r\n};\r\n\r\nexport function notificationServiceFactory({ logger }: CLIContext) {\r\n  return (url: string, token: string, cliConfig: CloudCliConfig) => {\r\n    const CONN_TIMEOUT = Number(cliConfig.notificationsConnectionTimeout);\r\n\r\n    const es = new EventSource(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    let timeoutId: NodeJS.Timeout;\r\n\r\n    const resetTimeout = () => {\r\n      clearTimeout(timeoutId);\r\n      timeoutId = setTimeout(() => {\r\n        logger.log(\r\n          'We were unable to connect to the server at this time. This could be due to a temporary issue. Please try again in a moment.'\r\n        );\r\n        es.close();\r\n      }, CONN_TIMEOUT); // 5 minutes\r\n    };\r\n\r\n    es.onopen = resetTimeout;\r\n    es.onmessage = (event: Event) => {\r\n      resetTimeout();\r\n      const data = JSON.parse(event.data);\r\n\r\n      if (data.message) {\r\n        logger.log(data.message);\r\n      }\r\n\r\n      // Close connection when a specific event is received\r\n      if (data.event === 'deploymentFinished' || data.event === 'deploymentFailed') {\r\n        es.close();\r\n      }\r\n    };\r\n  };\r\n}\r\n","import EventSource from 'eventsource';\r\nimport { CLIContext, type CloudCliConfig } from '../types';\r\n\r\nconst buildLogsServiceFactory = ({ logger }: CLIContext) => {\r\n  return async (url: string, token: string, cliConfig: CloudCliConfig) => {\r\n    const CONN_TIMEOUT = Number(cliConfig.buildLogsConnectionTimeout);\r\n    const MAX_RETRIES = Number(cliConfig.buildLogsMaxRetries);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let timeoutId: NodeJS.Timeout | null = null;\r\n      let retries = 0;\r\n\r\n      const connect = (url: string) => {\r\n        const spinner = logger.spinner('Connecting to server to get build logs');\r\n        spinner.start();\r\n        const es = new EventSource(`${url}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        const clearExistingTimeout = () => {\r\n          if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n          }\r\n        };\r\n\r\n        const resetTimeout = () => {\r\n          clearExistingTimeout();\r\n          timeoutId = setTimeout(() => {\r\n            if (spinner.isSpinning) {\r\n              spinner.fail(\r\n                'We were unable to connect to the server to get build logs at this time. This could be due to a temporary issue.'\r\n              );\r\n            }\r\n            es.close();\r\n            reject(new Error('Connection timed out'));\r\n          }, CONN_TIMEOUT);\r\n        };\r\n\r\n        es.onopen = resetTimeout;\r\n\r\n        es.addEventListener('finished', (event) => {\r\n          const data = JSON.parse(event.data);\r\n          logger.log(data.msg);\r\n          es.close();\r\n          clearExistingTimeout();\r\n          resolve(null);\r\n        });\r\n\r\n        es.addEventListener('log', (event) => {\r\n          if (spinner.isSpinning) {\r\n            spinner.succeed();\r\n          }\r\n          resetTimeout();\r\n          const data = JSON.parse(event.data);\r\n          logger.log(data.msg);\r\n        });\r\n\r\n        es.onerror = async () => {\r\n          retries += 1;\r\n          if (retries > MAX_RETRIES) {\r\n            spinner.fail('We were unable to connect to the server to get build logs at this time.');\r\n            es.close();\r\n            clearExistingTimeout(); // Important to clear the event loop from remaining timeout - avoid to wait for nothing while the timeout is running\r\n            reject(new Error('Max retries reached'));\r\n          }\r\n        };\r\n      };\r\n\r\n      connect(url);\r\n    });\r\n  };\r\n};\r\n\r\nexport { buildLogsServiceFactory };\r\n","import fse from 'fs-extra';\r\nimport inquirer from 'inquirer';\r\nimport boxen from 'boxen';\r\nimport path from 'path';\r\nimport chalk from 'chalk';\r\nimport { AxiosError } from 'axios';\r\nimport * as crypto from 'node:crypto';\r\nimport { apiConfig } from '../config/api';\r\nimport { compressFilesToTar } from '../utils/compress-files';\r\nimport createProjectAction from '../create-project/action';\r\nimport type {\r\n  CLIContext,\r\n  CloudApiService,\r\n  CloudCliConfig,\r\n  EnvironmentDetails,\r\n  ProjectInfo,\r\n} from '../types';\r\nimport { getTmpStoragePath } from '../config/local';\r\nimport { cloudApiFactory, tokenServiceFactory, local } from '../services';\r\nimport { notificationServiceFactory } from '../services/notification';\r\nimport { loadPkg } from '../utils/pkg';\r\nimport { buildLogsServiceFactory } from '../services/build-logs';\r\nimport { promptLogin } from '../login/action';\r\nimport { trackEvent } from '../utils/analytics';\r\n\r\ntype PackageJson = {\r\n  name: string;\r\n  strapi?: {\r\n    uuid: string;\r\n  };\r\n};\r\n\r\ninterface CmdOptions {\r\n  env?: string;\r\n  force?: boolean;\r\n}\r\n\r\nconst boxenOptions: boxen.Options = {\r\n  padding: 1,\r\n  margin: 1,\r\n  align: 'center',\r\n  borderColor: 'yellow',\r\n  borderStyle: 'round',\r\n};\r\n\r\nconst QUIT_OPTION = 'Quit';\r\n\r\nasync function promptForEnvironment(environments: string[]): Promise<string> {\r\n  const choices = environments.map((env) => ({ name: env, value: env }));\r\n  const { selectedEnvironment } = await inquirer.prompt([\r\n    {\r\n      type: 'list',\r\n      name: 'selectedEnvironment',\r\n      message: 'Select the environment to deploy:',\r\n      choices: [...choices, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\r\n    },\r\n  ]);\r\n  if (selectedEnvironment === null) {\r\n    process.exit(1);\r\n  }\r\n\r\n  return selectedEnvironment;\r\n}\r\n\r\nasync function upload(\r\n  ctx: CLIContext,\r\n  project: ProjectInfo,\r\n  token: string,\r\n  maxProjectFileSize: number\r\n) {\r\n  const cloudApi = await cloudApiFactory(ctx, token);\r\n  try {\r\n    const storagePath = await getTmpStoragePath();\r\n    const projectFolder = path.resolve(process.cwd());\r\n    const packageJson = (await loadPkg(ctx)) as PackageJson;\r\n\r\n    if (!packageJson) {\r\n      ctx.logger.error(\r\n        'Unable to deploy the project. Please make sure the package.json file is correctly formatted.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    ctx.logger.log('📦 Compressing project...');\r\n    // hash packageJson.name to avoid conflicts\r\n    const hashname = crypto.createHash('sha512').update(packageJson.name).digest('hex');\r\n    const compressedFilename = `${hashname}.tar.gz`;\r\n    try {\r\n      ctx.logger.debug(\r\n        'Compression parameters\\n',\r\n        `Storage path: ${storagePath}\\n`,\r\n        `Project folder: ${projectFolder}\\n`,\r\n        `Compressed filename: ${compressedFilename}`\r\n      );\r\n      await compressFilesToTar(storagePath, projectFolder, compressedFilename);\r\n      ctx.logger.log('📦 Project compressed successfully!');\r\n    } catch (e: unknown) {\r\n      ctx.logger.error(\r\n        '⚠️ Project compression failed. Try again later or check for large/incompatible files.'\r\n      );\r\n      ctx.logger.debug(e);\r\n      process.exit(1);\r\n    }\r\n\r\n    const tarFilePath = path.resolve(storagePath, compressedFilename);\r\n    const fileStats = await fse.stat(tarFilePath);\r\n\r\n    if (fileStats.size > maxProjectFileSize) {\r\n      ctx.logger.log(\r\n        'Unable to proceed: Your project is too big to be transferred, please use a git repo instead.'\r\n      );\r\n      try {\r\n        await fse.remove(tarFilePath);\r\n      } catch (e: any) {\r\n        ctx.logger.log('Unable to remove file: ', tarFilePath);\r\n        ctx.logger.debug(e);\r\n      }\r\n      return;\r\n    }\r\n\r\n    ctx.logger.info('🚀 Uploading project...');\r\n    const progressBar = ctx.logger.progressBar(100, 'Upload Progress');\r\n\r\n    try {\r\n      const { data } = await cloudApi.deploy(\r\n        { filePath: tarFilePath, project },\r\n        {\r\n          onUploadProgress(progressEvent) {\r\n            const total = progressEvent.total || fileStats.size;\r\n            const percentage = Math.round((progressEvent.loaded * 100) / total);\r\n            progressBar.update(percentage);\r\n          },\r\n        }\r\n      );\r\n\r\n      progressBar.update(100);\r\n      progressBar.stop();\r\n      ctx.logger.success('✨ Upload finished!');\r\n      return data.build_id;\r\n    } catch (e: any) {\r\n      progressBar.stop();\r\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\r\n      ctx.logger.debug(e);\r\n    } finally {\r\n      await fse.remove(tarFilePath);\r\n    }\r\n    process.exit(0);\r\n  } catch (e: any) {\r\n    ctx.logger.error('An error occurred while deploying the project. Please try again later.');\r\n    ctx.logger.debug(e);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nasync function getProject(ctx: CLIContext) {\r\n  const { project } = await local.retrieve();\r\n  if (!project) {\r\n    try {\r\n      return await createProjectAction(ctx);\r\n    } catch (e: any) {\r\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\r\n      ctx.logger.debug(e);\r\n      process.exit(1);\r\n    }\r\n  }\r\n  return project;\r\n}\r\n\r\nasync function getConfig({\r\n  ctx,\r\n  cloudApiService,\r\n}: {\r\n  ctx: CLIContext;\r\n  cloudApiService: CloudApiService;\r\n}): Promise<CloudCliConfig | null> {\r\n  try {\r\n    const { data: cliConfig } = await cloudApiService.config();\r\n    return cliConfig;\r\n  } catch (e) {\r\n    ctx.logger.debug('Failed to get cli config', e);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction validateEnvironment(ctx: CLIContext, environment: string, environments: string[]): void {\r\n  if (!environments.includes(environment)) {\r\n    ctx.logger.error(`Environment ${environment} does not exist.`);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nasync function getTargetEnvironment(\r\n  ctx: CLIContext,\r\n  opts: CmdOptions,\r\n  project: ProjectInfo,\r\n  environments: string[]\r\n): Promise<string> {\r\n  if (opts.env) {\r\n    validateEnvironment(ctx, opts.env, environments);\r\n    return opts.env;\r\n  }\r\n\r\n  if (project.targetEnvironment) {\r\n    return project.targetEnvironment;\r\n  }\r\n\r\n  if (environments.length > 1) {\r\n    return promptForEnvironment(environments);\r\n  }\r\n\r\n  return environments[0];\r\n}\r\n\r\nfunction hasPendingOrLiveDeployment(\r\n  environments: EnvironmentDetails[],\r\n  targetEnvironment: string\r\n): boolean {\r\n  const environment = environments.find((env) => env.name === targetEnvironment);\r\n  if (!environment) {\r\n    throw new Error(`Environment details ${targetEnvironment} not found.`);\r\n  }\r\n  return environment.hasPendingDeployment || environment.hasLiveDeployment || false;\r\n}\r\n\r\nexport default async (ctx: CLIContext, opts: CmdOptions) => {\r\n  const { getValidToken } = await tokenServiceFactory(ctx);\r\n  const token = await getValidToken(ctx, promptLogin);\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  const project = await getProject(ctx);\r\n  if (!project) {\r\n    return;\r\n  }\r\n\r\n  const cloudApiService = await cloudApiFactory(ctx, token);\r\n  let projectData;\r\n  let environments: string[];\r\n  let environmentsDetails: EnvironmentDetails[];\r\n\r\n  try {\r\n    const {\r\n      data: { data, metadata },\r\n    } = await cloudApiService.getProject({ name: project.name });\r\n    projectData = data;\r\n    environments = projectData.environments;\r\n    environmentsDetails = projectData.environmentsDetails;\r\n    const isProjectSuspended = projectData.suspendedAt;\r\n\r\n    if (isProjectSuspended) {\r\n      ctx.logger.log(\r\n        '\\n Oops! This project has been suspended. \\n\\n Please reactivate it from the dashboard to continue deploying: '\r\n      );\r\n      ctx.logger.log(chalk.underline(`${metadata.dashboardUrls.project}`));\r\n      return;\r\n    }\r\n  } catch (e: Error | unknown) {\r\n    if (e instanceof AxiosError && e.response?.data) {\r\n      if (e.response.status === 404) {\r\n        ctx.logger.warn(\r\n          `The project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\r\n            'link'\r\n          )} command before deploying.`\r\n        );\r\n      } else {\r\n        ctx.logger.error(e.response.data);\r\n      }\r\n    } else {\r\n      ctx.logger.error(\r\n        \"An error occurred while retrieving the project's information. Please try again later.\"\r\n      );\r\n    }\r\n    ctx.logger.debug(e);\r\n    return;\r\n  }\r\n\r\n  await trackEvent(ctx, cloudApiService, 'willDeployWithCLI', {\r\n    projectInternalName: project.name,\r\n  });\r\n\r\n  const notificationService = notificationServiceFactory(ctx);\r\n  const buildLogsService = buildLogsServiceFactory(ctx);\r\n\r\n  const cliConfig = await getConfig({ ctx, cloudApiService });\r\n  if (!cliConfig) {\r\n    ctx.logger.error(\r\n      'An error occurred while retrieving data from Strapi Cloud. Please check your network or try again later.'\r\n    );\r\n    return;\r\n  }\r\n\r\n  let maxSize: number = parseInt(cliConfig.maxProjectFileSize, 10);\r\n  if (Number.isNaN(maxSize)) {\r\n    ctx.logger.debug(\r\n      'An error occurred while parsing the maxProjectFileSize. Using default value.'\r\n    );\r\n    maxSize = 100000000;\r\n  }\r\n\r\n  project.targetEnvironment = await getTargetEnvironment(ctx, opts, project, environments);\r\n\r\n  if (!opts.force) {\r\n    const shouldDisplayWarning = hasPendingOrLiveDeployment(\r\n      environmentsDetails,\r\n      project.targetEnvironment\r\n    );\r\n    if (shouldDisplayWarning) {\r\n      ctx.logger.log(boxen(cliConfig.projectDeployment.confirmationText, boxenOptions));\r\n      const { confirm } = await inquirer.prompt([\r\n        {\r\n          type: 'confirm',\r\n          name: 'confirm',\r\n          message: `Do you want to proceed with deployment to ${chalk.cyan(projectData.displayName)} on ${chalk.cyan(project.targetEnvironment)} environment?`,\r\n        },\r\n      ]);\r\n      if (!confirm) {\r\n        process.exit(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  const buildId = await upload(ctx, project, token, maxSize);\r\n\r\n  if (!buildId) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    ctx.logger.log(\r\n      `🚀 Deploying project to ${chalk.cyan(project.targetEnvironment ?? `production`)} environment...`\r\n    );\r\n    notificationService(`${apiConfig.apiBaseUrl}/notifications`, token, cliConfig);\r\n    await buildLogsService(`${apiConfig.apiBaseUrl}/v1/logs/${buildId}`, token, cliConfig);\r\n\r\n    ctx.logger.log(\r\n      'Visit the following URL for deployment logs. Your deployment will be available here shortly.'\r\n    );\r\n    ctx.logger.log(\r\n      chalk.underline(`${apiConfig.dashboardBaseUrl}/projects/${project.name}/deployments`)\r\n    );\r\n  } catch (e: Error | unknown) {\r\n    ctx.logger.debug(e);\r\n    if (e instanceof Error) {\r\n      ctx.logger.error(e.message);\r\n    } else {\r\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\r\n    }\r\n  }\r\n};\r\n","import chalk from 'chalk';\r\nimport { has } from 'lodash/fp';\r\n\r\n// TODO: Remove duplicated code by extracting to a shared package\r\n\r\nconst assertCwdContainsStrapiProject = (name: string) => {\r\n  const logErrorAndExit = () => {\r\n    console.log(\r\n      `You need to run ${chalk.yellow(\r\n        `strapi ${name}`\r\n      )} in a Strapi project. Make sure you are in the right directory.`\r\n    );\r\n    process.exit(1);\r\n  };\r\n\r\n  try {\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    const pkgJSON = require(`${process.cwd()}/package.json`);\r\n    if (\r\n      !has('dependencies.@strapi/strapi', pkgJSON) &&\r\n      !has('devDependencies.@strapi/strapi', pkgJSON)\r\n    ) {\r\n      logErrorAndExit();\r\n    }\r\n  } catch (err) {\r\n    logErrorAndExit();\r\n  }\r\n};\r\n\r\nconst runAction =\r\n  (name: string, action: (...args: any[]) => Promise<unknown>) =>\r\n  (...args: unknown[]) => {\r\n    assertCwdContainsStrapiProject(name);\r\n\r\n    Promise.resolve()\r\n      .then(() => {\r\n        return action(...args);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        process.exit(1);\r\n      });\r\n  };\r\n\r\nexport { runAction };\r\n","import { createCommand } from 'commander';\r\nimport { type StrapiCloudCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ deploy project to the cloud`\r\n */\r\nconst command: StrapiCloudCommand = ({ ctx }) => {\r\n  return createCommand('cloud:deploy')\r\n    .alias('deploy')\r\n    .description('Deploy a Strapi Cloud project')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .option('-f, --force', 'Skip confirmation to deploy')\r\n    .option('-e, --env <name>', 'Specify the environment to deploy')\r\n    .action((opts) => runAction('deploy', action)(ctx, opts));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'deploy-project',\r\n  description: 'Deploy a Strapi Cloud project',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import chalk from 'chalk';\r\nimport type { CLIContext } from '../types';\r\nimport { local } from '../services';\r\nimport { LocalSave } from '../services/strapi-info-save';\r\n\r\nasync function getLocalConfig(ctx: CLIContext): Promise<LocalSave | null> {\r\n  try {\r\n    return await local.retrieve();\r\n  } catch (e) {\r\n    ctx.logger.debug('Failed to get project config', e);\r\n    ctx.logger.error('An error occurred while retrieving config data from your local project.');\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getLocalProject(ctx: CLIContext) {\r\n  const localConfig = await getLocalConfig(ctx);\r\n\r\n  if (!localConfig || !localConfig.project) {\r\n    ctx.logger.warn(\r\n      `\\nWe couldn't find a valid local project config.\\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\r\n        'link'\r\n      )} command.`\r\n    );\r\n    process.exit(1);\r\n  }\r\n  return localConfig.project;\r\n}\r\n\r\nexport { getLocalConfig, getLocalProject };\r\n","import inquirer from 'inquirer';\r\nimport chalk from 'chalk';\r\n\r\nimport type { Answers } from 'inquirer';\r\nimport type { CLIContext } from '../types';\r\nimport type { CloudApiService } from '../services/cli-api';\r\n\r\nimport { LocalSave } from '../services/strapi-info-save';\r\nimport { cloudApiFactory, tokenServiceFactory, local } from '../services';\r\nimport { promptLogin } from '../login/action';\r\nimport { trackEvent } from '../utils/analytics';\r\nimport { getLocalConfig } from '../utils/get-local-config';\r\n\r\nconst QUIT_OPTION = 'Quit';\r\n\r\ninterface LinkProjectValue {\r\n  name: string;\r\n  displayName: string;\r\n}\r\n\r\ninterface LinkProjectAnswer extends Answers {\r\n  linkProject: LinkProjectValue;\r\n}\r\n\r\ninterface LinkProjectInput extends Answers {\r\n  linkProject: LinkProjectValue | string;\r\n}\r\n\r\ntype ProjectsList = {\r\n  name: string;\r\n  value: {\r\n    name: string;\r\n    displayName: string;\r\n  };\r\n}[];\r\n\r\ntype Project = {\r\n  name: string;\r\n  displayName: string;\r\n  isMaintainer: boolean;\r\n};\r\n\r\nasync function promptForRelink(\r\n  ctx: CLIContext,\r\n  cloudApiService: CloudApiService,\r\n  existingConfig: LocalSave | null\r\n) {\r\n  if (existingConfig && existingConfig.project) {\r\n    const { shouldRelink } = await inquirer.prompt([\r\n      {\r\n        type: 'confirm',\r\n        name: 'shouldRelink',\r\n        message: `A project named ${chalk.cyan(\r\n          existingConfig.project.displayName\r\n            ? existingConfig.project.displayName\r\n            : existingConfig.project.name\r\n        )} is already linked to this local folder. Do you want to update the link?`,\r\n        default: false,\r\n      },\r\n    ]);\r\n\r\n    if (!shouldRelink) {\r\n      await trackEvent(ctx, cloudApiService, 'didNotLinkProject', {\r\n        currentProjectName: existingConfig.project?.name,\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nasync function getProjectsList(\r\n  ctx: CLIContext,\r\n  cloudApiService: CloudApiService,\r\n  existingConfig: LocalSave | null\r\n) {\r\n  const spinner = ctx.logger.spinner('Fetching your projects...\\n').start();\r\n\r\n  try {\r\n    const {\r\n      data: { data: projectList },\r\n    } = await cloudApiService.listLinkProjects();\r\n    spinner.succeed();\r\n\r\n    if (!Array.isArray(projectList)) {\r\n      ctx.logger.log(\"We couldn't find any projects available for linking in Strapi Cloud.\");\r\n      return null;\r\n    }\r\n    const projects: ProjectsList = (projectList as unknown as Project[])\r\n      .filter(\r\n        (project: Project) =>\r\n          !(project.isMaintainer || project.name === existingConfig?.project?.name)\r\n      )\r\n      .map((project: Project) => {\r\n        return {\r\n          name: project.displayName,\r\n          value: { name: project.name, displayName: project.displayName },\r\n        };\r\n      });\r\n    if (projects.length === 0) {\r\n      ctx.logger.log(\"We couldn't find any projects available for linking in Strapi Cloud.\");\r\n      return null;\r\n    }\r\n    return projects;\r\n  } catch (e) {\r\n    spinner.fail('An error occurred while fetching your projects from Strapi Cloud.');\r\n    ctx.logger.debug('Failed to list projects', e);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getUserSelection(\r\n  ctx: CLIContext,\r\n  projects: ProjectsList\r\n): Promise<LinkProjectAnswer | null> {\r\n  const { logger } = ctx;\r\n  try {\r\n    const answer: LinkProjectInput = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'linkProject',\r\n        message: 'Which project do you want to link?',\r\n        choices: [...projects, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\r\n      },\r\n    ]);\r\n\r\n    if (!answer.linkProject) {\r\n      return null;\r\n    }\r\n\r\n    return answer as LinkProjectAnswer;\r\n  } catch (e) {\r\n    logger.debug('Failed to get user input', e);\r\n    logger.error('An error occurred while trying to get your input.');\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default async (ctx: CLIContext) => {\r\n  const { getValidToken } = await tokenServiceFactory(ctx);\r\n  const token = await getValidToken(ctx, promptLogin);\r\n  const { logger } = ctx;\r\n\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  const cloudApiService = await cloudApiFactory(ctx, token);\r\n\r\n  const existingConfig: LocalSave | null = await getLocalConfig(ctx);\r\n  const shouldRelink = await promptForRelink(ctx, cloudApiService, existingConfig);\r\n\r\n  if (!shouldRelink) {\r\n    return;\r\n  }\r\n  await trackEvent(ctx, cloudApiService, 'willLinkProject', {});\r\n\r\n  const projects: ProjectsList | null | undefined = await getProjectsList(\r\n    ctx,\r\n    cloudApiService,\r\n    existingConfig\r\n  );\r\n\r\n  if (!projects) {\r\n    return;\r\n  }\r\n\r\n  const answer: LinkProjectAnswer | null = await getUserSelection(ctx, projects);\r\n\r\n  if (!answer) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const { confirmAction } = await inquirer.prompt([\r\n      {\r\n        type: 'confirm',\r\n        name: 'confirmAction',\r\n        message:\r\n          'Warning: Once linked, deploying from CLI will replace the existing project and its data. Confirm to proceed:',\r\n        default: false,\r\n      },\r\n    ]);\r\n\r\n    if (!confirmAction) {\r\n      await trackEvent(ctx, cloudApiService, 'didNotLinkProject', {\r\n        cancelledProjectName: answer.linkProject.name,\r\n        currentProjectName: existingConfig ? existingConfig.project?.name : null,\r\n      });\r\n      return;\r\n    }\r\n\r\n    await local.save({ project: answer.linkProject });\r\n    logger.log(\r\n      ` You have successfully linked your project to ${chalk.cyan(answer.linkProject.displayName)}. You are now able to deploy your project.`\r\n    );\r\n    await trackEvent(ctx, cloudApiService, 'didLinkProject', {\r\n      projectInternalName: answer.linkProject,\r\n    });\r\n  } catch (e) {\r\n    logger.debug('Failed to link project', e);\r\n    logger.error('An error occurred while linking the project.');\r\n    await trackEvent(ctx, cloudApiService, 'didNotLinkProject', {\r\n      projectInternalName: answer.linkProject,\r\n    });\r\n  }\r\n};\r\n","import { type StrapiCloudCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ link local directory to project of the cloud`\r\n */\r\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\r\n  command\r\n    .command('cloud:link')\r\n    .alias('link')\r\n    .description('Link a local directory to a Strapi Cloud project')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('link', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'link-project',\r\n  description: 'Link a local directory to a Strapi Cloud project',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import { createCommand } from 'commander';\r\nimport type { StrapiCloudCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ cloud device flow login`\r\n */\r\nconst command: StrapiCloudCommand = ({ ctx }) => {\r\n  return createCommand('cloud:login')\r\n    .alias('login')\r\n    .description('Strapi Cloud Login')\r\n    .addHelpText(\r\n      'after',\r\n      '\\nAfter running this command, you will be prompted to enter your authentication information.'\r\n    )\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('login', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'login',\r\n  description: 'Strapi Cloud Login',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import type { CLIContext } from '../types';\r\nimport { tokenServiceFactory, cloudApiFactory } from '../services';\r\nimport { trackEvent } from '../utils/analytics';\r\n\r\nconst openModule = import('open');\r\n\r\nexport default async (ctx: CLIContext) => {\r\n  const { logger } = ctx;\r\n  const { retrieveToken, eraseToken } = await tokenServiceFactory(ctx);\r\n\r\n  const token = await retrieveToken();\r\n  if (!token) {\r\n    logger.log(\"You're already logged out.\");\r\n    return;\r\n  }\r\n  const cloudApiService = await cloudApiFactory(ctx, token);\r\n  const config = await cloudApiService.config();\r\n  const cliConfig = config.data;\r\n\r\n  try {\r\n    await eraseToken();\r\n\r\n    openModule.then((open) => {\r\n      open\r\n        .default(\r\n          `${cliConfig.baseUrl}/oidc/logout?client_id=${encodeURIComponent(\r\n            cliConfig.clientId\r\n          )}&logout_hint=${encodeURIComponent(token)}\r\n          `\r\n        )\r\n        .catch((e: Error) => {\r\n          // Failing to open the logout URL is not a critical error, so we just log it\r\n          logger.debug(e.message, e);\r\n        });\r\n    });\r\n\r\n    logger.log(\r\n      '🔌 You have been logged out from the CLI. If you are on a shared computer, please make sure to log out from the Strapi Cloud Dashboard as well.'\r\n    );\r\n  } catch (e) {\r\n    logger.error('🥲 Oops! Something went wrong while logging you out. Please try again.');\r\n    logger.debug(e);\r\n  }\r\n  await trackEvent(ctx, cloudApiService, 'didLogout', { loginMethod: 'cli' });\r\n};\r\n","import { createCommand } from 'commander';\r\nimport type { StrapiCloudCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ cloud device flow logout`\r\n */\r\nconst command: StrapiCloudCommand = ({ ctx }) => {\r\n  return createCommand('cloud:logout')\r\n    .alias('logout')\r\n    .description('Strapi Cloud Logout')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('logout', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'logout',\r\n  description: 'Strapi Cloud Logout',\r\n  action,\r\n  command,\r\n};\r\n","import { createCommand } from 'commander';\r\nimport { type StrapiCloudCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ create project in Strapi cloud`\r\n */\r\nconst command: StrapiCloudCommand = ({ ctx }) => {\r\n  return createCommand('cloud:create-project')\r\n    .description('Create a Strapi Cloud project')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('cloud:create-project', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'create-project',\r\n  description: 'Create a new project',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import type { CLIContext } from '../types';\r\nimport { cloudApiFactory, tokenServiceFactory } from '../services';\r\nimport { promptLogin } from '../login/action';\r\n\r\nexport default async (ctx: CLIContext) => {\r\n  const { getValidToken } = await tokenServiceFactory(ctx);\r\n  const token = await getValidToken(ctx, promptLogin);\r\n  const { logger } = ctx;\r\n\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  const cloudApiService = await cloudApiFactory(ctx, token);\r\n  const spinner = logger.spinner('Fetching your projects...').start();\r\n\r\n  try {\r\n    const {\r\n      data: { data: projectList },\r\n    } = await cloudApiService.listProjects();\r\n    spinner.succeed();\r\n    logger.log(projectList);\r\n  } catch (e) {\r\n    ctx.logger.debug('Failed to list projects', e);\r\n    spinner.fail('An error occurred while fetching your projects from Strapi Cloud.');\r\n  }\r\n};\r\n","import { type StrapiCloudCommand } from '../types';\r\nimport { runAction } from '../utils/helpers';\r\nimport action from './action';\r\n\r\n/**\r\n * `$ list project from the cloud`\r\n */\r\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\r\n  command\r\n    .command('cloud:projects')\r\n    .alias('projects')\r\n    .description('List Strapi Cloud projects')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('projects', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'list-projects',\r\n  description: 'List Strapi Cloud projects',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import chalk from 'chalk';\r\nimport type { CLIContext } from '../../types';\r\nimport { cloudApiFactory, tokenServiceFactory } from '../../services';\r\nimport { promptLogin } from '../../login/action';\r\nimport { trackEvent } from '../../utils/analytics';\r\nimport { getLocalProject } from '../../utils/get-local-config';\r\n\r\nexport default async (ctx: CLIContext) => {\r\n  const { getValidToken } = await tokenServiceFactory(ctx);\r\n  const token = await getValidToken(ctx, promptLogin);\r\n  const { logger } = ctx;\r\n\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  const project = await getLocalProject(ctx);\r\n  if (!project) {\r\n    ctx.logger.debug(`No valid local project configuration was found.`);\r\n    return;\r\n  }\r\n\r\n  const cloudApiService = await cloudApiFactory(ctx, token);\r\n  const spinner = logger.spinner('Fetching environments...').start();\r\n  await trackEvent(ctx, cloudApiService, 'willListEnvironment', {\r\n    projectInternalName: project.name,\r\n  });\r\n\r\n  try {\r\n    const {\r\n      data: { data: environmentsList },\r\n    } = await cloudApiService.listEnvironments({ name: project.name });\r\n    spinner.succeed();\r\n    logger.log(environmentsList);\r\n    await trackEvent(ctx, cloudApiService, 'didListEnvironment', {\r\n      projectInternalName: project.name,\r\n    });\r\n  } catch (e: any) {\r\n    if (e.response && e.response.status === 404) {\r\n      spinner.succeed();\r\n      logger.warn(\r\n        `\\nThe project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\r\n          'link'\r\n        )} command`\r\n      );\r\n    } else {\r\n      spinner.fail('An error occurred while fetching environments data from Strapi Cloud.');\r\n      logger.debug('Failed to list environments', e);\r\n    }\r\n    await trackEvent(ctx, cloudApiService, 'didNotListEnvironment', {\r\n      projectInternalName: project.name,\r\n    });\r\n  }\r\n};\r\n","import { Command } from 'commander';\r\nimport { runAction } from '../utils/helpers';\r\nimport listAction from '../environment/list/action';\r\n\r\nexport function defineCloudNamespace(command: Command, ctx: unknown): Command {\r\n  const cloud = command.command('cloud').description('Manage Strapi Cloud projects');\r\n\r\n  // Define cloud namespace aliases:\r\n  cloud\r\n    .command('environments')\r\n    .description('Alias for cloud environment list')\r\n    .action(() => runAction('list', listAction)(ctx));\r\n  return cloud;\r\n}\r\n","import { Command } from 'commander';\r\nimport { defineCloudNamespace } from '../cloud/command';\r\n\r\nlet environmentCmd: Command | null = null;\r\n\r\nexport const initializeEnvironmentCommand = (command: Command, ctx: unknown): Command => {\r\n  if (!environmentCmd) {\r\n    const cloud = defineCloudNamespace(command, ctx);\r\n    environmentCmd = cloud.command('environment').description('Manage environments');\r\n  }\r\n  return environmentCmd;\r\n};\r\n","import { type StrapiCloudCommand } from '../../types';\r\nimport { runAction } from '../../utils/helpers';\r\nimport action from './action';\r\nimport { initializeEnvironmentCommand } from '../command';\r\n\r\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\r\n  const environmentCmd = initializeEnvironmentCommand(command, ctx);\r\n\r\n  environmentCmd\r\n    .command('list')\r\n    .description('List Strapi Cloud project environments')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('list', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'list-environments',\r\n  description: 'List Strapi Cloud environments',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import chalk from 'chalk';\r\nimport inquirer, { type Answers } from 'inquirer';\r\nimport { EnvironmentDetails, ProjectInput } from '../../services/cli-api';\r\nimport type { CLIContext, CloudApiService } from '../../types';\r\nimport { cloudApiFactory, tokenServiceFactory, local } from '../../services';\r\nimport { promptLogin } from '../../login/action';\r\nimport { trackEvent } from '../../utils/analytics';\r\nimport { getLocalProject } from '../../utils/get-local-config';\r\n\r\nconst QUIT_OPTION = 'Quit';\r\n\r\ninterface LinkEnvironmentAnswer extends Answers {\r\n  targetEnvironment: string;\r\n}\r\n\r\ninterface LinkEnvironmentInput extends Answers {\r\n  targetEnvironment: string;\r\n}\r\n\r\ntype EnvironmentsList = EnvironmentDetails[];\r\n\r\nexport default async (ctx: CLIContext) => {\r\n  const { getValidToken } = await tokenServiceFactory(ctx);\r\n  const token = await getValidToken(ctx, promptLogin);\r\n  const { logger } = ctx;\r\n\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  const project = await getLocalProject(ctx);\r\n\r\n  if (!project) {\r\n    logger.debug(`No valid local project configuration was found.`);\r\n    return;\r\n  }\r\n\r\n  const cloudApiService = await cloudApiFactory(ctx, token);\r\n  const environments = await getEnvironmentsList(ctx, cloudApiService, project);\r\n\r\n  if (!environments) {\r\n    logger.debug(`Fetching environments failed.`);\r\n    return;\r\n  }\r\n\r\n  if (environments.length === 0) {\r\n    logger.log(\r\n      `The only available environment is already linked. You can add a new one from your project settings on the Strapi Cloud dashboard.`\r\n    );\r\n    return;\r\n  }\r\n\r\n  const answer: LinkEnvironmentAnswer | null = await promptUserForEnvironment(ctx, environments);\r\n\r\n  if (!answer) {\r\n    return;\r\n  }\r\n\r\n  await trackEvent(ctx, cloudApiService, 'willLinkEnvironment', {\r\n    projectName: project.name,\r\n    environmentName: answer.targetEnvironment,\r\n  });\r\n\r\n  try {\r\n    await local.patch({ project: { targetEnvironment: answer.targetEnvironment } });\r\n  } catch (e) {\r\n    await trackEvent(ctx, cloudApiService, 'didNotLinkEnvironment', {\r\n      projectName: project.name,\r\n      environmentName: answer.targetEnvironment,\r\n    });\r\n    logger.debug('Failed to link environment', e);\r\n    logger.error(\r\n      'Failed to link the environment. If this issue persists, try re-linking your project or contact support.'\r\n    );\r\n    process.exit(1);\r\n  }\r\n\r\n  logger.log(\r\n    ` You have successfully linked your project to ${chalk.cyan(answer.targetEnvironment)}, on ${chalk.cyan(project.displayName)}. You are now able to deploy your project.`\r\n  );\r\n  await trackEvent(ctx, cloudApiService, 'didLinkEnvironment', {\r\n    projectName: project.name,\r\n    environmentName: answer.targetEnvironment,\r\n  });\r\n};\r\n\r\nasync function promptUserForEnvironment(\r\n  ctx: CLIContext,\r\n  environments: EnvironmentsList\r\n): Promise<LinkEnvironmentAnswer | null> {\r\n  const { logger } = ctx;\r\n\r\n  try {\r\n    const answer: LinkEnvironmentInput = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'targetEnvironment',\r\n        message: 'Which environment do you want to link?',\r\n        choices: [...environments, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\r\n      },\r\n    ]);\r\n\r\n    if (!answer.targetEnvironment) {\r\n      return null;\r\n    }\r\n\r\n    return answer;\r\n  } catch (e) {\r\n    logger.debug('Failed to get user input', e);\r\n    logger.error('An error occurred while trying to get your environment selection.');\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getEnvironmentsList(\r\n  ctx: CLIContext,\r\n  cloudApiService: CloudApiService,\r\n  project: ProjectInput\r\n) {\r\n  const spinner = ctx.logger.spinner('Fetching environments...\\n').start();\r\n\r\n  try {\r\n    const {\r\n      data: { data: environmentsList },\r\n    } = await cloudApiService.listLinkEnvironments({ name: project.name });\r\n\r\n    if (!Array.isArray(environmentsList) || environmentsList.length === 0) {\r\n      throw new Error('Environments not found in server response');\r\n    }\r\n    spinner.succeed();\r\n    return environmentsList.filter(\r\n      (environment: EnvironmentDetails) => environment.name !== project.targetEnvironment\r\n    );\r\n  } catch (e: any) {\r\n    if (e.response && e.response.status === 404) {\r\n      spinner.succeed();\r\n      ctx.logger.warn(\r\n        `\\nThe project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\r\n          'link'\r\n        )} command.`\r\n      );\r\n    } else {\r\n      spinner.fail('An error occurred while fetching environments data from Strapi Cloud.');\r\n      ctx.logger.debug('Failed to list environments', e);\r\n    }\r\n  }\r\n}\r\n","import { type StrapiCloudCommand } from '../../types';\r\nimport { runAction } from '../../utils/helpers';\r\nimport action from './action';\r\nimport { initializeEnvironmentCommand } from '../command';\r\n\r\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\r\n  const environmentCmd = initializeEnvironmentCommand(command, ctx);\r\n\r\n  environmentCmd\r\n    .command('link')\r\n    .description('Link project to a specific Strapi Cloud project environment')\r\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\r\n    .option('-s, --silent', \"Don't log anything\")\r\n    .action(() => runAction('link', action)(ctx));\r\n};\r\n\r\nexport default command;\r\n","import action from './action';\r\nimport command from './command';\r\nimport type { StrapiCloudCommandInfo } from '../../types';\r\n\r\nexport { action, command };\r\n\r\nexport default {\r\n  name: 'link-environment',\r\n  description: 'Link Strapi Cloud environment to a local project',\r\n  action,\r\n  command,\r\n} as StrapiCloudCommandInfo;\r\n","import { Command } from 'commander';\r\nimport crypto from 'crypto';\r\nimport deployProject from './deploy-project';\r\nimport link from './link';\r\nimport login from './login';\r\nimport logout from './logout';\r\nimport createProject from './create-project';\r\nimport listProjects from './list-projects';\r\nimport listEnvironments from './environment/list';\r\nimport linkEnvironment from './environment/link';\r\nimport { CLIContext } from './types';\r\nimport { getLocalConfig, saveLocalConfig } from './config/local';\r\n\r\nexport const cli = {\r\n  deployProject,\r\n  link,\r\n  login,\r\n  logout,\r\n  createProject,\r\n  linkEnvironment,\r\n  listProjects,\r\n  listEnvironments,\r\n};\r\n\r\nconst cloudCommands = [\r\n  deployProject,\r\n  link,\r\n  login,\r\n  logout,\r\n  linkEnvironment,\r\n  listProjects,\r\n  listEnvironments,\r\n];\r\n\r\nasync function initCloudCLIConfig() {\r\n  const localConfig = await getLocalConfig();\r\n\r\n  if (!localConfig.deviceId) {\r\n    localConfig.deviceId = crypto.randomUUID();\r\n  }\r\n\r\n  await saveLocalConfig(localConfig);\r\n}\r\n\r\nexport async function buildStrapiCloudCommands({\r\n  command,\r\n  ctx,\r\n  argv,\r\n}: {\r\n  command: Command;\r\n  ctx: CLIContext;\r\n  argv: string[];\r\n}) {\r\n  await initCloudCLIConfig();\r\n  // Load all commands\r\n  for (const cloudCommand of cloudCommands) {\r\n    try {\r\n      // Add this command to the Commander command object\r\n      const subCommand = await cloudCommand.command({ command, ctx, argv });\r\n\r\n      if (subCommand) {\r\n        command.addCommand(subCommand);\r\n      }\r\n    } catch (e) {\r\n      console.error(`Failed to load command ${cloudCommand.name}`, e);\r\n    }\r\n  }\r\n}\r\n\r\nexport * as services from './services';\r\n\r\nexport * from './types';\r\n"],"names":["fse","path","getLocalConfig","name","loginAction","value","packageJson","openModule","cliConfig","choice","createProject","local.save","url","QUIT_OPTION","env","local.retrieve","createProjectAction","action","command","listAction","environmentCmd","local.patch","crypto"],"mappings":"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"}