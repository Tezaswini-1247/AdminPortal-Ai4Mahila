{"version":3,"file":"query.js","sources":["../../src/middlewares/query.ts"],"sourcesContent":["import qs from 'qs';\r\nimport type Koa from 'koa';\r\nimport type { Core } from '@strapi/types';\r\n\r\ntype Config = Parameters<typeof qs.parse>[1];\r\n\r\nconst defaults: Config = {\r\n  strictNullHandling: true,\r\n  arrayLimit: 100,\r\n  depth: 20,\r\n};\r\n\r\n/**\r\n * Body parser hook\r\n */\r\nconst addQsParser = (app: Koa, settings: Config) => {\r\n  Object.defineProperty(app.request, 'query', {\r\n    configurable: false,\r\n    enumerable: true,\r\n    /*\r\n     * Get parsed query-string.\r\n     */\r\n    get() {\r\n      const qstr = this.querystring;\r\n\r\n      this._querycache = this._querycache || {};\r\n      const cache = this._querycache;\r\n\r\n      if (!cache[qstr]) {\r\n        cache[qstr] = qs.parse(qstr, settings);\r\n      }\r\n\r\n      return cache[qstr];\r\n    },\r\n\r\n    /*\r\n     * Set query-string as an object.\r\n     */\r\n    set(obj) {\r\n      this.querystring = qs.stringify(obj);\r\n    },\r\n  } satisfies PropertyDescriptor & ThisType<Koa.BaseRequest>);\r\n\r\n  return app;\r\n};\r\n\r\nexport const query: Core.MiddlewareFactory = (\r\n  config: Partial<Config>,\r\n  { strapi }: { strapi: Core.Strapi }\r\n) => {\r\n  addQsParser(strapi.server.app, { ...defaults, ...config } as Config);\r\n};\r\n"],"names":["qs"],"mappings":";;;;;AAMA,MAAM,WAAmB;AAAA,EACvB,oBAAoB;AAAA,EACpB,YAAY;AAAA,EACZ,OAAO;AACT;AAKA,MAAM,cAAc,CAAC,KAAU,aAAqB;AAC3C,SAAA,eAAe,IAAI,SAAS,SAAS;AAAA,IAC1C,cAAc;AAAA,IACd,YAAY;AAAA;AAAA;AAAA;AAAA,IAIZ,MAAM;AACJ,YAAM,OAAO,KAAK;AAEb,WAAA,cAAc,KAAK,eAAe,CAAC;AACxC,YAAM,QAAQ,KAAK;AAEf,UAAA,CAAC,MAAM,IAAI,GAAG;AAChB,cAAM,IAAI,IAAIA,YAAAA,QAAG,MAAM,MAAM,QAAQ;AAAA,MAAA;AAGvC,aAAO,MAAM,IAAI;AAAA,IACnB;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAK;AACF,WAAA,cAAcA,oBAAG,UAAU,GAAG;AAAA,IAAA;AAAA,EACrC,CACwD;AAEnD,SAAA;AACT;AAEO,MAAM,QAAgC,CAC3C,QACA,EAAE,aACC;AACS,cAAA,OAAO,OAAO,KAAK,EAAE,GAAG,UAAU,GAAG,QAAkB;AACrE;;"}