{"version":3,"file":"factories.js","sources":["../src/factories.ts"],"sourcesContent":["import { pipe, omit, pick } from 'lodash/fp';\r\nimport type { Core, UID, Utils } from '@strapi/types';\r\n\r\nimport { createController } from './core-api/controller';\r\nimport { createService } from './core-api/service';\r\nimport { createRoutes } from './core-api/routes';\r\n\r\nconst symbols = {\r\n  CustomController: Symbol('StrapiCustomCoreController'),\r\n} as const;\r\n\r\ntype WithStrapiCallback<T> = T | (<S extends { strapi: Core.Strapi }>(params: S) => T);\r\n\r\nconst createCoreController = <\r\n  TUID extends UID.ContentType,\r\n  TController extends Core.CoreAPI.Controller.Extendable<TUID>,\r\n>(\r\n  uid: TUID,\r\n  cfg?: WithStrapiCallback<\r\n    Utils.PartialWithThis<Core.CoreAPI.Controller.Extendable<TUID> & TController>\r\n  >\r\n) => {\r\n  return ({\r\n    strapi,\r\n  }: {\r\n    strapi: Core.Strapi;\r\n  }): TController & Core.CoreAPI.Controller.ContentType<TUID> => {\r\n    const baseController = createController({ contentType: strapi.contentType(uid) });\r\n\r\n    const userCtrl = typeof cfg === 'function' ? cfg({ strapi }) : (cfg ?? ({} as any));\r\n\r\n    for (const methodName of Object.keys(baseController) as Array<keyof typeof baseController>) {\r\n      if (userCtrl[methodName] === undefined) {\r\n        userCtrl[methodName] = baseController[methodName];\r\n      }\r\n    }\r\n\r\n    Object.setPrototypeOf(userCtrl, baseController);\r\n\r\n    const isCustom = typeof cfg !== 'undefined';\r\n    if (isCustom) {\r\n      Object.defineProperty(userCtrl, symbols.CustomController, {\r\n        writable: false,\r\n        configurable: false,\r\n        enumerable: false,\r\n      });\r\n    }\r\n\r\n    return userCtrl;\r\n  };\r\n};\r\n\r\nfunction createCoreService<\r\n  TUID extends UID.ContentType,\r\n  TService extends Core.CoreAPI.Service.Extendable<TUID>,\r\n>(\r\n  uid: TUID,\r\n  cfg?: WithStrapiCallback<Utils.PartialWithThis<Core.CoreAPI.Service.Extendable<TUID> & TService>>\r\n) {\r\n  return ({\r\n    strapi,\r\n  }: {\r\n    strapi: Core.Strapi;\r\n  }): TService & Core.CoreAPI.Service.ContentType<TUID> => {\r\n    const baseService = createService({ contentType: strapi.contentType(uid) });\r\n\r\n    const userService = typeof cfg === 'function' ? cfg({ strapi }) : (cfg ?? ({} as any));\r\n\r\n    for (const methodName of Object.keys(baseService) as Array<keyof typeof baseService>) {\r\n      if (userService[methodName] === undefined) {\r\n        userService[methodName] = baseService[methodName];\r\n      }\r\n    }\r\n\r\n    Object.setPrototypeOf(userService, baseService);\r\n    return userService;\r\n  };\r\n}\r\n\r\nfunction createCoreRouter<T extends UID.ContentType>(\r\n  uid: T,\r\n  cfg?: Core.CoreAPI.Router.RouterConfig<T>\r\n): Core.CoreAPI.Router.Router {\r\n  const { prefix, config = {}, only, except, type = 'content-api' } = cfg ?? {};\r\n  let routes: Core.CoreAPI.Router.Route[];\r\n\r\n  return {\r\n    type,\r\n    prefix,\r\n    get routes() {\r\n      if (!routes) {\r\n        const contentType = strapi.contentType(uid);\r\n\r\n        const defaultRoutes = createRoutes({ contentType });\r\n        const keys = Object.keys(defaultRoutes) as Array<keyof typeof defaultRoutes>;\r\n\r\n        keys.forEach((routeName) => {\r\n          const defaultRoute = defaultRoutes[routeName];\r\n\r\n          Object.assign(defaultRoute.config, config[routeName] || {});\r\n        });\r\n\r\n        const selectedRoutes = pipe(\r\n          (routes) => (except ? omit(except, routes) : routes),\r\n          (routes) => (only ? pick(only, routes) : routes)\r\n        )(defaultRoutes);\r\n\r\n        routes = Object.values(selectedRoutes);\r\n      }\r\n\r\n      return routes;\r\n    },\r\n  };\r\n}\r\n\r\nconst isCustomController = <T extends Core.Controller>(controller: T): boolean => {\r\n  return symbols.CustomController in controller;\r\n};\r\n\r\nexport { createCoreController, createCoreService, createCoreRouter, isCustomController };\r\n"],"names":["strapi","createController","createService","createRoutes","pipe","routes","omit","pick"],"mappings":";;;;;;AAOA,MAAM,UAAU;AAAA,EACd,kBAAkB,OAAO,4BAA4B;AACvD;AAIM,MAAA,uBAAuB,CAI3B,KACA,QAGG;AACH,SAAO,CAAC;AAAA,IACN,QAAAA;AAAAA,EAAA,MAG6D;AACvD,UAAA,iBAAiBC,MAAAA,iBAAiB,EAAE,aAAaD,QAAO,YAAY,GAAG,GAAG;AAE1E,UAAA,WAAW,OAAO,QAAQ,aAAa,IAAI,EAAE,QAAAA,QAAO,CAAC,IAAK,OAAQ,CAAC;AAEzE,eAAW,cAAc,OAAO,KAAK,cAAc,GAAyC;AACtF,UAAA,SAAS,UAAU,MAAM,QAAW;AAC7B,iBAAA,UAAU,IAAI,eAAe,UAAU;AAAA,MAAA;AAAA,IAClD;AAGK,WAAA,eAAe,UAAU,cAAc;AAExC,UAAA,WAAW,OAAO,QAAQ;AAChC,QAAI,UAAU;AACL,aAAA,eAAe,UAAU,QAAQ,kBAAkB;AAAA,QACxD,UAAU;AAAA,QACV,cAAc;AAAA,QACd,YAAY;AAAA,MAAA,CACb;AAAA,IAAA;AAGI,WAAA;AAAA,EACT;AACF;AAEA,SAAS,kBAIP,KACA,KACA;AACA,SAAO,CAAC;AAAA,IACN,QAAAA;AAAAA,EAAA,MAGuD;AACjD,UAAA,cAAcE,QAAAA,cAAc,EAAE,aAAaF,QAAO,YAAY,GAAG,GAAG;AAEpE,UAAA,cAAc,OAAO,QAAQ,aAAa,IAAI,EAAE,QAAAA,QAAO,CAAC,IAAK,OAAQ,CAAC;AAE5E,eAAW,cAAc,OAAO,KAAK,WAAW,GAAsC;AAChF,UAAA,YAAY,UAAU,MAAM,QAAW;AAC7B,oBAAA,UAAU,IAAI,YAAY,UAAU;AAAA,MAAA;AAAA,IAClD;AAGK,WAAA,eAAe,aAAa,WAAW;AACvC,WAAA;AAAA,EACT;AACF;AAEA,SAAS,iBACP,KACA,KAC4B;AACtB,QAAA,EAAE,QAAQ,SAAS,IAAI,MAAM,QAAQ,OAAO,kBAAkB,OAAO,CAAC;AACxE,MAAA;AAEG,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,IAAI,SAAS;AACX,UAAI,CAAC,QAAQ;AACL,cAAA,cAAc,OAAO,YAAY,GAAG;AAE1C,cAAM,gBAAgBG,QAAAA,aAAa,EAAE,aAAa;AAC5C,cAAA,OAAO,OAAO,KAAK,aAAa;AAEjC,aAAA,QAAQ,CAAC,cAAc;AACpB,gBAAA,eAAe,cAAc,SAAS;AAE5C,iBAAO,OAAO,aAAa,QAAQ,OAAO,SAAS,KAAK,EAAE;AAAA,QAAA,CAC3D;AAED,cAAM,iBAAiBC,GAAA;AAAA,UACrB,CAACC,YAAY,SAASC,GAAAA,KAAK,QAAQD,OAAM,IAAIA;AAAAA,UAC7C,CAACA,YAAY,OAAOE,GAAK,KAAA,MAAMF,OAAM,IAAIA;AAAAA,UACzC,aAAa;AAEN,iBAAA,OAAO,OAAO,cAAc;AAAA,MAAA;AAGhC,aAAA;AAAA,IAAA;AAAA,EAEX;AACF;AAEM,MAAA,qBAAqB,CAA4B,eAA2B;AAChF,SAAO,QAAQ,oBAAoB;AACrC;;;;;"}