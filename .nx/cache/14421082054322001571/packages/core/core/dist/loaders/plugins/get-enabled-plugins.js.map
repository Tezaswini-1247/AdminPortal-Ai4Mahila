{"version":3,"file":"get-enabled-plugins.js","sources":["../../../src/loaders/plugins/get-enabled-plugins.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\r\nimport { dirname, join, resolve } from 'path';\r\nimport { statSync, existsSync } from 'fs';\r\nimport _ from 'lodash';\r\nimport { get, pickBy, defaultsDeep, map, prop, pipe } from 'lodash/fp';\r\nimport { strings } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\nimport { getUserPluginsConfig } from './get-user-plugins-config';\r\n\r\ninterface PluginMeta {\r\n  enabled: boolean;\r\n  pathToPlugin?: string;\r\n  info: Record<string, unknown>;\r\n  packageInfo?: Record<string, unknown>;\r\n}\r\n\r\ntype PluginMetas = Record<string, PluginMeta>;\r\n\r\ninterface PluginInfo {\r\n  name: string;\r\n  kind: string;\r\n}\r\n\r\ninterface PluginDeclaration {\r\n  enabled: boolean;\r\n  resolve: string;\r\n  isModule: boolean;\r\n}\r\n\r\n/**\r\n * otherwise known as \"core features\"\r\n *\r\n * NOTE: These are excluded from the content manager plugin list, as they are always enabled.\r\n *       See admin.ts server controller on the content-manager plugin for more details.\r\n */\r\nconst INTERNAL_PLUGINS = [\r\n  '@strapi/content-manager',\r\n  '@strapi/content-type-builder',\r\n  '@strapi/email',\r\n  '@strapi/upload',\r\n  '@strapi/i18n',\r\n  '@strapi/content-releases',\r\n  '@strapi/review-workflows',\r\n];\r\n\r\nconst isStrapiPlugin = (info: PluginInfo) => get('strapi.kind', info) === 'plugin';\r\n\r\nconst validatePluginName = (pluginName: string) => {\r\n  if (!strings.isKebabCase(pluginName)) {\r\n    throw new Error(`Plugin name \"${pluginName}\" is not in kebab (an-example-of-kebab-case)`);\r\n  }\r\n};\r\n\r\nconst toDetailedDeclaration = (declaration: boolean | PluginDeclaration) => {\r\n  if (typeof declaration === 'boolean') {\r\n    return { enabled: declaration };\r\n  }\r\n\r\n  const detailedDeclaration: { enabled: boolean; pathToPlugin?: string } = {\r\n    enabled: declaration.enabled,\r\n  };\r\n\r\n  if (declaration?.resolve) {\r\n    let pathToPlugin = '';\r\n\r\n    if (declaration.isModule) {\r\n      /**\r\n       * we only want the node_module here, not the package.json\r\n       */\r\n      pathToPlugin = join(declaration.resolve, '..');\r\n    } else {\r\n      try {\r\n        pathToPlugin = dirname(require.resolve(declaration.resolve));\r\n      } catch (e) {\r\n        pathToPlugin = resolve(strapi.dirs.app.root, declaration.resolve);\r\n\r\n        if (!existsSync(pathToPlugin) || !statSync(pathToPlugin).isDirectory()) {\r\n          throw new Error(`${declaration.resolve} couldn't be resolved`);\r\n        }\r\n      }\r\n    }\r\n\r\n    detailedDeclaration.pathToPlugin = pathToPlugin;\r\n  }\r\n\r\n  return detailedDeclaration;\r\n};\r\n\r\nexport const getEnabledPlugins = async (strapi: Core.Strapi, { client } = { client: false }) => {\r\n  const internalPlugins: PluginMetas = {};\r\n\r\n  for (const dep of INTERNAL_PLUGINS) {\r\n    const packagePath = join(dep, 'package.json');\r\n\r\n    // NOTE: internal plugins should be resolved from the strapi package\r\n    const packageModulePath = require.resolve(packagePath, {\r\n      paths: [require.resolve('@strapi/strapi/package.json'), process.cwd()],\r\n    });\r\n\r\n    const packageInfo = require(packageModulePath);\r\n\r\n    validatePluginName(packageInfo.strapi.name);\r\n    internalPlugins[packageInfo.strapi.name] = {\r\n      ...toDetailedDeclaration({ enabled: true, resolve: packageModulePath, isModule: client }),\r\n      info: packageInfo.strapi,\r\n      packageInfo,\r\n    };\r\n  }\r\n\r\n  const installedPlugins: PluginMetas = {};\r\n  const dependencies = strapi.config.get('info.dependencies', {});\r\n\r\n  for (const dep of Object.keys(dependencies)) {\r\n    const packagePath = join(dep, 'package.json');\r\n    let packageInfo;\r\n    try {\r\n      packageInfo = require(packagePath);\r\n    } catch {\r\n      continue;\r\n    }\r\n\r\n    if (isStrapiPlugin(packageInfo)) {\r\n      validatePluginName(packageInfo.strapi.name);\r\n      installedPlugins[packageInfo.strapi.name] = {\r\n        ...toDetailedDeclaration({ enabled: true, resolve: packagePath, isModule: client }),\r\n        info: {\r\n          ...packageInfo.strapi,\r\n          packageName: packageInfo.name,\r\n        },\r\n        packageInfo,\r\n      };\r\n    }\r\n  }\r\n\r\n  const declaredPlugins: PluginMetas = {};\r\n  const userPluginsConfig = await getUserPluginsConfig();\r\n\r\n  _.forEach(userPluginsConfig, (declaration, pluginName) => {\r\n    validatePluginName(pluginName);\r\n\r\n    declaredPlugins[pluginName] = {\r\n      ...toDetailedDeclaration(declaration),\r\n      info: {},\r\n    };\r\n\r\n    const { pathToPlugin } = declaredPlugins[pluginName];\r\n\r\n    // for manually resolved plugins\r\n    if (pathToPlugin) {\r\n      const packagePath = join(pathToPlugin, 'package.json');\r\n      const packageInfo = require(packagePath);\r\n\r\n      if (isStrapiPlugin(packageInfo)) {\r\n        declaredPlugins[pluginName].info = packageInfo.strapi || {};\r\n        declaredPlugins[pluginName].packageInfo = packageInfo;\r\n      }\r\n    }\r\n  });\r\n\r\n  const declaredPluginsResolves = map(prop('pathToPlugin'), declaredPlugins);\r\n  const installedPluginsNotAlreadyUsed = pickBy(\r\n    (p) => !declaredPluginsResolves.includes(p.pathToPlugin),\r\n    installedPlugins\r\n  );\r\n\r\n  const enabledPlugins = pipe(\r\n    defaultsDeep(declaredPlugins),\r\n    defaultsDeep(installedPluginsNotAlreadyUsed),\r\n    pickBy((p: PluginMeta) => p.enabled)\r\n  )(internalPlugins);\r\n\r\n  return enabledPlugins;\r\n};\r\n"],"names":["get","strings","join","dirname","resolve","existsSync","statSync","strapi","getUserPluginsConfig","_","map","prop","pickBy","pipe","defaultsDeep"],"mappings":"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"}