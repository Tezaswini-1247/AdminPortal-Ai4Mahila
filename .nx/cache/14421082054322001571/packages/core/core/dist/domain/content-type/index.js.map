{"version":3,"file":"index.js","sources":["../../../src/domain/content-type/index.ts"],"sourcesContent":["import { cloneDeep } from 'lodash/fp';\r\nimport _ from 'lodash';\r\nimport { yup, contentTypes as contentTypesUtils } from '@strapi/utils';\r\nimport type { Schema } from '@strapi/types';\r\nimport { validateContentTypeDefinition } from './validator';\r\n\r\nexport type ContentTypeDefinition = {\r\n  schema: Schema.ContentType;\r\n  actions: Record<string, unknown>;\r\n  lifecycles: Record<string, unknown>;\r\n};\r\n\r\nconst {\r\n  CREATED_AT_ATTRIBUTE,\r\n  UPDATED_AT_ATTRIBUTE,\r\n  PUBLISHED_AT_ATTRIBUTE,\r\n  CREATED_BY_ATTRIBUTE,\r\n  UPDATED_BY_ATTRIBUTE,\r\n} = contentTypesUtils.constants;\r\n\r\nconst createContentType = (uid: string, definition: ContentTypeDefinition) => {\r\n  try {\r\n    validateContentTypeDefinition(definition);\r\n  } catch (e) {\r\n    if (e instanceof yup.ValidationError) {\r\n      throw new Error(`Content Type Definition is invalid for ${uid}'.\\n${e.errors}`);\r\n    }\r\n\r\n    throw e;\r\n  }\r\n\r\n  const { schema, actions, lifecycles } = cloneDeep(definition);\r\n\r\n  // general info\r\n  Object.assign(schema, {\r\n    uid,\r\n    modelType: 'contentType',\r\n    kind: schema.kind || 'collectionType',\r\n    __schema__: pickSchema(definition.schema),\r\n    modelName: definition.schema.info.singularName,\r\n    actions,\r\n    lifecycles,\r\n  });\r\n\r\n  addTimestamps(schema);\r\n\r\n  // Published at is added regardless of draft and publish being enabled\r\n  // In case it is not enabled, value will be always published, and it will not contain a draft\r\n  addDraftAndPublish(schema);\r\n\r\n  addCreatorFields(schema);\r\n\r\n  return schema;\r\n};\r\n\r\nconst addTimestamps = (schema: Schema.ContentType) => {\r\n  // attributes\r\n  Object.assign(schema.attributes, {\r\n    [CREATED_AT_ATTRIBUTE]: {\r\n      type: 'datetime',\r\n    },\r\n    // TODO: handle on edit set to new date\r\n    [UPDATED_AT_ATTRIBUTE]: {\r\n      type: 'datetime',\r\n    },\r\n  });\r\n};\r\n\r\nconst addDraftAndPublish = (schema: Schema.ContentType) => {\r\n  if (!_.has(schema, 'options.draftAndPublish')) {\r\n    _.set(schema, 'options.draftAndPublish', false); // Disabled by default\r\n  }\r\n\r\n  schema.attributes[PUBLISHED_AT_ATTRIBUTE] = {\r\n    type: 'datetime',\r\n    configurable: false,\r\n    writable: true,\r\n    visible: false,\r\n    default() {\r\n      return new Date();\r\n    },\r\n  };\r\n};\r\n\r\nconst addCreatorFields = (schema: Schema.ContentType) => {\r\n  const isPrivate = !_.get(schema, 'options.populateCreatorFields', false);\r\n\r\n  schema.attributes[CREATED_BY_ATTRIBUTE] = {\r\n    type: 'relation',\r\n    relation: 'oneToOne',\r\n    target: 'admin::user',\r\n    configurable: false,\r\n    writable: false,\r\n    visible: false,\r\n    useJoinTable: false,\r\n    private: isPrivate,\r\n  };\r\n\r\n  schema.attributes[UPDATED_BY_ATTRIBUTE] = {\r\n    type: 'relation',\r\n    relation: 'oneToOne',\r\n    target: 'admin::user',\r\n    configurable: false,\r\n    writable: false,\r\n    visible: false,\r\n    useJoinTable: false,\r\n    private: isPrivate,\r\n  };\r\n};\r\n\r\nconst getGlobalId = (schema: Schema.ContentType, prefix?: string) => {\r\n  const modelName = schema.info.singularName;\r\n  const globalId = prefix ? `${prefix}-${modelName}` : modelName;\r\n\r\n  return schema.globalId || _.upperFirst(_.camelCase(globalId));\r\n};\r\n\r\nconst pickSchema = (model: Schema.ContentType) => {\r\n  const schema = _.cloneDeep(\r\n    _.pick(model, [\r\n      'connection',\r\n      'collectionName',\r\n      'info',\r\n      'options',\r\n      'pluginOptions',\r\n      'attributes',\r\n      'kind',\r\n    ])\r\n  );\r\n\r\n  schema.kind = model.kind || 'collectionType';\r\n  return schema;\r\n};\r\n\r\nexport { createContentType, getGlobalId };\r\n"],"names":["contentTypesUtils","validateContentTypeDefinition","yup","cloneDeep","_"],"mappings":";;;;;;;;AAYA,MAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAIA,YAAkB,aAAA;AAEhB,MAAA,oBAAoB,CAAC,KAAa,eAAsC;AACxE,MAAA;AACFC,cAAAA,8BAA8B,UAAU;AAAA,WACjC,GAAG;AACN,QAAA,aAAaC,gBAAI,iBAAiB;AAC9B,YAAA,IAAI,MAAM,0CAA0C,GAAG;AAAA,EAAO,EAAE,MAAM,EAAE;AAAA,IAAA;AAG1E,UAAA;AAAA,EAAA;AAGR,QAAM,EAAE,QAAQ,SAAS,WAAW,IAAIC,GAAAA,UAAU,UAAU;AAG5D,SAAO,OAAO,QAAQ;AAAA,IACpB;AAAA,IACA,WAAW;AAAA,IACX,MAAM,OAAO,QAAQ;AAAA,IACrB,YAAY,WAAW,WAAW,MAAM;AAAA,IACxC,WAAW,WAAW,OAAO,KAAK;AAAA,IAClC;AAAA,IACA;AAAA,EAAA,CACD;AAED,gBAAc,MAAM;AAIpB,qBAAmB,MAAM;AAEzB,mBAAiB,MAAM;AAEhB,SAAA;AACT;AAEA,MAAM,gBAAgB,CAAC,WAA+B;AAE7C,SAAA,OAAO,OAAO,YAAY;AAAA,IAC/B,CAAC,oBAAoB,GAAG;AAAA,MACtB,MAAM;AAAA,IACR;AAAA;AAAA,IAEA,CAAC,oBAAoB,GAAG;AAAA,MACtB,MAAM;AAAA,IAAA;AAAA,EACR,CACD;AACH;AAEA,MAAM,qBAAqB,CAAC,WAA+B;AACzD,MAAI,CAACC,WAAAA,QAAE,IAAI,QAAQ,yBAAyB,GAAG;AAC3CA,eAAAA,QAAA,IAAI,QAAQ,2BAA2B,KAAK;AAAA,EAAA;AAGzC,SAAA,WAAW,sBAAsB,IAAI;AAAA,IAC1C,MAAM;AAAA,IACN,cAAc;AAAA,IACd,UAAU;AAAA,IACV,SAAS;AAAA,IACT,UAAU;AACR,iCAAW,KAAK;AAAA,IAAA;AAAA,EAEpB;AACF;AAEA,MAAM,mBAAmB,CAAC,WAA+B;AACvD,QAAM,YAAY,CAACA,WAAA,QAAE,IAAI,QAAQ,iCAAiC,KAAK;AAEhE,SAAA,WAAW,oBAAoB,IAAI;AAAA,IACxC,MAAM;AAAA,IACN,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,UAAU;AAAA,IACV,SAAS;AAAA,IACT,cAAc;AAAA,IACd,SAAS;AAAA,EACX;AAEO,SAAA,WAAW,oBAAoB,IAAI;AAAA,IACxC,MAAM;AAAA,IACN,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,UAAU;AAAA,IACV,SAAS;AAAA,IACT,cAAc;AAAA,IACd,SAAS;AAAA,EACX;AACF;AAEM,MAAA,cAAc,CAAC,QAA4B,WAAoB;AAC7D,QAAA,YAAY,OAAO,KAAK;AAC9B,QAAM,WAAW,SAAS,GAAG,MAAM,IAAI,SAAS,KAAK;AAErD,SAAO,OAAO,YAAYA,WAAA,QAAE,WAAWA,mBAAE,UAAU,QAAQ,CAAC;AAC9D;AAEA,MAAM,aAAa,CAAC,UAA8B;AAChD,QAAM,SAASA,WAAAA,QAAE;AAAA,IACfA,WAAA,QAAE,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA;AAAA,EACH;AAEO,SAAA,OAAO,MAAM,QAAQ;AACrB,SAAA;AACT;;;"}