{"version":3,"file":"populate.mjs","sources":["../../../../src/services/document-service/transform/populate.ts"],"sourcesContent":["import { traverse } from '@strapi/utils';\r\nimport type { UID } from '@strapi/types';\r\n\r\nimport { type Data } from './types';\r\nimport { transformFields } from './fields';\r\n\r\nexport const transformPopulate = async (data: Data, opts: { uid: UID.Schema }) => {\r\n  return traverse.traverseQueryPopulate(\r\n    async ({ attribute, key, value }, { set }) => {\r\n      if (!value || typeof value !== 'object' || attribute?.type !== 'relation') {\r\n        return;\r\n      }\r\n\r\n      /*\r\n        If the attribute is a relation\r\n        Look for fields in the value\r\n        and apply the relevant transformation to these objects\r\n      */\r\n      if ('fields' in value && Array.isArray(value.fields)) {\r\n        value.fields = transformFields(value.fields);\r\n      }\r\n\r\n      set(key, value);\r\n    },\r\n    { schema: strapi.getModel(opts.uid), getModel: strapi.getModel.bind(strapi) },\r\n    data\r\n  );\r\n};\r\n"],"names":[],"mappings":";;AAMa,MAAA,oBAAoB,OAAO,MAAY,SAA8B;AAChF,SAAO,SAAS;AAAA,IACd,OAAO,EAAE,WAAW,KAAK,SAAS,EAAE,UAAU;AAC5C,UAAI,CAAC,SAAS,OAAO,UAAU,YAAY,WAAW,SAAS,YAAY;AACzE;AAAA,MAAA;AAQF,UAAI,YAAY,SAAS,MAAM,QAAQ,MAAM,MAAM,GAAG;AAC9C,cAAA,SAAS,gBAAgB,MAAM,MAAM;AAAA,MAAA;AAG7C,UAAI,KAAK,KAAK;AAAA,IAChB;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,KAAK,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IAC5E;AAAA,EACF;AACF;"}