{"version":3,"file":"id-map.mjs","sources":["../../../../src/services/document-service/transform/id-map.ts"],"sourcesContent":["import { Core, Data, UID } from '@strapi/types';\r\nimport { async, contentTypes } from '@strapi/utils';\r\n\r\nconst hasDraftAndPublish = (uid: UID.CollectionType) => {\r\n  const model = strapi.getModel(uid);\r\n  return contentTypes.hasDraftAndPublish(model);\r\n};\r\n\r\n/**\r\n * TODO: Find a better way to encode keys than this\r\n * This converts an object into a string by joining its keys and values,\r\n * so it can be used as a key in a Map.\r\n *\r\n * @example\r\n * const obj = { a: 1, b: 2 };\r\n * const key = encodeKey(obj);\r\n *      ^ \"a:::1&&b:::2\"\r\n */\r\nconst encodeKey = (obj: any) => {\r\n  // Ignore status field for models without draft and publish\r\n  if (!hasDraftAndPublish(obj.uid)) {\r\n    delete obj.status;\r\n  }\r\n\r\n  // Sort keys to always keep the same order when encoding\r\n  const keys = Object.keys(obj).sort();\r\n  return keys.map((key) => `${key}:::${obj[key]}`).join('&&');\r\n};\r\n\r\ninterface KeyFields {\r\n  uid: string;\r\n  documentId: Data.ID;\r\n  locale?: string | null;\r\n  status?: 'draft' | 'published';\r\n}\r\n\r\nexport interface IdMap {\r\n  loadedIds: Map<string, string>;\r\n  toLoadIds: Map<string, KeyFields>;\r\n  // Make the Keys type to be the params of add\r\n  add(keys: KeyFields): void;\r\n  load(): Promise<void>;\r\n  get(keys: KeyFields): string | undefined;\r\n  clear(): void;\r\n}\r\n\r\n/**\r\n * Holds a registry of document ids and their corresponding entity ids.\r\n */\r\nconst createIdMap = ({ strapi }: { strapi: Core.Strapi }): IdMap => {\r\n  const loadedIds = new Map();\r\n  const toLoadIds = new Map();\r\n\r\n  return {\r\n    loadedIds,\r\n    toLoadIds,\r\n    /**\r\n     * Register a new document id and its corresponding entity id.\r\n     */\r\n    add(keyFields: KeyFields) {\r\n      const key = encodeKey({ status: 'published', locale: null, ...keyFields });\r\n\r\n      // If the id is already loaded, do nothing\r\n      if (loadedIds.has(key)) return;\r\n      // If the id is already in the toLoadIds, do nothing\r\n      if (toLoadIds.has(key)) return;\r\n\r\n      // Add the id to the toLoadIds\r\n      toLoadIds.set(key, keyFields);\r\n    },\r\n\r\n    /**\r\n     * Load all ids from the registry.\r\n     */\r\n    async load() {\r\n      // Document Id to Entry Id queries are batched by its uid and locale\r\n      // TODO: Add publication state too\r\n      const loadIdValues = Array.from(toLoadIds.values());\r\n\r\n      // 1. Group ids to query together\r\n      const idsByUidAndLocale = loadIdValues.reduce((acc, { documentId, ...rest }) => {\r\n        const key = encodeKey(rest);\r\n        const ids = acc[key] || { ...rest, documentIds: [] };\r\n        ids.documentIds.push(documentId);\r\n        return { ...acc, [key]: ids };\r\n      }, {});\r\n\r\n      // 2. Query ids\r\n      await async.map(\r\n        Object.values(idsByUidAndLocale),\r\n        async ({ uid, locale, documentIds, status }: any) => {\r\n          const findParams = {\r\n            select: ['id', 'documentId', 'locale', 'publishedAt'],\r\n            where: {\r\n              documentId: { $in: documentIds },\r\n              locale: locale || null,\r\n            },\r\n          } as any;\r\n\r\n          if (hasDraftAndPublish(uid)) {\r\n            findParams.where.publishedAt = status === 'draft' ? null : { $ne: null };\r\n          }\r\n\r\n          const result = await strapi?.db?.query(uid).findMany(findParams);\r\n\r\n          // 3. Store result in loadedIds\r\n          result?.forEach(({ documentId, id, locale, publishedAt }: any) => {\r\n            const key = encodeKey({\r\n              documentId,\r\n              uid,\r\n              locale,\r\n              status: publishedAt ? 'published' : 'draft',\r\n            });\r\n            loadedIds.set(key, id);\r\n          });\r\n        }\r\n      );\r\n\r\n      // 4. Clear toLoadIds\r\n      toLoadIds.clear();\r\n    },\r\n\r\n    /**\r\n     * Get the entity id for a given document id.\r\n     */\r\n    get(keys: KeyFields) {\r\n      const key = encodeKey({ status: 'published', locale: null, ...keys });\r\n      return loadedIds.get(key);\r\n    },\r\n\r\n    /**\r\n     * Clear the registry.\r\n     */\r\n    clear() {\r\n      loadedIds.clear();\r\n      toLoadIds.clear();\r\n    },\r\n  };\r\n};\r\n\r\nexport { createIdMap };\r\n"],"names":["strapi","locale"],"mappings":";AAGA,MAAM,qBAAqB,CAAC,QAA4B;AAChD,QAAA,QAAQ,OAAO,SAAS,GAAG;AAC1B,SAAA,aAAa,mBAAmB,KAAK;AAC9C;AAYA,MAAM,YAAY,CAAC,QAAa;AAE9B,MAAI,CAAC,mBAAmB,IAAI,GAAG,GAAG;AAChC,WAAO,IAAI;AAAA,EAAA;AAIb,QAAM,OAAO,OAAO,KAAK,GAAG,EAAE,KAAK;AACnC,SAAO,KAAK,IAAI,CAAC,QAAQ,GAAG,GAAG,MAAM,IAAI,GAAG,CAAC,EAAE,EAAE,KAAK,IAAI;AAC5D;AAsBA,MAAM,cAAc,CAAC,EAAE,QAAAA,cAA6C;AAC5D,QAAA,gCAAgB,IAAI;AACpB,QAAA,gCAAgB,IAAI;AAEnB,SAAA;AAAA,IACL;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,WAAsB;AAClB,YAAA,MAAM,UAAU,EAAE,QAAQ,aAAa,QAAQ,MAAM,GAAG,WAAW;AAGrE,UAAA,UAAU,IAAI,GAAG,EAAG;AAEpB,UAAA,UAAU,IAAI,GAAG,EAAG;AAGd,gBAAA,IAAI,KAAK,SAAS;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO;AAGX,YAAM,eAAe,MAAM,KAAK,UAAU,QAAQ;AAG5C,YAAA,oBAAoB,aAAa,OAAO,CAAC,KAAK,EAAE,YAAY,GAAG,WAAW;AACxE,cAAA,MAAM,UAAU,IAAI;AACpB,cAAA,MAAM,IAAI,GAAG,KAAK,EAAE,GAAG,MAAM,aAAa,GAAG;AAC/C,YAAA,YAAY,KAAK,UAAU;AAC/B,eAAO,EAAE,GAAG,KAAK,CAAC,GAAG,GAAG,IAAI;AAAA,MAC9B,GAAG,EAAE;AAGL,YAAM,MAAM;AAAA,QACV,OAAO,OAAO,iBAAiB;AAAA,QAC/B,OAAO,EAAE,KAAK,QAAQ,aAAa,aAAkB;AACnD,gBAAM,aAAa;AAAA,YACjB,QAAQ,CAAC,MAAM,cAAc,UAAU,aAAa;AAAA,YACpD,OAAO;AAAA,cACL,YAAY,EAAE,KAAK,YAAY;AAAA,cAC/B,QAAQ,UAAU;AAAA,YAAA;AAAA,UAEtB;AAEI,cAAA,mBAAmB,GAAG,GAAG;AAC3B,uBAAW,MAAM,cAAc,WAAW,UAAU,OAAO,EAAE,KAAK,KAAK;AAAA,UAAA;AAGnE,gBAAA,SAAS,MAAMA,SAAQ,IAAI,MAAM,GAAG,EAAE,SAAS,UAAU;AAGvD,kBAAA,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAAC,SAAQ,kBAAuB;AAChE,kBAAM,MAAM,UAAU;AAAA,cACpB;AAAA,cACA;AAAA,cACA,QAAAA;AAAAA,cACA,QAAQ,cAAc,cAAc;AAAA,YAAA,CACrC;AACS,sBAAA,IAAI,KAAK,EAAE;AAAA,UAAA,CACtB;AAAA,QAAA;AAAA,MAEL;AAGA,gBAAU,MAAM;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,MAAiB;AACb,YAAA,MAAM,UAAU,EAAE,QAAQ,aAAa,QAAQ,MAAM,GAAG,MAAM;AAC7D,aAAA,UAAU,IAAI,GAAG;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA,IAKA,QAAQ;AACN,gBAAU,MAAM;AAChB,gBAAU,MAAM;AAAA,IAAA;AAAA,EAEpB;AACF;"}