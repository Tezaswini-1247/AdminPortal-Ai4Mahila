{"version":3,"file":"default-locale.js","sources":["../../../../../../src/services/document-service/transform/relations/transform/default-locale.ts"],"sourcesContent":["import type { UID } from '@strapi/types';\r\n\r\nimport { getDefaultLocale, isLocalizedContentType } from '../utils/i18n';\r\nimport { mapRelation, traverseEntityRelations } from '../utils/map-relation';\r\n\r\n/**\r\n * In scenarios like Non i18n CT -> i18n CT\r\n * relations can be connected to multiple locales,\r\n * in case user does not provide the locale, this sets it to the default one.\r\n */\r\nconst setDefaultLocaleToRelations = (data: Record<string, any>, uid: UID.Schema) => {\r\n  // I18n CT -> anything will already have a locale set (source locale)\r\n  if (isLocalizedContentType(uid)) {\r\n    return data;\r\n  }\r\n\r\n  // Store the default locale to avoid multiple calls\r\n  let defaultLocale: string;\r\n\r\n  /**\r\n   * Traverse the entity input data and set the default locale to relations\r\n   */\r\n  return traverseEntityRelations(\r\n    async ({ key, value }, { set }) => {\r\n      /**\r\n       * Assign default locale on long hand expressed relations\r\n       * e.g { documentId } -> { documentId, locale }\r\n       */\r\n      const relation = await mapRelation(async (relation) => {\r\n        if (!relation || !relation?.documentId || relation?.locale) {\r\n          return relation;\r\n        }\r\n\r\n        // Set default locale if not provided\r\n        if (!defaultLocale) {\r\n          defaultLocale = await getDefaultLocale();\r\n        }\r\n\r\n        // Assign default locale to the positional argument\r\n        const position = relation.position;\r\n        if (position && typeof position === 'object' && !position.locale) {\r\n          relation.position.locale = defaultLocale;\r\n        }\r\n\r\n        return { ...relation, locale: defaultLocale };\r\n      }, value as any);\r\n\r\n      // @ts-expect-error - fix type\r\n      set(key, relation);\r\n    },\r\n    { schema: strapi.getModel(uid), getModel: strapi.getModel.bind(strapi) },\r\n    data\r\n  );\r\n};\r\n\r\nexport { setDefaultLocaleToRelations };\r\n"],"names":["isLocalizedContentType","traverseEntityRelations","mapRelation","relation","getDefaultLocale"],"mappings":";;;;AAUM,MAAA,8BAA8B,CAAC,MAA2B,QAAoB;AAE9E,MAAAA,KAAAA,uBAAuB,GAAG,GAAG;AACxB,WAAA;AAAA,EAAA;AAIL,MAAA;AAKG,SAAAC,YAAA;AAAA,IACL,OAAO,EAAE,KAAK,SAAS,EAAE,UAAU;AAKjC,YAAM,WAAW,MAAMC,wBAAY,OAAOC,cAAa;AACrD,YAAI,CAACA,aAAY,CAACA,WAAU,cAAcA,WAAU,QAAQ;AACnDA,iBAAAA;AAAAA,QAAA;AAIT,YAAI,CAAC,eAAe;AAClB,0BAAgB,MAAMC,KAAAA,iBAAiB;AAAA,QAAA;AAIzC,cAAM,WAAWD,UAAS;AAC1B,YAAI,YAAY,OAAO,aAAa,YAAY,CAAC,SAAS,QAAQ;AAChEA,oBAAS,SAAS,SAAS;AAAA,QAAA;AAG7B,eAAO,EAAE,GAAGA,WAAU,QAAQ,cAAc;AAAA,SAC3C,KAAY;AAGf,UAAI,KAAK,QAAQ;AAAA,IACnB;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IACvE;AAAA,EACF;AACF;;"}