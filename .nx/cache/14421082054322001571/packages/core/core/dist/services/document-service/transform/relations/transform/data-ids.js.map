{"version":3,"file":"data-ids.js","sources":["../../../../../../src/services/document-service/transform/relations/transform/data-ids.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\r\n\r\nimport type { UID } from '@strapi/types';\r\nimport { errors, relations } from '@strapi/utils';\r\n\r\nimport { ID, LongHandDocument } from '../utils/types';\r\nimport { IdMap } from '../../id-map';\r\nimport { getRelationTargetLocale } from '../utils/i18n';\r\nimport { getRelationTargetStatus } from '../utils/dp';\r\nimport { mapRelation, traverseEntityRelations } from '../utils/map-relation';\r\n\r\nconst { isPolymorphic } = relations;\r\n\r\ninterface Options {\r\n  uid: UID.Schema;\r\n  locale?: string | null;\r\n  status?: 'draft' | 'published';\r\n  allowMissingId?: boolean; // Whether to ignore missing ids and not throw any error\r\n}\r\n\r\n/**\r\n * Get the entry ids for a given documentId.\r\n */\r\nconst getRelationIds = curry(\r\n  (idMap: IdMap, source: Options, targetUid: UID.Schema, relation: LongHandDocument) => {\r\n    // locale to connect to\r\n    const targetLocale = getRelationTargetLocale(relation, {\r\n      targetUid,\r\n      sourceUid: source.uid,\r\n      sourceLocale: source.locale,\r\n    });\r\n\r\n    // status(es) to connect to\r\n    const targetStatus = getRelationTargetStatus(relation, {\r\n      targetUid,\r\n      sourceUid: source.uid,\r\n      sourceStatus: source.status,\r\n    });\r\n\r\n    const ids: ID[] = [];\r\n\r\n    // Find mapping between documentID -> id(s).\r\n    // There are scenarios where a single documentID can map to multiple ids.\r\n    // e.g when connecting Non DP -> DP and connecting to both the draft and publish version at the same time\r\n    for (const tStatus of targetStatus) {\r\n      const entryId = idMap.get({\r\n        uid: targetUid,\r\n        documentId: relation.documentId,\r\n        locale: targetLocale,\r\n        status: tStatus,\r\n      });\r\n\r\n      if (entryId) ids.push(entryId);\r\n    }\r\n\r\n    if (!ids.length && !source.allowMissingId) {\r\n      throw new errors.ValidationError(\r\n        `Document with id \"${relation.documentId}\", locale \"${targetLocale}\" not found`\r\n      );\r\n    }\r\n\r\n    return ids;\r\n  }\r\n);\r\n\r\n/**\r\n * Iterate over all relations of a data object and transform all relational document ids to entity ids.\r\n */\r\nconst transformDataIdsVisitor = (idMap: IdMap, data: Record<string, any>, source: Options) => {\r\n  return traverseEntityRelations(\r\n    async ({ key, value, attribute }, { set }) => {\r\n      if (!attribute) {\r\n        return;\r\n      }\r\n      const isPolymorphicRelation = isPolymorphic(attribute);\r\n      const getIds = getRelationIds(idMap, source);\r\n\r\n      // Transform the relation documentId to entity id\r\n      const newRelation = await mapRelation((relation) => {\r\n        if (!relation || !relation.documentId) {\r\n          return relation;\r\n        }\r\n\r\n        // Find relational attributes, and return the document ids\r\n        // if its a polymorphic relation we need to get it from the data itself\r\n        const targetUid: UID.Schema = isPolymorphicRelation ? relation.__type : attribute.target;\r\n        const ids: ID[] = getIds(targetUid, relation);\r\n\r\n        // Handle positional arguments\r\n        const position = { ...relation.position };\r\n\r\n        // The positional relation target uid can be different for polymorphic relations\r\n        let positionTargetUid: UID.Schema = targetUid;\r\n        if (isPolymorphicRelation && position?.__type) {\r\n          positionTargetUid = position.__type;\r\n        }\r\n\r\n        if (position.before) {\r\n          const beforeRelation = { ...relation, ...position, documentId: position.before };\r\n          const beforeIds: ID[] = getIds(positionTargetUid, beforeRelation);\r\n          position.before = beforeIds.at(0);\r\n        }\r\n\r\n        if (position.after) {\r\n          const afterRelation = { ...relation, ...position, documentId: position.after };\r\n          position.after = getIds(positionTargetUid, afterRelation).at(0);\r\n        }\r\n\r\n        // Transform all ids to new relations\r\n        return ids?.map((id) => {\r\n          const newRelation = { id } as typeof relation;\r\n\r\n          if (relation.position) {\r\n            newRelation.position = position;\r\n          }\r\n\r\n          // Insert type if its a polymorphic relation\r\n          if (isPolymorphicRelation) {\r\n            newRelation.__type = targetUid;\r\n          }\r\n\r\n          return newRelation;\r\n        });\r\n      }, value as any);\r\n\r\n      set(key, newRelation as any);\r\n    },\r\n    { schema: strapi.getModel(source.uid), getModel: strapi.getModel.bind(strapi) },\r\n    data\r\n  );\r\n};\r\n\r\nexport { transformDataIdsVisitor };\r\n"],"names":["relations","curry","getRelationTargetLocale","getRelationTargetStatus","errors","traverseEntityRelations","mapRelation","newRelation"],"mappings":";;;;;;;AAWA,MAAM,EAAE,cAAkB,IAAAA,YAAA;AAY1B,MAAM,iBAAiBC,GAAA;AAAA,EACrB,CAAC,OAAc,QAAiB,WAAuB,aAA+B;AAE9E,UAAA,eAAeC,6BAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAGK,UAAA,eAAeC,2BAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAED,UAAM,MAAY,CAAC;AAKnB,eAAW,WAAW,cAAc;AAC5B,YAAA,UAAU,MAAM,IAAI;AAAA,QACxB,KAAK;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,QAAQ;AAAA,QACR,QAAQ;AAAA,MAAA,CACT;AAEG,UAAA,QAAa,KAAA,KAAK,OAAO;AAAA,IAAA;AAG/B,QAAI,CAAC,IAAI,UAAU,CAAC,OAAO,gBAAgB;AACzC,YAAM,IAAIC,YAAO,OAAA;AAAA,QACf,qBAAqB,SAAS,UAAU,cAAc,YAAY;AAAA,MACpE;AAAA,IAAA;AAGK,WAAA;AAAA,EAAA;AAEX;AAKA,MAAM,0BAA0B,CAAC,OAAc,MAA2B,WAAoB;AACrF,SAAAC,YAAA;AAAA,IACL,OAAO,EAAE,KAAK,OAAO,aAAa,EAAE,UAAU;AAC5C,UAAI,CAAC,WAAW;AACd;AAAA,MAAA;AAEI,YAAA,wBAAwB,cAAc,SAAS;AAC/C,YAAA,SAAS,eAAe,OAAO,MAAM;AAG3C,YAAM,cAAc,MAAMC,wBAAY,CAAC,aAAa;AAClD,YAAI,CAAC,YAAY,CAAC,SAAS,YAAY;AAC9B,iBAAA;AAAA,QAAA;AAKT,cAAM,YAAwB,wBAAwB,SAAS,SAAS,UAAU;AAC5E,cAAA,MAAY,OAAO,WAAW,QAAQ;AAG5C,cAAM,WAAW,EAAE,GAAG,SAAS,SAAS;AAGxC,YAAI,oBAAgC;AAChC,YAAA,yBAAyB,UAAU,QAAQ;AAC7C,8BAAoB,SAAS;AAAA,QAAA;AAG/B,YAAI,SAAS,QAAQ;AACb,gBAAA,iBAAiB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,OAAO;AACzE,gBAAA,YAAkB,OAAO,mBAAmB,cAAc;AACvD,mBAAA,SAAS,UAAU,GAAG,CAAC;AAAA,QAAA;AAGlC,YAAI,SAAS,OAAO;AACZ,gBAAA,gBAAgB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,MAAM;AAC7E,mBAAS,QAAQ,OAAO,mBAAmB,aAAa,EAAE,GAAG,CAAC;AAAA,QAAA;AAIzD,eAAA,KAAK,IAAI,CAAC,OAAO;AAChBC,gBAAAA,eAAc,EAAE,GAAG;AAEzB,cAAI,SAAS,UAAU;AACrBA,yBAAY,WAAW;AAAA,UAAA;AAIzB,cAAI,uBAAuB;AACzBA,yBAAY,SAAS;AAAA,UAAA;AAGhBA,iBAAAA;AAAAA,QAAA,CACR;AAAA,SACA,KAAY;AAEf,UAAI,KAAK,WAAkB;AAAA,IAC7B;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,OAAO,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IAC9E;AAAA,EACF;AACF;;"}