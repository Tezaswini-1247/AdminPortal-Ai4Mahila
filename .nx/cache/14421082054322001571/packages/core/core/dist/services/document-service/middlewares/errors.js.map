{"version":3,"file":"errors.js","sources":["../../../../src/services/document-service/middlewares/errors.ts"],"sourcesContent":["import { errors as databaseErrors } from '@strapi/database';\r\nimport { errors } from '@strapi/utils';\r\n\r\nimport type { Middleware } from './middleware-manager';\r\n\r\nconst databaseErrorsToTransform = [\r\n  databaseErrors.InvalidTimeError,\r\n  databaseErrors.InvalidDateTimeError,\r\n  databaseErrors.InvalidDateError,\r\n  databaseErrors.InvalidRelationError,\r\n];\r\n\r\n/**\r\n * Handle database errors\r\n */\r\nexport const databaseErrorsMiddleware: Middleware = async (ctx, next) => {\r\n  try {\r\n    return await next();\r\n  } catch (error) {\r\n    if (databaseErrorsToTransform.some((errorToTransform) => error instanceof errorToTransform)) {\r\n      if (error instanceof Error) {\r\n        throw new errors.ValidationError(error.message);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["databaseErrors","errors"],"mappings":";;;;AAKA,MAAM,4BAA4B;AAAA,EAChCA,SAAAA,OAAe;AAAA,EACfA,SAAAA,OAAe;AAAA,EACfA,SAAAA,OAAe;AAAA,EACfA,gBAAe;AACjB;AAKa,MAAA,2BAAuC,OAAO,KAAK,SAAS;AACnE,MAAA;AACF,WAAO,MAAM,KAAK;AAAA,WACX,OAAO;AACd,QAAI,0BAA0B,KAAK,CAAC,qBAAqB,iBAAiB,gBAAgB,GAAG;AAC3F,UAAI,iBAAiB,OAAO;AAC1B,cAAM,IAAIC,YAAA,OAAO,gBAAgB,MAAM,OAAO;AAAA,MAAA;AAG1C,YAAA;AAAA,IAAA;AAEF,UAAA;AAAA,EAAA;AAEV;;"}