{"version":3,"file":"middleware.js","sources":["../../../src/services/server/middleware.ts"],"sourcesContent":["import path from 'path';\r\nimport { isArray } from 'lodash/fp';\r\nimport { importDefault } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\n\r\nconst instantiateMiddleware = (\r\n  middlewareFactory: Core.MiddlewareFactory,\r\n  name: string,\r\n  config: unknown,\r\n  strapi: Core.Strapi\r\n) => {\r\n  try {\r\n    return middlewareFactory(config, { strapi });\r\n  } catch (e) {\r\n    if (e instanceof Error) {\r\n      throw new Error(`Middleware \"${name}\": ${e.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst resolveRouteMiddlewares = (route: Core.Route, strapi: Core.Strapi) => {\r\n  const middlewaresConfig = route?.config?.middlewares ?? [];\r\n\r\n  if (!isArray(middlewaresConfig)) {\r\n    throw new Error('Route middlewares config must be an array');\r\n  }\r\n\r\n  const middlewares = resolveMiddlewares(middlewaresConfig, strapi);\r\n\r\n  return middlewares.map(({ handler }) => handler);\r\n};\r\n\r\nconst dummyMiddleware: Core.MiddlewareHandler = (_, next) => next();\r\n\r\n/**\r\n * Initialize every configured middlewares\r\n */\r\nconst resolveMiddlewares = (\r\n  config: Array<Core.MiddlewareName | Core.MiddlewareConfig | Core.MiddlewareHandler>,\r\n  strapi: Core.Strapi\r\n) => {\r\n  const middlewares: {\r\n    name: string | null;\r\n    handler: Core.MiddlewareHandler;\r\n  }[] = [];\r\n\r\n  for (const item of config) {\r\n    if (typeof item === 'function') {\r\n      middlewares.push({\r\n        name: null,\r\n        handler: item,\r\n      });\r\n\r\n      continue;\r\n    }\r\n\r\n    if (typeof item === 'string') {\r\n      const middlewareFactory = strapi.middleware(item);\r\n\r\n      if (!middlewareFactory) {\r\n        throw new Error(`Middleware ${item} not found.`);\r\n      }\r\n\r\n      middlewares.push({\r\n        name: item,\r\n        handler: instantiateMiddleware(middlewareFactory, item, {}, strapi) ?? dummyMiddleware,\r\n      });\r\n\r\n      continue;\r\n    }\r\n\r\n    if (typeof item === 'object' && item !== null) {\r\n      const { name, resolve, config = {} } = item;\r\n\r\n      if (name) {\r\n        const middlewareFactory = strapi.middleware(name);\r\n        middlewares.push({\r\n          name,\r\n          handler:\r\n            instantiateMiddleware(middlewareFactory, name, config, strapi) ?? dummyMiddleware,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      if (resolve) {\r\n        const resolvedMiddlewareFactory = resolveCustomMiddleware(resolve, strapi);\r\n        middlewares.push({\r\n          name: resolve,\r\n          handler:\r\n            instantiateMiddleware(resolvedMiddlewareFactory, resolve, config, strapi) ??\r\n            dummyMiddleware,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      throw new Error('Invalid middleware configuration. Missing name or resolve properties.');\r\n    }\r\n\r\n    throw new Error(\r\n      'Middleware config must either be a string or an object {name?: string, resolve?: string, config: any}.'\r\n    );\r\n  }\r\n\r\n  return middlewares;\r\n};\r\n\r\n/**\r\n * Resolve middleware from package name or path\r\n */\r\nconst resolveCustomMiddleware = (resolve: string, strapi: Core.Strapi) => {\r\n  let modulePath;\r\n\r\n  try {\r\n    modulePath = require.resolve(resolve);\r\n  } catch (error) {\r\n    if (error instanceof Error && 'code' in error && error.code === 'MODULE_NOT_FOUND') {\r\n      modulePath = path.resolve(strapi.dirs.dist.root, resolve);\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  try {\r\n    return importDefault(modulePath);\r\n  } catch (err) {\r\n    throw new Error(`Could not load middleware \"${modulePath}\".`);\r\n  }\r\n};\r\n\r\nexport { resolveRouteMiddlewares, resolveMiddlewares };\r\n"],"names":["isArray","config","path","importDefault"],"mappings":";;;;;;;AAKA,MAAM,wBAAwB,CAC5B,mBACA,MACA,QACA,WACG;AACC,MAAA;AACF,WAAO,kBAAkB,QAAQ,EAAE,QAAQ;AAAA,WACpC,GAAG;AACV,QAAI,aAAa,OAAO;AACtB,YAAM,IAAI,MAAM,eAAe,IAAI,MAAM,EAAE,OAAO,EAAE;AAAA,IAAA;AAAA,EACtD;AAEJ;AAEM,MAAA,0BAA0B,CAAC,OAAmB,WAAwB;AAC1E,QAAM,oBAAoB,OAAO,QAAQ,eAAe,CAAC;AAErD,MAAA,CAACA,GAAAA,QAAQ,iBAAiB,GAAG;AACzB,UAAA,IAAI,MAAM,2CAA2C;AAAA,EAAA;AAGvD,QAAA,cAAc,mBAAmB,mBAAmB,MAAM;AAEhE,SAAO,YAAY,IAAI,CAAC,EAAE,QAAA,MAAc,OAAO;AACjD;AAEA,MAAM,kBAA0C,CAAC,GAAG,SAAS,KAAK;AAK5D,MAAA,qBAAqB,CACzB,QACA,WACG;AACH,QAAM,cAGA,CAAC;AAEP,aAAW,QAAQ,QAAQ;AACrB,QAAA,OAAO,SAAS,YAAY;AAC9B,kBAAY,KAAK;AAAA,QACf,MAAM;AAAA,QACN,SAAS;AAAA,MAAA,CACV;AAED;AAAA,IAAA;AAGE,QAAA,OAAO,SAAS,UAAU;AACtB,YAAA,oBAAoB,OAAO,WAAW,IAAI;AAEhD,UAAI,CAAC,mBAAmB;AACtB,cAAM,IAAI,MAAM,cAAc,IAAI,aAAa;AAAA,MAAA;AAGjD,kBAAY,KAAK;AAAA,QACf,MAAM;AAAA,QACN,SAAS,sBAAsB,mBAAmB,MAAM,CAAC,GAAG,MAAM,KAAK;AAAA,MAAA,CACxE;AAED;AAAA,IAAA;AAGF,QAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC7C,YAAM,EAAE,MAAM,SAAS,QAAAC,UAAS,OAAO;AAEvC,UAAI,MAAM;AACF,cAAA,oBAAoB,OAAO,WAAW,IAAI;AAChD,oBAAY,KAAK;AAAA,UACf;AAAA,UACA,SACE,sBAAsB,mBAAmB,MAAMA,SAAQ,MAAM,KAAK;AAAA,QAAA,CACrE;AAED;AAAA,MAAA;AAGF,UAAI,SAAS;AACL,cAAA,4BAA4B,wBAAwB,SAAS,MAAM;AACzE,oBAAY,KAAK;AAAA,UACf,MAAM;AAAA,UACN,SACE,sBAAsB,2BAA2B,SAASA,SAAQ,MAAM,KACxE;AAAA,QAAA,CACH;AAED;AAAA,MAAA;AAGI,YAAA,IAAI,MAAM,uEAAuE;AAAA,IAAA;AAGzF,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAGK,SAAA;AACT;AAKA,MAAM,0BAA0B,CAAC,SAAiB,WAAwB;AACpE,MAAA;AAEA,MAAA;AACW,iBAAA,QAAQ,QAAQ,OAAO;AAAA,WAC7B,OAAO;AACd,QAAI,iBAAiB,SAAS,UAAU,SAAS,MAAM,SAAS,oBAAoB;AAClF,mBAAaC,sBAAK,QAAQ,OAAO,KAAK,KAAK,MAAM,OAAO;AAAA,IAAA,OACnD;AACC,YAAA;AAAA,IAAA;AAAA,EACR;AAGE,MAAA;AACF,WAAOC,YAAAA,cAAc,UAAU;AAAA,WACxB,KAAK;AACZ,UAAM,IAAI,MAAM,8BAA8B,UAAU,IAAI;AAAA,EAAA;AAEhE;;;"}