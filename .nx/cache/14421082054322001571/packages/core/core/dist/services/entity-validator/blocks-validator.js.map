{"version":3,"file":"blocks-validator.js","sources":["../../../src/services/entity-validator/blocks-validator.ts"],"sourcesContent":["import { yup } from '@strapi/utils';\r\n\r\nconst textNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['text']).required(),\r\n  text: yup\r\n    .string()\r\n    .test(\r\n      'is-valid-text',\r\n      'Text must be defined with at least an empty string',\r\n      (text: unknown) => {\r\n        return typeof text === 'string' || text === '';\r\n      }\r\n    ),\r\n  bold: yup.boolean(),\r\n  italic: yup.boolean(),\r\n  underline: yup.boolean(),\r\n  strikethrough: yup.boolean(),\r\n  code: yup.boolean(),\r\n});\r\n\r\nconst checkValidLink = (link: string) => {\r\n  try {\r\n    // eslint-disable-next-line no-new\r\n    new URL(link.startsWith('/') ? `https://strapi.io${link}` : link);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst linkNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['link']).required(),\r\n  url: yup\r\n    .string()\r\n    .test('invalid-url', 'Please specify a valid link.', (value) => checkValidLink(value ?? '')),\r\n  children: yup.array().of(textNodeValidator).required(),\r\n});\r\n\r\n// TODO: remove any with a correct Type\r\nconst inlineNodeValidator: any = yup.lazy((value: { type: string }) => {\r\n  switch (value.type) {\r\n    case 'text':\r\n      return textNodeValidator;\r\n    case 'link':\r\n      return linkNodeValidator;\r\n    default:\r\n      return yup.mixed().test('invalid-type', 'Inline node must be Text or Link', () => {\r\n        return false;\r\n      });\r\n  }\r\n});\r\n\r\nconst paragraphNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['paragraph']).required(),\r\n  children: yup\r\n    .array()\r\n    .of(inlineNodeValidator)\r\n    .min(1, 'Paragraph node children must have at least one Text or Link node')\r\n    .required(),\r\n});\r\n\r\nconst headingNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['heading']).required(),\r\n  level: yup.number().oneOf([1, 2, 3, 4, 5, 6]).required(),\r\n  children: yup\r\n    .array()\r\n    .of(inlineNodeValidator)\r\n    .min(1, 'Heading node children must have at least one Text or Link node')\r\n    .required(),\r\n});\r\n\r\nconst quoteNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['quote']).required(),\r\n  children: yup\r\n    .array()\r\n    .of(inlineNodeValidator)\r\n    .min(1, 'Quote node children must have at least one Text or Link node')\r\n    .required(),\r\n});\r\n\r\nconst codeBlockValidator = yup.object().shape({\r\n  type: yup.string().equals(['code']).required(),\r\n  syntax: yup.string().nullable(),\r\n  children: yup\r\n    .array()\r\n    .of(textNodeValidator)\r\n    .min(1, 'Quote node children must have at least one Text or Link node')\r\n    .required(),\r\n});\r\n\r\nconst listItemNode = yup.object().shape({\r\n  type: yup.string().equals(['list-item']).required(),\r\n  children: yup.array().of(inlineNodeValidator).required(),\r\n});\r\n\r\n// Allow children to be either a listItemNode or a listNode itself\r\n// @ts-expect-error - listChildrenValidator needs a type\r\nconst listChildrenValidator = yup.lazy((value: { type: string }) => {\r\n  switch (value.type) {\r\n    case 'list':\r\n      return listNodeValidator;\r\n    case 'list-item':\r\n      return listItemNode;\r\n    default:\r\n      return yup.mixed().test('invalid-type', 'Inline node must be list-item or list', () => {\r\n        return false;\r\n      });\r\n  }\r\n});\r\n\r\n// @ts-expect-error - listNodeValidator needs a type\r\nconst listNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['list']).required(),\r\n  format: yup.string().equals(['ordered', 'unordered']).required(),\r\n  children: yup\r\n    .array()\r\n    .of(listChildrenValidator)\r\n    .min(1, 'List node children must have at least one ListItem or ListNode')\r\n    .required(),\r\n});\r\n\r\nconst imageNodeValidator = yup.object().shape({\r\n  type: yup.string().equals(['image']).required(),\r\n  image: yup.object().shape({\r\n    name: yup.string().required(),\r\n    alternativeText: yup.string().nullable(),\r\n    url: yup.string().required(),\r\n    caption: yup.string().nullable(),\r\n    width: yup.number().required(),\r\n    height: yup.number().required(),\r\n    formats: yup.object().required(),\r\n    hash: yup.string().required(),\r\n    ext: yup.string().required(),\r\n    mime: yup.string().required(),\r\n    size: yup.number().required(),\r\n    previewUrl: yup.string().nullable(),\r\n    provider: yup.string().required(),\r\n    provider_metadata: yup.mixed().nullable(),\r\n    createdAt: yup.string().required(),\r\n    updatedAt: yup.string().required(),\r\n  }),\r\n  children: yup.array().of(inlineNodeValidator).required(),\r\n});\r\n\r\n// TODO: remove the any and replace with a correct Type\r\nconst blockNodeValidator: any = yup.lazy((value: { type: string }) => {\r\n  switch (value.type) {\r\n    case 'paragraph':\r\n      return paragraphNodeValidator;\r\n    case 'heading':\r\n      return headingNodeValidator;\r\n    case 'quote':\r\n      return quoteNodeValidator;\r\n    case 'list':\r\n      return listNodeValidator;\r\n    case 'image':\r\n      return imageNodeValidator;\r\n    case 'code':\r\n      return codeBlockValidator;\r\n    default:\r\n      return yup.mixed().test('invalid-type', 'Block node is of invalid type', () => {\r\n        return false;\r\n      });\r\n  }\r\n});\r\n\r\nconst blocksValidatorSchema = yup.array().of(blockNodeValidator);\r\n\r\nexport const blocksValidator = () => blocksValidatorSchema;\r\n"],"names":["yup"],"mappings":"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"}