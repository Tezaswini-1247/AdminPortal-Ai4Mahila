{"version":3,"file":"map-relation.mjs","sources":["../../../../../../src/services/document-service/transform/relations/utils/map-relation.ts"],"sourcesContent":["/* eslint-disable node/no-callback-literal */\r\nimport { isObject, curry, isNil } from 'lodash/fp';\r\n\r\nimport { traverseEntity, async } from '@strapi/utils';\r\n\r\nimport { Relation } from './types';\r\n\r\nconst isNumeric = (value: any): value is number => {\r\n  if (Array.isArray(value)) return false; // Handle [1, 'docId'] case\r\n  const parsed = parseInt(value, 10);\r\n  return !Number.isNaN(parsed);\r\n};\r\n\r\nconst toArray = (value: any) => {\r\n  // Keep value as it is if it's a nullish value\r\n  if (isNil(value)) return value;\r\n  if (Array.isArray(value)) return value;\r\n\r\n  return [value];\r\n};\r\n\r\n/**\r\n * There are multiple ways to create Strapi relations.\r\n * This is a utility to traverse and transform relation data\r\n *\r\n *\r\n * For consistency and ease of use, the response will always be an object with the following shape:\r\n * { set: [{...}], connect: [{...}], disconnect: [{...}] }\r\n *\r\n * @example\r\n * transformRelationData({\r\n *  onLongHand: (relation) => {\r\n *    // Change the id of the relation\r\n *    return { id: 'other' };\r\n *  },\r\n * }, relation)\r\n */\r\nconst mapRelation = async (\r\n  callback: (relation: any) => any,\r\n  rel: Relation,\r\n  isRecursive = false\r\n): Promise<Relation> => {\r\n  let relation: Relation = rel;\r\n\r\n  const wrapInSet = (value: any) => {\r\n    // Ignore wrapping if it's a recursive call\r\n    if (isRecursive) {\r\n      return value;\r\n    }\r\n    return { set: toArray(value) };\r\n  };\r\n\r\n  // undefined | null\r\n  if (isNil(relation)) {\r\n    return callback(relation);\r\n  }\r\n\r\n  // LongHand[] | ShortHand[]\r\n  if (Array.isArray(relation)) {\r\n    return async\r\n      .map(relation, (r: Relation) => mapRelation(callback, r, true))\r\n      .then((result: any) => result.flat().filter(Boolean))\r\n      .then(wrapInSet);\r\n  }\r\n\r\n  // LongHand\r\n  if (isObject(relation)) {\r\n    // { id: 1 } || { documentId: 1 }\r\n    if ('id' in relation || 'documentId' in relation) {\r\n      const result = await callback(relation);\r\n      return wrapInSet(result);\r\n    }\r\n\r\n    // If not connecting anything, return default visitor\r\n    if (!relation.set && !relation.disconnect && !relation.connect) {\r\n      return callback(relation);\r\n    }\r\n\r\n    // { set }\r\n    if (relation.set) {\r\n      const set: any = await mapRelation(callback, relation.set, true);\r\n      relation = { ...relation, set: toArray(set) };\r\n    }\r\n\r\n    // { disconnect}\r\n    if (relation.disconnect) {\r\n      const disconnect: any = await mapRelation(callback, relation.disconnect, true);\r\n      relation = { ...relation, disconnect: toArray(disconnect) };\r\n    }\r\n\r\n    // { connect }\r\n    if (relation.connect) {\r\n      // Transform the relation to connect\r\n      const connect: any = await mapRelation(callback, relation.connect, true);\r\n      relation = { ...relation, connect: toArray(connect) };\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  // ShortHand\r\n  if (isNumeric(relation)) {\r\n    const result = await callback({ id: relation });\r\n    return wrapInSet(result);\r\n  }\r\n\r\n  if (typeof relation === 'string') {\r\n    const result = await callback({ documentId: relation });\r\n    return wrapInSet(result);\r\n  }\r\n\r\n  // Anything else\r\n  return callback(relation);\r\n};\r\n\r\ntype TraverseEntity = Parameters<typeof traverseEntity>;\r\n\r\n/**\r\n * Utility function, same as `traverseEntity` but only for relations.\r\n */\r\nconst traverseEntityRelations = async (\r\n  visitor: TraverseEntity[0],\r\n  options: TraverseEntity[1],\r\n  data: TraverseEntity[2]\r\n) => {\r\n  return traverseEntity(\r\n    async (options, utils) => {\r\n      const { attribute } = options;\r\n\r\n      if (!attribute) {\r\n        return;\r\n      }\r\n\r\n      if (attribute.type !== 'relation') {\r\n        return;\r\n      }\r\n\r\n      // TODO: Handle join columns\r\n      if (attribute.useJoinTable === false) {\r\n        return;\r\n      }\r\n\r\n      return visitor(options, utils);\r\n    },\r\n    options,\r\n    data\r\n  );\r\n};\r\n\r\nconst mapRelationCurried = curry(mapRelation);\r\nconst traverseEntityRelationsCurried = curry(traverseEntityRelations);\r\n\r\nexport {\r\n  mapRelationCurried as mapRelation,\r\n  traverseEntityRelationsCurried as traverseEntityRelations,\r\n};\r\n"],"names":["options"],"mappings":";;AAOA,MAAM,YAAY,CAAC,UAAgC;AACjD,MAAI,MAAM,QAAQ,KAAK,EAAU,QAAA;AAC3B,QAAA,SAAS,SAAS,OAAO,EAAE;AAC1B,SAAA,CAAC,OAAO,MAAM,MAAM;AAC7B;AAEA,MAAM,UAAU,CAAC,UAAe;AAE1B,MAAA,MAAM,KAAK,EAAU,QAAA;AACzB,MAAI,MAAM,QAAQ,KAAK,EAAU,QAAA;AAEjC,SAAO,CAAC,KAAK;AACf;AAkBA,MAAM,cAAc,OAClB,UACA,KACA,cAAc,UACQ;AACtB,MAAI,WAAqB;AAEnB,QAAA,YAAY,CAAC,UAAe;AAEhC,QAAI,aAAa;AACR,aAAA;AAAA,IAAA;AAET,WAAO,EAAE,KAAK,QAAQ,KAAK,EAAE;AAAA,EAC/B;AAGI,MAAA,MAAM,QAAQ,GAAG;AACnB,WAAO,SAAS,QAAQ;AAAA,EAAA;AAItB,MAAA,MAAM,QAAQ,QAAQ,GAAG;AACpB,WAAA,MACJ,IAAI,UAAU,CAAC,MAAgB,YAAY,UAAU,GAAG,IAAI,CAAC,EAC7D,KAAK,CAAC,WAAgB,OAAO,KAAK,EAAE,OAAO,OAAO,CAAC,EACnD,KAAK,SAAS;AAAA,EAAA;AAIf,MAAA,SAAS,QAAQ,GAAG;AAElB,QAAA,QAAQ,YAAY,gBAAgB,UAAU;AAC1C,YAAA,SAAS,MAAM,SAAS,QAAQ;AACtC,aAAO,UAAU,MAAM;AAAA,IAAA;AAIrB,QAAA,CAAC,SAAS,OAAO,CAAC,SAAS,cAAc,CAAC,SAAS,SAAS;AAC9D,aAAO,SAAS,QAAQ;AAAA,IAAA;AAI1B,QAAI,SAAS,KAAK;AAChB,YAAM,MAAW,MAAM,YAAY,UAAU,SAAS,KAAK,IAAI;AAC/D,iBAAW,EAAE,GAAG,UAAU,KAAK,QAAQ,GAAG,EAAE;AAAA,IAAA;AAI9C,QAAI,SAAS,YAAY;AACvB,YAAM,aAAkB,MAAM,YAAY,UAAU,SAAS,YAAY,IAAI;AAC7E,iBAAW,EAAE,GAAG,UAAU,YAAY,QAAQ,UAAU,EAAE;AAAA,IAAA;AAI5D,QAAI,SAAS,SAAS;AAEpB,YAAM,UAAe,MAAM,YAAY,UAAU,SAAS,SAAS,IAAI;AACvE,iBAAW,EAAE,GAAG,UAAU,SAAS,QAAQ,OAAO,EAAE;AAAA,IAAA;AAG/C,WAAA;AAAA,EAAA;AAIL,MAAA,UAAU,QAAQ,GAAG;AACvB,UAAM,SAAS,MAAM,SAAS,EAAE,IAAI,UAAU;AAC9C,WAAO,UAAU,MAAM;AAAA,EAAA;AAGrB,MAAA,OAAO,aAAa,UAAU;AAChC,UAAM,SAAS,MAAM,SAAS,EAAE,YAAY,UAAU;AACtD,WAAO,UAAU,MAAM;AAAA,EAAA;AAIzB,SAAO,SAAS,QAAQ;AAC1B;AAOA,MAAM,0BAA0B,OAC9B,SACA,SACA,SACG;AACI,SAAA;AAAA,IACL,OAAOA,UAAS,UAAU;AAClB,YAAA,EAAE,cAAcA;AAEtB,UAAI,CAAC,WAAW;AACd;AAAA,MAAA;AAGE,UAAA,UAAU,SAAS,YAAY;AACjC;AAAA,MAAA;AAIE,UAAA,UAAU,iBAAiB,OAAO;AACpC;AAAA,MAAA;AAGK,aAAA,QAAQA,UAAS,KAAK;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEM,MAAA,qBAAqB,MAAM,WAAW;AACtC,MAAA,iCAAiC,MAAM,uBAAuB;"}