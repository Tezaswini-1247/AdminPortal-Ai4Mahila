{"version":3,"file":"collection-type.js","sources":["../../../src/core-api/controller/collection-type.ts"],"sourcesContent":["import { isObject } from 'lodash/fp';\r\nimport { errors } from '@strapi/utils';\r\nimport type { Core, Struct, Utils, UID } from '@strapi/types';\r\nimport type Koa from 'koa';\r\n\r\ninterface Options {\r\n  contentType: Struct.CollectionTypeSchema;\r\n}\r\n\r\n/**\r\n *\r\n * Returns a collection type controller to handle default core-api actions\r\n */\r\nconst createCollectionTypeController = ({\r\n  contentType,\r\n}: Options): Utils.PartialWithThis<Core.CoreAPI.Controller.CollectionType> => {\r\n  const uid = contentType.uid as UID.Service;\r\n\r\n  // TODO: transform into a class\r\n  return {\r\n    /**\r\n     * Retrieve records.\r\n     */\r\n    async find(ctx) {\r\n      await this.validateQuery(ctx);\r\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\r\n\r\n      const { results, pagination } = await strapi.service(uid).find(sanitizedQuery);\r\n      const sanitizedResults = await this.sanitizeOutput(results, ctx);\r\n      return this.transformResponse(sanitizedResults, { pagination });\r\n    },\r\n\r\n    /**\r\n     * Retrieve a record\r\n     */\r\n    async findOne(ctx) {\r\n      const { id } = ctx.params;\r\n      await this.validateQuery(ctx);\r\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\r\n\r\n      const entity = await strapi.service(uid).findOne(id, sanitizedQuery);\r\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\r\n\r\n      return this.transformResponse(sanitizedEntity);\r\n    },\r\n\r\n    /**\r\n     * Create a record.\r\n     */\r\n    async create(ctx) {\r\n      await this.validateQuery(ctx);\r\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\r\n\r\n      const { body = {} as any } = ctx.request;\r\n\r\n      if (!isObject(body.data)) {\r\n        throw new errors.ValidationError('Missing \"data\" payload in the request body');\r\n      }\r\n\r\n      await this.validateInput(body.data, ctx);\r\n\r\n      const sanitizedInputData = await this.sanitizeInput(body.data, ctx);\r\n\r\n      const entity = await strapi.service(uid).create({\r\n        ...sanitizedQuery,\r\n        data: sanitizedInputData,\r\n      });\r\n\r\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\r\n\r\n      ctx.status = 201;\r\n      return this.transformResponse(sanitizedEntity);\r\n    },\r\n\r\n    /**\r\n     * Update a record.\r\n     */\r\n    async update(ctx: Koa.Context) {\r\n      const { id } = ctx.params;\r\n      await this.validateQuery(ctx);\r\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\r\n\r\n      const { body = {} as any } = ctx.request;\r\n\r\n      if (!isObject(body.data)) {\r\n        throw new errors.ValidationError('Missing \"data\" payload in the request body');\r\n      }\r\n\r\n      await this.validateInput(body.data, ctx);\r\n\r\n      const sanitizedInputData = await this.sanitizeInput(body.data, ctx);\r\n\r\n      const entity = await strapi.service(uid).update(id, {\r\n        ...sanitizedQuery,\r\n        data: sanitizedInputData,\r\n      });\r\n\r\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\r\n\r\n      return this.transformResponse(sanitizedEntity);\r\n    },\r\n\r\n    /**\r\n     * Destroy a record.\r\n     */\r\n    async delete(ctx) {\r\n      const { id } = ctx.params;\r\n      await this.validateQuery(ctx);\r\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\r\n\r\n      await strapi.service(uid).delete(id, sanitizedQuery);\r\n\r\n      ctx.status = 204;\r\n    },\r\n  };\r\n};\r\n\r\nexport { createCollectionTypeController };\r\n"],"names":["isObject","errors"],"mappings":";;;;AAaA,MAAM,iCAAiC,CAAC;AAAA,EACtC;AACF,MAA8E;AAC5E,QAAM,MAAM,YAAY;AAGjB,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,MAAM,KAAK,KAAK;AACR,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAE7C,YAAA,EAAE,SAAS,WAAA,IAAe,MAAM,OAAO,QAAQ,GAAG,EAAE,KAAK,cAAc;AAC7E,YAAM,mBAAmB,MAAM,KAAK,eAAe,SAAS,GAAG;AAC/D,aAAO,KAAK,kBAAkB,kBAAkB,EAAE,YAAY;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,QAAQ,KAAK;AACX,YAAA,EAAE,OAAO,IAAI;AACb,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAE7C,YAAA,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,QAAQ,IAAI,cAAc;AACnE,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO,KAAK;AACV,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAEnD,YAAM,EAAE,OAAO,OAAc,IAAI;AAEjC,UAAI,CAACA,GAAA,SAAS,KAAK,IAAI,GAAG;AAClB,cAAA,IAAIC,YAAAA,OAAO,gBAAgB,4CAA4C;AAAA,MAAA;AAG/E,YAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAEvC,YAAM,qBAAqB,MAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAElE,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,OAAO;AAAA,QAC9C,GAAG;AAAA,QACH,MAAM;AAAA,MAAA,CACP;AAED,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAE7D,UAAI,SAAS;AACN,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO,KAAkB;AACvB,YAAA,EAAE,OAAO,IAAI;AACb,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAEnD,YAAM,EAAE,OAAO,OAAc,IAAI;AAEjC,UAAI,CAACD,GAAA,SAAS,KAAK,IAAI,GAAG;AAClB,cAAA,IAAIC,YAAAA,OAAO,gBAAgB,4CAA4C;AAAA,MAAA;AAG/E,YAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAEvC,YAAM,qBAAqB,MAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAElE,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,OAAO,IAAI;AAAA,QAClD,GAAG;AAAA,QACH,MAAM;AAAA,MAAA,CACP;AAED,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO,KAAK;AACV,YAAA,EAAE,OAAO,IAAI;AACb,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAEnD,YAAM,OAAO,QAAQ,GAAG,EAAE,OAAO,IAAI,cAAc;AAEnD,UAAI,SAAS;AAAA,IAAA;AAAA,EAEjB;AACF;;"}