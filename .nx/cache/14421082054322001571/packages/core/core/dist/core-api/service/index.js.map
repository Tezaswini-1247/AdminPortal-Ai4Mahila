{"version":3,"file":"index.js","sources":["../../../src/core-api/service/index.ts"],"sourcesContent":["import { contentTypes as contentTypeUtils } from '@strapi/utils';\r\nimport type { Core, Struct } from '@strapi/types';\r\n\r\nimport { createSingleTypeService } from './single-type';\r\nimport { createCollectionTypeService } from './collection-type';\r\n\r\nconst isSingleType = (\r\n  contentType: Struct.ContentTypeSchema\r\n): contentType is Struct.SingleTypeSchema => contentTypeUtils.isSingleType(contentType);\r\n\r\n/**\r\n * Returns a core api for the provided model\r\n */\r\nfunction createService<T extends Struct.SingleTypeSchema | Struct.CollectionTypeSchema>(opts: {\r\n  contentType: T;\r\n}): T extends Struct.SingleTypeSchema\r\n  ? Core.CoreAPI.Service.SingleType\r\n  : Core.CoreAPI.Service.CollectionType;\r\nfunction createService({\r\n  contentType,\r\n}: {\r\n  contentType: Struct.CollectionTypeSchema | Struct.SingleTypeSchema;\r\n}): Core.CoreAPI.Service.SingleType | Core.CoreAPI.Service.CollectionType {\r\n  if (isSingleType(contentType)) {\r\n    return createSingleTypeService(contentType);\r\n  }\r\n\r\n  return createCollectionTypeService(contentType);\r\n}\r\n\r\nexport { createService };\r\n"],"names":["contentTypeUtils","createSingleTypeService","createCollectionTypeService"],"mappings":";;;;;AAMA,MAAM,eAAe,CACnB,gBAC2CA,yBAAiB,aAAa,WAAW;AAUtF,SAAS,cAAc;AAAA,EACrB;AACF,GAE0E;AACpE,MAAA,aAAa,WAAW,GAAG;AAC7B,WAAOC,WAAAA,wBAAwB,WAAW;AAAA,EAAA;AAG5C,SAAOC,eAAAA,4BAA4B,WAAW;AAChD;;"}