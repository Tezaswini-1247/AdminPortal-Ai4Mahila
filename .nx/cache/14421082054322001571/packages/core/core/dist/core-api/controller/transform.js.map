{"version":3,"file":"transform.js","sources":["../../../src/core-api/controller/transform.ts"],"sourcesContent":["import { isNil, isPlainObject } from 'lodash/fp';\r\nimport type { UID, Struct, Data } from '@strapi/types';\r\n\r\ntype TransformedEntry = {\r\n  id: string;\r\n  documentId?: Data.DocumentID | null;\r\n  attributes: Record<string, unknown>;\r\n};\r\n\r\ntype TransformedComponent = {\r\n  id: string;\r\n  [key: string]: unknown;\r\n};\r\n\r\ntype Entry = {\r\n  id: string;\r\n  documentId: Data.DocumentID | null;\r\n  [key: string]: Entry | Entry[] | string | number | null | boolean | Date;\r\n};\r\n\r\nfunction isEntry(property: unknown): property is Entry | Entry[] {\r\n  return property === null || isPlainObject(property) || Array.isArray(property);\r\n}\r\n\r\nfunction isDZEntries(property: unknown): property is (Entry & { __component: UID.Component })[] {\r\n  return Array.isArray(property);\r\n}\r\n\r\ninterface TransformOptions {\r\n  contentType?: Struct.ContentTypeSchema | Struct.ComponentSchema;\r\n  /**\r\n   * @deprecated this option is deprecated and will be removed in the next major version\r\n   */\r\n  useJsonAPIFormat?: boolean;\r\n}\r\n\r\nconst transformResponse = (\r\n  resource: any,\r\n  meta: unknown = {},\r\n  opts: TransformOptions = {\r\n    useJsonAPIFormat: false,\r\n  }\r\n) => {\r\n  if (isNil(resource)) {\r\n    return resource;\r\n  }\r\n\r\n  if (!isPlainObject(resource) && !Array.isArray(resource)) {\r\n    throw new Error('Entry must be an object or an array of objects');\r\n  }\r\n\r\n  return {\r\n    data: opts.useJsonAPIFormat ? transformEntry(resource, opts?.contentType) : resource,\r\n    meta,\r\n  };\r\n};\r\n\r\nfunction transformComponent<T extends Entry | Entry[] | null>(\r\n  data: T,\r\n  component: Struct.ComponentSchema\r\n): T extends Entry[] ? TransformedComponent[] : T extends Entry ? TransformedComponent : null;\r\nfunction transformComponent(\r\n  data: Entry | Entry[] | null,\r\n  component: Struct.ComponentSchema\r\n): TransformedComponent | TransformedComponent[] | null {\r\n  if (Array.isArray(data)) {\r\n    return data.map((datum) => transformComponent(datum, component));\r\n  }\r\n\r\n  const res = transformEntry(data, component);\r\n\r\n  if (isNil(res)) {\r\n    return res;\r\n  }\r\n\r\n  const { id, attributes } = res;\r\n  return { id, ...attributes };\r\n}\r\n\r\nfunction transformEntry<T extends Entry | Entry[] | null>(\r\n  entry: T,\r\n  type?: Struct.Schema\r\n): T extends Entry[] ? TransformedEntry[] : T extends Entry ? TransformedEntry : null;\r\nfunction transformEntry(\r\n  entry: Entry | Entry[] | null,\r\n  type?: Struct.Schema\r\n): TransformedEntry | TransformedEntry[] | null {\r\n  if (isNil(entry)) {\r\n    return entry;\r\n  }\r\n\r\n  if (Array.isArray(entry)) {\r\n    return entry.map((singleEntry) => transformEntry(singleEntry, type));\r\n  }\r\n\r\n  if (!isPlainObject(entry)) {\r\n    throw new Error('Entry must be an object');\r\n  }\r\n\r\n  const { id, documentId, ...properties } = entry;\r\n\r\n  const attributeValues: Record<string, unknown> = {};\r\n\r\n  for (const key of Object.keys(properties)) {\r\n    const property = properties[key];\r\n    const attribute = type && type.attributes[key];\r\n\r\n    if (attribute && attribute.type === 'relation' && isEntry(property) && 'target' in attribute) {\r\n      const data = transformEntry(property, strapi.contentType(attribute.target));\r\n\r\n      attributeValues[key] = { data };\r\n    } else if (attribute && attribute.type === 'component' && isEntry(property)) {\r\n      attributeValues[key] = transformComponent(property, strapi.components[attribute.component]);\r\n    } else if (attribute && attribute.type === 'dynamiczone' && isDZEntries(property)) {\r\n      if (isNil(property)) {\r\n        attributeValues[key] = property;\r\n      }\r\n\r\n      attributeValues[key] = property.map((subProperty) => {\r\n        return transformComponent(subProperty, strapi.components[subProperty.__component]);\r\n      });\r\n    } else if (attribute && attribute.type === 'media' && isEntry(property)) {\r\n      const data = transformEntry(property, strapi.contentType('plugin::upload.file'));\r\n\r\n      attributeValues[key] = { data };\r\n    } else {\r\n      attributeValues[key] = property;\r\n    }\r\n  }\r\n\r\n  return {\r\n    id,\r\n    documentId,\r\n    attributes: attributeValues,\r\n  };\r\n}\r\n\r\nexport { transformResponse };\r\n"],"names":["isPlainObject","isNil"],"mappings":";;;AAoBA,SAAS,QAAQ,UAAgD;AAC/D,SAAO,aAAa,QAAQA,GAAA,cAAc,QAAQ,KAAK,MAAM,QAAQ,QAAQ;AAC/E;AAEA,SAAS,YAAY,UAA2E;AACvF,SAAA,MAAM,QAAQ,QAAQ;AAC/B;AAUA,MAAM,oBAAoB,CACxB,UACA,OAAgB,CAAA,GAChB,OAAyB;AAAA,EACvB,kBAAkB;AACpB,MACG;AACC,MAAAC,GAAAA,MAAM,QAAQ,GAAG;AACZ,WAAA;AAAA,EAAA;AAGL,MAAA,CAACD,iBAAc,QAAQ,KAAK,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAClD,UAAA,IAAI,MAAM,gDAAgD;AAAA,EAAA;AAG3D,SAAA;AAAA,IACL,MAAM,KAAK,mBAAmB,eAAe,UAAU,MAAM,WAAW,IAAI;AAAA,IAC5E;AAAA,EACF;AACF;AAMA,SAAS,mBACP,MACA,WACsD;AAClD,MAAA,MAAM,QAAQ,IAAI,GAAG;AACvB,WAAO,KAAK,IAAI,CAAC,UAAU,mBAAmB,OAAO,SAAS,CAAC;AAAA,EAAA;AAG3D,QAAA,MAAM,eAAe,MAAM,SAAS;AAEtC,MAAAC,GAAAA,MAAM,GAAG,GAAG;AACP,WAAA;AAAA,EAAA;AAGH,QAAA,EAAE,IAAI,WAAA,IAAe;AACpB,SAAA,EAAE,IAAI,GAAG,WAAW;AAC7B;AAMA,SAAS,eACP,OACA,MAC8C;AAC1C,MAAAA,GAAAA,MAAM,KAAK,GAAG;AACT,WAAA;AAAA,EAAA;AAGL,MAAA,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,MAAM,IAAI,CAAC,gBAAgB,eAAe,aAAa,IAAI,CAAC;AAAA,EAAA;AAGjE,MAAA,CAACD,GAAAA,cAAc,KAAK,GAAG;AACnB,UAAA,IAAI,MAAM,yBAAyB;AAAA,EAAA;AAG3C,QAAM,EAAE,IAAI,YAAY,GAAG,WAAe,IAAA;AAE1C,QAAM,kBAA2C,CAAC;AAElD,aAAW,OAAO,OAAO,KAAK,UAAU,GAAG;AACnC,UAAA,WAAW,WAAW,GAAG;AAC/B,UAAM,YAAY,QAAQ,KAAK,WAAW,GAAG;AAEzC,QAAA,aAAa,UAAU,SAAS,cAAc,QAAQ,QAAQ,KAAK,YAAY,WAAW;AAC5F,YAAM,OAAO,eAAe,UAAU,OAAO,YAAY,UAAU,MAAM,CAAC;AAE1D,sBAAA,GAAG,IAAI,EAAE,KAAK;AAAA,IAAA,WACrB,aAAa,UAAU,SAAS,eAAe,QAAQ,QAAQ,GAAG;AAC3D,sBAAA,GAAG,IAAI,mBAAmB,UAAU,OAAO,WAAW,UAAU,SAAS,CAAC;AAAA,IAAA,WACjF,aAAa,UAAU,SAAS,iBAAiB,YAAY,QAAQ,GAAG;AAC7E,UAAAC,GAAAA,MAAM,QAAQ,GAAG;AACnB,wBAAgB,GAAG,IAAI;AAAA,MAAA;AAGzB,sBAAgB,GAAG,IAAI,SAAS,IAAI,CAAC,gBAAgB;AACnD,eAAO,mBAAmB,aAAa,OAAO,WAAW,YAAY,WAAW,CAAC;AAAA,MAAA,CAClF;AAAA,IAAA,WACQ,aAAa,UAAU,SAAS,WAAW,QAAQ,QAAQ,GAAG;AACvE,YAAM,OAAO,eAAe,UAAU,OAAO,YAAY,qBAAqB,CAAC;AAE/D,sBAAA,GAAG,IAAI,EAAE,KAAK;AAAA,IAAA,OACzB;AACL,sBAAgB,GAAG,IAAI;AAAA,IAAA;AAAA,EACzB;AAGK,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,YAAY;AAAA,EACd;AACF;;"}