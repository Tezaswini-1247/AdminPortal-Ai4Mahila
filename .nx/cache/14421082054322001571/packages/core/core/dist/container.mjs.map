{"version":3,"file":"container.mjs","sources":["../src/container.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\r\n\r\nexport class Container implements Core.Container {\r\n  private registerMap = new Map<string, unknown>();\r\n\r\n  private serviceMap = new Map();\r\n\r\n  add(name: string, resolver: unknown) {\r\n    if (this.registerMap.has(name)) {\r\n      throw new Error(`Cannot register already registered service ${name}`);\r\n    }\r\n\r\n    this.registerMap.set(name, resolver);\r\n    return this;\r\n  }\r\n\r\n  get(name: string, args?: unknown) {\r\n    // TODO: handle singleton vs instantiation everytime\r\n    if (this.serviceMap.has(name)) {\r\n      return this.serviceMap.get(name);\r\n    }\r\n\r\n    if (this.registerMap.has(name)) {\r\n      const resolver = this.registerMap.get(name);\r\n\r\n      if (typeof resolver === 'function') {\r\n        this.serviceMap.set(name, resolver(this, args));\r\n      } else {\r\n        this.serviceMap.set(name, resolver);\r\n      }\r\n\r\n      return this.serviceMap.get(name);\r\n    }\r\n\r\n    throw new Error(`Could not resolve service ${name}`);\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAEO,MAAM,UAAoC;AAAA,EACvC,kCAAkB,IAAqB;AAAA,EAEvC,iCAAiB,IAAI;AAAA,EAE7B,IAAI,MAAc,UAAmB;AACnC,QAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC9B,YAAM,IAAI,MAAM,8CAA8C,IAAI,EAAE;AAAA,IAAA;AAGjE,SAAA,YAAY,IAAI,MAAM,QAAQ;AAC5B,WAAA;AAAA,EAAA;AAAA,EAGT,IAAI,MAAc,MAAgB;AAEhC,QAAI,KAAK,WAAW,IAAI,IAAI,GAAG;AACtB,aAAA,KAAK,WAAW,IAAI,IAAI;AAAA,IAAA;AAGjC,QAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC9B,YAAM,WAAW,KAAK,YAAY,IAAI,IAAI;AAEtC,UAAA,OAAO,aAAa,YAAY;AAClC,aAAK,WAAW,IAAI,MAAM,SAAS,MAAM,IAAI,CAAC;AAAA,MAAA,OACzC;AACA,aAAA,WAAW,IAAI,MAAM,QAAQ;AAAA,MAAA;AAG7B,aAAA,KAAK,WAAW,IAAI,IAAI;AAAA,IAAA;AAGjC,UAAM,IAAI,MAAM,6BAA6B,IAAI,EAAE;AAAA,EAAA;AAEvD;"}