{"version":3,"file":"cron.js","sources":["../../src/utils/cron.ts"],"sourcesContent":["import { isEmpty, negate } from 'lodash/fp';\r\n\r\nconst DATE_FUNCTIONS = [\r\n  'getSeconds',\r\n  'getMinutes',\r\n  'getHours',\r\n  'getDate',\r\n  'getMonth',\r\n  'getDay',\r\n] as const;\r\n\r\nconst INTEGER_REGEX = /^\\d+$/;\r\nconst STEP_REGEX = /^\\*\\/\\d+$/;\r\nconst COMPONENTS: {\r\n  limit: number;\r\n  zeroBasedIndices: boolean;\r\n  functionName: (typeof DATE_FUNCTIONS)[number];\r\n}[] = [\r\n  { limit: 60, zeroBasedIndices: true, functionName: 'getSeconds' },\r\n  { limit: 60, zeroBasedIndices: true, functionName: 'getMinutes' },\r\n  { limit: 24, zeroBasedIndices: true, functionName: 'getHours' },\r\n  { limit: 31, zeroBasedIndices: false, functionName: 'getDate' },\r\n  { limit: 12, zeroBasedIndices: false, functionName: 'getMonth' },\r\n  { limit: 7, zeroBasedIndices: true, functionName: 'getDay' },\r\n];\r\n\r\nconst shift = (component: string, index: number, date: Date) => {\r\n  if (component === '*') {\r\n    return '*';\r\n  }\r\n\r\n  const { limit, zeroBasedIndices, functionName } = COMPONENTS[index];\r\n  const offset = +!zeroBasedIndices;\r\n  const currentValue = date[functionName]();\r\n\r\n  if (INTEGER_REGEX.test(component)) {\r\n    return ((Number.parseInt(component, 10) + currentValue) % limit) + offset;\r\n  }\r\n\r\n  if (STEP_REGEX.test(component)) {\r\n    const [, step] = component.split('/');\r\n    const frequency = Math.floor(limit / Number(step));\r\n    const list = Array.from({ length: frequency }, (_, index) => index * Number(step));\r\n    return list.map((value) => ((value + currentValue) % limit) + offset).sort((a, b) => a - b);\r\n  }\r\n\r\n  // Unsupported syntax\r\n  return component;\r\n};\r\n\r\n/**\r\n * Simulate an interval by shifting a cron expression using the specified date.\r\n * @param {string} rule A cron expression you want to shift.\r\n * @param {Date} date The date that's gonna be used as the start of the \"interval\", it defaults to now.\r\n * @returns The shifted cron expression.\r\n */\r\nexport const shiftCronExpression = (rule: string, date = new Date()) => {\r\n  const components = rule.trim().split(' ').filter(negate(isEmpty));\r\n  const secondsIncluded = components.length === 6;\r\n  return components\r\n    .map((component, index) => shift(component, secondsIncluded ? index : index + 1, date))\r\n    .join(' ');\r\n};\r\n"],"names":["index","negate","isEmpty"],"mappings":";;;AAWA,MAAM,gBAAgB;AACtB,MAAM,aAAa;AACnB,MAAM,aAIA;AAAA,EACJ,EAAE,OAAO,IAAI,kBAAkB,MAAM,cAAc,aAAa;AAAA,EAChE,EAAE,OAAO,IAAI,kBAAkB,MAAM,cAAc,aAAa;AAAA,EAChE,EAAE,OAAO,IAAI,kBAAkB,MAAM,cAAc,WAAW;AAAA,EAC9D,EAAE,OAAO,IAAI,kBAAkB,OAAO,cAAc,UAAU;AAAA,EAC9D,EAAE,OAAO,IAAI,kBAAkB,OAAO,cAAc,WAAW;AAAA,EAC/D,EAAE,OAAO,GAAG,kBAAkB,MAAM,cAAc,SAAS;AAC7D;AAEA,MAAM,QAAQ,CAAC,WAAmB,OAAe,SAAe;AAC9D,MAAI,cAAc,KAAK;AACd,WAAA;AAAA,EAAA;AAGT,QAAM,EAAE,OAAO,kBAAkB,aAAa,IAAI,WAAW,KAAK;AAC5D,QAAA,SAAS,CAAC,CAAC;AACX,QAAA,eAAe,KAAK,YAAY,EAAE;AAEpC,MAAA,cAAc,KAAK,SAAS,GAAG;AACjC,YAAS,OAAO,SAAS,WAAW,EAAE,IAAI,gBAAgB,QAAS;AAAA,EAAA;AAGjE,MAAA,WAAW,KAAK,SAAS,GAAG;AAC9B,UAAM,CAAG,EAAA,IAAI,IAAI,UAAU,MAAM,GAAG;AACpC,UAAM,YAAY,KAAK,MAAM,QAAQ,OAAO,IAAI,CAAC;AACjD,UAAM,OAAO,MAAM,KAAK,EAAE,QAAQ,UAAA,GAAa,CAAC,GAAGA,WAAUA,SAAQ,OAAO,IAAI,CAAC;AACjF,WAAO,KAAK,IAAI,CAAC,WAAY,QAAQ,gBAAgB,QAAS,MAAM,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAAA,EAAA;AAIrF,SAAA;AACT;AAQO,MAAM,sBAAsB,CAAC,MAAc,OAAO,oBAAI,WAAW;AAChE,QAAA,aAAa,KAAK,OAAO,MAAM,GAAG,EAAE,OAAOC,UAAOC,GAAAA,OAAO,CAAC;AAC1D,QAAA,kBAAkB,WAAW,WAAW;AAC9C,SAAO,WACJ,IAAI,CAAC,WAAW,UAAU,MAAM,WAAW,kBAAkB,QAAQ,QAAQ,GAAG,IAAI,CAAC,EACrF,KAAK,GAAG;AACb;;"}