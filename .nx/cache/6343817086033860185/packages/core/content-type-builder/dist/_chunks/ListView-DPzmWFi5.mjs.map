{"version":3,"file":"ListView-DPzmWFi5.mjs","sources":["../../admin/src/components/BoxWrapper.tsx","../../admin/src/components/Tr.tsx","../../admin/src/components/ComponentList.tsx","../../admin/src/components/ComponentCard/ComponentIcon/ComponentIcon.tsx","../../admin/src/components/ComponentCard/ComponentCard.tsx","../../admin/src/components/DynamicZoneList.tsx","../../admin/src/components/NestedFooter.tsx","../../admin/src/components/List.tsx","../../admin/src/icons/Curve.tsx","../../admin/src/components/DisplayedType.tsx","../../admin/src/components/UpperFirst.tsx","../../admin/src/components/ListRow.tsx","../../admin/src/utils/getAttributeDisplayedType.ts","../../admin/src/pages/ListView/LinkToCMSettingsView.tsx","../../admin/src/pages/ListView/ListView.tsx"],"sourcesContent":["import { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nexport const BoxWrapper = styled(Box)`\r\n  table {\r\n    width: 100%;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  thead {\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n\r\n    tr {\r\n      border-top: 0;\r\n    }\r\n  }\r\n\r\n  tr {\r\n    border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n\r\n    & td,\r\n    & th {\r\n      padding: ${({ theme }) => theme.spaces[4]};\r\n    }\r\n\r\n    & td:first-of-type,\r\n    & th:first-of-type {\r\n      padding: 0 ${({ theme }) => theme.spaces[1]};\r\n    }\r\n  }\r\n\r\n  th,\r\n  td {\r\n    vertical-align: middle;\r\n    text-align: left;\r\n    color: ${({ theme }) => theme.colors.neutral600};\r\n    outline-offset: -4px;\r\n  }\r\n`;\r\n","import { styled } from 'styled-components';\r\n\r\n// Keep component-row for css specificity\r\nexport const Tr = styled.tr<{\r\n  $isFromDynamicZone?: boolean;\r\n  $isChildOfDynamicZone?: boolean;\r\n}>`\r\n  &.component-row,\r\n  &.dynamiczone-row {\r\n    position: relative;\r\n    border-top: none !important;\r\n\r\n    table tr:first-child {\r\n      border-top: none;\r\n    }\r\n\r\n    > td:first-of-type {\r\n      padding: 0 0 0 2rem;\r\n      position: relative;\r\n\r\n      &::before {\r\n        content: '';\r\n        width: 0.4rem;\r\n        height: calc(100% - 40px);\r\n        position: absolute;\r\n        top: -7px;\r\n        left: 2.6rem;\r\n        border-radius: 4px;\r\n\r\n        ${({ $isFromDynamicZone, $isChildOfDynamicZone, theme }) => {\r\n          if ($isChildOfDynamicZone) {\r\n            return `background-color: ${theme.colors.primary200};`;\r\n          }\r\n\r\n          if ($isFromDynamicZone) {\r\n            return `background-color: ${theme.colors.primary200};`;\r\n          }\r\n\r\n          return `background: ${theme.colors.neutral150};`;\r\n        }}\r\n      }\r\n    }\r\n  }\r\n\r\n  &.dynamiczone-row > td:first-of-type {\r\n    padding: 0;\r\n  }\r\n`;\r\n","import get from 'lodash/get';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\n\r\nimport { List } from './List';\r\nimport { Tr } from './Tr';\r\n\r\nimport type { Internal } from '@strapi/types';\r\n\r\ninterface ComponentListProps {\r\n  component: Internal.UID.Component;\r\n  customRowComponent: any;\r\n  firstLoopComponentUid?: string;\r\n  isFromDynamicZone?: boolean;\r\n  isNestedInDZComponent?: boolean;\r\n}\r\n\r\nexport const ComponentList = ({\r\n  customRowComponent,\r\n  component,\r\n  isFromDynamicZone = false,\r\n  isNestedInDZComponent = false,\r\n  firstLoopComponentUid,\r\n}: ComponentListProps) => {\r\n  const { modifiedData } = useDataManager();\r\n  const {\r\n    schema: { attributes },\r\n  } = get(modifiedData, ['components', component], {\r\n    schema: { attributes: [] },\r\n  });\r\n\r\n  return (\r\n    <Tr $isChildOfDynamicZone={isFromDynamicZone} className=\"component-row\">\r\n      <td colSpan={12}>\r\n        <List\r\n          customRowComponent={customRowComponent}\r\n          items={attributes}\r\n          targetUid={component}\r\n          firstLoopComponentUid={firstLoopComponentUid || component}\r\n          editTarget=\"components\"\r\n          isFromDynamicZone={isFromDynamicZone}\r\n          isNestedInDZComponent={isNestedInDZComponent}\r\n          isSub\r\n          secondLoopComponentUid={firstLoopComponentUid ? component : null}\r\n        />\r\n      </td>\r\n    </Tr>\r\n  );\r\n};\r\n","import { Flex } from '@strapi/design-system';\r\n\r\nimport { COMPONENT_ICONS } from '../../IconPicker/constants';\r\n\r\ninterface ComponentIconProps {\r\n  isActive?: boolean;\r\n  icon?: keyof typeof COMPONENT_ICONS;\r\n}\r\n\r\nexport const ComponentIcon = ({ isActive = false, icon = 'dashboard' }: ComponentIconProps) => {\r\n  const Icon = COMPONENT_ICONS[icon] || COMPONENT_ICONS.dashboard;\r\n\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      background={isActive ? 'primary200' : 'neutral200'}\r\n      justifyContent=\"center\"\r\n      height={8}\r\n      width={8}\r\n      borderRadius=\"50%\"\r\n    >\r\n      <Icon height=\"2rem\" width=\"2rem\" />\r\n    </Flex>\r\n  );\r\n};\r\n","import { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { Cross } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../../hooks/useDataManager';\r\n\r\nimport { ComponentIcon } from './ComponentIcon';\r\n\r\ninterface ComponentCardProps {\r\n  component: string;\r\n  dzName: string;\r\n  index: number;\r\n  isActive?: boolean;\r\n  isInDevelopmentMode?: boolean;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst CloseButton = styled(Box)`\r\n  position: absolute;\r\n  display: none;\r\n  top: 5px;\r\n  right: 0.8rem;\r\n\r\n  svg {\r\n    width: 1rem;\r\n    height: 1rem;\r\n\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.primary600};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ComponentBox = styled(Flex)`\r\n  width: 14rem;\r\n  height: 8rem;\r\n  position: relative;\r\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\r\n  background: ${({ theme }) => theme.colors.neutral100};\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  max-width: 100%;\r\n\r\n  &.active,\r\n  &:focus,\r\n  &:hover {\r\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\r\n    background: ${({ theme }) => theme.colors.primary100};\r\n    color: ${({ theme }) => theme.colors.primary600};\r\n\r\n    ${CloseButton} {\r\n      display: block;\r\n    }\r\n\r\n    /* > ComponentIcon */\r\n    > div:first-child {\r\n      background: ${({ theme }) => theme.colors.primary200};\r\n      color: ${({ theme }) => theme.colors.primary600};\r\n\r\n      svg {\r\n        path {\r\n          fill: ${({ theme }) => theme.colors.primary600};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ComponentCard = ({\r\n  component,\r\n  dzName,\r\n  index,\r\n  isActive = false,\r\n  isInDevelopmentMode = false,\r\n  onClick,\r\n}: ComponentCardProps) => {\r\n  const { modifiedData, removeComponentFromDynamicZone } = useDataManager();\r\n  const {\r\n    schema: { icon, displayName },\r\n  } = get(modifiedData, ['components', component], { schema: {} });\r\n\r\n  const onClose = (e: any) => {\r\n    e.stopPropagation();\r\n    removeComponentFromDynamicZone(dzName, index);\r\n  };\r\n\r\n  return (\r\n    <ComponentBox\r\n      alignItems=\"center\"\r\n      direction=\"column\"\r\n      className={isActive ? 'active' : ''}\r\n      borderRadius=\"borderRadius\"\r\n      justifyContent=\"center\"\r\n      paddingLeft={4}\r\n      paddingRight={4}\r\n      shrink={0}\r\n      onClick={onClick}\r\n      role=\"tab\"\r\n      tabIndex={isActive ? 0 : -1}\r\n      cursor=\"pointer\"\r\n      aria-selected={isActive}\r\n      aria-controls={`dz-${dzName}-panel-${index}`}\r\n      id={`dz-${dzName}-tab-${index}`}\r\n    >\r\n      <ComponentIcon icon={icon} isActive={isActive} />\r\n\r\n      <Box marginTop={1} maxWidth=\"100%\">\r\n        <Typography variant=\"pi\" fontWeight=\"bold\" ellipsis>\r\n          {displayName}\r\n        </Typography>\r\n      </Box>\r\n\r\n      {isInDevelopmentMode && (\r\n        <CloseButton tag=\"button\" onClick={onClose}>\r\n          <Cross />\r\n        </CloseButton>\r\n      )}\r\n    </ComponentBox>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\nimport { ComponentCard } from './ComponentCard';\r\nimport { ComponentList } from './ComponentList';\r\nimport { Tr } from './Tr';\r\n\r\nimport type { Internal } from '@strapi/types';\r\n\r\ninterface DynamicZoneListProps {\r\n  addComponent: (name?: string) => void;\r\n  components: Array<string>;\r\n  customRowComponent?: () => void;\r\n  name?: string;\r\n  targetUid: Internal.UID.Component;\r\n}\r\n\r\nconst StyledAddIcon = styled(Plus)`\r\n  width: 3.2rem;\r\n  height: 3.2rem;\r\n  padding: 0.9rem;\r\n  border-radius: 6.4rem;\r\n  background: ${({ theme }) => theme.colors.primary100};\r\n  path {\r\n    fill: ${({ theme }) => theme.colors.primary600};\r\n  }\r\n`;\r\n\r\nconst FixedBox = styled(Box)`\r\n  height: 9rem;\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst ScrollableStack = styled(Flex)`\r\n  width: 100%;\r\n  overflow-x: auto;\r\n`;\r\n\r\nconst ComponentContentBox = styled(Box)`\r\n  padding-top: 9rem;\r\n`;\r\n\r\nconst ComponentStack = styled(Flex)`\r\n  flex-shrink: 0;\r\n  width: 14rem;\r\n  height: 8rem;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const DynamicZoneList = ({\r\n  customRowComponent,\r\n  components = [],\r\n  addComponent,\r\n  name,\r\n  targetUid,\r\n}: DynamicZoneListProps) => {\r\n  const { isInDevelopmentMode } = useDataManager();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const { formatMessage } = useIntl();\r\n\r\n  const toggle = (tab: number) => {\r\n    if (activeTab !== tab) {\r\n      setActiveTab(tab);\r\n    }\r\n  };\r\n\r\n  const handleClickAdd = () => {\r\n    addComponent(name);\r\n  };\r\n\r\n  return (\r\n    <Tr className=\"dynamiczone-row\" $isFromDynamicZone>\r\n      <td colSpan={12}>\r\n        <FixedBox paddingLeft={8}>\r\n          <ScrollableStack gap={2}>\r\n            {isInDevelopmentMode && (\r\n              <button type=\"button\" onClick={handleClickAdd}>\r\n                <ComponentStack direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n                  <StyledAddIcon />\r\n                  <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"primary600\">\r\n                    {formatMessage({\r\n                      id: getTrad('button.component.add'),\r\n                      defaultMessage: 'Add a component',\r\n                    })}\r\n                  </Typography>\r\n                </ComponentStack>\r\n              </button>\r\n            )}\r\n            <Flex role=\"tablist\" gap={2}>\r\n              {components.map((component, index) => {\r\n                return (\r\n                  <ComponentCard\r\n                    key={component}\r\n                    dzName={name || ''}\r\n                    index={index}\r\n                    component={component}\r\n                    isActive={activeTab === index}\r\n                    isInDevelopmentMode={isInDevelopmentMode}\r\n                    onClick={() => toggle(index)}\r\n                  />\r\n                );\r\n              })}\r\n            </Flex>\r\n          </ScrollableStack>\r\n        </FixedBox>\r\n        <ComponentContentBox>\r\n          {components.map((component, index) => {\r\n            const props = {\r\n              customRowComponent,\r\n              component,\r\n            };\r\n\r\n            return (\r\n              <Box\r\n                id={`dz-${name}-panel-${index}`}\r\n                role=\"tabpanel\"\r\n                aria-labelledby={`dz-${name}-tab-${index}`}\r\n                key={component}\r\n                style={{ display: activeTab === index ? 'block' : 'none' }}\r\n              >\r\n                <table>\r\n                  <tbody>\r\n                    <ComponentList\r\n                      {...props}\r\n                      isFromDynamicZone\r\n                      component={targetUid}\r\n                      key={component}\r\n                    />\r\n                  </tbody>\r\n                </table>\r\n              </Box>\r\n            );\r\n          })}\r\n        </ComponentContentBox>\r\n      </td>\r\n    </Tr>\r\n  );\r\n};\r\n","import type { ReactNode } from 'react';\r\n\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst IconBox = styled(Box)`\r\n  height: 2.4rem;\r\n  width: 2.4rem;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  svg {\r\n    height: 1rem;\r\n    width: 1rem;\r\n  }\r\n\r\n  svg path {\r\n    fill: ${({ theme, color }) => theme.colors[`${color}600`]};\r\n  }\r\n`;\r\n\r\nconst ButtonBox = styled(Box)`\r\n  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};\r\n  display: block;\r\n  width: 100%;\r\n  border: none;\r\n  position: relative;\r\n  left: -0.4rem;\r\n`;\r\n\r\ninterface NestedTFooterProps {\r\n  color: string;\r\n  children: ReactNode;\r\n  icon: ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const NestedTFooter = ({ children, icon, color, ...props }: NestedTFooterProps) => {\r\n  return (\r\n    <ButtonBox paddingBottom={4} paddingTop={4} tag=\"button\" type=\"button\" {...props}>\r\n      <Flex>\r\n        <IconBox color={color} aria-hidden background={`${color}200`}>\r\n          {icon}\r\n        </IconBox>\r\n        <Box paddingLeft={3}>\r\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor={`${color}600`}>\r\n            {children}\r\n          </Typography>\r\n        </Box>\r\n      </Flex>\r\n    </ButtonBox>\r\n  );\r\n};\r\n","import { ComponentType, Fragment } from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  EmptyStateLayout,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  TFooter,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\nimport { useFormModalNavigation } from '../hooks/useFormModalNavigation';\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\nimport { BoxWrapper } from './BoxWrapper';\r\nimport { ComponentList } from './ComponentList';\r\nimport { DynamicZoneList } from './DynamicZoneList';\r\nimport { NestedTFooter } from './NestedFooter';\r\n\r\nimport type { SchemaType } from '../types';\r\nimport type { Internal } from '@strapi/types';\r\n\r\ninterface ListProps {\r\n  addComponentToDZ?: () => void;\r\n  customRowComponent: ComponentType<any>;\r\n  editTarget: SchemaType;\r\n  firstLoopComponentUid?: string;\r\n  isFromDynamicZone?: boolean;\r\n  isNestedInDZComponent?: boolean;\r\n  isMain?: boolean;\r\n  items: any[];\r\n  secondLoopComponentUid?: string | null;\r\n  targetUid?: Internal.UID.Schema;\r\n  isSub?: boolean;\r\n}\r\n\r\nexport const List = ({\r\n  addComponentToDZ,\r\n  customRowComponent,\r\n  editTarget,\r\n  firstLoopComponentUid,\r\n  isFromDynamicZone = false,\r\n  isMain = false,\r\n  isNestedInDZComponent = false,\r\n  isSub = false,\r\n  items = [],\r\n  secondLoopComponentUid,\r\n  targetUid,\r\n}: ListProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { isInDevelopmentMode, modifiedData, isInContentTypeView } = useDataManager();\r\n\r\n  const { onOpenModalAddField } = useFormModalNavigation();\r\n  const onClickAddField = () => {\r\n    trackUsage('hasClickedCTBAddFieldBanner');\r\n\r\n    onOpenModalAddField({ forTarget: editTarget, targetUid });\r\n  };\r\n\r\n  if (!targetUid) {\r\n    return (\r\n      <Table colCount={2} rowCount={2}>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\r\n              </Typography>\r\n            </Th>\r\n            <Th>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\r\n              </Typography>\r\n            </Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          <Tr>\r\n            <Td colSpan={2}>\r\n              <EmptyStateLayout\r\n                content={formatMessage({\r\n                  id: getTrad('table.content.create-first-content-type'),\r\n                  defaultMessage: 'Create your first Collection-Type',\r\n                })}\r\n                hasRadius\r\n                icon={<EmptyDocuments width=\"16rem\" />}\r\n              />\r\n            </Td>\r\n          </Tr>\r\n        </Tbody>\r\n      </Table>\r\n    );\r\n  }\r\n\r\n  if (items.length === 0 && isMain) {\r\n    return (\r\n      <Table colCount={2} rowCount={2}>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\r\n              </Typography>\r\n            </Th>\r\n            <Th>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\r\n              </Typography>\r\n            </Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          <Tr>\r\n            <Td colSpan={2}>\r\n              <EmptyStateLayout\r\n                action={\r\n                  <Button\r\n                    onClick={onClickAddField}\r\n                    size=\"L\"\r\n                    startIcon={<Plus />}\r\n                    variant=\"secondary\"\r\n                  >\r\n                    {formatMessage({\r\n                      id: getTrad('table.button.no-fields'),\r\n                      defaultMessage: 'Add new field',\r\n                    })}\r\n                  </Button>\r\n                }\r\n                content={formatMessage(\r\n                  isInContentTypeView\r\n                    ? {\r\n                        id: getTrad('table.content.no-fields.collection-type'),\r\n                        defaultMessage: 'Add your first field to this Collection-Type',\r\n                      }\r\n                    : {\r\n                        id: getTrad('table.content.no-fields.component'),\r\n                        defaultMessage: 'Add your first field to this component',\r\n                      }\r\n                )}\r\n                hasRadius\r\n                icon={<EmptyDocuments width=\"16rem\" />}\r\n              />\r\n            </Td>\r\n          </Tr>\r\n        </Tbody>\r\n      </Table>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <BoxWrapper>\r\n      <Box\r\n        paddingLeft={6}\r\n        paddingRight={isMain ? 6 : 0}\r\n        {...(isMain && { style: { overflowX: 'auto' } })}\r\n      >\r\n        <table>\r\n          {isMain && (\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral800\">\r\n                    {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\r\n                  </Typography>\r\n                </th>\r\n                <th colSpan={2}>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral800\">\r\n                    {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\r\n                  </Typography>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n          )}\r\n          <tbody>\r\n            {items.map((item) => {\r\n              const { type } = item;\r\n              const CustomRow = customRowComponent;\r\n\r\n              return (\r\n                <Fragment key={item.name}>\r\n                  <CustomRow\r\n                    {...item}\r\n                    isNestedInDZComponent={isNestedInDZComponent}\r\n                    targetUid={targetUid}\r\n                    editTarget={editTarget}\r\n                    firstLoopComponentUid={firstLoopComponentUid}\r\n                    isFromDynamicZone={isFromDynamicZone}\r\n                    secondLoopComponentUid={secondLoopComponentUid}\r\n                  />\r\n\r\n                  {type === 'component' && (\r\n                    <ComponentList\r\n                      {...item}\r\n                      customRowComponent={customRowComponent}\r\n                      targetUid={targetUid}\r\n                      isNestedInDZComponent={isFromDynamicZone}\r\n                      editTarget={editTarget}\r\n                      firstLoopComponentUid={firstLoopComponentUid}\r\n                    />\r\n                  )}\r\n\r\n                  {type === 'dynamiczone' && (\r\n                    <DynamicZoneList\r\n                      {...item}\r\n                      customRowComponent={customRowComponent}\r\n                      addComponent={addComponentToDZ}\r\n                      targetUid={targetUid}\r\n                    />\r\n                  )}\r\n                </Fragment>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </Box>\r\n\r\n      {isMain && isInDevelopmentMode && (\r\n        <TFooter icon={<Plus />} onClick={onClickAddField}>\r\n          {formatMessage({\r\n            id: getTrad(\r\n              `form.button.add.field.to.${\r\n                modifiedData.contentType\r\n                  ? modifiedData.contentType.schema.kind\r\n                  : editTarget || 'collectionType'\r\n              }`\r\n            ),\r\n            defaultMessage: 'Add another field',\r\n          })}\r\n        </TFooter>\r\n      )}\r\n      {isSub && isInDevelopmentMode && !isFromDynamicZone && (\r\n        <NestedTFooter\r\n          icon={<Plus />}\r\n          onClick={onClickAddField}\r\n          color={isFromDynamicZone ? 'primary' : 'neutral'}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad(`form.button.add.field.to.component`),\r\n            defaultMessage: 'Add another field',\r\n          })}\r\n        </NestedTFooter>\r\n      )}\r\n    </BoxWrapper>\r\n  );\r\n};\r\n","import { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst StyledBox = styled(Box)`\r\n  position: absolute;\r\n  left: -1.8rem;\r\n  top: 0px;\r\n\r\n  &:before {\r\n    content: '';\r\n    width: 0.4rem;\r\n    height: 1.2rem;\r\n    background: ${({ theme, color }) => theme.colors[color!]};\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n  position: relative;\r\n  flex-shrink: 0;\r\n  transform: translate(-0.5px, -1px);\r\n\r\n  * {\r\n    fill: ${({ theme, color }) => theme.colors[color!]};\r\n  }\r\n`;\r\n\r\ninterface CurveProps {\r\n  color: string;\r\n}\r\n\r\nexport const Curve = (props: CurveProps) => (\r\n  <StyledBox>\r\n    <Svg\r\n      width=\"20\"\r\n      height=\"23\"\r\n      viewBox=\"0 0 20 23\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      {...props}\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\r\n      />\r\n    </Svg>\r\n  </StyledBox>\r\n);\r\n","import { Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\ntype DisplayedTypeProps = {\r\n  type: string;\r\n  customField?: string | null;\r\n  repeatable?: boolean;\r\n};\r\n\r\nexport const DisplayedType = ({\r\n  type,\r\n  customField = null,\r\n  repeatable = false,\r\n}: DisplayedTypeProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  let readableType = type;\r\n\r\n  if (['integer', 'biginteger', 'float', 'decimal'].includes(type)) {\r\n    readableType = 'number';\r\n  } else if (['string'].includes(type)) {\r\n    readableType = 'text';\r\n  }\r\n\r\n  if (customField) {\r\n    return (\r\n      <Typography>\r\n        {formatMessage({\r\n          id: getTrad('attribute.customField'),\r\n          defaultMessage: 'Custom field',\r\n        })}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"neutral800\">\r\n      {formatMessage({\r\n        id: getTrad(`attribute.${readableType}`),\r\n        defaultMessage: type,\r\n      })}\r\n      &nbsp;\r\n      {repeatable &&\r\n        formatMessage({\r\n          id: getTrad('component.repeatable'),\r\n          defaultMessage: '(repeatable)',\r\n        })}\r\n    </Typography>\r\n  );\r\n};\r\n","import upperFirst from 'lodash/upperFirst';\r\n\r\nexport const UpperFirst = ({ content }: { content: string }) => <>{upperFirst(content)}</>;\r\n","import { memo } from 'react';\r\n\r\nimport { Box, Flex, IconButton, Typography } from '@strapi/design-system';\r\nimport { Lock, Pencil, Trash } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../hooks/useDataManager';\r\nimport { Curve } from '../icons/Curve';\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\nimport { AttributeIcon, IconByType } from './AttributeIcon';\r\nimport { DisplayedType } from './DisplayedType';\r\nimport { UpperFirst } from './UpperFirst';\r\n\r\nexport const BoxWrapper = styled(Box)`\r\n  position: relative;\r\n`;\r\n\r\ntype ListRowProps = {\r\n  configurable?: boolean;\r\n  customField?: string | null;\r\n  editTarget: string;\r\n  firstLoopComponentUid?: string | null;\r\n  isFromDynamicZone?: boolean;\r\n  name: string;\r\n  onClick: (\r\n    editTarget: string,\r\n    targetUid: string | null,\r\n    attributeName: string,\r\n    attributeType: string,\r\n    customField: string | null\r\n  ) => void;\r\n  relation?: string;\r\n  repeatable?: boolean;\r\n  secondLoopComponentUid?: string | null;\r\n  target?: string | null;\r\n  targetUid?: string | null;\r\n  type: IconByType;\r\n};\r\n\r\nexport const ListRow = memo(\r\n  ({\r\n    configurable = true,\r\n    customField = null,\r\n    editTarget,\r\n    firstLoopComponentUid = null,\r\n    isFromDynamicZone = false,\r\n    name,\r\n    onClick,\r\n    relation = '',\r\n    repeatable = false,\r\n    secondLoopComponentUid = null,\r\n    target = null,\r\n    targetUid = null,\r\n    type,\r\n  }: ListRowProps) => {\r\n    const { contentTypes, isInDevelopmentMode, removeAttribute } = useDataManager();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const isMorph = type === 'relation' && relation.includes('morph');\r\n    const ico = ['integer', 'biginteger', 'float', 'decimal'].includes(type) ? 'number' : type;\r\n\r\n    const contentType = get(contentTypes, [target as keyof typeof contentTypes], {});\r\n    const contentTypeFriendlyName = get(contentType, ['schema', 'displayName'], '');\r\n    const isPluginContentType = get(contentType, 'plugin');\r\n\r\n    const src = target ? 'relation' : ico;\r\n\r\n    const handleClick = () => {\r\n      if (isMorph) {\r\n        return;\r\n      }\r\n\r\n      if (configurable !== false) {\r\n        const attrType = type;\r\n\r\n        onClick(\r\n          // Tells where the attribute is located in the main modifiedData object : contentType, component or components\r\n          editTarget,\r\n          // main data type uid\r\n          secondLoopComponentUid || firstLoopComponentUid || targetUid,\r\n          // Name of the attribute\r\n          name,\r\n          // Type of the attribute\r\n          attrType,\r\n          customField\r\n        );\r\n      }\r\n    };\r\n    let loopNumber;\r\n\r\n    if (secondLoopComponentUid && firstLoopComponentUid) {\r\n      loopNumber = 2;\r\n    } else if (firstLoopComponentUid) {\r\n      loopNumber = 1;\r\n    } else {\r\n      loopNumber = 0;\r\n    }\r\n\r\n    return (\r\n      <BoxWrapper\r\n        tag=\"tr\"\r\n        onClick={isInDevelopmentMode && configurable && !isMorph ? handleClick : undefined}\r\n      >\r\n        <td style={{ position: 'relative' }}>\r\n          {loopNumber !== 0 && <Curve color={isFromDynamicZone ? 'primary200' : 'neutral150'} />}\r\n          <Flex paddingLeft={2} gap={4}>\r\n            <AttributeIcon type={src} customField={customField} />\r\n            <Typography textColor=\"neutral800\" fontWeight=\"bold\">\r\n              {name}\r\n            </Typography>\r\n          </Flex>\r\n        </td>\r\n        <td>\r\n          {target ? (\r\n            <Typography textColor=\"neutral800\">\r\n              {formatMessage({\r\n                id: getTrad(\r\n                  `modelPage.attribute.${isMorph ? 'relation-polymorphic' : 'relationWith'}`\r\n                ),\r\n                defaultMessage: 'Relation with',\r\n              })}\r\n              &nbsp;\r\n              <span style={{ fontStyle: 'italic' }}>\r\n                <UpperFirst content={contentTypeFriendlyName} />\r\n                &nbsp;\r\n                {isPluginContentType &&\r\n                  `(${formatMessage({\r\n                    id: getTrad(`from`),\r\n                    defaultMessage: 'from',\r\n                  })}: ${isPluginContentType})`}\r\n              </span>\r\n            </Typography>\r\n          ) : (\r\n            <DisplayedType type={type} customField={customField} repeatable={repeatable} />\r\n          )}\r\n        </td>\r\n        <td>\r\n          {isInDevelopmentMode ? (\r\n            <Flex justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\r\n              {configurable ? (\r\n                <Flex gap={1}>\r\n                  {!isMorph && (\r\n                    <IconButton\r\n                      onClick={handleClick}\r\n                      label={`${formatMessage({\r\n                        id: 'app.utils.edit',\r\n                        defaultMessage: 'Edit',\r\n                      })} ${name}`}\r\n                      variant=\"ghost\"\r\n                    >\r\n                      <Pencil />\r\n                    </IconButton>\r\n                  )}\r\n                  <IconButton\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      removeAttribute(\r\n                        editTarget,\r\n                        name,\r\n                        secondLoopComponentUid || firstLoopComponentUid || ''\r\n                      );\r\n                    }}\r\n                    label={`${formatMessage({\r\n                      id: 'global.delete',\r\n                      defaultMessage: 'Delete',\r\n                    })} ${name}`}\r\n                    variant=\"ghost\"\r\n                  >\r\n                    <Trash />\r\n                  </IconButton>\r\n                </Flex>\r\n              ) : (\r\n                <Lock />\r\n              )}\r\n            </Flex>\r\n          ) : (\r\n            /*\r\n            In production mode the edit icons aren't visible, therefore\r\n            we need to reserve the same space, otherwise the height of the\r\n            row might collapse, leading to bad positioned curve icons\r\n          */\r\n            <Box height=\"3.2rem\" />\r\n          )}\r\n        </td>\r\n      </BoxWrapper>\r\n    );\r\n  }\r\n);\r\n","export const getAttributeDisplayedType = (type: string) => {\r\n  let displayedType;\r\n\r\n  switch (type) {\r\n    case 'date':\r\n    case 'datetime':\r\n    case 'time':\r\n    case 'timestamp':\r\n      displayedType = 'date';\r\n      break;\r\n    case 'integer':\r\n    case 'biginteger':\r\n    case 'decimal':\r\n    case 'float':\r\n      displayedType = 'number';\r\n      break;\r\n    case 'string':\r\n    case 'text':\r\n      displayedType = 'text';\r\n      break;\r\n    case '':\r\n      displayedType = 'relation';\r\n      break;\r\n    default:\r\n      displayedType = type;\r\n  }\r\n\r\n  return displayedType;\r\n};\r\n","import { memo } from 'react';\r\n\r\nimport { type Permission, useRBAC } from '@strapi/admin/strapi-admin';\r\nimport { Button } from '@strapi/design-system';\r\nimport { ListPlus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst cmPermissions: Record<string, Permission[]> = {\r\n  collectionTypesConfigurations: [\r\n    {\r\n      action: 'plugin::content-manager.collection-types.configure-view',\r\n      subject: null,\r\n    },\r\n  ],\r\n  componentsConfigurations: [\r\n    {\r\n      action: 'plugin::content-manager.components.configure-layout',\r\n      subject: null,\r\n    },\r\n  ],\r\n  singleTypesConfigurations: [\r\n    {\r\n      action: 'plugin::content-manager.single-types.configure-view',\r\n      subject: null,\r\n    },\r\n  ],\r\n};\r\n\r\ninterface LinkToCMSettingsViewProps {\r\n  disabled: boolean;\r\n  contentTypeKind?: string;\r\n  isInContentTypeView?: boolean;\r\n  isTemporary?: boolean;\r\n  targetUid?: string;\r\n}\r\n\r\nexport const LinkToCMSettingsView = memo(\r\n  ({\r\n    disabled,\r\n    isTemporary = false,\r\n    isInContentTypeView = true,\r\n    contentTypeKind = 'collectionType',\r\n    targetUid = '',\r\n  }: LinkToCMSettingsViewProps) => {\r\n    const { formatMessage } = useIntl();\r\n    const navigate = useNavigate();\r\n    const { collectionTypesConfigurations, componentsConfigurations, singleTypesConfigurations } =\r\n      cmPermissions;\r\n    const label = formatMessage({\r\n      id: 'content-type-builder.form.button.configure-view',\r\n      defaultMessage: 'Configure the view',\r\n    });\r\n    let permissionsToApply = collectionTypesConfigurations;\r\n\r\n    const handleClick = () => {\r\n      if (isTemporary) {\r\n        return false;\r\n      }\r\n\r\n      if (isInContentTypeView) {\r\n        navigate(`/content-manager/collection-types/${targetUid}/configurations/edit`);\r\n      } else {\r\n        navigate(`/content-manager/components/${targetUid}/configurations/edit`);\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    if (isInContentTypeView && contentTypeKind === 'singleType') {\r\n      permissionsToApply = singleTypesConfigurations;\r\n    }\r\n\r\n    if (!isInContentTypeView) {\r\n      permissionsToApply = componentsConfigurations;\r\n    }\r\n    const { isLoading, allowedActions } = useRBAC({\r\n      viewConfig: permissionsToApply,\r\n    });\r\n\r\n    if (isLoading) {\r\n      return null;\r\n    }\r\n\r\n    if (!allowedActions.canConfigureView && !allowedActions.canConfigureLayout) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        startIcon={<ListPlus />}\r\n        variant=\"tertiary\"\r\n        onClick={handleClick}\r\n        disabled={isTemporary || disabled}\r\n      >\r\n        {label}\r\n      </Button>\r\n    );\r\n  }\r\n);\r\n","import { BackButton, useTracking, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box, Button, Flex } from '@strapi/design-system';\r\nimport { Check, Pencil, Plus } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport isEqual from 'lodash/isEqual';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\nimport { unstable_usePrompt as usePrompt, useMatch } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { List } from '../../components/List';\r\nimport { ListRow } from '../../components/ListRow';\r\nimport { useDataManager } from '../../hooks/useDataManager';\r\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\r\nimport { getAttributeDisplayedType } from '../../utils/getAttributeDisplayedType';\r\nimport { getTrad } from '../../utils/getTrad';\r\n\r\nimport { LinkToCMSettingsView } from './LinkToCMSettingsView';\r\n\r\n/* eslint-disable indent */\r\n\r\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\r\n  overflow-wrap: anywhere;\r\n`;\r\n\r\nconst ListView = () => {\r\n  const { initialData, modifiedData, isInDevelopmentMode, isInContentTypeView, submitData } =\r\n    useDataManager();\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n\r\n  const match = useMatch('/plugins/content-type-builder/:kind/:currentUID');\r\n\r\n  const {\r\n    onOpenModalAddComponentsToDZ,\r\n    onOpenModalAddField,\r\n    onOpenModalEditField,\r\n    onOpenModalEditSchema,\r\n    onOpenModalEditCustomField,\r\n  } = useFormModalNavigation();\r\n\r\n  const firstMainDataPath = isInContentTypeView ? 'contentType' : 'component';\r\n  const mainDataTypeAttributesPath = [firstMainDataPath, 'schema', 'attributes'];\r\n  const targetUid = get(modifiedData, [firstMainDataPath, 'uid']);\r\n  const isTemporary = get(modifiedData, [firstMainDataPath, 'isTemporary'], false);\r\n  const contentTypeKind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], null);\r\n\r\n  const attributes = get(modifiedData, mainDataTypeAttributesPath, []);\r\n  const isFromPlugin = has(initialData, [firstMainDataPath, 'plugin']);\r\n  const hasModelBeenModified = !isEqual(modifiedData, initialData);\r\n\r\n  const forTarget = isInContentTypeView ? 'contentType' : 'component';\r\n\r\n  const handleClickAddComponentToDZ = (dynamicZoneTarget?: string) => {\r\n    onOpenModalAddComponentsToDZ({ dynamicZoneTarget, targetUid });\r\n  };\r\n\r\n  const handleClickEditField = async (\r\n    forTarget: string,\r\n    targetUid: string,\r\n    attributeName: string,\r\n    type: string,\r\n    customField: any\r\n  ) => {\r\n    const attributeType = getAttributeDisplayedType(type);\r\n    const step = type === 'component' ? '2' : null;\r\n\r\n    if (customField) {\r\n      onOpenModalEditCustomField({\r\n        forTarget,\r\n        targetUid,\r\n        attributeName,\r\n        attributeType,\r\n        customFieldUid: customField,\r\n      });\r\n    } else {\r\n      onOpenModalEditField({\r\n        forTarget,\r\n        targetUid,\r\n        attributeName,\r\n        attributeType,\r\n        step,\r\n      });\r\n    }\r\n  };\r\n\r\n  let label = get(modifiedData, [firstMainDataPath, 'schema', 'displayName'], '');\r\n  const kind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], '');\r\n\r\n  const isCreatingFirstContentType = match?.params.currentUID === 'create-content-type';\r\n\r\n  if (!label && isCreatingFirstContentType) {\r\n    label = formatMessage({\r\n      id: getTrad('button.model.create'),\r\n      defaultMessage: 'Create new collection type',\r\n    });\r\n  }\r\n\r\n  const onEdit = () => {\r\n    const contentType = kind || firstMainDataPath;\r\n\r\n    if (contentType === 'collectionType') {\r\n      trackUsage('willEditNameOfContentType');\r\n    }\r\n    if (contentType === 'singleType') {\r\n      trackUsage('willEditNameOfSingleType');\r\n    }\r\n\r\n    onOpenModalEditSchema({\r\n      modalType: firstMainDataPath,\r\n      forTarget: firstMainDataPath,\r\n      targetUid,\r\n      kind: contentType,\r\n    });\r\n  };\r\n\r\n  usePrompt({\r\n    when: hasModelBeenModified,\r\n    message: formatMessage({ id: getTrad('prompt.unsaved'), defaultMessage: 'Are you sure?' }),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <LayoutsHeaderCustom\r\n        id=\"title\"\r\n        primaryAction={\r\n          isInDevelopmentMode && (\r\n            <Flex gap={2} marginLeft={2}>\r\n              {/* DON'T display the add field button when the content type has not been created */}\r\n              {!isCreatingFirstContentType && (\r\n                <Button\r\n                  startIcon={<Plus />}\r\n                  variant=\"secondary\"\r\n                  minWidth=\"max-content\"\r\n                  onClick={() => {\r\n                    onOpenModalAddField({ forTarget, targetUid });\r\n                  }}\r\n                >\r\n                  {formatMessage({\r\n                    id: getTrad('button.attributes.add.another'),\r\n                    defaultMessage: 'Add another field',\r\n                  })}\r\n                </Button>\r\n              )}\r\n              <Button\r\n                startIcon={<Check />}\r\n                onClick={async () => await submitData()}\r\n                type=\"submit\"\r\n                disabled={isEqual(modifiedData, initialData)}\r\n              >\r\n                {formatMessage({\r\n                  id: 'global.save',\r\n                  defaultMessage: 'Save',\r\n                })}\r\n              </Button>\r\n            </Flex>\r\n          )\r\n        }\r\n        secondaryAction={\r\n          isInDevelopmentMode &&\r\n          !isFromPlugin &&\r\n          !isCreatingFirstContentType && (\r\n            <Button startIcon={<Pencil />} variant=\"tertiary\" onClick={onEdit}>\r\n              {formatMessage({\r\n                id: 'app.utils.edit',\r\n                defaultMessage: 'Edit',\r\n              })}\r\n            </Button>\r\n          )\r\n        }\r\n        title={upperFirst(label)}\r\n        subtitle={formatMessage({\r\n          id: getTrad('listView.headerLayout.description'),\r\n          defaultMessage: 'Build the data architecture of your content',\r\n        })}\r\n        navigationAction={<BackButton />}\r\n      />\r\n      <Layouts.Content>\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n          <Flex justifyContent=\"flex-end\">\r\n            <Flex gap={2}>\r\n              <LinkToCMSettingsView\r\n                key=\"link-to-cm-settings-view\"\r\n                targetUid={targetUid}\r\n                isTemporary={isTemporary}\r\n                isInContentTypeView={isInContentTypeView}\r\n                contentTypeKind={contentTypeKind}\r\n                disabled={isCreatingFirstContentType}\r\n              />\r\n            </Flex>\r\n          </Flex>\r\n          <Box background=\"neutral0\" shadow=\"filterShadow\" hasRadius>\r\n            <List\r\n              items={attributes}\r\n              customRowComponent={(props) => <ListRow {...props} onClick={handleClickEditField} />}\r\n              addComponentToDZ={handleClickAddComponentToDZ}\r\n              targetUid={targetUid}\r\n              editTarget={forTarget}\r\n              isMain\r\n            />\r\n          </Box>\r\n        </Flex>\r\n      </Layouts.Content>\r\n    </>\r\n  );\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default ListView;\r\n"],"names":["BoxWrapper","Tr","Fragment","forTarget","targetUid","usePrompt"],"mappings":"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"}