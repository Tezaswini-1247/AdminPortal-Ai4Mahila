{"version":3,"file":"index.js","sources":["../../server/src/bootstrap.ts","../../server/src/services/email.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/controllers/email.ts","../../server/src/controllers/index.ts","../../server/src/config.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\r\nimport type { EmailConfig, SendOptions } from './types';\r\n\r\ninterface EmailProvider {\r\n  send: (options: SendOptions) => Promise<any>;\r\n}\r\n\r\ninterface EmailProviderModule {\r\n  init: (\r\n    options: EmailConfig['providerOptions'],\r\n    settings: EmailConfig['settings']\r\n  ) => EmailProvider;\r\n  name?: string;\r\n  provider?: string;\r\n}\r\n\r\nconst createProvider = (emailConfig: EmailConfig) => {\r\n  const providerName = emailConfig.provider.toLowerCase();\r\n  let provider: EmailProviderModule;\r\n\r\n  let modulePath: string;\r\n  try {\r\n    modulePath = require.resolve(`@strapi/provider-email-${providerName}`);\r\n  } catch (error) {\r\n    if (\r\n      error !== null &&\r\n      typeof error === 'object' &&\r\n      'code' in error &&\r\n      error.code === 'MODULE_NOT_FOUND'\r\n    ) {\r\n      modulePath = providerName;\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  try {\r\n    provider = require(modulePath);\r\n  } catch (err) {\r\n    throw new Error(`Could not load email provider \"${providerName}\".`);\r\n  }\r\n\r\n  return provider.init(emailConfig.providerOptions, emailConfig.settings);\r\n};\r\n\r\nexport const bootstrap = async ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const emailConfig: EmailConfig = strapi.config.get('plugin::email');\r\n  strapi.plugin('email').provider = createProvider(emailConfig);\r\n\r\n  // Add permissions\r\n  const actions = [\r\n    {\r\n      section: 'settings',\r\n      category: 'email',\r\n      displayName: 'Access the Email Settings page',\r\n      uid: 'settings.read',\r\n      pluginName: 'email',\r\n    },\r\n  ];\r\n\r\n  await strapi.service('admin::permission').actionProvider.registerMany(actions);\r\n};\r\n","import * as _ from 'lodash';\r\nimport { objects, template } from '@strapi/utils';\r\n\r\nimport type {\r\n  EmailConfig,\r\n  EmailOptions,\r\n  EmailTemplate,\r\n  EmailTemplateData,\r\n  SendOptions,\r\n} from '../types';\r\n\r\nconst { createStrictInterpolationRegExp } = template;\r\n\r\nconst getProviderSettings = (): EmailConfig => strapi.config.get('plugin::email');\r\n\r\nconst send = async (options: SendOptions) => strapi.plugin('email').provider.send(options);\r\n\r\n/**\r\n * fill subject, text and html using lodash template\r\n * @param {object} emailOptions - to, from and replyto...\r\n * @param {object} emailTemplate - object containing attributes to fill\r\n * @param {object} data - data used to fill the template\r\n * @returns {{ subject, text, subject }}\r\n */\r\nconst sendTemplatedEmail = (\r\n  emailOptions: EmailOptions,\r\n  emailTemplate: EmailTemplate,\r\n  data: EmailTemplateData\r\n) => {\r\n  const attributes = ['subject', 'text', 'html'];\r\n  const missingAttributes = _.difference(attributes, Object.keys(emailTemplate));\r\n\r\n  if (missingAttributes.length > 0) {\r\n    throw new Error(\r\n      `Following attributes are missing from your email template : ${missingAttributes.join(', ')}`\r\n    );\r\n  }\r\n\r\n  const allowedInterpolationVariables = objects.keysDeep(data);\r\n  const interpolate = createStrictInterpolationRegExp(allowedInterpolationVariables, 'g');\r\n\r\n  const templatedAttributes = attributes.reduce(\r\n    (compiled, attribute) =>\r\n      emailTemplate[attribute]\r\n        ? Object.assign(compiled, {\r\n            [attribute]: _.template(emailTemplate[attribute], {\r\n              interpolate,\r\n            })(data),\r\n          })\r\n        : compiled,\r\n    {}\r\n  );\r\n\r\n  return strapi.plugin('email').provider.send({ ...emailOptions, ...templatedAttributes });\r\n};\r\n\r\nconst emailService = () => ({\r\n  getProviderSettings,\r\n  send,\r\n  sendTemplatedEmail,\r\n});\r\n\r\nexport default emailService;\r\n","import email from './email';\r\n\r\nexport const services = { email };\r\n","export default {\r\n  type: 'admin',\r\n  routes: [\r\n    {\r\n      method: 'POST',\r\n      path: '/',\r\n      handler: 'email.send',\r\n      config: {\r\n        policies: ['admin::isAuthenticatedAdmin'],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/test',\r\n      handler: 'email.test',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          { name: 'admin::hasPermissions', config: { actions: ['plugin::email.settings.read'] } },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/settings',\r\n      handler: 'email.getSettings',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          { name: 'admin::hasPermissions', config: { actions: ['plugin::email.settings.read'] } },\r\n        ],\r\n      },\r\n    },\r\n  ],\r\n};\r\n","export default {\r\n  type: 'content-api',\r\n  routes: [\r\n    {\r\n      method: 'POST',\r\n      path: '/',\r\n      handler: 'email.send',\r\n    },\r\n  ],\r\n};\r\n","import admin from './admin';\r\nimport contentApi from './content-api';\r\n\r\nexport const routes = {\r\n  admin,\r\n  'content-api': contentApi,\r\n};\r\n","import { pick } from 'lodash/fp';\r\nimport { errors } from '@strapi/utils';\r\n\r\nimport type Koa from 'koa';\r\nimport type {} from 'koa-body';\r\nimport type { EmailConfig, SendOptions } from '../types';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\n/**\r\n * Email.js controller\r\n *\r\n * @description: A set of functions called \"actions\" of the `email` plugin.\r\n */\r\nconst emailController = {\r\n  async send(ctx: Koa.Context) {\r\n    const options = ctx.request.body as SendOptions;\r\n\r\n    try {\r\n      await strapi.plugin('email').service('email').send(options);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        if ('statusCode' in error && error.statusCode === 400) {\r\n          throw new ApplicationError(error.message);\r\n        } else {\r\n          throw new Error(`Couldn't send email: ${error.message}.`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Send 200 `ok`\r\n    ctx.send({});\r\n  },\r\n\r\n  async test(ctx: Koa.Context) {\r\n    const { to } = ctx.request.body as Pick<SendOptions, 'to'>;\r\n\r\n    if (!to) {\r\n      throw new ApplicationError('No recipient(s) are given');\r\n    }\r\n\r\n    const email: SendOptions = {\r\n      to,\r\n      subject: `Strapi test mail to: ${to}`,\r\n      text: `Great! You have correctly configured the Strapi email plugin with the ${strapi.config.get(\r\n        'plugin::email.provider'\r\n      )} provider. \\r\\nFor documentation on how to use the email plugin checkout: https://docs.strapi.io/developer-docs/latest/plugins/email.html`,\r\n    };\r\n\r\n    try {\r\n      await strapi.plugin('email').service('email').send(email);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        if ('statusCode' in error && error.statusCode === 400) {\r\n          throw new ApplicationError(error.message);\r\n        } else {\r\n          throw new Error(`Couldn't send test email: ${error.message}.`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Send 200 `ok`\r\n    ctx.send({});\r\n  },\r\n\r\n  async getSettings(ctx: Koa.Context) {\r\n    const config: EmailConfig = strapi.plugin('email').service('email').getProviderSettings();\r\n\r\n    ctx.send({\r\n      config: pick(\r\n        ['provider', 'settings.defaultFrom', 'settings.defaultReplyTo', 'settings.testAddress'],\r\n        config\r\n      ),\r\n    });\r\n  },\r\n};\r\n\r\nexport default emailController;\r\n","import email from './email';\r\n\r\nexport const controllers = { email };\r\n","import type { StrapiConfig } from './types';\r\n\r\nexport const config: StrapiConfig = {\r\n  default: {\r\n    provider: 'sendmail',\r\n    providerOptions: {},\r\n    settings: {\r\n      defaultFrom: 'Strapi <no-reply@strapi.io>',\r\n    },\r\n  },\r\n  validator() {},\r\n};\r\n","import { bootstrap } from './bootstrap';\r\nimport { services } from './services';\r\nimport { routes } from './routes';\r\nimport { controllers } from './controllers';\r\nimport { config } from './config';\r\n\r\nexport default {\r\n  bootstrap,\r\n  services,\r\n  routes,\r\n  controllers,\r\n  config,\r\n};\r\n"],"names":["strapi","template","_","objects","email","errors","config","pick"],"mappings":"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"}