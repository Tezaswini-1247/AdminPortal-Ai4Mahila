{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { pipeline } from 'stream';\r\nimport fs, { ReadStream } from 'fs';\r\nimport path from 'path';\r\nimport fse from 'fs-extra';\r\nimport * as utils from '@strapi/utils';\r\n\r\n// Needed to load global.strapi without having to put @strapi/types in the regular dependencies\r\nimport type {} from '@strapi/types';\r\n\r\ninterface File {\r\n  name: string;\r\n  alternativeText?: string;\r\n  caption?: string;\r\n  width?: number;\r\n  height?: number;\r\n  formats?: Record<string, unknown>;\r\n  hash: string;\r\n  ext?: string;\r\n  mime: string;\r\n  size: number;\r\n  sizeInBytes: number;\r\n  url: string;\r\n  previewUrl?: string;\r\n  path?: string;\r\n  provider?: string;\r\n  provider_metadata?: Record<string, unknown>;\r\n  stream?: ReadStream;\r\n  buffer?: Buffer;\r\n}\r\n\r\nconst { PayloadTooLargeError } = utils.errors;\r\nconst { kbytesToBytes, bytesToHumanReadable } = utils.file;\r\n\r\nconst UPLOADS_FOLDER_NAME = 'uploads';\r\n\r\ninterface InitOptions {\r\n  sizeLimit?: number;\r\n}\r\n\r\ninterface CheckFileSizeOptions {\r\n  sizeLimit?: number;\r\n}\r\n\r\nexport default {\r\n  init({ sizeLimit: providerOptionsSizeLimit }: InitOptions = {}) {\r\n    // TODO V5: remove providerOptions sizeLimit\r\n    if (providerOptionsSizeLimit) {\r\n      process.emitWarning(\r\n        '[deprecated] In future versions, \"sizeLimit\" argument will be ignored from upload.config.providerOptions. Move it to upload.config'\r\n      );\r\n    }\r\n\r\n    // Ensure uploads folder exists\r\n    const uploadPath = path.resolve(strapi.dirs.static.public, UPLOADS_FOLDER_NAME);\r\n    if (!fse.pathExistsSync(uploadPath)) {\r\n      throw new Error(\r\n        `The upload folder (${uploadPath}) doesn't exist or is not accessible. Please make sure it exists.`\r\n      );\r\n    }\r\n\r\n    return {\r\n      checkFileSize(file: File, options: CheckFileSizeOptions) {\r\n        const { sizeLimit } = options ?? {};\r\n\r\n        // TODO V5: remove providerOptions sizeLimit\r\n        if (providerOptionsSizeLimit) {\r\n          if (kbytesToBytes(file.size) > providerOptionsSizeLimit)\r\n            throw new PayloadTooLargeError(\r\n              `${file.name} exceeds size limit of ${bytesToHumanReadable(\r\n                providerOptionsSizeLimit\r\n              )}.`\r\n            );\r\n        } else if (sizeLimit) {\r\n          if (kbytesToBytes(file.size) > sizeLimit)\r\n            throw new PayloadTooLargeError(\r\n              `${file.name} exceeds size limit of ${bytesToHumanReadable(sizeLimit)}.`\r\n            );\r\n        }\r\n      },\r\n      uploadStream(file: File): Promise<void> {\r\n        if (!file.stream) {\r\n          return Promise.reject(new Error('Missing file stream'));\r\n        }\r\n\r\n        const { stream } = file;\r\n\r\n        return new Promise((resolve, reject) => {\r\n          pipeline(\r\n            stream,\r\n            fs.createWriteStream(path.join(uploadPath, `${file.hash}${file.ext}`)),\r\n            (err) => {\r\n              if (err) {\r\n                return reject(err);\r\n              }\r\n\r\n              file.url = `/${UPLOADS_FOLDER_NAME}/${file.hash}${file.ext}`;\r\n\r\n              resolve();\r\n            }\r\n          );\r\n        });\r\n      },\r\n      upload(file: File): Promise<void> {\r\n        if (!file.buffer) {\r\n          return Promise.reject(new Error('Missing file buffer'));\r\n        }\r\n\r\n        const { buffer } = file;\r\n\r\n        return new Promise((resolve, reject) => {\r\n          // write file in public/assets folder\r\n          fs.writeFile(path.join(uploadPath, `${file.hash}${file.ext}`), buffer, (err) => {\r\n            if (err) {\r\n              return reject(err);\r\n            }\r\n\r\n            file.url = `/${UPLOADS_FOLDER_NAME}/${file.hash}${file.ext}`;\r\n\r\n            resolve();\r\n          });\r\n        });\r\n      },\r\n      delete(file: File): Promise<string | void> {\r\n        return new Promise((resolve, reject) => {\r\n          const filePath = path.join(uploadPath, `${file.hash}${file.ext}`);\r\n\r\n          if (!fs.existsSync(filePath)) {\r\n            resolve(\"File doesn't exist\");\r\n            return;\r\n          }\r\n\r\n          // remove file from public/assets folder\r\n          fs.unlink(filePath, (err) => {\r\n            if (err) {\r\n              return reject(err);\r\n            }\r\n\r\n            resolve();\r\n          });\r\n        });\r\n      },\r\n    };\r\n  },\r\n};\r\n"],"names":["utils","path","fse","stream","pipeline","fs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,MAAM,EAAE,qBAAqB,IAAIA,iBAAM;AACvC,MAAM,EAAE,eAAe,yBAAyBA,iBAAM;AAEtD,MAAM,sBAAsB;AAU5B,MAAe,QAAA;AAAA,EACb,KAAK,EAAE,WAAW,yBAAyB,IAAiB,CAAA,GAAI;AAE9D,QAAI,0BAA0B;AACpB,cAAA;AAAA,QACN;AAAA,MACF;AAAA,IAAA;AAIF,UAAM,aAAaC,cAAK,QAAA,QAAQ,OAAO,KAAK,OAAO,QAAQ,mBAAmB;AAC9E,QAAI,CAACC,aAAA,QAAI,eAAe,UAAU,GAAG;AACnC,YAAM,IAAI;AAAA,QACR,sBAAsB,UAAU;AAAA,MAClC;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,cAAc,MAAY,SAA+B;AACvD,cAAM,EAAE,cAAc,WAAW,CAAC;AAGlC,YAAI,0BAA0B;AACxB,cAAA,cAAc,KAAK,IAAI,IAAI;AAC7B,kBAAM,IAAI;AAAA,cACR,GAAG,KAAK,IAAI,0BAA0B;AAAA,gBACpC;AAAA,cAAA,CACD;AAAA,YACH;AAAA,mBACO,WAAW;AAChB,cAAA,cAAc,KAAK,IAAI,IAAI;AAC7B,kBAAM,IAAI;AAAA,cACR,GAAG,KAAK,IAAI,0BAA0B,qBAAqB,SAAS,CAAC;AAAA,YACvE;AAAA,QAAA;AAAA,MAEN;AAAA,MACA,aAAa,MAA2B;AAClC,YAAA,CAAC,KAAK,QAAQ;AAChB,iBAAO,QAAQ,OAAO,IAAI,MAAM,qBAAqB,CAAC;AAAA,QAAA;AAGlD,cAAA,EAAA,QAAEC,aAAW;AAEnB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCC,iBAAA;AAAA,YACED;AAAAA,YACAE,YAAAA,QAAG,kBAAkBJ,sBAAK,KAAK,YAAY,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,EAAE,CAAC;AAAA,YACrE,CAAC,QAAQ;AACP,kBAAI,KAAK;AACP,uBAAO,OAAO,GAAG;AAAA,cAAA;AAGd,mBAAA,MAAM,IAAI,mBAAmB,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG;AAElD,sBAAA;AAAA,YAAA;AAAA,UAEZ;AAAA,QAAA,CACD;AAAA,MACH;AAAA,MACA,OAAO,MAA2B;AAC5B,YAAA,CAAC,KAAK,QAAQ;AAChB,iBAAO,QAAQ,OAAO,IAAI,MAAM,qBAAqB,CAAC;AAAA,QAAA;AAGlD,cAAA,EAAE,WAAW;AAEnB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtCI,sBAAA,QAAG,UAAUJ,cAAA,QAAK,KAAK,YAAY,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,QAAQ,CAAC,QAAQ;AAC9E,gBAAI,KAAK;AACP,qBAAO,OAAO,GAAG;AAAA,YAAA;AAGd,iBAAA,MAAM,IAAI,mBAAmB,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG;AAElD,oBAAA;AAAA,UAAA,CACT;AAAA,QAAA,CACF;AAAA,MACH;AAAA,MACA,OAAO,MAAoC;AACzC,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAChC,gBAAA,WAAWA,cAAAA,QAAK,KAAK,YAAY,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,EAAE;AAEhE,cAAI,CAACI,YAAA,QAAG,WAAW,QAAQ,GAAG;AAC5B,oBAAQ,oBAAoB;AAC5B;AAAA,UAAA;AAICA,sBAAAA,QAAA,OAAO,UAAU,CAAC,QAAQ;AAC3B,gBAAI,KAAK;AACP,qBAAO,OAAO,GAAG;AAAA,YAAA;AAGX,oBAAA;AAAA,UAAA,CACT;AAAA,QAAA,CACF;AAAA,MAAA;AAAA,IAEL;AAAA,EAAA;AAEJ;;"}