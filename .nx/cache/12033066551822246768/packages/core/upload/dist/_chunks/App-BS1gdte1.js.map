{"version":3,"file":"App-BS1gdte1.js","sources":["../../admin/src/utils/getBreadcrumbDataML.ts","../../admin/src/components/FolderCard/FolderCardCheckbox/FolderCardCheckbox.tsx","../../admin/src/pages/App/MediaLibrary/components/BulkDeleteButton.tsx","../../admin/src/hooks/useBulkMove.ts","../../admin/src/components/BulkMoveDialog/BulkMoveDialog.tsx","../../admin/src/pages/App/MediaLibrary/components/BulkMoveButton.tsx","../../admin/src/pages/App/MediaLibrary/components/BulkActions.tsx","../../admin/src/pages/App/MediaLibrary/components/EmptyOrNoPermissions.tsx","../../admin/src/pages/App/MediaLibrary/components/Filters.tsx","../../admin/src/pages/App/MediaLibrary/components/Header.tsx","../../admin/src/pages/App/MediaLibrary/MediaLibrary.tsx","../../admin/src/pages/App/App.tsx"],"sourcesContent":["import { getFolderURL } from './getFolderURL';\r\nimport { getTrad } from './getTrad';\r\n\r\nimport type { Query } from '../../../shared/contracts/files';\r\nimport type { Folder } from '../../../shared/contracts/folders';\r\nimport type { MessageDescriptor } from 'react-intl';\r\n\r\ninterface GetBreadcrumbDataMLProps {\r\n  folder: Folder;\r\n  options: {\r\n    pathname: string;\r\n    query?: Query;\r\n  };\r\n}\r\n\r\ninterface GetBreadcrumbDataMLReturn {\r\n  id: number | null;\r\n  label: string | MessageDescriptor;\r\n  href?: string;\r\n}\r\n\r\ntype BreadcrumbData = GetBreadcrumbDataMLReturn | [];\r\n\r\nexport const getBreadcrumbDataML = (\r\n  folder: GetBreadcrumbDataMLProps['folder'] | null,\r\n  { pathname, query }: GetBreadcrumbDataMLProps['options']\r\n) => {\r\n  const data: BreadcrumbData[] = [\r\n    {\r\n      id: null,\r\n      label: { id: getTrad('plugin.name'), defaultMessage: 'Media Library' },\r\n      href: folder ? getFolderURL(pathname, query || {}) : undefined,\r\n    },\r\n  ];\r\n\r\n  if (folder?.parent && typeof folder?.parent !== 'number' && folder?.parent?.parent) {\r\n    data.push([]);\r\n  }\r\n\r\n  if (folder?.parent && typeof folder.parent !== 'number') {\r\n    data.push({\r\n      id: folder.parent.id,\r\n      label: folder.parent.name,\r\n      href: getFolderURL(pathname, query || {}, {\r\n        folder: folder.parent.id?.toString(),\r\n        folderPath: folder.parent.path,\r\n      }),\r\n    });\r\n  }\r\n\r\n  if (folder) {\r\n    data.push({\r\n      id: folder.id,\r\n      label: folder.name,\r\n    });\r\n  }\r\n\r\n  return data;\r\n};\r\n","import { Checkbox, Box, CheckboxProps } from '@strapi/design-system';\r\n\r\nimport { useFolderCard } from '../contexts/FolderCard';\r\n\r\nexport const FolderCardCheckbox = (props: CheckboxProps) => {\r\n  const { id } = useFolderCard();\r\n\r\n  return (\r\n    <Box position=\"relative\" zIndex={2}>\r\n      <Checkbox aria-labelledby={`${id}-title`} {...props} />\r\n    </Box>\r\n  );\r\n};\r\n","import { ConfirmDialog } from '@strapi/admin/strapi-admin';\r\nimport { Button, Dialog } from '@strapi/design-system';\r\nimport { Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useBulkRemove } from '../../../../hooks/useBulkRemove';\r\n\r\nimport type { FolderDefinition } from '../../../../../../shared/contracts/folders';\r\nimport type { FileWithType } from '../../../../hooks/useBulkRemove';\r\n\r\nexport interface BulkDeleteButtonProps {\r\n  selected: Array<FileWithType | FolderDefinition>;\r\n  onSuccess: () => void;\r\n}\r\n\r\nexport const BulkDeleteButton = ({ selected, onSuccess }: BulkDeleteButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { remove } = useBulkRemove();\r\n\r\n  const handleConfirmRemove = async () => {\r\n    await remove(selected);\r\n    onSuccess();\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root>\r\n      <Dialog.Trigger>\r\n        <Button variant=\"danger-light\" size=\"S\" startIcon={<Trash />}>\r\n          {formatMessage({ id: 'global.delete', defaultMessage: 'Delete' })}\r\n        </Button>\r\n      </Dialog.Trigger>\r\n      <ConfirmDialog onConfirm={handleConfirmRemove} />\r\n    </Dialog.Root>\r\n  );\r\n};\r\n","import { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nimport { File, BulkMoveFiles } from '../../../shared/contracts/files';\r\nimport { Folder, BulkMoveFolders } from '../../../shared/contracts/folders';\r\nimport { pluginId } from '../pluginId';\r\nimport { getTrad } from '../utils';\r\n\r\nexport interface FolderWithType extends Folder {\r\n  type: string;\r\n}\r\n\r\nexport interface FileWithType extends File {\r\n  type: string;\r\n}\r\n\r\ninterface BulkMoveParams {\r\n  destinationFolderId: number | string;\r\n  filesAndFolders: Array<FolderWithType | FileWithType>;\r\n}\r\n\r\n// Define the shape of the accumulator object\r\ntype Payload = {\r\n  fileIds?: number[];\r\n  folderIds?: number[];\r\n};\r\n\r\nexport const useBulkMove = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const queryClient = useQueryClient();\r\n  const { post } = useFetchClient();\r\n\r\n  const bulkMoveQuery = ({ destinationFolderId, filesAndFolders }: BulkMoveParams) => {\r\n    const payload = filesAndFolders.reduce<Payload>((acc, selected) => {\r\n      const { id, type } = selected;\r\n      const key = type === 'asset' ? 'fileIds' : 'folderIds';\r\n\r\n      if (!acc[key]) {\r\n        acc[key] = [];\r\n      }\r\n\r\n      acc[key]!.push(id);\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return post('/upload/actions/bulk-move', { ...payload, destinationFolderId });\r\n  };\r\n\r\n  const mutation = useMutation<\r\n    BulkMoveFolders.Response | BulkMoveFiles.Response,\r\n    BulkMoveFolders.Response['error'] | BulkMoveFiles.Response['error'],\r\n    BulkMoveParams\r\n  >(bulkMoveQuery, {\r\n    onSuccess(res) {\r\n      const {\r\n        data: { data },\r\n      } = res;\r\n\r\n      if (data?.files?.length > 0) {\r\n        queryClient.refetchQueries([pluginId, 'assets'], { active: true });\r\n        queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\r\n      }\r\n\r\n      // folders need to be re-fetched in any case, because assets might have been\r\n      // moved into a sub-folder and therefore the count needs to be updated\r\n      queryClient.refetchQueries([pluginId, 'folders'], { active: true });\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTrad('modal.move.success-label'),\r\n          defaultMessage: 'Elements have been moved successfully.',\r\n        }),\r\n      });\r\n    },\r\n  });\r\n\r\n  const move = (\r\n    destinationFolderId: number | string,\r\n    filesAndFolders: Array<FolderWithType | FileWithType>\r\n  ) => mutation.mutateAsync({ destinationFolderId, filesAndFolders });\r\n\r\n  return { ...mutation, move };\r\n};\r\n","import { Button, Flex, Grid, Field, Loader, Modal, Typography } from '@strapi/design-system';\r\nimport { Form, Formik, FormikErrors } from 'formik';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { File } from '../../../../shared/contracts/files';\r\nimport { useBulkMove } from '../../hooks/useBulkMove';\r\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\r\nimport { getTrad, normalizeAPIError } from '../../utils';\r\nimport { SelectTree } from '../SelectTree/SelectTree';\r\n\r\nimport type { Folder } from '../../../../shared/contracts/folders';\r\nimport type { OptionSelectTree } from '../SelectTree/SelectTree';\r\nimport type { FetchError } from '@strapi/admin/strapi-admin';\r\n\r\ntype InitialFormData = {\r\n  destination:\r\n    | {\r\n        value: string | number;\r\n        label: string;\r\n      }\r\n    | string;\r\n};\r\n\r\ninterface FolderWithType extends Folder {\r\n  type: string;\r\n}\r\n\r\ninterface FileWithType extends File {\r\n  type: string;\r\n}\r\n\r\nexport interface BulkMoveDialogProps {\r\n  onClose: () => void;\r\n  selected?: Array<FolderWithType | FileWithType>;\r\n  currentFolder?: FolderWithType;\r\n}\r\n\r\nexport const BulkMoveDialog = ({ onClose, selected = [], currentFolder }: BulkMoveDialogProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { data: folderStructure, isLoading } = useFolderStructure();\r\n  const { move } = useBulkMove();\r\n\r\n  if (!folderStructure) {\r\n    return null;\r\n  }\r\n\r\n  const handleSubmit = async (\r\n    values: InitialFormData,\r\n    { setErrors }: { setErrors: (errors: FormikErrors<InitialFormData>) => void }\r\n  ) => {\r\n    try {\r\n      if (typeof values.destination !== 'string') {\r\n        const destinationValue = values.destination.value;\r\n        await move(destinationValue, selected);\r\n        onClose();\r\n      }\r\n    } catch (error) {\r\n      const normalizedError = normalizeAPIError(error as FetchError)!;\r\n\r\n      if (normalizedError && 'errors' in normalizedError) {\r\n        const formikErrors = normalizedError.errors?.reduce<Record<string, string>>(\r\n          (acc, error) => {\r\n            acc[error.values?.path?.length || 'destination'] = error.defaultMessage;\r\n\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n\r\n        if (!isEmpty(formikErrors)) {\r\n          setErrors(formikErrors);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Modal.Content>\r\n        <Modal.Body>\r\n          <Flex justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\r\n            <Loader>\r\n              {formatMessage({\r\n                id: getTrad('content.isLoading'),\r\n                defaultMessage: 'Content is loading.',\r\n              })}\r\n            </Loader>\r\n          </Flex>\r\n        </Modal.Body>\r\n      </Modal.Content>\r\n    );\r\n  }\r\n\r\n  const initialFormData: InitialFormData = {\r\n    destination: {\r\n      value: currentFolder?.id || '',\r\n      label: currentFolder?.name || folderStructure[0].label,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Modal.Content>\r\n      <Formik validateOnChange={false} onSubmit={handleSubmit} initialValues={initialFormData}>\r\n        {({ values, errors, setFieldValue }) => (\r\n          <Form noValidate>\r\n            <Modal.Header>\r\n              <Modal.Title>\r\n                {formatMessage({\r\n                  id: getTrad('modal.folder.move.title'),\r\n                  defaultMessage: 'Move elements to',\r\n                })}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n              <Grid.Root gap={4}>\r\n                <Grid.Item xs={12} col={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Field.Root id=\"folder-destination\">\r\n                    <Field.Label>\r\n                      {formatMessage({\r\n                        id: getTrad('form.input.label.folder-location'),\r\n                        defaultMessage: 'Location',\r\n                      })}\r\n                    </Field.Label>\r\n\r\n                    <SelectTree\r\n                      options={folderStructure as OptionSelectTree[]}\r\n                      onChange={(value: Record<string, string | number>) => {\r\n                        setFieldValue('destination', value);\r\n                      }}\r\n                      defaultValue={\r\n                        typeof values.destination !== 'string' ? values.destination : undefined\r\n                      }\r\n                      name=\"destination\"\r\n                      menuPortalTarget={document.querySelector('body')}\r\n                      inputId=\"folder-destination\"\r\n                      error={errors?.destination}\r\n                      ariaErrorMessage=\"destination-error\"\r\n                    />\r\n\r\n                    {errors.destination && (\r\n                      <Typography variant=\"pi\" tag=\"p\" textColor=\"danger600\">\r\n                        {errors.destination}\r\n                      </Typography>\r\n                    )}\r\n                  </Field.Root>\r\n                </Grid.Item>\r\n              </Grid.Root>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Modal.Close>\r\n                <Button variant=\"tertiary\" name=\"cancel\">\r\n                  {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\r\n                </Button>\r\n              </Modal.Close>\r\n              <Button type=\"submit\" loading={isLoading}>\r\n                {formatMessage({ id: 'modal.folder.move.submit', defaultMessage: 'Move' })}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Modal.Content>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Button, Modal } from '@strapi/design-system';\r\nimport { Folder } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { BulkMoveDialog } from '../../../../components/BulkMoveDialog/BulkMoveDialog';\r\n\r\nimport type { File } from '../../../../../../shared/contracts/files';\r\nimport type { Folder as FolderDefinition } from '../../../../../../shared/contracts/folders';\r\n\r\ninterface FolderWithType extends FolderDefinition {\r\n  type: string;\r\n}\r\n\r\ninterface FileWithType extends File {\r\n  type: string;\r\n}\r\n\r\nexport interface BulkMoveButtonProps {\r\n  onSuccess: () => void;\r\n  currentFolder?: FolderWithType;\r\n  selected?: Array<FolderWithType | FileWithType>;\r\n}\r\n\r\nexport const BulkMoveButton = ({\r\n  selected = [],\r\n  onSuccess,\r\n  currentFolder,\r\n}: BulkMoveButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\r\n\r\n  const handleConfirmMove = () => {\r\n    setShowConfirmDialog(false);\r\n    onSuccess();\r\n  };\r\n\r\n  return (\r\n    <Modal.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\r\n      <Modal.Trigger>\r\n        <Button variant=\"secondary\" size=\"S\" startIcon={<Folder />}>\r\n          {formatMessage({ id: 'global.move', defaultMessage: 'Move' })}\r\n        </Button>\r\n      </Modal.Trigger>\r\n      <BulkMoveDialog\r\n        currentFolder={currentFolder}\r\n        onClose={handleConfirmMove}\r\n        selected={selected}\r\n      />\r\n    </Modal.Root>\r\n  );\r\n};\r\n","import { Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../../utils';\r\n\r\nimport { BulkDeleteButton } from './BulkDeleteButton';\r\nimport { BulkMoveButton } from './BulkMoveButton';\r\n\r\nimport type { File } from '../../../../../../shared/contracts/files';\r\nimport type {\r\n  FolderDefinition,\r\n  Folder as FolderInitial,\r\n} from '../../../../../../shared/contracts/folders';\r\n\r\ninterface FolderWithType extends FolderInitial {\r\n  type: string;\r\n}\r\n\r\nexport interface FileWithType extends File {\r\n  type: string;\r\n}\r\n\r\nexport interface BulkActionsProps {\r\n  selected: Array<FileWithType | FolderDefinition> | Array<FolderWithType | FileWithType>;\r\n  onSuccess: () => void;\r\n  currentFolder?: FolderWithType;\r\n}\r\n\r\nexport const BulkActions = ({ selected = [], onSuccess, currentFolder }: BulkActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const numberAssets = selected?.reduce(function (_this, val) {\r\n    return val?.type === 'folder' && 'files' in val && val?.files && 'count' in val.files\r\n      ? _this + val?.files?.count\r\n      : _this + 1;\r\n  }, 0);\r\n\r\n  return (\r\n    <Flex gap={2} paddingBottom={5}>\r\n      <Typography variant=\"epsilon\" textColor=\"neutral600\">\r\n        {formatMessage(\r\n          {\r\n            id: getTrad('list.assets.selected'),\r\n            defaultMessage:\r\n              '{numberFolders, plural, one {1 folder} other {# folders}} - {numberAssets, plural, one {1 asset} other {# assets}} selected',\r\n          },\r\n          {\r\n            numberFolders: selected?.filter(({ type }) => type === 'folder').length,\r\n            numberAssets,\r\n          }\r\n        )}\r\n      </Typography>\r\n\r\n      <BulkDeleteButton\r\n        selected={selected as Array<FileWithType | FolderDefinition>}\r\n        onSuccess={onSuccess}\r\n      />\r\n      <BulkMoveButton\r\n        currentFolder={currentFolder}\r\n        selected={selected as Array<FolderWithType | FileWithType>}\r\n        onSuccess={onSuccess}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","import { Button } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyPermissions } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { EmptyAssets } from '../../../../components/EmptyAssets/EmptyAssets';\r\nimport { getTrad } from '../../../../utils';\r\n\r\nexport interface EmptyOrNoPermissionsProps {\r\n  canCreate: boolean;\r\n  canRead: boolean;\r\n  isFiltering: boolean;\r\n  onActionClick: () => void;\r\n}\r\n\r\nconst getContentIntlMessage = ({\r\n  isFiltering,\r\n  canCreate,\r\n  canRead,\r\n}: Omit<EmptyOrNoPermissionsProps, 'onActionClick'>) => {\r\n  if (isFiltering) {\r\n    return {\r\n      id: 'list.assets-empty.title-withSearch',\r\n      defaultMessage: 'There are no elements with the applied filters',\r\n    };\r\n  }\r\n\r\n  if (canRead) {\r\n    if (canCreate) {\r\n      return {\r\n        id: 'list.assets.empty-upload',\r\n        defaultMessage: 'Upload your first assets...',\r\n      };\r\n    }\r\n\r\n    return {\r\n      id: 'list.assets.empty',\r\n      defaultMessage: 'Media Library is empty',\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: 'header.actions.no-permissions',\r\n    defaultMessage: 'No permissions to view',\r\n  };\r\n};\r\n\r\nexport const EmptyOrNoPermissions = ({\r\n  canCreate,\r\n  isFiltering,\r\n  canRead,\r\n  onActionClick,\r\n}: EmptyOrNoPermissionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const content = getContentIntlMessage({ isFiltering, canCreate, canRead });\r\n\r\n  return (\r\n    <EmptyAssets\r\n      icon={!canRead ? EmptyPermissions : undefined}\r\n      action={\r\n        canCreate &&\r\n        !isFiltering && (\r\n          <Button variant=\"secondary\" startIcon={<Plus />} onClick={onActionClick}>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Button>\r\n        )\r\n      }\r\n      content={formatMessage({\r\n        ...content,\r\n        id: getTrad(content.id),\r\n      })}\r\n    />\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useTracking, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { Button, Popover } from '@strapi/design-system';\r\nimport { Filter } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { FilterList } from '../../../../components/FilterList/FilterList';\r\nimport { FilterPopover } from '../../../../components/FilterPopover/FilterPopover';\r\nimport { displayedFilters } from '../../../../utils';\r\n\r\nimport type { Query } from '../../../../../../shared/contracts/files';\r\nimport type { FilterListProps } from '../../../../components/FilterList/FilterList';\r\nimport type { FilterPopoverProps } from '../../../../components/FilterPopover/FilterPopover';\r\n\r\nexport const Filters = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const [{ query }, setQuery] = useQueryParams<Query>();\r\n  const filters = query?.filters?.$and || [];\r\n\r\n  const handleRemoveFilter: FilterListProps['onRemoveFilter'] = (nextFilters) => {\r\n    setQuery({ filters: { $and: nextFilters }, page: 1 } as Query);\r\n  };\r\n\r\n  const handleSubmit: FilterPopoverProps['onSubmit'] = (filters) => {\r\n    trackUsage('didFilterMediaLibraryElements', {\r\n      location: 'content-manager',\r\n      filter: Object.keys(filters[filters.length - 1])[0],\r\n    });\r\n    setQuery({ filters: { $and: filters }, page: 1 } as Query);\r\n  };\r\n\r\n  return (\r\n    <Popover.Root open={open} onOpenChange={setOpen}>\r\n      <Popover.Trigger>\r\n        <Button variant=\"tertiary\" startIcon={<Filter />} size=\"S\">\r\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <FilterPopover\r\n        displayedFilters={displayedFilters}\r\n        filters={filters}\r\n        onSubmit={handleSubmit}\r\n        onToggle={setOpen as FilterPopoverProps['onToggle']}\r\n      />\r\n      <FilterList\r\n        appliedFilters={filters as FilterListProps['appliedFilters']}\r\n        filtersSchema={displayedFilters}\r\n        onRemoveFilter={handleRemoveFilter}\r\n      />\r\n    </Popover.Root>\r\n  );\r\n};\r\n","import { useQueryParams, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Link } from '@strapi/design-system';\r\nimport { ArrowLeft, Plus } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation, NavLink } from 'react-router-dom';\r\n\r\nimport { Breadcrumbs } from '../../../../components/Breadcrumbs/Breadcrumbs';\r\nimport { getTrad } from '../../../../utils';\r\n\r\nimport type { Folder } from '../../../../../../shared/contracts/folders';\r\nimport type { CrumbDefinition } from '../../../../components/Breadcrumbs/Breadcrumbs';\r\n\r\ninterface FolderDefinition extends Omit<Folder, 'children' | 'files' | 'parent'> {\r\n  children: {\r\n    count: number;\r\n  };\r\n  files: {\r\n    count: number;\r\n  };\r\n  parent?: FolderDefinition;\r\n}\r\n\r\nexport interface HeaderProps {\r\n  breadcrumbs?: Array<CrumbDefinition> | null;\r\n  canCreate: boolean;\r\n  folder?: FolderDefinition | null;\r\n  onToggleEditFolderDialog: ({ created }?: { created?: boolean }) => void;\r\n  onToggleUploadAssetDialog: () => void;\r\n}\r\n\r\nexport const Header = ({\r\n  breadcrumbs = null,\r\n  canCreate,\r\n  folder = null,\r\n  onToggleEditFolderDialog,\r\n  onToggleUploadAssetDialog,\r\n}: HeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { pathname } = useLocation();\r\n  const [{ query }] = useQueryParams();\r\n  const backQuery = {\r\n    ...query,\r\n    folder:\r\n      folder?.parent && typeof folder.parent !== 'number' && folder.parent.id\r\n        ? folder.parent.id\r\n        : undefined,\r\n    folderPath:\r\n      folder?.parent && typeof folder.parent !== 'number' && folder.parent.path\r\n        ? folder.parent.path\r\n        : undefined,\r\n  };\r\n\r\n  return (\r\n    <Layouts.Header\r\n      title={formatMessage({\r\n        id: getTrad('plugin.name'),\r\n        defaultMessage: `Media Library`,\r\n      })}\r\n      subtitle={\r\n        breadcrumbs &&\r\n        typeof breadcrumbs !== 'boolean' &&\r\n        folder && (\r\n          <Breadcrumbs\r\n            label={formatMessage({\r\n              id: getTrad('header.breadcrumbs.nav.label'),\r\n              defaultMessage: 'Folders navigation',\r\n            })}\r\n            breadcrumbs={breadcrumbs}\r\n            currentFolderId={folder?.id}\r\n          />\r\n        )\r\n      }\r\n      navigationAction={\r\n        folder && (\r\n          <Link\r\n            tag={NavLink}\r\n            startIcon={<ArrowLeft />}\r\n            to={`${pathname}?${stringify(backQuery, { encode: false })}`}\r\n          >\r\n            {formatMessage({\r\n              id: getTrad('header.actions.folder-level-up'),\r\n              defaultMessage: 'Back',\r\n            })}\r\n          </Link>\r\n        )\r\n      }\r\n      primaryAction={\r\n        canCreate && (\r\n          <Flex gap={2}>\r\n            <Button startIcon={<Plus />} variant=\"secondary\" onClick={onToggleEditFolderDialog}>\r\n              {formatMessage({\r\n                id: getTrad('header.actions.add-folder'),\r\n                defaultMessage: 'Add new folder',\r\n              })}\r\n            </Button>\r\n\r\n            <Button startIcon={<Plus />} onClick={onToggleUploadAssetDialog}>\r\n              {formatMessage({\r\n                id: getTrad('header.actions.add-assets'),\r\n                defaultMessage: 'Add new assets',\r\n              })}\r\n            </Button>\r\n          </Flex>\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Page,\r\n  SearchInput,\r\n  Pagination,\r\n  useTracking,\r\n  useQueryParams,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Checkbox,\r\n  Box,\r\n  Divider,\r\n  Flex,\r\n  IconButton,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Grid,\r\n} from '@strapi/design-system';\r\nimport { Cog, GridFour as GridIcon, List, Pencil } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link as ReactRouterLink, useNavigate, useLocation } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetGridList } from '../../../components/AssetGridList/AssetGridList';\r\nimport { EditAssetDialog } from '../../../components/EditAssetDialog/EditAssetContent';\r\nimport { EditFolderDialog } from '../../../components/EditFolderDialog/EditFolderDialog';\r\nimport { FolderCard } from '../../../components/FolderCard/FolderCard/FolderCard';\r\nimport { FolderCardBody } from '../../../components/FolderCard/FolderCardBody/FolderCardBody';\r\nimport { FolderCardBodyAction } from '../../../components/FolderCard/FolderCardBodyAction/FolderCardBodyAction';\r\nimport { FolderCardCheckbox } from '../../../components/FolderCard/FolderCardCheckbox/FolderCardCheckbox';\r\nimport { FolderGridList } from '../../../components/FolderGridList/FolderGridList';\r\nimport { SortPicker } from '../../../components/SortPicker/SortPicker';\r\nimport { TableList } from '../../../components/TableList/TableList';\r\nimport { UploadAssetDialog } from '../../../components/UploadAssetDialog/UploadAssetDialog';\r\nimport { localStorageKeys, viewOptions } from '../../../constants';\r\nimport { useAssets } from '../../../hooks/useAssets';\r\nimport { useFolder } from '../../../hooks/useFolder';\r\nimport { useFolders } from '../../../hooks/useFolders';\r\nimport { useMediaLibraryPermissions } from '../../../hooks/useMediaLibraryPermissions';\r\nimport { usePersistentState } from '../../../hooks/usePersistentState';\r\nimport { useSelectionState } from '../../../hooks/useSelectionState';\r\nimport { containsAssetFilter, getBreadcrumbDataML, getFolderURL, getTrad } from '../../../utils';\r\n\r\nimport { BulkActions } from './components/BulkActions';\r\nimport { EmptyOrNoPermissions } from './components/EmptyOrNoPermissions';\r\nimport { Filters } from './components/Filters';\r\nimport { Header } from './components/Header';\r\n\r\nimport type { BulkActionsProps } from './components/BulkActions';\r\nimport type { HeaderProps } from './components/Header';\r\nimport type { Query } from '../../../../../shared/contracts/files';\r\nimport type { FolderDefinition } from '../../../../../shared/contracts/folders';\r\nimport type { AssetGridListProps } from '../../../components/AssetGridList/AssetGridList';\r\nimport type { Asset } from '../../../components/EditAssetDialog/EditAssetContent';\r\nimport type { FolderRow, FileRow, TableListProps } from '../../../components/TableList/TableList';\r\n\r\nconst BoxWithHeight = styled(Box)`\r\n  height: 3.2rem;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst TypographyMaxWidth = styled(Typography)`\r\n  max-width: 100%;\r\n`;\r\n\r\nconst ActionContainer = styled(Box)`\r\n  svg {\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MediaLibrary = () => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    canRead,\r\n    canCreate,\r\n    canUpdate,\r\n    canCopyLink,\r\n    canDownload,\r\n    canConfigureView,\r\n    isLoading: permissionsLoading,\r\n  } = useMediaLibraryPermissions();\r\n  const currentFolderToEditRef = React.useRef<HTMLDivElement>();\r\n  const { formatMessage } = useIntl();\r\n  const { pathname } = useLocation();\r\n  const { trackUsage } = useTracking();\r\n  const [{ query }, setQuery] = useQueryParams<Query>();\r\n  const isFiltering = Boolean(query._q || query.filters);\r\n  const [view, setView] = usePersistentState(localStorageKeys.view, viewOptions.GRID);\r\n  const isGridView = view === viewOptions.GRID;\r\n\r\n  const {\r\n    data: assetsData,\r\n    isLoading: assetsLoading,\r\n    error: assetsError,\r\n  } = useAssets({\r\n    skipWhen: !canRead,\r\n    query,\r\n  });\r\n\r\n  const {\r\n    data: foldersData,\r\n    isLoading: foldersLoading,\r\n    error: foldersError,\r\n  } = useFolders({\r\n    enabled: canRead && assetsData?.pagination?.page === 1 && !containsAssetFilter(query),\r\n    query,\r\n  });\r\n\r\n  const {\r\n    data: currentFolder,\r\n    isLoading: isCurrentFolderLoading,\r\n    error: currentFolderError,\r\n  } = useFolder(query?.folder as number | null | undefined, {\r\n    enabled: canRead && !!query?.folder,\r\n  });\r\n\r\n  // Folder was not found: redirect to the media library root\r\n  if (currentFolderError?.name === 'NotFoundError') {\r\n    navigate(pathname);\r\n  }\r\n\r\n  const folders =\r\n    foldersData?.map((folder) => ({\r\n      ...folder,\r\n      type: 'folder',\r\n      folderURL: getFolderURL(pathname, query, {\r\n        folder: folder.id.toString(),\r\n        folderPath: folder.path,\r\n      }),\r\n      isSelectable: canUpdate,\r\n    })) ?? [];\r\n  const folderCount = folders?.length || 0;\r\n  const assets =\r\n    assetsData?.results?.map((asset) => ({ ...asset, type: 'asset', isSelectable: canUpdate })) ||\r\n    [];\r\n  const assetCount = assets?.length ?? 0;\r\n  const totalAssetCount = assetsData?.pagination?.total;\r\n\r\n  const isLoading = isCurrentFolderLoading || foldersLoading || permissionsLoading || assetsLoading;\r\n  const [showUploadAssetDialog, setShowUploadAssetDialog] = React.useState(false);\r\n  const [showEditFolderDialog, setShowEditFolderDialog] = React.useState(false);\r\n  const [assetToEdit, setAssetToEdit] = React.useState<Asset | undefined>(undefined);\r\n  const [folderToEdit, setFolderToEdit] = React.useState<FolderRow | undefined | null>(undefined);\r\n  const [selected, { selectOne, selectAll }] = useSelectionState<FolderRow | FileRow>(\r\n    ['type', 'id'],\r\n    []\r\n  );\r\n  const indeterminateBulkSelect =\r\n    selected?.length > 0 && selected?.length !== assetCount + folderCount;\r\n  const toggleUploadAssetDialog = () => setShowUploadAssetDialog((prev) => !prev);\r\n  const toggleEditFolderDialog = ({ created = false } = {}) => {\r\n    // folders are only displayed on the first page, therefore\r\n    // we have to navigate the user to that page, in case a folder\r\n    // was created successfully in order for them to see it\r\n    if (created && query?.page !== '1') {\r\n      setQuery({\r\n        ...query,\r\n        page: 1,\r\n      });\r\n    }\r\n\r\n    setShowEditFolderDialog((prev) => !prev);\r\n  };\r\n\r\n  const handleBulkSelect = (\r\n    checked: boolean | 'indeterminate',\r\n    elements?: FolderRow[] | FileRow[]\r\n  ) => {\r\n    if (checked) {\r\n      trackUsage('didSelectAllMediaLibraryElements');\r\n    }\r\n\r\n    selectAll(elements as (FolderRow | FileRow)[]);\r\n  };\r\n\r\n  const handleChangeSort = (value: Query['sort'] | string) => {\r\n    trackUsage('didSortMediaLibraryElements', {\r\n      location: 'upload',\r\n      sort: value,\r\n    });\r\n    setQuery({ sort: value as Query['sort'] });\r\n  };\r\n\r\n  const handleEditFolder = (folder: FolderRow) => {\r\n    setFolderToEdit(folder);\r\n    setShowEditFolderDialog(true);\r\n  };\r\n\r\n  const handleEditFolderClose = (payload?: { created?: boolean | undefined }) => {\r\n    setFolderToEdit(null);\r\n    toggleEditFolderDialog(payload);\r\n\r\n    if (currentFolderToEditRef.current) {\r\n      currentFolderToEditRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const handleAssetDeleted = (numberOfAssets: number) => {\r\n    if (\r\n      numberOfAssets === assetCount &&\r\n      assetsData?.pagination?.page === assetsData?.pagination?.pageCount &&\r\n      assetsData?.pagination?.page &&\r\n      assetsData.pagination.page > 1\r\n    ) {\r\n      setQuery({\r\n        ...query,\r\n        page: assetsData.pagination.page - 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleBulkActionSuccess = () => {\r\n    selectAll();\r\n\r\n    handleAssetDeleted(selected.length);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (assetsError || foldersError) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Main>\r\n        <Header\r\n          breadcrumbs={\r\n            !isCurrentFolderLoading\r\n              ? (getBreadcrumbDataML(currentFolder!, {\r\n                  pathname,\r\n                  query,\r\n                }) as HeaderProps['breadcrumbs'])\r\n              : null\r\n          }\r\n          canCreate={canCreate}\r\n          onToggleEditFolderDialog={toggleEditFolderDialog}\r\n          onToggleUploadAssetDialog={toggleUploadAssetDialog}\r\n          folder={currentFolder as HeaderProps['folder']}\r\n        />\r\n        <Layouts.Action\r\n          startActions={\r\n            <>\r\n              {canUpdate && isGridView && (assetCount > 0 || folderCount > 0) && (\r\n                <BoxWithHeight\r\n                  paddingLeft={2}\r\n                  paddingRight={2}\r\n                  background=\"neutral0\"\r\n                  hasRadius\r\n                  borderColor=\"neutral200\"\r\n                >\r\n                  <Checkbox\r\n                    aria-label={formatMessage({\r\n                      id: getTrad('bulk.select.label'),\r\n                      defaultMessage: 'Select all folders & assets',\r\n                    })}\r\n                    checked={\r\n                      indeterminateBulkSelect\r\n                        ? 'indeterminate'\r\n                        : (assetCount > 0 || folderCount > 0) &&\r\n                          selected.length === assetCount + folderCount\r\n                    }\r\n                    onCheckedChange={(e) =>\r\n                      handleBulkSelect(e, [...assets, ...folders] as FolderRow[] | FileRow[])\r\n                    }\r\n                  />\r\n                </BoxWithHeight>\r\n              )}\r\n              {canRead && isGridView && (\r\n                <SortPicker value={query?.sort} onChangeSort={handleChangeSort} />\r\n              )}\r\n              {canRead && <Filters />}\r\n            </>\r\n          }\r\n          endActions={\r\n            <>\r\n              {canConfigureView ? (\r\n                <ActionContainer paddingTop={1} paddingBottom={1}>\r\n                  <IconButton\r\n                    tag={ReactRouterLink}\r\n                    to={{\r\n                      pathname: `${pathname}/configuration`,\r\n                      search: stringify(query, { encode: false }),\r\n                    }}\r\n                    label={formatMessage({\r\n                      id: 'app.links.configure-view',\r\n                      defaultMessage: 'Configure the view',\r\n                    })}\r\n                  >\r\n                    <Cog />\r\n                  </IconButton>\r\n                </ActionContainer>\r\n              ) : null}\r\n              <ActionContainer paddingTop={1} paddingBottom={1}>\r\n                <IconButton\r\n                  label={\r\n                    isGridView\r\n                      ? formatMessage({\r\n                          id: getTrad('view-switch.list'),\r\n                          defaultMessage: 'List View',\r\n                        })\r\n                      : formatMessage({\r\n                          id: getTrad('view-switch.grid'),\r\n                          defaultMessage: 'Grid View',\r\n                        })\r\n                  }\r\n                  onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\r\n                >\r\n                  {isGridView ? <List /> : <GridIcon />}\r\n                </IconButton>\r\n              </ActionContainer>\r\n              <SearchInput\r\n                label={formatMessage({\r\n                  id: getTrad('search.label'),\r\n                  defaultMessage: 'Search for an asset',\r\n                })}\r\n                trackedEvent=\"didSearchMediaLibraryElements\"\r\n                trackedEventDetails={{ location: 'upload' }}\r\n              />\r\n            </>\r\n          }\r\n        />\r\n\r\n        <Layouts.Content>\r\n          {selected.length > 0 && (\r\n            <BulkActions\r\n              currentFolder={currentFolder as BulkActionsProps['currentFolder']}\r\n              selected={selected as BulkActionsProps['selected']}\r\n              onSuccess={handleBulkActionSuccess}\r\n            />\r\n          )}\r\n\r\n          {folderCount === 0 && assetCount === 0 && (\r\n            <EmptyOrNoPermissions\r\n              canCreate={canCreate}\r\n              canRead={canRead}\r\n              isFiltering={isFiltering}\r\n              onActionClick={toggleUploadAssetDialog}\r\n            />\r\n          )}\r\n\r\n          {/* TODO: fix AssetListTable should handle no assets views (loading) */}\r\n          {canRead && !isGridView && (assetCount > 0 || folderCount > 0) && (\r\n            <TableList\r\n              assetCount={assetCount}\r\n              folderCount={folderCount}\r\n              indeterminate={indeterminateBulkSelect}\r\n              onChangeSort={handleChangeSort}\r\n              onChangeFolder={(folderID, folderPath) =>\r\n                navigate(getFolderURL(pathname, query, { folder: folderID.toString(), folderPath }))\r\n              }\r\n              onEditAsset={setAssetToEdit as TableListProps['onEditAsset']}\r\n              onEditFolder={handleEditFolder}\r\n              onSelectOne={selectOne}\r\n              onSelectAll={handleBulkSelect as TableListProps['onSelectAll']}\r\n              rows={[...folders, ...assets] as TableListProps['rows']}\r\n              selected={selected as TableListProps['selected']}\r\n              shouldDisableBulkSelect={!canUpdate}\r\n              sortQuery={query?.sort ?? ''}\r\n            />\r\n          )}\r\n\r\n          {canRead && isGridView && (\r\n            <>\r\n              {folderCount > 0 && (\r\n                <FolderGridList\r\n                  title={\r\n                    // Folders title should only appear if:\r\n                    // user is filtering and there are assets to display, to divide both type of elements\r\n                    // user is not filtering\r\n                    (((isFiltering && assetCount > 0) || !isFiltering) &&\r\n                      formatMessage(\r\n                        {\r\n                          id: getTrad('list.folders.title'),\r\n                          defaultMessage: 'Folders ({count})',\r\n                        },\r\n                        { count: folderCount }\r\n                      )) ||\r\n                    ''\r\n                  }\r\n                >\r\n                  {folders.map((folder) => {\r\n                    const selectedFolders = selected.filter(({ type }) => type === 'folder');\r\n                    const isSelected = !!selectedFolders.find(\r\n                      (currentFolder) => currentFolder.id === folder.id\r\n                    );\r\n\r\n                    const url = getFolderURL(pathname, query, {\r\n                      folder: folder?.id.toString(),\r\n                      folderPath: folder?.path,\r\n                    });\r\n\r\n                    return (\r\n                      <Grid.Item\r\n                        col={3}\r\n                        key={`folder-${folder.id}`}\r\n                        direction=\"column\"\r\n                        alignItems=\"stretch\"\r\n                      >\r\n                        <FolderCard\r\n                          ref={\r\n                            folderToEdit && folder.id === folderToEdit.id\r\n                              ? currentFolderToEditRef\r\n                              : undefined\r\n                          }\r\n                          ariaLabel={folder.name}\r\n                          id={`folder-${folder.id}`}\r\n                          to={url}\r\n                          startAction={\r\n                            folder.isSelectable ? (\r\n                              <FolderCardCheckbox\r\n                                data-testid={`folder-checkbox-${folder.id}`}\r\n                                checked={isSelected}\r\n                                onCheckedChange={() => selectOne(folder)}\r\n                              />\r\n                            ) : null\r\n                          }\r\n                          cardActions={\r\n                            <IconButton\r\n                              label={formatMessage({\r\n                                id: getTrad('list.folder.edit'),\r\n                                defaultMessage: 'Edit folder',\r\n                              })}\r\n                              onClick={() => handleEditFolder(folder)}\r\n                            >\r\n                              <Pencil />\r\n                            </IconButton>\r\n                          }\r\n                        >\r\n                          <FolderCardBody>\r\n                            <FolderCardBodyAction to={url}>\r\n                              <Flex tag=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\r\n                                <TypographyMaxWidth\r\n                                  fontWeight=\"semiBold\"\r\n                                  textColor=\"neutral800\"\r\n                                  ellipsis\r\n                                >\r\n                                  {folder.name}\r\n                                  <VisuallyHidden>:</VisuallyHidden>\r\n                                </TypographyMaxWidth>\r\n\r\n                                <TypographyMaxWidth\r\n                                  tag=\"span\"\r\n                                  textColor=\"neutral600\"\r\n                                  variant=\"pi\"\r\n                                  ellipsis\r\n                                >\r\n                                  {formatMessage(\r\n                                    {\r\n                                      id: getTrad('list.folder.subtitle'),\r\n                                      defaultMessage:\r\n                                        '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\r\n                                    },\r\n                                    {\r\n                                      folderCount: (folder as FolderDefinition).children?.count,\r\n                                      filesCount: (folder as FolderDefinition).files?.count,\r\n                                    }\r\n                                  )}\r\n                                </TypographyMaxWidth>\r\n                              </Flex>\r\n                            </FolderCardBodyAction>\r\n                          </FolderCardBody>\r\n                        </FolderCard>\r\n                      </Grid.Item>\r\n                    );\r\n                  })}\r\n                </FolderGridList>\r\n              )}\r\n\r\n              {assetCount > 0 && folderCount > 0 && (\r\n                <Box paddingTop={6} paddingBottom={4}>\r\n                  <Divider />\r\n                </Box>\r\n              )}\r\n\r\n              {assetCount > 0 && (\r\n                <AssetGridList\r\n                  assets={assets}\r\n                  onEditAsset={setAssetToEdit as AssetGridListProps['onEditAsset']}\r\n                  onSelectAsset={selectOne}\r\n                  selectedAssets={\r\n                    selected.filter(\r\n                      ({ type }) => type === 'asset'\r\n                    ) as AssetGridListProps['selectedAssets']\r\n                  }\r\n                  title={\r\n                    // Assets title should only appear if:\r\n                    // - user is not filtering\r\n                    // - user is filtering and there are folders to display, to separate them\r\n                    // - user is on page 1 since folders won't appear on any other page than the first one (no need to visually separate them)\r\n                    ((!isFiltering || (isFiltering && folderCount > 0)) &&\r\n                      assetsData?.pagination?.page === 1 &&\r\n                      formatMessage(\r\n                        {\r\n                          id: getTrad('list.assets.title'),\r\n                          defaultMessage: 'Assets ({count})',\r\n                        },\r\n                        { count: totalAssetCount }\r\n                      )) ||\r\n                    ''\r\n                  }\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n          <Pagination.Root {...assetsData?.pagination}>\r\n            <Pagination.PageSize />\r\n            <Pagination.Links />\r\n          </Pagination.Root>\r\n        </Layouts.Content>\r\n      </Page.Main>\r\n      {showUploadAssetDialog && (\r\n        <UploadAssetDialog\r\n          open={showUploadAssetDialog}\r\n          onClose={toggleUploadAssetDialog}\r\n          trackedLocation=\"upload\"\r\n          folderId={query?.folder as string | number | null | undefined}\r\n        />\r\n      )}\r\n      {showEditFolderDialog && (\r\n        <EditFolderDialog\r\n          open={showEditFolderDialog}\r\n          onClose={() => handleEditFolderClose()}\r\n          folder={folderToEdit as FolderDefinition}\r\n          parentFolderId={query?.folder as string | number | null | undefined}\r\n          location=\"upload\"\r\n        />\r\n      )}\r\n      {assetToEdit && (\r\n        <EditAssetDialog\r\n          onClose={(editedAsset) => {\r\n            // The asset has been deleted\r\n            if (editedAsset === null) {\r\n              handleAssetDeleted(1);\r\n            }\r\n\r\n            setAssetToEdit(undefined);\r\n          }}\r\n          open={!!assetToEdit}\r\n          asset={assetToEdit}\r\n          canUpdate={canUpdate}\r\n          canCopyLink={canCopyLink}\r\n          canDownload={canDownload}\r\n          trackedLocation=\"upload\"\r\n        />\r\n      )}\r\n    </Layouts.Root>\r\n  );\r\n};\r\n","// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { Page, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport { useConfig } from '../../hooks/useConfig';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport { MediaLibrary } from './MediaLibrary/MediaLibrary';\r\n\r\nimport type { Configuration } from '../../../../shared/contracts/configuration';\r\n\r\nconst ConfigureTheView = React.lazy(async () =>\r\n  import('./ConfigureTheView/ConfigureTheView').then((mod) => ({ default: mod.ConfigureTheView }))\r\n);\r\n\r\nexport const Upload = () => {\r\n  const {\r\n    config: { isLoading, isError, data: config },\r\n  } = useConfig() as { config: { isLoading: boolean; isError: boolean; data: Configuration } };\r\n\r\n  const [{ rawQuery }, setQuery] = useQueryParams();\r\n  const { formatMessage } = useIntl();\r\n  const title = formatMessage({ id: getTrad('plugin.name'), defaultMessage: 'Media Library' });\r\n\r\n  React.useEffect(() => {\r\n    if (isLoading || isError || rawQuery) {\r\n      return;\r\n    }\r\n    setQuery({\r\n      sort: config.sort,\r\n      page: 1,\r\n      pageSize: config.pageSize,\r\n    });\r\n  }, [isLoading, isError, config, rawQuery, setQuery]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Page.Title>{title}</Page.Title>\r\n        <Page.Loading />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Page.Main>\r\n      {rawQuery ? (\r\n        <React.Suspense fallback={<Page.Loading />}>\r\n          <Routes>\r\n            <Route index element={<MediaLibrary />} />\r\n            <Route\r\n              path=\"configuration\"\r\n              element={<ConfigureTheView config={config as Configuration} />}\r\n            />\r\n          </Routes>\r\n        </React.Suspense>\r\n      ) : null}\r\n    </Page.Main>\r\n  );\r\n};\r\n"],"names":["getTrad","getFolderURL","useFolderCard","jsx","Box","Checkbox","useIntl","useBulkRemove","jsxs","Dialog","Button","Trash","ConfirmDialog","useNotification","useQueryClient","useFetchClient","useMutation","pluginId","useFolderStructure","normalizeAPIError","error","isEmpty","Modal","Flex","Loader","Formik","Form","Grid","Field","SelectTree","Typography","React","Folder","EmptyAssets","EmptyPermissions","Plus","useTracking","useQueryParams","filters","Popover","Filter","FilterPopover","displayedFilters","FilterList","useLocation","Layouts","Breadcrumbs","Link","NavLink","ArrowLeft","stringify","styled","useNavigate","useMediaLibraryPermissions","usePersistentState","localStorageKeys","viewOptions","useAssets","useFolders","containsAssetFilter","useFolder","useSelectionState","Page","Fragment","SortPicker","IconButton","ReactRouterLink","Cog","List","GridIcon","SearchInput","TableList","FolderGridList","currentFolder","FolderCard","Pencil","FolderCardBody","FolderCardBodyAction","VisuallyHidden","Divider","AssetGridList","Pagination","UploadAssetDialog","EditFolderDialog","EditAssetDialog","useConfig","Routes","Route"],"mappings":"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"}