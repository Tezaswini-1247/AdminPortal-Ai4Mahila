{"version":3,"file":"index-D57iKFts.js","sources":["../../server/src/middlewares/upload.ts","../../server/src/register.ts","../../server/src/utils/index.ts","../../server/src/constants.ts","../../server/src/bootstrap.ts","../../server/src/content-types/file.ts","../../server/src/content-types/folder.ts","../../server/src/content-types/index.ts","../../server/src/services/provider.ts","../../server/src/services/upload.ts","../../server/src/services/image-manipulation.ts","../../server/src/services/folder.ts","../../server/src/services/file.ts","../../server/src/utils/cron.ts","../../server/src/services/weekly-metrics.ts","../../server/src/services/metrics.ts","../../server/src/services/api-upload-folder.ts","../../server/src/services/extensions/utils.ts","../../server/src/services/extensions/index.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/view-configuration.ts","../../server/src/routes/index.ts","../../server/src/config.ts","../../server/src/controllers/utils/find-entity-and-check-permissions.ts","../../server/src/controllers/admin-file.ts","../../server/src/controllers/validation/admin/utils.ts","../../server/src/controllers/utils/folders.ts","../../server/src/controllers/validation/admin/folder.ts","../../server/src/controllers/admin-folder.ts","../../server/src/controllers/validation/admin/folder-file.ts","../../server/src/controllers/admin-folder-file.ts","../../server/src/controllers/validation/admin/settings.ts","../../server/src/controllers/admin-settings.ts","../../server/src/controllers/validation/admin/upload.ts","../../server/src/controllers/admin-upload.ts","../../server/src/controllers/validation/content-api/upload.ts","../../server/src/controllers/content-api.ts","../../server/src/controllers/validation/admin/configureView.ts","../../server/src/controllers/view-configuration.ts","../../server/src/controllers/index.ts","../../server/src/index.ts"],"sourcesContent":["import range from 'koa-range';\r\nimport koaStatic from 'koa-static';\r\n\r\nimport type { Core } from '@strapi/types';\r\n\r\n/**\r\n * Programmatic upload middleware. We do not want to expose it in the plugin\r\n */\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\r\n  strapi.server.app.on('error', (err) => {\r\n    if (err.code === 'EPIPE') {\r\n      // when serving audio or video the browsers sometimes close the connection to go to range requests instead.\r\n      // This causes koa to emit a write EPIPE error. We can ignore it.\r\n      // Right now this ignores it globally and we cannot do much more because it is how koa handles it.\r\n      return;\r\n    }\r\n\r\n    strapi.server.app.onerror(err);\r\n  });\r\n\r\n  const localServerConfig = strapi.config.get('plugin::upload.providerOptions.localServer', {});\r\n\r\n  strapi.server.routes([\r\n    {\r\n      method: 'GET',\r\n      path: '/uploads/(.*)',\r\n      handler: [range, koaStatic(strapi.dirs.static.public, { defer: true, ...localServerConfig })],\r\n      config: { auth: false },\r\n    },\r\n  ]);\r\n};\r\n","import _ from 'lodash';\r\n\r\nimport { errors, file } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport registerUploadMiddleware from './middlewares/upload';\r\nimport spec from '../../documentation/content-api.json';\r\nimport type { Config, File, InputFile } from './types';\r\n\r\nconst { PayloadTooLargeError } = errors;\r\nconst { bytesToHumanReadable, kbytesToBytes } = file;\r\n\r\n/**\r\n * Register upload plugin\r\n */\r\nexport async function register({ strapi }: { strapi: Core.Strapi }) {\r\n  strapi.plugin('upload').provider = createProvider(strapi.config.get<Config>('plugin::upload'));\r\n\r\n  await registerUploadMiddleware({ strapi });\r\n\r\n  if (strapi.plugin('graphql')) {\r\n    const { installGraphqlExtension } = await import('./graphql.js');\r\n    installGraphqlExtension({ strapi });\r\n  }\r\n\r\n  if (strapi.plugin('documentation')) {\r\n    strapi\r\n      .plugin('documentation')\r\n      .service('override')\r\n      .registerOverride(spec, {\r\n        pluginOrigin: 'upload',\r\n        excludeFromGeneration: ['upload'],\r\n      });\r\n  }\r\n}\r\n\r\nconst createProvider = (config: Config) => {\r\n  const { providerOptions, actionOptions = {} } = config;\r\n\r\n  const providerName = _.toLower(config.provider);\r\n  let provider;\r\n\r\n  let modulePath;\r\n  try {\r\n    modulePath = require.resolve(`@strapi/provider-upload-${providerName}`);\r\n  } catch (error) {\r\n    if (\r\n      typeof error === 'object' &&\r\n      error !== null &&\r\n      'code' in error &&\r\n      error.code === 'MODULE_NOT_FOUND'\r\n    ) {\r\n      modulePath = providerName;\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  try {\r\n    provider = require(modulePath);\r\n  } catch (err) {\r\n    const newError = new Error(`Could not load upload provider \"${providerName}\".`);\r\n\r\n    if (err instanceof Error) {\r\n      newError.stack = err.stack;\r\n    }\r\n\r\n    throw newError;\r\n  }\r\n\r\n  const providerInstance = provider.init(providerOptions);\r\n\r\n  if (!providerInstance.delete) {\r\n    throw new Error(`The upload provider \"${providerName}\" doesn't implement the delete method.`);\r\n  }\r\n\r\n  if (!providerInstance.upload && !providerInstance.uploadStream) {\r\n    throw new Error(\r\n      `The upload provider \"${providerName}\" doesn't implement the uploadStream nor the upload method.`\r\n    );\r\n  }\r\n\r\n  if (!providerInstance.uploadStream) {\r\n    process.emitWarning(\r\n      `The upload provider \"${providerName}\" doesn't implement the uploadStream function. Strapi will fallback on the upload method. Some performance issues may occur.`\r\n    );\r\n  }\r\n\r\n  const wrappedProvider = _.mapValues(providerInstance, (method, methodName) => {\r\n    return async (file: File, options = actionOptions[methodName]) =>\r\n      providerInstance[methodName](file, options);\r\n  });\r\n\r\n  return Object.assign(Object.create(baseProvider), wrappedProvider);\r\n};\r\n\r\nconst baseProvider = {\r\n  extend(obj: unknown) {\r\n    Object.assign(this, obj);\r\n  },\r\n  checkFileSize(file: InputFile, { sizeLimit }: { sizeLimit: number }) {\r\n    if (sizeLimit && kbytesToBytes(file.size) > sizeLimit) {\r\n      throw new PayloadTooLargeError(\r\n        `${file.originalFilename} exceeds size limit of ${bytesToHumanReadable(sizeLimit)}.`\r\n      );\r\n    }\r\n  },\r\n  getSignedUrl(file: File) {\r\n    return file;\r\n  },\r\n  isPrivate() {\r\n    return false;\r\n  },\r\n};\r\n","import type upload from '../services/upload';\r\nimport type imageManipulation from '../services/image-manipulation';\r\nimport type apiUploadFolder from '../services/api-upload-folder';\r\nimport type provider from '../services/provider';\r\nimport type folder from '../services/folder';\r\nimport type file from '../services/file';\r\nimport type weeklyMetrics from '../services/weekly-metrics';\r\nimport type metrics from '../services/metrics';\r\nimport type extensions from '../services/extensions';\r\n\r\ntype Services = {\r\n  upload: ReturnType<typeof upload>;\r\n  'image-manipulation': typeof imageManipulation;\r\n  provider: ReturnType<typeof provider>;\r\n  folder: typeof folder;\r\n  file: typeof file;\r\n  weeklyMetrics: ReturnType<typeof weeklyMetrics>;\r\n  metrics: ReturnType<typeof metrics>;\r\n  'api-upload-folder': typeof apiUploadFolder;\r\n  extensions: typeof extensions;\r\n};\r\n\r\nexport const getService = <TName extends keyof Services>(name: TName): Services[TName] => {\r\n  return strapi.plugin('upload').service<Services[TName]>(name);\r\n};\r\n","const ACTIONS = {\r\n  read: 'plugin::upload.read',\r\n  readSettings: 'plugin::upload.settings.read',\r\n  create: 'plugin::upload.assets.create',\r\n  update: 'plugin::upload.assets.update',\r\n  download: 'plugin::upload.assets.download',\r\n  copyLink: 'plugin::upload.assets.copy-link',\r\n  configureView: 'plugin::upload.configure-view',\r\n};\r\n\r\nconst ALLOWED_SORT_STRINGS = [\r\n  'createdAt:DESC',\r\n  'createdAt:ASC',\r\n  'name:ASC',\r\n  'name:DESC',\r\n  'updatedAt:DESC',\r\n  'updatedAt:ASC',\r\n];\r\n\r\nconst ALLOWED_WEBHOOK_EVENTS = {\r\n  MEDIA_CREATE: 'media.create',\r\n  MEDIA_UPDATE: 'media.update',\r\n  MEDIA_DELETE: 'media.delete',\r\n};\r\n\r\nconst FOLDER_MODEL_UID = 'plugin::upload.folder';\r\nconst FILE_MODEL_UID = 'plugin::upload.file';\r\nconst API_UPLOAD_FOLDER_BASE_NAME = 'API Uploads';\r\n\r\nexport {\r\n  ACTIONS,\r\n  FOLDER_MODEL_UID,\r\n  FILE_MODEL_UID,\r\n  API_UPLOAD_FOLDER_BASE_NAME,\r\n  ALLOWED_SORT_STRINGS,\r\n  ALLOWED_WEBHOOK_EVENTS,\r\n};\r\n","import type { Core } from '@strapi/types';\r\n\r\nimport { getService } from './utils';\r\nimport { ALLOWED_SORT_STRINGS, ALLOWED_WEBHOOK_EVENTS } from './constants';\r\n\r\nexport async function bootstrap({ strapi }: { strapi: Core.Strapi }) {\r\n  const defaultConfig = {\r\n    settings: {\r\n      sizeOptimization: true,\r\n      responsiveDimensions: true,\r\n      autoOrientation: false,\r\n    },\r\n    view_configuration: {\r\n      pageSize: 10,\r\n      sort: ALLOWED_SORT_STRINGS[0],\r\n    },\r\n  };\r\n\r\n  for (const [key, defaultValue] of Object.entries(defaultConfig)) {\r\n    // set plugin store\r\n    const configurator = strapi.store!({ type: 'plugin', name: 'upload', key });\r\n\r\n    const config = await configurator.get({});\r\n    if (\r\n      config &&\r\n      Object.keys(defaultValue).every((key) => Object.prototype.hasOwnProperty.call(config, key))\r\n    ) {\r\n      // eslint-disable-next-line no-continue\r\n      continue;\r\n    }\r\n\r\n    // if the config does not exist or does not have all the required keys\r\n    // set from the defaultValue ensuring all required settings are present\r\n    await configurator.set({\r\n      value: Object.assign(defaultValue, config || {}),\r\n    });\r\n  }\r\n\r\n  await registerPermissionActions();\r\n  await registerWebhookEvents();\r\n\r\n  await getService('weeklyMetrics').registerCron();\r\n  getService('metrics').sendUploadPluginMetrics();\r\n\r\n  getService('extensions').signFileUrlsOnDocumentService();\r\n}\r\n\r\nconst registerWebhookEvents = async () =>\r\n  Object.entries(ALLOWED_WEBHOOK_EVENTS).forEach(([key, value]) => {\r\n    strapi.get('webhookStore').addAllowedEvent(key, value);\r\n  });\r\n\r\nconst registerPermissionActions = async () => {\r\n  const actions = [\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Access the Media Library',\r\n      uid: 'read',\r\n      pluginName: 'upload',\r\n    },\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Create (upload)',\r\n      uid: 'assets.create',\r\n      subCategory: 'assets',\r\n      pluginName: 'upload',\r\n    },\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Update (crop, details, replace) + delete',\r\n      uid: 'assets.update',\r\n      subCategory: 'assets',\r\n      pluginName: 'upload',\r\n    },\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Download',\r\n      uid: 'assets.download',\r\n      subCategory: 'assets',\r\n      pluginName: 'upload',\r\n    },\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Copy link',\r\n      uid: 'assets.copy-link',\r\n      subCategory: 'assets',\r\n      pluginName: 'upload',\r\n    },\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Configure view',\r\n      uid: 'configure-view',\r\n      pluginName: 'upload',\r\n    },\r\n    {\r\n      section: 'settings',\r\n      displayName: 'Access the Media Library settings page',\r\n      uid: 'settings.read',\r\n      category: 'media library',\r\n      pluginName: 'upload',\r\n    },\r\n  ];\r\n\r\n  await strapi.service('admin::permission').actionProvider.registerMany(actions);\r\n};\r\n","import type { Struct } from '@strapi/types';\r\n\r\nimport { FOLDER_MODEL_UID } from '../constants';\r\n\r\nexport default {\r\n  schema: {\r\n    collectionName: 'files',\r\n    info: {\r\n      singularName: 'file',\r\n      pluralName: 'files',\r\n      displayName: 'File',\r\n      description: '',\r\n    },\r\n    options: {},\r\n    pluginOptions: {\r\n      'content-manager': {\r\n        visible: false,\r\n      },\r\n      'content-type-builder': {\r\n        visible: false,\r\n      },\r\n    },\r\n    attributes: {\r\n      name: {\r\n        type: 'string',\r\n        configurable: false,\r\n        required: true,\r\n      },\r\n      alternativeText: {\r\n        type: 'string',\r\n        configurable: false,\r\n      },\r\n      caption: {\r\n        type: 'string',\r\n        configurable: false,\r\n      },\r\n      width: {\r\n        type: 'integer',\r\n        configurable: false,\r\n      },\r\n      height: {\r\n        type: 'integer',\r\n        configurable: false,\r\n      },\r\n      formats: {\r\n        type: 'json',\r\n        configurable: false,\r\n      },\r\n      hash: {\r\n        type: 'string',\r\n        configurable: false,\r\n        required: true,\r\n      },\r\n      ext: {\r\n        type: 'string',\r\n        configurable: false,\r\n      },\r\n      mime: {\r\n        type: 'string',\r\n        configurable: false,\r\n        required: true,\r\n      },\r\n      size: {\r\n        type: 'decimal',\r\n        configurable: false,\r\n        required: true,\r\n      },\r\n      url: {\r\n        type: 'string',\r\n        configurable: false,\r\n        required: true,\r\n      },\r\n      previewUrl: {\r\n        type: 'string',\r\n        configurable: false,\r\n      },\r\n      provider: {\r\n        type: 'string',\r\n        configurable: false,\r\n        required: true,\r\n      },\r\n      provider_metadata: {\r\n        type: 'json',\r\n        configurable: false,\r\n      },\r\n      related: {\r\n        type: 'relation',\r\n        relation: 'morphToMany',\r\n        configurable: false,\r\n      },\r\n      folder: {\r\n        type: 'relation',\r\n        relation: 'manyToOne',\r\n        target: FOLDER_MODEL_UID,\r\n        inversedBy: 'files',\r\n        private: true,\r\n      },\r\n      folderPath: {\r\n        type: 'string',\r\n        minLength: 1,\r\n        required: true,\r\n        private: true,\r\n        searchable: false,\r\n      },\r\n    },\r\n    // experimental feature:\r\n    indexes: [\r\n      {\r\n        name: 'upload_files_folder_path_index',\r\n        columns: ['folder_path'],\r\n        type: null,\r\n      },\r\n      {\r\n        name: `upload_files_created_at_index`,\r\n        columns: ['created_at'],\r\n        type: null,\r\n      },\r\n      {\r\n        name: `upload_files_updated_at_index`,\r\n        columns: ['updated_at'],\r\n        type: null,\r\n      },\r\n      {\r\n        name: `upload_files_name_index`,\r\n        columns: ['name'],\r\n        type: null,\r\n      },\r\n      {\r\n        name: `upload_files_size_index`,\r\n        columns: ['size'],\r\n        type: null,\r\n      },\r\n      {\r\n        name: `upload_files_ext_index`,\r\n        columns: ['ext'],\r\n        type: null,\r\n      },\r\n    ],\r\n  } satisfies Partial<Struct.CollectionTypeSchema>,\r\n};\r\n","import type { Struct } from '@strapi/types';\r\n\r\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\r\n\r\nexport default {\r\n  schema: {\r\n    collectionName: 'upload_folders',\r\n    info: {\r\n      singularName: 'folder',\r\n      pluralName: 'folders',\r\n      displayName: 'Folder',\r\n    },\r\n    options: {},\r\n    pluginOptions: {\r\n      'content-manager': {\r\n        visible: false,\r\n      },\r\n      'content-type-builder': {\r\n        visible: false,\r\n      },\r\n    },\r\n    attributes: {\r\n      name: {\r\n        type: 'string',\r\n        minLength: 1,\r\n        required: true,\r\n      },\r\n      pathId: {\r\n        type: 'integer',\r\n        unique: true,\r\n        required: true,\r\n      },\r\n      parent: {\r\n        type: 'relation',\r\n        relation: 'manyToOne',\r\n        target: FOLDER_MODEL_UID,\r\n        inversedBy: 'children',\r\n      },\r\n      children: {\r\n        type: 'relation',\r\n        relation: 'oneToMany',\r\n        target: FOLDER_MODEL_UID,\r\n        mappedBy: 'parent',\r\n      },\r\n      files: {\r\n        type: 'relation',\r\n        relation: 'oneToMany',\r\n        target: FILE_MODEL_UID,\r\n        mappedBy: 'folder',\r\n      },\r\n      path: {\r\n        type: 'string',\r\n        minLength: 1,\r\n        required: true,\r\n      },\r\n    },\r\n    // experimental feature:\r\n    indexes: [\r\n      {\r\n        name: 'upload_folders_path_id_index',\r\n        columns: ['path_id'],\r\n        type: 'unique',\r\n      },\r\n      {\r\n        name: 'upload_folders_path_index',\r\n        columns: ['path'],\r\n        type: 'unique',\r\n      },\r\n    ],\r\n  } satisfies Partial<Struct.CollectionTypeSchema>,\r\n};\r\n","import file from './file';\r\nimport folder from './folder';\r\n\r\nexport const contentTypes = {\r\n  file,\r\n  folder,\r\n};\r\n","import { isFunction } from 'lodash/fp';\r\nimport { file as fileUtils } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport { Config, UploadableFile } from '../types';\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  async checkFileSize(file: UploadableFile) {\r\n    const { sizeLimit } = strapi.config.get<Config>('plugin::upload');\r\n    await strapi.plugin('upload').provider.checkFileSize(file, { sizeLimit });\r\n  },\r\n\r\n  async upload(file: UploadableFile) {\r\n    if (isFunction(strapi.plugin('upload').provider.uploadStream)) {\r\n      file.stream = file.getStream();\r\n      await strapi.plugin('upload').provider.uploadStream(file);\r\n\r\n      delete file.stream;\r\n\r\n      if ('filepath' in file) {\r\n        delete file.filepath;\r\n      }\r\n    } else {\r\n      file.buffer = await fileUtils.streamToBuffer(file.getStream());\r\n      await strapi.plugin('upload').provider.upload(file);\r\n\r\n      delete file.buffer;\r\n\r\n      if ('filepath' in file) {\r\n        delete file.filepath;\r\n      }\r\n    }\r\n  },\r\n});\r\n","import os from 'os';\r\nimport path from 'path';\r\nimport crypto from 'crypto';\r\nimport fs from 'fs';\r\nimport fse from 'fs-extra';\r\nimport _ from 'lodash';\r\nimport { extension } from 'mime-types';\r\nimport {\r\n  sanitize,\r\n  strings,\r\n  contentTypes as contentTypesUtils,\r\n  errors,\r\n  file as fileUtils,\r\n} from '@strapi/utils';\r\n\r\nimport type { Core, UID } from '@strapi/types';\r\n\r\nimport { FILE_MODEL_UID, ALLOWED_WEBHOOK_EVENTS } from '../constants';\r\nimport { getService } from '../utils';\r\n\r\nimport type { Config, File, InputFile, UploadableFile, FileInfo } from '../types';\r\nimport type { ViewConfiguration } from '../controllers/validation/admin/configureView';\r\nimport type { Settings } from '../controllers/validation/admin/settings';\r\n\r\ntype User = {\r\n  id: string | number;\r\n};\r\n\r\ntype ID = string | number;\r\n\r\ntype CommonOptions = {\r\n  user?: User;\r\n};\r\n\r\ntype Metas = {\r\n  refId?: ID;\r\n  ref?: string;\r\n  field?: string;\r\n  path?: string;\r\n  tmpWorkingDirectory?: string;\r\n};\r\n\r\nconst { UPDATED_BY_ATTRIBUTE, CREATED_BY_ATTRIBUTE } = contentTypesUtils.constants;\r\nconst { MEDIA_CREATE, MEDIA_UPDATE, MEDIA_DELETE } = ALLOWED_WEBHOOK_EVENTS;\r\n\r\nconst { ApplicationError, NotFoundError } = errors;\r\nconst { bytesToKbytes } = fileUtils;\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const randomSuffix = () => crypto.randomBytes(5).toString('hex');\r\n\r\n  const generateFileName = (name: string) => {\r\n    const baseName = strings.nameToSlug(name, { separator: '_', lowercase: false });\r\n\r\n    return `${baseName}_${randomSuffix()}`;\r\n  };\r\n\r\n  const sendMediaMetrics = (data: Pick<File, 'caption' | 'alternativeText'>) => {\r\n    if (_.has(data, 'caption') && !_.isEmpty(data.caption)) {\r\n      strapi.telemetry.send('didSaveMediaWithCaption');\r\n    }\r\n\r\n    if (_.has(data, 'alternativeText') && !_.isEmpty(data.alternativeText)) {\r\n      strapi.telemetry.send('didSaveMediaWithAlternativeText');\r\n    }\r\n  };\r\n\r\n  const createAndAssignTmpWorkingDirectoryToFiles = async (\r\n    files: InputFile | InputFile[]\r\n  ): Promise<string> => {\r\n    const tmpWorkingDirectory = await fse.mkdtemp(path.join(os.tmpdir(), 'strapi-upload-'));\r\n\r\n    if (Array.isArray(files)) {\r\n      files.forEach((file) => {\r\n        file.tmpWorkingDirectory = tmpWorkingDirectory;\r\n      });\r\n    } else {\r\n      files.tmpWorkingDirectory = tmpWorkingDirectory;\r\n    }\r\n\r\n    return tmpWorkingDirectory;\r\n  };\r\n\r\n  function filenameReservedRegex() {\r\n    // eslint-disable-next-line no-control-regex\r\n    return /[<>:\"/\\\\|?*\\u0000-\\u001F]/g;\r\n  }\r\n\r\n  function windowsReservedNameRegex() {\r\n    return /^(con|prn|aux|nul|com\\d|lpt\\d)$/i;\r\n  }\r\n\r\n  /**\r\n   * Copied from https://github.com/sindresorhus/valid-filename package\r\n   */\r\n  function isValidFilename(string: string) {\r\n    if (!string || string.length > 255) {\r\n      return false;\r\n    }\r\n    if (filenameReservedRegex().test(string) || windowsReservedNameRegex().test(string)) {\r\n      return false;\r\n    }\r\n    if (string === '.' || string === '..') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async function emitEvent(event: string, data: Record<string, any>) {\r\n    const modelDef = strapi.getModel(FILE_MODEL_UID);\r\n    const sanitizedData = await sanitize.sanitizers.defaultSanitizeOutput(\r\n      {\r\n        schema: modelDef,\r\n        getModel(uid: string) {\r\n          return strapi.getModel(uid as UID.Schema);\r\n        },\r\n      },\r\n      data\r\n    );\r\n\r\n    strapi.eventHub.emit(event, { media: sanitizedData });\r\n  }\r\n\r\n  async function formatFileInfo(\r\n    { filename, type, size }: { filename: string; type: string; size: number },\r\n    fileInfo: Partial<FileInfo> = {},\r\n    metas: {\r\n      refId?: ID;\r\n      ref?: string;\r\n      field?: string;\r\n      path?: string;\r\n      tmpWorkingDirectory?: string;\r\n    } = {}\r\n  ): Promise<Omit<UploadableFile, 'getStream'>> {\r\n    const fileService = getService('file');\r\n\r\n    if (!isValidFilename(filename)) {\r\n      throw new ApplicationError('File name contains invalid characters');\r\n    }\r\n\r\n    let ext = path.extname(filename);\r\n    if (!ext) {\r\n      ext = `.${extension(type)}`;\r\n    }\r\n    const usedName = (fileInfo.name || filename).normalize();\r\n    const basename = path.basename(usedName, ext);\r\n\r\n    // Prevent null characters in file name\r\n    if (!isValidFilename(filename)) {\r\n      throw new ApplicationError('File name contains invalid characters');\r\n    }\r\n\r\n    const entity: Omit<UploadableFile, 'getStream'> = {\r\n      name: usedName,\r\n      alternativeText: fileInfo.alternativeText,\r\n      caption: fileInfo.caption,\r\n      folder: fileInfo.folder,\r\n      folderPath: await fileService.getFolderPath(fileInfo.folder),\r\n      hash: generateFileName(basename),\r\n      ext,\r\n      mime: type,\r\n      size: bytesToKbytes(size),\r\n      sizeInBytes: size,\r\n    };\r\n\r\n    const { refId, ref, field } = metas;\r\n\r\n    if (refId && ref && field) {\r\n      entity.related = [\r\n        {\r\n          id: refId,\r\n          __type: ref,\r\n          __pivot: { field },\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (metas.path) {\r\n      entity.path = metas.path;\r\n    }\r\n\r\n    if (metas.tmpWorkingDirectory) {\r\n      entity.tmpWorkingDirectory = metas.tmpWorkingDirectory;\r\n    }\r\n\r\n    return entity;\r\n  }\r\n\r\n  async function enhanceAndValidateFile(\r\n    file: InputFile,\r\n    fileInfo: FileInfo,\r\n    metas?: Metas\r\n  ): Promise<UploadableFile> {\r\n    const currentFile = (await formatFileInfo(\r\n      {\r\n        filename: file.originalFilename ?? 'unamed',\r\n        type: file.mimetype ?? 'application/octet-stream',\r\n        size: file.size,\r\n      },\r\n      fileInfo,\r\n      {\r\n        ...metas,\r\n        tmpWorkingDirectory: file.tmpWorkingDirectory,\r\n      }\r\n    )) as UploadableFile;\r\n\r\n    currentFile.filepath = file.filepath;\r\n    currentFile.getStream = () => fs.createReadStream(file.filepath);\r\n\r\n    const { optimize, isImage, isFaultyImage, isOptimizableImage } = strapi\r\n      .plugin('upload')\r\n      .service('image-manipulation');\r\n\r\n    if (await isImage(currentFile)) {\r\n      if (await isFaultyImage(currentFile)) {\r\n        throw new ApplicationError('File is not a valid image');\r\n      }\r\n      if (await isOptimizableImage(currentFile)) {\r\n        return optimize(currentFile);\r\n      }\r\n    }\r\n\r\n    return currentFile;\r\n  }\r\n\r\n  async function upload(\r\n    {\r\n      data,\r\n      files,\r\n    }: {\r\n      data: Record<string, unknown>;\r\n      files: InputFile | InputFile[];\r\n    },\r\n    opts?: CommonOptions\r\n  ) {\r\n    const { user } = opts ?? {};\r\n    // create temporary folder to store files for stream manipulation\r\n    const tmpWorkingDirectory = await createAndAssignTmpWorkingDirectoryToFiles(files);\r\n\r\n    let uploadedFiles: any[] = [];\r\n\r\n    try {\r\n      const { fileInfo, ...metas } = data;\r\n\r\n      const fileArray = Array.isArray(files) ? files : [files];\r\n      const fileInfoArray = Array.isArray(fileInfo) ? fileInfo : [fileInfo];\r\n\r\n      const doUpload = async (file: InputFile, fileInfo: FileInfo) => {\r\n        const fileData = await enhanceAndValidateFile(file, fileInfo, metas);\r\n        return uploadFileAndPersist(fileData, { user });\r\n      };\r\n\r\n      uploadedFiles = await Promise.all(\r\n        fileArray.map((file, idx) => doUpload(file, fileInfoArray[idx] || {}))\r\n      );\r\n    } finally {\r\n      // delete temporary folder\r\n      await fse.remove(tmpWorkingDirectory);\r\n    }\r\n\r\n    return uploadedFiles;\r\n  }\r\n\r\n  /**\r\n   * When uploading an image, an additional thumbnail is generated.\r\n   * Also, if there are responsive formats defined, another set of images will be generated too.\r\n   *\r\n   * @param {*} fileData\r\n   */\r\n  async function uploadImage(fileData: UploadableFile) {\r\n    const { getDimensions, generateThumbnail, generateResponsiveFormats, isResizableImage } =\r\n      getService('image-manipulation');\r\n\r\n    // Store width and height of the original image\r\n    const { width, height } = await getDimensions(fileData);\r\n\r\n    // Make sure this is assigned before calling any upload\r\n    // That way it can mutate the width and height\r\n    _.assign(fileData, {\r\n      width,\r\n      height,\r\n    });\r\n\r\n    // For performance reasons, all uploads are wrapped in a single Promise.all\r\n    const uploadThumbnail = async (thumbnailFile: UploadableFile) => {\r\n      await getService('provider').upload(thumbnailFile);\r\n      _.set(fileData, 'formats.thumbnail', thumbnailFile);\r\n    };\r\n\r\n    // Generate thumbnail and responsive formats\r\n    const uploadResponsiveFormat = async (format: { key: string; file: UploadableFile }) => {\r\n      const { key, file } = format;\r\n      await getService('provider').upload(file);\r\n      _.set(fileData, ['formats', key], file);\r\n    };\r\n\r\n    const uploadPromises: Promise<void>[] = [];\r\n\r\n    // Upload image\r\n    uploadPromises.push(getService('provider').upload(fileData));\r\n\r\n    // Generate & Upload thumbnail and responsive formats\r\n    if (await isResizableImage(fileData)) {\r\n      const thumbnailFile = await generateThumbnail(fileData);\r\n      if (thumbnailFile) {\r\n        uploadPromises.push(uploadThumbnail(thumbnailFile));\r\n      }\r\n\r\n      const formats = await generateResponsiveFormats(fileData);\r\n      if (Array.isArray(formats) && formats.length > 0) {\r\n        for (const format of formats) {\r\n          // eslint-disable-next-line no-continue\r\n          if (!format) continue;\r\n          uploadPromises.push(uploadResponsiveFormat(format));\r\n        }\r\n      }\r\n    }\r\n    // Wait for all uploads to finish\r\n    await Promise.all(uploadPromises);\r\n  }\r\n\r\n  /**\r\n   * Upload a file. If it is an image it will generate a thumbnail\r\n   * and responsive formats (if enabled).\r\n   */\r\n  async function uploadFileAndPersist(fileData: UploadableFile, opts?: CommonOptions) {\r\n    const { user } = opts ?? {};\r\n\r\n    const config = strapi.config.get<Config>('plugin::upload');\r\n    const { isImage } = getService('image-manipulation');\r\n\r\n    await getService('provider').checkFileSize(fileData);\r\n\r\n    if (await isImage(fileData)) {\r\n      await uploadImage(fileData);\r\n    } else {\r\n      await getService('provider').upload(fileData);\r\n    }\r\n\r\n    _.set(fileData, 'provider', config.provider);\r\n\r\n    // Persist file(s)\r\n    return add(fileData, { user });\r\n  }\r\n\r\n  async function updateFileInfo(\r\n    id: ID,\r\n    { name, alternativeText, caption, folder }: FileInfo,\r\n    opts?: CommonOptions\r\n  ) {\r\n    const { user } = opts ?? {};\r\n\r\n    const dbFile = await findOne(id);\r\n\r\n    if (!dbFile) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    const fileService = getService('file');\r\n\r\n    const newName = _.isNil(name) ? dbFile.name : name;\r\n    const newInfos = {\r\n      name: newName,\r\n      alternativeText: _.isNil(alternativeText) ? dbFile.alternativeText : alternativeText,\r\n      caption: _.isNil(caption) ? dbFile.caption : caption,\r\n      folder: _.isUndefined(folder) ? dbFile.folder : folder,\r\n      folderPath: _.isUndefined(folder) ? dbFile.path : await fileService.getFolderPath(folder),\r\n    };\r\n\r\n    return update(id, newInfos, { user });\r\n  }\r\n\r\n  async function replace(\r\n    id: ID,\r\n    { data, file }: { data: { fileInfo: FileInfo }; file: InputFile },\r\n    opts?: CommonOptions\r\n  ) {\r\n    const { user } = opts ?? {};\r\n\r\n    const config = strapi.config.get<Config>('plugin::upload');\r\n\r\n    const { isImage } = getService('image-manipulation');\r\n\r\n    const dbFile = await findOne(id);\r\n    if (!dbFile) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    // create temporary folder to store files for stream manipulation\r\n    const tmpWorkingDirectory = await createAndAssignTmpWorkingDirectoryToFiles(file);\r\n\r\n    let fileData: UploadableFile;\r\n\r\n    try {\r\n      const { fileInfo } = data;\r\n      fileData = await enhanceAndValidateFile(file, fileInfo);\r\n\r\n      // keep a constant hash and extension so the file url doesn't change when the file is replaced\r\n      _.assign(fileData, {\r\n        hash: dbFile.hash,\r\n        ext: dbFile.ext,\r\n      });\r\n\r\n      // execute delete function of the provider\r\n      if (dbFile.provider === config.provider) {\r\n        await strapi.plugin('upload').provider.delete(dbFile);\r\n\r\n        if (dbFile.formats) {\r\n          await Promise.all(\r\n            Object.keys(dbFile.formats).map((key) => {\r\n              return strapi.plugin('upload').provider.delete(dbFile.formats[key]);\r\n            })\r\n          );\r\n        }\r\n      }\r\n\r\n      // clear old formats\r\n      _.set(fileData, 'formats', {});\r\n\r\n      if (await isImage(fileData)) {\r\n        await uploadImage(fileData);\r\n      } else {\r\n        await getService('provider').upload(fileData);\r\n      }\r\n\r\n      _.set(fileData, 'provider', config.provider);\r\n    } finally {\r\n      // delete temporary folder\r\n      await fse.remove(tmpWorkingDirectory);\r\n    }\r\n\r\n    return update(id, fileData, { user });\r\n  }\r\n\r\n  async function update(id: ID, values: Partial<File>, opts?: CommonOptions) {\r\n    const { user } = opts ?? {};\r\n\r\n    const fileValues = { ...values };\r\n    if (user) {\r\n      Object.assign(fileValues, {\r\n        [UPDATED_BY_ATTRIBUTE]: user.id,\r\n      });\r\n    }\r\n\r\n    sendMediaMetrics(fileValues);\r\n\r\n    const res = await strapi.db.query(FILE_MODEL_UID).update({ where: { id }, data: fileValues });\r\n\r\n    await emitEvent(MEDIA_UPDATE, res);\r\n\r\n    return res;\r\n  }\r\n\r\n  async function add(values: any, opts?: CommonOptions) {\r\n    const { user } = opts ?? {};\r\n\r\n    const fileValues = { ...values };\r\n    if (user) {\r\n      Object.assign(fileValues, {\r\n        [UPDATED_BY_ATTRIBUTE]: user.id,\r\n        [CREATED_BY_ATTRIBUTE]: user.id,\r\n      });\r\n    }\r\n\r\n    sendMediaMetrics(fileValues);\r\n\r\n    const res = await strapi.db.query(FILE_MODEL_UID).create({ data: fileValues });\r\n\r\n    await emitEvent(MEDIA_CREATE, res);\r\n\r\n    return res;\r\n  }\r\n\r\n  function findOne(id: ID, populate = {}) {\r\n    const query = strapi.get('query-params').transform(FILE_MODEL_UID, {\r\n      populate,\r\n    });\r\n\r\n    return strapi.db.query(FILE_MODEL_UID).findOne({\r\n      where: { id },\r\n      ...query,\r\n    });\r\n  }\r\n\r\n  function findMany(query: any = {}): Promise<File[]> {\r\n    return strapi.db\r\n      .query(FILE_MODEL_UID)\r\n      .findMany(strapi.get('query-params').transform(FILE_MODEL_UID, query));\r\n  }\r\n\r\n  function findPage(query: any = {}) {\r\n    return strapi.db\r\n      .query(FILE_MODEL_UID)\r\n      .findPage(strapi.get('query-params').transform(FILE_MODEL_UID, query));\r\n  }\r\n\r\n  async function remove(file: File) {\r\n    const config = strapi.config.get<Config>('plugin::upload');\r\n\r\n    // execute delete function of the provider\r\n    if (file.provider === config.provider) {\r\n      await strapi.plugin('upload').provider.delete(file);\r\n\r\n      if (file.formats) {\r\n        const keys = Object.keys(file.formats);\r\n\r\n        await Promise.all(\r\n          keys.map((key) => {\r\n            return strapi.plugin('upload').provider.delete(file.formats![key]);\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    const media = await strapi.db.query(FILE_MODEL_UID).findOne({\r\n      where: { id: file.id },\r\n    });\r\n\r\n    await emitEvent(MEDIA_DELETE, media);\r\n\r\n    return strapi.db.query(FILE_MODEL_UID).delete({ where: { id: file.id } });\r\n  }\r\n\r\n  async function getSettings() {\r\n    const res = await strapi.store!({ type: 'plugin', name: 'upload', key: 'settings' }).get({});\r\n\r\n    return res as Settings | null;\r\n  }\r\n\r\n  function setSettings(value: Settings) {\r\n    if (value.responsiveDimensions === true) {\r\n      strapi.telemetry.send('didEnableResponsiveDimensions');\r\n    } else {\r\n      strapi.telemetry.send('didDisableResponsiveDimensions');\r\n    }\r\n\r\n    return strapi.store!({ type: 'plugin', name: 'upload', key: 'settings' }).set({ value });\r\n  }\r\n\r\n  async function getConfiguration() {\r\n    const res = await strapi.store!({\r\n      type: 'plugin',\r\n      name: 'upload',\r\n      key: 'view_configuration',\r\n    }).get({});\r\n\r\n    return res as ViewConfiguration | null;\r\n  }\r\n\r\n  function setConfiguration(value: ViewConfiguration) {\r\n    return strapi.store!({ type: 'plugin', name: 'upload', key: 'view_configuration' }).set({\r\n      value,\r\n    });\r\n  }\r\n\r\n  return {\r\n    formatFileInfo,\r\n    upload,\r\n    updateFileInfo,\r\n    replace,\r\n    findOne,\r\n    findMany,\r\n    findPage,\r\n    remove,\r\n    getSettings,\r\n    setSettings,\r\n    getConfiguration,\r\n    setConfiguration,\r\n\r\n    /**\r\n     * exposed for testing only\r\n     * @internal\r\n     */\r\n    _uploadImage: uploadImage,\r\n  };\r\n};\r\n","import fs from 'fs';\r\nimport { join } from 'path';\r\nimport sharp from 'sharp';\r\nimport { file as fileUtils } from '@strapi/utils';\r\n\r\nimport { getService } from '../utils';\r\n\r\nimport type { UploadableFile } from '../types';\r\n\r\ntype Dimensions = {\r\n  width: number | null;\r\n  height: number | null;\r\n};\r\n\r\nconst { bytesToKbytes } = fileUtils;\r\n\r\nconst FORMATS_TO_RESIZE = ['jpeg', 'png', 'webp', 'tiff', 'gif'];\r\nconst FORMATS_TO_PROCESS = ['jpeg', 'png', 'webp', 'tiff', 'svg', 'gif', 'avif'];\r\nconst FORMATS_TO_OPTIMIZE = ['jpeg', 'png', 'webp', 'tiff', 'avif'];\r\n\r\nconst isOptimizableFormat = (\r\n  format: string | undefined\r\n): format is 'jpeg' | 'png' | 'webp' | 'tiff' | 'avif' =>\r\n  format !== undefined && FORMATS_TO_OPTIMIZE.includes(format);\r\n\r\nconst writeStreamToFile = (stream: NodeJS.ReadWriteStream, path: string) =>\r\n  new Promise((resolve, reject) => {\r\n    const writeStream = fs.createWriteStream(path);\r\n    // Reject promise if there is an error with the provided stream\r\n    stream.on('error', reject);\r\n    stream.pipe(writeStream);\r\n    writeStream.on('close', resolve);\r\n    writeStream.on('error', reject);\r\n  });\r\n\r\nconst getMetadata = (file: UploadableFile): Promise<sharp.Metadata> => {\r\n  if (!file.filepath) {\r\n    return new Promise((resolve, reject) => {\r\n      const pipeline = sharp();\r\n      pipeline.metadata().then(resolve).catch(reject);\r\n      file.getStream().pipe(pipeline);\r\n    });\r\n  }\r\n\r\n  return sharp(file.filepath).metadata();\r\n};\r\n\r\nconst getDimensions = async (file: UploadableFile): Promise<Dimensions> => {\r\n  const { width = null, height = null } = await getMetadata(file);\r\n\r\n  return { width, height };\r\n};\r\n\r\nconst THUMBNAIL_RESIZE_OPTIONS = {\r\n  width: 245,\r\n  height: 156,\r\n  fit: 'inside',\r\n} satisfies sharp.ResizeOptions;\r\n\r\nconst resizeFileTo = async (\r\n  file: UploadableFile,\r\n  options: sharp.ResizeOptions,\r\n  {\r\n    name,\r\n    hash,\r\n  }: {\r\n    name: string;\r\n    hash: string;\r\n  }\r\n) => {\r\n  const filePath = file.tmpWorkingDirectory ? join(file.tmpWorkingDirectory, hash) : hash;\r\n\r\n  let newInfo;\r\n  if (!file.filepath) {\r\n    const transform = sharp()\r\n      .resize(options)\r\n      .on('info', (info) => {\r\n        newInfo = info;\r\n      });\r\n\r\n    await writeStreamToFile(file.getStream().pipe(transform), filePath);\r\n  } else {\r\n    newInfo = await sharp(file.filepath).resize(options).toFile(filePath);\r\n  }\r\n\r\n  const { width, height, size } = newInfo ?? {};\r\n\r\n  const newFile: UploadableFile = {\r\n    name,\r\n    hash,\r\n    ext: file.ext,\r\n    mime: file.mime,\r\n    filepath: filePath,\r\n    path: file.path || null,\r\n    getStream: () => fs.createReadStream(filePath),\r\n  };\r\n\r\n  Object.assign(newFile, {\r\n    width,\r\n    height,\r\n    size: size ? bytesToKbytes(size) : 0,\r\n    sizeInBytes: size,\r\n  });\r\n  return newFile;\r\n};\r\n\r\nconst generateThumbnail = async (file: UploadableFile) => {\r\n  if (\r\n    file.width &&\r\n    file.height &&\r\n    (file.width > THUMBNAIL_RESIZE_OPTIONS.width || file.height > THUMBNAIL_RESIZE_OPTIONS.height)\r\n  ) {\r\n    return resizeFileTo(file, THUMBNAIL_RESIZE_OPTIONS, {\r\n      name: `thumbnail_${file.name}`,\r\n      hash: `thumbnail_${file.hash}`,\r\n    });\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Optimize image by:\r\n *    - auto orienting image based on EXIF data\r\n *    - reduce image quality\r\n *\r\n */\r\nconst optimize = async (file: UploadableFile) => {\r\n  const { sizeOptimization = false, autoOrientation = false } =\r\n    (await getService('upload').getSettings()) ?? {};\r\n\r\n  const { format, size } = await getMetadata(file);\r\n\r\n  if ((sizeOptimization || autoOrientation) && isOptimizableFormat(format)) {\r\n    let transformer;\r\n    if (!file.filepath) {\r\n      transformer = sharp();\r\n    } else {\r\n      transformer = sharp(file.filepath);\r\n    }\r\n    // reduce image quality\r\n    transformer[format]({ quality: sizeOptimization ? 80 : 100 });\r\n    // rotate image based on EXIF data\r\n    if (autoOrientation) {\r\n      transformer.rotate();\r\n    }\r\n    const filePath = file.tmpWorkingDirectory\r\n      ? join(file.tmpWorkingDirectory, `optimized-${file.hash}`)\r\n      : `optimized-${file.hash}`;\r\n\r\n    let newInfo;\r\n    if (!file.filepath) {\r\n      transformer.on('info', (info) => {\r\n        newInfo = info;\r\n      });\r\n\r\n      await writeStreamToFile(file.getStream().pipe(transformer), filePath);\r\n    } else {\r\n      newInfo = await transformer.toFile(filePath);\r\n    }\r\n\r\n    const { width: newWidth, height: newHeight, size: newSize } = newInfo ?? {};\r\n\r\n    const newFile = { ...file };\r\n\r\n    newFile.getStream = () => fs.createReadStream(filePath);\r\n    newFile.filepath = filePath;\r\n\r\n    if (newSize && size && newSize > size) {\r\n      // Ignore optimization if output is bigger than original\r\n      return file;\r\n    }\r\n\r\n    return Object.assign(newFile, {\r\n      width: newWidth,\r\n      height: newHeight,\r\n      size: newSize ? bytesToKbytes(newSize) : 0,\r\n      sizeInBytes: newSize,\r\n    });\r\n  }\r\n\r\n  return file;\r\n};\r\n\r\nconst DEFAULT_BREAKPOINTS = {\r\n  large: 1000,\r\n  medium: 750,\r\n  small: 500,\r\n};\r\n\r\nconst getBreakpoints = () =>\r\n  strapi.config.get<Record<string, number>>('plugin::upload.breakpoints', DEFAULT_BREAKPOINTS);\r\n\r\nconst generateResponsiveFormats = async (file: UploadableFile) => {\r\n  const { responsiveDimensions = false } = (await getService('upload').getSettings()) ?? {};\r\n\r\n  if (!responsiveDimensions) return [];\r\n\r\n  const originalDimensions = await getDimensions(file);\r\n\r\n  const breakpoints = getBreakpoints();\r\n  return Promise.all(\r\n    Object.keys(breakpoints).map((key) => {\r\n      const breakpoint = breakpoints[key];\r\n\r\n      if (breakpointSmallerThan(breakpoint, originalDimensions)) {\r\n        return generateBreakpoint(key, { file, breakpoint });\r\n      }\r\n\r\n      return undefined;\r\n    })\r\n  );\r\n};\r\n\r\nconst generateBreakpoint = async (\r\n  key: string,\r\n  { file, breakpoint }: { file: UploadableFile; breakpoint: number }\r\n) => {\r\n  const newFile = await resizeFileTo(\r\n    file,\r\n    {\r\n      width: breakpoint,\r\n      height: breakpoint,\r\n      fit: 'inside',\r\n    },\r\n    {\r\n      name: `${key}_${file.name}`,\r\n      hash: `${key}_${file.hash}`,\r\n    }\r\n  );\r\n  return {\r\n    key,\r\n    file: newFile,\r\n  };\r\n};\r\n\r\nconst breakpointSmallerThan = (breakpoint: number, { width, height }: Dimensions) => {\r\n  return breakpoint < (width ?? 0) || breakpoint < (height ?? 0);\r\n};\r\n\r\n/**\r\n *  Applies a simple image transformation to see if the image is faulty/corrupted.\r\n */\r\nconst isFaultyImage = async (file: UploadableFile) => {\r\n  if (!file.filepath) {\r\n    return new Promise((resolve, reject) => {\r\n      const pipeline = sharp();\r\n      pipeline.stats().then(resolve).catch(reject);\r\n      file.getStream().pipe(pipeline);\r\n    });\r\n  }\r\n\r\n  try {\r\n    await sharp(file.filepath).stats();\r\n    return false;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n};\r\n\r\nconst isOptimizableImage = async (file: UploadableFile) => {\r\n  let format;\r\n  try {\r\n    const metadata = await getMetadata(file);\r\n    format = metadata.format;\r\n  } catch (e) {\r\n    // throw when the file is not a supported image\r\n    return false;\r\n  }\r\n  return format && FORMATS_TO_OPTIMIZE.includes(format);\r\n};\r\n\r\nconst isResizableImage = async (file: UploadableFile) => {\r\n  let format;\r\n  try {\r\n    const metadata = await getMetadata(file);\r\n    format = metadata.format;\r\n  } catch (e) {\r\n    // throw when the file is not a supported image\r\n    return false;\r\n  }\r\n  return format && FORMATS_TO_RESIZE.includes(format);\r\n};\r\n\r\nconst isImage = async (file: UploadableFile) => {\r\n  let format;\r\n  try {\r\n    const metadata = await getMetadata(file);\r\n    format = metadata.format;\r\n  } catch (e) {\r\n    // throw when the file is not a supported image\r\n    return false;\r\n  }\r\n  return format && FORMATS_TO_PROCESS.includes(format);\r\n};\r\n\r\nexport default {\r\n  isFaultyImage,\r\n  isOptimizableImage,\r\n  isResizableImage,\r\n  isImage,\r\n  getDimensions,\r\n  generateResponsiveFormats,\r\n  generateThumbnail,\r\n  optimize,\r\n};\r\n","import { sortBy, map, isUndefined } from 'lodash/fp';\r\nimport { strings, setCreatorFields } from '@strapi/utils';\r\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\r\nimport { getService } from '../utils';\r\n\r\nimport type { File, Folder } from '../types';\r\n\r\ntype FolderMap = {\r\n  [key: string]: Partial<Folder> & {\r\n    children: FolderNode[];\r\n  };\r\n};\r\n\r\ntype FolderNode = Partial<Folder> & {\r\n  children: FolderNode[];\r\n};\r\n\r\nconst setPathIdAndPath = async (folder: Pick<Folder, 'parent'>) => {\r\n  const { max } = await strapi.db\r\n    .queryBuilder(FOLDER_MODEL_UID)\r\n    .max('pathId')\r\n    .first()\r\n    .execute<{ max: number }>();\r\n\r\n  const pathId = max + 1;\r\n  let parentPath = '/';\r\n  if (folder.parent) {\r\n    const parentFolder = await strapi.db\r\n      .query(FOLDER_MODEL_UID)\r\n      .findOne({ where: { id: folder.parent } });\r\n\r\n    parentPath = parentFolder.path;\r\n  }\r\n\r\n  return Object.assign(folder, {\r\n    pathId,\r\n    path: strings.joinBy('/', parentPath, `${pathId}`),\r\n  });\r\n};\r\n\r\nconst create = async (\r\n  folderData: Pick<Folder, 'name' | 'parent'>,\r\n  opts?: { user: { id: string | number } }\r\n) => {\r\n  const folderService = getService('folder');\r\n\r\n  const { user } = opts || {};\r\n\r\n  let enrichedFolder = await folderService.setPathIdAndPath(folderData);\r\n  if (user) {\r\n    enrichedFolder = await setCreatorFields({ user })(enrichedFolder);\r\n  }\r\n\r\n  const folder = await strapi.db.query(FOLDER_MODEL_UID).create({ data: enrichedFolder });\r\n\r\n  strapi.eventHub.emit('media-folder.create', { folder });\r\n\r\n  return folder;\r\n};\r\n\r\n/**\r\n * Recursively delete folders and included files\r\n * @param ids ids of the folders to delete\r\n * @returns {Promise<Object[]>}\r\n */\r\nconst deleteByIds = async (ids = []) => {\r\n  const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({ where: { id: { $in: ids } } });\r\n  if (folders.length === 0) {\r\n    return {\r\n      folders: [],\r\n      totalFolderNumber: 0,\r\n      totalFileNumber: 0,\r\n    };\r\n  }\r\n\r\n  const pathsToDelete = map('path', folders);\r\n\r\n  // delete files\r\n  const filesToDelete = await strapi.db.query(FILE_MODEL_UID).findMany({\r\n    where: {\r\n      $or: pathsToDelete.flatMap((path) => [\r\n        { folderPath: { $eq: path } },\r\n        { folderPath: { $startsWith: `${path}/` } },\r\n      ]),\r\n    },\r\n  });\r\n\r\n  await Promise.all(filesToDelete.map((file: File) => getService('upload').remove(file)));\r\n\r\n  // delete folders and subfolders\r\n  const { count: totalFolderNumber } = await strapi.db.query(FOLDER_MODEL_UID).deleteMany({\r\n    where: {\r\n      $or: pathsToDelete.flatMap((path) => [\r\n        { path: { $eq: path } },\r\n        { path: { $startsWith: `${path}/` } },\r\n      ]),\r\n    },\r\n  });\r\n\r\n  strapi.eventHub.emit('media-folder.delete', { folders });\r\n\r\n  return {\r\n    folders,\r\n    totalFolderNumber,\r\n    totalFileNumber: filesToDelete.length,\r\n  };\r\n};\r\n\r\n/**\r\n * Update name and location of a folder and its belonging folders and files\r\n */\r\nconst update = async (\r\n  id: number,\r\n  {\r\n    name,\r\n    parent,\r\n  }: {\r\n    name: string;\r\n    parent: number | null;\r\n  },\r\n  { user }: { user: { id: string | number } }\r\n) => {\r\n  // only name is updated\r\n  if (isUndefined(parent)) {\r\n    const existingFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id } });\r\n\r\n    if (!existingFolder) {\r\n      return undefined;\r\n    }\r\n\r\n    const newFolder = setCreatorFields({ user, isEdition: true })({ name, parent });\r\n\r\n    if (isUndefined(parent)) {\r\n      const folder = await strapi.db\r\n        .query(FOLDER_MODEL_UID)\r\n        .update({ where: { id }, data: newFolder });\r\n\r\n      return folder;\r\n    }\r\n    // location is updated => using transaction\r\n  } else {\r\n    const trx = await strapi.db.transaction();\r\n    try {\r\n      // fetch existing folder\r\n      const existingFolder = await strapi.db\r\n        .queryBuilder(FOLDER_MODEL_UID)\r\n        .select(['pathId', 'path'])\r\n        .where({ id })\r\n        .transacting(trx.get())\r\n        .forUpdate()\r\n        .first()\r\n        .execute<Folder>();\r\n\r\n      // update parent folder (delete + insert; upsert not possible)\r\n      // @ts-expect-error - no dynamic types\r\n      const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\r\n      await strapi.db\r\n        .queryBuilder(joinTable.name)\r\n        .transacting(trx.get())\r\n        .delete()\r\n        .where({ [joinTable.joinColumn.name]: id })\r\n        .execute();\r\n\r\n      if (parent !== null) {\r\n        await strapi.db\r\n          .queryBuilder(joinTable.name)\r\n          .transacting(trx.get())\r\n          .insert({ [joinTable.inverseJoinColumn.name]: parent, [joinTable.joinColumn.name]: id })\r\n          .where({ [joinTable.joinColumn.name]: id })\r\n          .execute();\r\n      }\r\n\r\n      // fetch destinationFolder path\r\n      let destinationFolderPath = '/';\r\n      if (parent !== null) {\r\n        const destinationFolder = await strapi.db\r\n          .queryBuilder(FOLDER_MODEL_UID)\r\n          .select('path')\r\n          .where({ id: parent })\r\n          .transacting(trx.get())\r\n          .first()\r\n          .execute<Folder>();\r\n        destinationFolderPath = destinationFolder.path;\r\n      }\r\n\r\n      const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\r\n      const fileTable = strapi.getModel(FILE_MODEL_UID).collectionName;\r\n      const folderPathColumnName =\r\n        // @ts-expect-error - no dynamic types\r\n        strapi.db.metadata.get(FILE_MODEL_UID).attributes.folderPath.columnName;\r\n      // @ts-expect-error - no dynamic types\r\n      const pathColumnName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\r\n\r\n      // update folders below\r\n      await strapi.db\r\n        .getConnection(folderTable)\r\n        .transacting(trx.get())\r\n        .where(pathColumnName, existingFolder.path)\r\n        .orWhere(pathColumnName, 'like', `${existingFolder.path}/%`)\r\n        .update(\r\n          pathColumnName,\r\n          strapi.db.connection.raw('REPLACE(??, ?, ?)', [\r\n            pathColumnName,\r\n            existingFolder.path,\r\n            strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\r\n          ])\r\n        );\r\n\r\n      // update files below\r\n      await strapi.db\r\n        .getConnection(fileTable)\r\n        .transacting(trx.get())\r\n        .where(folderPathColumnName, existingFolder.path)\r\n        .orWhere(folderPathColumnName, 'like', `${existingFolder.path}/%`)\r\n        .update(\r\n          folderPathColumnName,\r\n          strapi.db.connection.raw('REPLACE(??, ?, ?)', [\r\n            folderPathColumnName,\r\n            existingFolder.path,\r\n            strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\r\n          ])\r\n        );\r\n\r\n      await trx.commit();\r\n    } catch (e) {\r\n      await trx.rollback();\r\n      throw e;\r\n    }\r\n\r\n    // update less critical information (name + updatedBy)\r\n    const newFolder = setCreatorFields({ user, isEdition: true })({ name });\r\n\r\n    const folder = await strapi.db\r\n      .query(FOLDER_MODEL_UID)\r\n      .update({ where: { id }, data: newFolder });\r\n\r\n    strapi.eventHub.emit('media-folder.update', { folder });\r\n    return folder;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if a folder exists in database\r\n * @param params query params to find the folder\r\n * @returns {Promise<boolean>}\r\n */\r\nconst exists = async (params = {}) => {\r\n  const count = await strapi.db.query(FOLDER_MODEL_UID).count({ where: params });\r\n  return count > 0;\r\n};\r\n\r\n/**\r\n * Returns the nested structure of folders\r\n * @returns {Promise<array>}\r\n */\r\nconst getStructure = async () => {\r\n  // @ts-expect-error - no dynamic types\r\n  const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\r\n  const qb = strapi.db.queryBuilder(FOLDER_MODEL_UID);\r\n  const alias = qb.getAlias();\r\n  const folders = (await qb\r\n    .select(['id', 'name', `${alias}.${joinTable.inverseJoinColumn.name} as parent`])\r\n    .join({\r\n      alias,\r\n      referencedTable: joinTable.name,\r\n      referencedColumn: joinTable.joinColumn.name,\r\n      rootColumn: joinTable.joinColumn.referencedColumn,\r\n      rootTable: qb.alias,\r\n    })\r\n    .execute({ mapResults: false })) as Folder[];\r\n\r\n  const folderMap: FolderMap = {\r\n    null: { children: [] },\r\n  };\r\n\r\n  folders.forEach((f) => {\r\n    folderMap[f.id] = { ...f, children: [] };\r\n  });\r\n\r\n  folders.forEach((f) => {\r\n    const parentId = f.parent || 'null';\r\n\r\n    if (!folderMap[parentId]) {\r\n      folderMap[parentId] = { children: [] };\r\n    }\r\n\r\n    folderMap[parentId].children.push(folderMap[f.id]);\r\n    folderMap[parentId].children = sortBy('name', folderMap[parentId].children);\r\n    delete folderMap[f.id].parent;\r\n  });\r\n\r\n  return folderMap.null.children;\r\n};\r\n\r\nexport default {\r\n  create,\r\n  exists,\r\n  deleteByIds,\r\n  update,\r\n  setPathIdAndPath,\r\n  getStructure,\r\n};\r\n","import { cloneDeep } from 'lodash/fp';\r\nimport { async } from '@strapi/utils';\r\n\r\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\r\nimport { getService } from '../utils';\r\n\r\nimport { Config, type File } from '../types';\r\n\r\nconst getFolderPath = async (folderId?: number | null) => {\r\n  if (!folderId) return '/';\r\n\r\n  const parentFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id: folderId } });\r\n\r\n  return parentFolder.path;\r\n};\r\n\r\nconst deleteByIds = async (ids: number[] = []) => {\r\n  const filesToDelete = await strapi.db\r\n    .query(FILE_MODEL_UID)\r\n    .findMany({ where: { id: { $in: ids } } });\r\n\r\n  await Promise.all(filesToDelete.map((file: File) => getService('upload').remove(file)));\r\n\r\n  return filesToDelete;\r\n};\r\n\r\nconst signFileUrls = async (file: File) => {\r\n  const { provider } = strapi.plugins.upload;\r\n  const { provider: providerConfig } = strapi.config.get<Config>('plugin::upload');\r\n  const isPrivate = await provider.isPrivate();\r\n  file.isUrlSigned = false;\r\n\r\n  // Check file provider and if provider is private\r\n  if (file.provider !== providerConfig || !isPrivate) {\r\n    return file;\r\n  }\r\n\r\n  const signUrl = async (file: File) => {\r\n    const signedUrl = await provider.getSignedUrl(file);\r\n    file.url = signedUrl.url;\r\n    file.isUrlSigned = true;\r\n  };\r\n\r\n  const signedFile = cloneDeep(file);\r\n\r\n  // Sign each file format\r\n  await signUrl(signedFile);\r\n  if (file.formats) {\r\n    await async.map(Object.values(signedFile.formats ?? {}), signUrl);\r\n  }\r\n\r\n  return signedFile;\r\n};\r\n\r\nexport default { getFolderPath, deleteByIds, signFileUrls };\r\n","const getWeeklyCronScheduleAt = (date: Date) =>\r\n  `${date.getSeconds()} ${date.getMinutes()} ${date.getHours()} * * ${date.getDay()}`;\r\n\r\nexport { getWeeklyCronScheduleAt };\r\n","import { defaultTo } from 'lodash/fp';\r\nimport { add } from 'date-fns';\r\n\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport { getWeeklyCronScheduleAt } from '../utils/cron';\r\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\r\n\r\ntype MetricStoreValue = {\r\n  lastWeeklyUpdate?: number;\r\n  weeklySchedule?: string;\r\n};\r\n\r\nconst ONE_WEEK = 7 * 24 * 60 * 60 * 1000;\r\n\r\nconst getMetricsStoreValue = async (): Promise<MetricStoreValue> => {\r\n  const value = await strapi.store.get({ type: 'plugin', name: 'upload', key: 'metrics' });\r\n  return defaultTo({}, value) as MetricStoreValue;\r\n};\r\nconst setMetricsStoreValue = (value: MetricStoreValue) =>\r\n  strapi.store.set({ type: 'plugin', name: 'upload', key: 'metrics', value });\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  async computeMetrics() {\r\n    // Folder metrics\r\n    // @ts-expect-error - no dynamic types for the metadata\r\n    const pathColName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\r\n    const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\r\n\r\n    let keepOnlySlashesSQLString = '??';\r\n    const queryParams = [pathColName];\r\n    for (let i = 0; i < 10; i += 1) {\r\n      keepOnlySlashesSQLString = `REPLACE(${keepOnlySlashesSQLString}, ?, ?)`;\r\n      queryParams.push(String(i), '');\r\n    }\r\n\r\n    /*\r\n      The following query goal is to count the number of folders with depth 1, depth 2 etc.\r\n      The query returns :\r\n      [\r\n        { depth: 1, occurence: 4 },\r\n        { depth: 2, occurence: 2 },\r\n        { depth: 3, occurence: 5 },\r\n      ]\r\n\r\n      The query is built as follow:\r\n      1. In order to get the depth level of a folder:\r\n        - we take their path\r\n        - remove all numbers (by replacing 0123456789 by '', thus the 10 REPLACE in the query)\r\n        - count the remaining `/`, which correspond to their depth (by using LENGTH)\r\n        We now have, for each folder, its depth.\r\n      2. In order to get the number of folders for each depth:\r\n        - we group them by their depth and use COUNT(*)\r\n    */\r\n\r\n    const res = (await strapi.db\r\n      .getConnection(folderTable)\r\n      .select(\r\n        strapi.db.connection.raw(\r\n          `LENGTH(${keepOnlySlashesSQLString}) AS depth, COUNT(*) AS occurence`,\r\n          queryParams\r\n        )\r\n      )\r\n      .groupBy('depth')) as Array<{ depth: string; occurence: string }>;\r\n\r\n    const folderLevelsArray = res.map((map) => ({\r\n      depth: Number(map.depth),\r\n      occurence: Number(map.occurence),\r\n    })); // values can be strings depending on the database\r\n\r\n    let product = 0;\r\n    let folderNumber = 0;\r\n    let maxDepth = 0;\r\n    for (const folderLevel of folderLevelsArray) {\r\n      product += folderLevel.depth * folderLevel.occurence;\r\n      folderNumber += folderLevel.occurence;\r\n      if (folderLevel.depth > maxDepth) {\r\n        maxDepth = folderLevel.depth;\r\n      }\r\n    }\r\n    const averageDepth = folderNumber !== 0 ? product / folderNumber : 0;\r\n\r\n    let sumOfDeviation = 0;\r\n    for (const folderLevel of folderLevelsArray) {\r\n      sumOfDeviation += Math.abs(folderLevel.depth - averageDepth) * folderLevel.occurence;\r\n    }\r\n\r\n    const averageDeviationDepth = folderNumber !== 0 ? sumOfDeviation / folderNumber : 0;\r\n\r\n    // File metrics\r\n    const assetNumber = await strapi.db.query(FILE_MODEL_UID).count();\r\n\r\n    return {\r\n      assetNumber,\r\n      folderNumber,\r\n      averageDepth,\r\n      maxDepth,\r\n      averageDeviationDepth,\r\n    };\r\n  },\r\n\r\n  async sendMetrics() {\r\n    const metrics = await this.computeMetrics();\r\n    strapi.telemetry.send('didSendUploadPropertiesOnceAWeek', {\r\n      groupProperties: { metrics },\r\n    });\r\n\r\n    const metricsInfoStored = await getMetricsStoreValue();\r\n    await setMetricsStoreValue({ ...metricsInfoStored, lastWeeklyUpdate: new Date().getTime() });\r\n  },\r\n\r\n  async ensureWeeklyStoredCronSchedule(): Promise<string> {\r\n    const metricsInfoStored = await getMetricsStoreValue();\r\n    const { weeklySchedule: currentSchedule, lastWeeklyUpdate } = metricsInfoStored;\r\n\r\n    const now = new Date();\r\n    let weeklySchedule = currentSchedule;\r\n\r\n    if (!weeklySchedule || !lastWeeklyUpdate || lastWeeklyUpdate + ONE_WEEK < now.getTime()) {\r\n      weeklySchedule = getWeeklyCronScheduleAt(add(now, { minutes: 5 }));\r\n      await setMetricsStoreValue({ ...metricsInfoStored, weeklySchedule });\r\n\r\n      return weeklySchedule;\r\n    }\r\n\r\n    return weeklySchedule;\r\n  },\r\n\r\n  async registerCron() {\r\n    const weeklySchedule = await this.ensureWeeklyStoredCronSchedule();\r\n\r\n    strapi.cron.add({\r\n      uploadWeekly: {\r\n        task: this.sendMetrics.bind(this),\r\n        options: weeklySchedule,\r\n      },\r\n    });\r\n  },\r\n});\r\n","import type { Core } from '@strapi/types';\r\n\r\nconst getProviderName = () => strapi.config.get('plugin::upload.provider', 'local');\r\nconst isProviderPrivate = async () => strapi.plugin('upload').provider.isPrivate();\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  async sendUploadPluginMetrics() {\r\n    const uploadProvider = getProviderName();\r\n    const privateProvider = await isProviderPrivate();\r\n\r\n    strapi.telemetry.send('didInitializePluginUpload', {\r\n      groupProperties: {\r\n        uploadProvider,\r\n        privateProvider,\r\n      },\r\n    });\r\n  },\r\n});\r\n","import { isNil, get } from 'lodash/fp';\r\nimport { getService } from '../utils';\r\nimport { FOLDER_MODEL_UID, API_UPLOAD_FOLDER_BASE_NAME } from '../constants';\r\n\r\nconst getStore = () => strapi.store({ type: 'plugin', name: 'upload', key: 'api-folder' });\r\n\r\nconst createApiUploadFolder = async () => {\r\n  let name = API_UPLOAD_FOLDER_BASE_NAME;\r\n  const folderService = getService('folder');\r\n\r\n  let exists = true;\r\n  let index = 1;\r\n  while (exists) {\r\n    exists = await folderService.exists({ name, parent: null });\r\n    if (exists) {\r\n      name = `${API_UPLOAD_FOLDER_BASE_NAME} (${index})`;\r\n      index += 1;\r\n    }\r\n  }\r\n\r\n  const folder = await folderService.create({ name });\r\n\r\n  await getStore().set({ value: { id: folder.id } });\r\n\r\n  return folder;\r\n};\r\n\r\nconst getAPIUploadFolder = async () => {\r\n  const storeValue = await getStore().get({});\r\n  const folderId = get('id', storeValue);\r\n\r\n  const folder = folderId\r\n    ? await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id: folderId } })\r\n    : null;\r\n\r\n  return isNil(folder) ? createApiUploadFolder() : folder;\r\n};\r\n\r\nexport default {\r\n  getAPIUploadFolder,\r\n};\r\n","import { async, traverseEntity } from '@strapi/utils';\r\n\r\nimport type { Schema, UID } from '@strapi/types';\r\n\r\nimport { getService } from '../../utils';\r\n\r\nimport type { File } from '../../types';\r\n\r\ntype SignEntityMediaVisitor = (\r\n  args: {\r\n    key: string;\r\n    value: unknown;\r\n    attribute: Schema.Attribute.AnyAttribute;\r\n  },\r\n  utils: {\r\n    set: (key: string, value: unknown) => void;\r\n  }\r\n) => Promise<void>;\r\n\r\nfunction isFile(value: unknown, attribute: Schema.Attribute.AnyAttribute): value is File {\r\n  if (!value || attribute.type !== 'media') {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Visitor function to sign media URLs\r\n */\r\nconst signEntityMediaVisitor: SignEntityMediaVisitor = async (\r\n  { key, value, attribute },\r\n  { set }\r\n) => {\r\n  const { signFileUrls } = getService('file');\r\n\r\n  if (!attribute) {\r\n    return;\r\n  }\r\n\r\n  if (attribute.type !== 'media') {\r\n    return;\r\n  }\r\n\r\n  if (isFile(value, attribute)) {\r\n    // If the attribute is repeatable sign each file\r\n    if (attribute.multiple) {\r\n      const signedFiles = await async.map(value, signFileUrls);\r\n      set(key, signedFiles);\r\n      return;\r\n    }\r\n\r\n    // If the attribute is not repeatable only sign a single file\r\n    const signedFile = await signFileUrls(value);\r\n    set(key, signedFile);\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * Iterate through an entity manager result\r\n * Check which modelAttributes are media and pre sign the image URLs\r\n * if they are from the current upload provider\r\n *\r\n * @param {Object} entity\r\n * @param {Object} modelAttributes\r\n * @returns\r\n */\r\nconst signEntityMedia = async (entity: any, uid: UID.Schema) => {\r\n  const model = strapi.getModel(uid);\r\n  return traverseEntity(\r\n    // @ts-expect-error - FIXME: fix traverseEntity using wrong types\r\n    signEntityMediaVisitor,\r\n    { schema: model, getModel: strapi.getModel.bind(strapi) },\r\n    entity\r\n  );\r\n};\r\n\r\nexport { signEntityMedia };\r\n","import { async } from '@strapi/utils';\r\nimport { signEntityMedia } from './utils';\r\n\r\nconst signFileUrlsOnDocumentService = async () => {\r\n  const { provider } = strapi.plugins.upload;\r\n  const isPrivate = await provider.isPrivate();\r\n\r\n  // We only need to sign the file urls if the provider is private\r\n  if (!isPrivate) {\r\n    return;\r\n  }\r\n\r\n  strapi.documents.use(async (ctx, next) => {\r\n    const uid = ctx.uid;\r\n    const result: any = await next();\r\n\r\n    if (ctx.action === 'findMany') {\r\n      // Shape: [ entry ]\r\n      return async.map(result, (entry: any) => signEntityMedia(entry, uid));\r\n    }\r\n\r\n    if (\r\n      ctx.action === 'findFirst' ||\r\n      ctx.action === 'findOne' ||\r\n      ctx.action === 'create' ||\r\n      ctx.action === 'update'\r\n    ) {\r\n      // Shape: entry\r\n      return signEntityMedia(result, uid);\r\n    }\r\n\r\n    if (\r\n      ctx.action === 'delete' ||\r\n      ctx.action === 'clone' ||\r\n      ctx.action === 'publish' ||\r\n      ctx.action === 'unpublish' ||\r\n      ctx.action === 'discardDraft'\r\n    ) {\r\n      // Shape: { entries: [ entry ] }\r\n      // ...\r\n      return {\r\n        ...result,\r\n        entries: await async.map(result.entries, (entry: any) => signEntityMedia(entry, uid)),\r\n      };\r\n    }\r\n\r\n    return result;\r\n  });\r\n};\r\n\r\nexport default {\r\n  signFileUrlsOnDocumentService,\r\n};\r\n","import provider from './provider';\r\nimport upload from './upload';\r\nimport imageManipulation from './image-manipulation';\r\nimport folder from './folder';\r\nimport file from './file';\r\nimport weeklyMetrics from './weekly-metrics';\r\nimport metrics from './metrics';\r\nimport apiUploadFolder from './api-upload-folder';\r\nimport extensions from './extensions';\r\n\r\nexport const services = {\r\n  provider,\r\n  upload,\r\n  folder,\r\n  file,\r\n  weeklyMetrics,\r\n  metrics,\r\n  'image-manipulation': imageManipulation,\r\n  'api-upload-folder': apiUploadFolder,\r\n  extensions,\r\n};\r\n","export const routes = {\r\n  type: 'admin',\r\n  routes: [\r\n    {\r\n      method: 'GET',\r\n      path: '/settings',\r\n      handler: 'admin-settings.getSettings',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.settings.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/settings',\r\n      handler: 'admin-settings.updateSettings',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.settings.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/',\r\n      handler: 'admin-upload.upload',\r\n      config: {\r\n        policies: ['admin::isAuthenticatedAdmin'],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/files',\r\n      handler: 'admin-file.find',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/files/:id',\r\n      handler: 'admin-file.findOne',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/files/:id',\r\n      handler: 'admin-file.destroy',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.assets.update'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/folders/:id',\r\n      handler: 'admin-folder.findOne',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/folders',\r\n      handler: 'admin-folder.find',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/folders',\r\n      handler: 'admin-folder.create',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.assets.create'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/folders/:id',\r\n      handler: 'admin-folder.update',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.assets.update'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/folder-structure',\r\n      handler: 'admin-folder.getStructure',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.read'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/actions/bulk-delete',\r\n      handler: 'admin-folder-file.deleteMany',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.assets.update'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/actions/bulk-move',\r\n      handler: 'admin-folder-file.moveMany',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: ['plugin::upload.assets.update'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  ],\r\n};\r\n","export const routes = {\r\n  type: 'content-api',\r\n  routes: [\r\n    {\r\n      method: 'POST',\r\n      path: '/',\r\n      handler: 'content-api.upload',\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/files',\r\n      handler: 'content-api.find',\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/files/:id',\r\n      handler: 'content-api.findOne',\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/files/:id',\r\n      handler: 'content-api.destroy',\r\n    },\r\n  ],\r\n};\r\n","import { ACTIONS } from '../constants';\r\n\r\nexport const routes = {\r\n  type: 'admin',\r\n  routes: [\r\n    {\r\n      method: 'GET',\r\n      path: '/configuration',\r\n      handler: 'view-configuration.findViewConfiguration',\r\n      config: {\r\n        policies: ['admin::isAuthenticatedAdmin'],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/configuration',\r\n      handler: 'view-configuration.updateViewConfiguration',\r\n      config: {\r\n        policies: [\r\n          'admin::isAuthenticatedAdmin',\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: {\r\n              actions: [ACTIONS.configureView],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  ],\r\n};\r\n","import { routes as admin } from './admin';\r\nimport { routes as contentApi } from './content-api';\r\nimport { routes as viewConfiguration } from './view-configuration';\r\n\r\nexport const routes = {\r\n  admin,\r\n  'content-api': contentApi,\r\n  viewConfiguration,\r\n};\r\n","export const config = {\r\n  default: {\r\n    enabled: true,\r\n    provider: 'local',\r\n    sizeLimit: 1000000000, // 1GB\r\n    actionOptions: {},\r\n  },\r\n  validator() {},\r\n};\r\n","import _ from 'lodash';\r\nimport { errors, contentTypes as contentTypesUtils } from '@strapi/utils';\r\nimport { getService } from '../../utils';\r\n\r\nconst findEntityAndCheckPermissions = async (\r\n  ability: unknown,\r\n  action: string,\r\n  model: string,\r\n  id: string | number\r\n) => {\r\n  const file = await getService('upload').findOne(id, [\r\n    contentTypesUtils.constants.CREATED_BY_ATTRIBUTE,\r\n    'folder',\r\n  ]);\r\n\r\n  if (_.isNil(file)) {\r\n    throw new errors.NotFoundError();\r\n  }\r\n\r\n  const pm = strapi\r\n    .service('admin::permission')\r\n    .createPermissionsManager({ ability, action, model });\r\n\r\n  const creatorId = _.get(file, [contentTypesUtils.constants.CREATED_BY_ATTRIBUTE, 'id']);\r\n  const author = creatorId\r\n    ? await strapi.service('admin::user').findOne(creatorId, ['roles'])\r\n    : null;\r\n\r\n  const fileWithRoles = _.set(_.cloneDeep(file), 'createdBy', author);\r\n\r\n  if (pm.ability.cannot(pm.action, pm.toSubject(fileWithRoles))) {\r\n    throw new errors.ForbiddenError();\r\n  }\r\n\r\n  return { pm, file };\r\n};\r\n\r\nexport { findEntityAndCheckPermissions };\r\n","import { merge } from 'lodash/fp';\r\nimport { async } from '@strapi/utils';\r\n\r\nimport type { Context } from 'koa';\r\n\r\nimport { getService } from '../utils';\r\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\r\nimport { findEntityAndCheckPermissions } from './utils/find-entity-and-check-permissions';\r\n\r\nexport default {\r\n  async find(ctx: Context) {\r\n    const {\r\n      state: { userAbility },\r\n    } = ctx;\r\n\r\n    const defaultQuery = { populate: { folder: true } };\r\n\r\n    const pm = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: userAbility,\r\n      action: ACTIONS.read,\r\n      model: FILE_MODEL_UID,\r\n    });\r\n\r\n    if (!pm.isAllowed) {\r\n      return ctx.forbidden();\r\n    }\r\n\r\n    // validate the incoming user query params\r\n    await pm.validateQuery(ctx.query);\r\n\r\n    const query = await async.pipe(\r\n      // Start by sanitizing the incoming query\r\n      (q) => pm.sanitizeQuery(q),\r\n      // Add the default query which should not be validated or sanitized\r\n      (q) => merge(defaultQuery, q),\r\n      // Add the dynamic filters based on permissions' conditions\r\n      (q) => pm.addPermissionsQueryTo(q)\r\n    )(ctx.query);\r\n\r\n    const { results: files, pagination } = await getService('upload').findPage(query);\r\n\r\n    // Sign file urls for private providers\r\n    const signedFiles = await async.map(files, getService('file').signFileUrls);\r\n\r\n    const sanitizedFiles = await pm.sanitizeOutput(signedFiles);\r\n\r\n    return { results: sanitizedFiles, pagination };\r\n  },\r\n\r\n  async findOne(ctx: Context) {\r\n    const {\r\n      state: { userAbility },\r\n      params: { id },\r\n    } = ctx;\r\n\r\n    const { pm, file } = await findEntityAndCheckPermissions(\r\n      userAbility,\r\n      ACTIONS.read,\r\n      FILE_MODEL_UID,\r\n      id\r\n    );\r\n\r\n    const signedFile = await getService('file').signFileUrls(file);\r\n    ctx.body = await pm.sanitizeOutput(signedFile);\r\n  },\r\n\r\n  async destroy(ctx: Context) {\r\n    const { id } = ctx.params;\r\n    const { userAbility } = ctx.state;\r\n\r\n    const { pm, file } = await findEntityAndCheckPermissions(\r\n      userAbility,\r\n      ACTIONS.update,\r\n      FILE_MODEL_UID,\r\n      id\r\n    );\r\n\r\n    const [body] = await Promise.all([\r\n      pm.sanitizeOutput(file, { action: ACTIONS.read }),\r\n      getService('upload').remove(file),\r\n    ]);\r\n\r\n    ctx.body = body;\r\n  },\r\n};\r\n","import { isNil } from 'lodash/fp';\r\nimport { getService } from '../../../utils';\r\n\r\nconst folderExists = async (folderId: number) => {\r\n  if (isNil(folderId)) {\r\n    return true;\r\n  }\r\n\r\n  const exists = await getService('folder').exists({ id: folderId });\r\n\r\n  return exists;\r\n};\r\n\r\nexport { folderExists };\r\n","import { Folder } from '../../types';\r\n\r\nconst isFolderOrChild = (folderOrChild: Folder, folder: Folder) =>\r\n  folderOrChild.path === folder.path || folderOrChild.path.startsWith(`${folder.path}/`);\r\n\r\nexport { isFolderOrChild };\r\n","import { isUndefined, get, isNil } from 'lodash/fp';\r\nimport { yup, validateYupSchema } from '@strapi/utils';\r\nimport { getService } from '../../../utils';\r\nimport { FOLDER_MODEL_UID } from '../../../constants';\r\nimport { folderExists } from './utils';\r\nimport { isFolderOrChild } from '../../utils/folders';\r\n\r\nconst NO_SLASH_REGEX = /^[^/]+$/;\r\nconst NO_SPACES_AROUND = /^(?! ).+(?<! )$/;\r\n\r\nconst isNameUniqueInFolder = (id?: number): yup.TestFunction<string | undefined> => {\r\n  return async function test(name?: string) {\r\n    const { exists } = getService('folder');\r\n    const filters: Record<string, unknown> = { name, parent: this.parent.parent || null };\r\n    if (id) {\r\n      filters.id = { $ne: id };\r\n\r\n      if (isUndefined(name)) {\r\n        const existingFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id } });\r\n        filters.name = get('name', existingFolder);\r\n      }\r\n    }\r\n\r\n    const doesExist = await exists(filters);\r\n    return !doesExist;\r\n  };\r\n};\r\n\r\nconst validateCreateFolderSchema = yup\r\n  .object()\r\n  .shape({\r\n    name: yup\r\n      .string()\r\n      .min(1)\r\n      .matches(NO_SLASH_REGEX, 'name cannot contain slashes')\r\n      .matches(NO_SPACES_AROUND, 'name cannot start or end with a whitespace')\r\n      .required()\r\n      .test('is-folder-unique', 'A folder with this name already exists', isNameUniqueInFolder()),\r\n    parent: yup\r\n      .strapiID()\r\n      .nullable()\r\n      .test('folder-exists', 'parent folder does not exist', folderExists),\r\n  })\r\n  .noUnknown()\r\n  .required();\r\n\r\nconst validateUpdateFolderSchema = (id: number) =>\r\n  yup\r\n    .object()\r\n    .shape({\r\n      name: yup\r\n        .string()\r\n        .min(1)\r\n        .matches(NO_SLASH_REGEX, 'name cannot contain slashes')\r\n        .matches(NO_SPACES_AROUND, 'name cannot start or end with a whitespace')\r\n        .test(\r\n          'is-folder-unique',\r\n          'A folder with this name already exists',\r\n          isNameUniqueInFolder(id)\r\n        ),\r\n      parent: yup\r\n        .strapiID()\r\n        .nullable()\r\n        .test('folder-exists', 'parent folder does not exist', folderExists)\r\n        .test(\r\n          'dont-move-inside-self',\r\n          'folder cannot be moved inside itself',\r\n          async function test(parent) {\r\n            if (isNil(parent)) return true;\r\n\r\n            const destinationFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\r\n              select: ['path'],\r\n              where: { id: parent },\r\n            });\r\n\r\n            const currentFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\r\n              select: ['path'],\r\n              where: { id },\r\n            });\r\n\r\n            if (!destinationFolder || !currentFolder) return true;\r\n\r\n            return !isFolderOrChild(destinationFolder, currentFolder);\r\n          }\r\n        ),\r\n    })\r\n    .noUnknown()\r\n    .required();\r\n\r\nexport const validateCreateFolder = validateYupSchema(validateCreateFolderSchema);\r\nexport const validateUpdateFolder = (id: number) =>\r\n  validateYupSchema(validateUpdateFolderSchema(id));\r\n","import { defaultsDeep } from 'lodash/fp';\r\n\r\nimport type { Context } from 'koa';\r\n\r\nimport { getService } from '../utils';\r\nimport { FOLDER_MODEL_UID } from '../constants';\r\nimport { validateCreateFolder, validateUpdateFolder } from './validation/admin/folder';\r\n\r\nexport default {\r\n  async findOne(ctx: Context) {\r\n    const { id } = ctx.params;\r\n\r\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: ctx.state.userAbility,\r\n      model: FOLDER_MODEL_UID,\r\n    });\r\n\r\n    await permissionsManager.validateQuery(ctx.query);\r\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\r\n\r\n    const { results } = await strapi.db.query(FOLDER_MODEL_UID).findPage(\r\n      strapi.get('query-params').transform(\r\n        FOLDER_MODEL_UID,\r\n        defaultsDeep(\r\n          {\r\n            filters: { id },\r\n            populate: {\r\n              children: {\r\n                count: true,\r\n              },\r\n              files: {\r\n                count: true,\r\n              },\r\n            },\r\n          },\r\n          query\r\n        )\r\n      )\r\n    );\r\n\r\n    if (results.length === 0) {\r\n      return ctx.notFound('folder not found');\r\n    }\r\n\r\n    ctx.body = {\r\n      data: await permissionsManager.sanitizeOutput(results[0]),\r\n    };\r\n  },\r\n\r\n  async find(ctx: Context) {\r\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: ctx.state.userAbility,\r\n      model: FOLDER_MODEL_UID,\r\n    });\r\n\r\n    await permissionsManager.validateQuery(ctx.query);\r\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\r\n\r\n    const results = await strapi.db.query(FOLDER_MODEL_UID).findMany(\r\n      strapi.get('query-params').transform(\r\n        FOLDER_MODEL_UID,\r\n        defaultsDeep(\r\n          {\r\n            populate: {\r\n              children: {\r\n                count: true,\r\n              },\r\n              files: {\r\n                count: true,\r\n              },\r\n            },\r\n          },\r\n          query\r\n        )\r\n      )\r\n    );\r\n\r\n    ctx.body = {\r\n      data: await permissionsManager.sanitizeOutput(results),\r\n    };\r\n  },\r\n  async create(ctx: Context) {\r\n    const { user } = ctx.state;\r\n    const { body } = ctx.request;\r\n\r\n    await validateCreateFolder(body);\r\n\r\n    const folderService = getService('folder');\r\n\r\n    const folder = await folderService.create(body, { user });\r\n\r\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: ctx.state.userAbility,\r\n      model: FOLDER_MODEL_UID,\r\n    });\r\n\r\n    ctx.created({\r\n      data: await permissionsManager.sanitizeOutput(folder),\r\n    });\r\n  },\r\n\r\n  async update(ctx: Context) {\r\n    const { id } = ctx.params;\r\n    const { user } = ctx.state;\r\n    const { body } = ctx.request;\r\n\r\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: ctx.state.userAbility,\r\n      model: FOLDER_MODEL_UID,\r\n    });\r\n\r\n    await validateUpdateFolder(id)(body);\r\n\r\n    const folderService = getService('folder');\r\n\r\n    const updatedFolder = await folderService.update(id, body, { user });\r\n\r\n    if (!updatedFolder) {\r\n      return ctx.notFound('folder not found');\r\n    }\r\n\r\n    ctx.body = {\r\n      data: await permissionsManager.sanitizeOutput(updatedFolder),\r\n    };\r\n  },\r\n\r\n  async getStructure(ctx: Context) {\r\n    const { getStructure } = getService('folder');\r\n\r\n    const structure = await getStructure();\r\n\r\n    ctx.body = {\r\n      data: structure,\r\n    };\r\n  },\r\n};\r\n","import { intersection, map, isEmpty } from 'lodash/fp';\r\nimport { yup, validateYupSchema } from '@strapi/utils';\r\nimport { FOLDER_MODEL_UID } from '../../../constants';\r\nimport { folderExists } from './utils';\r\nimport { isFolderOrChild } from '../../utils/folders';\r\n\r\nconst validateDeleteManyFoldersFilesSchema = yup\r\n  .object()\r\n  .shape({\r\n    fileIds: yup.array().of(yup.strapiID().required()),\r\n    folderIds: yup.array().of(yup.strapiID().required()),\r\n  })\r\n  .noUnknown()\r\n  .required();\r\n\r\nconst validateStructureMoveManyFoldersFilesSchema = yup\r\n  .object()\r\n  .shape({\r\n    destinationFolderId: yup\r\n      .strapiID()\r\n      .nullable()\r\n      .defined()\r\n      .test('folder-exists', 'destination folder does not exist', folderExists),\r\n    fileIds: yup.array().of(yup.strapiID().required()),\r\n    folderIds: yup.array().of(yup.strapiID().required()),\r\n  })\r\n  .noUnknown()\r\n  .required();\r\n\r\nconst validateDuplicatesMoveManyFoldersFilesSchema = yup\r\n  .object()\r\n  .test('are-folders-unique', 'some folders already exist', async function areFoldersUnique(value) {\r\n    const { folderIds, destinationFolderId } = value;\r\n    if (isEmpty(folderIds)) return true;\r\n\r\n    const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\r\n      select: ['name'],\r\n      where: { id: { $in: folderIds } },\r\n    });\r\n\r\n    const existingFolders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\r\n      select: ['name'],\r\n      where: { parent: { id: destinationFolderId } },\r\n    });\r\n\r\n    const duplicatedNames = intersection(map('name', folders), map('name', existingFolders));\r\n    if (duplicatedNames.length > 0) {\r\n      return this.createError({\r\n        message: `some folders already exists: ${duplicatedNames.join(', ')}`,\r\n      });\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\nconst validateMoveFoldersNotInsideThemselvesSchema = yup\r\n  .object()\r\n  .test(\r\n    'dont-move-inside-self',\r\n    'folders cannot be moved inside themselves or one of its children',\r\n    async function validateMoveFoldersNotInsideThemselves(value) {\r\n      const { folderIds, destinationFolderId } = value;\r\n      if (destinationFolderId === null || isEmpty(folderIds)) return true;\r\n\r\n      const destinationFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\r\n        select: ['path'],\r\n        where: { id: destinationFolderId },\r\n      });\r\n\r\n      const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\r\n        select: ['name', 'path'],\r\n        where: { id: { $in: folderIds } },\r\n      });\r\n\r\n      const unmovableFoldersNames = folders\r\n        .filter((folder) => isFolderOrChild(destinationFolder, folder))\r\n        .map((f) => f.name);\r\n\r\n      if (unmovableFoldersNames.length > 0) {\r\n        return this.createError({\r\n          message: `folders cannot be moved inside themselves or one of its children: ${unmovableFoldersNames.join(\r\n            ', '\r\n          )}`,\r\n        });\r\n      }\r\n\r\n      return true;\r\n    }\r\n  );\r\n\r\nexport const validateDeleteManyFoldersFiles = validateYupSchema(\r\n  validateDeleteManyFoldersFilesSchema\r\n);\r\n\r\nexport async function validateMoveManyFoldersFiles(body: unknown) {\r\n  await validateYupSchema(validateStructureMoveManyFoldersFilesSchema)(body);\r\n  await validateYupSchema(validateDuplicatesMoveManyFoldersFilesSchema)(body);\r\n  await validateYupSchema(validateMoveFoldersNotInsideThemselvesSchema)(body);\r\n}\r\n","import { strings } from '@strapi/utils';\r\n\r\nimport type { Context } from 'koa';\r\n\r\nimport { getService } from '../utils';\r\nimport { ACTIONS, FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\r\nimport {\r\n  validateDeleteManyFoldersFiles,\r\n  validateMoveManyFoldersFiles,\r\n} from './validation/admin/folder-file';\r\n\r\nimport type { File, Folder } from '../types';\r\n\r\nexport default {\r\n  async deleteMany(ctx: Context) {\r\n    const { body } = ctx.request;\r\n    const {\r\n      state: { userAbility },\r\n    } = ctx;\r\n\r\n    const pmFolder = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: ctx.state.userAbility,\r\n      model: FOLDER_MODEL_UID,\r\n    });\r\n\r\n    const pmFile = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: userAbility,\r\n      action: ACTIONS.read,\r\n      model: FILE_MODEL_UID,\r\n    });\r\n\r\n    await validateDeleteManyFoldersFiles(body);\r\n\r\n    const fileService = getService('file');\r\n    const folderService = getService('folder');\r\n\r\n    const deletedFiles = await fileService.deleteByIds(body.fileIds);\r\n    const {\r\n      folders: deletedFolders,\r\n      totalFolderNumber,\r\n      totalFileNumber,\r\n    } = await folderService.deleteByIds(body.folderIds);\r\n\r\n    if (deletedFiles.length + deletedFolders.length > 1) {\r\n      strapi.telemetry.send('didBulkDeleteMediaLibraryElements', {\r\n        eventProperties: {\r\n          rootFolderNumber: deletedFolders.length,\r\n          rootAssetNumber: deletedFiles.length,\r\n          totalFolderNumber,\r\n          totalAssetNumber: totalFileNumber + deletedFiles.length,\r\n        },\r\n      });\r\n    }\r\n\r\n    ctx.body = {\r\n      data: {\r\n        files: await pmFile.sanitizeOutput(deletedFiles),\r\n        folders: await pmFolder.sanitizeOutput(deletedFolders),\r\n      },\r\n    };\r\n  },\r\n  async moveMany(ctx: Context) {\r\n    const { body } = ctx.request;\r\n    const {\r\n      state: { userAbility },\r\n    } = ctx;\r\n\r\n    const pmFolder = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: ctx.state.userAbility,\r\n      model: FOLDER_MODEL_UID,\r\n    });\r\n\r\n    const pmFile = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: userAbility,\r\n      action: ACTIONS.read,\r\n      model: FILE_MODEL_UID,\r\n    });\r\n\r\n    await validateMoveManyFoldersFiles(body);\r\n    const { folderIds = [], fileIds = [], destinationFolderId } = body;\r\n\r\n    let totalFolderNumber = 0;\r\n    let totalFileNumber = 0;\r\n\r\n    const trx = await strapi.db.transaction();\r\n    try {\r\n      // fetch folders\r\n      const existingFolders = await strapi.db\r\n        .queryBuilder(FOLDER_MODEL_UID)\r\n        .select(['id', 'pathId', 'path'])\r\n        .where({ id: { $in: folderIds } })\r\n        .transacting(trx.get())\r\n        .forUpdate()\r\n        .execute<Folder[]>();\r\n\r\n      // fetch files\r\n      const existingFiles = await strapi.db\r\n        .queryBuilder(FILE_MODEL_UID)\r\n        .select(['id'])\r\n        .where({ id: { $in: fileIds } })\r\n        .transacting(trx.get())\r\n        .forUpdate()\r\n        .execute<File[]>();\r\n\r\n      // fetch destinationFolder path\r\n      let destinationFolderPath = '/';\r\n      if (destinationFolderId !== null) {\r\n        const destinationFolder = await strapi.db\r\n          .queryBuilder(FOLDER_MODEL_UID)\r\n          .select('path')\r\n          .where({ id: destinationFolderId })\r\n          .transacting(trx.get())\r\n          .first()\r\n          .execute<Folder>();\r\n        destinationFolderPath = destinationFolder.path;\r\n      }\r\n\r\n      const fileTable = strapi.getModel(FILE_MODEL_UID).collectionName;\r\n      const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\r\n      const folderPathColName =\r\n        // @ts-expect-error - no dynamic typings for the models\r\n        strapi.db.metadata.get(FILE_MODEL_UID).attributes.folderPath.columnName;\r\n      // @ts-expect-error - no dynamic typings for the models\r\n      const pathColName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\r\n\r\n      if (existingFolders.length > 0) {\r\n        // update folders' parent relation\r\n        // @ts-expect-error - no dynamic typings for the models\r\n        const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\r\n        await strapi.db\r\n          .queryBuilder(joinTable.name)\r\n          .transacting(trx.get())\r\n          .delete()\r\n          .where({ [joinTable.joinColumn.name]: { $in: folderIds } })\r\n          .execute();\r\n\r\n        if (destinationFolderId !== null) {\r\n          await strapi.db\r\n            .queryBuilder(joinTable.name)\r\n            .transacting(trx.get())\r\n            .insert(\r\n              existingFolders.map((folder) => ({\r\n                [joinTable.inverseJoinColumn.name]: destinationFolderId,\r\n                [joinTable.joinColumn.name]: folder.id,\r\n              }))\r\n            )\r\n            .execute();\r\n        }\r\n\r\n        for (const existingFolder of existingFolders) {\r\n          let replaceQuery;\r\n          switch (strapi.db.dialect.client) {\r\n            case 'sqlite':\r\n              replaceQuery = '? || SUBSTRING(??, ?)';\r\n              break;\r\n            case 'postgres':\r\n              replaceQuery = 'CONCAT(?::TEXT, SUBSTRING(??, ?::INTEGER))';\r\n              break;\r\n            default:\r\n              replaceQuery = 'CONCAT(?, SUBSTRING(??, ?))';\r\n          }\r\n\r\n          // update path for folders themselves & folders below\r\n          totalFolderNumber = await strapi.db\r\n            .getConnection(folderTable)\r\n            .transacting(trx.get())\r\n            .where(pathColName, existingFolder.path)\r\n            .orWhere(pathColName, 'like', `${existingFolder.path}/%`)\r\n            .update(\r\n              pathColName,\r\n              strapi.db.connection.raw(replaceQuery, [\r\n                strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\r\n                pathColName,\r\n                existingFolder.path.length + 1,\r\n              ])\r\n            );\r\n\r\n          // update path of files below\r\n          totalFileNumber = await strapi.db\r\n            .getConnection(fileTable)\r\n            .transacting(trx.get())\r\n            .where(folderPathColName, existingFolder.path)\r\n            .orWhere(folderPathColName, 'like', `${existingFolder.path}/%`)\r\n            .update(\r\n              folderPathColName,\r\n              strapi.db.connection.raw(replaceQuery, [\r\n                strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\r\n                folderPathColName,\r\n                existingFolder.path.length + 1,\r\n              ])\r\n            );\r\n        }\r\n      }\r\n\r\n      if (existingFiles.length > 0) {\r\n        // update files' folder relation (delete + insert; upsert not possible)\r\n        // @ts-expect-error - no dynamic typings for the models\r\n        const fileJoinTable = strapi.db.metadata.get(FILE_MODEL_UID).attributes.folder.joinTable;\r\n        await strapi.db\r\n          .queryBuilder(fileJoinTable.name)\r\n          .transacting(trx.get())\r\n          .delete()\r\n          .where({ [fileJoinTable.joinColumn.name]: { $in: fileIds } })\r\n          .execute();\r\n\r\n        if (destinationFolderId !== null) {\r\n          await strapi.db\r\n            .queryBuilder(fileJoinTable.name)\r\n            .transacting(trx.get())\r\n            .insert(\r\n              existingFiles.map((file) => ({\r\n                [fileJoinTable.inverseJoinColumn.name]: destinationFolderId,\r\n                [fileJoinTable.joinColumn.name]: file.id,\r\n              }))\r\n            )\r\n            .execute();\r\n        }\r\n\r\n        // update files main fields (path + updatedBy)\r\n        await strapi.db\r\n          .getConnection(fileTable)\r\n          .transacting(trx.get())\r\n          .whereIn('id', fileIds)\r\n          .update(folderPathColName, destinationFolderPath);\r\n      }\r\n\r\n      await trx.commit();\r\n    } catch (e) {\r\n      await trx.rollback();\r\n      throw e;\r\n    }\r\n\r\n    const updatedFolders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\r\n      where: { id: { $in: folderIds } },\r\n    });\r\n\r\n    const updatedFiles = await strapi.db.query(FILE_MODEL_UID).findMany({\r\n      where: { id: { $in: fileIds } },\r\n    });\r\n\r\n    strapi.telemetry.send('didBulkMoveMediaLibraryElements', {\r\n      eventProperties: {\r\n        rootFolderNumber: updatedFolders.length,\r\n        rootAssetNumber: updatedFiles.length,\r\n        totalFolderNumber,\r\n        totalAssetNumber: totalFileNumber + updatedFiles.length,\r\n      },\r\n    });\r\n\r\n    ctx.body = {\r\n      data: {\r\n        files: await pmFile.sanitizeOutput(updatedFiles),\r\n        folders: await pmFolder.sanitizeOutput(updatedFolders),\r\n      },\r\n    };\r\n  },\r\n};\r\n","import { yup, validateYupSchema } from '@strapi/utils';\r\n\r\nconst settingsSchema = yup.object({\r\n  sizeOptimization: yup.boolean().required(),\r\n  responsiveDimensions: yup.boolean().required(),\r\n  autoOrientation: yup.boolean(),\r\n});\r\n\r\nexport default validateYupSchema(settingsSchema);\r\n\r\nexport type Settings = yup.InferType<typeof settingsSchema>;\r\n","import type { Context } from 'koa';\r\n\r\nimport { getService } from '../utils';\r\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\r\nimport validateSettings from './validation/admin/settings';\r\n\r\nexport default {\r\n  async updateSettings(ctx: Context) {\r\n    const {\r\n      request: { body },\r\n      state: { userAbility },\r\n    } = ctx;\r\n\r\n    if (userAbility.cannot(ACTIONS.readSettings, FILE_MODEL_UID)) {\r\n      return ctx.forbidden();\r\n    }\r\n\r\n    const data = await validateSettings(body);\r\n\r\n    await getService('upload').setSettings(data);\r\n\r\n    ctx.body = { data };\r\n  },\r\n\r\n  async getSettings(ctx: Context) {\r\n    const {\r\n      state: { userAbility },\r\n    } = ctx;\r\n\r\n    if (userAbility.cannot(ACTIONS.readSettings, FILE_MODEL_UID)) {\r\n      return ctx.forbidden();\r\n    }\r\n\r\n    const data = await getService('upload').getSettings();\r\n\r\n    ctx.body = { data };\r\n  },\r\n};\r\n","import { yup, validateYupSchema } from '@strapi/utils';\r\nimport { isNil } from 'lodash/fp';\r\nimport { getService } from '../../../utils';\r\n\r\nconst fileInfoSchema = yup.object({\r\n  name: yup.string().nullable(),\r\n  alternativeText: yup.string().nullable(),\r\n  caption: yup.string().nullable(),\r\n  folder: yup\r\n    .strapiID()\r\n    .nullable()\r\n    .test('folder-exists', 'the folder does not exist', async (folderId) => {\r\n      if (isNil(folderId)) {\r\n        return true;\r\n      }\r\n\r\n      const exists = await getService('folder').exists({ id: folderId });\r\n\r\n      return exists;\r\n    }),\r\n});\r\n\r\nconst uploadSchema = yup.object({\r\n  fileInfo: fileInfoSchema,\r\n});\r\n\r\nconst multiUploadSchema = yup.object({\r\n  fileInfo: yup.array().of(fileInfoSchema),\r\n});\r\n\r\nconst validateUploadBody = (data = {}, isMulti = false) => {\r\n  const schema = isMulti ? multiUploadSchema : uploadSchema;\r\n\r\n  return validateYupSchema(schema, { strict: false })(data);\r\n};\r\n\r\nexport { validateUploadBody };\r\n\r\nexport type UploadBody =\r\n  | yup.InferType<typeof uploadSchema>\r\n  | yup.InferType<typeof multiUploadSchema>;\r\n","import _ from 'lodash';\r\nimport { errors, async } from '@strapi/utils';\r\n\r\nimport type { Context } from 'koa';\r\n\r\nimport { getService } from '../utils';\r\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\r\nimport { validateUploadBody } from './validation/admin/upload';\r\nimport { findEntityAndCheckPermissions } from './utils/find-entity-and-check-permissions';\r\nimport { FileInfo } from '../types';\r\n\r\nexport default {\r\n  async updateFileInfo(ctx: Context) {\r\n    const {\r\n      state: { userAbility, user },\r\n      query: { id },\r\n      request: { body },\r\n    } = ctx;\r\n\r\n    if (typeof id !== 'string') {\r\n      throw new errors.ValidationError('File id is required');\r\n    }\r\n\r\n    const uploadService = getService('upload');\r\n    const { pm } = await findEntityAndCheckPermissions(\r\n      userAbility,\r\n      ACTIONS.update,\r\n      FILE_MODEL_UID,\r\n      id\r\n    );\r\n\r\n    const data = await validateUploadBody(body);\r\n\r\n    const file = await uploadService.updateFileInfo(id, data.fileInfo as any, { user });\r\n\r\n    ctx.body = await pm.sanitizeOutput(file, { action: ACTIONS.read });\r\n  },\r\n\r\n  async replaceFile(ctx: Context) {\r\n    const {\r\n      state: { userAbility, user },\r\n      query: { id },\r\n      request: { body, files: { files } = {} },\r\n    } = ctx;\r\n\r\n    if (typeof id !== 'string') {\r\n      throw new errors.ValidationError('File id is required');\r\n    }\r\n\r\n    const uploadService = getService('upload');\r\n    const { pm } = await findEntityAndCheckPermissions(\r\n      userAbility,\r\n      ACTIONS.update,\r\n      FILE_MODEL_UID,\r\n      id\r\n    );\r\n\r\n    if (Array.isArray(files)) {\r\n      throw new errors.ApplicationError('Cannot replace a file with multiple ones');\r\n    }\r\n\r\n    const data = (await validateUploadBody(body)) as { fileInfo: FileInfo };\r\n    const replacedFile = await uploadService.replace(id, { data, file: files }, { user });\r\n\r\n    // Sign file urls for private providers\r\n    const signedFile = await getService('file').signFileUrls(replacedFile);\r\n\r\n    ctx.body = await pm.sanitizeOutput(signedFile, { action: ACTIONS.read });\r\n  },\r\n\r\n  async uploadFiles(ctx: Context) {\r\n    const {\r\n      state: { userAbility, user },\r\n      request: { body, files: { files } = {} },\r\n    } = ctx;\r\n\r\n    const uploadService = getService('upload');\r\n    const pm = strapi.service('admin::permission').createPermissionsManager({\r\n      ability: userAbility,\r\n      action: ACTIONS.create,\r\n      model: FILE_MODEL_UID,\r\n    });\r\n\r\n    if (!pm.isAllowed) {\r\n      return ctx.forbidden();\r\n    }\r\n\r\n    const data = await validateUploadBody(body);\r\n    const uploadedFiles = await uploadService.upload({ data, files }, { user });\r\n\r\n    // Sign file urls for private providers\r\n    const signedFiles = await async.map(uploadedFiles, getService('file').signFileUrls);\r\n\r\n    ctx.body = await pm.sanitizeOutput(signedFiles, { action: ACTIONS.read });\r\n    ctx.status = 201;\r\n  },\r\n\r\n  // TODO: split into multiple endpoints\r\n  async upload(ctx: Context) {\r\n    const {\r\n      query: { id },\r\n      request: { files: { files } = {} },\r\n    } = ctx;\r\n\r\n    if (_.isEmpty(files) || (!Array.isArray(files) && files.size === 0)) {\r\n      if (id) {\r\n        return this.updateFileInfo(ctx);\r\n      }\r\n\r\n      throw new errors.ApplicationError('Files are empty');\r\n    }\r\n\r\n    await (id ? this.replaceFile : this.uploadFiles)(ctx);\r\n  },\r\n};\r\n","import { yup, validateYupSchema } from '@strapi/utils';\r\n\r\nconst fileInfoSchema = yup\r\n  .object({\r\n    name: yup.string().nullable(),\r\n    alternativeText: yup.string().nullable(),\r\n    caption: yup.string().nullable(),\r\n  })\r\n  .noUnknown();\r\n\r\nconst uploadSchema = yup.object({\r\n  fileInfo: fileInfoSchema,\r\n});\r\n\r\nconst multiUploadSchema = yup.object({\r\n  fileInfo: yup.array().of(fileInfoSchema),\r\n});\r\n\r\nconst validateUploadBody = (data = {}, isMulti = false) => {\r\n  const schema = isMulti ? multiUploadSchema : uploadSchema;\r\n\r\n  return validateYupSchema(schema, { strict: false })(data);\r\n};\r\n\r\nexport { validateUploadBody };\r\n\r\nexport type UploadBody =\r\n  | yup.InferType<typeof uploadSchema>\r\n  | yup.InferType<typeof multiUploadSchema>;\r\n","import _ from 'lodash';\r\nimport utils from '@strapi/utils';\r\n\r\nimport type { Context } from 'koa';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport { getService } from '../utils';\r\nimport { FILE_MODEL_UID } from '../constants';\r\nimport { validateUploadBody } from './validation/content-api/upload';\r\nimport { FileInfo } from '../types';\r\n\r\nconst { ValidationError } = utils.errors;\r\n\r\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const sanitizeOutput = async (data: unknown | unknown[], ctx: Context) => {\r\n    const schema = strapi.getModel(FILE_MODEL_UID);\r\n    const { auth } = ctx.state;\r\n\r\n    return strapi.contentAPI.sanitize.output(data, schema, { auth });\r\n  };\r\n\r\n  const validateQuery = async (data: Record<string, unknown>, ctx: Context) => {\r\n    const schema = strapi.getModel(FILE_MODEL_UID);\r\n    const { auth } = ctx.state;\r\n\r\n    return strapi.contentAPI.validate.query(data, schema, { auth });\r\n  };\r\n\r\n  const sanitizeQuery = async (data: Record<string, unknown>, ctx: Context) => {\r\n    const schema = strapi.getModel(FILE_MODEL_UID);\r\n    const { auth } = ctx.state;\r\n\r\n    return strapi.contentAPI.sanitize.query(data, schema, { auth });\r\n  };\r\n\r\n  return {\r\n    async find(ctx: Context) {\r\n      await validateQuery(ctx.query, ctx);\r\n      const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);\r\n\r\n      const files = await getService('upload').findMany(sanitizedQuery);\r\n\r\n      ctx.body = await sanitizeOutput(files, ctx);\r\n    },\r\n\r\n    async findOne(ctx: Context) {\r\n      const {\r\n        params: { id },\r\n      } = ctx;\r\n\r\n      await validateQuery(ctx.query, ctx);\r\n      const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);\r\n\r\n      const file = await getService('upload').findOne(id, sanitizedQuery.populate!);\r\n\r\n      if (!file) {\r\n        return ctx.notFound('file.notFound');\r\n      }\r\n\r\n      ctx.body = await sanitizeOutput(file, ctx);\r\n    },\r\n\r\n    async destroy(ctx: Context) {\r\n      const {\r\n        params: { id },\r\n      } = ctx;\r\n\r\n      const file = await getService('upload').findOne(id);\r\n\r\n      if (!file) {\r\n        return ctx.notFound('file.notFound');\r\n      }\r\n\r\n      await getService('upload').remove(file);\r\n\r\n      ctx.body = await sanitizeOutput(file, ctx);\r\n    },\r\n\r\n    async updateFileInfo(ctx: Context) {\r\n      const {\r\n        query: { id },\r\n        request: { body },\r\n      } = ctx;\r\n      const data = await validateUploadBody(body);\r\n\r\n      if (!id || (typeof id !== 'string' && typeof id !== 'number')) {\r\n        throw new ValidationError('File id is required and must be a single value');\r\n      }\r\n\r\n      const result = await getService('upload').updateFileInfo(id, data.fileInfo as any);\r\n\r\n      ctx.body = await sanitizeOutput(result, ctx);\r\n    },\r\n\r\n    async replaceFile(ctx: Context) {\r\n      const {\r\n        query: { id },\r\n        request: { body, files: { files } = {} },\r\n      } = ctx;\r\n\r\n      // cannot replace with more than one file\r\n      if (Array.isArray(files)) {\r\n        throw new ValidationError('Cannot replace a file with multiple ones');\r\n      }\r\n\r\n      if (!id || (typeof id !== 'string' && typeof id !== 'number')) {\r\n        throw new ValidationError('File id is required and must be a single value');\r\n      }\r\n\r\n      const data = (await validateUploadBody(body)) as { fileInfo: FileInfo };\r\n\r\n      const replacedFiles = await getService('upload').replace(id, { data, file: files });\r\n\r\n      ctx.body = await sanitizeOutput(replacedFiles, ctx);\r\n    },\r\n\r\n    async uploadFiles(ctx: Context) {\r\n      const {\r\n        request: { body, files: { files } = {} },\r\n      } = ctx;\r\n\r\n      const data: any = await validateUploadBody(body, Array.isArray(files));\r\n\r\n      const apiUploadFolderService = getService('api-upload-folder');\r\n\r\n      const apiUploadFolder = await apiUploadFolderService.getAPIUploadFolder();\r\n\r\n      if (Array.isArray(files)) {\r\n        data.fileInfo = data.fileInfo || [];\r\n        data.fileInfo = files.map((_f, i) => ({ ...data.fileInfo[i], folder: apiUploadFolder.id }));\r\n      } else {\r\n        data.fileInfo = { ...data.fileInfo, folder: apiUploadFolder.id };\r\n      }\r\n\r\n      const uploadedFiles = await getService('upload').upload({\r\n        data,\r\n        files,\r\n      });\r\n\r\n      ctx.body = await sanitizeOutput(uploadedFiles as any, ctx);\r\n      ctx.status = 201;\r\n    },\r\n\r\n    // TODO: split into multiple endpoints\r\n    async upload(ctx: Context) {\r\n      const {\r\n        query: { id },\r\n        request: { files: { files } = {} },\r\n      } = ctx;\r\n\r\n      if (_.isEmpty(files) || (!Array.isArray(files) && files.size === 0)) {\r\n        if (id) {\r\n          return this.updateFileInfo(ctx);\r\n        }\r\n\r\n        throw new ValidationError('Files are empty');\r\n      }\r\n\r\n      await (id ? this.replaceFile : this.uploadFiles)(ctx);\r\n    },\r\n  };\r\n};\r\n","import { yup, validateYupSchema } from '@strapi/utils';\r\nimport { ALLOWED_SORT_STRINGS } from '../../../constants';\r\n\r\nconst configSchema = yup.object({\r\n  pageSize: yup.number().required(),\r\n  sort: yup.mixed().oneOf(ALLOWED_SORT_STRINGS),\r\n});\r\n\r\nexport const validateViewConfiguration = validateYupSchema(configSchema);\r\n\r\nexport type ViewConfiguration = yup.InferType<typeof configSchema>;\r\n","import type { Context } from 'koa';\r\n\r\nimport { getService } from '../utils';\r\nimport { ACTIONS } from '../constants';\r\nimport { validateViewConfiguration } from './validation/admin/configureView';\r\n\r\nexport default {\r\n  async updateViewConfiguration(ctx: Context) {\r\n    const {\r\n      request: { body },\r\n      state: { userAbility },\r\n    } = ctx;\r\n\r\n    if (userAbility.cannot(ACTIONS.configureView)) {\r\n      return ctx.forbidden();\r\n    }\r\n\r\n    const data = await validateViewConfiguration(body);\r\n\r\n    await getService('upload').setConfiguration(data);\r\n\r\n    ctx.body = { data };\r\n  },\r\n\r\n  async findViewConfiguration(ctx: Context) {\r\n    const data = await getService('upload').getConfiguration();\r\n\r\n    ctx.body = { data };\r\n  },\r\n};\r\n","import adminFile from './admin-file';\r\nimport adminFolder from './admin-folder';\r\nimport adminFolderFile from './admin-folder-file';\r\nimport adminSettings from './admin-settings';\r\nimport adminUpload from './admin-upload';\r\nimport contentApi from './content-api';\r\nimport viewConfiguration from './view-configuration';\r\n\r\nexport const controllers = {\r\n  'admin-file': adminFile,\r\n  'admin-folder': adminFolder,\r\n  'admin-folder-file': adminFolderFile,\r\n  'admin-settings': adminSettings,\r\n  'admin-upload': adminUpload,\r\n  'content-api': contentApi,\r\n  'view-configuration': viewConfiguration,\r\n};\r\n","import type {} from 'koa-body';\r\nimport type {} from '@strapi/types';\r\n\r\nimport { register } from './register';\r\nimport { bootstrap } from './bootstrap';\r\nimport { contentTypes } from './content-types';\r\nimport { services } from './services';\r\nimport { routes } from './routes';\r\nimport { config } from './config';\r\nimport { controllers } from './controllers';\r\n\r\nexport default () => ({\r\n  register,\r\n  bootstrap,\r\n  config,\r\n  routes,\r\n  controllers,\r\n  contentTypes,\r\n  services,\r\n});\r\n"],"names":["strapi","range","koaStatic","errors","file","config","_","provider","key","folder","isFunction","fileUtils","contentTypesUtils","bytesToKbytes","crypto","strings","fse","path","os","sanitize","extension","fs","optimize","isImage","isFaultyImage","isOptimizableImage","upload","fileInfo","getDimensions","generateThumbnail","generateResponsiveFormats","isResizableImage","update","sharp","join","setCreatorFields","deleteByIds","map","isUndefined","sortBy","cloneDeep","async","defaultTo","metrics","add","exists","index","get","isNil","signFileUrls","traverseEntity","routes","admin","contentApi","viewConfiguration","merge","yup","validateYupSchema","defaultsDeep","getStructure","isEmpty","intersection","fileInfoSchema","uploadSchema","multiUploadSchema","validateUploadBody","utils","apiUploadFolder"],"mappings":"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"}