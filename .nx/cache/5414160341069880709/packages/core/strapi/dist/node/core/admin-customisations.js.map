{"version":3,"file":"admin-customisations.js","sources":["../../../src/node/core/admin-customisations.ts"],"sourcesContent":["import path from 'node:path';\r\nimport { convertSystemPathToModulePath, pathExists } from './files';\r\nimport type { BaseContext } from '../types';\r\n\r\nconst ADMIN_APP_FILES = ['app.js', 'app.mjs', 'app.ts', 'app.jsx', 'app.tsx'];\r\n\r\ninterface AdminCustomisations {\r\n  config?: {\r\n    locales?: string[];\r\n  };\r\n  bootstrap?: (...args: any[]) => any;\r\n}\r\n\r\ninterface AppFile {\r\n  /**\r\n   * The system path to the file\r\n   */\r\n  path: string;\r\n  /**\r\n   * The module path to the file i.e. how you would import it\r\n   */\r\n  modulePath: string;\r\n}\r\n\r\nconst loadUserAppFile = async ({\r\n  runtimeDir,\r\n  appDir,\r\n}: Pick<BaseContext, 'appDir' | 'runtimeDir'>): Promise<AppFile | undefined> => {\r\n  for (const file of ADMIN_APP_FILES) {\r\n    const filePath = path.join(appDir, 'src', 'admin', file);\r\n\r\n    if (await pathExists(filePath)) {\r\n      return {\r\n        path: filePath,\r\n        modulePath: convertSystemPathToModulePath(path.relative(runtimeDir, filePath)),\r\n      };\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport { loadUserAppFile };\r\nexport type { AdminCustomisations, AppFile };\r\n"],"names":["path","pathExists","convertSystemPathToModulePath"],"mappings":";;;;;;AAIA,MAAM,kBAAkB,CAAC,UAAU,WAAW,UAAU,WAAW,SAAS;AAoB5E,MAAM,kBAAkB,OAAO;AAAA,EAC7B;AAAA,EACA;AACF,MAAgF;AAC9E,aAAW,QAAQ,iBAAiB;AAClC,UAAM,WAAWA,cAAAA,QAAK,KAAK,QAAQ,OAAO,SAAS,IAAI;AAEnD,QAAA,MAAMC,MAAAA,WAAW,QAAQ,GAAG;AACvB,aAAA;AAAA,QACL,MAAM;AAAA,QACN,YAAYC,MAAAA,8BAA8BF,cAAAA,QAAK,SAAS,YAAY,QAAQ,CAAC;AAAA,MAC/E;AAAA,IAAA;AAAA,EACF;AAGK,SAAA;AACT;;"}