{"version":3,"file":"errors.mjs","sources":["../../../src/node/core/errors.ts"],"sourcesContent":["import boxen from 'boxen';\r\nimport chalk from 'chalk';\r\nimport os from 'node:os';\r\n\r\nconst isError = (err: unknown): err is Error => err instanceof Error;\r\n\r\n/**\r\n * @description Handle unexpected errors. No, but really, your CLI should anticipate error cases.\r\n * If a user hits an error we don't expect, then we need to flag to them that this is not normal\r\n * and they should use the `--debug` flag to get more information (assuming you've implemented this\r\n * in your action).\r\n */\r\nconst handleUnexpectedError = (err: unknown) => {\r\n  console.error(\r\n    chalk.red(\r\n      `[ERROR] `,\r\n      'There seems to be an unexpected error, try again with --debug for more information',\r\n      os.EOL\r\n    )\r\n  );\r\n\r\n  if (isError(err) && err.stack) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(\r\n      chalk.red(\r\n        boxen(err.stack, {\r\n          padding: 1,\r\n          align: 'left',\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  process.exit(1);\r\n};\r\n\r\nexport { handleUnexpectedError, isError };\r\n"],"names":[],"mappings":";;;AAIM,MAAA,UAAU,CAAC,QAA+B,eAAe;AAQzD,MAAA,wBAAwB,CAAC,QAAiB;AACtC,UAAA;AAAA,IACN,MAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IAAA;AAAA,EAEP;AAEA,MAAI,QAAQ,GAAG,KAAK,IAAI,OAAO;AAErB,YAAA;AAAA,MACN,MAAM;AAAA,QACJ,MAAM,IAAI,OAAO;AAAA,UACf,SAAS;AAAA,UACT,OAAO;AAAA,QACR,CAAA;AAAA,MAAA;AAAA,IAEL;AAAA,EAAA;AAGF,UAAQ,KAAK,CAAC;AAChB;"}