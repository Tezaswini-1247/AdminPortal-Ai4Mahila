{"version":3,"file":"create-build-context.mjs","sources":["../../src/node/create-build-context.ts"],"sourcesContent":["import os from 'node:os';\r\nimport path from 'node:path';\r\nimport fs from 'node:fs/promises';\r\nimport browserslist from 'browserslist';\r\nimport { createStrapi } from '@strapi/core';\r\nimport { Core, Modules } from '@strapi/types';\r\nimport type { Server } from 'node:http';\r\n\r\nimport type { CLIContext } from '../cli/types';\r\nimport { getStrapiAdminEnvVars, loadEnv } from './core/env';\r\n\r\nimport { PluginMeta, getEnabledPlugins, getMapOfPluginsWithAdmin } from './core/plugins';\r\nimport { AppFile, loadUserAppFile } from './core/admin-customisations';\r\nimport type { BaseContext } from './types';\r\n\r\ninterface BaseOptions {\r\n  stats?: boolean;\r\n  minify?: boolean;\r\n  sourcemaps?: boolean;\r\n  bundler?: 'webpack' | 'vite';\r\n  open?: boolean;\r\n  hmrServer?: Server;\r\n  hmrClientPort?: number;\r\n}\r\n\r\ninterface BuildContext<TOptions = unknown> extends BaseContext {\r\n  /**\r\n   * The customisations defined by the user in their app.js file\r\n   */\r\n  customisations?: AppFile;\r\n  /**\r\n   * Features object with future flags\r\n   */\r\n  features?: Modules.Features.FeaturesService['config'];\r\n  /**\r\n   * The build options\r\n   */\r\n  options: BaseOptions & TOptions;\r\n  /**\r\n   * The plugins to be included in the JS bundle\r\n   * incl. internal plugins, third party plugins & local plugins\r\n   */\r\n  plugins: PluginMeta[];\r\n}\r\n\r\ninterface CreateBuildContextArgs<TOptions = unknown> extends CLIContext {\r\n  strapi?: Core.Strapi;\r\n  options?: TOptions;\r\n}\r\n\r\nconst DEFAULT_BROWSERSLIST = [\r\n  'last 3 major versions',\r\n  'Firefox ESR',\r\n  'last 2 Opera versions',\r\n  'not dead',\r\n];\r\n\r\nconst createBuildContext = async <TOptions extends BaseOptions>({\r\n  cwd,\r\n  logger,\r\n  tsconfig,\r\n  strapi,\r\n  options = {} as TOptions,\r\n}: CreateBuildContextArgs<TOptions>): Promise<BuildContext<TOptions>> => {\r\n  /**\r\n   * If you make a new strapi instance when one already exists,\r\n   * you will overwrite the global and the app will _most likely_\r\n   * crash and die.\r\n   */\r\n  const strapiInstance =\r\n    strapi ??\r\n    createStrapi({\r\n      // Directories\r\n      appDir: cwd,\r\n      distDir: tsconfig?.config.options.outDir ?? '',\r\n      // Options\r\n      autoReload: true,\r\n      serveAdminPanel: false,\r\n    });\r\n\r\n  const serverUrl = strapiInstance.config.get<string>('server.url');\r\n  const adminPath = strapiInstance.config.get<string>('admin.path');\r\n\r\n  const appDir = strapiInstance.dirs.app.root;\r\n\r\n  await loadEnv(cwd);\r\n\r\n  const env = getStrapiAdminEnvVars({\r\n    ADMIN_PATH: adminPath,\r\n    STRAPI_ADMIN_BACKEND_URL: serverUrl,\r\n    STRAPI_TELEMETRY_DISABLED: String(strapiInstance.telemetry.isDisabled),\r\n  });\r\n\r\n  const envKeys = Object.keys(env);\r\n\r\n  if (envKeys.length > 0) {\r\n    logger.info(\r\n      [\r\n        'Including the following ENV variables as part of the JS bundle:',\r\n        ...envKeys.map((key) => `    - ${key}`),\r\n      ].join(os.EOL)\r\n    );\r\n  }\r\n\r\n  const distPath = path.join(strapiInstance.dirs.dist.root, 'build');\r\n  const distDir = path.relative(cwd, distPath);\r\n\r\n  /**\r\n   * If the distPath already exists, clean it\r\n   */\r\n  try {\r\n    logger.debug(`Cleaning dist folder: ${distPath}`);\r\n    await fs.rm(distPath, { recursive: true, force: true });\r\n    logger.debug('Cleaned dist folder');\r\n  } catch {\r\n    // do nothing, it will fail if the folder does not exist\r\n    logger.debug('There was no dist folder to clean');\r\n  }\r\n\r\n  const runtimeDir = path.join(cwd, '.strapi', 'client');\r\n  const entry = path.relative(cwd, path.join(runtimeDir, 'app.js'));\r\n\r\n  const plugins = await getEnabledPlugins({ cwd, logger, runtimeDir, strapi: strapiInstance });\r\n\r\n  logger.debug('Enabled plugins', os.EOL, plugins);\r\n\r\n  const pluginsWithFront = getMapOfPluginsWithAdmin(plugins);\r\n\r\n  logger.debug('Enabled plugins with FE', os.EOL, pluginsWithFront);\r\n\r\n  const target = browserslist.loadConfig({ path: cwd }) ?? DEFAULT_BROWSERSLIST;\r\n\r\n  const customisations = await loadUserAppFile({ appDir, runtimeDir });\r\n\r\n  const features = strapiInstance.config.get('features', undefined);\r\n\r\n  const { bundler = 'vite', ...restOptions } = options;\r\n\r\n  const buildContext = {\r\n    appDir,\r\n    basePath: `${adminPath}/`,\r\n    bundler,\r\n    customisations,\r\n    cwd,\r\n    distDir,\r\n    distPath,\r\n    entry,\r\n    env,\r\n    features,\r\n    logger,\r\n    options: restOptions as BaseOptions & TOptions,\r\n    plugins: pluginsWithFront,\r\n    runtimeDir,\r\n    strapi: strapiInstance,\r\n    target,\r\n    tsconfig,\r\n  } satisfies BuildContext<TOptions>;\r\n\r\n  return buildContext;\r\n};\r\n\r\nexport { createBuildContext };\r\nexport type { BuildContext, CreateBuildContextArgs };\r\n"],"names":[],"mappings":";;;;;;;;AAkDA,MAAM,uBAAuB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,qBAAqB,OAAqC;AAAA,EAC9D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU,CAAA;AACZ,MAAyE;AAMjE,QAAA,iBACJ,UACA,aAAa;AAAA;AAAA,IAEX,QAAQ;AAAA,IACR,SAAS,UAAU,OAAO,QAAQ,UAAU;AAAA;AAAA,IAE5C,YAAY;AAAA,IACZ,iBAAiB;AAAA,EAAA,CAClB;AAEH,QAAM,YAAY,eAAe,OAAO,IAAY,YAAY;AAChE,QAAM,YAAY,eAAe,OAAO,IAAY,YAAY;AAE1D,QAAA,SAAS,eAAe,KAAK,IAAI;AAEvC,QAAM,QAAQ,GAAG;AAEjB,QAAM,MAAM,sBAAsB;AAAA,IAChC,YAAY;AAAA,IACZ,0BAA0B;AAAA,IAC1B,2BAA2B,OAAO,eAAe,UAAU,UAAU;AAAA,EAAA,CACtE;AAEK,QAAA,UAAU,OAAO,KAAK,GAAG;AAE3B,MAAA,QAAQ,SAAS,GAAG;AACf,WAAA;AAAA,MACL;AAAA,QACE;AAAA,QACA,GAAG,QAAQ,IAAI,CAAC,QAAQ,SAAS,GAAG,EAAE;AAAA,MAAA,EACtC,KAAK,GAAG,GAAG;AAAA,IACf;AAAA,EAAA;AAGF,QAAM,WAAW,KAAK,KAAK,eAAe,KAAK,KAAK,MAAM,OAAO;AACjE,QAAM,UAAU,KAAK,SAAS,KAAK,QAAQ;AAKvC,MAAA;AACK,WAAA,MAAM,yBAAyB,QAAQ,EAAE;AAC1C,UAAA,GAAG,GAAG,UAAU,EAAE,WAAW,MAAM,OAAO,MAAM;AACtD,WAAO,MAAM,qBAAqB;AAAA,EAAA,QAC5B;AAEN,WAAO,MAAM,mCAAmC;AAAA,EAAA;AAGlD,QAAM,aAAa,KAAK,KAAK,KAAK,WAAW,QAAQ;AAC/C,QAAA,QAAQ,KAAK,SAAS,KAAK,KAAK,KAAK,YAAY,QAAQ,CAAC;AAE1D,QAAA,UAAU,MAAM,kBAAkB,EAAE,KAAK,QAAQ,YAAY,QAAQ,gBAAgB;AAE3F,SAAO,MAAM,mBAAmB,GAAG,KAAK,OAAO;AAEzC,QAAA,mBAAmB,yBAAyB,OAAO;AAEzD,SAAO,MAAM,2BAA2B,GAAG,KAAK,gBAAgB;AAEhE,QAAM,SAAS,aAAa,WAAW,EAAE,MAAM,IAAK,CAAA,KAAK;AAEzD,QAAM,iBAAiB,MAAM,gBAAgB,EAAE,QAAQ,YAAY;AAEnE,QAAM,WAAW,eAAe,OAAO,IAAI,YAAY,MAAS;AAEhE,QAAM,EAAE,UAAU,QAAQ,GAAG,YAAgB,IAAA;AAE7C,QAAM,eAAe;AAAA,IACnB;AAAA,IACA,UAAU,GAAG,SAAS;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EACF;AAEO,SAAA;AACT;"}