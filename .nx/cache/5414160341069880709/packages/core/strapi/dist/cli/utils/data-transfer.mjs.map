{"version":3,"file":"data-transfer.mjs","sources":["../../../src/cli/utils/data-transfer.ts"],"sourcesContent":["import chalk from 'chalk';\r\nimport Table from 'cli-table3';\r\nimport { Command, Option } from 'commander';\r\nimport { configs, createLogger, type winston, formats } from '@strapi/logger';\r\nimport { createStrapi, compileStrapi } from '@strapi/core';\r\nimport ora from 'ora';\r\nimport { merge } from 'lodash/fp';\r\nimport type { Core } from '@strapi/types';\r\nimport { engine as engineDataTransfer, strapi as strapiDataTransfer } from '@strapi/data-transfer';\r\n\r\nimport { readableBytes, exitWith } from './helpers';\r\nimport { getParseListWithChoices, parseInteger, confirmMessage } from './commander';\r\n\r\nconst {\r\n  errors: { TransferEngineInitializationError },\r\n} = engineDataTransfer;\r\n\r\nconst exitMessageText = (process: string, error = false) => {\r\n  const processCapitalized = process[0].toUpperCase() + process.slice(1);\r\n\r\n  if (!error) {\r\n    return chalk.bold(\r\n      chalk.green(`${processCapitalized} process has been completed successfully!`)\r\n    );\r\n  }\r\n\r\n  return chalk.bold(chalk.red(`${processCapitalized} process failed.`));\r\n};\r\n\r\nconst pad = (n: number) => {\r\n  return (n < 10 ? '0' : '') + String(n);\r\n};\r\n\r\nconst yyyymmddHHMMSS = () => {\r\n  const date = new Date();\r\n\r\n  return (\r\n    date.getFullYear() +\r\n    pad(date.getMonth() + 1) +\r\n    pad(date.getDate()) +\r\n    pad(date.getHours()) +\r\n    pad(date.getMinutes()) +\r\n    pad(date.getSeconds())\r\n  );\r\n};\r\n\r\nconst getDefaultExportName = () => {\r\n  return `export_${yyyymmddHHMMSS()}`;\r\n};\r\n\r\ntype ResultData = engineDataTransfer.ITransferResults<\r\n  engineDataTransfer.ISourceProvider,\r\n  engineDataTransfer.IDestinationProvider\r\n>['engine'];\r\n\r\nconst buildTransferTable = (resultData: ResultData) => {\r\n  if (!resultData) {\r\n    return;\r\n  }\r\n\r\n  // Build pretty table\r\n  const table = new Table({\r\n    head: ['Type', 'Count', 'Size'].map((text) => chalk.bold.blue(text)),\r\n  });\r\n\r\n  let totalBytes = 0;\r\n  let totalItems = 0;\r\n  (Object.keys(resultData) as engineDataTransfer.TransferStage[]).forEach((stage) => {\r\n    const item = resultData[stage];\r\n\r\n    if (!item) {\r\n      return;\r\n    }\r\n\r\n    table.push([\r\n      { hAlign: 'left', content: chalk.bold(stage) },\r\n      { hAlign: 'right', content: item.count },\r\n      { hAlign: 'right', content: `${readableBytes(item.bytes, 1, 11)} ` },\r\n    ]);\r\n    totalBytes += item.bytes;\r\n    totalItems += item.count;\r\n\r\n    if (item.aggregates) {\r\n      (Object.keys(item.aggregates) as (keyof typeof item.aggregates)[])\r\n        .sort()\r\n        .forEach((subkey) => {\r\n          if (!item.aggregates) {\r\n            return;\r\n          }\r\n\r\n          const subitem = item.aggregates[subkey];\r\n\r\n          table.push([\r\n            { hAlign: 'left', content: `-- ${chalk.bold.grey(subkey)}` },\r\n            { hAlign: 'right', content: chalk.grey(subitem.count) },\r\n            { hAlign: 'right', content: chalk.grey(`(${readableBytes(subitem.bytes, 1, 11)})`) },\r\n          ]);\r\n        });\r\n    }\r\n  });\r\n  table.push([\r\n    { hAlign: 'left', content: chalk.bold.green('Total') },\r\n    { hAlign: 'right', content: chalk.bold.green(totalItems) },\r\n    { hAlign: 'right', content: `${chalk.bold.green(readableBytes(totalBytes, 1, 11))} ` },\r\n  ]);\r\n\r\n  return table;\r\n};\r\n\r\nconst DEFAULT_IGNORED_CONTENT_TYPES = [\r\n  'admin::permission',\r\n  'admin::user',\r\n  'admin::role',\r\n  'admin::api-token',\r\n  'admin::api-token-permission',\r\n  'admin::transfer-token',\r\n  'admin::transfer-token-permission',\r\n  'admin::audit-log',\r\n  'plugin::content-releases.release',\r\n  'plugin::content-releases.release-action',\r\n];\r\n\r\nconst abortTransfer = async ({\r\n  engine,\r\n  strapi,\r\n}: {\r\n  engine: engineDataTransfer.TransferEngine;\r\n  strapi: Core.Strapi;\r\n}) => {\r\n  try {\r\n    await engine.abortTransfer();\r\n    await strapi.destroy();\r\n  } catch (e) {\r\n    // ignore because there's not much else we can do\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst setSignalHandler = async (\r\n  handler: (...args: unknown[]) => void,\r\n  signals = ['SIGINT', 'SIGTERM', 'SIGQUIT']\r\n) => {\r\n  signals.forEach((signal) => {\r\n    // We specifically remove ALL listeners because we have to clear the one added in Strapi bootstrap that has a process.exit\r\n    // TODO: Ideally Strapi bootstrap would not add that listener, and then this could be more flexible and add/remove only what it needs to\r\n    process.removeAllListeners(signal);\r\n    process.on(signal, handler);\r\n  });\r\n};\r\n\r\nconst createStrapiInstance = async (opts: { logLevel?: string } = {}): Promise<Core.Strapi> => {\r\n  try {\r\n    const appContext = await compileStrapi();\r\n    const app = createStrapi({ ...opts, ...appContext });\r\n\r\n    app.log.level = opts.logLevel || 'error';\r\n    return await app.load();\r\n  } catch (error) {\r\n    if (error instanceof Error && 'code' in error && error.code === 'ECONNREFUSED') {\r\n      throw new Error('Process failed. Check the database connection with your Strapi project.');\r\n    }\r\n\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst transferDataTypes = Object.keys(engineDataTransfer.TransferGroupPresets);\r\n\r\nconst throttleOption = new Option(\r\n  '--throttle <delay after each entity>',\r\n  `Add a delay in milliseconds between each transferred entity`\r\n)\r\n  .argParser(parseInteger)\r\n  .hideHelp(); // This option is not publicly documented\r\n\r\nconst excludeOption = new Option(\r\n  '--exclude <comma-separated data types>',\r\n  `Exclude data using comma-separated types. Available types: ${transferDataTypes.join(',')}`\r\n).argParser(getParseListWithChoices(transferDataTypes, 'Invalid options for \"exclude\"'));\r\n\r\nconst onlyOption = new Option(\r\n  '--only <command-separated data types>',\r\n  `Include only these types of data (plus schemas). Available types: ${transferDataTypes.join(',')}`\r\n).argParser(getParseListWithChoices(transferDataTypes, 'Invalid options for \"only\"'));\r\n\r\nconst validateExcludeOnly = (command: Command) => {\r\n  const { exclude, only } = command.opts();\r\n  if (!only || !exclude) {\r\n    return;\r\n  }\r\n\r\n  const choicesInBoth = only.filter((n: string) => {\r\n    return exclude.indexOf(n) !== -1;\r\n  });\r\n  if (choicesInBoth.length > 0) {\r\n    exitWith(\r\n      1,\r\n      `Data types may not be used in both \"exclude\" and \"only\" in the same command. Found in both: ${choicesInBoth.join(\r\n        ','\r\n      )}`\r\n    );\r\n  }\r\n};\r\n\r\nconst errorColors = {\r\n  fatal: chalk.red,\r\n  error: chalk.red,\r\n  silly: chalk.yellow,\r\n} as const;\r\n\r\nconst formatDiagnostic = (\r\n  operation: string,\r\n  info?: boolean\r\n): Parameters<engineDataTransfer.TransferEngine['diagnostics']['onDiagnostic']>[0] => {\r\n  // Create log file for all incoming diagnostics\r\n  let logger: undefined | winston.Logger;\r\n  const getLogger = () => {\r\n    if (!logger) {\r\n      logger = createLogger(\r\n        configs.createOutputFileConfiguration(`${operation}_${Date.now()}.log`, {\r\n          level: 'info',\r\n          format: formats?.detailedLogs,\r\n        })\r\n      );\r\n    }\r\n    return logger;\r\n  };\r\n\r\n  // We don't want to write a log file until there is something to be logged\r\n\r\n  return ({ details, kind }) => {\r\n    try {\r\n      if (kind === 'error') {\r\n        const { message, severity = 'fatal' } = details;\r\n\r\n        const colorizeError = errorColors[severity];\r\n        const errorMessage = colorizeError(`[${severity.toUpperCase()}] ${message}`);\r\n\r\n        getLogger().error(errorMessage);\r\n      }\r\n      if (kind === 'info' && info) {\r\n        const { message, params, origin } = details;\r\n\r\n        const msg = `[${origin ?? 'transfer'}] ${message}\\n${params ? JSON.stringify(params, null, 2) : ''}`;\r\n\r\n        getLogger().info(msg);\r\n      }\r\n      if (kind === 'warning') {\r\n        const { origin, message } = details;\r\n\r\n        getLogger().warn(`(${origin ?? 'transfer'}) ${message}`);\r\n      }\r\n    } catch (err) {\r\n      getLogger().error(err);\r\n    }\r\n  };\r\n};\r\n\r\ntype Loaders = {\r\n  [key in engineDataTransfer.TransferStage]: ora.Ora;\r\n};\r\n\r\ntype Data = {\r\n  [key in engineDataTransfer.TransferStage]?: {\r\n    startTime?: number;\r\n    endTime?: number;\r\n    bytes?: number;\r\n    count?: number;\r\n  };\r\n};\r\n\r\nconst loadersFactory = (defaultLoaders: Loaders = {} as Loaders) => {\r\n  const loaders = defaultLoaders;\r\n  const updateLoader = (stage: engineDataTransfer.TransferStage, data: Data) => {\r\n    if (!(stage in loaders)) {\r\n      createLoader(stage);\r\n    }\r\n\r\n    const stageData = data[stage];\r\n    const elapsedTime = stageData?.startTime\r\n      ? (stageData?.endTime || Date.now()) - stageData.startTime\r\n      : 0;\r\n    const size = `size: ${readableBytes(stageData?.bytes ?? 0)}`;\r\n    const elapsed = `elapsed: ${elapsedTime} ms`;\r\n    const speed =\r\n      elapsedTime > 0 ? `(${readableBytes(((stageData?.bytes ?? 0) * 1000) / elapsedTime)}/s)` : '';\r\n\r\n    loaders[stage].text = `${stage}: ${stageData?.count ?? 0} transfered (${size}) (${elapsed}) ${\r\n      !stageData?.endTime ? speed : ''\r\n    }`;\r\n\r\n    return loaders[stage];\r\n  };\r\n\r\n  const createLoader = (stage: engineDataTransfer.TransferStage) => {\r\n    Object.assign(loaders, { [stage]: ora() });\r\n    return loaders[stage];\r\n  };\r\n\r\n  const getLoader = (stage: engineDataTransfer.TransferStage) => {\r\n    return loaders[stage];\r\n  };\r\n\r\n  return {\r\n    updateLoader,\r\n    createLoader,\r\n    getLoader,\r\n  };\r\n};\r\n\r\n/**\r\n * Get the telemetry data to be sent for a didDEITSProcess* event from an initialized transfer engine object\r\n */\r\nconst getTransferTelemetryPayload = (engine: engineDataTransfer.TransferEngine) => {\r\n  return {\r\n    eventProperties: {\r\n      source: engine?.sourceProvider?.name,\r\n      destination: engine?.destinationProvider?.name,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Get a transfer engine schema diff handler that confirms with the user before bypassing a schema check\r\n */\r\nconst getDiffHandler = (\r\n  engine: engineDataTransfer.TransferEngine,\r\n  {\r\n    force,\r\n    action,\r\n  }: {\r\n    force?: boolean;\r\n    action: string;\r\n  }\r\n) => {\r\n  return async (\r\n    context: engineDataTransfer.SchemaDiffHandlerContext,\r\n    next: (ctx: engineDataTransfer.SchemaDiffHandlerContext) => void\r\n  ) => {\r\n    // if we abort here, we need to actually exit the process because of conflict with inquirer prompt\r\n    setSignalHandler(async () => {\r\n      await abortTransfer({ engine, strapi: strapi as Core.Strapi });\r\n      exitWith(1, exitMessageText(action, true));\r\n    });\r\n\r\n    let workflowsStatus;\r\n    const source = 'Schema Integrity';\r\n\r\n    Object.entries(context.diffs).forEach(([uid, diffs]) => {\r\n      for (const diff of diffs) {\r\n        const path = [uid].concat(diff.path).join('.');\r\n        const endPath = diff.path[diff.path.length - 1];\r\n\r\n        // Catch known features\r\n        if (\r\n          uid === 'plugin::review-workflows.workflow' ||\r\n          uid === 'plugin::review-workflows.workflow-stage' ||\r\n          endPath?.startsWith('strapi_stage') ||\r\n          endPath?.startsWith('strapi_assignee')\r\n        ) {\r\n          workflowsStatus = diff.kind;\r\n        }\r\n        // handle generic cases\r\n        else if (diff.kind === 'added') {\r\n          engine.reportWarning(chalk.red(`${chalk.bold(path)} does not exist on source`), source);\r\n        } else if (diff.kind === 'deleted') {\r\n          engine.reportWarning(\r\n            chalk.red(`${chalk.bold(path)} does not exist on destination`),\r\n            source\r\n          );\r\n        } else if (diff.kind === 'modified') {\r\n          engine.reportWarning(chalk.red(`${chalk.bold(path)} has a different data type`), source);\r\n        }\r\n      }\r\n    });\r\n\r\n    // output the known feature warnings\r\n    if (workflowsStatus === 'added') {\r\n      engine.reportWarning(chalk.red(`Review workflows feature does not exist on source`), source);\r\n    } else if (workflowsStatus === 'deleted') {\r\n      engine.reportWarning(\r\n        chalk.red(`Review workflows feature does not exist on destination`),\r\n        source\r\n      );\r\n    } else if (workflowsStatus === 'modified') {\r\n      engine.panic(\r\n        new TransferEngineInitializationError('Unresolved differences in schema [review workflows]')\r\n      );\r\n    }\r\n\r\n    const confirmed = await confirmMessage(\r\n      'There are differences in schema between the source and destination, and the data listed above will be lost. Are you sure you want to continue?',\r\n      {\r\n        force,\r\n      }\r\n    );\r\n\r\n    // reset handler back to normal\r\n    setSignalHandler(() => abortTransfer({ engine, strapi: strapi as Core.Strapi }));\r\n\r\n    if (confirmed) {\r\n      context.ignoredDiffs = merge(context.diffs, context.ignoredDiffs);\r\n    }\r\n\r\n    return next(context);\r\n  };\r\n};\r\n\r\nconst getAssetsBackupHandler = (\r\n  engine: engineDataTransfer.TransferEngine,\r\n  {\r\n    force,\r\n    action,\r\n  }: {\r\n    force?: boolean;\r\n    action: string;\r\n  }\r\n) => {\r\n  return async (\r\n    context: engineDataTransfer.ErrorHandlerContext,\r\n    next: (ctx: engineDataTransfer.ErrorHandlerContext) => void\r\n  ) => {\r\n    // if we abort here, we need to actually exit the process because of conflict with inquirer prompt\r\n    setSignalHandler(async () => {\r\n      await abortTransfer({ engine, strapi: strapi as Core.Strapi });\r\n      exitWith(1, exitMessageText(action, true));\r\n    });\r\n\r\n    console.warn(\r\n      'The backup for the assets could not be created inside the public directory. Ensure Strapi has write permissions on the public directory.'\r\n    );\r\n    const confirmed = await confirmMessage(\r\n      'Do you want to continue without backing up your public/uploads files?',\r\n      {\r\n        force,\r\n      }\r\n    );\r\n\r\n    if (confirmed) {\r\n      context.ignore = true;\r\n    }\r\n\r\n    // reset handler back to normal\r\n    setSignalHandler(() => abortTransfer({ engine, strapi: strapi as Core.Strapi }));\r\n    return next(context);\r\n  };\r\n};\r\n\r\nconst shouldSkipStage = (\r\n  opts: Partial<engineDataTransfer.ITransferEngineOptions>,\r\n  dataKind: engineDataTransfer.TransferFilterPreset\r\n) => {\r\n  if (opts.exclude?.includes(dataKind)) {\r\n    return true;\r\n  }\r\n  if (opts.only) {\r\n    return !opts.only.includes(dataKind);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\ntype RestoreConfig = NonNullable<\r\n  strapiDataTransfer.providers.ILocalStrapiDestinationProviderOptions['restore']\r\n>;\r\n\r\n// Based on exclude/only from options, create the restore object to match\r\nconst parseRestoreFromOptions = (opts: Partial<engineDataTransfer.ITransferEngineOptions>) => {\r\n  const entitiesOptions: RestoreConfig['entities'] = {\r\n    exclude: DEFAULT_IGNORED_CONTENT_TYPES,\r\n    include: undefined,\r\n  };\r\n\r\n  // if content is not included, send an empty array for include\r\n  if ((opts.only && !opts.only.includes('content')) || opts.exclude?.includes('content')) {\r\n    entitiesOptions.include = [];\r\n  }\r\n\r\n  const restoreConfig: strapiDataTransfer.providers.ILocalStrapiDestinationProviderOptions['restore'] =\r\n    {\r\n      entities: entitiesOptions,\r\n      assets: !shouldSkipStage(opts, 'files'),\r\n      configuration: {\r\n        webhook: !shouldSkipStage(opts, 'config'),\r\n        coreStore: !shouldSkipStage(opts, 'config'),\r\n      },\r\n    };\r\n\r\n  return restoreConfig;\r\n};\r\n\r\nexport {\r\n  loadersFactory,\r\n  buildTransferTable,\r\n  getDefaultExportName,\r\n  getTransferTelemetryPayload,\r\n  DEFAULT_IGNORED_CONTENT_TYPES,\r\n  createStrapiInstance,\r\n  excludeOption,\r\n  exitMessageText,\r\n  onlyOption,\r\n  throttleOption,\r\n  validateExcludeOnly,\r\n  formatDiagnostic,\r\n  abortTransfer,\r\n  setSignalHandler,\r\n  getDiffHandler,\r\n  getAssetsBackupHandler,\r\n  shouldSkipStage,\r\n  parseRestoreFromOptions,\r\n};\r\n"],"names":["engineDataTransfer","process","Table","engine","strapi"],"mappings":"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"}