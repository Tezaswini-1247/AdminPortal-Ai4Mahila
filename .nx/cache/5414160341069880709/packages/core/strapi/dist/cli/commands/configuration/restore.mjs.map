{"version":3,"file":"restore.mjs","sources":["../../../../src/cli/commands/configuration/restore.ts"],"sourcesContent":["import { createCommand } from 'commander';\r\nimport fs from 'fs';\r\nimport _ from 'lodash';\r\nimport { createStrapi, compileStrapi } from '@strapi/core';\r\nimport type { Database } from '@strapi/database';\r\n\r\nimport type { StrapiCommand } from '../../types';\r\nimport { runAction } from '../../utils/helpers';\r\n\r\ntype Strategy = 'replace' | 'merge' | 'keep';\r\n\r\ninterface CmdOptions {\r\n  file?: string;\r\n  strategy?: Strategy;\r\n}\r\n\r\n/**\r\n * Will restore configurations. It reads from a file or stdin\r\n */\r\nconst action = async ({ file: filePath, strategy = 'replace' }: CmdOptions) => {\r\n  const input = filePath ? fs.readFileSync(filePath) : await readStdin();\r\n\r\n  const appContext = await compileStrapi();\r\n  const app = await createStrapi(appContext).load();\r\n\r\n  let dataToImport;\r\n  try {\r\n    dataToImport = JSON.parse(_.toString(input));\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      throw new Error(`Invalid input data: ${error.message}. Expected a valid JSON array.`);\r\n    }\r\n\r\n    throw error;\r\n  }\r\n\r\n  if (!Array.isArray(dataToImport)) {\r\n    throw new Error(`Invalid input data. Expected a valid JSON array.`);\r\n  }\r\n\r\n  if (!app.db) {\r\n    throw new Error('Cannot import configuration without a database connection.');\r\n  }\r\n\r\n  const importer = createImporter(app.db, strategy);\r\n\r\n  for (const config of dataToImport) {\r\n    await importer.import(config);\r\n  }\r\n\r\n  console.log(\r\n    `Successfully imported configuration with ${strategy} strategy. Statistics: ${importer.printStatistics()}.`\r\n  );\r\n\r\n  process.exit(0);\r\n};\r\n\r\nconst readStdin = () => {\r\n  const { stdin } = process;\r\n  let result = '';\r\n\r\n  if (stdin.isTTY) return Promise.resolve(result);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    stdin.setEncoding('utf8');\r\n    stdin.on('readable', () => {\r\n      let chunk;\r\n      // eslint-disable-next-line no-cond-assign\r\n      while ((chunk = stdin.read())) {\r\n        result += chunk;\r\n      }\r\n    });\r\n\r\n    stdin.on('end', () => {\r\n      resolve(result);\r\n    });\r\n\r\n    stdin.on('error', reject);\r\n  });\r\n};\r\n\r\nconst createImporter = (db: Database, strategy?: Strategy) => {\r\n  switch (strategy) {\r\n    case 'replace':\r\n      return createReplaceImporter(db);\r\n    case 'merge':\r\n      return createMergeImporter(db);\r\n    case 'keep':\r\n      return createKeepImporter(db);\r\n    default:\r\n      throw new Error(`No importer available for strategy \"${strategy}\"`);\r\n  }\r\n};\r\n\r\n/**\r\n * Replace importer. Will replace the keys that already exist and create the new ones\r\n */\r\nconst createReplaceImporter = (db: Database) => {\r\n  const stats = {\r\n    created: 0,\r\n    replaced: 0,\r\n  };\r\n\r\n  return {\r\n    printStatistics() {\r\n      return `${stats.created} created, ${stats.replaced} replaced`;\r\n    },\r\n\r\n    async import(conf: Record<string, unknown>) {\r\n      const matching = await db.query('strapi::core-store').count({ where: { key: conf.key } });\r\n      if (matching > 0) {\r\n        stats.replaced += 1;\r\n        await db.query('strapi::core-store').update({\r\n          where: { key: conf.key },\r\n          data: conf,\r\n        });\r\n      } else {\r\n        stats.created += 1;\r\n        await db.query('strapi::core-store').create({ data: conf });\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Merge importer. Will merge the keys that already exist with their new value and create the new ones\r\n */\r\nconst createMergeImporter = (db: Database) => {\r\n  const stats = {\r\n    created: 0,\r\n    merged: 0,\r\n  };\r\n\r\n  return {\r\n    printStatistics() {\r\n      return `${stats.created} created, ${stats.merged} merged`;\r\n    },\r\n\r\n    async import(conf: Record<string, unknown>) {\r\n      const existingConf = await db\r\n        .query('strapi::core-store')\r\n        .findOne({ where: { key: conf.key } });\r\n\r\n      if (existingConf) {\r\n        stats.merged += 1;\r\n        await db.query('strapi::core-store').update({\r\n          where: { key: conf.key },\r\n          data: _.merge(existingConf, conf),\r\n        });\r\n      } else {\r\n        stats.created += 1;\r\n        await db.query('strapi::core-store').create({ data: conf });\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Merge importer. Will keep the keys that already exist without changing them and create the new ones\r\n */\r\nconst createKeepImporter = (db: Database) => {\r\n  const stats = {\r\n    created: 0,\r\n    untouched: 0,\r\n  };\r\n\r\n  return {\r\n    printStatistics() {\r\n      return `${stats.created} created, ${stats.untouched} untouched`;\r\n    },\r\n\r\n    async import(conf: Record<string, unknown>) {\r\n      const matching = await db.query('strapi::core-store').count({ where: { key: conf.key } });\r\n      if (matching > 0) {\r\n        stats.untouched += 1;\r\n        // if configuration already exists do not overwrite it\r\n        return;\r\n      }\r\n\r\n      stats.created += 1;\r\n      await db.query('strapi::core-store').create({ data: conf });\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * `$ strapi configuration:restore`\r\n */\r\nconst command: StrapiCommand = () => {\r\n  return createCommand('configuration:restore')\r\n    .alias('config:restore')\r\n    .description('Restore configurations of your application')\r\n    .option('-f, --file <file>', 'Input file, default input is stdin')\r\n    .option('-s, --strategy <strategy>', 'Strategy name, one of: \"replace\", \"merge\", \"keep\"')\r\n    .action(runAction('configuration:restore', action));\r\n};\r\n\r\nexport { action, command };\r\n"],"names":[],"mappings":"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"}