{"version":3,"file":"reset-user-password.js","sources":["../../../../src/cli/commands/admin/reset-user-password.ts"],"sourcesContent":["import _ from 'lodash';\r\nimport inquirer from 'inquirer';\r\nimport { createCommand } from 'commander';\r\nimport { createStrapi, compileStrapi } from '@strapi/core';\r\n\r\nimport type { StrapiCommand } from '../../types';\r\nimport { runAction } from '../../utils/helpers';\r\n\r\ninterface CmdOptions {\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\ninterface Answers {\r\n  email: string;\r\n  password: string;\r\n  confirm: boolean;\r\n}\r\n\r\nconst promptQuestions: ReadonlyArray<inquirer.DistinctQuestion<Answers>> = [\r\n  { type: 'input', name: 'email', message: 'User email?' },\r\n  { type: 'password', name: 'password', message: 'New password?' },\r\n  {\r\n    type: 'confirm',\r\n    name: 'confirm',\r\n    message: \"Do you really want to reset this user's password?\",\r\n  },\r\n];\r\n\r\nasync function changePassword({ email, password }: CmdOptions) {\r\n  const appContext = await compileStrapi();\r\n  const app = await createStrapi(appContext).load();\r\n\r\n  await app.admin!.services.user.resetPasswordByEmail(email, password);\r\n\r\n  console.log(`Successfully reset user's password`);\r\n  process.exit(0);\r\n}\r\n\r\n/**\r\n * Reset user's password\r\n */\r\nconst action = async (cmdOptions: CmdOptions = {}) => {\r\n  const { email, password } = cmdOptions;\r\n\r\n  if (_.isEmpty(email) && _.isEmpty(password) && process.stdin.isTTY) {\r\n    const inquiry = await inquirer.prompt(promptQuestions);\r\n\r\n    if (!inquiry.confirm) {\r\n      process.exit(0);\r\n    }\r\n\r\n    return changePassword(inquiry);\r\n  }\r\n\r\n  if (_.isEmpty(email) || _.isEmpty(password)) {\r\n    console.error('Missing required options `email` or `password`');\r\n    process.exit(1);\r\n  }\r\n\r\n  return changePassword({ email, password });\r\n};\r\n\r\n/**\r\n * `$ strapi admin:reset-user-password`\r\n */\r\nconst command: StrapiCommand = () => {\r\n  return createCommand('admin:reset-user-password')\r\n    .alias('admin:reset-password')\r\n    .description(\"Reset an admin user's password\")\r\n    .option('-e, --email <email>', 'The user email')\r\n    .option('-p, --password <password>', 'New password for the user')\r\n    .action(runAction('admin:reset-user-password', action));\r\n};\r\n\r\nexport { action, command };\r\n"],"names":["compileStrapi","createStrapi","_","inquirer","createCommand","runAction"],"mappings":";;;;;;;;;;AAmBA,MAAM,kBAAqE;AAAA,EACzE,EAAE,MAAM,SAAS,MAAM,SAAS,SAAS,cAAc;AAAA,EACvD,EAAE,MAAM,YAAY,MAAM,YAAY,SAAS,gBAAgB;AAAA,EAC/D;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EAAA;AAEb;AAEA,eAAe,eAAe,EAAE,OAAO,YAAwB;AACvD,QAAA,aAAa,MAAMA,mBAAc;AACvC,QAAM,MAAM,MAAMC,KAAAA,aAAa,UAAU,EAAE,KAAK;AAEhD,QAAM,IAAI,MAAO,SAAS,KAAK,qBAAqB,OAAO,QAAQ;AAEnE,UAAQ,IAAI,oCAAoC;AAChD,UAAQ,KAAK,CAAC;AAChB;AAKA,MAAM,SAAS,OAAO,aAAyB,OAAO;AAC9C,QAAA,EAAE,OAAO,SAAA,IAAa;AAExB,MAAAC,mBAAE,QAAQ,KAAK,KAAKA,WAAA,QAAE,QAAQ,QAAQ,KAAK,QAAQ,MAAM,OAAO;AAClE,UAAM,UAAU,MAAMC,0BAAS,OAAO,eAAe;AAEjD,QAAA,CAAC,QAAQ,SAAS;AACpB,cAAQ,KAAK,CAAC;AAAA,IAAA;AAGhB,WAAO,eAAe,OAAO;AAAA,EAAA;AAG/B,MAAID,WAAAA,QAAE,QAAQ,KAAK,KAAKA,WAAAA,QAAE,QAAQ,QAAQ,GAAG;AAC3C,YAAQ,MAAM,gDAAgD;AAC9D,YAAQ,KAAK,CAAC;AAAA,EAAA;AAGhB,SAAO,eAAe,EAAE,OAAO,UAAU;AAC3C;AAKA,MAAM,UAAyB,MAAM;AAC5B,SAAAE,UAAA,cAAc,2BAA2B,EAC7C,MAAM,sBAAsB,EAC5B,YAAY,gCAAgC,EAC5C,OAAO,uBAAuB,gBAAgB,EAC9C,OAAO,6BAA6B,2BAA2B,EAC/D,OAAOC,QAAA,UAAU,6BAA6B,MAAM,CAAC;AAC1D;;;"}