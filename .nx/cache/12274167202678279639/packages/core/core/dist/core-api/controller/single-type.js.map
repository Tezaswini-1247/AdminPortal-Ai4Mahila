{"version":3,"file":"single-type.js","sources":["../../../src/core-api/controller/single-type.ts"],"sourcesContent":["import { isObject } from 'lodash/fp';\r\nimport { errors } from '@strapi/utils';\r\nimport type { Struct, Core, Utils, UID } from '@strapi/types';\r\n\r\ninterface Options {\r\n  contentType: Struct.SingleTypeSchema;\r\n}\r\n\r\n/**\r\n * Returns a single type controller to handle default core-api actions\r\n */\r\nconst createSingleTypeController = ({\r\n  contentType,\r\n}: Options): Utils.PartialWithThis<Core.CoreAPI.Controller.SingleType> => {\r\n  const uid = contentType.uid as UID.Service;\r\n\r\n  // TODO: transform into a class\r\n  return {\r\n    /**\r\n     * Retrieve single type content\r\n     *\r\n     */\r\n    async find(ctx) {\r\n      await this.validateQuery(ctx);\r\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\r\n\r\n      const entity = await strapi.service(uid).find(sanitizedQuery);\r\n\r\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\r\n\r\n      return this.transformResponse(sanitizedEntity);\r\n    },\r\n\r\n    /**\r\n     * create or update single type content.\r\n     */\r\n    async update(ctx) {\r\n      const { query, body = {} as any } = ctx.request;\r\n\r\n      if (!isObject(body.data)) {\r\n        throw new errors.ValidationError('Missing \"data\" payload in the request body');\r\n      }\r\n\r\n      await this.validateInput(body.data, ctx);\r\n\r\n      const sanitizedInputData = await this.sanitizeInput(body.data, ctx);\r\n\r\n      const entity = await strapi.service(uid).createOrUpdate({\r\n        ...query,\r\n        data: sanitizedInputData,\r\n      });\r\n\r\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\r\n\r\n      return this.transformResponse(sanitizedEntity);\r\n    },\r\n\r\n    async delete(ctx) {\r\n      const { query } = ctx;\r\n\r\n      await strapi.service(uid).delete(query);\r\n\r\n      ctx.status = 204;\r\n    },\r\n  };\r\n};\r\n\r\nexport { createSingleTypeController };\r\n"],"names":["isObject","errors"],"mappings":";;;;AAWA,MAAM,6BAA6B,CAAC;AAAA,EAClC;AACF,MAA0E;AACxE,QAAM,MAAM,YAAY;AAGjB,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKL,MAAM,KAAK,KAAK;AACR,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAEnD,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,KAAK,cAAc;AAE5D,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO,KAAK;AAChB,YAAM,EAAE,OAAO,OAAO,CAAA,MAAc,IAAI;AAExC,UAAI,CAACA,GAAA,SAAS,KAAK,IAAI,GAAG;AAClB,cAAA,IAAIC,YAAAA,OAAO,gBAAgB,4CAA4C;AAAA,MAAA;AAG/E,YAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAEvC,YAAM,qBAAqB,MAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAElE,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,eAAe;AAAA,QACtD,GAAG;AAAA,QACH,MAAM;AAAA,MAAA,CACP;AAED,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA,IAEA,MAAM,OAAO,KAAK;AACV,YAAA,EAAE,UAAU;AAElB,YAAM,OAAO,QAAQ,GAAG,EAAE,OAAO,KAAK;AAEtC,UAAI,SAAS;AAAA,IAAA;AAAA,EAEjB;AACF;;"}