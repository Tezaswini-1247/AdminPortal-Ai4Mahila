{"version":3,"file":"collection-type.js","sources":["../../../src/core-api/service/collection-type.ts"],"sourcesContent":["import type { Core, Struct, Modules } from '@strapi/types';\r\n\r\nimport {\r\n  getPaginationInfo,\r\n  shouldCount,\r\n  isPagedPagination,\r\n  transformPaginationResponse,\r\n} from './pagination';\r\n\r\nimport { CoreService } from './core-service';\r\n\r\nexport class CollectionTypeService\r\n  extends CoreService\r\n  implements Core.CoreAPI.Service.CollectionType\r\n{\r\n  private contentType: Struct.CollectionTypeSchema;\r\n\r\n  constructor(contentType: Struct.CollectionTypeSchema) {\r\n    super();\r\n\r\n    this.contentType = contentType;\r\n  }\r\n\r\n  async find(params = {}) {\r\n    const { uid } = this.contentType;\r\n\r\n    const fetchParams = this.getFetchParams(params);\r\n\r\n    const paginationInfo = getPaginationInfo(fetchParams);\r\n    const isPaged = isPagedPagination(fetchParams.pagination);\r\n\r\n    const results = await strapi.documents(uid).findMany({\r\n      ...fetchParams,\r\n      ...paginationInfo,\r\n    });\r\n\r\n    if (shouldCount(fetchParams)) {\r\n      const count = await strapi.documents(uid).count({ ...fetchParams, ...paginationInfo });\r\n\r\n      if (typeof count !== 'number') {\r\n        throw new Error('Count should be a number');\r\n      }\r\n\r\n      return {\r\n        results,\r\n        pagination: transformPaginationResponse(paginationInfo, count, isPaged),\r\n      };\r\n    }\r\n\r\n    return {\r\n      results,\r\n      pagination: transformPaginationResponse(paginationInfo, undefined, isPaged),\r\n    };\r\n  }\r\n\r\n  findOne(documentId: Modules.Documents.ID, params = {}) {\r\n    const { uid } = this.contentType;\r\n\r\n    return strapi.documents(uid).findOne({\r\n      ...this.getFetchParams(params),\r\n      documentId,\r\n    });\r\n  }\r\n\r\n  async create(params = { data: {} }) {\r\n    const { uid } = this.contentType;\r\n\r\n    return strapi.documents(uid).create(this.getFetchParams(params));\r\n  }\r\n\r\n  update(documentId: Modules.Documents.ID, params = { data: {} }) {\r\n    const { uid } = this.contentType;\r\n\r\n    return strapi.documents(uid).update({\r\n      ...this.getFetchParams(params),\r\n      documentId,\r\n    });\r\n  }\r\n\r\n  async delete(documentId: Modules.Documents.ID, params = {}) {\r\n    const { uid } = this.contentType;\r\n\r\n    const { entries } = await strapi.documents(uid).delete({\r\n      ...this.getFetchParams(params),\r\n      documentId,\r\n    });\r\n\r\n    return { deletedEntries: entries.length };\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * Returns a collection type service to handle default core-api actions\r\n */\r\n\r\nconst createCollectionTypeService = (\r\n  contentType: Struct.CollectionTypeSchema\r\n): Core.CoreAPI.Service.CollectionType => {\r\n  return new CollectionTypeService(contentType);\r\n};\r\n\r\nexport { createCollectionTypeService };\r\n"],"names":["CoreService","getPaginationInfo","isPagedPagination","shouldCount","transformPaginationResponse"],"mappings":";;;;AAWO,MAAM,8BACHA,YAAAA,YAEV;AAAA,EACU;AAAA,EAER,YAAY,aAA0C;AAC9C,UAAA;AAEN,SAAK,cAAc;AAAA,EAAA;AAAA,EAGrB,MAAM,KAAK,SAAS,IAAI;AAChB,UAAA,EAAE,QAAQ,KAAK;AAEf,UAAA,cAAc,KAAK,eAAe,MAAM;AAExC,UAAA,iBAAiBC,6BAAkB,WAAW;AAC9C,UAAA,UAAUC,WAAAA,kBAAkB,YAAY,UAAU;AAExD,UAAM,UAAU,MAAM,OAAO,UAAU,GAAG,EAAE,SAAS;AAAA,MACnD,GAAG;AAAA,MACH,GAAG;AAAA,IAAA,CACJ;AAEG,QAAAC,WAAAA,YAAY,WAAW,GAAG;AAC5B,YAAM,QAAQ,MAAM,OAAO,UAAU,GAAG,EAAE,MAAM,EAAE,GAAG,aAAa,GAAG,gBAAgB;AAEjF,UAAA,OAAO,UAAU,UAAU;AACvB,cAAA,IAAI,MAAM,0BAA0B;AAAA,MAAA;AAGrC,aAAA;AAAA,QACL;AAAA,QACA,YAAYC,WAAA,4BAA4B,gBAAgB,OAAO,OAAO;AAAA,MACxE;AAAA,IAAA;AAGK,WAAA;AAAA,MACL;AAAA,MACA,YAAYA,WAAA,4BAA4B,gBAAgB,QAAW,OAAO;AAAA,IAC5E;AAAA,EAAA;AAAA,EAGF,QAAQ,YAAkC,SAAS,IAAI;AAC/C,UAAA,EAAE,QAAQ,KAAK;AAErB,WAAO,OAAO,UAAU,GAAG,EAAE,QAAQ;AAAA,MACnC,GAAG,KAAK,eAAe,MAAM;AAAA,MAC7B;AAAA,IAAA,CACD;AAAA,EAAA;AAAA,EAGH,MAAM,OAAO,SAAS,EAAE,MAAM,MAAM;AAC5B,UAAA,EAAE,QAAQ,KAAK;AAEd,WAAA,OAAO,UAAU,GAAG,EAAE,OAAO,KAAK,eAAe,MAAM,CAAC;AAAA,EAAA;AAAA,EAGjE,OAAO,YAAkC,SAAS,EAAE,MAAM,MAAM;AACxD,UAAA,EAAE,QAAQ,KAAK;AAErB,WAAO,OAAO,UAAU,GAAG,EAAE,OAAO;AAAA,MAClC,GAAG,KAAK,eAAe,MAAM;AAAA,MAC7B;AAAA,IAAA,CACD;AAAA,EAAA;AAAA,EAGH,MAAM,OAAO,YAAkC,SAAS,IAAI;AACpD,UAAA,EAAE,QAAQ,KAAK;AAEf,UAAA,EAAE,YAAY,MAAM,OAAO,UAAU,GAAG,EAAE,OAAO;AAAA,MACrD,GAAG,KAAK,eAAe,MAAM;AAAA,MAC7B;AAAA,IAAA,CACD;AAEM,WAAA,EAAE,gBAAgB,QAAQ,OAAO;AAAA,EAAA;AAE5C;AAOM,MAAA,8BAA8B,CAClC,gBACwC;AACjC,SAAA,IAAI,sBAAsB,WAAW;AAC9C;;;"}