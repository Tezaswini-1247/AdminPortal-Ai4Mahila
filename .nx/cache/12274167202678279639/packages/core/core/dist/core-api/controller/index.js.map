{"version":3,"file":"index.js","sources":["../../../src/core-api/controller/index.ts"],"sourcesContent":["import { prop } from 'lodash/fp';\r\nimport type Koa from 'koa';\r\nimport { contentTypes as contentTypeUtils } from '@strapi/utils';\r\nimport type { Core, Struct } from '@strapi/types';\r\n\r\nimport { transformResponse } from './transform';\r\nimport { createSingleTypeController } from './single-type';\r\nimport { createCollectionTypeController } from './collection-type';\r\nimport requestCtx from '../../services/request-context';\r\n\r\nconst isSingleType = (\r\n  contentType: Struct.ContentTypeSchema\r\n): contentType is Struct.SingleTypeSchema => contentTypeUtils.isSingleType(contentType);\r\n\r\nconst getAuthFromKoaContext = (ctx: Koa.Context) => prop('state.auth', ctx) ?? {};\r\n\r\nfunction createController<T extends Struct.SingleTypeSchema | Struct.CollectionTypeSchema>(opts: {\r\n  contentType: T;\r\n}): T extends Struct.SingleTypeSchema\r\n  ? Core.CoreAPI.Controller.SingleType\r\n  : Core.CoreAPI.Controller.CollectionType;\r\nfunction createController({\r\n  contentType,\r\n}: {\r\n  contentType: Struct.SingleTypeSchema | Struct.CollectionTypeSchema;\r\n}) {\r\n  // TODO: replace with Base class + SingleType and CollectionType classes\r\n\r\n  const proto: Core.CoreAPI.Controller.Base = {\r\n    transformResponse(data, meta) {\r\n      const ctx = requestCtx.get();\r\n      return transformResponse(data, meta, {\r\n        contentType,\r\n        useJsonAPIFormat: ctx?.headers?.['strapi-response-format'] === 'v4',\r\n      });\r\n    },\r\n\r\n    async sanitizeOutput(data, ctx) {\r\n      const auth = getAuthFromKoaContext(ctx);\r\n\r\n      return strapi.contentAPI.sanitize.output(data, contentType, { auth });\r\n    },\r\n\r\n    async sanitizeInput(data, ctx) {\r\n      const auth = getAuthFromKoaContext(ctx);\r\n\r\n      return strapi.contentAPI.sanitize.input(data, contentType, { auth });\r\n    },\r\n\r\n    async sanitizeQuery(ctx) {\r\n      const auth = getAuthFromKoaContext(ctx);\r\n\r\n      return strapi.contentAPI.sanitize.query(ctx.query, contentType, { auth });\r\n    },\r\n\r\n    async validateQuery(ctx) {\r\n      const auth = getAuthFromKoaContext(ctx);\r\n\r\n      return strapi.contentAPI.validate.query(ctx.query, contentType, { auth });\r\n    },\r\n\r\n    async validateInput(data, ctx) {\r\n      const auth = getAuthFromKoaContext(ctx);\r\n\r\n      return strapi.contentAPI.validate.input(data, contentType, { auth });\r\n    },\r\n  };\r\n\r\n  let ctrl;\r\n\r\n  if (isSingleType(contentType)) {\r\n    ctrl = createSingleTypeController({ contentType });\r\n  } else {\r\n    ctrl = createCollectionTypeController({ contentType });\r\n  }\r\n\r\n  return Object.assign(Object.create(proto), ctrl);\r\n}\r\n\r\nexport { createController };\r\n"],"names":["contentTypeUtils","prop","requestCtx","transformResponse","createSingleTypeController","createCollectionTypeController"],"mappings":";;;;;;;;AAUA,MAAM,eAAe,CACnB,gBAC2CA,yBAAiB,aAAa,WAAW;AAEtF,MAAM,wBAAwB,CAAC,QAAqBC,GAAAA,KAAK,cAAc,GAAG,KAAK,CAAC;AAOhF,SAAS,iBAAiB;AAAA,EACxB;AACF,GAEG;AAGD,QAAM,QAAsC;AAAA,IAC1C,kBAAkB,MAAM,MAAM;AACtB,YAAA,MAAMC,eAAW,IAAI;AACpB,aAAAC,UAAA,kBAAkB,MAAM,MAAM;AAAA,QACnC;AAAA,QACA,kBAAkB,KAAK,UAAU,wBAAwB,MAAM;AAAA,MAAA,CAChE;AAAA,IACH;AAAA,IAEA,MAAM,eAAe,MAAM,KAAK;AACxB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAA,OAAO,WAAW,SAAS,OAAO,MAAM,aAAa,EAAE,MAAM;AAAA,IACtE;AAAA,IAEA,MAAM,cAAc,MAAM,KAAK;AACvB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAA,OAAO,WAAW,SAAS,MAAM,MAAM,aAAa,EAAE,MAAM;AAAA,IACrE;AAAA,IAEA,MAAM,cAAc,KAAK;AACjB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAA,OAAO,WAAW,SAAS,MAAM,IAAI,OAAO,aAAa,EAAE,MAAM;AAAA,IAC1E;AAAA,IAEA,MAAM,cAAc,KAAK;AACjB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAA,OAAO,WAAW,SAAS,MAAM,IAAI,OAAO,aAAa,EAAE,MAAM;AAAA,IAC1E;AAAA,IAEA,MAAM,cAAc,MAAM,KAAK;AACvB,YAAA,OAAO,sBAAsB,GAAG;AAE/B,aAAA,OAAO,WAAW,SAAS,MAAM,MAAM,aAAa,EAAE,MAAM;AAAA,IAAA;AAAA,EAEvE;AAEI,MAAA;AAEA,MAAA,aAAa,WAAW,GAAG;AACtB,WAAAC,WAAAA,2BAA2B,EAAE,aAAa;AAAA,EAAA,OAC5C;AACE,WAAAC,eAAAA,+BAA+B,EAAE,aAAa;AAAA,EAAA;AAGvD,SAAO,OAAO,OAAO,OAAO,OAAO,KAAK,GAAG,IAAI;AACjD;;"}