{"version":3,"file":"hooks.js","sources":["../../src/registries/hooks.ts"],"sourcesContent":["import { pickBy } from 'lodash/fp';\r\nimport { addNamespace, hasNamespace } from './namespace';\r\n\r\ntype Handler = (context: any) => any;\r\n\r\ntype AsyncHook = {\r\n  handlers: Handler[];\r\n  register(handler: Handler): AsyncHook;\r\n  delete(handler: Handler): AsyncHook;\r\n  call(): Promise<void>;\r\n};\r\n\r\ntype SyncHook = {\r\n  get handlers(): Handler[];\r\n  register(handler: Handler): SyncHook;\r\n  delete(handler: Handler): SyncHook;\r\n  call(): void;\r\n};\r\n\r\nexport type Hook = AsyncHook | SyncHook;\r\n\r\ntype HookExtendFn = (hook: Hook) => Hook;\r\n\r\nconst hooksRegistry = () => {\r\n  const hooks: Record<string, Hook> = {};\r\n\r\n  return {\r\n    /**\r\n     * Returns this list of registered hooks uids\r\n     */\r\n    keys() {\r\n      return Object.keys(hooks);\r\n    },\r\n\r\n    /**\r\n     * Returns the instance of a hook.\r\n     */\r\n    get(uid: string) {\r\n      return hooks[uid];\r\n    },\r\n\r\n    /**\r\n     * Returns a map with all the hooks in a namespace\r\n     */\r\n    getAll(namespace: string) {\r\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(hooks);\r\n    },\r\n\r\n    /**\r\n     * Registers a hook\r\n     */\r\n    set(uid: string, hook: Hook) {\r\n      hooks[uid] = hook;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Registers a map of hooks for a specific namespace\r\n     */\r\n    add(namespace: string, hooks: Record<string, Hook>) {\r\n      for (const hookName of Object.keys(hooks)) {\r\n        const hook = hooks[hookName];\r\n        const uid = addNamespace(hookName, namespace);\r\n\r\n        this.set(uid, hook);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Wraps a hook to extend it\r\n     */\r\n    extend(uid: string, extendFn: HookExtendFn) {\r\n      const currentHook = this.get(uid);\r\n\r\n      if (!currentHook) {\r\n        throw new Error(`Hook ${uid} doesn't exist`);\r\n      }\r\n\r\n      const newHook = extendFn(currentHook);\r\n      hooks[uid] = newHook;\r\n\r\n      return this;\r\n    },\r\n  };\r\n};\r\n\r\nexport default hooksRegistry;\r\n"],"names":["namespace","pickBy","hasNamespace","hooks","addNamespace"],"mappings":";;;AAuBA,MAAM,gBAAgB,MAAM;AAC1B,QAAM,QAA8B,CAAC;AAE9B,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AACE,aAAA,OAAO,KAAK,KAAK;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAa;AACf,aAAO,MAAM,GAAG;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA,IAKA,OAAOA,aAAmB;AACjB,aAAAC,GAAA,OAAO,CAAC,GAAG,QAAQC,uBAAa,KAAKF,WAAS,CAAC,EAAE,KAAK;AAAA,IAC/D;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAa,MAAY;AAC3B,YAAM,GAAG,IAAI;AACN,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAIA,aAAmBG,QAA6B;AAClD,iBAAW,YAAY,OAAO,KAAKA,MAAK,GAAG;AACnC,cAAA,OAAOA,OAAM,QAAQ;AACrB,cAAA,MAAMC,UAAAA,aAAa,UAAUJ,WAAS;AAEvC,aAAA,IAAI,KAAK,IAAI;AAAA,MAAA;AAGb,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,OAAO,KAAa,UAAwB;AACpC,YAAA,cAAc,KAAK,IAAI,GAAG;AAEhC,UAAI,CAAC,aAAa;AAChB,cAAM,IAAI,MAAM,QAAQ,GAAG,gBAAgB;AAAA,MAAA;AAGvC,YAAA,UAAU,SAAS,WAAW;AACpC,YAAM,GAAG,IAAI;AAEN,aAAA;AAAA,IAAA;AAAA,EAEX;AACF;;"}