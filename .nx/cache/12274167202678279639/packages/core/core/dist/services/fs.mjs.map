{"version":3,"file":"fs.mjs","sources":["../../src/services/fs.ts"],"sourcesContent":["import path from 'path';\r\nimport fse from 'fs-extra';\r\n\r\nimport type { Core } from '@strapi/types';\r\n\r\ninterface StrapiFS {\r\n  writeAppFile(optPath: string | string[], data: string): Promise<void>;\r\n  writePluginFile(plugin: string, optPath: string | string[], data: string): Promise<void>;\r\n  removeAppFile(optPath: string | string[]): Promise<void>;\r\n  appendFile(optPath: string | string[], data: string): void;\r\n}\r\n\r\n/**\r\n * create strapi fs layer\r\n */\r\nexport default (strapi: Core.Strapi) => {\r\n  function normalizePath(optPath: string | string[]) {\r\n    const filePath = Array.isArray(optPath) ? optPath.join('/') : optPath;\r\n\r\n    const normalizedPath = path.normalize(filePath).replace(/^\\/?(\\.\\/|\\.\\.\\/)+/, '');\r\n\r\n    return path.resolve(strapi.dirs.app.root, normalizedPath);\r\n  }\r\n\r\n  const strapiFS: StrapiFS = {\r\n    /**\r\n     * Writes a file in a strapi app\r\n     * @param {Array|string} optPath - file path\r\n     * @param {string} data - content\r\n     */\r\n    writeAppFile(optPath, data) {\r\n      const writePath = normalizePath(optPath);\r\n      return fse.ensureFile(writePath).then(() => fse.writeFile(writePath, data));\r\n    },\r\n\r\n    /**\r\n     * Writes a file in a plugin extensions folder\r\n     * @param {string} plugin - plugin name\r\n     * @param {Array|string} optPath - path to file\r\n     * @param {string} data - content\r\n     */\r\n    writePluginFile(plugin, optPath, data) {\r\n      const newPath = ['extensions', plugin].concat(optPath).join('/');\r\n      return strapiFS.writeAppFile(newPath, data);\r\n    },\r\n\r\n    /**\r\n     * Removes a file in strapi app\r\n     */\r\n    removeAppFile(optPath) {\r\n      const removePath = normalizePath(optPath);\r\n      return fse.remove(removePath);\r\n    },\r\n\r\n    /**\r\n     * Appends a file in strapi app\r\n     */\r\n    appendFile(optPath, data) {\r\n      const writePath = normalizePath(optPath);\r\n      return fse.appendFileSync(writePath, data);\r\n    },\r\n  };\r\n\r\n  return strapiFS;\r\n};\r\n"],"names":[],"mappings":";;AAeA,MAAe,iBAAA,CAAC,WAAwB;AACtC,WAAS,cAAc,SAA4B;AAC3C,UAAA,WAAW,MAAM,QAAQ,OAAO,IAAI,QAAQ,KAAK,GAAG,IAAI;AAE9D,UAAM,iBAAiB,KAAK,UAAU,QAAQ,EAAE,QAAQ,sBAAsB,EAAE;AAEhF,WAAO,KAAK,QAAQ,OAAO,KAAK,IAAI,MAAM,cAAc;AAAA,EAAA;AAG1D,QAAM,WAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMzB,aAAa,SAAS,MAAM;AACpB,YAAA,YAAY,cAAc,OAAO;AAChC,aAAA,IAAI,WAAW,SAAS,EAAE,KAAK,MAAM,IAAI,UAAU,WAAW,IAAI,CAAC;AAAA,IAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,gBAAgB,QAAQ,SAAS,MAAM;AAC/B,YAAA,UAAU,CAAC,cAAc,MAAM,EAAE,OAAO,OAAO,EAAE,KAAK,GAAG;AACxD,aAAA,SAAS,aAAa,SAAS,IAAI;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc,SAAS;AACf,YAAA,aAAa,cAAc,OAAO;AACjC,aAAA,IAAI,OAAO,UAAU;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA,IAKA,WAAW,SAAS,MAAM;AAClB,YAAA,YAAY,cAAc,OAAO;AAChC,aAAA,IAAI,eAAe,WAAW,IAAI;AAAA,IAAA;AAAA,EAE7C;AAEO,SAAA;AACT;"}