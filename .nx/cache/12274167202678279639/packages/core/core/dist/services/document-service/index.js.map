{"version":3,"file":"index.js","sources":["../../../src/services/document-service/index.ts"],"sourcesContent":["import type { Core, Modules, UID } from '@strapi/types';\r\n\r\nimport { createMiddlewareManager, databaseErrorsMiddleware } from './middlewares';\r\nimport { createContentTypeRepository } from './repository';\r\nimport { transformData } from './transform/data';\r\n\r\nimport entityValidator from '../entity-validator';\r\n\r\n/**\r\n * Repository to :\r\n * - Access documents via actions (findMany, findOne, create, update, delete, ...)\r\n * - Execute middlewares on document actions\r\n * - Apply default parameters to document actions\r\n *\r\n * @param strapi\r\n * @param validator - validator for database entries\r\n * @returns DocumentService\r\n *\r\n * @example Access documents\r\n * const article = strapi.documents('api::article.article').create(params)\r\n * const allArticles = strapi.documents('api::article.article').findMany(params)\r\n *\r\n */\r\nexport const createDocumentService = (\r\n  strapi: Core.Strapi,\r\n  validator: Modules.EntityValidator.EntityValidator = entityValidator\r\n): Modules.Documents.Service => {\r\n  // Cache the repositories (one per content type)\r\n  const repositories = new Map<string, Modules.Documents.ServiceInstance>();\r\n\r\n  // Manager to handle document service middlewares\r\n  const middlewares = createMiddlewareManager();\r\n  middlewares.use(databaseErrorsMiddleware);\r\n\r\n  const factory = function factory(uid: UID.ContentType) {\r\n    if (repositories.has(uid)) {\r\n      return repositories.get(uid)!;\r\n    }\r\n\r\n    const contentType = strapi.contentType(uid);\r\n    const repository = createContentTypeRepository(uid, validator);\r\n\r\n    const instance = middlewares.wrapObject(\r\n      repository,\r\n      { uid, contentType },\r\n      {\r\n        exclude: ['updateComponents', 'omitComponentData'],\r\n      }\r\n    );\r\n\r\n    repositories.set(uid, instance);\r\n\r\n    return instance;\r\n  } as Modules.Documents.Service;\r\n\r\n  return Object.assign(factory, {\r\n    utils: {\r\n      transformData,\r\n    },\r\n    use: middlewares.use.bind(middlewares),\r\n  });\r\n};\r\n"],"names":["entityValidator","createMiddlewareManager","databaseErrorsMiddleware","factory","repository","createContentTypeRepository","transformData"],"mappings":";;;;;;;AAuBO,MAAM,wBAAwB,CACnC,QACA,YAAqDA,UACvB;AAExB,QAAA,mCAAmB,IAA+C;AAGxE,QAAM,cAAcC,kBAAAA,wBAAwB;AAC5C,cAAY,IAAIC,+BAAwB;AAElC,QAAA,UAAU,SAASC,SAAQ,KAAsB;AACjD,QAAA,aAAa,IAAI,GAAG,GAAG;AAClB,aAAA,aAAa,IAAI,GAAG;AAAA,IAAA;AAGvB,UAAA,cAAc,OAAO,YAAY,GAAG;AACpC,UAAAC,eAAaC,WAAAA,4BAA4B,KAAK,SAAS;AAE7D,UAAM,WAAW,YAAY;AAAA,MAC3BD;AAAAA,MACA,EAAE,KAAK,YAAY;AAAA,MACnB;AAAA,QACE,SAAS,CAAC,oBAAoB,mBAAmB;AAAA,MAAA;AAAA,IAErD;AAEa,iBAAA,IAAI,KAAK,QAAQ;AAEvB,WAAA;AAAA,EACT;AAEO,SAAA,OAAO,OAAO,SAAS;AAAA,IAC5B,OAAO;AAAA,MACLE,eAAAA,KAAAA;AAAAA,IACF;AAAA,IACA,KAAK,YAAY,IAAI,KAAK,WAAW;AAAA,EAAA,CACtC;AACH;;"}