{"version":3,"file":"populate.js","sources":["../../../../src/services/document-service/utils/populate.ts"],"sourcesContent":["import { UID } from '@strapi/types';\r\nimport { contentTypes } from '@strapi/utils';\r\n\r\ninterface Options {\r\n  /**\r\n   * Fields to select when populating relations\r\n   */\r\n  relationalFields?: string[];\r\n}\r\n\r\nconst { CREATED_BY_ATTRIBUTE, UPDATED_BY_ATTRIBUTE } = contentTypes.constants;\r\n\r\n// We want to build a populate object based on the schema\r\nexport const getDeepPopulate = (uid: UID.Schema, opts: Options = {}) => {\r\n  const model = strapi.getModel(uid);\r\n  const attributes = Object.entries(model.attributes);\r\n\r\n  return attributes.reduce((acc: any, [attributeName, attribute]) => {\r\n    switch (attribute.type) {\r\n      case 'relation': {\r\n        // TODO: Support polymorphic relations\r\n        const isMorphRelation = attribute.relation.toLowerCase().startsWith('morph');\r\n        if (isMorphRelation) {\r\n          break;\r\n        }\r\n\r\n        // Ignore not visible fields other than createdBy and updatedBy\r\n        const isVisible = contentTypes.isVisibleAttribute(model, attributeName);\r\n        const isCreatorField = [CREATED_BY_ATTRIBUTE, UPDATED_BY_ATTRIBUTE].includes(attributeName);\r\n\r\n        if (isVisible || isCreatorField) {\r\n          acc[attributeName] = { select: opts.relationalFields };\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case 'media': {\r\n        // We populate all media fields for completeness of webhook responses\r\n        // see https://github.com/strapi/strapi/issues/21546\r\n        acc[attributeName] = { select: ['*'] };\r\n        break;\r\n      }\r\n\r\n      case 'component': {\r\n        const populate = getDeepPopulate(attribute.component, opts);\r\n        acc[attributeName] = { populate };\r\n        break;\r\n      }\r\n\r\n      case 'dynamiczone': {\r\n        // Use fragments to populate the dynamic zone components\r\n        const populatedComponents = (attribute.components || []).reduce(\r\n          (acc: any, componentUID: UID.Component) => {\r\n            acc[componentUID] = { populate: getDeepPopulate(componentUID, opts) };\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n\r\n        acc[attributeName] = { on: populatedComponents };\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["contentTypes","acc"],"mappings":";;;AAUA,MAAM,EAAE,sBAAsB,yBAAyBA,YAAAA,aAAa;AAG7D,MAAM,kBAAkB,CAAC,KAAiB,OAAgB,OAAO;AAChE,QAAA,QAAQ,OAAO,SAAS,GAAG;AACjC,QAAM,aAAa,OAAO,QAAQ,MAAM,UAAU;AAElD,SAAO,WAAW,OAAO,CAAC,KAAU,CAAC,eAAe,SAAS,MAAM;AACjE,YAAQ,UAAU,MAAM;AAAA,MACtB,KAAK,YAAY;AAEf,cAAM,kBAAkB,UAAU,SAAS,YAAY,EAAE,WAAW,OAAO;AAC3E,YAAI,iBAAiB;AACnB;AAAA,QAAA;AAIF,cAAM,YAAYA,YAAA,aAAa,mBAAmB,OAAO,aAAa;AACtE,cAAM,iBAAiB,CAAC,sBAAsB,oBAAoB,EAAE,SAAS,aAAa;AAE1F,YAAI,aAAa,gBAAgB;AAC/B,cAAI,aAAa,IAAI,EAAE,QAAQ,KAAK,iBAAiB;AAAA,QAAA;AAGvD;AAAA,MAAA;AAAA,MAGF,KAAK,SAAS;AAGZ,YAAI,aAAa,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE;AACrC;AAAA,MAAA;AAAA,MAGF,KAAK,aAAa;AAChB,cAAM,WAAW,gBAAgB,UAAU,WAAW,IAAI;AACtD,YAAA,aAAa,IAAI,EAAE,SAAS;AAChC;AAAA,MAAA;AAAA,MAGF,KAAK,eAAe;AAElB,cAAM,uBAAuB,UAAU,cAAc,CAAI,GAAA;AAAA,UACvD,CAACC,MAAU,iBAAgC;AACzCA,iBAAI,YAAY,IAAI,EAAE,UAAU,gBAAgB,cAAc,IAAI,EAAE;AAC7DA,mBAAAA;AAAAA,UACT;AAAA,UACA,CAAA;AAAA,QACF;AAEA,YAAI,aAAa,IAAI,EAAE,IAAI,oBAAoB;AAC/C;AAAA,MAAA;AAAA,IAGA;AAGG,WAAA;AAAA,EACT,GAAG,EAAE;AACP;;"}