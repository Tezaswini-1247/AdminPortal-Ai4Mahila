{"version":3,"file":"data-ids.mjs","sources":["../../../../../../src/services/document-service/transform/relations/extract/data-ids.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\r\n\r\nimport { UID } from '@strapi/types';\r\nimport { relations } from '@strapi/utils';\r\nimport { IdMap } from '../../id-map';\r\nimport { getRelationTargetLocale } from '../utils/i18n';\r\nimport { getRelationTargetStatus } from '../utils/dp';\r\nimport { mapRelation, traverseEntityRelations } from '../utils/map-relation';\r\nimport { LongHandDocument } from '../utils/types';\r\n\r\nconst { isPolymorphic } = relations;\r\n\r\ninterface Options {\r\n  uid: UID.Schema;\r\n  locale?: string | null;\r\n  status?: 'draft' | 'published';\r\n}\r\n\r\n/**\r\n * Load a relation documentId into the idMap.\r\n */\r\nconst addRelationDocId = curry(\r\n  (idMap: IdMap, source: Options, targetUid: UID.Schema, relation: LongHandDocument) => {\r\n    const targetLocale = getRelationTargetLocale(relation, {\r\n      targetUid,\r\n      sourceUid: source.uid,\r\n      sourceLocale: source.locale,\r\n    });\r\n\r\n    const targetStatus = getRelationTargetStatus(relation, {\r\n      targetUid,\r\n      sourceUid: source.uid,\r\n      sourceStatus: source.status,\r\n    });\r\n\r\n    targetStatus.forEach((status) => {\r\n      idMap.add({\r\n        uid: targetUid,\r\n        documentId: relation.documentId,\r\n        locale: targetLocale,\r\n        status,\r\n      });\r\n    });\r\n  }\r\n);\r\n\r\n/**\r\n * Iterate over all relations of a data object and extract all relational document ids.\r\n * Those will later be transformed to entity ids.\r\n */\r\nconst extractDataIds = (idMap: IdMap, data: Record<string, any>, source: Options) => {\r\n  return traverseEntityRelations(\r\n    async ({ attribute, value }) => {\r\n      if (!attribute) {\r\n        return;\r\n      }\r\n      const isPolymorphicRelation = isPolymorphic(attribute);\r\n      const addDocId = addRelationDocId(idMap, source);\r\n\r\n      return mapRelation((relation) => {\r\n        if (!relation || !relation.documentId) {\r\n          return relation;\r\n        }\r\n\r\n        // Regular relations will always target the same target\r\n        // if its a polymorphic relation we need to get it from the data itself\r\n        const targetUid = isPolymorphicRelation ? relation.__type : attribute.target;\r\n\r\n        addDocId(targetUid, relation);\r\n\r\n        // Handle positional arguments\r\n        const position = relation.position;\r\n\r\n        // The positional relation target uid can be different for polymorphic relations\r\n        let positionTargetUid = targetUid;\r\n        if (isPolymorphicRelation && position?.__type) {\r\n          positionTargetUid = position.__type;\r\n        }\r\n\r\n        if (position?.before) {\r\n          addDocId(positionTargetUid, { ...relation, ...position, documentId: position.before });\r\n        }\r\n\r\n        if (position?.after) {\r\n          addDocId(positionTargetUid, { ...relation, ...position, documentId: position.after });\r\n        }\r\n\r\n        return relation;\r\n      }, value as any);\r\n    },\r\n    { schema: strapi.getModel(source.uid), getModel: strapi.getModel.bind(strapi) },\r\n    data\r\n  );\r\n};\r\n\r\nexport { extractDataIds };\r\n"],"names":["traverseEntityRelations","mapRelation"],"mappings":";;;;;AAUA,MAAM,EAAE,cAAkB,IAAA;AAW1B,MAAM,mBAAmB;AAAA,EACvB,CAAC,OAAc,QAAiB,WAAuB,aAA+B;AAC9E,UAAA,eAAe,wBAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAEK,UAAA,eAAe,wBAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAEY,iBAAA,QAAQ,CAAC,WAAW;AAC/B,YAAM,IAAI;AAAA,QACR,KAAK;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MAAA,CACD;AAAA,IAAA,CACF;AAAA,EAAA;AAEL;AAMA,MAAM,iBAAiB,CAAC,OAAc,MAA2B,WAAoB;AAC5E,SAAAA;AAAAA,IACL,OAAO,EAAE,WAAW,YAAY;AAC9B,UAAI,CAAC,WAAW;AACd;AAAA,MAAA;AAEI,YAAA,wBAAwB,cAAc,SAAS;AAC/C,YAAA,WAAW,iBAAiB,OAAO,MAAM;AAExC,aAAAC,mBAAY,CAAC,aAAa;AAC/B,YAAI,CAAC,YAAY,CAAC,SAAS,YAAY;AAC9B,iBAAA;AAAA,QAAA;AAKT,cAAM,YAAY,wBAAwB,SAAS,SAAS,UAAU;AAEtE,iBAAS,WAAW,QAAQ;AAG5B,cAAM,WAAW,SAAS;AAG1B,YAAI,oBAAoB;AACpB,YAAA,yBAAyB,UAAU,QAAQ;AAC7C,8BAAoB,SAAS;AAAA,QAAA;AAG/B,YAAI,UAAU,QAAQ;AACX,mBAAA,mBAAmB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,QAAQ;AAAA,QAAA;AAGvF,YAAI,UAAU,OAAO;AACV,mBAAA,mBAAmB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,OAAO;AAAA,QAAA;AAG/E,eAAA;AAAA,SACN,KAAY;AAAA,IACjB;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,OAAO,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IAC9E;AAAA,EACF;AACF;"}