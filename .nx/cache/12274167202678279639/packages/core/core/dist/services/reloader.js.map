{"version":3,"file":"reloader.js","sources":["../../src/services/reloader.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\r\n\r\nexport const createReloader = (strapi: Core.Strapi) => {\r\n  const state = {\r\n    shouldReload: 0,\r\n    isWatching: true,\r\n  };\r\n\r\n  function reload() {\r\n    if (state.shouldReload > 0) {\r\n      // Reset the reloading state\r\n      state.shouldReload -= 1;\r\n      reload.isReloading = false;\r\n      return;\r\n    }\r\n\r\n    if (strapi.config.get('autoReload')) {\r\n      process.send?.('reload');\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(reload, 'isWatching', {\r\n    configurable: true,\r\n    enumerable: true,\r\n    set(value) {\r\n      // Special state when the reloader is disabled temporarly (see GraphQL plugin example).\r\n      if (state.isWatching === false && value === true) {\r\n        state.shouldReload += 1;\r\n      }\r\n      state.isWatching = value;\r\n    },\r\n    get() {\r\n      return state.isWatching;\r\n    },\r\n  });\r\n\r\n  reload.isReloading = false;\r\n  reload.isWatching = true;\r\n\r\n  return reload;\r\n};\r\n"],"names":[],"mappings":";;AAEa,MAAA,iBAAiB,CAAC,WAAwB;AACrD,QAAM,QAAQ;AAAA,IACZ,cAAc;AAAA,IACd,YAAY;AAAA,EACd;AAEA,WAAS,SAAS;AACZ,QAAA,MAAM,eAAe,GAAG;AAE1B,YAAM,gBAAgB;AACtB,aAAO,cAAc;AACrB;AAAA,IAAA;AAGF,QAAI,OAAO,OAAO,IAAI,YAAY,GAAG;AACnC,cAAQ,OAAO,QAAQ;AAAA,IAAA;AAAA,EACzB;AAGK,SAAA,eAAe,QAAQ,cAAc;AAAA,IAC1C,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,IAAI,OAAO;AAET,UAAI,MAAM,eAAe,SAAS,UAAU,MAAM;AAChD,cAAM,gBAAgB;AAAA,MAAA;AAExB,YAAM,aAAa;AAAA,IACrB;AAAA,IACA,MAAM;AACJ,aAAO,MAAM;AAAA,IAAA;AAAA,EACf,CACD;AAED,SAAO,cAAc;AACrB,SAAO,aAAa;AAEb,SAAA;AACT;;"}