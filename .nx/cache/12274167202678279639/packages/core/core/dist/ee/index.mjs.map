{"version":3,"file":"index.mjs","sources":["../../src/ee/index.ts"],"sourcesContent":["import { pick, isEqual } from 'lodash/fp';\r\nimport type { Logger } from '@strapi/logger';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport { readLicense, verifyLicense, fetchLicense, LicenseCheckError } from './license';\r\nimport { shiftCronExpression } from '../utils/cron';\r\n\r\nconst ONE_MINUTE = 1000 * 60;\r\n\r\ninterface EE {\r\n  enabled: boolean;\r\n  licenseInfo: {\r\n    licenseKey?: string;\r\n    features?: Array<{ name: string; [key: string]: any } | string>;\r\n    expireAt?: string;\r\n    seats?: number;\r\n    type?: string;\r\n  };\r\n  logger?: Logger;\r\n}\r\n\r\nconst ee: EE = {\r\n  enabled: false,\r\n  licenseInfo: {},\r\n};\r\n\r\nconst disable = (message: string) => {\r\n  // Prevent emitting ee.disable if it was already disabled\r\n  const shouldEmitEvent = ee.enabled !== false;\r\n\r\n  ee.logger?.warn(`${message} Switching to CE.`);\r\n  // Only keep the license key for potential re-enabling during a later check\r\n  ee.licenseInfo = pick('licenseKey', ee.licenseInfo);\r\n\r\n  ee.enabled = false;\r\n\r\n  if (shouldEmitEvent) {\r\n    // Notify EE features that they should be disabled\r\n    strapi.eventHub.emit('ee.disable');\r\n  }\r\n};\r\n\r\nconst enable = () => {\r\n  // Prevent emitting ee.enable if it was already enabled\r\n  const shouldEmitEvent = ee.enabled !== true;\r\n\r\n  ee.enabled = true;\r\n\r\n  if (shouldEmitEvent) {\r\n    // Notify EE features that they should be disabled\r\n    strapi.eventHub.emit('ee.enable');\r\n  }\r\n};\r\n\r\nlet initialized = false;\r\n\r\n/**\r\n * Optimistically enable EE if the format of the license is valid, only run once.\r\n */\r\nconst init = (licenseDir: string, logger?: Logger) => {\r\n  if (initialized) {\r\n    return;\r\n  }\r\n\r\n  initialized = true;\r\n  ee.logger = logger;\r\n\r\n  if (process.env.STRAPI_DISABLE_EE?.toLowerCase() === 'true') {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const license = process.env.STRAPI_LICENSE || readLicense(licenseDir);\r\n\r\n    if (license) {\r\n      ee.licenseInfo = verifyLicense(license);\r\n      enable();\r\n    }\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      disable(error.message);\r\n    } else {\r\n      disable('Invalid license.');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Contact the license registry to update the license to its latest state.\r\n *\r\n * Store the result in database to avoid unecessary requests, and will fallback to that in case of a network failure.\r\n */\r\nconst onlineUpdate = async ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const { get, commit, rollback } = (await strapi.db?.transaction()) as any;\r\n  const transaction = get();\r\n\r\n  try {\r\n    const storedInfo = await strapi.db\r\n      ?.queryBuilder('strapi::core-store')\r\n      .where({ key: 'ee_information' })\r\n      .select('value')\r\n      .first()\r\n      .transacting(transaction)\r\n      .forUpdate()\r\n      .execute()\r\n      .then((result: any) => (result ? JSON.parse(result.value) : result));\r\n\r\n    const shouldContactRegistry = (storedInfo?.lastCheckAt ?? 0) < Date.now() - ONE_MINUTE;\r\n    const result: {\r\n      license?: string | null;\r\n      error?: string;\r\n      lastCheckAt?: number;\r\n    } = { lastCheckAt: Date.now() };\r\n\r\n    const fallback = (error: Error) => {\r\n      if (error instanceof LicenseCheckError && error.shouldFallback && storedInfo?.license) {\r\n        ee.logger?.warn(\r\n          `${error.message} The last stored one will be used as a potential fallback.`\r\n        );\r\n        return storedInfo.license;\r\n      }\r\n\r\n      result.error = error.message;\r\n      disable(error.message);\r\n    };\r\n\r\n    if (!ee?.licenseInfo?.licenseKey) {\r\n      throw new Error('Missing license key.');\r\n    }\r\n\r\n    const license = shouldContactRegistry\r\n      ? await fetchLicense({ strapi }, ee.licenseInfo.licenseKey, strapi.config.get('uuid')).catch(\r\n          fallback\r\n        )\r\n      : storedInfo.license;\r\n\r\n    if (license) {\r\n      try {\r\n        // Verify license and check if its info changed\r\n        const newLicenseInfo = verifyLicense(license);\r\n        const licenseInfoChanged =\r\n          !isEqual(newLicenseInfo.features, ee.licenseInfo.features) ||\r\n          newLicenseInfo.seats !== ee.licenseInfo.seats ||\r\n          newLicenseInfo.type !== ee.licenseInfo.type;\r\n\r\n        // Store the new license info\r\n        ee.licenseInfo = newLicenseInfo;\r\n        const wasEnabled = ee.enabled;\r\n        validateInfo();\r\n\r\n        // Notify EE features\r\n        if (licenseInfoChanged && wasEnabled) {\r\n          strapi.eventHub.emit('ee.update');\r\n        }\r\n      } catch (error) {\r\n        if (error instanceof Error) {\r\n          disable(error.message);\r\n        } else {\r\n          disable('Invalid license.');\r\n        }\r\n      }\r\n    } else if (!shouldContactRegistry) {\r\n      disable(storedInfo.error);\r\n    }\r\n\r\n    if (shouldContactRegistry) {\r\n      result.license = license ?? null;\r\n      const query = strapi.db.queryBuilder('strapi::core-store').transacting(transaction);\r\n\r\n      if (!storedInfo) {\r\n        query.insert({ key: 'ee_information', value: JSON.stringify(result) });\r\n      } else {\r\n        query.update({ value: JSON.stringify(result) }).where({ key: 'ee_information' });\r\n      }\r\n\r\n      await query.execute();\r\n    }\r\n\r\n    await commit();\r\n  } catch (error) {\r\n    // Example of errors: SQLite does not support FOR UPDATE\r\n    await rollback();\r\n  }\r\n};\r\n\r\nconst validateInfo = () => {\r\n  if (typeof ee.licenseInfo.expireAt === 'undefined') {\r\n    throw new Error('Missing license key.');\r\n  }\r\n\r\n  const expirationTime = new Date(ee.licenseInfo.expireAt).getTime();\r\n\r\n  if (expirationTime < new Date().getTime()) {\r\n    return disable('License expired.');\r\n  }\r\n\r\n  enable();\r\n};\r\n\r\nconst checkLicense = async ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const shouldStayOffline =\r\n    ee.licenseInfo.type === 'gold' &&\r\n    // This env variable support is temporarily used to ease the migration between online vs offline\r\n    process.env.STRAPI_DISABLE_LICENSE_PING?.toLowerCase() === 'true';\r\n\r\n  if (!shouldStayOffline) {\r\n    await onlineUpdate({ strapi });\r\n\r\n    strapi.cron.add({\r\n      onlineUpdate: {\r\n        task: () => onlineUpdate({ strapi }),\r\n        options: shiftCronExpression('0 0 */12 * * *'),\r\n      },\r\n    });\r\n  } else {\r\n    if (!ee.licenseInfo.expireAt) {\r\n      return disable('Your license does not have offline support.');\r\n    }\r\n\r\n    validateInfo();\r\n  }\r\n};\r\n\r\nconst list = () => {\r\n  return (\r\n    ee.licenseInfo.features?.map((feature) =>\r\n      typeof feature === 'object' ? feature : { name: feature }\r\n    ) || []\r\n  );\r\n};\r\n\r\nconst get = (featureName: string) => list().find((feature) => feature.name === featureName);\r\n\r\nexport default Object.freeze({\r\n  init,\r\n  checkLicense,\r\n\r\n  get isEE() {\r\n    return ee.enabled;\r\n  },\r\n\r\n  get seats() {\r\n    return ee.licenseInfo.seats;\r\n  },\r\n\r\n  features: Object.freeze({\r\n    list,\r\n    get,\r\n    isEnabled: (featureName: string) => get(featureName) !== undefined,\r\n  }),\r\n});\r\n"],"names":["strapi","get","result"],"mappings":"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"}