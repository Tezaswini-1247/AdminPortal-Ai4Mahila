{"version":3,"file":"index.js","sources":["../../../src/loaders/plugins/index.ts"],"sourcesContent":["import { join } from 'path';\r\nimport fse from 'fs-extra';\r\nimport { defaultsDeep, defaults, getOr, get } from 'lodash/fp';\r\nimport * as resolve from 'resolve.exports';\r\n\r\nimport { env } from '@strapi/utils';\r\nimport type { Core, Plugin, Struct } from '@strapi/types';\r\nimport { loadConfigFile } from '../../utils/load-config-file';\r\nimport { loadFiles } from '../../utils/load-files';\r\nimport { getEnabledPlugins } from './get-enabled-plugins';\r\nimport { getUserPluginsConfig } from './get-user-plugins-config';\r\nimport { getGlobalId } from '../../domain/content-type';\r\n\r\ninterface Plugins {\r\n  [key: string]: Plugin.LoadedPlugin;\r\n}\r\n\r\nconst defaultPlugin = {\r\n  bootstrap() {},\r\n  destroy() {},\r\n  register() {},\r\n  config: {\r\n    default: {},\r\n    validator() {},\r\n  },\r\n  routes: [],\r\n  controllers: {},\r\n  services: {},\r\n  policies: {},\r\n  middlewares: {},\r\n  contentTypes: {},\r\n};\r\n\r\nconst applyUserExtension = async (plugins: Plugins) => {\r\n  const extensionsDir = strapi.dirs.dist.extensions;\r\n  if (!(await fse.pathExists(extensionsDir))) {\r\n    return;\r\n  }\r\n\r\n  const extendedSchemas = await loadFiles(extensionsDir, '**/content-types/**/schema.json');\r\n  const strapiServers = await loadFiles(extensionsDir, '**/strapi-server.js');\r\n\r\n  for (const pluginName of Object.keys(plugins)) {\r\n    const plugin = plugins[pluginName];\r\n    // first: load json schema\r\n    for (const ctName of Object.keys(plugin.contentTypes)) {\r\n      const extendedSchema = get([pluginName, 'content-types', ctName, 'schema'], extendedSchemas);\r\n      if (extendedSchema) {\r\n        plugin.contentTypes[ctName].schema = {\r\n          ...plugin.contentTypes[ctName].schema,\r\n          ...extendedSchema,\r\n        };\r\n      }\r\n    }\r\n    // second: execute strapi-server extension\r\n    const strapiServer = get([pluginName, 'strapi-server'], strapiServers);\r\n    if (strapiServer) {\r\n      plugins[pluginName] = await strapiServer(plugin);\r\n    }\r\n  }\r\n};\r\n\r\nconst applyUserConfig = async (plugins: Plugins) => {\r\n  const userPluginsConfig = await getUserPluginsConfig();\r\n\r\n  for (const pluginName of Object.keys(plugins)) {\r\n    const plugin = plugins[pluginName];\r\n    const userPluginConfig = getOr({}, `${pluginName}.config`, userPluginsConfig);\r\n    const defaultConfig =\r\n      typeof plugin.config.default === 'function'\r\n        ? plugin.config.default({ env })\r\n        : plugin.config.default;\r\n\r\n    const config = defaultsDeep(defaultConfig, userPluginConfig);\r\n    try {\r\n      plugin.config.validator(config);\r\n    } catch (e) {\r\n      if (e instanceof Error) {\r\n        throw new Error(`Error regarding ${pluginName} config: ${e.message}`);\r\n      }\r\n\r\n      throw e;\r\n    }\r\n    plugin.config = config;\r\n  }\r\n};\r\n\r\nexport default async function loadPlugins(strapi: Core.Strapi) {\r\n  const plugins: Plugins = {};\r\n\r\n  const enabledPlugins = await getEnabledPlugins(strapi);\r\n\r\n  strapi.config.set('enabledPlugins', enabledPlugins);\r\n\r\n  for (const pluginName of Object.keys(enabledPlugins)) {\r\n    const enabledPlugin = enabledPlugins[pluginName];\r\n\r\n    let serverEntrypointPath;\r\n    let resolvedExport = './strapi-server.js';\r\n\r\n    try {\r\n      resolvedExport = (\r\n        resolve.exports(enabledPlugin.packageInfo, 'strapi-server', {\r\n          require: true,\r\n        }) ?? './strapi-server.js'\r\n      ).toString();\r\n    } catch (e) {\r\n      // no export map or missing strapi-server export => fallback to default\r\n    }\r\n\r\n    try {\r\n      serverEntrypointPath = join(enabledPlugin.pathToPlugin, resolvedExport);\r\n    } catch (e) {\r\n      throw new Error(\r\n        `Error loading the plugin ${pluginName} because ${pluginName} is not installed. Please either install the plugin or remove it's configuration.`\r\n      );\r\n    }\r\n\r\n    // only load plugins with a server entrypoint\r\n    if (!(await fse.pathExists(serverEntrypointPath))) {\r\n      continue;\r\n    }\r\n\r\n    const pluginServer = loadConfigFile(serverEntrypointPath);\r\n    plugins[pluginName] = {\r\n      ...defaultPlugin,\r\n      ...pluginServer,\r\n      contentTypes: formatContentTypes(pluginName, pluginServer.contentTypes ?? {}),\r\n      config: defaults(defaultPlugin.config, pluginServer.config),\r\n      routes: pluginServer.routes ?? defaultPlugin.routes,\r\n    };\r\n  }\r\n\r\n  // TODO: validate plugin format\r\n  await applyUserConfig(plugins);\r\n  await applyUserExtension(plugins);\r\n\r\n  for (const pluginName of Object.keys(plugins)) {\r\n    strapi.get('plugins').add(pluginName, plugins[pluginName]);\r\n  }\r\n}\r\n\r\nconst formatContentTypes = (\r\n  pluginName: string,\r\n  contentTypes: Record<string, { schema: Struct.ContentTypeSchema }>\r\n) => {\r\n  Object.values(contentTypes).forEach((definition) => {\r\n    const { schema } = definition;\r\n\r\n    Object.assign(schema, {\r\n      plugin: pluginName,\r\n      collectionName:\r\n        schema.collectionName || `${pluginName}_${schema.info.singularName}`.toLowerCase(),\r\n      globalId: getGlobalId(schema, pluginName),\r\n    });\r\n  });\r\n\r\n  return contentTypes;\r\n};\r\n"],"names":["fse","loadFiles","get","getUserPluginsConfig","getOr","env","defaultsDeep","strapi","getEnabledPlugins","resolve","join","loadConfigFile","defaults","getGlobalId"],"mappings":"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"}