{"version":3,"file":"errors.mjs","sources":["../../src/middlewares/errors.ts"],"sourcesContent":["import { errors } from '@strapi/utils';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport { formatApplicationError, formatHttpError, formatInternalError } from '../services/errors';\r\n\r\nconst errorMiddleware: Core.MiddlewareFactory = (/* _, { strapi } */) => {\r\n  return async (ctx, next) => {\r\n    try {\r\n      await next();\r\n\r\n      if (!ctx.response._explicitStatus) {\r\n        return ctx.notFound();\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof errors.ApplicationError) {\r\n        const { status, body } = formatApplicationError(error);\r\n        ctx.status = status;\r\n        ctx.body = body;\r\n        return;\r\n      }\r\n\r\n      if (error instanceof errors.HttpError) {\r\n        const { status, body } = formatHttpError(error);\r\n        ctx.status = status;\r\n        ctx.body = body;\r\n        return;\r\n      }\r\n\r\n      strapi.log.error(error);\r\n\r\n      const { status, body } = formatInternalError(error);\r\n      ctx.status = status;\r\n      ctx.body = body;\r\n    }\r\n  };\r\n};\r\n\r\nexport { errorMiddleware as errors };\r\n"],"names":["status","body"],"mappings":";;AAKA,MAAM,kBAA0C,MAAyB;AAChE,SAAA,OAAO,KAAK,SAAS;AACtB,QAAA;AACF,YAAM,KAAK;AAEP,UAAA,CAAC,IAAI,SAAS,iBAAiB;AACjC,eAAO,IAAI,SAAS;AAAA,MAAA;AAAA,aAEf,OAAO;AACV,UAAA,iBAAiB,OAAO,kBAAkB;AAC5C,cAAM,EAAE,QAAAA,SAAQ,MAAAC,MAAK,IAAI,uBAAuB,KAAK;AACrD,YAAI,SAASD;AACb,YAAI,OAAOC;AACX;AAAA,MAAA;AAGE,UAAA,iBAAiB,OAAO,WAAW;AACrC,cAAM,EAAE,QAAAD,SAAQ,MAAAC,MAAK,IAAI,gBAAgB,KAAK;AAC9C,YAAI,SAASD;AACb,YAAI,OAAOC;AACX;AAAA,MAAA;AAGK,aAAA,IAAI,MAAM,KAAK;AAEtB,YAAM,EAAE,QAAQ,SAAS,oBAAoB,KAAK;AAClD,UAAI,SAAS;AACb,UAAI,OAAO;AAAA,IAAA;AAAA,EAEf;AACF;"}