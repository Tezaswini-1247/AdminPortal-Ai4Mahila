{"version":3,"file":"security.mjs","sources":["../../src/middlewares/security.ts"],"sourcesContent":["import { defaultsDeep, mergeWith } from 'lodash/fp';\r\nimport helmet, { KoaHelmet } from 'koa-helmet';\r\n\r\nimport type { Core } from '@strapi/types';\r\n\r\nexport type Config = NonNullable<Parameters<KoaHelmet>[0]>;\r\n\r\nconst defaults: Config = {\r\n  crossOriginEmbedderPolicy: false,\r\n  crossOriginOpenerPolicy: false,\r\n  crossOriginResourcePolicy: false,\r\n  originAgentCluster: false,\r\n  contentSecurityPolicy: {\r\n    useDefaults: true,\r\n    directives: {\r\n      'connect-src': [\"'self'\", 'https:'],\r\n      'img-src': [\"'self'\", 'data:', 'blob:', 'https://market-assets.strapi.io'],\r\n      'media-src': [\"'self'\", 'data:', 'blob:'],\r\n      upgradeInsecureRequests: null,\r\n    },\r\n  },\r\n  xssFilter: false,\r\n  hsts: {\r\n    maxAge: 31536000,\r\n    includeSubDomains: true,\r\n  },\r\n  frameguard: {\r\n    action: 'sameorigin',\r\n  },\r\n};\r\n\r\nconst mergeConfig = (existingConfig: Config, newConfig: Config) => {\r\n  return mergeWith(\r\n    (obj, src) => (Array.isArray(obj) && Array.isArray(src) ? obj.concat(src) : undefined),\r\n    existingConfig,\r\n    newConfig\r\n  );\r\n};\r\n\r\nexport const security: Core.MiddlewareFactory<Config> =\r\n  (config, { strapi }) =>\r\n  (ctx, next) => {\r\n    let helmetConfig: Config = defaultsDeep(defaults, config);\r\n\r\n    const specialPaths = ['/documentation'];\r\n\r\n    const directives: {\r\n      'script-src': string[];\r\n      'img-src': string[];\r\n      'manifest-src': string[];\r\n      'frame-src': string[];\r\n    } = {\r\n      'script-src': [\"'self'\", \"'unsafe-inline'\", 'cdn.jsdelivr.net'],\r\n      'img-src': [\"'self'\", 'data:', 'cdn.jsdelivr.net', 'strapi.io'],\r\n      'manifest-src': [],\r\n      'frame-src': [],\r\n    };\r\n\r\n    // if apollo graphql playground is enabled, add exceptions for it\r\n    if (strapi.plugin('graphql')?.service('utils').playground.isEnabled()) {\r\n      const { config: gqlConfig } = strapi.plugin('graphql');\r\n      specialPaths.push(gqlConfig('endpoint'));\r\n\r\n      directives['script-src'].push(`https: 'unsafe-inline'`);\r\n      directives['img-src'].push(`'apollo-server-landing-page.cdn.apollographql.com'`);\r\n      directives['manifest-src'].push(`'self'`);\r\n      directives['manifest-src'].push('apollo-server-landing-page.cdn.apollographql.com');\r\n      directives['frame-src'].push(`'self'`);\r\n      directives['frame-src'].push('sandbox.embed.apollographql.com');\r\n    }\r\n\r\n    // TODO: we shouldn't combine playground exceptions with documentation for all routes, we should first check the path and then return exceptions specific to that\r\n    if (ctx.method === 'GET' && specialPaths.some((str) => ctx.path.startsWith(str))) {\r\n      helmetConfig = mergeConfig(helmetConfig, {\r\n        crossOriginEmbedderPolicy: false, // TODO: only use this for graphql playground\r\n        contentSecurityPolicy: {\r\n          directives,\r\n        },\r\n      });\r\n    }\r\n\r\n    /**\r\n     * These are for vite's watch mode so it can accurately\r\n     * connect to the HMR websocket & reconnect on failure\r\n     * or when the server restarts.\r\n     *\r\n     * It only applies in development, and only on GET requests\r\n     * that are part of the admin route.\r\n     */\r\n\r\n    if (\r\n      ['development', 'test'].includes(process.env.NODE_ENV ?? '') &&\r\n      ctx.method === 'GET' &&\r\n      ctx.path.startsWith(strapi.config.get('admin.path'))\r\n    ) {\r\n      helmetConfig = mergeConfig(helmetConfig, {\r\n        contentSecurityPolicy: {\r\n          directives: {\r\n            'script-src': [\"'self'\", \"'unsafe-inline'\"],\r\n            'connect-src': [\"'self'\", 'http:', 'https:', 'ws:'],\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n    return helmet(helmetConfig)(ctx, next);\r\n  };\r\n"],"names":[],"mappings":";;AAOA,MAAM,WAAmB;AAAA,EACvB,2BAA2B;AAAA,EAC3B,yBAAyB;AAAA,EACzB,2BAA2B;AAAA,EAC3B,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,IACrB,aAAa;AAAA,IACb,YAAY;AAAA,MACV,eAAe,CAAC,UAAU,QAAQ;AAAA,MAClC,WAAW,CAAC,UAAU,SAAS,SAAS,iCAAiC;AAAA,MACzE,aAAa,CAAC,UAAU,SAAS,OAAO;AAAA,MACxC,yBAAyB;AAAA,IAAA;AAAA,EAE7B;AAAA,EACA,WAAW;AAAA,EACX,MAAM;AAAA,IACJ,QAAQ;AAAA,IACR,mBAAmB;AAAA,EACrB;AAAA,EACA,YAAY;AAAA,IACV,QAAQ;AAAA,EAAA;AAEZ;AAEA,MAAM,cAAc,CAAC,gBAAwB,cAAsB;AAC1D,SAAA;AAAA,IACL,CAAC,KAAK,QAAS,MAAM,QAAQ,GAAG,KAAK,MAAM,QAAQ,GAAG,IAAI,IAAI,OAAO,GAAG,IAAI;AAAA,IAC5E;AAAA,IACA;AAAA,EACF;AACF;AAEa,MAAA,WACX,CAAC,QAAQ,EAAE,aACX,CAAC,KAAK,SAAS;AACT,MAAA,eAAuB,aAAa,UAAU,MAAM;AAElD,QAAA,eAAe,CAAC,gBAAgB;AAEtC,QAAM,aAKF;AAAA,IACF,cAAc,CAAC,UAAU,mBAAmB,kBAAkB;AAAA,IAC9D,WAAW,CAAC,UAAU,SAAS,oBAAoB,WAAW;AAAA,IAC9D,gBAAgB,CAAC;AAAA,IACjB,aAAa,CAAA;AAAA,EACf;AAGI,MAAA,OAAO,OAAO,SAAS,GAAG,QAAQ,OAAO,EAAE,WAAW,aAAa;AACrE,UAAM,EAAE,QAAQ,UAAA,IAAc,OAAO,OAAO,SAAS;AACxC,iBAAA,KAAK,UAAU,UAAU,CAAC;AAE5B,eAAA,YAAY,EAAE,KAAK,wBAAwB;AAC3C,eAAA,SAAS,EAAE,KAAK,oDAAoD;AACpE,eAAA,cAAc,EAAE,KAAK,QAAQ;AAC7B,eAAA,cAAc,EAAE,KAAK,kDAAkD;AACvE,eAAA,WAAW,EAAE,KAAK,QAAQ;AAC1B,eAAA,WAAW,EAAE,KAAK,iCAAiC;AAAA,EAAA;AAIhE,MAAI,IAAI,WAAW,SAAS,aAAa,KAAK,CAAC,QAAQ,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG;AAChF,mBAAe,YAAY,cAAc;AAAA,MACvC,2BAA2B;AAAA;AAAA,MAC3B,uBAAuB;AAAA,QACrB;AAAA,MAAA;AAAA,IACF,CACD;AAAA,EAAA;AAaD,MAAA,CAAC,eAAe,MAAM,EAAE,SAAS,QAAQ,IAAI,YAAY,EAAE,KAC3D,IAAI,WAAW,SACf,IAAI,KAAK,WAAW,OAAO,OAAO,IAAI,YAAY,CAAC,GACnD;AACA,mBAAe,YAAY,cAAc;AAAA,MACvC,uBAAuB;AAAA,QACrB,YAAY;AAAA,UACV,cAAc,CAAC,UAAU,iBAAiB;AAAA,UAC1C,eAAe,CAAC,UAAU,SAAS,UAAU,KAAK;AAAA,QAAA;AAAA,MACpD;AAAA,IACF,CACD;AAAA,EAAA;AAGH,SAAO,OAAO,YAAY,EAAE,KAAK,IAAI;AACvC;"}