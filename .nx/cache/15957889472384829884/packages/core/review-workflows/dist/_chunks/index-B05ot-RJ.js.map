{"version":3,"file":"index-B05ot-RJ.js","sources":["../../admin/src/routes/settings/index.tsx"],"sourcesContent":["/* eslint-disable check-file/no-index */\r\n/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { Page, useTracking, ConfirmDialog, useRBAC, Table } from '@strapi/admin/strapi-admin';\r\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\r\nimport { Flex, IconButton, TFooter, Typography, LinkButton, Dialog } from '@strapi/design-system';\r\nimport { Pencil, Plus, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, Link, useNavigate } from 'react-router-dom';\r\n\r\nimport { LimitsModal } from '../../components/LimitsModal';\r\nimport { CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME } from '../../constants';\r\nimport { useTypedSelector } from '../../modules/hooks';\r\nimport { ContentType, useGetContentTypesQuery } from '../../services/content-manager';\r\n\r\nimport * as Layout from './components/Layout';\r\nimport { useReviewWorkflows } from './hooks/useReviewWorkflows';\r\n\r\nexport const ReviewWorkflowsListView = () => {\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const [workflowToDelete, setWorkflowToDelete] = React.useState<string | null>(null);\r\n  const [showLimitModal, setShowLimitModal] = React.useState<boolean>(false);\r\n  const { data, isLoading: isLoadingModels } = useGetContentTypesQuery();\r\n  const { meta, workflows, isLoading, delete: deleteAction } = useReviewWorkflows();\r\n  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['review-workflows']\r\n  );\r\n  const {\r\n    allowedActions: { canCreate, canRead, canUpdate, canDelete },\r\n  } = useRBAC(permissions);\r\n\r\n  const limits = getFeature('review-workflows');\r\n  const numberOfWorkflows = limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME] as string;\r\n\r\n  const handleDeleteWorkflow = (workflowId: string) => {\r\n    setWorkflowToDelete(workflowId);\r\n  };\r\n\r\n  const toggleConfirmDeleteDialog = () => {\r\n    setWorkflowToDelete(null);\r\n  };\r\n\r\n  const handleConfirmDeleteDialog = async () => {\r\n    if (!workflowToDelete) return;\r\n\r\n    await deleteAction(workflowToDelete);\r\n\r\n    setWorkflowToDelete(null);\r\n  };\r\n\r\n  const handleCreateClick: React.MouseEventHandler<HTMLAnchorElement> &\r\n    ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) = (event) => {\r\n    event.preventDefault();\r\n    /**\r\n     * If the current license has a workflow limit:\r\n     * check if the total count of workflows exceeds that limit. If so,\r\n     * prevent the navigation and show the limits overlay.\r\n     *\r\n     * If the current license does not have a limit (e.g. offline license):\r\n     * allow the user to navigate to the create-view. In case they exceed the\r\n     * current hard-limit of 200 they will see an error thrown by the API.\r\n     */\r\n\r\n    if (numberOfWorkflows && meta && meta?.workflowCount >= parseInt(numberOfWorkflows, 10)) {\r\n      event.preventDefault();\r\n      setShowLimitModal(true);\r\n    } else {\r\n      navigate('create');\r\n      trackUsage('willCreateWorkflow');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * If the current license has a limit:\r\n   * check if the total count of workflows or stages exceeds that limit and display\r\n   * the limits modal on page load. It can be closed by the user, but the\r\n   * API will throw an error in case they try to create a new workflow or update the\r\n   * stages.\r\n   *\r\n   * If the current license does not have a limit (e.g. offline license):\r\n   * do nothing (for now). In case they are trying to create the 201st workflow/ stage\r\n   * the API will throw an error.\r\n   *\r\n   */\r\n  React.useEffect(() => {\r\n    if (!isLoading && !isLicenseLoading) {\r\n      if (numberOfWorkflows && meta && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\r\n        setShowLimitModal(true);\r\n      }\r\n    }\r\n  }, [isLicenseLoading, isLoading, meta, meta?.workflowCount, numberOfWorkflows]);\r\n\r\n  const headers = [\r\n    {\r\n      label: formatMessage({\r\n        id: 'Settings.review-workflows.list.page.list.column.name.title',\r\n        defaultMessage: 'Name',\r\n      }),\r\n      name: 'name',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: 'Settings.review-workflows.list.page.list.column.stages.title',\r\n        defaultMessage: 'Stages',\r\n      }),\r\n      name: 'stages',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: 'Settings.review-workflows.list.page.list.column.contentTypes.title',\r\n        defaultMessage: 'Content Types',\r\n      }),\r\n      name: 'content-types',\r\n    },\r\n  ];\r\n\r\n  if (isLoading || isLoadingModels) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  const contentTypes = Object.values(data ?? {}).reduce<ContentType[]>((acc, curr) => {\r\n    acc.push(...curr);\r\n    return acc;\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Layout.Header\r\n        primaryAction={\r\n          canCreate ? (\r\n            <LinkButton\r\n              startIcon={<Plus />}\r\n              size=\"S\"\r\n              tag={NavLink}\r\n              to=\"create\"\r\n              onClick={handleCreateClick}\r\n            >\r\n              {formatMessage({\r\n                id: 'Settings.review-workflows.list.page.create',\r\n                defaultMessage: 'Create new workflow',\r\n              })}\r\n            </LinkButton>\r\n          ) : null\r\n        }\r\n        subtitle={formatMessage({\r\n          id: 'Settings.review-workflows.list.page.subtitle',\r\n          defaultMessage: 'Manage your content review process',\r\n        })}\r\n        title={formatMessage({\r\n          id: 'Settings.review-workflows.list.page.title',\r\n          defaultMessage: 'Review Workflows',\r\n        })}\r\n      />\r\n\r\n      <Layout.Root>\r\n        <Table.Root\r\n          isLoading={isLoading}\r\n          rows={workflows}\r\n          footer={\r\n            canCreate ? (\r\n              <TFooter cursor=\"pointer\" icon={<Plus />} onClick={handleCreateClick}>\r\n                {formatMessage({\r\n                  id: 'Settings.review-workflows.list.page.create',\r\n                  defaultMessage: 'Create new workflow',\r\n                })}\r\n              </TFooter>\r\n            ) : null\r\n          }\r\n          headers={headers}\r\n        >\r\n          <Table.Content>\r\n            <Table.Head>\r\n              {headers.map((head) => (\r\n                <Table.HeaderCell key={head.name} {...head} />\r\n              ))}\r\n            </Table.Head>\r\n\r\n            <Table.Body>\r\n              {workflows.map((workflow) => (\r\n                <Table.Row\r\n                  onClick={() => {\r\n                    navigate(`${workflow.id}`);\r\n                  }}\r\n                  key={workflow.id}\r\n                >\r\n                  <Table.Cell width=\"25rem\">\r\n                    <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\r\n                      {workflow.name}\r\n                    </Typography>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <Typography textColor=\"neutral800\">{workflow.stages.length}</Typography>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <Typography textColor=\"neutral800\">\r\n                      {workflow.contentTypes\r\n                        .map((uid: string) => {\r\n                          const contentType = contentTypes.find(\r\n                            (contentType) => contentType.uid === uid\r\n                          );\r\n\r\n                          return contentType?.info.displayName ?? '';\r\n                        })\r\n                        .join(', ')}\r\n                    </Typography>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <Flex alignItems=\"center\" justifyContent=\"end\">\r\n                      {canRead || canUpdate ? (\r\n                        <IconButton\r\n                          tag={Link}\r\n                          to={workflow.id.toString()}\r\n                          label={formatMessage(\r\n                            {\r\n                              id: 'Settings.review-workflows.list.page.list.column.actions.edit.label',\r\n                              defaultMessage: 'Edit {name}',\r\n                            },\r\n                            { name: workflow.name }\r\n                          )}\r\n                          variant=\"ghost\"\r\n                        >\r\n                          <Pencil />\r\n                        </IconButton>\r\n                      ) : null}\r\n                      {workflows.length > 1 && canDelete ? (\r\n                        <IconButton\r\n                          withTooltip={false}\r\n                          label={formatMessage(\r\n                            {\r\n                              id: 'Settings.review-workflows.list.page.list.column.actions.delete.label',\r\n                              defaultMessage: 'Delete {name}',\r\n                            },\r\n                            { name: 'Default workflow' }\r\n                          )}\r\n                          variant=\"ghost\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleDeleteWorkflow(String(workflow.id));\r\n                          }}\r\n                        >\r\n                          <Trash />\r\n                        </IconButton>\r\n                      ) : null}\r\n                    </Flex>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              ))}\r\n            </Table.Body>\r\n          </Table.Content>\r\n        </Table.Root>\r\n\r\n        <Dialog.Root open={!!workflowToDelete} onOpenChange={toggleConfirmDeleteDialog}>\r\n          <ConfirmDialog onConfirm={handleConfirmDeleteDialog}>\r\n            {formatMessage({\r\n              id: 'Settings.review-workflows.list.page.delete.confirm.body',\r\n              defaultMessage:\r\n                'If you remove this worfklow, all stage-related information will be removed for this content-type. Are you sure you want to remove it?',\r\n            })}\r\n          </ConfirmDialog>\r\n        </Dialog.Root>\r\n\r\n        <LimitsModal.Root open={showLimitModal} onOpenChange={() => setShowLimitModal(false)}>\r\n          <LimitsModal.Title>\r\n            {formatMessage({\r\n              id: 'Settings.review-workflows.list.page.workflows.limit.title',\r\n              defaultMessage: 'You’ve reached the limit of workflows in your plan',\r\n            })}\r\n          </LimitsModal.Title>\r\n\r\n          <LimitsModal.Body>\r\n            {formatMessage({\r\n              id: 'Settings.review-workflows.list.page.workflows.limit.body',\r\n              defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\r\n            })}\r\n          </LimitsModal.Body>\r\n        </LimitsModal.Root>\r\n      </Layout.Root>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['review-workflows']?.main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ReviewWorkflowsListView />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ProtectedListPage };\r\n"],"names":["useIntl","useNavigate","useTracking","React","useGetContentTypesQuery","useReviewWorkflows","useLicenseLimits","useTypedSelector","useRBAC","CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME","jsx","Page","jsxs","Fragment","Layout.Header","LinkButton","Plus","NavLink","Layout.Root","Table","TFooter","Typography","contentType","Flex","IconButton","Link","Pencil","Trash","Dialog","ConfirmDialog","LimitsModal"],"mappings":"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"}