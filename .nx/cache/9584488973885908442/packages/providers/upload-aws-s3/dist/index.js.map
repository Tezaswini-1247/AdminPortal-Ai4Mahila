{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { AwsCredentialIdentity } from '@aws-sdk/types';\r\nimport type { InitOptions } from '.';\r\n\r\nconst ENDPOINT_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\r\n\r\ninterface BucketInfo {\r\n  bucket?: string | null;\r\n  err?: string;\r\n}\r\n\r\nexport function isUrlFromBucket(fileUrl: string, bucketName: string, baseUrl = ''): boolean {\r\n  const url = new URL(fileUrl);\r\n\r\n  // Check if the file URL is using a base URL (e.g. a CDN).\r\n  // In this case do not sign the URL.\r\n  if (baseUrl) {\r\n    return false;\r\n  }\r\n\r\n  const { bucket } = getBucketFromAwsUrl(fileUrl);\r\n\r\n  if (bucket) {\r\n    return bucket === bucketName;\r\n  }\r\n\r\n  // File URL might be of an S3-compatible provider. (or an invalid URL)\r\n  // In this case, check if the bucket name appears in the URL host or path.\r\n  // e.g. https://minio.example.com/bucket-name/object-key\r\n  // e.g. https://bucket.nyc3.digitaloceanspaces.com/folder/img.png\r\n  return url.host.startsWith(`${bucketName}.`) || url.pathname.includes(`/${bucketName}/`);\r\n}\r\n\r\n/**\r\n * Parse the bucket name from a URL.\r\n * See all URL formats in https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html\r\n *\r\n * @param {string} fileUrl - the URL to parse\r\n * @returns {object} result\r\n * @returns {string} result.bucket - the bucket name\r\n * @returns {string} result.err - if any\r\n */\r\nfunction getBucketFromAwsUrl(fileUrl: string): BucketInfo {\r\n  const url = new URL(fileUrl);\r\n\r\n  // S3://<bucket-name>/<key>\r\n  if (url.protocol === 's3:') {\r\n    const bucket = url.host;\r\n\r\n    if (!bucket) {\r\n      return { err: `Invalid S3 url: no bucket: ${url}` };\r\n    }\r\n    return { bucket };\r\n  }\r\n\r\n  if (!url.host) {\r\n    return { err: `Invalid S3 url: no hostname: ${url}` };\r\n  }\r\n\r\n  const matches = url.host.match(ENDPOINT_PATTERN);\r\n  if (!matches) {\r\n    return { err: `Invalid S3 url: hostname does not appear to be a valid S3 endpoint: ${url}` };\r\n  }\r\n\r\n  const prefix = matches[1];\r\n  // https://s3.amazonaws.com/<bucket-name>\r\n  if (!prefix) {\r\n    if (url.pathname === '/') {\r\n      return { bucket: null };\r\n    }\r\n\r\n    const index = url.pathname.indexOf('/', 1);\r\n\r\n    // https://s3.amazonaws.com/<bucket-name>\r\n    if (index === -1) {\r\n      return { bucket: url.pathname.substring(1) };\r\n    }\r\n\r\n    // https://s3.amazonaws.com/<bucket-name>/\r\n    if (index === url.pathname.length - 1) {\r\n      return { bucket: url.pathname.substring(1, index) };\r\n    }\r\n\r\n    // https://s3.amazonaws.com/<bucket-name>/key\r\n    return { bucket: url.pathname.substring(1, index) };\r\n  }\r\n\r\n  // https://<bucket-name>.s3.amazonaws.com/\r\n  return { bucket: prefix.substring(0, prefix.length - 1) };\r\n}\r\n\r\nexport const extractCredentials = (options: InitOptions): AwsCredentialIdentity | null => {\r\n  if (options.s3Options?.credentials) {\r\n    return {\r\n      accessKeyId: options.s3Options.credentials.accessKeyId,\r\n      secretAccessKey: options.s3Options.credentials.secretAccessKey,\r\n    };\r\n  }\r\n  return null;\r\n};\r\n","import type { ReadStream } from 'node:fs';\r\nimport { getOr } from 'lodash/fp';\r\nimport {\r\n  S3Client,\r\n  GetObjectCommand,\r\n  DeleteObjectCommand,\r\n  DeleteObjectCommandOutput,\r\n  PutObjectCommandInput,\r\n  CompleteMultipartUploadCommandOutput,\r\n  AbortMultipartUploadCommandOutput,\r\n  S3ClientConfig,\r\n  ObjectCannedACL,\r\n} from '@aws-sdk/client-s3';\r\nimport type { AwsCredentialIdentity } from '@aws-sdk/types';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport { Upload } from '@aws-sdk/lib-storage';\r\nimport { extractCredentials, isUrlFromBucket } from './utils';\r\n\r\nexport interface File {\r\n  name: string;\r\n  alternativeText?: string;\r\n  caption?: string;\r\n  width?: number;\r\n  height?: number;\r\n  formats?: Record<string, unknown>;\r\n  hash: string;\r\n  ext?: string;\r\n  mime: string;\r\n  size: number;\r\n  sizeInBytes: number;\r\n  url: string;\r\n  previewUrl?: string;\r\n  path?: string;\r\n  provider?: string;\r\n  provider_metadata?: Record<string, unknown>;\r\n  stream?: ReadStream;\r\n  buffer?: Buffer;\r\n}\r\n\r\nexport type UploadCommandOutput = (\r\n  | CompleteMultipartUploadCommandOutput\r\n  | AbortMultipartUploadCommandOutput\r\n) & {\r\n  Location: string;\r\n};\r\n\r\nexport interface AWSParams {\r\n  Bucket: string; // making it required\r\n  ACL?: ObjectCannedACL;\r\n  signedUrlExpires?: number;\r\n}\r\n\r\nexport interface DefaultOptions extends S3ClientConfig {\r\n  // TODO Remove this in V5\r\n  accessKeyId?: AwsCredentialIdentity['accessKeyId'];\r\n  secretAccessKey?: AwsCredentialIdentity['secretAccessKey'];\r\n  // Keep this for V5\r\n  credentials?: AwsCredentialIdentity;\r\n  params?: AWSParams;\r\n  [k: string]: any;\r\n}\r\n\r\nexport type InitOptions = (DefaultOptions | { s3Options: DefaultOptions }) & {\r\n  baseUrl?: string;\r\n  rootPath?: string;\r\n  [k: string]: any;\r\n};\r\n\r\nconst assertUrlProtocol = (url: string) => {\r\n  // Regex to test protocol like \"http://\", \"https://\"\r\n  return /^\\w*:\\/\\//.test(url);\r\n};\r\n\r\nconst getConfig = ({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) => {\r\n  if (Object.keys(legacyS3Options).length > 0) {\r\n    process.emitWarning(\r\n      \"S3 configuration options passed at root level of the plugin's providerOptions is deprecated and will be removed in a future release. Please wrap them inside the 's3Options:{}' property.\"\r\n    );\r\n  }\r\n  const credentials = extractCredentials({ s3Options, ...legacyS3Options });\r\n  const config = {\r\n    ...s3Options,\r\n    ...legacyS3Options,\r\n    ...(credentials ? { credentials } : {}),\r\n  };\r\n\r\n  config.params.ACL = getOr(ObjectCannedACL.public_read, ['params', 'ACL'], config);\r\n\r\n  return config;\r\n};\r\n\r\nexport default {\r\n  init({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) {\r\n    // TODO V5 change config structure to avoid having to do this\r\n    const config = getConfig({ baseUrl, rootPath, s3Options, ...legacyS3Options });\r\n    const s3Client = new S3Client(config);\r\n    const filePrefix = rootPath ? `${rootPath.replace(/\\/+$/, '')}/` : '';\r\n\r\n    const getFileKey = (file: File) => {\r\n      const path = file.path ? `${file.path}/` : '';\r\n      return `${filePrefix}${path}${file.hash}${file.ext}`;\r\n    };\r\n\r\n    const upload = async (file: File, customParams: Partial<PutObjectCommandInput> = {}) => {\r\n      const fileKey = getFileKey(file);\r\n      const uploadObj = new Upload({\r\n        client: s3Client,\r\n        params: {\r\n          Bucket: config.params.Bucket,\r\n          Key: fileKey,\r\n          Body: file.stream || Buffer.from(file.buffer as any, 'binary'),\r\n          ACL: config.params.ACL,\r\n          ContentType: file.mime,\r\n          ...customParams,\r\n        },\r\n      });\r\n\r\n      const upload = (await uploadObj.done()) as UploadCommandOutput;\r\n\r\n      if (assertUrlProtocol(upload.Location)) {\r\n        file.url = baseUrl ? `${baseUrl}/${fileKey}` : upload.Location;\r\n      } else {\r\n        // Default protocol to https protocol\r\n        file.url = `https://${upload.Location}`;\r\n      }\r\n    };\r\n\r\n    return {\r\n      isPrivate() {\r\n        return config.params.ACL === 'private';\r\n      },\r\n\r\n      async getSignedUrl(file: File, customParams: any): Promise<{ url: string }> {\r\n        // Do not sign the url if it does not come from the same bucket.\r\n        if (!isUrlFromBucket(file.url, config.params.Bucket, baseUrl)) {\r\n          return { url: file.url };\r\n        }\r\n        const fileKey = getFileKey(file);\r\n\r\n        const url = await getSignedUrl(\r\n          // @ts-expect-error - TODO fix client type\r\n          s3Client,\r\n          new GetObjectCommand({\r\n            Bucket: config.params.Bucket,\r\n            Key: fileKey,\r\n            ...customParams,\r\n          }),\r\n          {\r\n            expiresIn: getOr(15 * 60, ['params', 'signedUrlExpires'], config),\r\n          }\r\n        );\r\n\r\n        return { url };\r\n      },\r\n      uploadStream(file: File, customParams = {}) {\r\n        return upload(file, customParams);\r\n      },\r\n      upload(file: File, customParams = {}) {\r\n        return upload(file, customParams);\r\n      },\r\n      delete(file: File, customParams = {}): Promise<DeleteObjectCommandOutput> {\r\n        const command = new DeleteObjectCommand({\r\n          Bucket: config.params.Bucket,\r\n          Key: getFileKey(file),\r\n          ...customParams,\r\n        });\r\n        return s3Client.send(command);\r\n      },\r\n    };\r\n  },\r\n};\r\n"],"names":["index","getOr","ObjectCannedACL","S3Client","Upload","upload","getSignedUrl","GetObjectCommand","DeleteObjectCommand"],"mappings":"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"}