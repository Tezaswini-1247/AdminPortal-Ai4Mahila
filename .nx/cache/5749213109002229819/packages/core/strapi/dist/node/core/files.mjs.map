{"version":3,"file":"files.mjs","sources":["../../../src/node/core/files.ts"],"sourcesContent":["import path from 'node:path';\r\nimport { access } from 'node:fs/promises';\r\nimport { register } from 'esbuild-register/dist/node';\r\n\r\n/**\r\n * @internal\r\n */\r\nconst pathExists = async (path: string) => {\r\n  try {\r\n    await access(path);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nconst loadFile = async (path: string): Promise<undefined | any> => {\r\n  if (await pathExists(path)) {\r\n    const esbuildOptions: Parameters<typeof register>[0] = {\r\n      extensions: ['.js', '.mjs', '.ts'],\r\n    };\r\n\r\n    const { unregister } = register(esbuildOptions);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    const mod = require(path);\r\n\r\n    unregister();\r\n\r\n    /**\r\n     * handles esm or cjs exporting.\r\n     */\r\n    const file = mod?.default || mod || undefined;\r\n\r\n    return file;\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * @internal\r\n *\r\n * @description Converts a system path to a module path mainly for `Windows` systems.\r\n * where the path separator is `\\` instead of `/`, on linux systems the path separator\r\n * is identical to the module path separator.\r\n */\r\nconst convertSystemPathToModulePath = (sysPath: string) => {\r\n  if (process.platform === 'win32') {\r\n    return sysPath.split(path.sep).join(path.posix.sep);\r\n  }\r\n\r\n  return sysPath;\r\n};\r\n\r\n/**\r\n * @internal\r\n *\r\n * @description Converts a module path to a system path, again largely used for Windows systems.\r\n * The original use case was plugins where the resolve path was in module format but we want to\r\n * have it relative to the runtime directory.\r\n */\r\nconst convertModulePathToSystemPath = (modulePath: string) => {\r\n  if (process.platform === 'win32') {\r\n    return modulePath.split(path.posix.sep).join(path.sep);\r\n  }\r\n\r\n  return modulePath;\r\n};\r\n\r\nexport { pathExists, loadFile, convertSystemPathToModulePath, convertModulePathToSystemPath };\r\n"],"names":["path"],"mappings":";;;AAOM,MAAA,aAAa,OAAOA,UAAiB;AACrC,MAAA;AACF,UAAM,OAAOA,KAAI;AACV,WAAA;AAAA,WACA,OAAO;AACP,WAAA;AAAA,EAAA;AAEX;AAKM,MAAA,WAAW,OAAOA,UAA2C;AAC7D,MAAA,MAAM,WAAWA,KAAI,GAAG;AAC1B,UAAM,iBAAiD;AAAA,MACrD,YAAY,CAAC,OAAO,QAAQ,KAAK;AAAA,IACnC;AAEA,UAAM,EAAE,WAAA,IAAe,SAAS,cAAc;AAGxC,UAAA,MAAM,QAAQA,KAAI;AAEb,eAAA;AAKL,UAAA,OAAO,KAAK,WAAW,OAAO;AAE7B,WAAA;AAAA,EAAA;AAGF,SAAA;AACT;AASM,MAAA,gCAAgC,CAAC,YAAoB;AACrD,MAAA,QAAQ,aAAa,SAAS;AACzB,WAAA,QAAQ,MAAM,KAAK,GAAG,EAAE,KAAK,KAAK,MAAM,GAAG;AAAA,EAAA;AAG7C,SAAA;AACT;AASM,MAAA,gCAAgC,CAAC,eAAuB;AACxD,MAAA,QAAQ,aAAa,SAAS;AACzB,WAAA,WAAW,MAAM,KAAK,MAAM,GAAG,EAAE,KAAK,KAAK,GAAG;AAAA,EAAA;AAGhD,SAAA;AACT;"}