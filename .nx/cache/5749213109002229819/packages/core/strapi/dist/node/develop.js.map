{"version":3,"file":"develop.js","sources":["../../src/node/develop.ts"],"sourcesContent":["import * as tsUtils from '@strapi/typescript-utils';\r\nimport { strings } from '@strapi/utils';\r\nimport chokidar from 'chokidar';\r\nimport fs from 'node:fs/promises';\r\nimport path from 'node:path';\r\nimport cluster from 'node:cluster';\r\nimport { createStrapi } from '@strapi/core';\r\n\r\nimport type { CLIContext } from '../cli/types';\r\nimport { checkRequiredDependencies } from './core/dependencies';\r\nimport { getTimer, prettyTime, type TimeMeasurer } from './core/timer';\r\nimport { createBuildContext } from './create-build-context';\r\nimport type { WebpackWatcher } from './webpack/watch';\r\nimport type { ViteWatcher } from './vite/watch';\r\n\r\nimport { writeStaticClientFiles } from './staticFiles';\r\n\r\ninterface DevelopOptions extends CLIContext {\r\n  /**\r\n   * Which bundler to use for building.\r\n   *\r\n   * @default webpack\r\n   */\r\n  bundler?: 'webpack' | 'vite';\r\n  polling?: boolean;\r\n  open?: boolean;\r\n  watchAdmin?: boolean;\r\n}\r\n\r\n// This method removes all non-admin build files from the dist directory\r\nconst cleanupDistDirectory = async ({\r\n  tsconfig,\r\n  logger,\r\n  timer,\r\n}: Pick<DevelopOptions, 'tsconfig' | 'logger'> & { timer: TimeMeasurer }) => {\r\n  const distDir = tsconfig?.config?.options?.outDir;\r\n\r\n  if (\r\n    !distDir || // we don't have a dist dir\r\n    (await fs\r\n      .access(distDir)\r\n      .then(() => false)\r\n      .catch(() => true)) // it doesn't exist -- if it does but no access, that will be caught later\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const timerName = `cleaningDist${Date.now()}`;\r\n  timer.start(timerName);\r\n  const cleaningSpinner = logger.spinner(`Cleaning dist dir ${distDir}`).start();\r\n\r\n  try {\r\n    const dirContent = await fs.readdir(distDir);\r\n    const validFilenames = dirContent\r\n      // Ignore the admin build folder\r\n      .filter((filename) => filename !== 'build');\r\n    for (const filename of validFilenames) {\r\n      await fs.rm(path.resolve(distDir, filename), { recursive: true });\r\n    }\r\n  } catch (err: unknown) {\r\n    const generatingDuration = timer.end(timerName);\r\n    cleaningSpinner.text = `Error cleaning dist dir: ${err} (${prettyTime(generatingDuration)})`;\r\n    cleaningSpinner?.fail();\r\n    return;\r\n  }\r\n\r\n  const generatingDuration = timer.end(timerName);\r\n  cleaningSpinner.text = `Cleaning dist dir (${prettyTime(generatingDuration)})`;\r\n  cleaningSpinner?.succeed();\r\n};\r\n\r\nconst develop = async ({\r\n  cwd,\r\n  polling,\r\n  logger,\r\n  tsconfig,\r\n  watchAdmin,\r\n  ...options\r\n}: DevelopOptions) => {\r\n  const timer = getTimer();\r\n\r\n  if (cluster.isPrimary) {\r\n    const { didInstall } = await checkRequiredDependencies({ cwd, logger }).catch((err) => {\r\n      logger.error(err.message);\r\n      process.exit(1);\r\n    });\r\n\r\n    if (didInstall) {\r\n      return;\r\n    }\r\n\r\n    if (tsconfig?.config) {\r\n      // Build without diagnostics in case schemas have changed\r\n      await cleanupDistDirectory({ tsconfig, logger, timer });\r\n      await tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: true } });\r\n    }\r\n\r\n    /**\r\n     * IF we're not watching the admin we're going to build it, this makes\r\n     * sure that at least the admin is built for users & they can interact\r\n     * with the application.\r\n     */\r\n    if (!watchAdmin) {\r\n      timer.start('createBuildContext');\r\n      const contextSpinner = logger.spinner(`Building build context`).start();\r\n      console.log('');\r\n\r\n      const ctx = await createBuildContext({\r\n        cwd,\r\n        logger,\r\n        tsconfig,\r\n        options,\r\n      });\r\n      const contextDuration = timer.end('createBuildContext');\r\n      contextSpinner.text = `Building build context (${prettyTime(contextDuration)})`;\r\n      contextSpinner.succeed();\r\n\r\n      timer.start('creatingAdmin');\r\n      const adminSpinner = logger.spinner(`Creating admin`).start();\r\n\r\n      await writeStaticClientFiles(ctx);\r\n\r\n      if (ctx.bundler === 'webpack') {\r\n        const { build: buildWebpack } = await import('./webpack/build');\r\n        await buildWebpack(ctx);\r\n      } else if (ctx.bundler === 'vite') {\r\n        const { build: buildVite } = await import('./vite/build');\r\n        await buildVite(ctx);\r\n      }\r\n\r\n      const adminDuration = timer.end('creatingAdmin');\r\n      adminSpinner.text = `Creating admin (${prettyTime(adminDuration)})`;\r\n      adminSpinner.succeed();\r\n    }\r\n\r\n    cluster.on('message', async (worker, message) => {\r\n      switch (message) {\r\n        case 'reload': {\r\n          if (tsconfig?.config) {\r\n            // Build without diagnostics in case schemas have changed\r\n            await cleanupDistDirectory({ tsconfig, logger, timer });\r\n            await tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: true } });\r\n          }\r\n          logger.debug('cluster has the reload message, sending the worker kill message');\r\n          worker.send('kill');\r\n          break;\r\n        }\r\n        case 'killed': {\r\n          logger.debug('cluster has the killed message, forking the cluster');\r\n          cluster.fork();\r\n          break;\r\n        }\r\n        case 'stop': {\r\n          process.exit(1);\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    cluster.fork();\r\n  }\r\n\r\n  if (cluster.isWorker) {\r\n    timer.start('loadStrapi');\r\n    const loadStrapiSpinner = logger.spinner(`Loading Strapi`).start();\r\n\r\n    const strapi = createStrapi({\r\n      appDir: cwd,\r\n      distDir: tsconfig?.config.options.outDir ?? '',\r\n      autoReload: true,\r\n      serveAdminPanel: !watchAdmin,\r\n    });\r\n\r\n    /**\r\n     * If we're watching the admin panel then we're going to attach the watcher\r\n     * as a strapi middleware.\r\n     */\r\n    let bundleWatcher: WebpackWatcher | ViteWatcher | undefined;\r\n\r\n    const strapiInstance = await strapi.load();\r\n\r\n    if (watchAdmin) {\r\n      timer.start('createBuildContext');\r\n      const contextSpinner = logger.spinner(`Building build context`).start();\r\n      console.log('');\r\n\r\n      const ctx = await createBuildContext({\r\n        cwd,\r\n        logger,\r\n        strapi,\r\n        tsconfig,\r\n        options,\r\n      });\r\n      const contextDuration = timer.end('createBuildContext');\r\n      contextSpinner.text = `Building build context (${prettyTime(contextDuration)})`;\r\n      contextSpinner.succeed();\r\n\r\n      timer.start('creatingAdmin');\r\n      const adminSpinner = logger.spinner(`Creating admin`).start();\r\n\r\n      await writeStaticClientFiles(ctx);\r\n\r\n      if (ctx.bundler === 'webpack') {\r\n        const { watch: watchWebpack } = await import('./webpack/watch');\r\n        bundleWatcher = await watchWebpack(ctx);\r\n      } else if (ctx.bundler === 'vite') {\r\n        const { watch: watchVite } = await import('./vite/watch');\r\n        bundleWatcher = await watchVite(ctx);\r\n      }\r\n\r\n      const adminDuration = timer.end('creatingAdmin');\r\n      adminSpinner.text = `Creating admin (${prettyTime(adminDuration)})`;\r\n      adminSpinner.succeed();\r\n    }\r\n\r\n    const loadStrapiDuration = timer.end('loadStrapi');\r\n    loadStrapiSpinner.text = `Loading Strapi (${prettyTime(loadStrapiDuration)})`;\r\n    loadStrapiSpinner.succeed();\r\n\r\n    // For TS projects, type generation is a requirement for the develop command so that the server can restart\r\n    // For JS projects, we respect the experimental autogenerate setting\r\n    if (tsconfig?.config || strapi.config.get('typescript.autogenerate') !== false) {\r\n      timer.start('generatingTS');\r\n      const generatingTsSpinner = logger.spinner(`Generating types`).start();\r\n\r\n      await tsUtils.generators.generate({\r\n        strapi: strapiInstance,\r\n        pwd: cwd,\r\n        rootDir: undefined,\r\n        logger: { silent: true, debug: false },\r\n        artifacts: { contentTypes: true, components: true },\r\n      });\r\n\r\n      const generatingDuration = timer.end('generatingTS');\r\n      generatingTsSpinner.text = `Generating types (${prettyTime(generatingDuration)})`;\r\n      generatingTsSpinner.succeed();\r\n    }\r\n\r\n    if (tsconfig?.config) {\r\n      timer.start('compilingTS');\r\n      const compilingTsSpinner = logger.spinner(`Compiling TS`).start();\r\n\r\n      await cleanupDistDirectory({ tsconfig, logger, timer });\r\n      await tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: false } });\r\n\r\n      const compilingDuration = timer.end('compilingTS');\r\n      compilingTsSpinner.text = `Compiling TS (${prettyTime(compilingDuration)})`;\r\n      compilingTsSpinner.succeed();\r\n    }\r\n\r\n    const restart = async () => {\r\n      if (strapiInstance.reload.isWatching && !strapiInstance.reload.isReloading) {\r\n        strapiInstance.reload.isReloading = true;\r\n        strapiInstance.reload();\r\n      }\r\n    };\r\n\r\n    const watcher = chokidar\r\n      .watch(cwd, {\r\n        ignoreInitial: true,\r\n        usePolling: polling,\r\n        ignored: [\r\n          /(^|[/\\\\])\\../, // dot files\r\n          /tmp/,\r\n          '**/src/admin/**',\r\n          '**/src/plugins/**/admin/**',\r\n          '**/dist/src/plugins/test/admin/**',\r\n          '**/documentation',\r\n          '**/documentation/**',\r\n          '**/node_modules',\r\n          '**/node_modules/**',\r\n          '**/plugins.json',\r\n          '**/build',\r\n          '**/build/**',\r\n          '**/log',\r\n          '**/log/**',\r\n          '**/logs',\r\n          '**/logs/**',\r\n          '**/*.log',\r\n          '**/index.html',\r\n          '**/public',\r\n          '**/public/**',\r\n          strapiInstance.dirs.static.public,\r\n          strings.joinBy('/', strapiInstance.dirs.static.public, '**'),\r\n          '**/*.db*',\r\n          '**/exports/**',\r\n          '**/dist/**',\r\n          '**/*.d.ts',\r\n          '**/.yalc/**',\r\n          '**/yalc.lock',\r\n          // TODO v6: watch only src folder by default, and flip this to watchIncludeFiles\r\n          ...strapiInstance.config.get('admin.watchIgnoreFiles', []),\r\n        ],\r\n      })\r\n      .on('add', (path) => {\r\n        strapiInstance.log.info(`File created: ${path}`);\r\n        restart();\r\n      })\r\n      .on('change', (path) => {\r\n        strapiInstance.log.info(`File changed: ${path}`);\r\n        restart();\r\n      })\r\n      .on('unlink', (path) => {\r\n        strapiInstance.log.info(`File deleted: ${path}`);\r\n        restart();\r\n      });\r\n\r\n    process.on('message', async (message) => {\r\n      switch (message) {\r\n        case 'kill': {\r\n          logger.debug(\r\n            'child process has the kill message, destroying the strapi instance and sending the killed process message'\r\n          );\r\n          await watcher.close();\r\n\r\n          await strapiInstance.destroy();\r\n\r\n          if (bundleWatcher) {\r\n            bundleWatcher.close();\r\n          }\r\n          process.send?.('killed');\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    strapiInstance.start();\r\n  }\r\n};\r\n\r\nexport { develop };\r\nexport type { DevelopOptions };\r\n"],"names":["timer","fs","path","generatingDuration","prettyTime","getTimer","cluster","checkRequiredDependencies","tsUtils","createBuildContext","writeStaticClientFiles","createStrapi","chokidar","strings"],"mappings":"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"}