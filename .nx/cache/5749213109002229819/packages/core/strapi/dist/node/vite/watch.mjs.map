{"version":3,"file":"watch.mjs","sources":["../../../src/node/vite/watch.ts"],"sourcesContent":["import path from 'node:path';\r\nimport http from 'node:http';\r\nimport fs from 'node:fs/promises';\r\nimport type { Core } from '@strapi/types';\r\n\r\nimport { mergeConfigWithUserConfig, resolveDevelopmentConfig } from './config';\r\n\r\nimport type { BuildContext } from '../create-build-context';\r\n\r\ninterface ViteWatcher {\r\n  close(): Promise<void>;\r\n}\r\n\r\nconst HMR_DEFAULT_PORT = 5173;\r\n\r\nconst createHMRServer = () => {\r\n  return http.createServer(\r\n    // http server request handler. keeps the same with\r\n    // https://github.com/websockets/ws/blob/45e17acea791d865df6b255a55182e9c42e5877a/lib/websocket-server.js#L88-L96\r\n    (_, res) => {\r\n      const body = http.STATUS_CODES[426]; // Upgrade Required\r\n\r\n      res.writeHead(426, {\r\n        'Content-Length': body?.length ?? 0,\r\n        'Content-Type': 'text/plain',\r\n      });\r\n\r\n      res.end(body);\r\n    }\r\n  );\r\n};\r\n\r\nconst watch = async (ctx: BuildContext): Promise<ViteWatcher> => {\r\n  const hmrServer = createHMRServer();\r\n\r\n  ctx.options.hmrServer = hmrServer;\r\n  ctx.options.hmrClientPort = HMR_DEFAULT_PORT;\r\n\r\n  const config = await resolveDevelopmentConfig(ctx);\r\n  const finalConfig = await mergeConfigWithUserConfig(config, ctx);\r\n\r\n  const hmrConfig = config.server?.hmr;\r\n\r\n  // If the server used for Vite hmr is the one we've created (<> no user override)\r\n  if (typeof hmrConfig === 'object' && hmrConfig.server === hmrServer) {\r\n    // Only restart the hmr server when Strapi's server is listening\r\n    strapi.server.httpServer.on('listening', async () => {\r\n      hmrServer.listen(hmrConfig.clientPort ?? hmrConfig.port ?? HMR_DEFAULT_PORT);\r\n    });\r\n  }\r\n\r\n  ctx.logger.debug('Vite config', finalConfig);\r\n\r\n  const { createServer } = await import('vite');\r\n\r\n  const vite = await createServer(finalConfig);\r\n\r\n  ctx.strapi.server.app.use((ctx, next) => {\r\n    return new Promise((resolve, reject) => {\r\n      vite.middlewares(ctx.req, ctx.res, (err: unknown) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(next());\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  const serveAdmin: Core.MiddlewareHandler = async (koaCtx, next) => {\r\n    await next();\r\n\r\n    if (koaCtx.method !== 'HEAD' && koaCtx.method !== 'GET') {\r\n      return;\r\n    }\r\n\r\n    if (koaCtx.body != null || koaCtx.status !== 404) {\r\n      return;\r\n    }\r\n\r\n    const url = koaCtx.originalUrl;\r\n\r\n    let template = await fs.readFile(path.relative(ctx.cwd, '.strapi/client/index.html'), 'utf-8');\r\n    template = await vite.transformIndexHtml(url, template);\r\n\r\n    koaCtx.type = 'html';\r\n    koaCtx.body = template;\r\n  };\r\n\r\n  ctx.strapi.server.routes([\r\n    {\r\n      method: 'GET',\r\n      path: `${ctx.basePath}:path*`,\r\n      handler: serveAdmin,\r\n      config: { auth: false },\r\n    },\r\n  ]);\r\n\r\n  return {\r\n    async close() {\r\n      await vite.close();\r\n\r\n      if (hmrServer.listening) {\r\n        // Manually close the hmr server\r\n        // /!\\ This operation MUST be done after calling .close() on the vite\r\n        //      instance to avoid flaky behaviors with attached clients\r\n        await new Promise<void>((resolve, reject) => {\r\n          hmrServer.close((err) => (err ? reject(err) : resolve()));\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport { watch };\r\nexport type { ViteWatcher };\r\n"],"names":["ctx"],"mappings":";;;;AAaA,MAAM,mBAAmB;AAEzB,MAAM,kBAAkB,MAAM;AAC5B,SAAO,KAAK;AAAA;AAAA;AAAA,IAGV,CAAC,GAAG,QAAQ;AACJ,YAAA,OAAO,KAAK,aAAa,GAAG;AAElC,UAAI,UAAU,KAAK;AAAA,QACjB,kBAAkB,MAAM,UAAU;AAAA,QAClC,gBAAgB;AAAA,MAAA,CACjB;AAED,UAAI,IAAI,IAAI;AAAA,IAAA;AAAA,EAEhB;AACF;AAEM,MAAA,QAAQ,OAAO,QAA4C;AAC/D,QAAM,YAAY,gBAAgB;AAElC,MAAI,QAAQ,YAAY;AACxB,MAAI,QAAQ,gBAAgB;AAEtB,QAAA,SAAS,MAAM,yBAAyB,GAAG;AACjD,QAAM,cAAc,MAAM,0BAA0B,QAAQ,GAAG;AAEzD,QAAA,YAAY,OAAO,QAAQ;AAGjC,MAAI,OAAO,cAAc,YAAY,UAAU,WAAW,WAAW;AAEnE,WAAO,OAAO,WAAW,GAAG,aAAa,YAAY;AACnD,gBAAU,OAAO,UAAU,cAAc,UAAU,QAAQ,gBAAgB;AAAA,IAAA,CAC5E;AAAA,EAAA;AAGC,MAAA,OAAO,MAAM,eAAe,WAAW;AAE3C,QAAM,EAAE,aAAA,IAAiB,MAAM,OAAO,MAAM;AAEtC,QAAA,OAAO,MAAM,aAAa,WAAW;AAE3C,MAAI,OAAO,OAAO,IAAI,IAAI,CAACA,MAAK,SAAS;AACvC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,YAAYA,KAAI,KAAKA,KAAI,KAAK,CAAC,QAAiB;AACnD,YAAI,KAAK;AACP,iBAAO,GAAG;AAAA,QAAA,OACL;AACL,kBAAQ,MAAM;AAAA,QAAA;AAAA,MAChB,CACD;AAAA,IAAA,CACF;AAAA,EAAA,CACF;AAEK,QAAA,aAAqC,OAAO,QAAQ,SAAS;AACjE,UAAM,KAAK;AAEX,QAAI,OAAO,WAAW,UAAU,OAAO,WAAW,OAAO;AACvD;AAAA,IAAA;AAGF,QAAI,OAAO,QAAQ,QAAQ,OAAO,WAAW,KAAK;AAChD;AAAA,IAAA;AAGF,UAAM,MAAM,OAAO;AAEf,QAAA,WAAW,MAAM,GAAG,SAAS,KAAK,SAAS,IAAI,KAAK,2BAA2B,GAAG,OAAO;AAC7F,eAAW,MAAM,KAAK,mBAAmB,KAAK,QAAQ;AAEtD,WAAO,OAAO;AACd,WAAO,OAAO;AAAA,EAChB;AAEI,MAAA,OAAO,OAAO,OAAO;AAAA,IACvB;AAAA,MACE,QAAQ;AAAA,MACR,MAAM,GAAG,IAAI,QAAQ;AAAA,MACrB,SAAS;AAAA,MACT,QAAQ,EAAE,MAAM,MAAM;AAAA,IAAA;AAAA,EACxB,CACD;AAEM,SAAA;AAAA,IACL,MAAM,QAAQ;AACZ,YAAM,KAAK,MAAM;AAEjB,UAAI,UAAU,WAAW;AAIvB,cAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AACjC,oBAAA,MAAM,CAAC,QAAS,MAAM,OAAO,GAAG,IAAI,SAAU;AAAA,QAAA,CACzD;AAAA,MAAA;AAAA,IACH;AAAA,EAEJ;AACF;"}