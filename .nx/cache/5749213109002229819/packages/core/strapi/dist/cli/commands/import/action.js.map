{"version":3,"file":"action.js","sources":["../../../../src/cli/commands/import/action.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\r\nimport { isObject } from 'lodash/fp';\r\nimport chalk from 'chalk';\r\n\r\nimport {\r\n  engine as engineDataTransfer,\r\n  strapi as strapiDataTransfer,\r\n  file as fileDataTransfer,\r\n} from '@strapi/data-transfer';\r\n\r\nimport {\r\n  buildTransferTable,\r\n  DEFAULT_IGNORED_CONTENT_TYPES,\r\n  createStrapiInstance,\r\n  formatDiagnostic,\r\n  loadersFactory,\r\n  exitMessageText,\r\n  abortTransfer,\r\n  getTransferTelemetryPayload,\r\n  setSignalHandler,\r\n  getDiffHandler,\r\n  parseRestoreFromOptions,\r\n} from '../../utils/data-transfer';\r\nimport { exitWith } from '../../utils/helpers';\r\n\r\nconst {\r\n  providers: { createLocalFileSourceProvider },\r\n} = fileDataTransfer;\r\n\r\nconst {\r\n  providers: { createLocalStrapiDestinationProvider, DEFAULT_CONFLICT_STRATEGY },\r\n} = strapiDataTransfer;\r\n\r\nconst { createTransferEngine, DEFAULT_VERSION_STRATEGY, DEFAULT_SCHEMA_STRATEGY } =\r\n  engineDataTransfer;\r\n\r\ninterface CmdOptions {\r\n  file?: string;\r\n  decompress?: boolean;\r\n  decrypt?: boolean;\r\n  verbose?: boolean;\r\n  key?: string;\r\n  conflictStrategy?: 'restore';\r\n  force?: boolean;\r\n  only?: (keyof engineDataTransfer.TransferGroupFilter)[];\r\n  exclude?: (keyof engineDataTransfer.TransferGroupFilter)[];\r\n  throttle?: number;\r\n}\r\n\r\ntype EngineOptions = Parameters<typeof createTransferEngine>[2];\r\n\r\n/**\r\n * Import command.\r\n *\r\n * It transfers data from a file to a local Strapi instance\r\n */\r\nexport default async (opts: CmdOptions) => {\r\n  // validate inputs from Commander\r\n  if (!isObject(opts)) {\r\n    exitWith(1, 'Could not parse arguments');\r\n  }\r\n\r\n  /**\r\n   * From strapi backup file\r\n   */\r\n  const sourceOptions = getLocalFileSourceOptions(opts);\r\n\r\n  const source = createLocalFileSourceProvider(sourceOptions);\r\n\r\n  /**\r\n   * To local Strapi instance\r\n   */\r\n  const strapiInstance = await createStrapiInstance();\r\n\r\n  /**\r\n   * Configure and run the transfer engine\r\n   */\r\n  const engineOptions: EngineOptions = {\r\n    versionStrategy: DEFAULT_VERSION_STRATEGY,\r\n    schemaStrategy: DEFAULT_SCHEMA_STRATEGY,\r\n    exclude: opts.exclude,\r\n    only: opts.only,\r\n    throttle: opts.throttle,\r\n    transforms: {\r\n      links: [\r\n        {\r\n          filter(link) {\r\n            return (\r\n              !DEFAULT_IGNORED_CONTENT_TYPES.includes(link.left.type) &&\r\n              !DEFAULT_IGNORED_CONTENT_TYPES.includes(link.right.type)\r\n            );\r\n          },\r\n        },\r\n      ],\r\n      entities: [\r\n        {\r\n          filter: (entity) => !DEFAULT_IGNORED_CONTENT_TYPES.includes(entity.type),\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const destinationOptions = {\r\n    async getStrapi() {\r\n      return strapiInstance;\r\n    },\r\n    autoDestroy: false,\r\n    strategy: opts.conflictStrategy || DEFAULT_CONFLICT_STRATEGY,\r\n    restore: parseRestoreFromOptions(engineOptions),\r\n  };\r\n\r\n  const destination = createLocalStrapiDestinationProvider(destinationOptions);\r\n  destination.onWarning = (message) => console.warn(`\\n${chalk.yellow('warn')}: ${message}`);\r\n\r\n  const engine = createTransferEngine(source, destination, engineOptions);\r\n\r\n  engine.diagnostics.onDiagnostic(formatDiagnostic('import', opts.verbose));\r\n\r\n  const progress = engine.progress.stream;\r\n\r\n  const { updateLoader } = loadersFactory();\r\n\r\n  engine.onSchemaDiff(getDiffHandler(engine, { force: opts.force, action: 'import' }));\r\n\r\n  progress.on(`stage::start`, ({ stage, data }) => {\r\n    updateLoader(stage, data).start();\r\n  });\r\n\r\n  progress.on('stage::finish', ({ stage, data }) => {\r\n    updateLoader(stage, data).succeed();\r\n  });\r\n\r\n  progress.on('stage::progress', ({ stage, data }) => {\r\n    updateLoader(stage, data);\r\n  });\r\n\r\n  progress.on('transfer::start', async () => {\r\n    console.log('Starting import...');\r\n    await strapiInstance.telemetry.send(\r\n      'didDEITSProcessStart',\r\n      getTransferTelemetryPayload(engine)\r\n    );\r\n  });\r\n\r\n  let results: engineDataTransfer.ITransferResults<typeof source, typeof destination>;\r\n  try {\r\n    // Abort transfer if user interrupts process\r\n    setSignalHandler(() => abortTransfer({ engine, strapi: strapi as Core.Strapi }));\r\n\r\n    results = await engine.transfer();\r\n\r\n    try {\r\n      const table = buildTransferTable(results.engine);\r\n      console.log(table?.toString());\r\n    } catch (e) {\r\n      console.error('There was an error displaying the results of the transfer.');\r\n    }\r\n\r\n    // Note: we need to await telemetry or else the process ends before it is sent\r\n    await strapiInstance.telemetry.send(\r\n      'didDEITSProcessFinish',\r\n      getTransferTelemetryPayload(engine)\r\n    );\r\n    await strapiInstance.destroy();\r\n\r\n    exitWith(0, exitMessageText('import'));\r\n  } catch (e) {\r\n    await strapiInstance.telemetry.send('didDEITSProcessFail', getTransferTelemetryPayload(engine));\r\n    exitWith(1, exitMessageText('import', true));\r\n  }\r\n};\r\n\r\n/**\r\n * Infer local file source provider options based on a given filename\r\n */\r\nconst getLocalFileSourceOptions = (opts: {\r\n  file?: string;\r\n  decompress?: boolean;\r\n  decrypt?: boolean;\r\n  key?: string;\r\n}) => {\r\n  const options: fileDataTransfer.providers.ILocalFileSourceProviderOptions = {\r\n    file: { path: opts.file ?? '' },\r\n    compression: { enabled: !!opts.decompress },\r\n    encryption: { enabled: !!opts.decrypt, key: opts.key },\r\n  };\r\n\r\n  return options;\r\n};\r\n"],"names":["fileDataTransfer","strapiDataTransfer","engineDataTransfer","isObject","exitWith","createStrapiInstance","DEFAULT_IGNORED_CONTENT_TYPES","parseRestoreFromOptions","chalk","formatDiagnostic","loadersFactory","getDiffHandler","getTransferTelemetryPayload","setSignalHandler","abortTransfer","buildTransferTable","exitMessageText"],"mappings":"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"}