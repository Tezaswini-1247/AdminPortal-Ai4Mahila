{"version":3,"file":"action.js","sources":["../../../../src/cli/commands/transfer/action.ts"],"sourcesContent":["import { isObject } from 'lodash/fp';\r\nimport { engine as engineDataTransfer, strapi as strapiDataTransfer } from '@strapi/data-transfer';\r\n\r\nimport {\r\n  buildTransferTable,\r\n  createStrapiInstance,\r\n  DEFAULT_IGNORED_CONTENT_TYPES,\r\n  formatDiagnostic,\r\n  loadersFactory,\r\n  exitMessageText,\r\n  abortTransfer,\r\n  getTransferTelemetryPayload,\r\n  setSignalHandler,\r\n  getDiffHandler,\r\n  getAssetsBackupHandler,\r\n  parseRestoreFromOptions,\r\n} from '../../utils/data-transfer';\r\nimport { exitWith } from '../../utils/helpers';\r\n\r\nconst { createTransferEngine } = engineDataTransfer;\r\nconst {\r\n  providers: {\r\n    createRemoteStrapiDestinationProvider,\r\n    createLocalStrapiSourceProvider,\r\n    createLocalStrapiDestinationProvider,\r\n    createRemoteStrapiSourceProvider,\r\n  },\r\n} = strapiDataTransfer;\r\n\r\ninterface CmdOptions {\r\n  from?: URL;\r\n  fromToken: string;\r\n  to: URL;\r\n  toToken: string;\r\n  verbose?: boolean;\r\n  only?: (keyof engineDataTransfer.TransferGroupFilter)[];\r\n  exclude?: (keyof engineDataTransfer.TransferGroupFilter)[];\r\n  throttle?: number;\r\n  force?: boolean;\r\n}\r\n/**\r\n * Transfer command.\r\n *\r\n * Transfers data between local Strapi and remote Strapi instances\r\n */\r\nexport default async (opts: CmdOptions) => {\r\n  // Validate inputs from Commander\r\n  if (!isObject(opts)) {\r\n    exitWith(1, 'Could not parse command arguments');\r\n  }\r\n\r\n  if (!(opts.from || opts.to) || (opts.from && opts.to)) {\r\n    exitWith(1, 'Exactly one source (from) or destination (to) option must be provided');\r\n  }\r\n\r\n  const strapi = await createStrapiInstance();\r\n  let source;\r\n  let destination;\r\n\r\n  // if no URL provided, use local Strapi\r\n  if (!opts.from) {\r\n    source = createLocalStrapiSourceProvider({\r\n      getStrapi: () => strapi,\r\n    });\r\n  }\r\n  // if URL provided, set up a remote source provider\r\n  else {\r\n    if (!opts.fromToken) {\r\n      exitWith(1, 'Missing token for remote destination');\r\n    }\r\n\r\n    source = createRemoteStrapiSourceProvider({\r\n      getStrapi: () => strapi,\r\n      url: opts.from,\r\n      auth: {\r\n        type: 'token',\r\n        token: opts.fromToken,\r\n      },\r\n    });\r\n  }\r\n\r\n  // if no URL provided, use local Strapi\r\n  if (!opts.to) {\r\n    destination = createLocalStrapiDestinationProvider({\r\n      getStrapi: () => strapi,\r\n      strategy: 'restore',\r\n      restore: parseRestoreFromOptions(opts),\r\n    });\r\n  }\r\n  // if URL provided, set up a remote destination provider\r\n  else {\r\n    if (!opts.toToken) {\r\n      exitWith(1, 'Missing token for remote destination');\r\n    }\r\n\r\n    destination = createRemoteStrapiDestinationProvider({\r\n      url: opts.to,\r\n      auth: {\r\n        type: 'token',\r\n        token: opts.toToken,\r\n      },\r\n      strategy: 'restore',\r\n      restore: parseRestoreFromOptions(opts),\r\n    });\r\n  }\r\n\r\n  if (!source || !destination) {\r\n    exitWith(1, 'Could not create providers');\r\n  }\r\n\r\n  const engine = createTransferEngine(source, destination, {\r\n    versionStrategy: 'exact',\r\n    schemaStrategy: 'strict',\r\n    exclude: opts.exclude,\r\n    only: opts.only,\r\n    throttle: opts.throttle,\r\n    transforms: {\r\n      links: [\r\n        {\r\n          filter(link) {\r\n            return (\r\n              !DEFAULT_IGNORED_CONTENT_TYPES.includes(link.left.type) &&\r\n              !DEFAULT_IGNORED_CONTENT_TYPES.includes(link.right.type)\r\n            );\r\n          },\r\n        },\r\n      ],\r\n      entities: [\r\n        {\r\n          filter(entity) {\r\n            return !DEFAULT_IGNORED_CONTENT_TYPES.includes(entity.type);\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  });\r\n\r\n  engine.diagnostics.onDiagnostic(formatDiagnostic('transfer', opts.verbose));\r\n\r\n  const progress = engine.progress.stream;\r\n\r\n  const { updateLoader } = loadersFactory();\r\n\r\n  engine.onSchemaDiff(getDiffHandler(engine, { force: opts.force, action: 'transfer' }));\r\n\r\n  engine.addErrorHandler(\r\n    'ASSETS_DIRECTORY_ERR',\r\n    getAssetsBackupHandler(engine, { force: opts.force, action: 'transfer' })\r\n  );\r\n\r\n  progress.on(`stage::start`, ({ stage, data }) => {\r\n    updateLoader(stage, data).start();\r\n  });\r\n\r\n  progress.on('stage::finish', ({ stage, data }) => {\r\n    updateLoader(stage, data).succeed();\r\n  });\r\n\r\n  progress.on('stage::progress', ({ stage, data }) => {\r\n    updateLoader(stage, data);\r\n  });\r\n\r\n  progress.on('stage::error', ({ stage, data }) => {\r\n    updateLoader(stage, data).fail();\r\n  });\r\n\r\n  progress.on('transfer::start', async () => {\r\n    console.log(`Starting transfer...`);\r\n\r\n    await strapi.telemetry.send('didDEITSProcessStart', getTransferTelemetryPayload(engine));\r\n  });\r\n\r\n  let results: Awaited<ReturnType<typeof engine.transfer>>;\r\n  try {\r\n    // Abort transfer if user interrupts process\r\n    setSignalHandler(() => abortTransfer({ engine, strapi }));\r\n\r\n    results = await engine.transfer();\r\n\r\n    // Note: we need to await telemetry or else the process ends before it is sent\r\n    await strapi.telemetry.send('didDEITSProcessFinish', getTransferTelemetryPayload(engine));\r\n\r\n    try {\r\n      const table = buildTransferTable(results.engine);\r\n      console.log(table?.toString());\r\n    } catch (e) {\r\n      console.error('There was an error displaying the results of the transfer.');\r\n    }\r\n\r\n    exitWith(0, exitMessageText('transfer'));\r\n  } catch (e) {\r\n    await strapi.telemetry.send('didDEITSProcessFail', getTransferTelemetryPayload(engine));\r\n    exitWith(1, exitMessageText('transfer', true));\r\n  }\r\n};\r\n"],"names":["engineDataTransfer","strapiDataTransfer","isObject","exitWith","createStrapiInstance","parseRestoreFromOptions","DEFAULT_IGNORED_CONTENT_TYPES","formatDiagnostic","loadersFactory","getDiffHandler","getAssetsBackupHandler","getTransferTelemetryPayload","setSignalHandler","abortTransfer","buildTransferTable","exitMessageText"],"mappings":"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"}