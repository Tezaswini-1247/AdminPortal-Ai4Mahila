{"version":3,"file":"helpers.js","sources":["../../../src/cli/utils/helpers.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\r\nimport chalk from 'chalk';\r\nimport { has, isString, isArray } from 'lodash/fp';\r\nimport { prompt } from 'inquirer';\r\nimport boxen from 'boxen';\r\nimport type { Command } from 'commander';\r\n\r\n/**\r\n * Helper functions for the Strapi CLI\r\n */\r\nconst bytesPerKb = 1024;\r\nconst sizes = ['B ', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n\r\n/**\r\n * Convert bytes to a human readable formatted string, for example \"1024\" becomes \"1KB\"\r\n */\r\nconst readableBytes = (bytes: number, decimals = 1, padStart = 0) => {\r\n  if (!bytes) {\r\n    return '0';\r\n  }\r\n  const i = Math.floor(Math.log(bytes) / Math.log(bytesPerKb));\r\n  const result = `${parseFloat((bytes / bytesPerKb ** i).toFixed(decimals))} ${sizes[i].padStart(\r\n    2\r\n  )}`;\r\n\r\n  return result.padStart(padStart);\r\n};\r\n\r\ninterface ExitWithOptions {\r\n  logger?: Console;\r\n  prc?: NodeJS.Process;\r\n}\r\n\r\n/**\r\n *\r\n * Display message(s) to console and then call process.exit with code.\r\n * If code is zero, console.log and green text is used for messages, otherwise console.error and red text.\r\n *\r\n */\r\nconst exitWith = (code: number, message?: string | string[], options: ExitWithOptions = {}) => {\r\n  const { logger = console, prc = process } = options;\r\n\r\n  const log = (message: string) => {\r\n    if (code === 0) {\r\n      logger.log(chalk.green(message));\r\n    } else {\r\n      logger.error(chalk.red(message));\r\n    }\r\n  };\r\n\r\n  if (isString(message)) {\r\n    log(message);\r\n  } else if (isArray(message)) {\r\n    message.forEach((msg) => log(msg));\r\n  }\r\n\r\n  prc.exit(code);\r\n};\r\n\r\n/**\r\n * assert that a URL object has a protocol value\r\n *\r\n */\r\nconst assertUrlHasProtocol = (url: URL, protocol?: string | string[]) => {\r\n  if (!url.protocol) {\r\n    exitWith(1, `${url.toString()} does not have a protocol`);\r\n  }\r\n\r\n  // if just checking for the existence of a protocol, return\r\n  if (!protocol) {\r\n    return;\r\n  }\r\n\r\n  if (isString(protocol)) {\r\n    if (protocol !== url.protocol) {\r\n      exitWith(1, `${url.toString()} must have the protocol ${protocol}`);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // assume an array\r\n  if (!protocol.some((protocol) => url.protocol === protocol)) {\r\n    return exitWith(\r\n      1,\r\n      `${url.toString()} must have one of the following protocols: ${protocol.join(',')}`\r\n    );\r\n  }\r\n};\r\n\r\ntype ConditionCallback = (opts: Record<string, any>) => Promise<boolean>;\r\ntype IsMetCallback = (command: Command) => Promise<void>;\r\ntype IsNotMetCallback = (command: Command) => Promise<void>;\r\n\r\n/**\r\n * Passes commander options to conditionCallback(). If it returns true, call isMetCallback otherwise call isNotMetCallback\r\n */\r\nconst ifOptions = (\r\n  conditionCallback: ConditionCallback,\r\n  isMetCallback: IsMetCallback = async () => {},\r\n  isNotMetCallback: IsNotMetCallback = async () => {}\r\n) => {\r\n  return async (command: Command) => {\r\n    const opts = command.opts();\r\n    if (await conditionCallback(opts)) {\r\n      await isMetCallback(command);\r\n    } else {\r\n      await isNotMetCallback(command);\r\n    }\r\n  };\r\n};\r\n\r\nconst assertCwdContainsStrapiProject = (name: string) => {\r\n  const logErrorAndExit = () => {\r\n    console.log(\r\n      `You need to run ${chalk.yellow(\r\n        `strapi ${name}`\r\n      )} in a Strapi project. Make sure you are in the right directory.`\r\n    );\r\n    process.exit(1);\r\n  };\r\n\r\n  try {\r\n    const pkgJSON = require(`${process.cwd()}/package.json`);\r\n    if (\r\n      !has('dependencies.@strapi/strapi', pkgJSON) &&\r\n      !has('devDependencies.@strapi/strapi', pkgJSON)\r\n    ) {\r\n      logErrorAndExit();\r\n    }\r\n  } catch (err) {\r\n    logErrorAndExit();\r\n  }\r\n};\r\n\r\nconst runAction =\r\n  (name: string, action: (...args: any[]) => Promise<void>) =>\r\n  (...args: unknown[]) => {\r\n    assertCwdContainsStrapiProject(name);\r\n\r\n    Promise.resolve()\r\n      .then(() => {\r\n        return action(...args);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        process.exit(1);\r\n      });\r\n  };\r\n\r\n/**\r\n * @description Notify users this is an experimental command and get them to approve first\r\n * this can be opted out by passing `yes` as a property of the args object.\r\n *\r\n * @example\r\n * ```ts\r\n * const { notifyExperimentalCommand } = require('../utils/helpers');\r\n *\r\n * const myCommand = async ({ force }) => {\r\n *  await notifyExperimentalCommand('plugin:build', { force });\r\n * }\r\n * ```\r\n */\r\nconst notifyExperimentalCommand = async (name: string, { force }: { force?: boolean } = {}) => {\r\n  console.log(\r\n    boxen(\r\n      `The ${chalk.bold(\r\n        chalk.underline(name)\r\n      )} command is considered experimental, use at your own risk.`,\r\n      {\r\n        title: 'Warning',\r\n        padding: 1,\r\n        margin: 1,\r\n        align: 'center',\r\n        borderColor: 'yellow',\r\n        borderStyle: 'bold',\r\n      }\r\n    )\r\n  );\r\n\r\n  if (!force) {\r\n    const { confirmed } = await prompt({\r\n      type: 'confirm',\r\n      name: 'confirmed',\r\n      message: 'Do you want to continue?',\r\n    });\r\n\r\n    if (!confirmed) {\r\n      process.exit(0);\r\n    }\r\n  }\r\n};\r\n\r\nexport {\r\n  exitWith,\r\n  assertUrlHasProtocol,\r\n  ifOptions,\r\n  readableBytes,\r\n  runAction,\r\n  assertCwdContainsStrapiProject,\r\n  notifyExperimentalCommand,\r\n};\r\n"],"names":["message","chalk","isString","isArray","protocol","has"],"mappings":"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"}