{"version":3,"file":"index-DE9YF9iS.js","sources":["../../admin/src/contexts/UsersPermissionsContext/index.jsx","../../admin/src/utils/formatPluginName.js","../../admin/src/components/Permissions/init.js","../../admin/src/components/Permissions/PermissionRow/CheckboxWrapper.jsx","../../admin/src/components/Permissions/PermissionRow/SubCategory.jsx","../../admin/src/components/Permissions/PermissionRow/index.jsx","../../admin/src/components/Permissions/reducer.js","../../admin/src/components/Permissions/index.jsx","../../admin/src/components/BoundRoute/getMethodColor.js","../../admin/src/components/BoundRoute/index.jsx","../../admin/src/components/Policies/index.jsx","../../admin/src/components/UsersPermissions/init.js","../../admin/src/components/UsersPermissions/reducer.js","../../admin/src/components/UsersPermissions/index.jsx","../../admin/src/pages/Roles/constants.js","../../admin/src/utils/cleanPermissions.js","../../admin/src/pages/Roles/hooks/usePlugins.js","../../admin/src/pages/Roles/pages/CreatePage.jsx","../../admin/src/pages/Roles/pages/EditPage.jsx","../../admin/src/pages/Roles/pages/ListPage/components/TableBody.jsx","../../admin/src/pages/Roles/pages/ListPage/index.jsx","../../admin/src/pages/Roles/index.jsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst UsersPermissions = createContext({});\r\n\r\nconst UsersPermissionsProvider = ({ children, value }) => {\r\n  return <UsersPermissions.Provider value={value}>{children}</UsersPermissions.Provider>;\r\n};\r\n\r\nconst useUsersPermissions = () => useContext(UsersPermissions);\r\n\r\nUsersPermissionsProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  value: PropTypes.object.isRequired,\r\n};\r\n\r\nexport { UsersPermissions, UsersPermissionsProvider, useUsersPermissions };\r\n","import upperFirst from 'lodash/upperFirst';\n\nfunction formatPluginName(pluginSlug) {\n  switch (pluginSlug) {\n    case 'application':\n      return 'Application';\n    case 'plugin::content-manager':\n      return 'Content manager';\n    case 'plugin::content-type-builder':\n      return 'Content types builder';\n    case 'plugin::documentation':\n      return 'Documentation';\n    case 'plugin::email':\n      return 'Email';\n    case 'plugin::i18n':\n      return 'i18n';\n    case 'plugin::upload':\n      return 'Upload';\n    case 'plugin::users-permissions':\n      return 'Users-permissions';\n    default:\n      return upperFirst(pluginSlug.replace('api::', '').replace('plugin::', ''));\n  }\n}\n\nexport default formatPluginName;\n","const init = (initialState, permissions) => {\n  const collapses = Object.keys(permissions)\n    .sort()\n    .map((name) => ({ name, isOpen: false }));\n\n  return { ...initialState, collapses };\n};\n\nexport default init;\n","import { Box } from '@strapi/design-system';\r\nimport { styled, css } from 'styled-components';\r\n\r\nconst activeCheckboxWrapperStyles = css`\r\n  background: ${(props) => props.theme.colors.primary100};\r\n\r\n  #cog {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst CheckboxWrapper = styled(Box)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  #cog {\r\n    opacity: 0;\r\n    path {\r\n      fill: ${(props) => props.theme.colors.primary600};\r\n    }\r\n  }\r\n\r\n  /* Show active style both on hover and when the action is selected */\r\n  ${(props) => props.isActive && activeCheckboxWrapperStyles}\r\n  &:hover {\r\n    ${activeCheckboxWrapperStyles}\r\n  }\r\n`;\r\n\r\nexport default CheckboxWrapper;\r\n","import React, { useCallback, useMemo } from 'react';\r\n\r\nimport { Box, Checkbox, Flex, Typography, Grid, VisuallyHidden } from '@strapi/design-system';\r\nimport { Cog } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useUsersPermissions } from '../../../contexts/UsersPermissionsContext';\r\n\r\nimport CheckboxWrapper from './CheckboxWrapper';\r\n\r\nconst Border = styled.div`\r\n  flex: 1;\r\n  align-self: center;\r\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n`;\r\n\r\nconst SubCategory = ({ subCategory }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { onChange, onChangeSelectAll, onSelectedAction, selectedAction, modifiedData } =\r\n    useUsersPermissions();\r\n\r\n  const currentScopedModifiedData = useMemo(() => {\r\n    return get(modifiedData, subCategory.name, {});\r\n  }, [modifiedData, subCategory]);\r\n\r\n  const hasAllActionsSelected = useMemo(() => {\r\n    return Object.values(currentScopedModifiedData).every((action) => action.enabled === true);\r\n  }, [currentScopedModifiedData]);\r\n\r\n  const hasSomeActionsSelected = useMemo(() => {\r\n    return (\r\n      Object.values(currentScopedModifiedData).some((action) => action.enabled === true) &&\r\n      !hasAllActionsSelected\r\n    );\r\n  }, [currentScopedModifiedData, hasAllActionsSelected]);\r\n\r\n  const handleChangeSelectAll = useCallback(\r\n    ({ target: { name } }) => {\r\n      onChangeSelectAll({ target: { name, value: !hasAllActionsSelected } });\r\n    },\r\n    [hasAllActionsSelected, onChangeSelectAll]\r\n  );\r\n\r\n  const isActionSelected = useCallback(\r\n    (actionName) => {\r\n      return selectedAction === actionName;\r\n    },\r\n    [selectedAction]\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Box paddingRight={4}>\r\n          <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n            {subCategory.label}\r\n          </Typography>\r\n        </Box>\r\n        <Border />\r\n        <Box paddingLeft={4}>\r\n          <Checkbox\r\n            name={subCategory.name}\r\n            checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\r\n            onCheckedChange={(value) =>\r\n              handleChangeSelectAll({ target: { name: subCategory.name, value } })\r\n            }\r\n          >\r\n            {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\r\n          </Checkbox>\r\n        </Box>\r\n      </Flex>\r\n      <Flex paddingTop={6} paddingBottom={6}>\r\n        <Grid.Root gap={2} style={{ flex: 1 }}>\r\n          {subCategory.actions.map((action) => {\r\n            const name = `${action.name}.enabled`;\r\n\r\n            return (\r\n              <Grid.Item col={6} key={action.name} direction=\"column\" alignItems=\"stretch\">\r\n                <CheckboxWrapper isActive={isActionSelected(action.name)} padding={2} hasRadius>\r\n                  <Checkbox\r\n                    checked={get(modifiedData, name, false)}\r\n                    name={name}\r\n                    onCheckedChange={(value) => onChange({ target: { name, value } })}\r\n                  >\r\n                    {action.label}\r\n                  </Checkbox>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => onSelectedAction(action.name)}\r\n                    style={{ display: 'inline-flex', alignItems: 'center' }}\r\n                  >\r\n                    <VisuallyHidden tag=\"span\">\r\n                      {formatMessage(\r\n                        {\r\n                          id: 'app.utils.show-bound-route',\r\n                          defaultMessage: 'Show bound route for {route}',\r\n                        },\r\n                        {\r\n                          route: action.name,\r\n                        }\r\n                      )}\r\n                    </VisuallyHidden>\r\n                    <Cog id=\"cog\" />\r\n                  </button>\r\n                </CheckboxWrapper>\r\n              </Grid.Item>\r\n            );\r\n          })}\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nSubCategory.propTypes = {\r\n  subCategory: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SubCategory;\r\n","import React, { useMemo } from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport sortBy from 'lodash/sortBy';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SubCategory from './SubCategory';\r\n\r\nconst PermissionRow = ({ name, permissions }) => {\r\n  const subCategories = useMemo(() => {\r\n    return sortBy(\r\n      Object.values(permissions.controllers).reduce((acc, curr, index) => {\r\n        const currentName = `${name}.controllers.${Object.keys(permissions.controllers)[index]}`;\r\n        const actions = sortBy(\r\n          Object.keys(curr).reduce((acc, current) => {\r\n            return [\r\n              ...acc,\r\n              {\r\n                ...curr[current],\r\n                label: current,\r\n                name: `${currentName}.${current}`,\r\n              },\r\n            ];\r\n          }, []),\r\n          'label'\r\n        );\r\n\r\n        return [\r\n          ...acc,\r\n          {\r\n            actions,\r\n            label: Object.keys(permissions.controllers)[index],\r\n            name: currentName,\r\n          },\r\n        ];\r\n      }, []),\r\n      'label'\r\n    );\r\n  }, [name, permissions]);\r\n\r\n  return (\r\n    <Box padding={6}>\r\n      {subCategories.map((subCategory) => (\r\n        <SubCategory key={subCategory.name} subCategory={subCategory} />\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nPermissionRow.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  permissions: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default PermissionRow;\r\n","import { produce } from 'immer';\n\nconst initialState = {\n  collapses: [],\n};\n\nconst reducer = (state, action) =>\n  // eslint-disable-next-line consistent-return\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'TOGGLE_COLLAPSE': {\n        draftState.collapses = state.collapses.map((collapse, index) => {\n          if (index === action.index) {\n            return { ...collapse, isOpen: !collapse.isOpen };\n          }\n\n          return { ...collapse, isOpen: false };\n        });\n\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nexport { initialState, reducer };\n","import React, { useReducer } from 'react';\r\n\r\nimport { Accordion, Flex } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useUsersPermissions } from '../../contexts/UsersPermissionsContext';\r\nimport formatPluginName from '../../utils/formatPluginName';\r\n\r\nimport init from './init';\r\nimport PermissionRow from './PermissionRow';\r\nimport { initialState, reducer } from './reducer';\r\n\r\nconst Permissions = () => {\r\n  const { modifiedData } = useUsersPermissions();\r\n  const { formatMessage } = useIntl();\r\n  const [{ collapses }] = useReducer(reducer, initialState, (state) => init(state, modifiedData));\r\n\r\n  return (\r\n    <Accordion.Root size=\"M\">\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n        {collapses.map((collapse, index) => (\r\n          <Accordion.Item key={collapse.name} value={collapse.name}>\r\n            <Accordion.Header variant={index % 2 === 0 ? 'secondary' : undefined}>\r\n              <Accordion.Trigger\r\n                caretPosition=\"right\"\r\n                description={formatMessage(\r\n                  {\r\n                    id: 'users-permissions.Plugin.permissions.plugins.description',\r\n                    defaultMessage: 'Define all allowed actions for the {name} plugin.',\r\n                  },\r\n                  { name: collapse.name }\r\n                )}\r\n              >\r\n                {formatPluginName(collapse.name)}\r\n              </Accordion.Trigger>\r\n            </Accordion.Header>\r\n            <Accordion.Content>\r\n              <PermissionRow permissions={modifiedData[collapse.name]} name={collapse.name} />\r\n            </Accordion.Content>\r\n          </Accordion.Item>\r\n        ))}\r\n      </Flex>\r\n    </Accordion.Root>\r\n  );\r\n};\r\n\r\nexport default Permissions;\r\n","const getMethodColor = (verb) => {\n  switch (verb) {\n    case 'POST': {\n      return {\n        text: 'success600',\n        border: 'success200',\n        background: 'success100',\n      };\n    }\n    case 'GET': {\n      return {\n        text: 'secondary600',\n        border: 'secondary200',\n        background: 'secondary100',\n      };\n    }\n    case 'PUT': {\n      return {\n        text: 'warning600',\n        border: 'warning200',\n        background: 'warning100',\n      };\n    }\n    case 'DELETE': {\n      return {\n        text: 'danger600',\n        border: 'danger200',\n        background: 'danger100',\n      };\n    }\n    default: {\n      return {\n        text: 'neutral600',\n        border: 'neutral200',\n        background: 'neutral100',\n      };\n    }\n  }\n};\n\nexport default getMethodColor;\n","import React from 'react';\r\n\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport map from 'lodash/map';\r\nimport tail from 'lodash/tail';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport getMethodColor from './getMethodColor';\r\n\r\nconst MethodBox = styled(Box)`\r\n  margin: -1px;\r\n  border-radius: ${({ theme }) => theme.spaces[1]} 0 0 ${({ theme }) => theme.spaces[1]};\r\n`;\r\n\r\nfunction BoundRoute({ route }) {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { method, handler: title, path } = route;\r\n  const formattedRoute = path ? tail(path.split('/')) : [];\r\n  const [controller = '', action = ''] = title ? title.split('.') : [];\r\n  const colors = getMethodColor(route.method);\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <Typography variant=\"delta\" tag=\"h3\">\r\n        {formatMessage({\r\n          id: 'users-permissions.BoundRoute.title',\r\n          defaultMessage: 'Bound route to',\r\n        })}\r\n        &nbsp;\r\n        <span>{controller}</span>\r\n        <Typography variant=\"delta\" textColor=\"primary600\">\r\n          .{action}\r\n        </Typography>\r\n      </Typography>\r\n      <Flex hasRadius background=\"neutral0\" borderColor=\"neutral200\" gap={0}>\r\n        <MethodBox background={colors.background} borderColor={colors.border} padding={2}>\r\n          <Typography fontWeight=\"bold\" textColor={colors.text}>\r\n            {method}\r\n          </Typography>\r\n        </MethodBox>\r\n        <Box paddingLeft={2} paddingRight={2}>\r\n          {map(formattedRoute, (value) => (\r\n            <Typography key={value} textColor={value.includes(':') ? 'neutral600' : 'neutral900'}>\r\n              /{value}\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nBoundRoute.defaultProps = {\r\n  route: {\r\n    handler: 'Nocontroller.error',\r\n    method: 'GET',\r\n    path: '/there-is-no-path',\r\n  },\r\n};\r\n\r\nBoundRoute.propTypes = {\r\n  route: PropTypes.shape({\r\n    handler: PropTypes.string,\r\n    method: PropTypes.string,\r\n    path: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default BoundRoute;\r\n","import React from 'react';\r\n\r\nimport { Flex, Grid, Typography } from '@strapi/design-system';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport without from 'lodash/without';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useUsersPermissions } from '../../contexts/UsersPermissionsContext';\r\nimport BoundRoute from '../BoundRoute';\r\n\r\nconst Policies = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { selectedAction, routes } = useUsersPermissions();\r\n\r\n  const path = without(selectedAction.split('.'), 'controllers');\r\n  const controllerRoutes = get(routes, path[0]);\r\n  const pathResolved = path.slice(1).join('.');\r\n\r\n  const displayedRoutes = isEmpty(controllerRoutes)\r\n    ? []\r\n    : controllerRoutes.filter((o) => o.handler.endsWith(pathResolved));\r\n\r\n  return (\r\n    <Grid.Item\r\n      col={5}\r\n      background=\"neutral150\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n      style={{ minHeight: '100%' }}\r\n      direction=\"column\"\r\n      alignItems=\"stretch\"\r\n    >\r\n      {selectedAction ? (\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          {displayedRoutes.map((route, key) => (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <BoundRoute key={key} route={route} />\r\n          ))}\r\n        </Flex>\r\n      ) : (\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          <Typography variant=\"delta\" tag=\"h3\">\r\n            {formatMessage({\r\n              id: 'users-permissions.Policies.header.title',\r\n              defaultMessage: 'Advanced settings',\r\n            })}\r\n          </Typography>\r\n          <Typography tag=\"p\" textColor=\"neutral600\">\r\n            {formatMessage({\r\n              id: 'users-permissions.Policies.header.hint',\r\n              defaultMessage:\r\n                \"Select the application's actions or the plugin's actions and click on the cog icon to display the bound route\",\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n      )}\r\n    </Grid.Item>\r\n  );\r\n};\r\n\r\nexport default Policies;\r\n","const init = (state, permissions, routes) => {\n  return {\n    ...state,\n    initialData: permissions,\n    modifiedData: permissions,\n    routes,\n  };\n};\n\nexport default init;\n","/* eslint-disable consistent-return */\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport take from 'lodash/take';\n\nexport const initialState = {\n  initialData: {},\n  modifiedData: {},\n  routes: {},\n  selectedAction: '',\n  policies: [],\n};\n\nconst reducer = (state, action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'ON_CHANGE': {\n        const keysLength = action.keys.length;\n        const isChangingCheckbox = action.keys[keysLength - 1] === 'enabled';\n\n        if (action.value && isChangingCheckbox) {\n          const selectedAction = take(action.keys, keysLength - 1).join('.');\n          draftState.selectedAction = selectedAction;\n        }\n\n        set(draftState, ['modifiedData', ...action.keys], action.value);\n        break;\n      }\n      case 'ON_CHANGE_SELECT_ALL': {\n        const pathToValue = ['modifiedData', ...action.keys];\n        const oldValues = get(state, pathToValue, {});\n        const updatedValues = Object.keys(oldValues).reduce((acc, current) => {\n          acc[current] = { ...oldValues[current], enabled: action.value };\n\n          return acc;\n        }, {});\n\n        set(draftState, pathToValue, updatedValues);\n\n        break;\n      }\n      case 'ON_RESET': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'ON_SUBMIT_SUCCEEDED': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n\n      case 'SELECT_ACTION': {\n        const { actionToSelect } = action;\n        draftState.selectedAction = actionToSelect === state.selectedAction ? '' : actionToSelect;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nexport default reducer;\n","import React, { forwardRef, memo, useImperativeHandle, useReducer } from 'react';\r\n\r\nimport { Flex, Grid, Typography } from '@strapi/design-system';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { UsersPermissionsProvider } from '../../contexts/UsersPermissionsContext';\r\nimport getTrad from '../../utils/getTrad';\r\nimport Permissions from '../Permissions';\r\nimport Policies from '../Policies';\r\n\r\nimport init from './init';\r\nimport reducer, { initialState } from './reducer';\r\n\r\nconst UsersPermissions = forwardRef(({ permissions, routes }, ref) => {\r\n  const { formatMessage } = useIntl();\r\n  const [state, dispatch] = useReducer(reducer, initialState, (state) =>\r\n    init(state, permissions, routes)\r\n  );\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    getPermissions() {\r\n      return {\r\n        permissions: state.modifiedData,\r\n      };\r\n    },\r\n    resetForm() {\r\n      dispatch({ type: 'ON_RESET' });\r\n    },\r\n    setFormAfterSubmit() {\r\n      dispatch({ type: 'ON_SUBMIT_SUCCEEDED' });\r\n    },\r\n  }));\r\n\r\n  const handleChange = ({ target: { name, value } }) =>\r\n    dispatch({\r\n      type: 'ON_CHANGE',\r\n      keys: name.split('.'),\r\n      value: value === 'empty__string_value' ? '' : value,\r\n    });\r\n\r\n  const handleChangeSelectAll = ({ target: { name, value } }) =>\r\n    dispatch({\r\n      type: 'ON_CHANGE_SELECT_ALL',\r\n      keys: name.split('.'),\r\n      value,\r\n    });\r\n\r\n  const handleSelectedAction = (actionToSelect) =>\r\n    dispatch({\r\n      type: 'SELECT_ACTION',\r\n      actionToSelect,\r\n    });\r\n\r\n  const providerValue = {\r\n    ...state,\r\n    onChange: handleChange,\r\n    onChangeSelectAll: handleChangeSelectAll,\r\n    onSelectedAction: handleSelectedAction,\r\n  };\r\n\r\n  return (\r\n    <UsersPermissionsProvider value={providerValue}>\r\n      <Grid.Root gap={0} shadow=\"filterShadow\" hasRadius background=\"neutral0\">\r\n        <Grid.Item\r\n          col={7}\r\n          paddingTop={6}\r\n          paddingBottom={6}\r\n          paddingLeft={7}\r\n          paddingRight={7}\r\n          direction=\"column\"\r\n          alignItems=\"stretch\"\r\n        >\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n              <Typography variant=\"delta\" tag=\"h2\">\r\n                {formatMessage({\r\n                  id: getTrad('Plugins.header.title'),\r\n                  defaultMessage: 'Permissions',\r\n                })}\r\n              </Typography>\r\n              <Typography tag=\"p\" textColor=\"neutral600\">\r\n                {formatMessage({\r\n                  id: getTrad('Plugins.header.description'),\r\n                  defaultMessage: 'Only actions bound by a route are listed below.',\r\n                })}\r\n              </Typography>\r\n            </Flex>\r\n            <Permissions />\r\n          </Flex>\r\n        </Grid.Item>\r\n        <Policies />\r\n      </Grid.Root>\r\n    </UsersPermissionsProvider>\r\n  );\r\n});\r\n\r\nUsersPermissions.propTypes = {\r\n  permissions: PropTypes.object.isRequired,\r\n  routes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default memo(UsersPermissions);\r\n","import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nexport const createRoleSchema = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().required(translatedErrors.required.id),\n});\n","import isEmpty from 'lodash/isEmpty';\n\nconst cleanPermissions = (permissions) =>\n  Object.keys(permissions).reduce((acc, current) => {\n    const currentPermission = permissions[current].controllers;\n    const cleanedControllers = Object.keys(currentPermission).reduce((acc2, curr) => {\n      if (isEmpty(currentPermission[curr])) {\n        return acc2;\n      }\n\n      acc2[curr] = currentPermission[curr];\n\n      return acc2;\n    }, {});\n\n    if (isEmpty(cleanedControllers)) {\n      return acc;\n    }\n\n    acc[current] = { controllers: cleanedControllers };\n\n    return acc;\n  }, {});\n\nexport default cleanPermissions;\n","import { useEffect } from 'react';\n\nimport { useAPIErrorHandler, useNotification, useFetchClient } from '@strapi/strapi/admin';\nimport { useQueries } from 'react-query';\n\nimport { cleanPermissions, getTrad } from '../../../utils';\n\nexport const usePlugins = () => {\n  const { toggleNotification } = useNotification();\n  const { get } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler(getTrad);\n\n  const [\n    {\n      data: permissions,\n      isLoading: isLoadingPermissions,\n      error: permissionsError,\n      refetch: refetchPermissions,\n    },\n    { data: routes, isLoading: isLoadingRoutes, error: routesError, refetch: refetchRoutes },\n  ] = useQueries([\n    {\n      queryKey: ['users-permissions', 'permissions'],\n      async queryFn() {\n        const {\n          data: { permissions },\n        } = await get(`/users-permissions/permissions`);\n\n        return permissions;\n      },\n    },\n    {\n      queryKey: ['users-permissions', 'routes'],\n      async queryFn() {\n        const {\n          data: { routes },\n        } = await get(`/users-permissions/routes`);\n\n        return routes;\n      },\n    },\n  ]);\n\n  const refetchQueries = async () => {\n    await Promise.all([refetchPermissions(), refetchRoutes()]);\n  };\n\n  useEffect(() => {\n    if (permissionsError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(permissionsError),\n      });\n    }\n  }, [toggleNotification, permissionsError, formatAPIError]);\n\n  useEffect(() => {\n    if (routesError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(routesError),\n      });\n    }\n  }, [toggleNotification, routesError, formatAPIError]);\n\n  const isLoading = isLoadingPermissions || isLoadingRoutes;\n\n  return {\n    // TODO: these return values need to be memoized, otherwise\n    // they will create infinite rendering loops when used as\n    // effect dependencies\n    permissions: permissions ? cleanPermissions(permissions) : {},\n    routes: routes ?? {},\n\n    getData: refetchQueries,\n    isLoading,\n  };\n};\n","import * as React from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Flex,\r\n  Grid,\r\n  Main,\r\n  Textarea,\r\n  TextInput,\r\n  Typography,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { Page, useTracking, useNotification, useFetchClient, Layouts } from '@strapi/strapi/admin';\r\nimport { Formik, Form } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation } from 'react-query';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport UsersPermissions from '../../../components/UsersPermissions';\r\nimport { PERMISSIONS } from '../../../constants';\r\nimport getTrad from '../../../utils/getTrad';\r\nimport { createRoleSchema } from '../constants';\r\nimport { usePlugins } from '../hooks/usePlugins';\r\n\r\nexport const CreatePage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const navigate = useNavigate();\r\n  const { isLoading: isLoadingPlugins, permissions, routes } = usePlugins();\r\n  const { trackUsage } = useTracking();\r\n  const permissionsRef = React.useRef();\r\n  const { post } = useFetchClient();\r\n  const mutation = useMutation((body) => post(`/users-permissions/roles`, body), {\r\n    onError() {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    },\r\n\r\n    onSuccess() {\r\n      trackUsage('didCreateRole');\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTrad('Settings.roles.created'),\r\n          defaultMessage: 'Role created',\r\n        }),\r\n      });\r\n\r\n      // Forcing redirecting since we don't have the id in the response\r\n      navigate(-1);\r\n    },\r\n  });\r\n\r\n  const handleCreateRoleSubmit = async (data) => {\r\n    // TODO: refactor. Child -> parent component communication is evil;\r\n    // We should either move the provider one level up or move the state\r\n    // straight into redux.\r\n    const permissions = permissionsRef.current.getPermissions();\r\n\r\n    await mutation.mutate({ ...data, ...permissions, users: [] });\r\n  };\r\n\r\n  return (\r\n    <Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          { name: 'Roles' }\r\n        )}\r\n      </Page.Title>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{ name: '', description: '' }}\r\n        onSubmit={handleCreateRoleSubmit}\r\n        validationSchema={createRoleSchema}\r\n      >\r\n        {({ handleSubmit, values, handleChange, errors }) => (\r\n          <Form noValidate onSubmit={handleSubmit}>\r\n            <Layouts.Header\r\n              primaryAction={\r\n                !isLoadingPlugins && (\r\n                  <Button type=\"submit\" loading={mutation.isLoading} startIcon={<Check />}>\r\n                    {formatMessage({\r\n                      id: 'global.save',\r\n                      defaultMessage: 'Save',\r\n                    })}\r\n                  </Button>\r\n                )\r\n              }\r\n              title={formatMessage({\r\n                id: 'Settings.roles.create.title',\r\n                defaultMessage: 'Create a role',\r\n              })}\r\n              subtitle={formatMessage({\r\n                id: 'Settings.roles.create.description',\r\n                defaultMessage: 'Define the rights given to the role',\r\n              })}\r\n            />\r\n            <Layouts.Content>\r\n              <Flex\r\n                background=\"neutral0\"\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                gap={7}\r\n                hasRadius\r\n                paddingTop={6}\r\n                paddingBottom={6}\r\n                paddingLeft={7}\r\n                paddingRight={7}\r\n                shadow=\"filterShadow\"\r\n              >\r\n                <Flex direction=\"column\" alignItems=\"stretch\">\r\n                  <Typography variant=\"delta\" tag=\"h2\">\r\n                    {formatMessage({\r\n                      id: getTrad('EditPage.form.roles'),\r\n                      defaultMessage: 'Role details',\r\n                    })}\r\n                  </Typography>\r\n\r\n                  <Grid.Root gap={4}>\r\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        name=\"name\"\r\n                        error={\r\n                          errors?.name\r\n                            ? formatMessage({ id: errors.name, defaultMessage: 'Name is required' })\r\n                            : false\r\n                        }\r\n                        required\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: 'global.name',\r\n                            defaultMessage: 'Name',\r\n                          })}\r\n                        </Field.Label>\r\n                        <TextInput value={values.name || ''} onChange={handleChange} />\r\n                        <Field.Error />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        name=\"description\"\r\n                        error={\r\n                          errors?.description\r\n                            ? formatMessage({\r\n                                id: errors.description,\r\n                                defaultMessage: 'Description is required',\r\n                              })\r\n                            : false\r\n                        }\r\n                        required\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: 'global.description',\r\n                            defaultMessage: 'Description',\r\n                          })}\r\n                        </Field.Label>\r\n                        <Textarea value={values.description || ''} onChange={handleChange} />\r\n                        <Field.Error />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                  </Grid.Root>\r\n                </Flex>\r\n\r\n                {!isLoadingPlugins && (\r\n                  <UsersPermissions\r\n                    ref={permissionsRef}\r\n                    permissions={permissions}\r\n                    routes={routes}\r\n                  />\r\n                )}\r\n              </Flex>\r\n            </Layouts.Content>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport const ProtectedRolesCreatePage = () => (\r\n  <Page.Protect permissions={PERMISSIONS.createRole}>\r\n    <CreatePage />\r\n  </Page.Protect>\r\n);\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Main,\r\n  Button,\r\n  Flex,\r\n  TextInput,\r\n  Textarea,\r\n  Typography,\r\n  Grid,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport {\r\n  Page,\r\n  BackButton,\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useFetchClient,\r\n  Layouts,\r\n} from '@strapi/strapi/admin';\r\nimport { Formik, Form } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { useQuery, useMutation } from 'react-query';\r\nimport { useMatch } from 'react-router-dom';\r\n\r\nimport UsersPermissions from '../../../components/UsersPermissions';\r\nimport { PERMISSIONS } from '../../../constants';\r\nimport getTrad from '../../../utils/getTrad';\r\nimport { createRoleSchema } from '../constants';\r\nimport { usePlugins } from '../hooks/usePlugins';\r\n\r\nexport const EditPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    params: { id },\r\n  } = useMatch(`/settings/users-permissions/roles/:id`);\r\n  const { get } = useFetchClient();\r\n  const { isLoading: isLoadingPlugins, routes } = usePlugins();\r\n  const {\r\n    data: role,\r\n    isLoading: isLoadingRole,\r\n    refetch: refetchRole,\r\n  } = useQuery(['users-permissions', 'role', id], async () => {\r\n    // TODO: why doesn't this endpoint follow the admin API conventions?\r\n    const {\r\n      data: { role },\r\n    } = await get(`/users-permissions/roles/${id}`);\r\n\r\n    return role;\r\n  });\r\n\r\n  const permissionsRef = React.useRef();\r\n  const { put } = useFetchClient();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const mutation = useMutation((body) => put(`/users-permissions/roles/${id}`, body), {\r\n    onError(error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    },\r\n\r\n    async onSuccess() {\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: getTrad('Settings.roles.created'),\r\n          defaultMessage: 'Role edited',\r\n        }),\r\n      });\r\n\r\n      await refetchRole();\r\n    },\r\n  });\r\n\r\n  const handleEditRoleSubmit = async (data) => {\r\n    const permissions = permissionsRef.current.getPermissions();\r\n\r\n    await mutation.mutate({ ...data, ...permissions, users: [] });\r\n  };\r\n\r\n  if (isLoadingRole) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          { name: 'Roles' }\r\n        )}\r\n      </Page.Title>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{ name: role.name, description: role.description }}\r\n        onSubmit={handleEditRoleSubmit}\r\n        validationSchema={createRoleSchema}\r\n      >\r\n        {({ handleSubmit, values, handleChange, errors }) => (\r\n          <Form noValidate onSubmit={handleSubmit}>\r\n            <Layouts.Header\r\n              primaryAction={\r\n                !isLoadingPlugins ? (\r\n                  <Button\r\n                    disabled={role.code === 'strapi-super-admin'}\r\n                    type=\"submit\"\r\n                    loading={mutation.isLoading}\r\n                    startIcon={<Check />}\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'global.save',\r\n                      defaultMessage: 'Save',\r\n                    })}\r\n                  </Button>\r\n                ) : null\r\n              }\r\n              title={role.name}\r\n              subtitle={role.description}\r\n              navigationAction={<BackButton fallback=\"..\" />}\r\n            />\r\n            <Layouts.Content>\r\n              <Flex\r\n                background=\"neutral0\"\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                gap={7}\r\n                hasRadius\r\n                paddingTop={6}\r\n                paddingBottom={6}\r\n                paddingLeft={7}\r\n                paddingRight={7}\r\n                shadow=\"filterShadow\"\r\n              >\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                  <Typography variant=\"delta\" tag=\"h2\">\r\n                    {formatMessage({\r\n                      id: getTrad('EditPage.form.roles'),\r\n                      defaultMessage: 'Role details',\r\n                    })}\r\n                  </Typography>\r\n\r\n                  <Grid.Root gap={4}>\r\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        name=\"name\"\r\n                        error={\r\n                          errors?.name\r\n                            ? formatMessage({\r\n                                id: errors.name,\r\n                                defaultMessage: 'Name is required',\r\n                              })\r\n                            : false\r\n                        }\r\n                        required\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: 'global.name',\r\n                            defaultMessage: 'Name',\r\n                          })}\r\n                        </Field.Label>\r\n                        <TextInput value={values.name || ''} onChange={handleChange} />\r\n                        <Field.Error />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n                      <Field.Root\r\n                        name=\"description\"\r\n                        error={\r\n                          errors?.description\r\n                            ? formatMessage({\r\n                                id: errors.description,\r\n                                defaultMessage: 'Description is required',\r\n                              })\r\n                            : false\r\n                        }\r\n                        required\r\n                      >\r\n                        <Field.Label>\r\n                          {formatMessage({\r\n                            id: 'global.description',\r\n                            defaultMessage: 'Description',\r\n                          })}\r\n                        </Field.Label>\r\n                        <Textarea value={values.description || ''} onChange={handleChange} />\r\n                        <Field.Error />\r\n                      </Field.Root>\r\n                    </Grid.Item>\r\n                  </Grid.Root>\r\n                </Flex>\r\n\r\n                {!isLoadingPlugins && (\r\n                  <UsersPermissions\r\n                    ref={permissionsRef}\r\n                    permissions={role.permissions}\r\n                    routes={routes}\r\n                  />\r\n                )}\r\n              </Flex>\r\n            </Layouts.Content>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport const ProtectedRolesEditPage = () => (\r\n  <Page.Protect permissions={PERMISSIONS.updateRole}>\r\n    <EditPage />\r\n  </Page.Protect>\r\n);\r\n","import React from 'react';\r\n\r\nimport { Flex, IconButton, Link, Tbody, Td, Tr, Typography } from '@strapi/design-system';\r\nimport { Pencil, Trash } from '@strapi/icons';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nconst EditLink = styled(Link)`\r\n  align-items: center;\r\n  height: 3.2rem;\r\n  width: 3.2rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: ${({ theme }) => `${theme.spaces[2]}`};\r\n\r\n  svg {\r\n    height: 1.6rem;\r\n    width: 1.6rem;\r\n\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.neutral800};\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst TableBody = ({ sortedRoles, canDelete, canUpdate, setRoleToDelete, onDelete }) => {\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const [showConfirmDelete, setShowConfirmDelete] = onDelete;\r\n\r\n  const checkCanDeleteRole = (role) =>\r\n    canDelete && !['public', 'authenticated'].includes(role.type);\r\n\r\n  const handleClickDelete = (id) => {\r\n    setRoleToDelete(id);\r\n    setShowConfirmDelete(!showConfirmDelete);\r\n  };\r\n\r\n  return (\r\n    <Tbody>\r\n      {sortedRoles?.map((role) => (\r\n        <Tr key={role.name} onClick={() => navigate(role.id.toString())}>\r\n          <Td width=\"20%\">\r\n            <Typography>{role.name}</Typography>\r\n          </Td>\r\n          <Td width=\"50%\">\r\n            <Typography>{role.description}</Typography>\r\n          </Td>\r\n          <Td width=\"30%\">\r\n            <Typography>\r\n              {formatMessage(\r\n                {\r\n                  id: 'Roles.RoleRow.user-count',\r\n                  defaultMessage: '{number, plural, =0 {# user} one {# user} other {# users}}',\r\n                },\r\n                { number: role.nb_users }\r\n              )}\r\n            </Typography>\r\n          </Td>\r\n          <Td>\r\n            <Flex justifyContent=\"end\" onClick={(e) => e.stopPropagation()}>\r\n              {canUpdate ? (\r\n                <EditLink\r\n                  tag={NavLink}\r\n                  to={role.id.toString()}\r\n                  aria-label={formatMessage(\r\n                    { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\r\n                    { target: `${role.name}` }\r\n                  )}\r\n                >\r\n                  <Pencil />\r\n                </EditLink>\r\n              ) : null}\r\n\r\n              {checkCanDeleteRole(role) && (\r\n                <IconButton\r\n                  onClick={() => handleClickDelete(role.id.toString())}\r\n                  variant=\"ghost\"\r\n                  label={formatMessage(\r\n                    { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\r\n                    { target: `${role.name}` }\r\n                  )}\r\n                >\r\n                  <Trash />\r\n                </IconButton>\r\n              )}\r\n            </Flex>\r\n          </Td>\r\n        </Tr>\r\n      ))}\r\n    </Tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n\r\nTableBody.defaultProps = {\r\n  canDelete: false,\r\n  canUpdate: false,\r\n};\r\n\r\nTableBody.propTypes = {\r\n  onDelete: PropTypes.array.isRequired,\r\n  setRoleToDelete: PropTypes.func.isRequired,\r\n  sortedRoles: PropTypes.array.isRequired,\r\n  canDelete: PropTypes.bool,\r\n  canUpdate: PropTypes.bool,\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  Table,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n  useNotifyAT,\r\n  VisuallyHidden,\r\n  EmptyStateLayout,\r\n  useCollator,\r\n  useFilter,\r\n  LinkButton,\r\n  Dialog,\r\n} from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport {\r\n  ConfirmDialog,\r\n  useTracking,\r\n  Page,\r\n  SearchInput,\r\n  useNotification,\r\n  useQueryParams,\r\n  useFetchClient,\r\n  useRBAC,\r\n  Layouts,\r\n} from '@strapi/strapi/admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { PERMISSIONS } from '../../../../constants';\r\nimport { getTrad } from '../../../../utils';\r\n\r\nimport TableBody from './components/TableBody';\r\n\r\nexport const RolesListPage = () => {\r\n  const { trackUsage } = useTracking();\r\n  const { formatMessage, locale } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { notifyStatus } = useNotifyAT();\r\n  const [{ query }] = useQueryParams();\r\n  const _q = query?._q || '';\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n  const [roleToDelete, setRoleToDelete] = useState();\r\n  const { del, get } = useFetchClient();\r\n\r\n  const {\r\n    isLoading: isLoadingForPermissions,\r\n    allowedActions: { canRead, canDelete, canCreate, canUpdate },\r\n  } = useRBAC({\r\n    create: PERMISSIONS.createRole,\r\n    read: PERMISSIONS.readRoles,\r\n    update: PERMISSIONS.updateRole,\r\n    delete: PERMISSIONS.deleteRole,\r\n  });\r\n\r\n  const {\r\n    isLoading: isLoadingForData,\r\n    data: { roles },\r\n    isFetching,\r\n    refetch,\r\n  } = useQuery('get-roles', () => fetchData(toggleNotification, formatMessage, notifyStatus), {\r\n    initialData: {},\r\n    enabled: canRead,\r\n  });\r\n\r\n  const { contains } = useFilter(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  /**\r\n   * @type {Intl.Collator}\r\n   */\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const isLoading = isLoadingForData || isFetching || isLoadingForPermissions;\r\n\r\n  const handleShowConfirmDelete = () => {\r\n    setShowConfirmDelete(!showConfirmDelete);\r\n  };\r\n\r\n  const deleteData = async (id, formatMessage, toggleNotification) => {\r\n    try {\r\n      await del(`/users-permissions/roles/${id}`);\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchData = async (toggleNotification, formatMessage, notifyStatus) => {\r\n    try {\r\n      const { data } = await get('/users-permissions/roles');\r\n      notifyStatus('The roles have loaded successfully');\r\n\r\n      return data;\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n\r\n      throw new Error(err);\r\n    }\r\n  };\r\n\r\n  const emptyLayout = {\r\n    roles: {\r\n      id: getTrad('Roles.empty'),\r\n      defaultMessage: \"You don't have any roles yet.\",\r\n    },\r\n    search: {\r\n      id: getTrad('Roles.empty.search'),\r\n      defaultMessage: 'No roles match the search.',\r\n    },\r\n  };\r\n\r\n  const pageTitle = formatMessage({\r\n    id: 'global.roles',\r\n    defaultMessage: 'Roles',\r\n  });\r\n\r\n  const deleteMutation = useMutation((id) => deleteData(id, formatMessage, toggleNotification), {\r\n    async onSuccess() {\r\n      await refetch();\r\n    },\r\n  });\r\n\r\n  const handleConfirmDelete = async () => {\r\n    await deleteMutation.mutateAsync(roleToDelete);\r\n    setShowConfirmDelete(!showConfirmDelete);\r\n  };\r\n\r\n  const sortedRoles = (roles || [])\r\n    .filter((role) => contains(role.name, _q) || contains(role.description, _q))\r\n    .sort(\r\n      (a, b) => formatter.compare(a.name, b.name) || formatter.compare(a.description, b.description)\r\n    );\r\n\r\n  const emptyContent = _q && !sortedRoles.length ? 'search' : 'roles';\r\n\r\n  const colCount = 4;\r\n  const rowCount = (roles?.length || 0) + 1;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          { name: pageTitle }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main>\r\n        <Layouts.Header\r\n          title={formatMessage({\r\n            id: 'global.roles',\r\n            defaultMessage: 'Roles',\r\n          })}\r\n          subtitle={formatMessage({\r\n            id: 'Settings.roles.list.description',\r\n            defaultMessage: 'List of roles',\r\n          })}\r\n          primaryAction={\r\n            canCreate ? (\r\n              <LinkButton\r\n                to=\"new\"\r\n                tag={NavLink}\r\n                onClick={() => trackUsage('willCreateRole')}\r\n                startIcon={<Plus />}\r\n                size=\"S\"\r\n              >\r\n                {formatMessage({\r\n                  id: getTrad('List.button.roles'),\r\n                  defaultMessage: 'Add new role',\r\n                })}\r\n              </LinkButton>\r\n            ) : null\r\n          }\r\n        />\r\n\r\n        <Layouts.Action\r\n          startActions={\r\n            <SearchInput\r\n              label={formatMessage({\r\n                id: 'app.component.search.label',\r\n                defaultMessage: 'Search',\r\n              })}\r\n            />\r\n          }\r\n        />\r\n\r\n        <Layouts.Content>\r\n          {!canRead && <Page.NoPermissions />}\r\n          {canRead && sortedRoles && sortedRoles?.length ? (\r\n            <Table colCount={colCount} rowCount={rowCount}>\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th>\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'global.description',\r\n                        defaultMessage: 'Description',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th>\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'global.users',\r\n                        defaultMessage: 'Users',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th>\r\n                    <VisuallyHidden>\r\n                      {formatMessage({\r\n                        id: 'global.actions',\r\n                        defaultMessage: 'Actions',\r\n                      })}\r\n                    </VisuallyHidden>\r\n                  </Th>\r\n                </Tr>\r\n              </Thead>\r\n              <TableBody\r\n                sortedRoles={sortedRoles}\r\n                canDelete={canDelete}\r\n                canUpdate={canUpdate}\r\n                permissions={PERMISSIONS}\r\n                setRoleToDelete={setRoleToDelete}\r\n                onDelete={[showConfirmDelete, setShowConfirmDelete]}\r\n              />\r\n            </Table>\r\n          ) : (\r\n            <EmptyStateLayout content={formatMessage(emptyLayout[emptyContent])} />\r\n          )}\r\n        </Layouts.Content>\r\n        <Dialog.Root open={showConfirmDelete} onOpenChange={handleShowConfirmDelete}>\r\n          <ConfirmDialog onConfirm={handleConfirmDelete} />\r\n        </Dialog.Root>\r\n      </Page.Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\nexport const ProtectedRolesListPage = () => {\r\n  return (\r\n    <Page.Protect permissions={PERMISSIONS.accessRoles}>\r\n      <RolesListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Page } from '@strapi/strapi/admin';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport { PERMISSIONS } from '../../constants';\r\n\r\nimport { ProtectedRolesCreatePage } from './pages/CreatePage';\r\nimport { ProtectedRolesEditPage } from './pages/EditPage';\r\nimport { ProtectedRolesListPage } from './pages/ListPage';\r\n\r\nconst Roles = () => {\r\n  return (\r\n    <Page.Protect permissions={PERMISSIONS.accessRoles}>\r\n      <Routes>\r\n        <Route index element={<ProtectedRolesListPage />} />\r\n        <Route path=\"new\" element={<ProtectedRolesCreatePage />} />\r\n        <Route path=\":id\" element={<ProtectedRolesEditPage />} />\r\n      </Routes>\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport default Roles;\r\n"],"names":["UsersPermissions","createContext","jsx","useContext","PropTypes","upperFirst","init","initialState","css","styled","Box","useIntl","useMemo","get","useCallback","jsxs","Flex","Typography","Checkbox","Grid","VisuallyHidden","Cog","sortBy","index","acc","reducer","produce","useReducer","Accordion","tail","without","isEmpty","take","set","forwardRef","state","useImperativeHandle","getTrad","memo","yup","translatedErrors","useNotification","useFetchClient","useAPIErrorHandler","useQueries","permissions","routes","useEffect","useNavigate","useTracking","React","useMutation","Main","Page","Formik","Form","Layouts","Button","Check","Field","TextInput","Textarea","PERMISSIONS","useMatch","useQuery","role","BackButton","Link","Tbody","Tr","Td","NavLink","Pencil","IconButton","Trash","useNotifyAT","useQueryParams","useState","useRBAC","useFilter","useCollator","formatMessage","toggleNotification","notifyStatus","LinkButton","Plus","SearchInput","Table","Thead","Th","EmptyStateLayout","Dialog","ConfirmDialog","Routes","Route"],"mappings":"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"}