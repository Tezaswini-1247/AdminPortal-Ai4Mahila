{"version":3,"file":"index.js","sources":["../src/prompts.ts","../src/utils/parse-to-chalk.ts","../src/cloud.ts","../src/utils/template.ts","../src/utils/git.ts","../src/utils/usage.ts","../src/utils/engines.ts","../src/utils/package-json.ts","../src/utils/dot-env.ts","../src/types.ts","../src/utils/logger.ts","../src/utils/gitignore.ts","../src/utils/get-package-manager-args.ts","../src/create-strapi.ts","../src/utils/check-requirements.ts","../src/utils/check-install-path.ts","../src/utils/machine-id.ts","../src/utils/database.ts","../src/index.ts"],"sourcesContent":["import inquirer from 'inquirer';\r\n\r\nasync function directory() {\r\n  const { directory } = await inquirer.prompt<{\r\n    directory: string;\r\n  }>([\r\n    {\r\n      type: 'input',\r\n      default: 'my-strapi-project',\r\n      name: 'directory',\r\n      message: 'What is the name of your project?',\r\n    },\r\n  ]);\r\n\r\n  return directory;\r\n}\r\n\r\nasync function typescript() {\r\n  const { useTypescript } = await inquirer.prompt<{\r\n    useTypescript: boolean;\r\n  }>([\r\n    {\r\n      type: 'confirm',\r\n      name: 'useTypescript',\r\n      message: 'Start with Typescript?',\r\n      default: true,\r\n    },\r\n  ]);\r\n\r\n  return useTypescript;\r\n}\r\n\r\nasync function example() {\r\n  const { useExample } = await inquirer.prompt<{\r\n    useExample: boolean;\r\n  }>([\r\n    {\r\n      type: 'confirm',\r\n      name: 'useExample',\r\n      message: 'Start with an example structure & data?',\r\n      default: false,\r\n    },\r\n  ]);\r\n\r\n  return useExample;\r\n}\r\n\r\nasync function gitInit() {\r\n  const { gitInit } = await inquirer.prompt<{\r\n    gitInit: boolean;\r\n  }>([\r\n    {\r\n      type: 'confirm',\r\n      name: 'gitInit',\r\n      message: 'Initialize a git repository?',\r\n      default: true,\r\n    },\r\n  ]);\r\n\r\n  return gitInit;\r\n}\r\n\r\nasync function installDependencies(packageManager: string) {\r\n  const { installDependencies } = await inquirer.prompt<{\r\n    installDependencies: boolean;\r\n  }>([\r\n    {\r\n      type: 'confirm',\r\n      name: 'installDependencies',\r\n      message: `Install dependencies with ${packageManager}?`,\r\n      default: true,\r\n    },\r\n  ]);\r\n\r\n  return installDependencies;\r\n}\r\n\r\nexport { directory, typescript, example, gitInit, installDependencies };\r\n","import chalk from 'chalk';\r\n\r\n// TODO: move styles to API\r\n\r\nconst supportedStyles = {\r\n  magentaBright: chalk.magentaBright,\r\n  blueBright: chalk.blueBright,\r\n  yellowBright: chalk.yellowBright,\r\n  green: chalk.green,\r\n  red: chalk.red,\r\n  bold: chalk.bold,\r\n  italic: chalk.italic,\r\n};\r\n\r\nexport default function parseToChalk(template: string) {\r\n  let result = template;\r\n\r\n  for (const [color, chalkFunction] of Object.entries(supportedStyles)) {\r\n    const regex = new RegExp(`{${color}}(.*?){/${color}}`, 'g');\r\n    result = result.replace(regex, (_, p1) => chalkFunction(p1.trim()));\r\n  }\r\n\r\n  return result;\r\n}\r\n","import inquirer from 'inquirer';\r\nimport { cli as cloudCli, services as cloudServices } from '@strapi/cloud-cli';\r\nimport parseToChalk from './utils/parse-to-chalk';\r\n\r\ninterface CloudError {\r\n  response: {\r\n    status: number;\r\n    data: string | object;\r\n  };\r\n}\r\n\r\nfunction assertCloudError(e: unknown): asserts e is CloudError {\r\n  if ((e as CloudError).response === undefined) {\r\n    throw Error('Expected CloudError');\r\n  }\r\n}\r\n\r\nexport async function handleCloudLogin(): Promise<void> {\r\n  const logger = cloudServices.createLogger({\r\n    silent: false,\r\n    debug: process.argv.includes('--debug'),\r\n    timestamp: false,\r\n  });\r\n  const cloudApiService = await cloudServices.cloudApiFactory({ logger });\r\n  const defaultErrorMessage =\r\n    'An error occurred while trying to interact with Strapi Cloud. Use strapi deploy command once the project is generated.';\r\n\r\n  try {\r\n    const { data: config } = await cloudApiService.config();\r\n    logger.log(parseToChalk(config.projectCreation.introText));\r\n  } catch (e: unknown) {\r\n    logger.debug(e);\r\n    logger.error(defaultErrorMessage);\r\n    return;\r\n  }\r\n  const { userChoice } = await inquirer.prompt<{ userChoice: string }>([\r\n    {\r\n      type: 'list',\r\n      name: 'userChoice',\r\n      message: `Please log in or sign up.`,\r\n      choices: ['Login/Sign up', 'Skip'],\r\n    },\r\n  ]);\r\n\r\n  if (userChoice !== 'Skip') {\r\n    const cliContext = {\r\n      logger,\r\n      cwd: process.cwd(),\r\n    };\r\n\r\n    try {\r\n      await cloudCli.login.action(cliContext);\r\n    } catch (e: Error | CloudError | unknown) {\r\n      logger.debug(e);\r\n      try {\r\n        assertCloudError(e);\r\n        if (e.response.status === 403) {\r\n          const message =\r\n            typeof e.response.data === 'string'\r\n              ? e.response.data\r\n              : 'We are sorry, but we are not able to log you into Strapi Cloud at the moment.';\r\n          logger.warn(message);\r\n          return;\r\n        }\r\n      } catch (e) {\r\n        /* empty */\r\n      }\r\n      logger.error(defaultErrorMessage);\r\n    }\r\n  }\r\n}\r\n","import path from 'node:path';\r\nimport url from 'node:url';\r\nimport { Readable } from 'node:stream';\r\nimport { pipeline } from 'node:stream/promises';\r\nimport * as tar from 'tar';\r\nimport retry from 'async-retry';\r\n\r\nimport fse from 'fs-extra';\r\nimport type { Scope } from '../types';\r\n\r\nconst stripTrailingSlash = (str: string) => {\r\n  return str.endsWith('/') ? str.slice(0, -1) : str;\r\n};\r\n\r\n// Merge template with new project being created\r\nexport async function copyTemplate(scope: Scope, rootPath: string) {\r\n  const { template } = scope;\r\n\r\n  if (!template) {\r\n    throw new Error('Missing template or example app option');\r\n  }\r\n\r\n  if (await isOfficialTemplate(template, scope.templateBranch)) {\r\n    await retry(\r\n      () =>\r\n        downloadGithubRepo(rootPath, {\r\n          owner: 'strapi',\r\n          repo: 'strapi',\r\n          branch: scope.templateBranch,\r\n          subPath: `templates/${template}`,\r\n        }),\r\n      {\r\n        retries: 3,\r\n        onRetry(err, attempt) {\r\n          console.log(`Retrying to download the template. Attempt ${attempt}. Error: ${err}`);\r\n        },\r\n      }\r\n    );\r\n\r\n    return;\r\n  }\r\n\r\n  if (isLocalTemplate(template)) {\r\n    const filePath = template.startsWith('file://') ? url.fileURLToPath(template) : template;\r\n\r\n    await fse.copy(filePath, rootPath);\r\n  }\r\n\r\n  if (isGithubShorthand(template)) {\r\n    const [owner, repo, ...pathSegments] = template.split('/');\r\n    const subPath = pathSegments.length ? pathSegments.join('/') : scope.templatePath;\r\n\r\n    await retry(\r\n      () => downloadGithubRepo(rootPath, { owner, repo, branch: scope.templateBranch, subPath }),\r\n      {\r\n        retries: 3,\r\n        onRetry(err, attempt) {\r\n          console.log(`Retrying to download the template. Attempt ${attempt}. Error: ${err}`);\r\n        },\r\n      }\r\n    );\r\n\r\n    return;\r\n  }\r\n\r\n  if (isGithubRepo(template)) {\r\n    const url = new URL(template);\r\n\r\n    const [owner, repo, t, branch, ...pathSegments] = stripTrailingSlash(\r\n      url.pathname.slice(1)\r\n    ).split('/');\r\n\r\n    if (t !== undefined && t !== 'tree') {\r\n      throw new Error(`Invalid GitHub template URL: ${template}`);\r\n    }\r\n\r\n    if (scope.templateBranch) {\r\n      await retry(\r\n        () =>\r\n          downloadGithubRepo(rootPath, {\r\n            owner,\r\n            repo,\r\n            branch: scope.templateBranch,\r\n            subPath: scope.templatePath,\r\n          }),\r\n        {\r\n          retries: 3,\r\n          onRetry(err, attempt) {\r\n            console.log(`Retrying to download the template. Attempt ${attempt}. Error: ${err}`);\r\n          },\r\n        }\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    await retry(\r\n      () =>\r\n        downloadGithubRepo(rootPath, {\r\n          owner,\r\n          repo,\r\n          branch: decodeURIComponent(branch) ?? scope.templateBranch,\r\n          subPath: pathSegments.length\r\n            ? decodeURIComponent(pathSegments.join('/'))\r\n            : scope.templatePath,\r\n        }),\r\n      {\r\n        retries: 3,\r\n        onRetry(err, attempt) {\r\n          console.log(`Retrying to download the template. Attempt ${attempt}. Error: ${err}`);\r\n        },\r\n      }\r\n    );\r\n\r\n    throw new Error(`Invalid GitHub template URL: ${template}`);\r\n  }\r\n}\r\n\r\ntype RepoInfo = {\r\n  owner: string;\r\n  repo: string;\r\n  branch?: string;\r\n  subPath?: string | null;\r\n};\r\n\r\nasync function downloadGithubRepo(rootPath: string, { owner, repo, branch, subPath }: RepoInfo) {\r\n  const filePath = subPath ? subPath.split('/').join(path.posix.sep) : null;\r\n\r\n  let checkContentUrl = `https://api.github.com/repos/${owner}/${repo}/contents`;\r\n  if (filePath) {\r\n    checkContentUrl = `${checkContentUrl}/${filePath}`;\r\n  }\r\n\r\n  if (branch) {\r\n    checkContentUrl = `${checkContentUrl}?ref=${branch}`;\r\n  }\r\n\r\n  const checkRes = await fetch(checkContentUrl, {\r\n    method: 'HEAD',\r\n  });\r\n\r\n  if (checkRes.status !== 200) {\r\n    throw new Error(\r\n      `Could not find a template at https://github.com/${owner}/${repo}${branch ? ` on branch ${branch}` : ''}${filePath ? ` at path ${filePath}` : ''}`\r\n    );\r\n  }\r\n\r\n  let url = `https://api.github.com/repos/${owner}/${repo}/tarball`;\r\n\r\n  if (branch) {\r\n    url = `${url}/${branch}`;\r\n  }\r\n\r\n  const res = await fetch(url);\r\n\r\n  if (!res.body) {\r\n    throw new Error(`Failed to download ${url}`);\r\n  }\r\n\r\n  await pipeline(\r\n    // @ts-expect-error - Readable is not a valid source\r\n    Readable.fromWeb(res.body),\r\n    tar.x({\r\n      cwd: rootPath,\r\n      strip: filePath ? filePath.split('/').length + 1 : 1,\r\n      filter(path) {\r\n        if (filePath) {\r\n          return path.split('/').slice(1).join('/').startsWith(filePath);\r\n        }\r\n\r\n        return true;\r\n      },\r\n    })\r\n  );\r\n}\r\n\r\nfunction isLocalTemplate(template: string) {\r\n  return (\r\n    template.startsWith('file://') ||\r\n    fse.existsSync(path.isAbsolute(template) ? template : path.resolve(process.cwd(), template))\r\n  );\r\n}\r\n\r\nfunction isGithubShorthand(value: string) {\r\n  if (isValidUrl(value)) {\r\n    return false;\r\n  }\r\n\r\n  return /^[\\w-]+\\/[\\w-.]+(\\/[\\w-.]+)*$/.test(value);\r\n}\r\n\r\nfunction isGithubRepo(value: string) {\r\n  try {\r\n    const url = new URL(value);\r\n\r\n    return url.origin === 'https://github.com';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction isValidUrl(value: string) {\r\n  try {\r\n    // eslint-disable-next-line no-new\r\n    new URL(value);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function isOfficialTemplate(template: string, branch: string | undefined) {\r\n  if (isValidUrl(template)) {\r\n    return false;\r\n  }\r\n\r\n  const res = await fetch(\r\n    `https://api.github.com/repos/strapi/strapi/contents/templates/${template}?${branch ? `ref=${branch}` : ''}`,\r\n    { method: 'HEAD' }\r\n  );\r\n\r\n  return res.status === 200;\r\n}\r\n","import execa from 'execa';\r\n\r\nasync function isInGitRepository(rootDir: string) {\r\n  try {\r\n    await execa('git', ['rev-parse', '--is-inside-work-tree'], { stdio: 'ignore', cwd: rootDir });\r\n    return true;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function isInMercurialRepository(rootDir: string) {\r\n  try {\r\n    await execa('hg', ['-cwd', '.', 'root'], { stdio: 'ignore', cwd: rootDir });\r\n    return true;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function tryGitInit(rootDir: string) {\r\n  try {\r\n    await execa('git', ['--version'], { stdio: 'ignore' });\r\n    if ((await isInGitRepository(rootDir)) || (await isInMercurialRepository(rootDir))) {\r\n      return false;\r\n    }\r\n\r\n    await execa('git', ['init'], { stdio: 'ignore', cwd: rootDir });\r\n\r\n    await execa('git', ['add', '.'], { stdio: 'ignore', cwd: rootDir });\r\n    await execa('git', ['commit', '-m', 'Initial commit from Strapi'], {\r\n      stdio: 'ignore',\r\n      cwd: rootDir,\r\n    });\r\n\r\n    return true;\r\n  } catch (e) {\r\n    console.error('Error while trying to initialize git:', e);\r\n    return false;\r\n  }\r\n}\r\n","import os from 'os';\r\nimport _ from 'lodash';\r\n\r\nimport { Scope, StderrError } from '../types';\r\n\r\ntype TrackError = Error | string | StderrError;\r\n\r\n// Add properties from the package.json strapi key in the metadata\r\nfunction addPackageJsonStrapiMetadata(metadata: Record<string, unknown>, scope: Scope) {\r\n  const { packageJsonStrapi = {} } = scope;\r\n\r\n  return _.defaults(metadata, packageJsonStrapi);\r\n}\r\n\r\nconst boolToString = (value: boolean | undefined) => (value === true).toString();\r\n\r\nconst getProperties = (scope: Scope, error?: TrackError) => {\r\n  const eventProperties = {\r\n    error: typeof error === 'string' ? error : error && error.message,\r\n  };\r\n\r\n  const userProperties = {\r\n    os: os.type(),\r\n    osPlatform: os.platform(),\r\n    osArch: os.arch(),\r\n    osRelease: os.release(),\r\n    nodeVersion: process.versions.node,\r\n  };\r\n\r\n  const groupProperties = {\r\n    version: scope.strapiVersion,\r\n    docker: scope.docker,\r\n    useYarn: scope.packageManager === 'yarn',\r\n    packageManager: scope.packageManager,\r\n    /** @deprecated */\r\n    useTypescriptOnServer: boolToString(scope.useTypescript),\r\n    /** @deprecated */\r\n    useTypescriptOnAdmin: boolToString(scope.useTypescript),\r\n    useTypescript: boolToString(scope.useTypescript),\r\n    isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === 'strapi.cloud',\r\n    noRun: boolToString(scope.runApp),\r\n    projectId: scope.uuid,\r\n    useExample: boolToString(scope.useExample),\r\n    gitInit: boolToString(scope.gitInit),\r\n    installDependencies: boolToString(scope.installDependencies),\r\n  };\r\n\r\n  return {\r\n    eventProperties,\r\n    userProperties,\r\n    groupProperties: addPackageJsonStrapiMetadata(groupProperties, scope),\r\n  };\r\n};\r\n\r\nfunction trackEvent(event: string, payload: Record<string, unknown>) {\r\n  if (process.env.NODE_ENV === 'test') {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    return fetch('https://analytics.strapi.io/api/v2/track', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        event,\r\n        ...payload,\r\n      }),\r\n      signal: AbortSignal.timeout(1000),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Strapi-Event': event,\r\n      },\r\n    }).catch(() => {});\r\n  } catch (err) {\r\n    /** ignore errors */\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\nexport async function trackError({ scope, error }: { scope: Scope; error?: TrackError }) {\r\n  const properties = getProperties(scope, error);\r\n\r\n  try {\r\n    return await trackEvent('didNotCreateProject', {\r\n      deviceId: scope.deviceId,\r\n      ...properties,\r\n    });\r\n  } catch (err) {\r\n    /** ignore errors */\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\nexport async function trackUsage({\r\n  event,\r\n  scope,\r\n  error,\r\n}: {\r\n  event: string;\r\n  scope: Scope;\r\n  error?: TrackError;\r\n}) {\r\n  const properties = getProperties(scope, error);\r\n\r\n  try {\r\n    return await trackEvent(event, {\r\n      deviceId: scope.deviceId,\r\n      ...properties,\r\n    });\r\n  } catch (err) {\r\n    /** ignore errors */\r\n    return Promise.resolve();\r\n  }\r\n}\r\n","export const engines = {\r\n  node: '>=18.0.0 <=22.x.x',\r\n  npm: '>=6.0.0',\r\n};\r\n","import { join } from 'path';\r\nimport { kebabCase, merge } from 'lodash';\r\nimport fse from 'fs-extra';\r\n\r\nimport { engines } from './engines';\r\nimport type { Scope } from '../types';\r\n\r\nexport async function createPackageJSON(scope: Scope) {\r\n  const { sortPackageJson } = await import('sort-package-json');\r\n\r\n  const pkgJSONPath = join(scope.rootPath, 'package.json');\r\n\r\n  const existingPkg = await fse.readJSON(pkgJSONPath).catch(() => ({}));\r\n\r\n  const pkg = {\r\n    name: kebabCase(scope.name),\r\n    private: true,\r\n    version: '0.1.0',\r\n    description: 'A Strapi application',\r\n    devDependencies: scope.devDependencies ?? {},\r\n    dependencies: scope.dependencies ?? {},\r\n    strapi: {\r\n      ...(scope.packageJsonStrapi ?? {}),\r\n      uuid: scope.uuid,\r\n    },\r\n    engines,\r\n  };\r\n\r\n  // copy templates\r\n  await fse.writeJSON(pkgJSONPath, sortPackageJson(merge(existingPkg, pkg)), {\r\n    spaces: 2,\r\n  });\r\n}\r\n","import crypto from 'crypto';\r\nimport _ from 'lodash';\r\n\r\nimport type { Scope } from '../types';\r\n\r\nconst generateASecret = () => crypto.randomBytes(16).toString('base64');\r\n\r\nconst envTmpl = `\r\n# Server\r\nHOST=0.0.0.0\r\nPORT=1337\r\n\r\n# Secrets\r\nAPP_KEYS=<%= appKeys %>\r\nAPI_TOKEN_SALT=<%= apiTokenSalt %>\r\nADMIN_JWT_SECRET=<%= adminJwtToken %>\r\nTRANSFER_TOKEN_SALT=<%= transferTokenSalt %>\r\n\r\n# Database\r\nDATABASE_CLIENT=<%= database.client %>\r\nDATABASE_HOST=<%= database.connection.host %>\r\nDATABASE_PORT=<%= database.connection.port %>\r\nDATABASE_NAME=<%= database.connection.database %>\r\nDATABASE_USERNAME=<%= database.connection.username %>\r\nDATABASE_PASSWORD=<%= database.connection.password %>\r\nDATABASE_SSL=<%= database.connection.ssl %>\r\nDATABASE_FILENAME=<%= database.connection.filename %>\r\n`;\r\n\r\nexport function generateDotEnv(scope: Scope) {\r\n  const compile = _.template(envTmpl);\r\n\r\n  return compile({\r\n    appKeys: new Array(4).fill(null).map(generateASecret).join(','),\r\n    apiTokenSalt: generateASecret(),\r\n    transferTokenSalt: generateASecret(),\r\n    adminJwtToken: generateASecret(),\r\n    database: {\r\n      client: scope.database.client,\r\n      connection: {\r\n        ...scope.database.connection,\r\n        ssl: scope.database.connection?.ssl || false,\r\n      },\r\n    },\r\n  });\r\n}\r\n","export interface Options {\r\n  useNpm?: boolean;\r\n  usePnpm?: boolean;\r\n  useYarn?: boolean;\r\n  quickstart?: boolean;\r\n  run?: boolean;\r\n  dbclient?: DBClient;\r\n  skipCloud?: boolean;\r\n  skipDb?: boolean;\r\n  dbhost?: string;\r\n  dbport?: string;\r\n  dbname?: string;\r\n  dbusername?: string;\r\n  dbpassword?: string;\r\n  dbssl?: string;\r\n  dbfile?: string;\r\n  template?: string;\r\n  typescript?: boolean;\r\n  javascript?: boolean;\r\n  install?: boolean;\r\n  example?: boolean;\r\n  gitInit?: boolean;\r\n  templateBranch?: string;\r\n  templatePath?: string;\r\n}\r\n\r\nexport type DBClient = 'mysql' | 'postgres' | 'sqlite';\r\n\r\nexport type DBConfig = {\r\n  client: DBClient;\r\n  connection: {\r\n    host?: string;\r\n    port?: string;\r\n    database?: string;\r\n    username?: string;\r\n    password?: string;\r\n    filename?: string;\r\n    ssl?: boolean;\r\n  };\r\n};\r\n\r\nexport type PackageManager = 'npm' | 'yarn' | 'pnpm';\r\n\r\nexport interface Scope {\r\n  name: string;\r\n  rootPath: string;\r\n  template?: string;\r\n  templateBranch?: string;\r\n  templatePath?: string;\r\n  strapiVersion?: string;\r\n  installDependencies?: boolean;\r\n  devDependencies?: Record<string, string>;\r\n  dependencies?: Record<string, string>;\r\n  docker?: boolean;\r\n  packageManager: PackageManager;\r\n  runApp?: boolean;\r\n  isQuickstart?: boolean;\r\n  uuid?: string;\r\n  deviceId?: string;\r\n  database: DatabaseInfo;\r\n  tmpPath?: string;\r\n  packageJsonStrapi?: Record<string, unknown>;\r\n  useTypescript?: boolean;\r\n  useExample?: boolean;\r\n  gitInit?: boolean;\r\n}\r\n\r\nexport type ClientName = 'mysql' | 'postgres' | 'sqlite';\r\n\r\nexport interface DatabaseInfo {\r\n  client: ClientName;\r\n  connection?: {\r\n    host?: string;\r\n    port?: string;\r\n    database?: string;\r\n    username?: string;\r\n    password?: string;\r\n    filename?: string;\r\n    ssl?: boolean;\r\n  };\r\n}\r\n\r\nexport interface StderrError extends Error {\r\n  stderr: string;\r\n}\r\n\r\nexport function isStderrError(error: unknown): error is StderrError {\r\n  return (\r\n    typeof error === 'object' &&\r\n    error !== null &&\r\n    'stderr' in error &&\r\n    typeof error.stderr === 'string'\r\n  );\r\n}\r\n","import chalk from 'chalk';\r\nimport type { ChalkFunction } from 'chalk';\r\n\r\nconst MAX_PREFIX_LENGTH = 8;\r\n\r\nconst badge = (text: string, bgColor: ChalkFunction, textColor: ChalkFunction = chalk.black) => {\r\n  const wrappedText = ` ${text} `;\r\n\r\n  const repeat = Math.max(0, MAX_PREFIX_LENGTH - wrappedText.length);\r\n\r\n  return ' '.repeat(repeat) + bgColor(textColor(wrappedText));\r\n};\r\n\r\nconst textIndent = (\r\n  text: string | string[],\r\n  indentFirst = true,\r\n  indent: number = MAX_PREFIX_LENGTH + 2\r\n) => {\r\n  const parts = Array.isArray(text) ? text : [text];\r\n\r\n  return parts\r\n    .map((part, i) => {\r\n      if (i === 0 && !indentFirst) {\r\n        return part;\r\n      }\r\n\r\n      return ' '.repeat(indent) + part;\r\n    })\r\n    .join('\\n');\r\n};\r\n\r\nexport const logger = {\r\n  log(message: string | string[]): void {\r\n    console.log(textIndent(message));\r\n  },\r\n  title(title: string, message: string): void {\r\n    const prefix = badge(title, chalk.bgBlueBright);\r\n    console.log(`\\n${prefix}  ${message}`);\r\n  },\r\n  info(message: string): void {\r\n    console.log(`${' '.repeat(7)}${chalk.cyan('●')}  ${message}`);\r\n  },\r\n  success(message: string): void {\r\n    console.log(`\\n${' '.repeat(7)}${chalk.green('✓')}  ${chalk.green(message)}`);\r\n  },\r\n  fatal(message?: string | string[]): never {\r\n    const prefix = badge('Error', chalk.bgRed);\r\n\r\n    if (message) {\r\n      console.error(`\\n${prefix}  ${textIndent(message, false)}\\n`);\r\n    }\r\n\r\n    process.exit(1);\r\n  },\r\n  error(message: string | string[]): void {\r\n    const prefix = badge('Error', chalk.bgRed);\r\n    console.error(`\\n${prefix}  ${textIndent(message, false)}\\n`);\r\n  },\r\n  warn(message: string | string[]): void {\r\n    const prefix = badge('Warn', chalk.bgYellow);\r\n    console.warn(`\\n${prefix}  ${textIndent(message, false)}\\n`);\r\n  },\r\n};\r\n","const baseGitIgnore = `\r\n############################\r\n# OS X\r\n############################\r\n\r\n.DS_Store\r\n.AppleDouble\r\n.LSOverride\r\nIcon\r\n.Spotlight-V100\r\n.Trashes\r\n._*\r\n\r\n\r\n############################\r\n# Linux\r\n############################\r\n\r\n*~\r\n\r\n\r\n############################\r\n# Windows\r\n############################\r\n\r\nThumbs.db\r\nehthumbs.db\r\nDesktop.ini\r\n$RECYCLE.BIN/\r\n*.cab\r\n*.msi\r\n*.msm\r\n*.msp\r\n\r\n\r\n############################\r\n# Packages\r\n############################\r\n\r\n*.7z\r\n*.csv\r\n*.dat\r\n*.dmg\r\n*.gz\r\n*.iso\r\n*.jar\r\n*.rar\r\n*.tar\r\n*.zip\r\n*.com\r\n*.class\r\n*.dll\r\n*.exe\r\n*.o\r\n*.seed\r\n*.so\r\n*.swo\r\n*.swp\r\n*.swn\r\n*.swm\r\n*.out\r\n*.pid\r\n\r\n\r\n############################\r\n# Logs and databases\r\n############################\r\n\r\n.tmp\r\n*.log\r\n*.sql\r\n*.sqlite\r\n*.sqlite3\r\n\r\n\r\n############################\r\n# Misc.\r\n############################\r\n\r\n*#\r\nssl\r\n.idea\r\nnbproject\r\npublic/uploads/*\r\n!public/uploads/.gitkeep\r\n.tsbuildinfo\r\n.eslintcache\r\n\r\n############################\r\n# Node.js\r\n############################\r\n\r\nlib-cov\r\nlcov.info\r\npids\r\nlogs\r\nresults\r\nnode_modules\r\n.node_history\r\n\r\n############################\r\n# Package managers\r\n############################\r\n\r\n.yarn/*\r\n!.yarn/cache\r\n!.yarn/unplugged\r\n!.yarn/patches\r\n!.yarn/releases\r\n!.yarn/sdks\r\n!.yarn/versions\r\n.pnp.*\r\nyarn-error.log\r\n\r\n############################\r\n# Tests\r\n############################\r\n\r\ncoverage\r\n\r\n############################\r\n# Strapi\r\n############################\r\n\r\n.env\r\nlicense.txt\r\nexports\r\n.strapi\r\ndist\r\nbuild\r\n.strapi-updater.json\r\n.strapi-cloud.json\r\n`;\r\n\r\nexport const gitIgnore = baseGitIgnore.trim();\r\n","import execa from 'execa';\r\nimport semver from 'semver';\r\n\r\nconst installArguments = ['install'];\r\n\r\ntype VersionedArgumentsMap = {\r\n  [key: string]: string[]; // Maps semver ranges to argument arrays\r\n};\r\n\r\ntype VersionedEnvMap = {\r\n  [key: string]: Record<string, string>; // Maps semver ranges to environment variables\r\n};\r\n\r\n// Set command line options for specific package managers, with full semver ranges\r\nconst installArgumentsMap: {\r\n  [key: string]: VersionedArgumentsMap;\r\n} = {\r\n  npm: {\r\n    '*': ['--legacy-peer-deps'],\r\n  },\r\n  yarn: {\r\n    '<4': ['--network-timeout', '1000000'],\r\n    '*': [],\r\n  },\r\n  pnpm: {\r\n    '*': [],\r\n  },\r\n};\r\n\r\n// Set environment variables for specific package managers, with full semver ranges\r\nconst installEnvMap: {\r\n  [key: string]: VersionedEnvMap;\r\n} = {\r\n  yarn: {\r\n    '>=4': { YARN_HTTP_TIMEOUT: '1000000' },\r\n    '*': {},\r\n  },\r\n  npm: {\r\n    '*': {},\r\n  },\r\n  pnpm: {\r\n    '*': {},\r\n  },\r\n};\r\n\r\n/**\r\n * Retrieves the version of the specified package manager.\r\n *\r\n * Executes the package manager's `--version` command to determine its version.\r\n *\r\n * @param packageManager - The name of the package manager (e.g., 'npm', 'yarn', 'pnpm').\r\n * @param options - Optional execution options to pass to `execa`.\r\n * @returns A promise that resolves to the trimmed version string of the package manager.\r\n *\r\n * @throws Will throw an error if the package manager's version cannot be determined.\r\n */\r\nexport const getPackageManagerVersion = async (\r\n  packageManager: string,\r\n  options?: execa.Options\r\n): Promise<string> => {\r\n  try {\r\n    const { stdout } = await execa(packageManager, ['--version'], options);\r\n    return stdout.trim();\r\n  } catch (err) {\r\n    throw new Error(`Error detecting ${packageManager} version: ${err}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Merges all matching semver ranges using a custom merge function.\r\n *\r\n * Iterates over the `versionMap`, checking if the provided `version` satisfies each semver range.\r\n * If it does, the corresponding value is merged using the provided `mergeFn`.\r\n * The merging starts with the value associated with the wildcard '*' key.\r\n *\r\n * @param version - The package manager version to check against the ranges.\r\n * @param versionMap - A map of semver ranges to corresponding values (arguments or environment variables).\r\n * @param mergeFn - A function that defines how to merge two values (accumulated and current).\r\n * @returns The merged result of all matching ranges.\r\n */\r\nfunction mergeMatchingVersionRanges<T>(\r\n  version: string,\r\n  versionMap: { [key: string]: T },\r\n  mergeFn: (acc: T, curr: T) => T\r\n): T {\r\n  return Object.keys(versionMap).reduce((acc, range) => {\r\n    if (semver.satisfies(version, range) || range === '*') {\r\n      return mergeFn(acc, versionMap[range]);\r\n    }\r\n    return acc;\r\n  }, versionMap['*']); // Start with the wildcard entry\r\n}\r\n\r\nfunction mergeArguments(acc: string[], curr: string[]): string[] {\r\n  return [...acc, ...curr];\r\n}\r\n\r\nfunction mergeEnvVars(\r\n  acc: Record<string, string>,\r\n  curr: Record<string, string>\r\n): Record<string, string> {\r\n  return { ...acc, ...curr };\r\n}\r\n\r\n/**\r\n * Retrieves the install arguments and environment variables for a given package manager.\r\n *\r\n * This function determines the correct command line arguments and environment variables\r\n * based on the package manager's version. It uses predefined semver ranges to match\r\n * the package manager's version and merges all applicable settings.\r\n *\r\n * The arguments and environment variables are sourced from:\r\n *  - `installArgumentsMap` for command line arguments.\r\n *  - `installEnvMap` for environment variables.\r\n *\r\n * The function ensures that all matching semver ranges are considered and merged appropriately.\r\n * It always includes the base `installArguments` (e.g., `['install']`) and applies any additional\r\n * arguments or environment variables as defined by the matched version ranges.\r\n *\r\n * @param packageManager - The name of the package manager (e.g., 'npm', 'yarn', 'pnpm').\r\n * @param options - Optional execution options to pass to `execa`.\r\n * @returns An object containing:\r\n *  - `cmdArgs`: The full array of install arguments for the given package manager and version.\r\n *  - `envArgs`: The merged environment variables applicable to the package manager and version.\r\n *\r\n * @throws Will throw an error if the package manager version cannot be determined.\r\n */\r\nexport const getInstallArgs = async (packageManager: string, options?: execa.Options) => {\r\n  const packageManagerVersion = await getPackageManagerVersion(packageManager, options);\r\n\r\n  // Get environment variables\r\n  const envMap = installEnvMap[packageManager];\r\n  const envArgs = packageManagerVersion\r\n    ? mergeMatchingVersionRanges(packageManagerVersion, envMap, mergeEnvVars)\r\n    : envMap['*'];\r\n\r\n  // Get install arguments\r\n  const argsMap = installArgumentsMap[packageManager];\r\n  const cmdArgs = packageManagerVersion\r\n    ? mergeMatchingVersionRanges(packageManagerVersion, argsMap, mergeArguments)\r\n    : argsMap['*'];\r\n\r\n  return { envArgs, cmdArgs: [...installArguments, ...cmdArgs], version: packageManagerVersion };\r\n};\r\n","import { join } from 'node:path';\r\n\r\nimport chalk from 'chalk';\r\nimport execa from 'execa';\r\nimport fse from 'fs-extra';\r\n\r\nimport { copyTemplate } from './utils/template';\r\nimport { tryGitInit } from './utils/git';\r\nimport { trackUsage } from './utils/usage';\r\nimport { createPackageJSON } from './utils/package-json';\r\nimport { generateDotEnv } from './utils/dot-env';\r\nimport { isStderrError } from './types';\r\n\r\nimport type { Scope } from './types';\r\nimport { logger } from './utils/logger';\r\nimport { gitIgnore } from './utils/gitignore';\r\nimport { getInstallArgs } from './utils/get-package-manager-args';\r\n\r\nasync function createStrapi(scope: Scope) {\r\n  const { rootPath } = scope;\r\n  try {\r\n    await fse.ensureDir(rootPath);\r\n    await createApp(scope);\r\n  } catch (error) {\r\n    await fse.remove(rootPath);\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createApp(scope: Scope) {\r\n  const {\r\n    rootPath,\r\n    useTypescript,\r\n    useExample,\r\n    installDependencies,\r\n    isQuickstart,\r\n    template,\r\n    packageManager,\r\n    gitInit,\r\n    runApp,\r\n  } = scope;\r\n\r\n  const shouldRunSeed = useExample && installDependencies;\r\n\r\n  await trackUsage({ event: 'willCreateProject', scope });\r\n\r\n  logger.title('Strapi', `Creating a new application at ${chalk.green(rootPath)}`);\r\n\r\n  if (!isQuickstart) {\r\n    await trackUsage({ event: 'didChooseCustomDatabase', scope });\r\n  } else {\r\n    await trackUsage({ event: 'didChooseQuickstart', scope });\r\n  }\r\n\r\n  if (!template) {\r\n    let templateName = useExample ? 'example' : 'vanilla';\r\n\r\n    if (!useTypescript) {\r\n      templateName = `${templateName}-js`;\r\n    }\r\n\r\n    const internalTemplatePath = join(__dirname, '../templates', templateName);\r\n    if (await fse.exists(internalTemplatePath)) {\r\n      await fse.copy(internalTemplatePath, rootPath);\r\n    }\r\n  } else {\r\n    try {\r\n      logger.info(`${chalk.cyan('Installing template')} ${template}`);\r\n\r\n      await copyTemplate(scope, rootPath);\r\n\r\n      logger.success('Template copied successfully.');\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.fatal(`Template installation failed: ${error.message}`);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n\r\n    if (!fse.existsSync(join(rootPath, 'package.json'))) {\r\n      logger.fatal(`Missing ${chalk.bold('package.json')} in template`);\r\n    }\r\n  }\r\n\r\n  await trackUsage({ event: 'didCopyProjectFiles', scope });\r\n\r\n  try {\r\n    await createPackageJSON(scope);\r\n\r\n    await trackUsage({ event: 'didWritePackageJSON', scope });\r\n\r\n    // ensure node_modules is created\r\n    await fse.ensureDir(join(rootPath, 'node_modules'));\r\n\r\n    // create config/database\r\n    await fse.writeFile(join(rootPath, '.env'), generateDotEnv(scope));\r\n\r\n    await trackUsage({ event: 'didCopyConfigurationFiles', scope });\r\n  } catch (err) {\r\n    await fse.remove(rootPath);\r\n    throw err;\r\n  }\r\n\r\n  if (installDependencies) {\r\n    try {\r\n      logger.title('deps', `Installing dependencies with ${chalk.cyan(packageManager)}`);\r\n\r\n      await trackUsage({ event: 'willInstallProjectDependencies', scope });\r\n\r\n      await runInstall(scope);\r\n\r\n      await trackUsage({ event: 'didInstallProjectDependencies', scope });\r\n\r\n      logger.success(`Dependencies installed`);\r\n    } catch (error) {\r\n      const stderr = isStderrError(error) ? error.stderr : '';\r\n\r\n      await trackUsage({\r\n        event: 'didNotInstallProjectDependencies',\r\n        scope,\r\n        error: stderr.slice(-1024),\r\n      });\r\n\r\n      logger.fatal([\r\n        chalk.bold(\r\n          'Oh, it seems that you encountered an error while installing dependencies in your project'\r\n        ),\r\n        '',\r\n        `Don't give up, your project was created correctly`,\r\n        '',\r\n        `Fix the issues mentioned in the installation errors and try to run the following command:`,\r\n        '',\r\n        `cd ${chalk.green(rootPath)} && ${chalk.cyan(packageManager)} install`,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  await trackUsage({ event: 'didCreateProject', scope });\r\n\r\n  // make sure a gitignore file is created regardless of the user using git or not\r\n  if (!(await fse.exists(join(rootPath, '.gitignore')))) {\r\n    await fse.writeFile(join(rootPath, '.gitignore'), gitIgnore);\r\n  }\r\n\r\n  // Init git\r\n  if (gitInit) {\r\n    logger.title('git', 'Initializing git repository.');\r\n\r\n    await tryGitInit(rootPath);\r\n\r\n    logger.success('Initialized a git repository.');\r\n  }\r\n\r\n  if (shouldRunSeed) {\r\n    if (await fse.exists(join(rootPath, 'scripts/seed.js'))) {\r\n      logger.title('Seed', 'Seeding your database with sample data');\r\n\r\n      try {\r\n        await execa(packageManager, ['run', 'seed:example'], {\r\n          stdio: 'inherit',\r\n          cwd: rootPath,\r\n        });\r\n        logger.success('Sample data added to your database');\r\n      } catch (error) {\r\n        logger.error('Failed to seed your database. Skipping');\r\n      }\r\n    }\r\n  }\r\n\r\n  const cmd = chalk.cyan(`${packageManager} run`);\r\n\r\n  logger.title('Strapi', `Your application was created!`);\r\n\r\n  logger.log([\r\n    'Available commands in your project:',\r\n    '',\r\n    'Start Strapi in watch mode. (Changes in Strapi project files will trigger a server restart)',\r\n    `${cmd} develop`,\r\n    '',\r\n    'Start Strapi without watch mode.',\r\n    `${cmd} start`,\r\n    '',\r\n    'Build Strapi admin panel.',\r\n    `${cmd} build`,\r\n    '',\r\n    'Deploy Strapi project.',\r\n    `${cmd} deploy`,\r\n    '',\r\n  ]);\r\n\r\n  if (useExample) {\r\n    logger.log(['Seed your database with sample data.', `${cmd} seed:example`, '']);\r\n  }\r\n\r\n  logger.log(['Display all available commands.', `${cmd} strapi\\n`]);\r\n\r\n  if (installDependencies) {\r\n    logger.log([\r\n      'To get started run',\r\n      '',\r\n      `${chalk.cyan('cd')} ${rootPath}`,\r\n      !shouldRunSeed && useExample ? `${cmd} seed:example && ${cmd} develop` : `${cmd} develop`,\r\n    ]);\r\n  } else {\r\n    logger.log([\r\n      'To get started run',\r\n      '',\r\n      `${chalk.cyan('cd')} ${rootPath}`,\r\n      `${chalk.cyan(packageManager)} install`,\r\n      !shouldRunSeed && useExample ? `${cmd} seed:example && ${cmd} develop` : `${cmd} develop`,\r\n    ]);\r\n  }\r\n\r\n  if (runApp && installDependencies) {\r\n    logger.title('Run', 'Running your Strapi application');\r\n\r\n    try {\r\n      await trackUsage({ event: 'willStartServer', scope });\r\n\r\n      await execa(packageManager, ['run', 'develop'], {\r\n        stdio: 'inherit',\r\n        cwd: rootPath,\r\n        env: {\r\n          FORCE_COLOR: '1',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      if (typeof error === 'string' || error instanceof Error) {\r\n        await trackUsage({\r\n          event: 'didNotStartServer',\r\n          scope,\r\n          error,\r\n        });\r\n      }\r\n\r\n      logger.fatal('Failed to start your Strapi application');\r\n    }\r\n  }\r\n}\r\n\r\nasync function runInstall({ rootPath, packageManager }: Scope) {\r\n  // include same cwd and env to ensure version check returns same version we use below\r\n  const { envArgs, cmdArgs } = await getInstallArgs(packageManager, {\r\n    cwd: rootPath,\r\n    env: {\r\n      ...process.env,\r\n      NODE_ENV: 'development',\r\n    },\r\n  });\r\n\r\n  const options: execa.Options = {\r\n    cwd: rootPath,\r\n    stdio: 'inherit',\r\n    env: {\r\n      ...process.env,\r\n      ...envArgs,\r\n      NODE_ENV: 'development',\r\n    },\r\n  };\r\n\r\n  const proc = execa(packageManager, cmdArgs, options);\r\n\r\n  return proc;\r\n}\r\n\r\nexport { createStrapi };\r\n","import chalk from 'chalk';\r\nimport semver from 'semver';\r\n\r\nimport { engines } from './engines';\r\nimport { logger } from './logger';\r\n\r\nexport function checkNodeRequirements() {\r\n  const currentNodeVersion = process.versions.node;\r\n\r\n  // error if the node version isn't supported\r\n  if (!semver.satisfies(currentNodeVersion, engines.node)) {\r\n    logger.fatal([\r\n      chalk.red(`You are running ${chalk.bold(`Node.js ${currentNodeVersion}`)}`),\r\n      `Strapi requires ${chalk.bold(chalk.green(`Node.js ${engines.node}`))}`,\r\n      'Please make sure to use the right version of Node.',\r\n    ]);\r\n  }\r\n\r\n  // warn if not using a LTS version\r\n  else if (semver.major(currentNodeVersion) % 2 !== 0) {\r\n    logger.warn([\r\n      chalk.yellow(`You are running ${chalk.bold(`Node.js ${currentNodeVersion}`)}`),\r\n      `Strapi only supports ${chalk.bold(chalk.green('LTS versions of Node.js'))}, other versions may not be compatible.`,\r\n    ]);\r\n  }\r\n}\r\n","import { resolve } from 'node:path';\r\nimport chalk from 'chalk';\r\nimport fse from 'fs-extra';\r\nimport { logger } from './logger';\r\n\r\n// Checks if the an empty directory exists at rootPath\r\nexport async function checkInstallPath(directory: string): Promise<string> {\r\n  const rootPath = resolve(directory);\r\n\r\n  if (await fse.pathExists(rootPath)) {\r\n    const stat = await fse.stat(rootPath);\r\n\r\n    if (!stat.isDirectory()) {\r\n      logger.fatal(\r\n        `${chalk.green(\r\n          rootPath\r\n        )} is not a directory. Make sure to create a Strapi application in an empty directory.`\r\n      );\r\n    }\r\n\r\n    const files = await fse.readdir(rootPath);\r\n    if (files.length > 1) {\r\n      logger.fatal([\r\n        'You can only create a Strapi app in an empty directory',\r\n        `Make sure ${chalk.green(rootPath)} is empty.`,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  return rootPath;\r\n}\r\n","import { randomUUID } from 'crypto';\r\nimport { machineIdSync } from 'node-machine-id';\r\n\r\nexport function machineID() {\r\n  try {\r\n    const deviceId = machineIdSync();\r\n    return deviceId;\r\n  } catch (error) {\r\n    const deviceId = randomUUID();\r\n    return deviceId;\r\n  }\r\n}\r\n","import inquirer from 'inquirer';\r\nimport type { Question } from 'inquirer';\r\n\r\nimport type { Scope, Options, DBClient, DBConfig } from '../types';\r\nimport { logger } from './logger';\r\n\r\nconst DBOptions = ['dbclient', 'dbhost', 'dbport', 'dbname', 'dbusername', 'dbpassword'];\r\n\r\nconst VALID_CLIENTS = ['sqlite', 'mysql', 'postgres'] as const;\r\n\r\nconst DEFAULT_CONFIG: DBConfig = {\r\n  client: 'sqlite',\r\n  connection: {\r\n    filename: '.tmp/data.db',\r\n  },\r\n};\r\n\r\nasync function dbPrompt() {\r\n  const { useDefault } = await inquirer.prompt<{ useDefault: boolean }>([\r\n    {\r\n      type: 'confirm',\r\n      name: 'useDefault',\r\n      message: 'Do you want to use the default database (sqlite) ?',\r\n      default: true,\r\n    },\r\n  ]);\r\n\r\n  if (useDefault) {\r\n    return DEFAULT_CONFIG;\r\n  }\r\n\r\n  const { client } = await inquirer.prompt<{ client: DBClient }>([\r\n    {\r\n      type: 'list',\r\n      name: 'client',\r\n      message: 'Choose your default database client',\r\n      choices: ['sqlite', 'postgres', 'mysql'],\r\n      default: 'sqlite',\r\n    },\r\n  ]);\r\n\r\n  const questions = dbQuestions[client].map((q) => q({ client }));\r\n\r\n  const responses = await inquirer.prompt(questions);\r\n\r\n  return {\r\n    client,\r\n    connection: responses,\r\n  };\r\n}\r\n\r\nexport async function getDatabaseInfos(options: Options): Promise<DBConfig> {\r\n  if (options.skipDb) {\r\n    return DEFAULT_CONFIG;\r\n  }\r\n\r\n  if (options.dbclient && !VALID_CLIENTS.includes(options.dbclient)) {\r\n    logger.fatal(\r\n      `Invalid --dbclient: ${options.dbclient}, expected one of ${VALID_CLIENTS.join(', ')}`\r\n    );\r\n  }\r\n\r\n  const matchingArgs = DBOptions.filter((key) => key in options);\r\n  const missingArgs = DBOptions.filter((key) => !(key in options));\r\n\r\n  if (\r\n    matchingArgs.length > 0 &&\r\n    matchingArgs.length !== DBOptions.length &&\r\n    options.dbclient !== 'sqlite'\r\n  ) {\r\n    logger.fatal(`Required database arguments are missing: ${missingArgs.join(', ')}.`);\r\n  }\r\n\r\n  const hasDBOptions = DBOptions.some((key) => key in options);\r\n\r\n  if (!hasDBOptions) {\r\n    if (options.quickstart) {\r\n      return DEFAULT_CONFIG;\r\n    }\r\n\r\n    return dbPrompt();\r\n  }\r\n\r\n  if (!options.dbclient) {\r\n    return logger.fatal('Please specify the database client');\r\n  }\r\n\r\n  const database: DBConfig = {\r\n    client: options.dbclient,\r\n    connection: {\r\n      host: options.dbhost,\r\n      port: options.dbport,\r\n      database: options.dbname,\r\n      username: options.dbusername,\r\n      password: options.dbpassword,\r\n      filename: options.dbfile,\r\n    },\r\n  };\r\n\r\n  if (options.dbssl !== undefined) {\r\n    database.connection.ssl = options.dbssl === 'true';\r\n  }\r\n\r\n  return database;\r\n}\r\n\r\nconst sqlClientModule = {\r\n  mysql: { mysql2: '3.9.8' },\r\n  postgres: { pg: '8.8.0' },\r\n  sqlite: { 'better-sqlite3': '11.3.0' },\r\n};\r\n\r\nexport function addDatabaseDependencies(scope: Scope) {\r\n  scope.dependencies = {\r\n    ...scope.dependencies,\r\n    ...sqlClientModule[scope.database.client],\r\n  };\r\n}\r\n\r\ninterface QuestionFactory {\r\n  (options: { client: DBClient }): Question;\r\n}\r\n\r\nconst DEFAULT_PORTS = {\r\n  postgres: 5432,\r\n  mysql: 3306,\r\n  sqlite: undefined,\r\n};\r\n\r\nconst database: QuestionFactory = () => ({\r\n  type: 'input',\r\n  name: 'database',\r\n  message: 'Database name:',\r\n  default: 'strapi',\r\n  validate(value: string) {\r\n    if (value.includes('.')) {\r\n      return `The database name can't contain a \".\"`;\r\n    }\r\n\r\n    return true;\r\n  },\r\n});\r\n\r\nconst host: QuestionFactory = () => ({\r\n  type: 'input',\r\n  name: 'host',\r\n  message: 'Host:',\r\n  default: '127.0.0.1',\r\n});\r\n\r\nconst port: QuestionFactory = ({ client }) => ({\r\n  type: 'input',\r\n  name: 'port',\r\n  message: 'Port:',\r\n  default: DEFAULT_PORTS[client],\r\n});\r\n\r\nconst username: QuestionFactory = () => ({\r\n  type: 'input',\r\n  name: 'username',\r\n  message: 'Username:',\r\n});\r\n\r\nconst password: QuestionFactory = () => ({\r\n  type: 'password',\r\n  name: 'password',\r\n  message: 'Password:',\r\n  mask: '*',\r\n});\r\n\r\nconst ssl: QuestionFactory = () => ({\r\n  type: 'confirm',\r\n  name: 'ssl',\r\n  message: 'Enable SSL connection:',\r\n  default: false,\r\n});\r\n\r\nconst filename: QuestionFactory = () => ({\r\n  type: 'input',\r\n  name: 'filename',\r\n  message: 'Filename:',\r\n  default: '.tmp/data.db',\r\n});\r\n\r\nconst dbQuestions = {\r\n  sqlite: [filename],\r\n  postgres: [database, host, port, username, password, ssl],\r\n  mysql: [database, host, port, username, password, ssl],\r\n};\r\n","import { join, basename } from 'node:path';\r\nimport os from 'node:os';\r\nimport chalk from 'chalk';\r\nimport commander from 'commander';\r\nimport crypto from 'crypto';\r\nimport fse from 'fs-extra';\r\n\r\nimport * as prompts from './prompts';\r\nimport { handleCloudLogin } from './cloud';\r\nimport { createStrapi } from './create-strapi';\r\nimport { checkNodeRequirements } from './utils/check-requirements';\r\nimport { checkInstallPath } from './utils/check-install-path';\r\nimport { machineID } from './utils/machine-id';\r\nimport { trackError } from './utils/usage';\r\nimport { addDatabaseDependencies, getDatabaseInfos } from './utils/database';\r\n\r\nimport type { Options, Scope } from './types';\r\nimport { logger } from './utils/logger';\r\n\r\nconst { version } = fse.readJSONSync(join(__dirname, '..', 'package.json'));\r\n\r\nconst command = new commander.Command('create-strapi-app')\r\n  .version(version)\r\n  .arguments('[directory]')\r\n  .usage('[directory] [options]')\r\n  .option('--quickstart', 'Quickstart app creation (deprecated)')\r\n  .option('--no-run', 'Do not start the application after it is created.')\r\n\r\n  // setup options\r\n  .option('--ts, --typescript', 'Initialize the project with TypeScript (default)')\r\n  .option('--js, --javascript', 'Initialize the project with Javascript')\r\n\r\n  // Package manager options\r\n  .option('--use-npm', 'Use npm as the project package manager')\r\n  .option('--use-yarn', 'Use yarn as the project package manager')\r\n  .option('--use-pnpm', 'Use pnpm as the project package manager')\r\n\r\n  // dependencies options\r\n  .option('--install', 'Install dependencies')\r\n  .option('--no-install', 'Do not install dependencies')\r\n\r\n  // Cloud options\r\n  .option('--skip-cloud', 'Skip cloud login and project creation')\r\n\r\n  // Example app\r\n  .option('--example', 'Use an example app')\r\n  .option('--no-example', 'Do not use an example app')\r\n\r\n  // git options\r\n  .option('--git-init', 'Initialize a git repository')\r\n  .option('--no-git-init', 'Do no initialize a git repository')\r\n\r\n  // Database options\r\n  .option('--dbclient <dbclient>', 'Database client')\r\n  .option('--dbhost <dbhost>', 'Database host')\r\n  .option('--dbport <dbport>', 'Database port')\r\n  .option('--dbname <dbname>', 'Database name')\r\n  .option('--dbusername <dbusername>', 'Database username')\r\n  .option('--dbpassword <dbpassword>', 'Database password')\r\n  .option('--dbssl <dbssl>', 'Database SSL')\r\n  .option('--dbfile <dbfile>', 'Database file path for sqlite')\r\n  .option('--skip-db', 'Skip database configuration')\r\n\r\n  .option('--template <template>', 'Specify a Strapi template')\r\n  .option('--template-branch <templateBranch>', 'Specify a branch for the template')\r\n  .option('--template-path <templatePath>', 'Specify a path to the template inside the repository')\r\n\r\n  .description('create a new application');\r\n\r\nasync function run(args: string[]): Promise<void> {\r\n  const options = command.parse(args).opts<Options>();\r\n  const directory = command.args[0];\r\n\r\n  logger.title(\r\n    'Strapi',\r\n    `${chalk.green(chalk.bold(`v${version}`))} ${chalk.bold(\"🚀 Let's create your new project\")}\\n`\r\n  );\r\n\r\n  if (\r\n    (options.javascript !== undefined || options.typescript !== undefined) &&\r\n    options.template !== undefined\r\n  ) {\r\n    logger.fatal(\r\n      `You cannot use ${chalk.bold('--javascript')} or ${chalk.bold('--typescript')} with ${chalk.bold('--template')}`\r\n    );\r\n  }\r\n\r\n  if (options.javascript === true && options.typescript === true) {\r\n    logger.fatal(\r\n      `You cannot use both ${chalk.bold('--typescript')} (--ts) and ${chalk.bold('--javascript')} (--js) flags together`\r\n    );\r\n  }\r\n\r\n  // Only prompt the example app option if there is no template option\r\n  if (options.example === true && options.template !== undefined) {\r\n    logger.fatal(`You cannot use ${chalk.bold('--example')} with ${chalk.bold('--template')}`);\r\n  }\r\n\r\n  if (options.template !== undefined && options.template.startsWith('-')) {\r\n    logger.fatal(`Template name ${chalk.bold(`\"${options.template}\"`)} is invalid`);\r\n  }\r\n\r\n  if ([options.useNpm, options.usePnpm, options.useYarn].filter(Boolean).length > 1) {\r\n    logger.fatal(\r\n      `You cannot specify multiple package managers at the same time ${chalk.bold('(--use-npm, --use-pnpm, --use-yarn)')}`\r\n    );\r\n  }\r\n\r\n  if (options.quickstart && !directory) {\r\n    logger.fatal(\r\n      `Please specify the ${chalk.bold('<directory>')} of your project when using ${chalk.bold('--quickstart')}`\r\n    );\r\n  }\r\n\r\n  checkNodeRequirements();\r\n\r\n  const appDirectory = directory || (await prompts.directory());\r\n\r\n  const rootPath = await checkInstallPath(appDirectory);\r\n\r\n  if (!options.skipCloud) {\r\n    await handleCloudLogin();\r\n  }\r\n\r\n  const tmpPath = join(os.tmpdir(), `strapi${crypto.randomBytes(6).toString('hex')}`);\r\n\r\n  const scope: Scope = {\r\n    rootPath,\r\n    name: basename(rootPath),\r\n    packageManager: getPkgManager(options),\r\n    database: await getDatabaseInfos(options),\r\n    template: options.template,\r\n    templateBranch: options.templateBranch,\r\n    templatePath: options.templatePath,\r\n    isQuickstart: options.quickstart,\r\n    useExample: false,\r\n    runApp: options.quickstart === true && options.run !== false,\r\n    strapiVersion: version,\r\n    packageJsonStrapi: {\r\n      template: options.template,\r\n    },\r\n    uuid: (process.env.STRAPI_UUID_PREFIX || '') + crypto.randomUUID(),\r\n    docker: process.env.DOCKER === 'true',\r\n    deviceId: machineID(),\r\n    tmpPath,\r\n    gitInit: true,\r\n    devDependencies: {},\r\n    dependencies: {\r\n      '@strapi/strapi': version,\r\n      '@strapi/plugin-users-permissions': version,\r\n      '@strapi/plugin-cloud': version,\r\n      // third party\r\n      react: '^18.0.0',\r\n      'react-dom': '^18.0.0',\r\n      'react-router-dom': '^6.0.0',\r\n      'styled-components': '^6.0.0',\r\n    },\r\n  };\r\n\r\n  if (options.template !== undefined) {\r\n    scope.useExample = false;\r\n  } else if (options.example === true) {\r\n    scope.useExample = true;\r\n  } else if (options.example === false || options.quickstart === true) {\r\n    scope.useExample = false;\r\n  } else {\r\n    scope.useExample = await prompts.example();\r\n  }\r\n\r\n  if (options.javascript === true) {\r\n    scope.useTypescript = false;\r\n  } else if (options.typescript === true || options.quickstart) {\r\n    scope.useTypescript = true;\r\n  } else if (!options.template) {\r\n    scope.useTypescript = await prompts.typescript();\r\n  }\r\n\r\n  if (options.install === true || options.quickstart) {\r\n    scope.installDependencies = true;\r\n  } else if (options.install === false) {\r\n    scope.installDependencies = false;\r\n  } else {\r\n    scope.installDependencies = await prompts.installDependencies(scope.packageManager);\r\n  }\r\n\r\n  if (scope.useTypescript) {\r\n    scope.devDependencies = {\r\n      ...scope.devDependencies,\r\n      typescript: '^5',\r\n      '@types/node': '^20',\r\n      '@types/react': '^18',\r\n      '@types/react-dom': '^18',\r\n    };\r\n  }\r\n\r\n  if (options.gitInit === true || options.quickstart) {\r\n    scope.gitInit = true;\r\n  } else if (options.gitInit === false) {\r\n    scope.gitInit = false;\r\n  } else {\r\n    scope.gitInit = await prompts.gitInit();\r\n  }\r\n\r\n  addDatabaseDependencies(scope);\r\n\r\n  try {\r\n    await createStrapi(scope);\r\n  } catch (error: unknown) {\r\n    if (!(error instanceof Error)) {\r\n      throw error;\r\n    }\r\n\r\n    await trackError({ scope, error });\r\n\r\n    logger.fatal(error.message);\r\n  }\r\n}\r\n\r\nfunction getPkgManager(options: Options) {\r\n  if (options.useNpm === true) {\r\n    return 'npm';\r\n  }\r\n\r\n  if (options.usePnpm === true) {\r\n    return 'pnpm';\r\n  }\r\n\r\n  if (options.useYarn === true) {\r\n    return 'yarn';\r\n  }\r\n\r\n  const userAgent = process.env.npm_config_user_agent || '';\r\n\r\n  if (userAgent.startsWith('yarn')) {\r\n    return 'yarn';\r\n  }\r\n\r\n  if (userAgent.startsWith('pnpm')) {\r\n    return 'pnpm';\r\n  }\r\n\r\n  return 'npm';\r\n}\r\n\r\nexport { run, createStrapi };\r\nexport type { Scope };\r\n"],"names":["directory","inquirer","gitInit","installDependencies","chalk","_","logger","cloudServices","cloudCli","e","retry","url","fse","path","pipeline","Readable","tar","execa","os","join","kebabCase","merge","crypto","version","semver","resolve","machineIdSync","randomUUID","database","commander","prompts.directory","basename","prompts.example","prompts.typescript","prompts.installDependencies","prompts.gitInit"],"mappings":"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"}