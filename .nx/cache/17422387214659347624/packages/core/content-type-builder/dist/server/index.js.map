{"version":3,"file":"index.js","sources":["../../server/src/config.ts","../../server/src/bootstrap.ts","../../server/src/utils/attributes.ts","../../server/src/services/schema-builder/schema-handler.ts","../../server/src/services/schema-builder/component-builder.ts","../../server/src/services/constants.ts","../../server/src/services/schema-builder/content-type-builder.ts","../../server/src/services/schema-builder/index.ts","../../server/src/services/content-types.ts","../../server/src/services/components.ts","../../server/src/services/component-categories.ts","../../server/src/services/builder.ts","../../server/src/services/api-handler.ts","../../server/src/services/index.ts","../../server/src/utils/index.ts","../../server/src/controllers/builder.ts","../../server/src/controllers/validation/common.ts","../../server/src/controllers/validation/component-category.ts","../../server/src/controllers/component-categories.ts","../../server/src/controllers/validation/types.ts","../../server/src/controllers/validation/relations.ts","../../server/src/controllers/validation/model-schema.ts","../../server/src/utils/typeguards.ts","../../server/src/controllers/validation/data-transform.ts","../../server/src/controllers/validation/component.ts","../../server/src/controllers/components.ts","../../server/src/controllers/validation/content-type.ts","../../server/src/controllers/content-types.ts","../../server/src/controllers/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/index.ts"],"sourcesContent":["export default {\r\n  default: {},\r\n  validator() {},\r\n};\r\n","import type { Core } from '@strapi/types';\r\n\r\nexport default async ({ strapi }: { strapi: Core.Strapi }) => {\r\n  const actions = [\r\n    {\r\n      section: 'plugins',\r\n      displayName: 'Read',\r\n      uid: 'read',\r\n      pluginName: 'content-type-builder',\r\n    },\r\n  ];\r\n\r\n  await strapi.service('admin::permission').actionProvider.registerMany(actions);\r\n};\r\n","import _ from 'lodash';\r\nimport utils, { errors } from '@strapi/utils';\r\nimport type { Schema } from '@strapi/types';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\nexport const isConfigurable = (attribute: Schema.Attribute.AnyAttribute) =>\r\n  _.get(attribute, 'configurable', true);\r\n\r\nexport const isRelation = (attribute: Schema.Attribute.AnyAttribute) =>\r\n  attribute.type === 'relation';\r\n\r\n/**\r\n * Formats a component's attributes\r\n */\r\nexport const formatAttributes = (model: any) => {\r\n  const { getVisibleAttributes } = utils.contentTypes;\r\n\r\n  // only get attributes that can be seen in the CTB\r\n  return getVisibleAttributes(model).reduce((acc: any, key) => {\r\n    acc[key] = formatAttribute(model.attributes[key]);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Formats a component attribute\r\n */\r\nexport const formatAttribute = (attribute: Schema.Attribute.AnyAttribute & Record<string, any>) => {\r\n  const { configurable, required, autoPopulate, pluginOptions } = attribute;\r\n\r\n  if (attribute.type === 'media') {\r\n    return {\r\n      type: 'media',\r\n      multiple: !!attribute.multiple,\r\n      required: !!required,\r\n      configurable: configurable === false ? false : undefined,\r\n      private: !!attribute.private,\r\n      allowedTypes: attribute.allowedTypes,\r\n      pluginOptions,\r\n    };\r\n  }\r\n\r\n  if (attribute.type === 'relation') {\r\n    return {\r\n      ...attribute,\r\n      type: 'relation',\r\n      target: attribute.target,\r\n      targetAttribute: attribute.inversedBy || attribute.mappedBy || null,\r\n      configurable: configurable === false ? false : undefined,\r\n      private: !!attribute.private,\r\n      pluginOptions,\r\n      // TODO: remove\r\n      autoPopulate,\r\n    };\r\n  }\r\n\r\n  return attribute;\r\n};\r\n\r\n// TODO: move to schema builder\r\nexport const replaceTemporaryUIDs = (uidMap: any) => (schema: any) => {\r\n  return {\r\n    ...schema,\r\n    attributes: Object.keys(schema.attributes).reduce((acc: any, key) => {\r\n      const attr = schema.attributes[key];\r\n      if (attr.type === 'component') {\r\n        if (_.has(uidMap, attr.component)) {\r\n          acc[key] = {\r\n            ...attr,\r\n            component: uidMap[attr.component],\r\n          };\r\n\r\n          return acc;\r\n        }\r\n\r\n        if (!_.has(strapi.components, attr.component)) {\r\n          throw new ApplicationError('component.notFound');\r\n        }\r\n      }\r\n\r\n      if (\r\n        attr.type === 'dynamiczone' &&\r\n        _.intersection(attr.components, Object.keys(uidMap)).length > 0\r\n      ) {\r\n        acc[key] = {\r\n          ...attr,\r\n          components: attr.components.map((value: any) => {\r\n            if (_.has(uidMap, value)) return uidMap[value];\r\n\r\n            if (!_.has(strapi.components, value)) {\r\n              throw new ApplicationError('component.notFound');\r\n            }\r\n\r\n            return value;\r\n          }),\r\n        };\r\n\r\n        return acc;\r\n      }\r\n\r\n      acc[key] = attr;\r\n      return acc;\r\n    }, {}),\r\n  };\r\n};\r\n","import path from 'path';\r\nimport type { Internal, Struct } from '@strapi/types';\r\nimport fse from 'fs-extra';\r\nimport _ from 'lodash';\r\n\r\nimport { isConfigurable } from '../../utils/attributes';\r\n\r\nexport type Infos = {\r\n  category?: string;\r\n  modelName?: string;\r\n  plugin?: string;\r\n  uid?: Internal.UID.ContentType;\r\n  dir: string;\r\n  filename: string;\r\n  schema?: Struct.ContentTypeSchema;\r\n};\r\n\r\nexport default function createSchemaHandler(infos: Infos) {\r\n  const { category, modelName, plugin, uid, dir, filename, schema } = infos;\r\n\r\n  const initialState = {\r\n    modelName,\r\n    plugin,\r\n    category,\r\n    uid,\r\n    dir,\r\n    filename,\r\n    schema:\r\n      schema ||\r\n      ({\r\n        info: {},\r\n        options: {},\r\n        attributes: {},\r\n      } as Struct.ContentTypeSchema),\r\n  };\r\n\r\n  const state = _.cloneDeep(initialState);\r\n\r\n  // always keep it the same to rollback\r\n  Object.freeze(initialState.schema);\r\n\r\n  let modified = false;\r\n  let deleted = false;\r\n\r\n  return {\r\n    get modelName() {\r\n      return initialState.modelName;\r\n    },\r\n\r\n    get plugin() {\r\n      return initialState.plugin;\r\n    },\r\n\r\n    get category() {\r\n      return initialState.category;\r\n    },\r\n\r\n    get kind() {\r\n      return _.get(state.schema, 'kind', 'collectionType');\r\n    },\r\n\r\n    get uid() {\r\n      return state.uid;\r\n    },\r\n\r\n    get writable() {\r\n      return _.get(state, 'plugin') !== 'admin';\r\n    },\r\n\r\n    setUID(val: Internal.UID.ContentType) {\r\n      modified = true;\r\n\r\n      state.uid = val;\r\n      return this;\r\n    },\r\n\r\n    setDir(val: string) {\r\n      modified = true;\r\n\r\n      state.dir = val;\r\n      return this;\r\n    },\r\n\r\n    get schema() {\r\n      return _.cloneDeep(state.schema);\r\n    },\r\n\r\n    setSchema(val: Struct.ContentTypeSchema) {\r\n      modified = true;\r\n\r\n      state.schema = _.cloneDeep(val);\r\n      return this;\r\n    },\r\n\r\n    // get a particular path inside the schema\r\n    get(path: string[]) {\r\n      return _.get(state.schema, path);\r\n    },\r\n\r\n    // set a particular path inside the schema\r\n    set(path: string[] | string, val: unknown) {\r\n      if (!state.schema) return this;\r\n\r\n      modified = true;\r\n\r\n      const value = _.defaultTo(val, _.get(state.schema, path));\r\n      _.set(state.schema, path, value);\r\n\r\n      return this;\r\n    },\r\n\r\n    // delete a particular path inside the schema\r\n    unset(path: string[]) {\r\n      modified = true;\r\n\r\n      _.unset(state.schema, path);\r\n\r\n      return this;\r\n    },\r\n\r\n    delete() {\r\n      deleted = true;\r\n      return this;\r\n    },\r\n\r\n    getAttribute(key: string) {\r\n      return this.get(['attributes', key]);\r\n    },\r\n\r\n    setAttribute(key: string, attribute: any) {\r\n      return this.set(['attributes', key], attribute);\r\n    },\r\n\r\n    deleteAttribute(key: string) {\r\n      return this.unset(['attributes', key]);\r\n    },\r\n\r\n    setAttributes(newAttributes: Struct.SchemaAttributes) {\r\n      if (!this.schema) return this;\r\n\r\n      // delete old configurable attributes\r\n      for (const key in this.schema.attributes) {\r\n        if (isConfigurable((this.schema.attributes as any)[key])) {\r\n          this.deleteAttribute(key);\r\n        }\r\n      }\r\n\r\n      // set new Attributes\r\n      for (const key of Object.keys(newAttributes)) {\r\n        this.setAttribute(key, newAttributes[key as keyof Struct.SchemaAttributes]);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    removeContentType(uid: Internal.UID.ContentType) {\r\n      if (!state.schema) return this;\r\n\r\n      const attributes = state.schema.attributes as Record<string, any>;\r\n\r\n      Object.keys(attributes).forEach((key) => {\r\n        const attribute = attributes[key];\r\n\r\n        if (attribute.target === uid) {\r\n          this.deleteAttribute(key);\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    // utils\r\n    removeComponent(uid: Internal.UID.Component) {\r\n      if (!state.schema) return this;\r\n\r\n      const attributes = state.schema.attributes as Record<string, any>;\r\n\r\n      Object.keys(attributes).forEach((key) => {\r\n        const attr = attributes[key];\r\n\r\n        if (attr.type === 'component' && attr.component === uid) {\r\n          this.deleteAttribute(key);\r\n        }\r\n\r\n        if (\r\n          attr.type === 'dynamiczone' &&\r\n          Array.isArray(attr.components) &&\r\n          attr.components.includes(uid)\r\n        ) {\r\n          const updatedComponentList = attributes[key].components.filter(\r\n            (val: string) => val !== uid\r\n          );\r\n          this.set(['attributes', key, 'components'], updatedComponentList);\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    updateComponent(uid: Internal.UID.Component, newUID: Internal.UID.Component) {\r\n      if (!state.schema) return this;\r\n\r\n      const attributes = state.schema.attributes as Record<string, any>;\r\n\r\n      Object.keys(attributes).forEach((key) => {\r\n        const attr = attributes[key];\r\n\r\n        if (attr.type === 'component' && attr.component === uid) {\r\n          this.set(['attributes', key, 'component'], newUID);\r\n        }\r\n\r\n        if (\r\n          attr.type === 'dynamiczone' &&\r\n          Array.isArray(attr.components) &&\r\n          attr.components.includes(uid)\r\n        ) {\r\n          const updatedComponentList = attr.components.map((val: string) =>\r\n            val === uid ? newUID : val\r\n          );\r\n\r\n          this.set(['attributes', key, 'components'], updatedComponentList);\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    // save the schema to disk\r\n    async flush() {\r\n      if (!this.writable) {\r\n        return;\r\n      }\r\n\r\n      const initialPath = path.join(initialState.dir, initialState.filename);\r\n      const filePath = path.join(state.dir, state.filename);\r\n\r\n      if (deleted) {\r\n        await fse.remove(initialPath);\r\n\r\n        const list = await fse.readdir(initialState.dir);\r\n        if (list.length === 0) {\r\n          await fse.remove(initialState.dir);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (modified) {\r\n        if (!state.schema) return Promise.resolve();\r\n\r\n        await fse.ensureFile(filePath);\r\n\r\n        await fse.writeJSON(\r\n          filePath,\r\n          {\r\n            kind: state.schema.kind,\r\n            collectionName: state.schema.collectionName,\r\n            info: state.schema.info,\r\n            options: state.schema.options,\r\n            pluginOptions: state.schema.pluginOptions,\r\n            attributes: state.schema.attributes,\r\n            config: (state.schema as any).config,\r\n          },\r\n          { spaces: 2 }\r\n        );\r\n\r\n        // remove from oldPath\r\n        if (initialPath !== filePath) {\r\n          await fse.remove(initialPath);\r\n\r\n          const list = await fse.readdir(initialState.dir);\r\n          if (list.length === 0) {\r\n            await fse.remove(initialState.dir);\r\n          }\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      return Promise.resolve();\r\n    },\r\n\r\n    // reset the schema to its initial value\r\n    async rollback() {\r\n      if (!this.writable) {\r\n        return;\r\n      }\r\n\r\n      const initialPath = path.join(initialState.dir, initialState.filename);\r\n      const filePath = path.join(state.dir, state.filename);\r\n\r\n      // it was a creation so it needs to be deleted\r\n      if (!initialState.uid) {\r\n        await fse.remove(filePath);\r\n\r\n        const list = await fse.readdir(state.dir);\r\n        if (list.length === 0) {\r\n          await fse.remove(state.dir);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (modified || deleted) {\r\n        await fse.ensureFile(initialPath);\r\n        await fse.writeJSON(initialPath, initialState.schema, { spaces: 2 });\r\n\r\n        // remove\r\n        if (initialPath !== filePath) {\r\n          await fse.remove(filePath);\r\n\r\n          const list = await fse.readdir(state.dir);\r\n          if (list.length === 0) {\r\n            await fse.remove(state.dir);\r\n          }\r\n        }\r\n      }\r\n\r\n      return Promise.resolve();\r\n    },\r\n  };\r\n}\r\n","import path from 'path';\r\nimport type { Internal } from '@strapi/types';\r\nimport _ from 'lodash';\r\nimport pluralize from 'pluralize';\r\n\r\nimport { strings, errors } from '@strapi/utils';\r\nimport { isConfigurable } from '../../utils/attributes';\r\nimport createSchemaHandler from './schema-handler';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\nexport default function createComponentBuilder() {\r\n  return {\r\n    createComponentUID({ category, displayName }: any) {\r\n      return `${strings.nameToSlug(category)}.${strings.nameToSlug(displayName)}`;\r\n    },\r\n\r\n    createNewComponentUIDMap(components: object[]) {\r\n      return components.reduce((uidMap: any, component: any) => {\r\n        uidMap[component.tmpUID] = this.createComponentUID(component);\r\n        return uidMap;\r\n      }, {});\r\n    },\r\n\r\n    /**\r\n     * create a component in the tmpComponent map\r\n     */\r\n    createComponent(this: any, infos: any) {\r\n      const uid = this.createComponentUID(infos);\r\n\r\n      if (this.components.has(uid)) {\r\n        throw new ApplicationError('component.alreadyExists');\r\n      }\r\n\r\n      const handler = createSchemaHandler({\r\n        dir: path.join(strapi.dirs.app.components, strings.nameToSlug(infos.category)),\r\n        filename: `${strings.nameToSlug(infos.displayName)}.json`,\r\n      });\r\n\r\n      // TODO: create a utility for this\r\n      // Duplicate in admin/src/components/FormModal/forms/utils/createCollectionName.ts\r\n      const collectionName = `components_${strings.nameToCollectionName(\r\n        infos.category\r\n      )}_${strings.nameToCollectionName(pluralize(infos.displayName))}`;\r\n\r\n      this.components.forEach((compo: any) => {\r\n        if (compo.schema.collectionName === collectionName) {\r\n          throw new ApplicationError('component.alreadyExists');\r\n        }\r\n      });\r\n\r\n      handler\r\n        .setUID(uid)\r\n        .set('collectionName', collectionName)\r\n        .set(['info', 'displayName'], infos.displayName)\r\n        .set(['info', 'icon'], infos.icon)\r\n        .set(['info', 'description'], infos.description)\r\n        .set('pluginOptions', infos.pluginOptions)\r\n        .set('config', infos.config)\r\n        .setAttributes(this.convertAttributes(infos.attributes));\r\n\r\n      if (this.components.size === 0) {\r\n        strapi.telemetry.send('didCreateFirstComponent');\r\n      } else {\r\n        strapi.telemetry.send('didCreateComponent');\r\n      }\r\n\r\n      this.components.set(uid, handler);\r\n\r\n      return handler;\r\n    },\r\n\r\n    /**\r\n     * create a component in the tmpComponent map\r\n     */\r\n    editComponent(this: any, infos: any) {\r\n      const { uid } = infos;\r\n\r\n      if (!this.components.has(uid)) {\r\n        throw new errors.ApplicationError('component.notFound');\r\n      }\r\n\r\n      const component = this.components.get(uid);\r\n\r\n      const [, nameUID] = uid.split('.');\r\n\r\n      const newCategory = strings.nameToSlug(infos.category);\r\n      const newUID = `${newCategory}.${nameUID}`;\r\n\r\n      if (newUID !== uid && this.components.has(newUID)) {\r\n        throw new errors.ApplicationError('component.edit.alreadyExists');\r\n      }\r\n\r\n      const newDir = path.join(strapi.dirs.app.components, newCategory);\r\n\r\n      const oldAttributes = component.schema.attributes;\r\n\r\n      const newAttributes = _.omitBy(infos.attributes, (attr, key) => {\r\n        return _.has(oldAttributes, key) && !isConfigurable(oldAttributes[key]);\r\n      });\r\n\r\n      component\r\n        .setUID(newUID)\r\n        .setDir(newDir)\r\n        .set(['info', 'displayName'], infos.displayName)\r\n        .set(['info', 'icon'], infos.icon)\r\n        .set(['info', 'description'], infos.description)\r\n        .set('pluginOptions', infos.pluginOptions)\r\n        .setAttributes(this.convertAttributes(newAttributes));\r\n\r\n      if (newUID !== uid) {\r\n        this.components.forEach((compo: any) => {\r\n          compo.updateComponent(uid, newUID);\r\n        });\r\n\r\n        this.contentTypes.forEach((ct: any) => {\r\n          ct.updateComponent(uid, newUID);\r\n        });\r\n      }\r\n\r\n      return component;\r\n    },\r\n\r\n    deleteComponent(this: any, uid: Internal.UID.Component) {\r\n      if (!this.components.has(uid)) {\r\n        throw new errors.ApplicationError('component.notFound');\r\n      }\r\n\r\n      this.components.forEach((compo: any) => {\r\n        compo.removeComponent(uid);\r\n      });\r\n\r\n      this.contentTypes.forEach((ct: any) => {\r\n        ct.removeComponent(uid);\r\n      });\r\n\r\n      return this.components.get(uid).delete();\r\n    },\r\n  };\r\n}\r\n","export const modelTypes = {\r\n  CONTENT_TYPE: 'CONTENT_TYPE',\r\n  COMPONENT: 'COMPONENT',\r\n} as const;\r\n\r\nexport const typeKinds = {\r\n  SINGLE_TYPE: 'singleType',\r\n  COLLECTION_TYPE: 'collectionType',\r\n} as const;\r\n\r\nexport const DEFAULT_TYPES = [\r\n  // advanced types\r\n  'media',\r\n\r\n  // scalar types\r\n  'string',\r\n  'text',\r\n  'richtext',\r\n  'blocks',\r\n  'json',\r\n  'enumeration',\r\n  'password',\r\n  'email',\r\n  'integer',\r\n  'biginteger',\r\n  'float',\r\n  'decimal',\r\n  'date',\r\n  'time',\r\n  'datetime',\r\n  'timestamp',\r\n  'boolean',\r\n\r\n  'relation',\r\n] as const;\r\n\r\nexport const VALID_UID_TARGETS = ['string', 'text'] as const;\r\n\r\nexport const coreUids = {\r\n  STRAPI_USER: 'admin::user',\r\n  PREFIX: 'strapi::',\r\n} as const;\r\n\r\nexport const pluginsUids = {\r\n  UPLOAD_FILE: 'plugin::upload.file',\r\n} as const;\r\n","import path from 'path';\r\nimport _ from 'lodash';\r\n\r\nimport { strings, errors } from '@strapi/utils';\r\nimport type { Schema, Internal } from '@strapi/types';\r\nimport { isRelation, isConfigurable } from '../../utils/attributes';\r\nimport { typeKinds } from '../constants';\r\nimport createSchemaHandler from './schema-handler';\r\nimport { CreateContentTypeInput } from '../../controllers/validation/content-type';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\nconst reuseUnsetPreviousProperties = (\r\n  newAttribute: Schema.Attribute.AnyAttribute,\r\n  oldAttribute: Schema.Attribute.AnyAttribute\r\n) => {\r\n  _.defaults(\r\n    newAttribute,\r\n    _.omit(oldAttribute, [\r\n      'configurable',\r\n      'required',\r\n      'private',\r\n      'unique',\r\n      'pluginOptions',\r\n      'inversedBy',\r\n      'mappedBy',\r\n    ])\r\n  );\r\n};\r\n\r\nexport default function createComponentBuilder() {\r\n  return {\r\n    setRelation(this: any, { key, uid, attribute }: any) {\r\n      if (!_.has(attribute, 'target')) {\r\n        return;\r\n      }\r\n\r\n      const targetCT = this.contentTypes.get(attribute.target);\r\n      const targetAttribute = targetCT.getAttribute(attribute.targetAttribute);\r\n\r\n      if (!attribute.targetAttribute) {\r\n        return;\r\n      }\r\n\r\n      targetCT.setAttribute(\r\n        attribute.targetAttribute,\r\n        generateRelation({ key, attribute, uid, targetAttribute })\r\n      );\r\n    },\r\n\r\n    unsetRelation(this: any, attribute: any) {\r\n      if (!_.has(attribute, 'target')) {\r\n        return;\r\n      }\r\n\r\n      const targetCT = this.contentTypes.get(attribute.target);\r\n\r\n      const targetAttributeName = attribute.inversedBy || attribute.mappedBy;\r\n      const targetAttribute = targetCT.getAttribute(targetAttributeName);\r\n\r\n      if (!targetAttribute) return;\r\n\r\n      return targetCT.deleteAttribute(targetAttributeName);\r\n    },\r\n\r\n    /**\r\n     * Creates a content type in memory to be written to files later on\r\n     */\r\n    createContentType(this: any, infos: CreateContentTypeInput) {\r\n      const uid = createContentTypeUID(infos);\r\n\r\n      if (this.contentTypes.has(uid)) {\r\n        throw new ApplicationError('contentType.alreadyExists');\r\n      }\r\n\r\n      const contentType = createSchemaHandler({\r\n        modelName: infos.singularName,\r\n        dir: path.join(\r\n          strapi.dirs.app.api,\r\n          infos.singularName,\r\n          'content-types',\r\n          infos.singularName\r\n        ),\r\n        filename: `schema.json`,\r\n      });\r\n\r\n      this.contentTypes.set(uid, contentType);\r\n\r\n      // support self referencing content type relation\r\n      Object.keys(infos.attributes).forEach((key) => {\r\n        const { target } = infos.attributes[key];\r\n        if (target === '__self__') {\r\n          infos.attributes[key].target = uid;\r\n        }\r\n      });\r\n\r\n      contentType\r\n        .setUID(uid)\r\n        .set('kind', infos.kind || typeKinds.COLLECTION_TYPE)\r\n        .set(\r\n          'collectionName',\r\n          infos.collectionName || strings.nameToCollectionName(infos.pluralName)\r\n        )\r\n        .set('info', {\r\n          singularName: infos.singularName,\r\n          pluralName: infos.pluralName,\r\n          displayName: infos.displayName,\r\n          description: infos.description,\r\n        })\r\n        .set('options', {\r\n          ...(infos.options ?? {}),\r\n          draftAndPublish: infos.draftAndPublish,\r\n        })\r\n        .set('pluginOptions', infos.pluginOptions)\r\n        .set('config', infos.config)\r\n        .setAttributes(this.convertAttributes(infos.attributes));\r\n\r\n      Object.keys(infos.attributes).forEach((key) => {\r\n        const attribute = infos.attributes[key];\r\n\r\n        if (isRelation(attribute)) {\r\n          if (['manyToMany', 'oneToOne'].includes(attribute.relation)) {\r\n            if (attribute.target === uid && attribute.targetAttribute !== undefined) {\r\n              // self referencing relation\r\n              const targetAttribute = infos.attributes[attribute.targetAttribute];\r\n\r\n              if (targetAttribute.dominant === undefined) {\r\n                attribute.dominant = true;\r\n              } else {\r\n                attribute.dominant = false;\r\n              }\r\n            } else {\r\n              attribute.dominant = true;\r\n            }\r\n          }\r\n\r\n          this.setRelation({\r\n            key,\r\n            uid,\r\n            attribute,\r\n          });\r\n        }\r\n      });\r\n\r\n      return contentType;\r\n    },\r\n\r\n    editContentType(this: any, infos: any) {\r\n      const { uid } = infos;\r\n\r\n      if (!this.contentTypes.has(uid)) {\r\n        throw new ApplicationError('contentType.notFound');\r\n      }\r\n\r\n      const contentType = this.contentTypes.get(uid);\r\n\r\n      const oldAttributes = contentType.schema.attributes;\r\n\r\n      const newAttributes = _.omitBy(infos.attributes, (attr, key) => {\r\n        return _.has(oldAttributes, key) && !isConfigurable(oldAttributes[key]);\r\n      });\r\n\r\n      const newKeys = _.difference(Object.keys(newAttributes), Object.keys(oldAttributes));\r\n      const deletedKeys = _.difference(Object.keys(oldAttributes), Object.keys(newAttributes));\r\n      const remainingKeys = _.intersection(Object.keys(oldAttributes), Object.keys(newAttributes));\r\n\r\n      // remove old relations\r\n      deletedKeys.forEach((key) => {\r\n        const attribute = oldAttributes[key];\r\n\r\n        const targetAttributeName = attribute.inversedBy || attribute.mappedBy;\r\n\r\n        // if the old relation has a target attribute. we need to remove it in the target type\r\n        if (isConfigurable(attribute) && isRelation(attribute) && !_.isNil(targetAttributeName)) {\r\n          this.unsetRelation(attribute);\r\n        }\r\n      });\r\n\r\n      remainingKeys.forEach((key) => {\r\n        const oldAttribute = oldAttributes[key];\r\n        const newAttribute = newAttributes[key];\r\n\r\n        if (!isRelation(oldAttribute) && isRelation(newAttribute)) {\r\n          return this.setRelation({\r\n            key,\r\n            uid,\r\n            attribute: newAttributes[key],\r\n          });\r\n        }\r\n\r\n        if (isRelation(oldAttribute) && !isRelation(newAttribute)) {\r\n          return this.unsetRelation(oldAttribute);\r\n        }\r\n\r\n        if (isRelation(oldAttribute) && isRelation(newAttribute)) {\r\n          const oldTargetAttributeName = oldAttribute.inversedBy || oldAttribute.mappedBy;\r\n\r\n          const sameRelation = oldAttribute.relation === newAttribute.relation;\r\n          const targetAttributeHasChanged = oldTargetAttributeName !== newAttribute.targetAttribute;\r\n\r\n          if (!sameRelation || targetAttributeHasChanged) {\r\n            this.unsetRelation(oldAttribute);\r\n          }\r\n\r\n          // keep extra options that were set manually on oldAttribute\r\n          reuseUnsetPreviousProperties(newAttribute, oldAttribute);\r\n\r\n          if (oldAttribute.inversedBy) {\r\n            newAttribute.dominant = true;\r\n          } else if (oldAttribute.mappedBy) {\r\n            newAttribute.dominant = false;\r\n          }\r\n\r\n          return this.setRelation({\r\n            key,\r\n            uid,\r\n            attribute: newAttribute,\r\n          });\r\n        }\r\n      });\r\n\r\n      // add new relations\r\n      newKeys.forEach((key) => {\r\n        const attribute = newAttributes[key];\r\n\r\n        if (isRelation(attribute)) {\r\n          if (['manyToMany', 'oneToOne'].includes(attribute.relation)) {\r\n            if (attribute.target === uid && attribute.targetAttribute !== undefined) {\r\n              // self referencing relation\r\n              const targetAttribute = newAttributes[attribute.targetAttribute];\r\n\r\n              if (targetAttribute.dominant === undefined) {\r\n                attribute.dominant = true;\r\n              } else {\r\n                attribute.dominant = false;\r\n              }\r\n            } else {\r\n              attribute.dominant = true;\r\n            }\r\n          }\r\n\r\n          this.setRelation({\r\n            key,\r\n            uid,\r\n            attribute,\r\n          });\r\n        }\r\n      });\r\n\r\n      contentType\r\n        .set('kind', infos.kind || contentType.schema.kind)\r\n        .set(['info', 'displayName'], infos.displayName)\r\n        .set(['info', 'description'], infos.description)\r\n        .set('options', {\r\n          ...(infos.options ?? {}),\r\n          draftAndPublish: infos.draftAndPublish,\r\n        })\r\n        .set('pluginOptions', infos.pluginOptions)\r\n        .setAttributes(this.convertAttributes(newAttributes));\r\n\r\n      return contentType;\r\n    },\r\n\r\n    deleteContentType(this: any, uid: string) {\r\n      if (!this.contentTypes.has(uid)) {\r\n        throw new ApplicationError('contentType.notFound');\r\n      }\r\n\r\n      this.components.forEach((compo: any) => {\r\n        compo.removeContentType(uid);\r\n      });\r\n\r\n      this.contentTypes.forEach((ct: any) => {\r\n        ct.removeContentType(uid);\r\n      });\r\n\r\n      return this.contentTypes.get(uid).delete();\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Returns a uid from a content type infos\r\n *\r\n * @param {object} options options\r\n * @param {string} options.singularName content-type singularName\r\n * @returns {string} uid\r\n */\r\nconst createContentTypeUID = ({\r\n  singularName,\r\n}: {\r\n  singularName: string;\r\n}): Internal.UID.ContentType => `api::${singularName}.${singularName}`;\r\n\r\nconst generateRelation = ({ key, attribute, uid, targetAttribute = {} }: any) => {\r\n  const opts: any = {\r\n    type: 'relation',\r\n    target: uid,\r\n    autoPopulate: targetAttribute.autoPopulate,\r\n    private: targetAttribute.private || undefined,\r\n    pluginOptions: targetAttribute.pluginOptions || undefined,\r\n  };\r\n\r\n  switch (attribute.relation) {\r\n    case 'oneToOne': {\r\n      opts.relation = 'oneToOne';\r\n\r\n      if (attribute.dominant) {\r\n        opts.mappedBy = key;\r\n      } else {\r\n        opts.inversedBy = key;\r\n      }\r\n      break;\r\n    }\r\n    case 'oneToMany': {\r\n      opts.relation = 'manyToOne';\r\n      opts.inversedBy = key;\r\n      break;\r\n    }\r\n    case 'manyToOne': {\r\n      opts.relation = 'oneToMany';\r\n      opts.mappedBy = key;\r\n      break;\r\n    }\r\n    case 'manyToMany': {\r\n      opts.relation = 'manyToMany';\r\n\r\n      if (attribute.dominant) {\r\n        opts.mappedBy = key;\r\n      } else {\r\n        opts.inversedBy = key;\r\n      }\r\n\r\n      break;\r\n    }\r\n    default:\r\n  }\r\n\r\n  // we do this just to make sure we have the same key order when writing to files\r\n  const { type, relation, target, ...restOptions } = opts;\r\n\r\n  return {\r\n    type,\r\n    relation,\r\n    target,\r\n    ...restOptions,\r\n  };\r\n};\r\n","import { join } from 'path';\r\nimport _ from 'lodash';\r\n\r\nimport { errors } from '@strapi/utils';\r\nimport createSchemaHandler from './schema-handler';\r\nimport createComponentBuilder from './component-builder';\r\nimport createContentTypeBuilder from './content-type-builder';\r\n\r\n/**\r\n * Creates a content type schema builder instance\r\n */\r\nexport default function createBuilder() {\r\n  const components = Object.values(strapi.components).map((componentInput) => ({\r\n    category: componentInput.category,\r\n    modelName: componentInput.modelName,\r\n    plugin: componentInput.modelName,\r\n    uid: componentInput.uid,\r\n    filename: componentInput.__filename__,\r\n    dir: join(strapi.dirs.app.components, componentInput.category),\r\n    schema: componentInput.__schema__,\r\n    config: componentInput.config,\r\n  }));\r\n\r\n  const contentTypes = Object.values<any>(strapi.contentTypes).map((contentTypeInput) => {\r\n    const dir = contentTypeInput.plugin\r\n      ? join(\r\n          strapi.dirs.app.extensions,\r\n          contentTypeInput.plugin,\r\n          'content-types',\r\n          contentTypeInput.info.singularName\r\n        )\r\n      : join(\r\n          strapi.dirs.app.api,\r\n          contentTypeInput.apiName,\r\n          'content-types',\r\n          contentTypeInput.info.singularName\r\n        );\r\n\r\n    return {\r\n      modelName: contentTypeInput.modelName,\r\n      plugin: contentTypeInput.plugin,\r\n      uid: contentTypeInput.uid,\r\n      filename: 'schema.json',\r\n      dir,\r\n      schema: contentTypeInput.__schema__,\r\n      config: contentTypeInput.config,\r\n    };\r\n  });\r\n\r\n  return createSchemaBuilder({\r\n    components,\r\n    contentTypes,\r\n  });\r\n}\r\n\r\ntype SchemaBuilderOptions = {\r\n  components: any;\r\n  contentTypes: any;\r\n};\r\n\r\nfunction createSchemaBuilder({ components, contentTypes }: SchemaBuilderOptions) {\r\n  const tmpComponents = new Map();\r\n  const tmpContentTypes = new Map();\r\n\r\n  // init temporary ContentTypes\r\n  Object.keys(contentTypes).forEach((key) => {\r\n    tmpContentTypes.set(contentTypes[key].uid, createSchemaHandler(contentTypes[key]));\r\n  });\r\n\r\n  // init temporary components\r\n  Object.keys(components).forEach((key) => {\r\n    tmpComponents.set(components[key].uid, createSchemaHandler(components[key]));\r\n  });\r\n\r\n  return {\r\n    get components() {\r\n      return tmpComponents;\r\n    },\r\n    get contentTypes() {\r\n      return tmpContentTypes;\r\n    },\r\n\r\n    /**\r\n     * Convert Attributes received from the API to the right syntax\r\n     */\r\n    convertAttributes(attributes: any) {\r\n      return Object.keys(attributes).reduce(\r\n        (acc, key) => {\r\n          const attribute = attributes[key];\r\n\r\n          const { configurable, private: isPrivate } = attribute;\r\n\r\n          const baseProperties = {\r\n            private: isPrivate === true ? true : undefined,\r\n            configurable: configurable === false ? false : undefined,\r\n          };\r\n\r\n          if (attribute.type === 'relation') {\r\n            const { target, relation, targetAttribute, dominant, ...restOfProperties } = attribute;\r\n\r\n            const attr = {\r\n              type: 'relation',\r\n              relation,\r\n              target,\r\n              ...restOfProperties,\r\n              ...baseProperties,\r\n            };\r\n\r\n            acc[key] = attr;\r\n\r\n            if (target && !this.contentTypes.has(target)) {\r\n              throw new errors.ApplicationError(`target: ${target} does not exist`);\r\n            }\r\n\r\n            if (_.isNil(targetAttribute)) {\r\n              return acc;\r\n            }\r\n\r\n            if (['oneToOne', 'manyToMany'].includes(relation) && dominant === true) {\r\n              attr.inversedBy = targetAttribute;\r\n            } else if (['oneToOne', 'manyToMany'].includes(relation) && dominant === false) {\r\n              attr.mappedBy = targetAttribute;\r\n            } else if (['oneToOne', 'manyToOne', 'manyToMany'].includes(relation)) {\r\n              attr.inversedBy = targetAttribute;\r\n            } else if (['oneToMany'].includes(relation)) {\r\n              attr.mappedBy = targetAttribute;\r\n            }\r\n\r\n            return acc;\r\n          }\r\n\r\n          acc[key] = {\r\n            ...attribute,\r\n            ...baseProperties,\r\n          };\r\n\r\n          return acc;\r\n        },\r\n        {} as Record<string, unknown>\r\n      );\r\n    },\r\n\r\n    ...createComponentBuilder(),\r\n    ...createContentTypeBuilder(),\r\n\r\n    /**\r\n     * Write all type to files\r\n     */\r\n    writeFiles() {\r\n      const schemas = [\r\n        ...Array.from(tmpComponents.values()),\r\n        ...Array.from(tmpContentTypes.values()),\r\n      ];\r\n\r\n      return Promise.all(schemas.map((schema) => schema.flush()))\r\n        .catch((error) => {\r\n          strapi.log.error('Error writing schema files');\r\n          strapi.log.error(error);\r\n          return this.rollback();\r\n        })\r\n        .catch((error) => {\r\n          strapi.log.error(\r\n            'Error rolling back schema files. You might need to fix your files manually'\r\n          );\r\n          strapi.log.error(error);\r\n\r\n          throw new errors.ApplicationError('Invalid schema edition');\r\n        });\r\n    },\r\n\r\n    /**\r\n     * rollback all files\r\n     */\r\n    rollback() {\r\n      return Promise.all(\r\n        [...Array.from(tmpComponents.values()), ...Array.from(tmpContentTypes.values())].map(\r\n          (schema) => schema.rollback()\r\n        )\r\n      );\r\n    },\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport { getOr } from 'lodash/fp';\r\nimport { contentTypes as contentTypesUtils, errors } from '@strapi/utils';\r\nimport type { UID, Struct } from '@strapi/types';\r\nimport { formatAttributes, replaceTemporaryUIDs } from '../utils/attributes';\r\nimport createBuilder from './schema-builder';\r\nimport { coreUids, pluginsUids } from './constants';\r\n\r\nconst { ApplicationError } = errors;\r\n\r\nexport const isContentTypeVisible = (model: Struct.ContentTypeSchema) =>\r\n  getOr(true, 'pluginOptions.content-type-builder.visible', model) === true;\r\n\r\nexport const getRestrictRelationsTo = (contentType: Struct.ContentTypeSchema) => {\r\n  const { uid } = contentType;\r\n  if (uid === coreUids.STRAPI_USER) {\r\n    // TODO: replace with an obj { relation: 'x', bidirectional: true|false }\r\n    return ['oneWay', 'manyWay'];\r\n  }\r\n\r\n  if (\r\n    uid.startsWith(coreUids.PREFIX) ||\r\n    uid === pluginsUids.UPLOAD_FILE ||\r\n    !isContentTypeVisible(contentType)\r\n  ) {\r\n    return [];\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Format a contentType info to be used by the front-end\r\n */\r\nexport const formatContentType = (contentType: any) => {\r\n  const { uid, kind, modelName, plugin, collectionName, info } = contentType;\r\n\r\n  return {\r\n    uid,\r\n    plugin,\r\n    apiID: modelName,\r\n    schema: {\r\n      ...contentTypesUtils.getOptions(contentType),\r\n      displayName: info.displayName,\r\n      singularName: info.singularName,\r\n      pluralName: info.pluralName,\r\n      description: _.get(info, 'description', ''),\r\n      pluginOptions: contentType.pluginOptions,\r\n      kind: kind || 'collectionType',\r\n      collectionName,\r\n      attributes: formatAttributes(contentType),\r\n      visible: isContentTypeVisible(contentType),\r\n      restrictRelationsTo: getRestrictRelationsTo(contentType),\r\n    },\r\n  };\r\n};\r\n\r\nexport const createContentTypes = async (contentTypes: any[]) => {\r\n  const builder = createBuilder();\r\n  const createdContentTypes: any[] = [];\r\n\r\n  for (const contentType of contentTypes) {\r\n    createdContentTypes.push(await createContentType(contentType, { defaultBuilder: builder }));\r\n  }\r\n\r\n  await builder.writeFiles();\r\n\r\n  return createdContentTypes;\r\n};\r\n\r\ntype CreateContentTypeOptions = {\r\n  defaultBuilder?: any; // TODO\r\n};\r\n\r\n/**\r\n * Creates a content type and handle the nested components sent with it\r\n */\r\nexport const createContentType = async (\r\n  { contentType, components }: any,\r\n  options: CreateContentTypeOptions = {}\r\n) => {\r\n  const builder = options.defaultBuilder || createBuilder();\r\n  const uidMap = builder.createNewComponentUIDMap(components || []);\r\n\r\n  const replaceTmpUIDs = replaceTemporaryUIDs(uidMap);\r\n\r\n  const newContentType = builder.createContentType(replaceTmpUIDs(contentType));\r\n\r\n  // allow components to target the new contentType\r\n  const targetContentType = (infos: any) => {\r\n    Object.keys(infos.attributes).forEach((key) => {\r\n      const { target } = infos.attributes[key];\r\n      if (target === '__contentType__') {\r\n        infos.attributes[key].target = newContentType.uid;\r\n      }\r\n    });\r\n\r\n    return infos;\r\n  };\r\n\r\n  components?.forEach((component: any) => {\r\n    const options = replaceTmpUIDs(targetContentType(component));\r\n\r\n    if (!_.has(component, 'uid')) {\r\n      return builder.createComponent(options);\r\n    }\r\n\r\n    return builder.editComponent(options);\r\n  });\r\n\r\n  // generate api skeleton\r\n  await generateAPI({\r\n    displayName: contentType!.displayName || contentType!.info.displayName,\r\n    singularName: contentType!.singularName,\r\n    pluralName: contentType!.pluralName,\r\n    kind: contentType!.kind,\r\n  });\r\n\r\n  if (!options.defaultBuilder) {\r\n    await builder.writeFiles();\r\n  }\r\n\r\n  strapi.eventHub.emit('content-type.create', { contentType: newContentType });\r\n\r\n  return newContentType;\r\n};\r\n\r\n/**\r\n * Generate an API skeleton\r\n */\r\nexport const generateAPI = ({\r\n  singularName,\r\n  kind = 'collectionType',\r\n  pluralName,\r\n  displayName,\r\n}: any) => {\r\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n  const strapiGenerators = require('@strapi/generators');\r\n  return strapiGenerators.generate(\r\n    'content-type',\r\n    {\r\n      kind,\r\n      singularName,\r\n      id: singularName,\r\n      pluralName,\r\n      displayName,\r\n      destination: 'new',\r\n      bootstrapApi: true,\r\n      attributes: [],\r\n    },\r\n    { dir: strapi.dirs.app.root }\r\n  );\r\n};\r\n\r\n/**\r\n * Edits a contentType and handle the nested contentTypes sent with it\r\n */\r\nexport const editContentType = async (\r\n  uid: UID.ContentType,\r\n  { contentType, components = [] }: any\r\n) => {\r\n  const builder = createBuilder();\r\n\r\n  const previousSchema = builder.contentTypes.get(uid).schema;\r\n  const previousKind = previousSchema.kind;\r\n  const newKind = contentType.kind || previousKind;\r\n\r\n  // Restore non-visible attributes from previous schema\r\n  const previousAttributes = previousSchema.attributes;\r\n  const prevNonVisibleAttributes = contentTypesUtils\r\n    .getNonVisibleAttributes(previousSchema)\r\n    .reduce((acc, key) => {\r\n      if (key in previousAttributes) {\r\n        acc[key] = previousAttributes[key];\r\n      }\r\n\r\n      return acc;\r\n    }, {} as any);\r\n  contentType.attributes = _.merge(prevNonVisibleAttributes, contentType.attributes);\r\n\r\n  if (newKind !== previousKind && newKind === 'singleType') {\r\n    const entryCount = await strapi.db.query(uid).count();\r\n    if (entryCount > 1) {\r\n      throw new ApplicationError(\r\n        'You cannot convert a collectionType to a singleType when having multiple entries in DB'\r\n      );\r\n    }\r\n  }\r\n\r\n  const uidMap = builder.createNewComponentUIDMap(components);\r\n  const replaceTmpUIDs = replaceTemporaryUIDs(uidMap);\r\n\r\n  const updatedContentType = builder.editContentType({\r\n    uid,\r\n    ...replaceTmpUIDs(contentType),\r\n  });\r\n\r\n  components.forEach((component: any) => {\r\n    if (!_.has(component, 'uid')) {\r\n      return builder.createComponent(replaceTmpUIDs(component));\r\n    }\r\n\r\n    return builder.editComponent(replaceTmpUIDs(component));\r\n  });\r\n\r\n  if (newKind !== previousKind) {\r\n    const apiHandler = strapi.plugin('content-type-builder').service('api-handler');\r\n    await apiHandler.backup(uid);\r\n\r\n    try {\r\n      await apiHandler.clear(uid);\r\n\r\n      // generate new api skeleton\r\n      await generateAPI({\r\n        displayName: updatedContentType.schema.info.displayName,\r\n        singularName: updatedContentType.schema.info.singularName,\r\n        pluralName: updatedContentType.schema.info.pluralName,\r\n        kind: updatedContentType.schema.kind,\r\n      });\r\n\r\n      await builder.writeFiles();\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n      await apiHandler.rollback(uid);\r\n    }\r\n\r\n    return updatedContentType;\r\n  }\r\n\r\n  await builder.writeFiles();\r\n\r\n  strapi.eventHub.emit('content-type.update', { contentType: updatedContentType });\r\n\r\n  return updatedContentType;\r\n};\r\n\r\nexport const deleteContentTypes = async (uids: UID.ContentType[]) => {\r\n  const builder = createBuilder();\r\n  const apiHandler = strapi.plugin('content-type-builder').service('api-handler');\r\n\r\n  for (const uid of uids) {\r\n    await deleteContentType(uid, builder);\r\n  }\r\n\r\n  await builder.writeFiles();\r\n  for (const uid of uids) {\r\n    try {\r\n      await apiHandler.clear(uid);\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n      await apiHandler.rollback(uid);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Deletes a content type and the api files related to it\r\n */\r\nexport const deleteContentType = async (uid: UID.ContentType, defaultBuilder: any = undefined) => {\r\n  const builder = defaultBuilder || createBuilder();\r\n  // make a backup\r\n  const apiHandler = strapi.plugin('content-type-builder').service('api-handler');\r\n  await apiHandler.backup(uid);\r\n\r\n  const contentType = builder.deleteContentType(uid);\r\n\r\n  if (!defaultBuilder) {\r\n    try {\r\n      await builder.writeFiles();\r\n      await apiHandler.clear(uid);\r\n    } catch (error) {\r\n      await apiHandler.rollback(uid);\r\n    }\r\n  }\r\n\r\n  strapi.eventHub.emit('content-type.delete', { contentType });\r\n\r\n  return contentType;\r\n};\r\n","import type { Internal, Struct } from '@strapi/types';\r\nimport { get, has } from 'lodash';\r\n\r\nimport { formatAttributes, replaceTemporaryUIDs } from '../utils/attributes';\r\nimport createBuilder from './schema-builder';\r\n\r\n/**\r\n * Formats a component attributes\r\n */\r\nexport const formatComponent = (component: any) => {\r\n  const { uid, modelName, connection, collectionName, info, category } = component;\r\n\r\n  return {\r\n    uid,\r\n    category,\r\n    apiId: modelName,\r\n    schema: {\r\n      displayName: get(info, 'displayName'),\r\n      description: get(info, 'description', ''),\r\n      icon: get(info, 'icon'),\r\n      connection,\r\n      collectionName,\r\n      pluginOptions: component.pluginOptions,\r\n      attributes: formatAttributes(component),\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a component and handle the nested components sent with it\r\n */\r\nexport const createComponent = async ({ component, components = [] }: any) => {\r\n  const builder = createBuilder();\r\n\r\n  const uidMap = builder.createNewComponentUIDMap(components);\r\n  const replaceTmpUIDs = replaceTemporaryUIDs(uidMap);\r\n\r\n  const newComponent = builder.createComponent(replaceTmpUIDs(component));\r\n\r\n  components.forEach((component: any) => {\r\n    if (!has(component, 'uid')) {\r\n      return builder.createComponent(replaceTmpUIDs(component));\r\n    }\r\n\r\n    return builder.editComponent(replaceTmpUIDs(component));\r\n  });\r\n\r\n  await builder.writeFiles();\r\n\r\n  strapi.eventHub.emit('component.create', { component: newComponent });\r\n\r\n  return newComponent;\r\n};\r\n\r\ntype ComponentToCreate = {\r\n  component: Struct.ComponentSchema;\r\n  components?: Struct.ComponentSchema[];\r\n};\r\n\r\nexport const editComponent = async (\r\n  uid: Internal.UID.Component,\r\n  { component, components = [] }: ComponentToCreate\r\n) => {\r\n  const builder = createBuilder();\r\n\r\n  const uidMap = builder.createNewComponentUIDMap(components);\r\n  const replaceTmpUIDs = replaceTemporaryUIDs(uidMap);\r\n\r\n  const updatedComponent = builder.editComponent({\r\n    uid,\r\n    ...replaceTmpUIDs(component),\r\n  });\r\n\r\n  components.forEach((component) => {\r\n    if (!has(component, 'uid')) {\r\n      return builder.createComponent(replaceTmpUIDs(component));\r\n    }\r\n\r\n    return builder.editComponent(replaceTmpUIDs(component));\r\n  });\r\n\r\n  await builder.writeFiles();\r\n\r\n  strapi.eventHub.emit('component.update', { component: updatedComponent });\r\n\r\n  return updatedComponent;\r\n};\r\n\r\nexport const deleteComponent = async (uid: Internal.UID.Component) => {\r\n  const builder = createBuilder();\r\n\r\n  const deletedComponent = builder.deleteComponent(uid);\r\n\r\n  await builder.writeFiles();\r\n\r\n  strapi.eventHub.emit('component.delete', { component: deletedComponent });\r\n\r\n  return deletedComponent;\r\n};\r\n","import { join } from 'path';\r\nimport { strings, errors } from '@strapi/utils';\r\nimport type { Struct } from '@strapi/types';\r\nimport createBuilder from './schema-builder';\r\n\r\ntype Infos = {\r\n  name: string;\r\n};\r\n\r\ninterface WorkingComponent extends Struct.ComponentSchema {\r\n  setUID: (uid: string) => WorkingComponent;\r\n  setDir: (dir: string) => WorkingComponent;\r\n  updateComponent: (oldUID: string, newUID: string) => void;\r\n}\r\n\r\n/**\r\n * Edit a category name and move components to the write folder\r\n */\r\nexport const editCategory = async (name: string, infos: Infos) => {\r\n  const newName = strings.nameToSlug(infos.name);\r\n\r\n  // don't do anything the name doesn't change\r\n  if (name === newName) return;\r\n\r\n  if (!categoryExists(name)) {\r\n    throw new errors.ApplicationError('category not found');\r\n  }\r\n\r\n  if (categoryExists(newName)) {\r\n    throw new errors.ApplicationError('Name already taken');\r\n  }\r\n\r\n  const builder = createBuilder();\r\n\r\n  builder.components.forEach((component: WorkingComponent) => {\r\n    const oldUID = component.uid;\r\n    const newUID = `${newName}.${component.modelName}`;\r\n\r\n    // only edit the components in this specific category\r\n    if (component.category !== name) return;\r\n\r\n    component.setUID(newUID).setDir(join(strapi.dirs.app.components, newName));\r\n\r\n    builder.components.forEach((compo: WorkingComponent) => {\r\n      compo.updateComponent(oldUID, newUID);\r\n    });\r\n\r\n    builder.contentTypes.forEach((ct: WorkingComponent) => {\r\n      ct.updateComponent(oldUID, newUID);\r\n    });\r\n  });\r\n\r\n  await builder.writeFiles();\r\n\r\n  return newName;\r\n};\r\n\r\n/**\r\n * Deletes a category and its components\r\n */\r\nexport const deleteCategory = async (name: string) => {\r\n  if (!categoryExists(name)) {\r\n    throw new errors.ApplicationError('category not found');\r\n  }\r\n\r\n  const builder = createBuilder();\r\n\r\n  builder.components.forEach((component) => {\r\n    if (component.category === name) {\r\n      builder.deleteComponent(component.uid);\r\n    }\r\n  });\r\n\r\n  await builder.writeFiles();\r\n};\r\n\r\n/**\r\n * Checks if a category exists\r\n */\r\nconst categoryExists = (name: string) => {\r\n  const matchingIndex = Object.values(strapi.components).findIndex(\r\n    (component) => component.category === name\r\n  );\r\n\r\n  return matchingIndex > -1;\r\n};\r\n","import { snakeCase } from 'lodash/fp';\r\n\r\n// use snake_case\r\nexport const reservedAttributes = [\r\n  // TODO: these need to come from a centralized place so we don't break things accidentally in the future and can share them outside the CTB, for example on Strapi bootstrap prior to schema db sync\r\n\r\n  // ID fields\r\n  'id',\r\n  'document_id',\r\n\r\n  // Creator fields\r\n  'created_at',\r\n  'updated_at',\r\n  'published_at',\r\n  'created_by_id',\r\n  'updated_by_id',\r\n  // does not actually conflict because the fields are called *_by_id but we'll leave it to avoid confusion\r\n  'created_by',\r\n  'updated_by',\r\n\r\n  // Used for Strapi functionality\r\n  'entry_id',\r\n  'status',\r\n  'localizations',\r\n  'meta',\r\n  'locale',\r\n  '__component',\r\n  '__contentType',\r\n\r\n  // We support ending with * to denote prefixes\r\n  'strapi*',\r\n  '_strapi*',\r\n  '__strapi*',\r\n];\r\n\r\n// use snake_case\r\nexport const reservedModels = [\r\n  'boolean',\r\n  'date',\r\n  'date_time',\r\n  'time',\r\n  'upload',\r\n  'document',\r\n  'then', // no longer an issue but still restricting for being a javascript keyword\r\n\r\n  // We support ending with * to denote prefixes\r\n  'strapi*',\r\n  '_strapi*',\r\n  '__strapi*',\r\n];\r\n\r\nexport const getReservedNames = () => {\r\n  return {\r\n    models: reservedModels,\r\n    attributes: reservedAttributes,\r\n  };\r\n};\r\n\r\n// compare snake case to check the actual column names that will be used in the database\r\nexport const isReservedModelName = (name: string) => {\r\n  const snakeCaseName = snakeCase(name);\r\n  if (reservedModels.includes(snakeCaseName)) {\r\n    return true;\r\n  }\r\n\r\n  if (\r\n    reservedModels\r\n      .filter((key) => key.endsWith('*'))\r\n      .map((key) => key.slice(0, -1))\r\n      .some((prefix) => snakeCaseName.startsWith(prefix))\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// compare snake case to check the actual column names that will be used in the database\r\nexport const isReservedAttributeName = (name: string) => {\r\n  const snakeCaseName = snakeCase(name);\r\n  if (reservedAttributes.includes(snakeCaseName)) {\r\n    return true;\r\n  }\r\n\r\n  if (\r\n    reservedAttributes\r\n      .filter((key) => key.endsWith('*'))\r\n      .map((key) => key.slice(0, -1))\r\n      .some((prefix) => snakeCaseName.startsWith(prefix))\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import * as path from 'path';\r\nimport * as fse from 'fs-extra';\r\nimport type { Internal } from '@strapi/types';\r\n\r\n/**\r\n * Deletes the API folder of a contentType\r\n */\r\nexport async function clear(uid: Internal.UID.ContentType) {\r\n  // TODO double check if this is the correct way to get the apiName\r\n  const { apiName, modelName } = strapi.contentTypes[uid] as any;\r\n\r\n  const apiFolder = path.join(strapi.dirs.app.api, apiName);\r\n\r\n  await recursiveRemoveFiles(apiFolder, createDeleteApiFunction(modelName));\r\n  await deleteBackup(uid);\r\n}\r\n\r\n/**\r\n * Backups the API folder of a contentType\r\n * @param {string} uid content type uid\r\n */\r\nexport async function backup(uid: Internal.UID.ContentType) {\r\n  const { apiName } = strapi.contentTypes[uid] as any;\r\n\r\n  const apiFolder = path.join(strapi.dirs.app.api, apiName);\r\n  const backupFolder = path.join(strapi.dirs.app.api, '.backup', apiName);\r\n\r\n  // backup the api folder\r\n  await fse.copy(apiFolder, backupFolder);\r\n}\r\n\r\n/**\r\n * Deletes an API backup folder\r\n */\r\nasync function deleteBackup(uid: Internal.UID.ContentType) {\r\n  const { apiName } = strapi.contentTypes[uid] as any;\r\n\r\n  const backupFolder = path.join(strapi.dirs.app.api, '.backup');\r\n  const apiBackupFolder = path.join(strapi.dirs.app.api, '.backup', apiName);\r\n\r\n  await fse.remove(apiBackupFolder);\r\n\r\n  const list = await fse.readdir(backupFolder);\r\n  if (list.length === 0) {\r\n    await fse.remove(backupFolder);\r\n  }\r\n}\r\n\r\n/**\r\n * Rollbacks the API folder of a contentType\r\n */\r\nexport async function rollback(uid: Internal.UID.ContentType) {\r\n  const { apiName } = strapi.contentTypes[uid] as any;\r\n\r\n  const apiFolder = path.join(strapi.dirs.app.api, apiName);\r\n  const backupFolder = path.join(strapi.dirs.app.api, '.backup', apiName);\r\n\r\n  try {\r\n    await fse.access(backupFolder);\r\n  } catch {\r\n    throw new Error('Cannot rollback api that was not backed up');\r\n  }\r\n\r\n  await fse.remove(apiFolder);\r\n  await fse.copy(backupFolder, apiFolder);\r\n  await deleteBackup(uid);\r\n}\r\n\r\n/**\r\n * Creates a delete function to clear an api folder\r\n */\r\nconst createDeleteApiFunction = (baseName: string) => {\r\n  /**\r\n   * Delets a file in an api.\r\n   * Will only update routes.json instead of deleting it if other routes are present\r\n   */\r\n  return async (filePath: string) => {\r\n    const fileName = path.basename(filePath, path.extname(filePath));\r\n\r\n    const isSchemaFile = filePath.endsWith(`${baseName}/schema.json`);\r\n    if (fileName === baseName || isSchemaFile) {\r\n      return fse.remove(filePath);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Deletes a folder recursively using a delete function\r\n * @param {string} folder folder to delete\r\n */\r\nconst recursiveRemoveFiles = async (folder: string, deleteFn: (file: string) => unknown) => {\r\n  const filesName = await fse.readdir(folder);\r\n\r\n  for (const fileName of filesName) {\r\n    const filePath = path.join(folder, fileName);\r\n\r\n    const stat = await fse.stat(filePath);\r\n\r\n    if (stat.isDirectory()) {\r\n      await recursiveRemoveFiles(filePath, deleteFn);\r\n    } else {\r\n      await deleteFn(filePath);\r\n    }\r\n  }\r\n\r\n  const files = await fse.readdir(folder);\r\n  if (files.length === 0) {\r\n    await fse.remove(folder);\r\n  }\r\n};\r\n","import * as contentTypes from './content-types';\r\nimport * as components from './components';\r\nimport * as componentCategories from './component-categories';\r\nimport * as builder from './builder';\r\nimport * as apiHandler from './api-handler';\r\n\r\nexport default {\r\n  'content-types': contentTypes,\r\n  components,\r\n  'component-categories': componentCategories,\r\n  builder,\r\n  'api-handler': apiHandler,\r\n};\r\n","import type * as components from '../services/components';\r\nimport type * as builder from '../services/builder';\r\nimport type * as contentTypes from '../services/content-types';\r\nimport type * as componentCategories from '../services/component-categories';\r\nimport type * as apiHandler from '../services/api-handler';\r\n\r\ntype S = {\r\n  'content-types': typeof contentTypes;\r\n  components: typeof components;\r\n  'component-categories': typeof componentCategories;\r\n  builder: typeof builder;\r\n  'api-handler': typeof apiHandler;\r\n};\r\n\r\nexport function getService<T extends keyof S>(\r\n  name: T\r\n): S[T] extends (...args: any[]) => any ? ReturnType<S[T]> : S[T] {\r\n  return strapi.plugin('content-type-builder').service(name);\r\n}\r\n","import type { Context } from 'koa';\r\nimport { getService } from '../utils';\r\n\r\nexport default {\r\n  getReservedNames(ctx: Context) {\r\n    ctx.body = getService('builder').getReservedNames();\r\n  },\r\n};\r\n","/* eslint-disable no-template-curly-in-string */\r\nimport { yup, strings } from '@strapi/utils';\r\nimport _ from 'lodash';\r\nimport { TestConfig } from 'yup';\r\n\r\nexport const validators = {\r\n  required: yup.boolean(),\r\n  unique: yup.boolean(),\r\n  minLength: yup.number().integer().positive(),\r\n  maxLength: yup.number().integer().positive(),\r\n};\r\n\r\nexport const NAME_REGEX = /^[A-Za-z][_0-9A-Za-z]*$/;\r\nexport const COLLECTION_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\r\nexport const CATEGORY_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\r\nexport const ICON_REGEX = /^[A-Za-z0-9][-A-Za-z0-9]*$/;\r\nexport const UID_REGEX = /^[A-Za-z0-9-_.~]*$/;\r\n\r\nexport type CommonTestConfig = TestConfig<unknown | undefined, Record<string, unknown>>;\r\n\r\nexport const isValidName: CommonTestConfig = {\r\n  name: 'isValidName',\r\n  message: `\\${path} must match the following regex: ${NAME_REGEX}`,\r\n  test: (val: unknown) => val === '' || NAME_REGEX.test(val as string),\r\n};\r\n\r\nexport const isValidIcon: CommonTestConfig = {\r\n  name: 'isValidIcon',\r\n  message: `\\${path} is not a valid icon name. Make sure your icon name starts with an alphanumeric character and only includes alphanumeric characters or dashes.`,\r\n  test: (val) => val === '' || ICON_REGEX.test(val as string),\r\n};\r\n\r\nexport const isValidUID: CommonTestConfig = {\r\n  name: 'isValidUID',\r\n  message: `\\${path} must match the following regex: ${UID_REGEX}`,\r\n  test: (val) => val === '' || UID_REGEX.test(val as string),\r\n};\r\n\r\nexport const isValidCategoryName: CommonTestConfig = {\r\n  name: 'isValidCategoryName',\r\n  message: `\\${path} must match the following regex: ${CATEGORY_NAME_REGEX}`,\r\n  test: (val) => val === '' || CATEGORY_NAME_REGEX.test(val as string),\r\n};\r\n\r\nexport const isValidCollectionName: CommonTestConfig = {\r\n  name: 'isValidCollectionName',\r\n  message: `\\${path} must match the following regex: ${COLLECTION_NAME_REGEX}`,\r\n  test: (val) => val === '' || COLLECTION_NAME_REGEX.test(val as string),\r\n};\r\n\r\nexport const isValidKey = (key: string): CommonTestConfig => ({\r\n  name: 'isValidKey',\r\n  message: `Attribute name '${key}' must match the following regex: ${NAME_REGEX}`,\r\n  test: () => NAME_REGEX.test(key),\r\n});\r\n\r\nexport const isValidEnum: CommonTestConfig = {\r\n  name: 'isValidEnum',\r\n  message: '${path} should not start with number',\r\n  test: (val) => val === '' || !strings.startsWithANumber(val as string),\r\n};\r\n\r\nexport const areEnumValuesUnique: CommonTestConfig = {\r\n  name: 'areEnumValuesUnique',\r\n  message: '${path} cannot contain duplicate values',\r\n  test(values) {\r\n    const filtered = [...new Set(values as string[])];\r\n\r\n    return filtered.length === (values as string[]).length;\r\n  },\r\n};\r\n\r\nexport const isValidRegExpPattern: CommonTestConfig = {\r\n  name: 'isValidRegExpPattern',\r\n  message: '${path} must be a valid RexExp pattern string',\r\n  test: (val) => val === '' || !!new RegExp(val as string),\r\n};\r\n\r\nexport const isValidDefaultJSON: CommonTestConfig = {\r\n  name: 'isValidDefaultJSON',\r\n  message: '${path} is not a valid JSON',\r\n  test(val) {\r\n    if (val === undefined) {\r\n      return true;\r\n    }\r\n\r\n    if (_.isNumber(val) || _.isNull(val) || _.isObject(val) || _.isArray(val)) {\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      JSON.parse(val as string);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  },\r\n};\r\n","import { yup, validateYupSchema } from '@strapi/utils';\r\nimport { isValidCategoryName } from './common';\r\n\r\nconst componentCategorySchema = yup\r\n  .object({\r\n    name: yup.string().min(3).test(isValidCategoryName).required('name.required'),\r\n  })\r\n  .noUnknown();\r\n\r\nexport default validateYupSchema(componentCategorySchema);\r\n","import type { Context } from 'koa';\r\nimport { getService } from '../utils';\r\nimport validateComponentCategory from './validation/component-category';\r\n\r\nexport default {\r\n  async editCategory(ctx: Context) {\r\n    const body = ctx.request.body as any;\r\n\r\n    try {\r\n      await validateComponentCategory(body);\r\n    } catch (error) {\r\n      return ctx.send({ error }, 400);\r\n    }\r\n\r\n    const { name } = ctx.params;\r\n\r\n    strapi.reload.isWatching = false;\r\n\r\n    const componentCategoryService = getService('component-categories');\r\n\r\n    const newName = await componentCategoryService.editCategory(name, body);\r\n\r\n    setImmediate(() => strapi.reload());\r\n\r\n    ctx.send({ name: newName });\r\n  },\r\n\r\n  async deleteCategory(ctx: Context) {\r\n    const { name } = ctx.params;\r\n\r\n    strapi.reload.isWatching = false;\r\n\r\n    const componentCategoryService = getService('component-categories');\r\n\r\n    await componentCategoryService.deleteCategory(name);\r\n\r\n    setImmediate(() => strapi.reload());\r\n\r\n    ctx.send({ name });\r\n  },\r\n};\r\n","import _ from 'lodash';\r\nimport { yup } from '@strapi/utils';\r\n\r\nimport type { TestContext } from 'yup';\r\nimport type { Schema, Struct } from '@strapi/types';\r\n\r\nimport { modelTypes, VALID_UID_TARGETS } from '../../services/constants';\r\nimport {\r\n  validators,\r\n  areEnumValuesUnique,\r\n  isValidDefaultJSON,\r\n  isValidName,\r\n  isValidEnum,\r\n  isValidUID,\r\n  isValidRegExpPattern,\r\n} from './common';\r\n\r\nexport type GetTypeValidatorOptions = {\r\n  types: ReadonlyArray<string>;\r\n  attributes?: Struct.SchemaAttributes;\r\n  modelType?: (typeof modelTypes)[keyof typeof modelTypes];\r\n};\r\n\r\nconst maxLengthIsGreaterThanOrEqualToMinLength = {\r\n  name: 'isGreaterThanMin',\r\n  message: 'maxLength must be greater or equal to minLength',\r\n  test(this: TestContext, value: unknown) {\r\n    const { minLength } = this.parent;\r\n    return !(!_.isUndefined(minLength) && !_.isUndefined(value) && (value as number) < minLength);\r\n  },\r\n};\r\n\r\nexport const getTypeValidator = (\r\n  attribute: Schema.Attribute.AnyAttribute,\r\n  { types, modelType, attributes }: GetTypeValidatorOptions\r\n) => {\r\n  return yup.object({\r\n    type: yup\r\n      .string()\r\n      .oneOf([...types])\r\n      .required(),\r\n    configurable: yup.boolean().nullable(),\r\n    private: yup.boolean().nullable(),\r\n    pluginOptions: yup.object(),\r\n    ...getTypeShape(attribute, { modelType, attributes }),\r\n  } as any);\r\n};\r\n\r\nconst getTypeShape = (attribute: Schema.Attribute.AnyAttribute, { attributes }: any = {}) => {\r\n  switch (attribute.type) {\r\n    /**\r\n     * complex types\r\n     */\r\n\r\n    case 'media': {\r\n      return {\r\n        multiple: yup.boolean(),\r\n        required: validators.required,\r\n        allowedTypes: yup\r\n          .array()\r\n          .of(yup.string().oneOf(['images', 'videos', 'files', 'audios']))\r\n          .min(1),\r\n      };\r\n    }\r\n\r\n    case 'uid': {\r\n      return {\r\n        required: validators.required,\r\n        targetField: yup\r\n          .string()\r\n          .oneOf(\r\n            Object.keys(attributes!).filter((key) =>\r\n              VALID_UID_TARGETS.includes(_.get(attributes![key] as any, 'type'))\r\n            )\r\n          )\r\n          .nullable(),\r\n        default: yup\r\n          .string()\r\n          .test(\r\n            'isValidDefaultUID',\r\n            'cannot define a default UID if the targetField is set',\r\n            function (value) {\r\n              const { targetField } = this.parent;\r\n              return !!(_.isNil(targetField) || _.isNil(value));\r\n            }\r\n          )\r\n          .test(isValidUID),\r\n        minLength: validators.minLength,\r\n        maxLength: validators.maxLength.max(256).test(maxLengthIsGreaterThanOrEqualToMinLength),\r\n        options: yup.object().shape({\r\n          separator: yup.string(),\r\n          lowercase: yup.boolean(),\r\n          decamelize: yup.boolean(),\r\n          customReplacements: yup.array().of(yup.array().of(yup.string()).min(2).max(2)),\r\n          preserveLeadingUnderscore: yup.boolean(),\r\n        }),\r\n      };\r\n    }\r\n\r\n    /**\r\n     * scalar types\r\n     */\r\n    case 'string':\r\n    case 'text': {\r\n      return {\r\n        default: yup.string(),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n        minLength: validators.minLength,\r\n        maxLength: validators.maxLength,\r\n        regex: yup.string().test(isValidRegExpPattern),\r\n      };\r\n    }\r\n    case 'richtext': {\r\n      return {\r\n        default: yup.string(),\r\n        required: validators.required,\r\n        minLength: validators.minLength,\r\n        maxLength: validators.maxLength,\r\n      };\r\n    }\r\n    case 'blocks': {\r\n      return {\r\n        required: validators.required,\r\n      };\r\n    }\r\n    case 'json': {\r\n      return {\r\n        default: yup.mixed().test(isValidDefaultJSON),\r\n        required: validators.required,\r\n      };\r\n    }\r\n    case 'enumeration': {\r\n      return {\r\n        enum: yup\r\n          .array()\r\n          .of(yup.string().test(isValidEnum).required())\r\n          .min(1)\r\n          .test(areEnumValuesUnique)\r\n          .required(),\r\n        default: yup.string().when('enum', (enumVal) => yup.string().oneOf(enumVal)),\r\n        enumName: yup.string().test(isValidName),\r\n        required: validators.required,\r\n      };\r\n    }\r\n    case 'password': {\r\n      return {\r\n        required: validators.required,\r\n        minLength: validators.minLength,\r\n        maxLength: validators.maxLength,\r\n      };\r\n    }\r\n    case 'email': {\r\n      return {\r\n        default: yup.string().email(),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n        minLength: validators.minLength,\r\n        maxLength: validators.maxLength,\r\n      };\r\n    }\r\n    case 'integer': {\r\n      return {\r\n        default: yup.number().integer(),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n        min: yup.number().integer(),\r\n        max: yup.number().integer(),\r\n      };\r\n    }\r\n    case 'biginteger': {\r\n      return {\r\n        default: yup.string().nullable().matches(/^\\d*$/),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n        min: yup.string().nullable().matches(/^\\d*$/),\r\n        max: yup.string().nullable().matches(/^\\d*$/),\r\n      };\r\n    }\r\n    case 'float': {\r\n      return {\r\n        default: yup.number(),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n        min: yup.number(),\r\n        max: yup.number(),\r\n      };\r\n    }\r\n    case 'decimal': {\r\n      return {\r\n        default: yup.number(),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n        min: yup.number(),\r\n        max: yup.number(),\r\n      };\r\n    }\r\n    case 'time':\r\n    case 'datetime':\r\n    case 'date': {\r\n      return {\r\n        default: yup.string(),\r\n        required: validators.required,\r\n        unique: validators.unique,\r\n      };\r\n    }\r\n    case 'boolean': {\r\n      return {\r\n        default: yup.boolean(),\r\n        required: validators.required,\r\n      };\r\n    }\r\n\r\n    case 'component': {\r\n      return {\r\n        required: validators.required,\r\n        repeatable: yup.boolean(),\r\n        // TODO: Add correct server validation for nested components\r\n        component: yup.string().required(),\r\n        min: yup.number(),\r\n        max: yup.number(),\r\n      };\r\n    }\r\n\r\n    case 'dynamiczone': {\r\n      return {\r\n        required: validators.required,\r\n        components: yup\r\n          .array()\r\n          .of(yup.string().required())\r\n          .test('isArray', '${path} must be an array', (value) => Array.isArray(value))\r\n          .min(1),\r\n        min: yup.number(),\r\n        max: yup.number(),\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return {};\r\n    }\r\n  }\r\n};\r\n","import { isUndefined } from 'lodash/fp';\r\nimport { yup } from '@strapi/utils';\r\nimport type { TestContext, TestFunction } from 'yup';\r\nimport type { Schema, UID } from '@strapi/types';\r\nimport { typeKinds, coreUids } from '../../services/constants';\r\nimport { isValidName } from './common';\r\n\r\nconst STRAPI_USER_RELATIONS = ['oneToOne', 'oneToMany'];\r\n\r\nconst isValidRelation = (validNatures: ReadonlyArray<string>): TestFunction<string | undefined> =>\r\n  function (this: TestContext, value) {\r\n    // NOTE: In case of an undefined value, delegate the check to .required()\r\n    if (value === undefined) {\r\n      return true;\r\n    }\r\n\r\n    if (this.parent.target === coreUids.STRAPI_USER) {\r\n      if (!validNatures.includes(value) || !isUndefined(this.parent.targetAttribute)) {\r\n        return this.createError({\r\n          path: this.path,\r\n          message: `must be one of the following values: ${STRAPI_USER_RELATIONS.join(', ')}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    return validNatures.includes(value)\r\n      ? true\r\n      : this.createError({\r\n          path: this.path,\r\n          message: `must be one of the following values: ${validNatures.join(', ')}`,\r\n        });\r\n  };\r\n\r\nexport const getRelationValidator = (\r\n  attribute: Schema.Attribute.Relation,\r\n  allowedRelations: ReadonlyArray<string>\r\n) => {\r\n  const contentTypesUIDs = Object.keys(strapi.contentTypes)\r\n    .filter((key) => strapi.contentTypes[key as UID.ContentType].kind === typeKinds.COLLECTION_TYPE)\r\n    .filter((key) => !key.startsWith(coreUids.PREFIX) || key === coreUids.STRAPI_USER)\r\n    .concat(['__self__', '__contentType__']);\r\n\r\n  const base = {\r\n    type: yup.string().oneOf(['relation']).required(),\r\n    relation: yup.string().test('isValidRelation', isValidRelation(allowedRelations)).required(),\r\n    configurable: yup.boolean().nullable(),\r\n    private: yup.boolean().nullable(),\r\n    pluginOptions: yup.object(),\r\n  };\r\n\r\n  switch (attribute.relation) {\r\n    case 'oneToOne':\r\n    case 'oneToMany':\r\n    case 'manyToOne':\r\n    case 'manyToMany':\r\n    case 'morphOne':\r\n    case 'morphMany': {\r\n      return yup.object({\r\n        ...base,\r\n        target: yup.string().oneOf(contentTypesUIDs).required(),\r\n        targetAttribute: yup.string().test(isValidName).nullable(),\r\n      });\r\n    }\r\n    case 'morphToOne':\r\n    case 'morphToMany':\r\n    default: {\r\n      return yup.object({ ...base });\r\n    }\r\n  }\r\n};\r\n","import { yup } from '@strapi/utils';\r\nimport _ from 'lodash';\r\nimport { snakeCase } from 'lodash/fp';\r\nimport { modelTypes, typeKinds } from '../../services/constants';\r\nimport { getService } from '../../utils';\r\nimport { isValidKey, isValidCollectionName } from './common';\r\nimport { getTypeValidator } from './types';\r\nimport { getRelationValidator } from './relations';\r\n\r\ntype ModelTypeInput = (typeof modelTypes)[keyof typeof modelTypes];\r\n\r\ntype CreateAttributesInput = {\r\n  types: ReadonlyArray<string>;\r\n  relations: ReadonlyArray<string>;\r\n  modelType?: ModelTypeInput;\r\n};\r\n\r\nexport const createSchema = (\r\n  types: CreateAttributesInput['types'],\r\n  relations: CreateAttributesInput['relations'],\r\n  { modelType }: { modelType?: ModelTypeInput } = {}\r\n) => {\r\n  const shape = {\r\n    description: yup.string(),\r\n    options: yup.object(),\r\n    pluginOptions: yup.object(),\r\n    collectionName: yup.string().nullable().test(isValidCollectionName),\r\n    attributes: createAttributesValidator({ types, relations, modelType }),\r\n    draftAndPublish: yup.boolean(),\r\n  } as any;\r\n\r\n  if (modelType === modelTypes.CONTENT_TYPE) {\r\n    shape.kind = yup.string().oneOf([typeKinds.SINGLE_TYPE, typeKinds.COLLECTION_TYPE]).nullable();\r\n  }\r\n\r\n  return yup.object(shape).noUnknown();\r\n};\r\n\r\nconst createAttributesValidator = ({ types, modelType, relations }: CreateAttributesInput) => {\r\n  return yup.lazy((attributes) => {\r\n    return yup\r\n      .object()\r\n      .shape(\r\n        _.mapValues(attributes, (attribute, key) => {\r\n          if (isForbiddenKey(key)) {\r\n            return forbiddenValidator();\r\n          }\r\n\r\n          if (isConflictingKey(key, attributes)) {\r\n            return conflictingKeysValidator(key);\r\n          }\r\n\r\n          if (attribute.type === 'relation') {\r\n            return getRelationValidator(attribute, relations).test(isValidKey(key));\r\n          }\r\n\r\n          if (_.has(attribute, 'type')) {\r\n            return getTypeValidator(attribute, { types, modelType, attributes }).test(\r\n              isValidKey(key)\r\n            );\r\n          }\r\n\r\n          return typeOrRelationValidator;\r\n        })\r\n      )\r\n      .required('attributes.required');\r\n  });\r\n};\r\n\r\nconst isConflictingKey = (key: string, attributes: Record<string, any>) => {\r\n  const snakeCaseKey = snakeCase(key);\r\n\r\n  return Object.keys(attributes).some((existingKey) => {\r\n    if (existingKey === key) return false; // don't compare against itself\r\n    return snakeCase(existingKey) === snakeCaseKey;\r\n  });\r\n};\r\n\r\nconst isForbiddenKey = (key: string) => {\r\n  return getService('builder').isReservedAttributeName(key);\r\n};\r\n\r\nconst forbiddenValidator = () => {\r\n  const reservedNames = [...getService('builder').getReservedNames().attributes];\r\n\r\n  return yup.mixed().test({\r\n    name: 'forbiddenKeys',\r\n    message: `Attribute keys cannot be one of ${reservedNames.join(', ')}`,\r\n    test: () => false,\r\n  });\r\n};\r\n\r\nconst conflictingKeysValidator = (key: string) => {\r\n  return yup.mixed().test({\r\n    name: 'conflictingKeys',\r\n    message: `Attribute ${key} conflicts with an existing key`,\r\n    test: () => false,\r\n  });\r\n};\r\n\r\nconst typeOrRelationValidator = yup.object().test({\r\n  name: 'mustHaveTypeOrTarget',\r\n  message: 'Attribute must have either a type or a target',\r\n  test: () => false,\r\n});\r\n","import type { Schema } from '@strapi/types';\r\n\r\nexport const hasDefaultAttribute = (\r\n  attribute: Schema.Attribute.AnyAttribute\r\n): attribute is Schema.Attribute.AnyAttribute & Schema.Attribute.DefaultOption<unknown> => {\r\n  return 'default' in attribute;\r\n};\r\n","import type { Struct } from '@strapi/types';\r\nimport _ from 'lodash';\r\nimport { hasDefaultAttribute } from '../../utils/typeguards';\r\n\r\nexport const removeEmptyDefaults = (\r\n  data: Partial<Struct.ContentTypeSchema> | Partial<Struct.ComponentSchema> | undefined\r\n) => {\r\n  const { attributes } = data || {};\r\n\r\n  Object.keys(attributes!).forEach((attributeName) => {\r\n    const attribute = attributes![attributeName];\r\n\r\n    if (hasDefaultAttribute(attribute) && attribute.default === '') {\r\n      attribute.default = undefined;\r\n    }\r\n  });\r\n};\r\n\r\nexport const removeDeletedUIDTargetFields = (data: Struct.ContentTypeSchema) => {\r\n  if (_.has(data, 'attributes')) {\r\n    Object.values(data.attributes).forEach((attribute) => {\r\n      if (\r\n        attribute.type === 'uid' &&\r\n        !_.isUndefined(attribute.targetField) &&\r\n        !_.has(data.attributes, attribute.targetField)\r\n      ) {\r\n        attribute.targetField = undefined;\r\n      }\r\n    });\r\n  }\r\n};\r\n","import _ from 'lodash';\r\nimport { yup, validateYupSchema } from '@strapi/utils';\r\n\r\nimport type { Struct } from '@strapi/types';\r\nimport { modelTypes, DEFAULT_TYPES } from '../../services/constants';\r\nimport { isValidCategoryName, isValidIcon } from './common';\r\nimport { createSchema } from './model-schema';\r\nimport { removeEmptyDefaults } from './data-transform';\r\n\r\nexport const VALID_RELATIONS = ['oneToOne', 'oneToMany'];\r\nexport const VALID_TYPES = [...DEFAULT_TYPES, 'component', 'customField'];\r\n\r\nexport const componentSchema = createSchema(VALID_TYPES, VALID_RELATIONS, {\r\n  modelType: modelTypes.COMPONENT,\r\n})\r\n  .shape({\r\n    displayName: yup.string().min(1).required('displayName.required'),\r\n    icon: yup.string().nullable().test(isValidIcon),\r\n    category: yup.string().nullable().test(isValidCategoryName).required('category.required'),\r\n  })\r\n  .required()\r\n  .noUnknown();\r\n\r\nexport const nestedComponentSchema = yup.array().of(\r\n  componentSchema\r\n    .shape({\r\n      uid: yup.string(),\r\n      tmpUID: yup.string(),\r\n    })\r\n    .test({\r\n      name: 'mustHaveUIDOrTmpUID',\r\n      message: 'Component must have a uid or a tmpUID',\r\n      test(attr: unknown) {\r\n        if (_.has(attr, 'uid') && _.has(attr, 'tmpUID')) return false;\r\n        if (!_.has(attr, 'uid') && !_.has(attr, 'tmpUID')) return false;\r\n        return true;\r\n      },\r\n    })\r\n    .required()\r\n    .noUnknown()\r\n);\r\n\r\nexport const componentInputSchema = yup\r\n  .object({\r\n    component: componentSchema,\r\n    components: nestedComponentSchema,\r\n  })\r\n  .noUnknown();\r\n\r\nexport const validateComponentInput = validateYupSchema(componentInputSchema);\r\n\r\nconst updateComponentInputSchema = yup\r\n  .object({\r\n    component: componentSchema,\r\n    components: nestedComponentSchema,\r\n  })\r\n  .noUnknown();\r\n\r\nexport const validateUpdateComponentInput = (data: {\r\n  component?: Struct.ComponentSchema;\r\n  components?: Struct.ComponentSchema[];\r\n}) => {\r\n  if (_.has(data, 'component') && data.component) {\r\n    removeEmptyDefaults(data.component);\r\n  }\r\n\r\n  if (_.has(data, 'components') && Array.isArray(data.components)) {\r\n    data.components.forEach((data) => {\r\n      if (_.has(data, 'uid')) {\r\n        removeEmptyDefaults(data);\r\n      }\r\n    });\r\n  }\r\n\r\n  return validateYupSchema(updateComponentInputSchema)(data);\r\n};\r\n","import _ from 'lodash';\r\nimport type { Context } from 'koa';\r\nimport type { UID } from '@strapi/types';\r\nimport { getService } from '../utils';\r\nimport { validateComponentInput, validateUpdateComponentInput } from './validation/component';\r\n\r\n/**\r\n * Components controller\r\n */\r\n\r\nexport default {\r\n  /**\r\n   * GET /components handler\r\n   * Returns a list of available components\r\n   * @param {Object} ctx - koa context\r\n   */\r\n  async getComponents(ctx: Context) {\r\n    const componentService = getService('components');\r\n    const componentUIDs = Object.keys(strapi.components) as UID.Component[];\r\n\r\n    const data = componentUIDs.map((uid) => {\r\n      return componentService.formatComponent(strapi.components[uid]);\r\n    });\r\n\r\n    ctx.send({ data });\r\n  },\r\n\r\n  /**\r\n   * GET /components/:uid\r\n   * Returns a specific component\r\n   * @param {Object} ctx - koa context\r\n   */\r\n  async getComponent(ctx: Context) {\r\n    const { uid } = ctx.params;\r\n\r\n    const component = strapi.components[uid];\r\n\r\n    if (!component) {\r\n      return ctx.send({ error: 'component.notFound' }, 404);\r\n    }\r\n\r\n    const componentService = getService('components');\r\n\r\n    ctx.send({ data: componentService.formatComponent(component) });\r\n  },\r\n\r\n  /**\r\n   * POST /components\r\n   * Creates a component and returns its infos\r\n   * @param {Object} ctx - koa context\r\n   */\r\n  async createComponent(ctx: Context) {\r\n    const body = ctx.request.body as any;\r\n\r\n    try {\r\n      await validateComponentInput(body);\r\n    } catch (error) {\r\n      return ctx.send({ error }, 400);\r\n    }\r\n\r\n    try {\r\n      strapi.reload.isWatching = false;\r\n\r\n      const componentService = getService('components');\r\n\r\n      const component = await componentService.createComponent({\r\n        component: body.component,\r\n        components: body.components,\r\n      });\r\n\r\n      setImmediate(() => strapi.reload());\r\n\r\n      ctx.send({ data: { uid: component.uid } }, 201);\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n      ctx.send({ error: (error as any)?.message || 'Unknown error' }, 400);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * PUT /components/:uid\r\n   * Updates a component and return its infos\r\n   * @param {Object} ctx - koa context - enhanced koa context\r\n   */\r\n  async updateComponent(ctx: Context) {\r\n    const { uid } = ctx.params;\r\n    const body = ctx.request.body as any;\r\n\r\n    if (!_.has(strapi.components, uid)) {\r\n      return ctx.send({ error: 'component.notFound' }, 404);\r\n    }\r\n\r\n    try {\r\n      await validateUpdateComponentInput(body);\r\n    } catch (error) {\r\n      return ctx.send({ error }, 400);\r\n    }\r\n\r\n    try {\r\n      strapi.reload.isWatching = false;\r\n\r\n      const componentService = getService('components');\r\n\r\n      const component = (await componentService.editComponent(uid, {\r\n        component: body.component,\r\n        components: body.components,\r\n      })) as any;\r\n\r\n      setImmediate(() => strapi.reload());\r\n\r\n      ctx.send({ data: { uid: component.uid } });\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n\r\n      ctx.send({ error: (error as any)?.message || 'Unknown error' }, 400);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * DELETE /components/:uid\r\n   * Deletes a components and returns its old infos\r\n   * @param {Object} ctx - koa context\r\n   */\r\n  async deleteComponent(ctx: Context) {\r\n    const { uid } = ctx.params;\r\n\r\n    if (!_.has(strapi.components, uid)) {\r\n      return ctx.send({ error: 'component.notFound' }, 404);\r\n    }\r\n\r\n    try {\r\n      strapi.reload.isWatching = false;\r\n\r\n      const componentService = getService('components');\r\n\r\n      const component = await componentService.deleteComponent(uid);\r\n\r\n      setImmediate(() => strapi.reload());\r\n\r\n      ctx.send({ data: { uid: component.uid } });\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n      ctx.send({ error: (error as any)?.message || 'Unknown error' }, 400);\r\n    }\r\n  },\r\n};\r\n","/* eslint-disable no-template-curly-in-string */ // yup templates need to be in this format\r\n\r\nimport { flatMap, getOr, has, snakeCase } from 'lodash/fp';\r\nimport { yup, validateYupSchema } from '@strapi/utils';\r\n\r\nimport type { Struct, Internal } from '@strapi/types';\r\nimport { getService } from '../../utils';\r\nimport { modelTypes, DEFAULT_TYPES, typeKinds } from '../../services/constants';\r\nimport { createSchema } from './model-schema';\r\nimport { removeEmptyDefaults, removeDeletedUIDTargetFields } from './data-transform';\r\nimport { nestedComponentSchema } from './component';\r\n\r\n// Input flattens some fields of the \"info\" into the root type\r\nexport type CreateContentTypeInput = {\r\n  contentType?: Partial<Struct.ContentTypeSchema> & Partial<Struct.ContentTypeSchemaInfo>;\r\n  components?: Array<\r\n    Partial<Struct.ComponentSchema> &\r\n      Partial<Struct.SchemaInfo> & { tmpUID?: Internal.UID.Component }\r\n  >;\r\n  singularName: Struct.ContentTypeSchemaInfo['singularName'];\r\n  attributes: Struct.SchemaAttributes & Record<string, any>;\r\n  kind: Struct.ContentTypeKind;\r\n  collectionName?: Struct.CollectionTypeSchema['collectionName'];\r\n  pluralName: Struct.ContentTypeSchemaInfo['pluralName'];\r\n  displayName: Struct.ContentTypeSchemaInfo['displayName'];\r\n  description: Struct.ContentTypeSchemaInfo['description'];\r\n  options?: Struct.SchemaOptions;\r\n  draftAndPublish?: Struct.SchemaOptions['draftAndPublish'];\r\n  pluginOptions?: Struct.ContentTypeSchema['pluginOptions'];\r\n  config?: object;\r\n};\r\n\r\n/**\r\n * Allowed relation per type kind\r\n */\r\nconst VALID_RELATIONS = {\r\n  [typeKinds.SINGLE_TYPE]: [\r\n    'oneToOne',\r\n    'oneToMany',\r\n    'morphOne',\r\n    'morphMany',\r\n    'morphToOne',\r\n    'morphToMany',\r\n  ],\r\n  [typeKinds.COLLECTION_TYPE]: [\r\n    'oneToOne',\r\n    'oneToMany',\r\n    'manyToOne',\r\n    'manyToMany',\r\n    'morphOne',\r\n    'morphMany',\r\n    'morphToOne',\r\n    'morphToMany',\r\n  ],\r\n} as const;\r\n\r\n/**\r\n * Allowed types\r\n */\r\nconst VALID_TYPES = [...DEFAULT_TYPES, 'uid', 'component', 'dynamiczone', 'customField'];\r\n\r\n/**\r\n * Returns a yup schema to validate a content type payload\r\n */\r\nconst createContentTypeSchema = (data: CreateContentTypeInput, { isEdition = false } = {}) => {\r\n  const kind: keyof typeof VALID_RELATIONS = getOr(\r\n    typeKinds.COLLECTION_TYPE,\r\n    'contentType.kind',\r\n    data\r\n  );\r\n  const contentTypeSchema = createSchema(VALID_TYPES, VALID_RELATIONS[kind] || [], {\r\n    modelType: modelTypes.CONTENT_TYPE,\r\n  })\r\n    .shape({\r\n      displayName: yup.string().min(1).required(),\r\n      singularName: yup\r\n        .string()\r\n        .min(1)\r\n        .test(nameIsAvailable(isEdition))\r\n        .test(forbiddenContentTypeNameValidator())\r\n        .isKebabCase()\r\n        .required(),\r\n      pluralName: yup\r\n        .string()\r\n        .min(1)\r\n        .test(nameIsAvailable(isEdition))\r\n        .test(nameIsNotExistingCollectionName(isEdition)) // TODO: v5: require singularName to not match a collection name\r\n        .test(forbiddenContentTypeNameValidator())\r\n        .isKebabCase()\r\n        .required(),\r\n    })\r\n    .test(\r\n      'singularName-not-equal-pluralName',\r\n      '${path}: singularName and pluralName should be different',\r\n      (value) => value.singularName !== value.pluralName\r\n    );\r\n\r\n  return yup\r\n    .object({\r\n      // FIXME .noUnknown(false) will strip off the unwanted properties without throwing an error\r\n      // Why not having .noUnknown() ? Because we want to be able to add options relatable to EE features\r\n      // without having any reference to them in CE.\r\n      // Why not handle an \"options\" object in the content-type ? The admin panel needs lots of rework\r\n      // to be able to send this options object instead of top-level attributes.\r\n      // @nathan-pichon 20/02/2023\r\n      contentType: contentTypeSchema.required().noUnknown(false),\r\n      components: nestedComponentSchema,\r\n    })\r\n    .noUnknown();\r\n};\r\n\r\n/**\r\n * Validator for content type creation\r\n */\r\nexport const validateContentTypeInput = (data: CreateContentTypeInput) => {\r\n  return validateYupSchema(createContentTypeSchema(data))(data);\r\n};\r\n\r\n/**\r\n * Validator for content type edition\r\n */\r\nexport const validateUpdateContentTypeInput = (data: CreateContentTypeInput) => {\r\n  if (has('contentType', data)) {\r\n    removeEmptyDefaults(data.contentType);\r\n    removeDeletedUIDTargetFields(data.contentType as Struct.ContentTypeSchema);\r\n  }\r\n\r\n  if (has('components', data) && Array.isArray(data.components)) {\r\n    data.components.forEach((comp) => {\r\n      if (has('uid', comp)) {\r\n        removeEmptyDefaults(comp as Struct.ComponentSchema);\r\n      }\r\n    });\r\n  }\r\n\r\n  return validateYupSchema(createContentTypeSchema(data, { isEdition: true }))(data);\r\n};\r\n\r\nconst forbiddenContentTypeNameValidator = () => {\r\n  const reservedNames = getService('builder').getReservedNames().models;\r\n\r\n  return {\r\n    name: 'forbiddenContentTypeName',\r\n    message: `Content Type name cannot be one of ${reservedNames.join(', ')}`,\r\n    test(value: unknown) {\r\n      if (typeof value !== 'string') {\r\n        return true;\r\n      }\r\n\r\n      return !getService('builder').isReservedModelName(value);\r\n    },\r\n  };\r\n};\r\n\r\nconst nameIsAvailable = (isEdition: boolean) => {\r\n  // TODO TS: if strapi.contentTypes (ie, ContentTypes) works as an ArrayLike and is used like this, we may want to ensure it is typed so that it can be without using as\r\n  const usedNames = flatMap((ct: Struct.ContentTypeSchema) => {\r\n    return [ct.info?.singularName, ct.info?.pluralName];\r\n  })(strapi.contentTypes as any);\r\n\r\n  return {\r\n    name: 'nameAlreadyUsed',\r\n    message: 'contentType: name `${value}` is already being used by another content type.',\r\n    test(value: unknown) {\r\n      // don't check on edition\r\n      if (isEdition) return true;\r\n\r\n      // ignore if not a string (will be caught in another validator)\r\n      if (typeof value !== 'string') {\r\n        return true;\r\n      }\r\n\r\n      // compare snake case to check the actual column names that will be used in the database\r\n      return usedNames.every((usedName) => snakeCase(usedName) !== snakeCase(value));\r\n    },\r\n  };\r\n};\r\n\r\nconst nameIsNotExistingCollectionName = (isEdition: boolean) => {\r\n  const usedNames = Object.keys(strapi.contentTypes).map(\r\n    (key) => strapi.contentTypes[key as Internal.UID.ContentType].collectionName\r\n  ) as string[];\r\n\r\n  return {\r\n    name: 'nameAlreadyUsed',\r\n    message: 'contentType: name `${value}` is already being used by another content type.',\r\n    test(value: unknown) {\r\n      // don't check on edition\r\n      if (isEdition) return true;\r\n\r\n      // ignore if not a string (will be caught in another validator)\r\n      if (typeof value !== 'string') {\r\n        return true;\r\n      }\r\n\r\n      // compare snake case to check the actual column names that will be used in the database\r\n      return usedNames.every((usedName) => snakeCase(usedName) !== snakeCase(value));\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Validates type kind\r\n */\r\nconst kindSchema = yup.string().oneOf([typeKinds.SINGLE_TYPE, typeKinds.COLLECTION_TYPE]);\r\n\r\nexport const validateKind = validateYupSchema(kindSchema);\r\n","import _ from 'lodash';\r\nimport type { Context } from 'koa';\r\nimport type {} from 'koa-body';\r\nimport type { Internal } from '@strapi/types';\r\nimport { getService } from '../utils';\r\nimport {\r\n  validateContentTypeInput,\r\n  validateUpdateContentTypeInput,\r\n  validateKind,\r\n} from './validation/content-type';\r\n\r\nexport default {\r\n  async getContentTypes(ctx: Context) {\r\n    const { kind } = ctx.query;\r\n\r\n    try {\r\n      await validateKind(kind);\r\n    } catch (error) {\r\n      return ctx.send({ error }, 400);\r\n    }\r\n\r\n    const contentTypeService = getService('content-types');\r\n\r\n    const contentTypes = Object.keys(strapi.contentTypes)\r\n      .filter(\r\n        (uid) =>\r\n          !kind ||\r\n          _.get(strapi.contentTypes[uid as Internal.UID.ContentType], 'kind', 'collectionType') ===\r\n            kind\r\n      )\r\n      .map((uid) =>\r\n        contentTypeService.formatContentType(strapi.contentTypes[uid as Internal.UID.ContentType])\r\n      );\r\n\r\n    ctx.send({\r\n      data: contentTypes,\r\n    });\r\n  },\r\n\r\n  getContentType(ctx: Context) {\r\n    const { uid } = ctx.params;\r\n\r\n    const contentType = strapi.contentTypes[uid];\r\n\r\n    if (!contentType) {\r\n      return ctx.send({ error: 'contentType.notFound' }, 404);\r\n    }\r\n\r\n    const contentTypeService = getService('content-types');\r\n\r\n    ctx.send({ data: contentTypeService.formatContentType(contentType) });\r\n  },\r\n\r\n  async createContentType(ctx: Context) {\r\n    const body = ctx.request.body as any;\r\n\r\n    try {\r\n      await validateContentTypeInput(body);\r\n    } catch (error) {\r\n      return ctx.send({ error }, 400);\r\n    }\r\n\r\n    try {\r\n      strapi.reload.isWatching = false;\r\n\r\n      const contentTypeService = getService('content-types');\r\n\r\n      const contentType = await contentTypeService.createContentType({\r\n        contentType: body.contentType,\r\n        components: body.components,\r\n      });\r\n\r\n      const metricsPayload = {\r\n        eventProperties: {\r\n          kind: contentType.kind,\r\n        },\r\n      };\r\n\r\n      if (_.isEmpty(strapi.apis)) {\r\n        await strapi.telemetry.send('didCreateFirstContentType', metricsPayload);\r\n      } else {\r\n        await strapi.telemetry.send('didCreateContentType', metricsPayload);\r\n      }\r\n\r\n      setImmediate(() => strapi.reload());\r\n\r\n      ctx.send({ data: { uid: contentType.uid } }, 201);\r\n    } catch (err) {\r\n      strapi.log.error(err);\r\n      await strapi.telemetry.send('didNotCreateContentType', {\r\n        eventProperties: { error: (err as Error).message || err },\r\n      });\r\n      ctx.send({ error: (err as Error).message || 'Unknown error' }, 400);\r\n    }\r\n  },\r\n\r\n  async updateContentType(ctx: Context) {\r\n    const { uid } = ctx.params;\r\n    const body = ctx.request.body as any;\r\n\r\n    if (!_.has(strapi.contentTypes, uid)) {\r\n      return ctx.send({ error: 'contentType.notFound' }, 404);\r\n    }\r\n\r\n    try {\r\n      await validateUpdateContentTypeInput(body);\r\n    } catch (error) {\r\n      return ctx.send({ error }, 400);\r\n    }\r\n\r\n    try {\r\n      strapi.reload.isWatching = false;\r\n\r\n      const contentTypeService = getService('content-types');\r\n\r\n      const component = await contentTypeService.editContentType(uid, {\r\n        contentType: body.contentType,\r\n        components: body.components,\r\n      });\r\n\r\n      setImmediate(() => strapi.reload());\r\n\r\n      ctx.send({ data: { uid: component.uid } }, 201);\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n      ctx.send({ error: (error as Error)?.message || 'Unknown error' }, 400);\r\n    }\r\n  },\r\n\r\n  async deleteContentType(ctx: Context) {\r\n    const { uid } = ctx.params;\r\n\r\n    if (!_.has(strapi.contentTypes, uid)) {\r\n      return ctx.send({ error: 'contentType.notFound' }, 404);\r\n    }\r\n\r\n    try {\r\n      strapi.reload.isWatching = false;\r\n\r\n      const contentTypeService = getService('content-types');\r\n\r\n      const component = await contentTypeService.deleteContentType(uid);\r\n\r\n      setImmediate(() => strapi.reload());\r\n\r\n      ctx.send({ data: { uid: component.uid } });\r\n    } catch (error) {\r\n      strapi.log.error(error);\r\n      ctx.send({ error: (error as Error)?.message || 'Unknown error' }, 400);\r\n    }\r\n  },\r\n};\r\n","import builder from './builder';\r\nimport componentCategories from './component-categories';\r\nimport components from './components';\r\nimport contentTypes from './content-types';\r\n\r\nconst exportObject = {\r\n  builder,\r\n  'component-categories': componentCategories,\r\n  components,\r\n  'content-types': contentTypes,\r\n};\r\n\r\nexport default exportObject;\r\n","export default {\r\n  type: 'admin',\r\n  routes: [\r\n    {\r\n      method: 'GET',\r\n      path: '/reserved-names',\r\n      handler: 'builder.getReservedNames',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/content-types',\r\n      handler: 'content-types.getContentTypes',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/content-types/:uid',\r\n      handler: 'content-types.getContentType',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/content-types',\r\n      handler: 'content-types.createContentType',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/content-types/:uid',\r\n      handler: 'content-types.updateContentType',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/content-types/:uid',\r\n      handler: 'content-types.deleteContentType',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/components',\r\n      handler: 'components.getComponents',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/components/:uid',\r\n      handler: 'components.getComponent',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/components',\r\n      handler: 'components.createComponent',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/components/:uid',\r\n      handler: 'components.updateComponent',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/components/:uid',\r\n      handler: 'components.deleteComponent',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/component-categories/:name',\r\n      handler: 'component-categories.editCategory',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/component-categories/:name',\r\n      handler: 'component-categories.deleteCategory',\r\n      config: {\r\n        policies: [\r\n          {\r\n            name: 'admin::hasPermissions',\r\n            config: { actions: ['plugin::content-type-builder.read'] },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  ],\r\n};\r\n","export default {\r\n  type: 'content-api',\r\n  routes: [\r\n    {\r\n      method: 'GET',\r\n      path: '/content-types',\r\n      handler: 'content-types.getContentTypes',\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/content-types/:uid',\r\n      handler: 'content-types.getContentType',\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/components',\r\n      handler: 'components.getComponents',\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/components/:uid',\r\n      handler: 'components.getComponent',\r\n    },\r\n  ],\r\n};\r\n","import admin from './admin';\r\nimport contentApi from './content-api';\r\n\r\nexport default {\r\n  admin,\r\n  'content-api': contentApi,\r\n};\r\n","// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport '@strapi/types';\r\n\r\nimport config from './config';\r\nimport bootstrap from './bootstrap';\r\nimport services from './services';\r\nimport controllers from './controllers';\r\nimport routes from './routes';\r\n\r\nexport default () => ({\r\n  config,\r\n  bootstrap,\r\n  services,\r\n  controllers,\r\n  routes,\r\n});\r\n"],"names":["strapi","ApplicationError","errors","_","utils","path","uid","fse","createComponentBuilder","strings","components","pluralize","join","contentTypes","createContentTypeBuilder","getOr","contentTypesUtils","builder","options","apiHandler","get","component","has","snakeCase","componentCategories","yup","validateYupSchema","isUndefined","VALID_RELATIONS","VALID_TYPES","data","flatMap","controllers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAe,SAAA;AAAA,EACb,SAAS,CAAC;AAAA,EACV,YAAY;AAAA,EAAA;AACd;ACDA,MAAA,YAAe,OAAO,EAAE,QAAAA,QAAA,MAAsC;AAC5D,QAAM,UAAU;AAAA,IACd;AAAA,MACE,SAAS;AAAA,MACT,aAAa;AAAA,MACb,KAAK;AAAA,MACL,YAAY;AAAA,IAAA;AAAA,EAEhB;AAEA,QAAMA,QAAO,QAAQ,mBAAmB,EAAE,eAAe,aAAa,OAAO;AAC/E;ACTA,MAAM,EAAEC,kBAAAA,mBAAqB,IAAAC,MAAA;AAEtB,MAAM,iBAAiB,CAAC,cAC7BC,mBAAE,IAAI,WAAW,gBAAgB,IAAI;AAEhC,MAAM,aAAa,CAAC,cACzB,UAAU,SAAS;AAKR,MAAA,mBAAmB,CAAC,UAAe;AACxC,QAAA,EAAE,yBAAyBC,eAAAA,QAAM;AAGvC,SAAO,qBAAqB,KAAK,EAAE,OAAO,CAAC,KAAU,QAAQ;AAC3D,QAAI,GAAG,IAAI,gBAAgB,MAAM,WAAW,GAAG,CAAC;AACzC,WAAA;AAAA,EACT,GAAG,EAAE;AACP;AAKa,MAAA,kBAAkB,CAAC,cAAmE;AACjG,QAAM,EAAE,cAAc,UAAU,cAAc,cAAkB,IAAA;AAE5D,MAAA,UAAU,SAAS,SAAS;AACvB,WAAA;AAAA,MACL,MAAM;AAAA,MACN,UAAU,CAAC,CAAC,UAAU;AAAA,MACtB,UAAU,CAAC,CAAC;AAAA,MACZ,cAAc,iBAAiB,QAAQ,QAAQ;AAAA,MAC/C,SAAS,CAAC,CAAC,UAAU;AAAA,MACrB,cAAc,UAAU;AAAA,MACxB;AAAA,IACF;AAAA,EAAA;AAGE,MAAA,UAAU,SAAS,YAAY;AAC1B,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,MACN,QAAQ,UAAU;AAAA,MAClB,iBAAiB,UAAU,cAAc,UAAU,YAAY;AAAA,MAC/D,cAAc,iBAAiB,QAAQ,QAAQ;AAAA,MAC/C,SAAS,CAAC,CAAC,UAAU;AAAA,MACrB;AAAA;AAAA,MAEA;AAAA,IACF;AAAA,EAAA;AAGK,SAAA;AACT;AAGO,MAAM,uBAAuB,CAAC,WAAgB,CAAC,WAAgB;AAC7D,SAAA;AAAA,IACL,GAAG;AAAA,IACH,YAAY,OAAO,KAAK,OAAO,UAAU,EAAE,OAAO,CAAC,KAAU,QAAQ;AAC7D,YAAA,OAAO,OAAO,WAAW,GAAG;AAC9B,UAAA,KAAK,SAAS,aAAa;AAC7B,YAAID,WAAE,QAAA,IAAI,QAAQ,KAAK,SAAS,GAAG;AACjC,cAAI,GAAG,IAAI;AAAA,YACT,GAAG;AAAA,YACH,WAAW,OAAO,KAAK,SAAS;AAAA,UAClC;AAEO,iBAAA;AAAA,QAAA;AAGT,YAAI,CAACA,WAAE,QAAA,IAAI,OAAO,YAAY,KAAK,SAAS,GAAG;AACvC,gBAAA,IAAIF,mBAAiB,oBAAoB;AAAA,QAAA;AAAA,MACjD;AAGF,UACE,KAAK,SAAS,iBACdE,WAAA,QAAE,aAAa,KAAK,YAAY,OAAO,KAAK,MAAM,CAAC,EAAE,SAAS,GAC9D;AACA,YAAI,GAAG,IAAI;AAAA,UACT,GAAG;AAAA,UACH,YAAY,KAAK,WAAW,IAAI,CAAC,UAAe;AAC9C,gBAAIA,WAAAA,QAAE,IAAI,QAAQ,KAAK,EAAG,QAAO,OAAO,KAAK;AAE7C,gBAAI,CAACA,WAAE,QAAA,IAAI,OAAO,YAAY,KAAK,GAAG;AAC9B,oBAAA,IAAIF,mBAAiB,oBAAoB;AAAA,YAAA;AAG1C,mBAAA;AAAA,UACR,CAAA;AAAA,QACH;AAEO,eAAA;AAAA,MAAA;AAGT,UAAI,GAAG,IAAI;AACJ,aAAA;AAAA,IAAA,GACN,CAAE,CAAA;AAAA,EACP;AACF;ACxFA,SAAwB,oBAAoB,OAAc;AAClD,QAAA,EAAE,UAAU,WAAW,QAAQ,KAAK,KAAK,UAAU,WAAW;AAEpE,QAAM,eAAe;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QACE,UACC;AAAA,MACC,MAAM,CAAC;AAAA,MACP,SAAS,CAAC;AAAA,MACV,YAAY,CAAA;AAAA,IAAC;AAAA,EAEnB;AAEM,QAAA,QAAQE,WAAAA,QAAE,UAAU,YAAY;AAG/B,SAAA,OAAO,aAAa,MAAM;AAEjC,MAAI,WAAW;AACf,MAAI,UAAU;AAEP,SAAA;AAAA,IACL,IAAI,YAAY;AACd,aAAO,aAAa;AAAA,IACtB;AAAA,IAEA,IAAI,SAAS;AACX,aAAO,aAAa;AAAA,IACtB;AAAA,IAEA,IAAI,WAAW;AACb,aAAO,aAAa;AAAA,IACtB;AAAA,IAEA,IAAI,OAAO;AACT,aAAOA,WAAAA,QAAE,IAAI,MAAM,QAAQ,QAAQ,gBAAgB;AAAA,IACrD;AAAA,IAEA,IAAI,MAAM;AACR,aAAO,MAAM;AAAA,IACf;AAAA,IAEA,IAAI,WAAW;AACb,aAAOA,WAAE,QAAA,IAAI,OAAO,QAAQ,MAAM;AAAA,IACpC;AAAA,IAEA,OAAO,KAA+B;AACzB,iBAAA;AAEX,YAAM,MAAM;AACL,aAAA;AAAA,IACT;AAAA,IAEA,OAAO,KAAa;AACP,iBAAA;AAEX,YAAM,MAAM;AACL,aAAA;AAAA,IACT;AAAA,IAEA,IAAI,SAAS;AACJ,aAAAA,mBAAE,UAAU,MAAM,MAAM;AAAA,IACjC;AAAA,IAEA,UAAU,KAA+B;AAC5B,iBAAA;AAEL,YAAA,SAASA,mBAAE,UAAU,GAAG;AACvB,aAAA;AAAA,IACT;AAAA;AAAA,IAGA,IAAIE,OAAgB;AAClB,aAAOF,WAAE,QAAA,IAAI,MAAM,QAAQE,KAAI;AAAA,IACjC;AAAA;AAAA,IAGA,IAAIA,OAAyB,KAAc;AACrC,UAAA,CAAC,MAAM,OAAe,QAAA;AAEf,iBAAA;AAEL,YAAA,QAAQF,mBAAE,UAAU,KAAKA,mBAAE,IAAI,MAAM,QAAQE,KAAI,CAAC;AACxDF,iBAAAA,QAAE,IAAI,MAAM,QAAQE,OAAM,KAAK;AAExB,aAAA;AAAA,IACT;AAAA;AAAA,IAGA,MAAMA,OAAgB;AACT,iBAAA;AAETF,iBAAAA,QAAA,MAAM,MAAM,QAAQE,KAAI;AAEnB,aAAA;AAAA,IACT;AAAA,IAEA,SAAS;AACG,gBAAA;AACH,aAAA;AAAA,IACT;AAAA,IAEA,aAAa,KAAa;AACxB,aAAO,KAAK,IAAI,CAAC,cAAc,GAAG,CAAC;AAAA,IACrC;AAAA,IAEA,aAAa,KAAa,WAAgB;AACxC,aAAO,KAAK,IAAI,CAAC,cAAc,GAAG,GAAG,SAAS;AAAA,IAChD;AAAA,IAEA,gBAAgB,KAAa;AAC3B,aAAO,KAAK,MAAM,CAAC,cAAc,GAAG,CAAC;AAAA,IACvC;AAAA,IAEA,cAAc,eAAwC;AAChD,UAAA,CAAC,KAAK,OAAe,QAAA;AAGd,iBAAA,OAAO,KAAK,OAAO,YAAY;AACxC,YAAI,eAAgB,KAAK,OAAO,WAAmB,GAAG,CAAC,GAAG;AACxD,eAAK,gBAAgB,GAAG;AAAA,QAAA;AAAA,MAC1B;AAIF,iBAAW,OAAO,OAAO,KAAK,aAAa,GAAG;AAC5C,aAAK,aAAa,KAAK,cAAc,GAAoC,CAAC;AAAA,MAAA;AAGrE,aAAA;AAAA,IACT;AAAA,IAEA,kBAAkBC,MAA+B;AAC3C,UAAA,CAAC,MAAM,OAAe,QAAA;AAEpB,YAAA,aAAa,MAAM,OAAO;AAEhC,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACjC,cAAA,YAAY,WAAW,GAAG;AAE5B,YAAA,UAAU,WAAWA,MAAK;AAC5B,eAAK,gBAAgB,GAAG;AAAA,QAAA;AAAA,MAC1B,CACD;AAEM,aAAA;AAAA,IACT;AAAA;AAAA,IAGA,gBAAgBA,MAA6B;AACvC,UAAA,CAAC,MAAM,OAAe,QAAA;AAEpB,YAAA,aAAa,MAAM,OAAO;AAEhC,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACjC,cAAA,OAAO,WAAW,GAAG;AAE3B,YAAI,KAAK,SAAS,eAAe,KAAK,cAAcA,MAAK;AACvD,eAAK,gBAAgB,GAAG;AAAA,QAAA;AAG1B,YACE,KAAK,SAAS,iBACd,MAAM,QAAQ,KAAK,UAAU,KAC7B,KAAK,WAAW,SAASA,IAAG,GAC5B;AACA,gBAAM,uBAAuB,WAAW,GAAG,EAAE,WAAW;AAAA,YACtD,CAAC,QAAgB,QAAQA;AAAAA,UAC3B;AACA,eAAK,IAAI,CAAC,cAAc,KAAK,YAAY,GAAG,oBAAoB;AAAA,QAAA;AAAA,MAClE,CACD;AAEM,aAAA;AAAA,IACT;AAAA,IAEA,gBAAgBA,MAA6B,QAAgC;AACvE,UAAA,CAAC,MAAM,OAAe,QAAA;AAEpB,YAAA,aAAa,MAAM,OAAO;AAEhC,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACjC,cAAA,OAAO,WAAW,GAAG;AAE3B,YAAI,KAAK,SAAS,eAAe,KAAK,cAAcA,MAAK;AACvD,eAAK,IAAI,CAAC,cAAc,KAAK,WAAW,GAAG,MAAM;AAAA,QAAA;AAGnD,YACE,KAAK,SAAS,iBACd,MAAM,QAAQ,KAAK,UAAU,KAC7B,KAAK,WAAW,SAASA,IAAG,GAC5B;AACM,gBAAA,uBAAuB,KAAK,WAAW;AAAA,YAAI,CAAC,QAChD,QAAQA,OAAM,SAAS;AAAA,UACzB;AAEA,eAAK,IAAI,CAAC,cAAc,KAAK,YAAY,GAAG,oBAAoB;AAAA,QAAA;AAAA,MAClE,CACD;AAEM,aAAA;AAAA,IACT;AAAA;AAAA,IAGA,MAAM,QAAQ;AACR,UAAA,CAAC,KAAK,UAAU;AAClB;AAAA,MAAA;AAGF,YAAM,cAAcD,gBAAAA,QAAK,KAAK,aAAa,KAAK,aAAa,QAAQ;AACrE,YAAM,WAAWA,gBAAAA,QAAK,KAAK,MAAM,KAAK,MAAM,QAAQ;AAEpD,UAAI,SAAS;AACL,cAAAE,eAAA,QAAI,OAAO,WAAW;AAE5B,cAAM,OAAO,MAAMA,eAAAA,QAAI,QAAQ,aAAa,GAAG;AAC3C,YAAA,KAAK,WAAW,GAAG;AACf,gBAAAA,uBAAI,OAAO,aAAa,GAAG;AAAA,QAAA;AAGnC;AAAA,MAAA;AAGF,UAAI,UAAU;AACZ,YAAI,CAAC,MAAM,OAAQ,QAAO,QAAQ,QAAQ;AAEpC,cAAAA,eAAA,QAAI,WAAW,QAAQ;AAE7B,cAAMA,eAAI,QAAA;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM,MAAM,OAAO;AAAA,YACnB,gBAAgB,MAAM,OAAO;AAAA,YAC7B,MAAM,MAAM,OAAO;AAAA,YACnB,SAAS,MAAM,OAAO;AAAA,YACtB,eAAe,MAAM,OAAO;AAAA,YAC5B,YAAY,MAAM,OAAO;AAAA,YACzB,QAAS,MAAM,OAAe;AAAA,UAChC;AAAA,UACA,EAAE,QAAQ,EAAE;AAAA,QACd;AAGA,YAAI,gBAAgB,UAAU;AACtB,gBAAAA,eAAA,QAAI,OAAO,WAAW;AAE5B,gBAAM,OAAO,MAAMA,eAAAA,QAAI,QAAQ,aAAa,GAAG;AAC3C,cAAA,KAAK,WAAW,GAAG;AACf,kBAAAA,uBAAI,OAAO,aAAa,GAAG;AAAA,UAAA;AAAA,QACnC;AAGF;AAAA,MAAA;AAGF,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAAA;AAAA,IAGA,MAAM,WAAW;AACX,UAAA,CAAC,KAAK,UAAU;AAClB;AAAA,MAAA;AAGF,YAAM,cAAcF,gBAAAA,QAAK,KAAK,aAAa,KAAK,aAAa,QAAQ;AACrE,YAAM,WAAWA,gBAAAA,QAAK,KAAK,MAAM,KAAK,MAAM,QAAQ;AAGhD,UAAA,CAAC,aAAa,KAAK;AACf,cAAAE,eAAA,QAAI,OAAO,QAAQ;AAEzB,cAAM,OAAO,MAAMA,eAAAA,QAAI,QAAQ,MAAM,GAAG;AACpC,YAAA,KAAK,WAAW,GAAG;AACf,gBAAAA,uBAAI,OAAO,MAAM,GAAG;AAAA,QAAA;AAE5B;AAAA,MAAA;AAGF,UAAI,YAAY,SAAS;AACjB,cAAAA,eAAA,QAAI,WAAW,WAAW;AAC1B,cAAAA,eAAA,QAAI,UAAU,aAAa,aAAa,QAAQ,EAAE,QAAQ,GAAG;AAGnE,YAAI,gBAAgB,UAAU;AACtB,gBAAAA,eAAA,QAAI,OAAO,QAAQ;AAEzB,gBAAM,OAAO,MAAMA,eAAAA,QAAI,QAAQ,MAAM,GAAG;AACpC,cAAA,KAAK,WAAW,GAAG;AACf,kBAAAA,uBAAI,OAAO,MAAM,GAAG;AAAA,UAAA;AAAA,QAC5B;AAAA,MACF;AAGF,aAAO,QAAQ,QAAQ;AAAA,IAAA;AAAA,EAE3B;AACF;ACvTA,MAAM,EAAEN,kBAAAA,mBAAqB,IAAAC,MAAA;AAE7B,SAAwBM,2BAAyB;AACxC,SAAA;AAAA,IACL,mBAAmB,EAAE,UAAU,eAAoB;AAC1C,aAAA,GAAGC,cAAQ,WAAW,QAAQ,CAAC,IAAIA,cAAQ,WAAW,WAAW,CAAC;AAAA,IAC3E;AAAA,IAEA,yBAAyBC,aAAsB;AAC7C,aAAOA,YAAW,OAAO,CAAC,QAAa,cAAmB;AACxD,eAAO,UAAU,MAAM,IAAI,KAAK,mBAAmB,SAAS;AACrD,eAAA;AAAA,MACT,GAAG,EAAE;AAAA,IACP;AAAA;AAAA;AAAA;AAAA,IAKA,gBAA2B,OAAY;AAC/B,YAAA,MAAM,KAAK,mBAAmB,KAAK;AAEzC,UAAI,KAAK,WAAW,IAAI,GAAG,GAAG;AACtB,cAAA,IAAIT,mBAAiB,yBAAyB;AAAA,MAAA;AAGtD,YAAM,UAAU,oBAAoB;AAAA,QAClC,KAAKI,gBAAK,QAAA,KAAK,OAAO,KAAK,IAAI,YAAYI,cAAQ,WAAW,MAAM,QAAQ,CAAC;AAAA,QAC7E,UAAU,GAAGA,MAAA,QAAQ,WAAW,MAAM,WAAW,CAAC;AAAA,MAAA,CACnD;AAIK,YAAA,iBAAiB,cAAcA,MAAAA,QAAQ;AAAA,QAC3C,MAAM;AAAA,MAAA,CACP,IAAIA,MAAAA,QAAQ,qBAAqBE,2BAAU,MAAM,WAAW,CAAC,CAAC;AAE1D,WAAA,WAAW,QAAQ,CAAC,UAAe;AAClC,YAAA,MAAM,OAAO,mBAAmB,gBAAgB;AAC5C,gBAAA,IAAIV,mBAAiB,yBAAyB;AAAA,QAAA;AAAA,MACtD,CACD;AAGE,cAAA,OAAO,GAAG,EACV,IAAI,kBAAkB,cAAc,EACpC,IAAI,CAAC,QAAQ,aAAa,GAAG,MAAM,WAAW,EAC9C,IAAI,CAAC,QAAQ,MAAM,GAAG,MAAM,IAAI,EAChC,IAAI,CAAC,QAAQ,aAAa,GAAG,MAAM,WAAW,EAC9C,IAAI,iBAAiB,MAAM,aAAa,EACxC,IAAI,UAAU,MAAM,MAAM,EAC1B,cAAc,KAAK,kBAAkB,MAAM,UAAU,CAAC;AAErD,UAAA,KAAK,WAAW,SAAS,GAAG;AACvB,eAAA,UAAU,KAAK,yBAAyB;AAAA,MAAA,OAC1C;AACE,eAAA,UAAU,KAAK,oBAAoB;AAAA,MAAA;AAGvC,WAAA,WAAW,IAAI,KAAK,OAAO;AAEzB,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,cAAyB,OAAY;AAC7B,YAAA,EAAE,QAAQ;AAEhB,UAAI,CAAC,KAAK,WAAW,IAAI,GAAG,GAAG;AACvB,cAAA,IAAIC,MAAAA,OAAO,iBAAiB,oBAAoB;AAAA,MAAA;AAGxD,YAAM,YAAY,KAAK,WAAW,IAAI,GAAG;AAEzC,YAAM,CAAG,EAAA,OAAO,IAAI,IAAI,MAAM,GAAG;AAEjC,YAAM,cAAcO,MAAA,QAAQ,WAAW,MAAM,QAAQ;AACrD,YAAM,SAAS,GAAG,WAAW,IAAI,OAAO;AAExC,UAAI,WAAW,OAAO,KAAK,WAAW,IAAI,MAAM,GAAG;AAC3C,cAAA,IAAIP,MAAAA,OAAO,iBAAiB,8BAA8B;AAAA,MAAA;AAGlE,YAAM,SAASG,gBAAK,QAAA,KAAK,OAAO,KAAK,IAAI,YAAY,WAAW;AAE1D,YAAA,gBAAgB,UAAU,OAAO;AAEvC,YAAM,gBAAgBF,WAAAA,QAAE,OAAO,MAAM,YAAY,CAAC,MAAM,QAAQ;AACvD,eAAAA,WAAA,QAAE,IAAI,eAAe,GAAG,KAAK,CAAC,eAAe,cAAc,GAAG,CAAC;AAAA,MAAA,CACvE;AAED,gBACG,OAAO,MAAM,EACb,OAAO,MAAM,EACb,IAAI,CAAC,QAAQ,aAAa,GAAG,MAAM,WAAW,EAC9C,IAAI,CAAC,QAAQ,MAAM,GAAG,MAAM,IAAI,EAChC,IAAI,CAAC,QAAQ,aAAa,GAAG,MAAM,WAAW,EAC9C,IAAI,iBAAiB,MAAM,aAAa,EACxC,cAAc,KAAK,kBAAkB,aAAa,CAAC;AAEtD,UAAI,WAAW,KAAK;AACb,aAAA,WAAW,QAAQ,CAAC,UAAe;AAChC,gBAAA,gBAAgB,KAAK,MAAM;AAAA,QAAA,CAClC;AAEI,aAAA,aAAa,QAAQ,CAAC,OAAY;AAClC,aAAA,gBAAgB,KAAK,MAAM;AAAA,QAAA,CAC/B;AAAA,MAAA;AAGI,aAAA;AAAA,IACT;AAAA,IAEA,gBAA2B,KAA6B;AACtD,UAAI,CAAC,KAAK,WAAW,IAAI,GAAG,GAAG;AACvB,cAAA,IAAID,MAAAA,OAAO,iBAAiB,oBAAoB;AAAA,MAAA;AAGnD,WAAA,WAAW,QAAQ,CAAC,UAAe;AACtC,cAAM,gBAAgB,GAAG;AAAA,MAAA,CAC1B;AAEI,WAAA,aAAa,QAAQ,CAAC,OAAY;AACrC,WAAG,gBAAgB,GAAG;AAAA,MAAA,CACvB;AAED,aAAO,KAAK,WAAW,IAAI,GAAG,EAAE,OAAO;AAAA,IAAA;AAAA,EAE3C;AACF;AC3IO,MAAM,aAAa;AAAA,EACxB,cAAc;AAAA,EACd,WAAW;AACb;AAEO,MAAM,YAAY;AAAA,EACvB,aAAa;AAAA,EACb,iBAAiB;AACnB;AAEO,MAAM,gBAAgB;AAAA;AAAA,EAE3B;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AACF;AAEa,MAAA,oBAAoB,CAAC,UAAU,MAAM;AAE3C,MAAM,WAAW;AAAA,EACtB,aAAa;AAAA,EACb,QAAQ;AACV;AAEO,MAAM,cAAc;AAAA,EACzB,aAAa;AACf;ACnCA,MAAM,EAAED,kBAAAA,mBAAqB,IAAAC,MAAA;AAE7B,MAAM,+BAA+B,CACnC,cACA,iBACG;AACDC,aAAAA,QAAA;AAAA,IACA;AAAA,IACAA,WAAA,QAAE,KAAK,cAAc;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA;AAAA,EACH;AACF;AAEA,SAAwB,yBAAyB;AACxC,SAAA;AAAA,IACL,YAAuB,EAAE,KAAK,KAAK,aAAkB;AACnD,UAAI,CAACA,WAAAA,QAAE,IAAI,WAAW,QAAQ,GAAG;AAC/B;AAAA,MAAA;AAGF,YAAM,WAAW,KAAK,aAAa,IAAI,UAAU,MAAM;AACvD,YAAM,kBAAkB,SAAS,aAAa,UAAU,eAAe;AAEnE,UAAA,CAAC,UAAU,iBAAiB;AAC9B;AAAA,MAAA;AAGO,eAAA;AAAA,QACP,UAAU;AAAA,QACV,iBAAiB,EAAE,KAAK,WAAW,KAAK,gBAAiB,CAAA;AAAA,MAC3D;AAAA,IACF;AAAA,IAEA,cAAyB,WAAgB;AACvC,UAAI,CAACA,WAAAA,QAAE,IAAI,WAAW,QAAQ,GAAG;AAC/B;AAAA,MAAA;AAGF,YAAM,WAAW,KAAK,aAAa,IAAI,UAAU,MAAM;AAEjD,YAAA,sBAAsB,UAAU,cAAc,UAAU;AACxD,YAAA,kBAAkB,SAAS,aAAa,mBAAmB;AAEjE,UAAI,CAAC,gBAAiB;AAEf,aAAA,SAAS,gBAAgB,mBAAmB;AAAA,IACrD;AAAA;AAAA;AAAA;AAAA,IAKA,kBAA6B,OAA+B;AACpD,YAAA,MAAM,qBAAqB,KAAK;AAEtC,UAAI,KAAK,aAAa,IAAI,GAAG,GAAG;AACxB,cAAA,IAAIF,mBAAiB,2BAA2B;AAAA,MAAA;AAGxD,YAAM,cAAc,oBAAoB;AAAA,QACtC,WAAW,MAAM;AAAA,QACjB,KAAKI,gBAAK,QAAA;AAAA,UACR,OAAO,KAAK,IAAI;AAAA,UAChB,MAAM;AAAA,UACN;AAAA,UACA,MAAM;AAAA,QACR;AAAA,QACA,UAAU;AAAA,MAAA,CACX;AAEI,WAAA,aAAa,IAAI,KAAK,WAAW;AAGtC,aAAO,KAAK,MAAM,UAAU,EAAE,QAAQ,CAAC,QAAQ;AAC7C,cAAM,EAAE,OAAW,IAAA,MAAM,WAAW,GAAG;AACvC,YAAI,WAAW,YAAY;AACnB,gBAAA,WAAW,GAAG,EAAE,SAAS;AAAA,QAAA;AAAA,MACjC,CACD;AAGE,kBAAA,OAAO,GAAG,EACV,IAAI,QAAQ,MAAM,QAAQ,UAAU,eAAe,EACnD;AAAA,QACC;AAAA,QACA,MAAM,kBAAkBI,MAAAA,QAAQ,qBAAqB,MAAM,UAAU;AAAA,MAAA,EAEtE,IAAI,QAAQ;AAAA,QACX,cAAc,MAAM;AAAA,QACpB,YAAY,MAAM;AAAA,QAClB,aAAa,MAAM;AAAA,QACnB,aAAa,MAAM;AAAA,MAAA,CACpB,EACA,IAAI,WAAW;AAAA,QACd,GAAI,MAAM,WAAW,CAAC;AAAA,QACtB,iBAAiB,MAAM;AAAA,MAAA,CACxB,EACA,IAAI,iBAAiB,MAAM,aAAa,EACxC,IAAI,UAAU,MAAM,MAAM,EAC1B,cAAc,KAAK,kBAAkB,MAAM,UAAU,CAAC;AAEzD,aAAO,KAAK,MAAM,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACvC,cAAA,YAAY,MAAM,WAAW,GAAG;AAElC,YAAA,WAAW,SAAS,GAAG;AACzB,cAAI,CAAC,cAAc,UAAU,EAAE,SAAS,UAAU,QAAQ,GAAG;AAC3D,gBAAI,UAAU,WAAW,OAAO,UAAU,oBAAoB,QAAW;AAEvE,oBAAM,kBAAkB,MAAM,WAAW,UAAU,eAAe;AAE9D,kBAAA,gBAAgB,aAAa,QAAW;AAC1C,0BAAU,WAAW;AAAA,cAAA,OAChB;AACL,0BAAU,WAAW;AAAA,cAAA;AAAA,YACvB,OACK;AACL,wBAAU,WAAW;AAAA,YAAA;AAAA,UACvB;AAGF,eAAK,YAAY;AAAA,YACf;AAAA,YACA;AAAA,YACA;AAAA,UAAA,CACD;AAAA,QAAA;AAAA,MACH,CACD;AAEM,aAAA;AAAA,IACT;AAAA,IAEA,gBAA2B,OAAY;AAC/B,YAAA,EAAE,QAAQ;AAEhB,UAAI,CAAC,KAAK,aAAa,IAAI,GAAG,GAAG;AACzB,cAAA,IAAIR,mBAAiB,sBAAsB;AAAA,MAAA;AAGnD,YAAM,cAAc,KAAK,aAAa,IAAI,GAAG;AAEvC,YAAA,gBAAgB,YAAY,OAAO;AAEzC,YAAM,gBAAgBE,WAAAA,QAAE,OAAO,MAAM,YAAY,CAAC,MAAM,QAAQ;AACvD,eAAAA,WAAA,QAAE,IAAI,eAAe,GAAG,KAAK,CAAC,eAAe,cAAc,GAAG,CAAC;AAAA,MAAA,CACvE;AAEK,YAAA,UAAUA,WAAAA,QAAE,WAAW,OAAO,KAAK,aAAa,GAAG,OAAO,KAAK,aAAa,CAAC;AAC7E,YAAA,cAAcA,WAAAA,QAAE,WAAW,OAAO,KAAK,aAAa,GAAG,OAAO,KAAK,aAAa,CAAC;AACjF,YAAA,gBAAgBA,WAAAA,QAAE,aAAa,OAAO,KAAK,aAAa,GAAG,OAAO,KAAK,aAAa,CAAC;AAG/E,kBAAA,QAAQ,CAAC,QAAQ;AACrB,cAAA,YAAY,cAAc,GAAG;AAE7B,cAAA,sBAAsB,UAAU,cAAc,UAAU;AAG1D,YAAA,eAAe,SAAS,KAAK,WAAW,SAAS,KAAK,CAACA,WAAA,QAAE,MAAM,mBAAmB,GAAG;AACvF,eAAK,cAAc,SAAS;AAAA,QAAA;AAAA,MAC9B,CACD;AAEa,oBAAA,QAAQ,CAAC,QAAQ;AACvB,cAAA,eAAe,cAAc,GAAG;AAChC,cAAA,eAAe,cAAc,GAAG;AAEtC,YAAI,CAAC,WAAW,YAAY,KAAK,WAAW,YAAY,GAAG;AACzD,iBAAO,KAAK,YAAY;AAAA,YACtB;AAAA,YACA;AAAA,YACA,WAAW,cAAc,GAAG;AAAA,UAAA,CAC7B;AAAA,QAAA;AAGH,YAAI,WAAW,YAAY,KAAK,CAAC,WAAW,YAAY,GAAG;AAClD,iBAAA,KAAK,cAAc,YAAY;AAAA,QAAA;AAGxC,YAAI,WAAW,YAAY,KAAK,WAAW,YAAY,GAAG;AAClD,gBAAA,yBAAyB,aAAa,cAAc,aAAa;AAEjE,gBAAA,eAAe,aAAa,aAAa,aAAa;AACtD,gBAAA,4BAA4B,2BAA2B,aAAa;AAEtE,cAAA,CAAC,gBAAgB,2BAA2B;AAC9C,iBAAK,cAAc,YAAY;AAAA,UAAA;AAIjC,uCAA6B,cAAc,YAAY;AAEvD,cAAI,aAAa,YAAY;AAC3B,yBAAa,WAAW;AAAA,UAAA,WACf,aAAa,UAAU;AAChC,yBAAa,WAAW;AAAA,UAAA;AAG1B,iBAAO,KAAK,YAAY;AAAA,YACtB;AAAA,YACA;AAAA,YACA,WAAW;AAAA,UAAA,CACZ;AAAA,QAAA;AAAA,MACH,CACD;AAGO,cAAA,QAAQ,CAAC,QAAQ;AACjB,cAAA,YAAY,cAAc,GAAG;AAE/B,YAAA,WAAW,SAAS,GAAG;AACzB,cAAI,CAAC,cAAc,UAAU,EAAE,SAAS,UAAU,QAAQ,GAAG;AAC3D,gBAAI,UAAU,WAAW,OAAO,UAAU,oBAAoB,QAAW;AAEjE,oBAAA,kBAAkB,cAAc,UAAU,eAAe;AAE3D,kBAAA,gBAAgB,aAAa,QAAW;AAC1C,0BAAU,WAAW;AAAA,cAAA,OAChB;AACL,0BAAU,WAAW;AAAA,cAAA;AAAA,YACvB,OACK;AACL,wBAAU,WAAW;AAAA,YAAA;AAAA,UACvB;AAGF,eAAK,YAAY;AAAA,YACf;AAAA,YACA;AAAA,YACA;AAAA,UAAA,CACD;AAAA,QAAA;AAAA,MACH,CACD;AAGE,kBAAA,IAAI,QAAQ,MAAM,QAAQ,YAAY,OAAO,IAAI,EACjD,IAAI,CAAC,QAAQ,aAAa,GAAG,MAAM,WAAW,EAC9C,IAAI,CAAC,QAAQ,aAAa,GAAG,MAAM,WAAW,EAC9C,IAAI,WAAW;AAAA,QACd,GAAI,MAAM,WAAW,CAAC;AAAA,QACtB,iBAAiB,MAAM;AAAA,MAAA,CACxB,EACA,IAAI,iBAAiB,MAAM,aAAa,EACxC,cAAc,KAAK,kBAAkB,aAAa,CAAC;AAE/C,aAAA;AAAA,IACT;AAAA,IAEA,kBAA6B,KAAa;AACxC,UAAI,CAAC,KAAK,aAAa,IAAI,GAAG,GAAG;AACzB,cAAA,IAAIF,mBAAiB,sBAAsB;AAAA,MAAA;AAG9C,WAAA,WAAW,QAAQ,CAAC,UAAe;AACtC,cAAM,kBAAkB,GAAG;AAAA,MAAA,CAC5B;AAEI,WAAA,aAAa,QAAQ,CAAC,OAAY;AACrC,WAAG,kBAAkB,GAAG;AAAA,MAAA,CACzB;AAED,aAAO,KAAK,aAAa,IAAI,GAAG,EAAE,OAAO;AAAA,IAAA;AAAA,EAE7C;AACF;AASA,MAAM,uBAAuB,CAAC;AAAA,EAC5B;AACF,MAEgC,QAAQ,YAAY,IAAI,YAAY;AAEpE,MAAM,mBAAmB,CAAC,EAAE,KAAK,WAAW,KAAK,kBAAkB,CAAA,QAAc;AAC/E,QAAM,OAAY;AAAA,IAChB,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,cAAc,gBAAgB;AAAA,IAC9B,SAAS,gBAAgB,WAAW;AAAA,IACpC,eAAe,gBAAgB,iBAAiB;AAAA,EAClD;AAEA,UAAQ,UAAU,UAAU;AAAA,IAC1B,KAAK,YAAY;AACf,WAAK,WAAW;AAEhB,UAAI,UAAU,UAAU;AACtB,aAAK,WAAW;AAAA,MAAA,OACX;AACL,aAAK,aAAa;AAAA,MAAA;AAEpB;AAAA,IAAA;AAAA,IAEF,KAAK,aAAa;AAChB,WAAK,WAAW;AAChB,WAAK,aAAa;AAClB;AAAA,IAAA;AAAA,IAEF,KAAK,aAAa;AAChB,WAAK,WAAW;AAChB,WAAK,WAAW;AAChB;AAAA,IAAA;AAAA,IAEF,KAAK,cAAc;AACjB,WAAK,WAAW;AAEhB,UAAI,UAAU,UAAU;AACtB,aAAK,WAAW;AAAA,MAAA,OACX;AACL,aAAK,aAAa;AAAA,MAAA;AAGpB;AAAA,IAAA;AAAA,EAEF;AAIF,QAAM,EAAE,MAAM,UAAU,QAAQ,GAAG,YAAgB,IAAA;AAE5C,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL;AACF;AChVA,SAAwB,gBAAgB;AAChC,QAAAS,cAAa,OAAO,OAAO,OAAO,UAAU,EAAE,IAAI,CAAC,oBAAoB;AAAA,IAC3E,UAAU,eAAe;AAAA,IACzB,WAAW,eAAe;AAAA,IAC1B,QAAQ,eAAe;AAAA,IACvB,KAAK,eAAe;AAAA,IACpB,UAAU,eAAe;AAAA,IACzB,KAAKE,KAAK,KAAA,OAAO,KAAK,IAAI,YAAY,eAAe,QAAQ;AAAA,IAC7D,QAAQ,eAAe;AAAA,IACvB,QAAQ,eAAe;AAAA,EAAA,EACvB;AAEI,QAAAC,gBAAe,OAAO,OAAY,OAAO,YAAY,EAAE,IAAI,CAAC,qBAAqB;AAC/E,UAAA,MAAM,iBAAiB,SACzBD,KAAA;AAAA,MACE,OAAO,KAAK,IAAI;AAAA,MAChB,iBAAiB;AAAA,MACjB;AAAA,MACA,iBAAiB,KAAK;AAAA,IAAA,IAExBA,KAAA;AAAA,MACE,OAAO,KAAK,IAAI;AAAA,MAChB,iBAAiB;AAAA,MACjB;AAAA,MACA,iBAAiB,KAAK;AAAA,IACxB;AAEG,WAAA;AAAA,MACL,WAAW,iBAAiB;AAAA,MAC5B,QAAQ,iBAAiB;AAAA,MACzB,KAAK,iBAAiB;AAAA,MACtB,UAAU;AAAA,MACV;AAAA,MACA,QAAQ,iBAAiB;AAAA,MACzB,QAAQ,iBAAiB;AAAA,IAC3B;AAAA,EAAA,CACD;AAED,SAAO,oBAAoB;AAAA,IACzB,YAAAF;AAAA,IACA,cAAAG;AAAA,EAAA,CACD;AACH;AAOA,SAAS,oBAAoB,EAAE,YAAAH,aAAY,cAAAG,iBAAsC;AACzE,QAAA,oCAAoB,IAAI;AACxB,QAAA,sCAAsB,IAAI;AAGhC,SAAO,KAAKA,aAAY,EAAE,QAAQ,CAAC,QAAQ;AACzB,oBAAA,IAAIA,cAAa,GAAG,EAAE,KAAK,oBAAoBA,cAAa,GAAG,CAAC,CAAC;AAAA,EAAA,CAClF;AAGD,SAAO,KAAKH,WAAU,EAAE,QAAQ,CAAC,QAAQ;AACzB,kBAAA,IAAIA,YAAW,GAAG,EAAE,KAAK,oBAAoBA,YAAW,GAAG,CAAC,CAAC;AAAA,EAAA,CAC5E;AAEM,SAAA;AAAA,IACL,IAAI,aAAa;AACR,aAAA;AAAA,IACT;AAAA,IACA,IAAI,eAAe;AACV,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,kBAAkB,YAAiB;AAC1B,aAAA,OAAO,KAAK,UAAU,EAAE;AAAA,QAC7B,CAAC,KAAK,QAAQ;AACN,gBAAA,YAAY,WAAW,GAAG;AAEhC,gBAAM,EAAE,cAAc,SAAS,UAAc,IAAA;AAE7C,gBAAM,iBAAiB;AAAA,YACrB,SAAS,cAAc,OAAO,OAAO;AAAA,YACrC,cAAc,iBAAiB,QAAQ,QAAQ;AAAA,UACjD;AAEI,cAAA,UAAU,SAAS,YAAY;AACjC,kBAAM,EAAE,QAAQ,UAAU,iBAAiB,UAAU,GAAG,qBAAqB;AAE7E,kBAAM,OAAO;AAAA,cACX,MAAM;AAAA,cACN;AAAA,cACA;AAAA,cACA,GAAG;AAAA,cACH,GAAG;AAAA,YACL;AAEA,gBAAI,GAAG,IAAI;AAEX,gBAAI,UAAU,CAAC,KAAK,aAAa,IAAI,MAAM,GAAG;AAC5C,oBAAM,IAAIR,MAAA,OAAO,iBAAiB,WAAW,MAAM,iBAAiB;AAAA,YAAA;AAGlE,gBAAAC,WAAA,QAAE,MAAM,eAAe,GAAG;AACrB,qBAAA;AAAA,YAAA;AAGL,gBAAA,CAAC,YAAY,YAAY,EAAE,SAAS,QAAQ,KAAK,aAAa,MAAM;AACtE,mBAAK,aAAa;AAAA,YAAA,WACT,CAAC,YAAY,YAAY,EAAE,SAAS,QAAQ,KAAK,aAAa,OAAO;AAC9E,mBAAK,WAAW;AAAA,YAAA,WACP,CAAC,YAAY,aAAa,YAAY,EAAE,SAAS,QAAQ,GAAG;AACrE,mBAAK,aAAa;AAAA,uBACT,CAAC,WAAW,EAAE,SAAS,QAAQ,GAAG;AAC3C,mBAAK,WAAW;AAAA,YAAA;AAGX,mBAAA;AAAA,UAAA;AAGT,cAAI,GAAG,IAAI;AAAA,YACT,GAAG;AAAA,YACH,GAAG;AAAA,UACL;AAEO,iBAAA;AAAA,QACT;AAAA,QACA,CAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEA,GAAGK,yBAAuB;AAAA,IAC1B,GAAGM,uBAAyB;AAAA;AAAA;AAAA;AAAA,IAK5B,aAAa;AACX,YAAM,UAAU;AAAA,QACd,GAAG,MAAM,KAAK,cAAc,QAAQ;AAAA,QACpC,GAAG,MAAM,KAAK,gBAAgB,OAAQ,CAAA;AAAA,MACxC;AAEA,aAAO,QAAQ,IAAI,QAAQ,IAAI,CAAC,WAAW,OAAO,MAAA,CAAO,CAAC,EACvD,MAAM,CAAC,UAAU;AACT,eAAA,IAAI,MAAM,4BAA4B;AACtC,eAAA,IAAI,MAAM,KAAK;AACtB,eAAO,KAAK,SAAS;AAAA,MAAA,CACtB,EACA,MAAM,CAAC,UAAU;AAChB,eAAO,IAAI;AAAA,UACT;AAAA,QACF;AACO,eAAA,IAAI,MAAM,KAAK;AAEhB,cAAA,IAAIZ,MAAAA,OAAO,iBAAiB,wBAAwB;AAAA,MAAA,CAC3D;AAAA,IACL;AAAA;AAAA;AAAA;AAAA,IAKA,WAAW;AACT,aAAO,QAAQ;AAAA,QACb,CAAC,GAAG,MAAM,KAAK,cAAc,OAAO,CAAC,GAAG,GAAG,MAAM,KAAK,gBAAgB,OAAQ,CAAA,CAAC,EAAE;AAAA,UAC/E,CAAC,WAAW,OAAO,SAAS;AAAA,QAAA;AAAA,MAEhC;AAAA,IAAA;AAAA,EAEJ;AACF;AC7KA,MAAM,EAAE,iBAAqB,IAAAA,MAAA;AAEtB,MAAM,uBAAuB,CAAC,UACnCa,SAAM,MAAM,8CAA8C,KAAK,MAAM;AAE1D,MAAA,yBAAyB,CAAC,gBAA0C;AACzE,QAAA,EAAE,QAAQ;AACZ,MAAA,QAAQ,SAAS,aAAa;AAEzB,WAAA,CAAC,UAAU,SAAS;AAAA,EAAA;AAI3B,MAAA,IAAI,WAAW,SAAS,MAAM,KAC9B,QAAQ,YAAY,eACpB,CAAC,qBAAqB,WAAW,GACjC;AACA,WAAO,CAAC;AAAA,EAAA;AAGH,SAAA;AACT;AAKa,MAAA,oBAAoB,CAAC,gBAAqB;AACrD,QAAM,EAAE,KAAK,MAAM,WAAW,QAAQ,gBAAgB,SAAS;AAExD,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,GAAGC,MAAkB,aAAA,WAAW,WAAW;AAAA,MAC3C,aAAa,KAAK;AAAA,MAClB,cAAc,KAAK;AAAA,MACnB,YAAY,KAAK;AAAA,MACjB,aAAab,WAAAA,QAAE,IAAI,MAAM,eAAe,EAAE;AAAA,MAC1C,eAAe,YAAY;AAAA,MAC3B,MAAM,QAAQ;AAAA,MACd;AAAA,MACA,YAAY,iBAAiB,WAAW;AAAA,MACxC,SAAS,qBAAqB,WAAW;AAAA,MACzC,qBAAqB,uBAAuB,WAAW;AAAA,IAAA;AAAA,EAE3D;AACF;AAEa,MAAA,qBAAqB,OAAOU,kBAAwB;AAC/D,QAAMI,WAAU,cAAc;AAC9B,QAAM,sBAA6B,CAAC;AAEpC,aAAW,eAAeJ,eAAc;AAClB,wBAAA,KAAK,MAAM,kBAAkB,aAAa,EAAE,gBAAgBI,SAAA,CAAS,CAAC;AAAA,EAAA;AAG5F,QAAMA,SAAQ,WAAW;AAElB,SAAA;AACT;AASa,MAAA,oBAAoB,OAC/B,EAAE,aAAa,YAAAP,eACf,UAAoC,CAAA,MACjC;AACG,QAAAO,WAAU,QAAQ,kBAAkB,cAAc;AACxD,QAAM,SAASA,SAAQ,yBAAyBP,eAAc,CAAA,CAAE;AAE1D,QAAA,iBAAiB,qBAAqB,MAAM;AAElD,QAAM,iBAAiBO,SAAQ,kBAAkB,eAAe,WAAW,CAAC;AAGtE,QAAA,oBAAoB,CAAC,UAAe;AACxC,WAAO,KAAK,MAAM,UAAU,EAAE,QAAQ,CAAC,QAAQ;AAC7C,YAAM,EAAE,OAAW,IAAA,MAAM,WAAW,GAAG;AACvC,UAAI,WAAW,mBAAmB;AAChC,cAAM,WAAW,GAAG,EAAE,SAAS,eAAe;AAAA,MAAA;AAAA,IAChD,CACD;AAEM,WAAA;AAAA,EACT;AAEY,EAAAP,aAAA,QAAQ,CAAC,cAAmB;AACtC,UAAMQ,WAAU,eAAe,kBAAkB,SAAS,CAAC;AAE3D,QAAI,CAACf,WAAAA,QAAE,IAAI,WAAW,KAAK,GAAG;AACrB,aAAAc,SAAQ,gBAAgBC,QAAO;AAAA,IAAA;AAGjC,WAAAD,SAAQ,cAAcC,QAAO;AAAA,EAAA,CACrC;AAGD,QAAM,YAAY;AAAA,IAChB,aAAa,YAAa,eAAe,YAAa,KAAK;AAAA,IAC3D,cAAc,YAAa;AAAA,IAC3B,YAAY,YAAa;AAAA,IACzB,MAAM,YAAa;AAAA,EAAA,CACpB;AAEG,MAAA,CAAC,QAAQ,gBAAgB;AAC3B,UAAMD,SAAQ,WAAW;AAAA,EAAA;AAG3B,SAAO,SAAS,KAAK,uBAAuB,EAAE,aAAa,gBAAgB;AAEpE,SAAA;AACT;AAKO,MAAM,cAAc,CAAC;AAAA,EAC1B;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AACF,MAAW;AAEH,QAAA,mBAAmB,QAAQ,oBAAoB;AACrD,SAAO,iBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb,cAAc;AAAA,MACd,YAAY,CAAA;AAAA,IACd;AAAA,IACA,EAAE,KAAK,OAAO,KAAK,IAAI,KAAK;AAAA,EAC9B;AACF;AAKa,MAAA,kBAAkB,OAC7B,KACA,EAAE,aAAa,YAAAP,cAAa,SACzB;AACH,QAAMO,WAAU,cAAc;AAE9B,QAAM,iBAAiBA,SAAQ,aAAa,IAAI,GAAG,EAAE;AACrD,QAAM,eAAe,eAAe;AAC9B,QAAA,UAAU,YAAY,QAAQ;AAGpC,QAAM,qBAAqB,eAAe;AACpC,QAAA,2BAA2BD,mBAC9B,wBAAwB,cAAc,EACtC,OAAO,CAAC,KAAK,QAAQ;AACpB,QAAI,OAAO,oBAAoB;AACzB,UAAA,GAAG,IAAI,mBAAmB,GAAG;AAAA,IAAA;AAG5B,WAAA;AAAA,EACT,GAAG,EAAS;AACd,cAAY,aAAab,WAAA,QAAE,MAAM,0BAA0B,YAAY,UAAU;AAE7E,MAAA,YAAY,gBAAgB,YAAY,cAAc;AACxD,UAAM,aAAa,MAAM,OAAO,GAAG,MAAM,GAAG,EAAE,MAAM;AACpD,QAAI,aAAa,GAAG;AAClB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IAAA;AAAA,EACF;AAGI,QAAA,SAASc,SAAQ,yBAAyBP,WAAU;AACpD,QAAA,iBAAiB,qBAAqB,MAAM;AAE5C,QAAA,qBAAqBO,SAAQ,gBAAgB;AAAA,IACjD;AAAA,IACA,GAAG,eAAe,WAAW;AAAA,EAAA,CAC9B;AAEU,EAAAP,YAAA,QAAQ,CAAC,cAAmB;AACrC,QAAI,CAACP,WAAAA,QAAE,IAAI,WAAW,KAAK,GAAG;AAC5B,aAAOc,SAAQ,gBAAgB,eAAe,SAAS,CAAC;AAAA,IAAA;AAG1D,WAAOA,SAAQ,cAAc,eAAe,SAAS,CAAC;AAAA,EAAA,CACvD;AAED,MAAI,YAAY,cAAc;AAC5B,UAAME,cAAa,OAAO,OAAO,sBAAsB,EAAE,QAAQ,aAAa;AACxE,UAAAA,YAAW,OAAO,GAAG;AAEvB,QAAA;AACI,YAAAA,YAAW,MAAM,GAAG;AAG1B,YAAM,YAAY;AAAA,QAChB,aAAa,mBAAmB,OAAO,KAAK;AAAA,QAC5C,cAAc,mBAAmB,OAAO,KAAK;AAAA,QAC7C,YAAY,mBAAmB,OAAO,KAAK;AAAA,QAC3C,MAAM,mBAAmB,OAAO;AAAA,MAAA,CACjC;AAED,YAAMF,SAAQ,WAAW;AAAA,aAClB,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AAChB,YAAAE,YAAW,SAAS,GAAG;AAAA,IAAA;AAGxB,WAAA;AAAA,EAAA;AAGT,QAAMF,SAAQ,WAAW;AAEzB,SAAO,SAAS,KAAK,uBAAuB,EAAE,aAAa,oBAAoB;AAExE,SAAA;AACT;AAEa,MAAA,qBAAqB,OAAO,SAA4B;AACnE,QAAMA,WAAU,cAAc;AAC9B,QAAME,cAAa,OAAO,OAAO,sBAAsB,EAAE,QAAQ,aAAa;AAE9E,aAAW,OAAO,MAAM;AAChB,UAAA,kBAAkB,KAAKF,QAAO;AAAA,EAAA;AAGtC,QAAMA,SAAQ,WAAW;AACzB,aAAW,OAAO,MAAM;AAClB,QAAA;AACI,YAAAE,YAAW,MAAM,GAAG;AAAA,aACnB,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AAChB,YAAAA,YAAW,SAAS,GAAG;AAAA,IAAA;AAAA,EAC/B;AAEJ;AAKO,MAAM,oBAAoB,OAAO,KAAsB,iBAAsB,WAAc;AAC1F,QAAAF,WAAU,kBAAkB,cAAc;AAEhD,QAAME,cAAa,OAAO,OAAO,sBAAsB,EAAE,QAAQ,aAAa;AACxE,QAAAA,YAAW,OAAO,GAAG;AAErB,QAAA,cAAcF,SAAQ,kBAAkB,GAAG;AAEjD,MAAI,CAAC,gBAAgB;AACf,QAAA;AACF,YAAMA,SAAQ,WAAW;AACnB,YAAAE,YAAW,MAAM,GAAG;AAAA,aACnB,OAAO;AACR,YAAAA,YAAW,SAAS,GAAG;AAAA,IAAA;AAAA,EAC/B;AAGF,SAAO,SAAS,KAAK,uBAAuB,EAAE,aAAa;AAEpD,SAAA;AACT;;;;;;;;;;;;;AC7Qa,MAAA,kBAAkB,CAAC,cAAmB;AACjD,QAAM,EAAE,KAAK,WAAW,YAAY,gBAAgB,MAAM,aAAa;AAEhE,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,aAAaC,EAAAA,IAAI,MAAM,aAAa;AAAA,MACpC,aAAaA,EAAA,IAAI,MAAM,eAAe,EAAE;AAAA,MACxC,MAAMA,EAAAA,IAAI,MAAM,MAAM;AAAA,MACtB;AAAA,MACA;AAAA,MACA,eAAe,UAAU;AAAA,MACzB,YAAY,iBAAiB,SAAS;AAAA,IAAA;AAAA,EAE1C;AACF;AAKO,MAAM,kBAAkB,OAAO,EAAE,WAAW,YAAAV,cAAa,SAAc;AAC5E,QAAMO,WAAU,cAAc;AAExB,QAAA,SAASA,SAAQ,yBAAyBP,WAAU;AACpD,QAAA,iBAAiB,qBAAqB,MAAM;AAElD,QAAM,eAAeO,SAAQ,gBAAgB,eAAe,SAAS,CAAC;AAE3D,EAAAP,YAAA,QAAQ,CAACW,eAAmB;AACrC,QAAI,CAACC,EAAA,IAAID,YAAW,KAAK,GAAG;AAC1B,aAAOJ,SAAQ,gBAAgB,eAAeI,UAAS,CAAC;AAAA,IAAA;AAG1D,WAAOJ,SAAQ,cAAc,eAAeI,UAAS,CAAC;AAAA,EAAA,CACvD;AAED,QAAMJ,SAAQ,WAAW;AAEzB,SAAO,SAAS,KAAK,oBAAoB,EAAE,WAAW,cAAc;AAE7D,SAAA;AACT;AAOa,MAAA,gBAAgB,OAC3B,KACA,EAAE,WAAW,YAAAP,cAAa,SACvB;AACH,QAAMO,WAAU,cAAc;AAExB,QAAA,SAASA,SAAQ,yBAAyBP,WAAU;AACpD,QAAA,iBAAiB,qBAAqB,MAAM;AAE5C,QAAA,mBAAmBO,SAAQ,cAAc;AAAA,IAC7C;AAAA,IACA,GAAG,eAAe,SAAS;AAAA,EAAA,CAC5B;AAEU,EAAAP,YAAA,QAAQ,CAACW,eAAc;AAChC,QAAI,CAACC,EAAA,IAAID,YAAW,KAAK,GAAG;AAC1B,aAAOJ,SAAQ,gBAAgB,eAAeI,UAAS,CAAC;AAAA,IAAA;AAG1D,WAAOJ,SAAQ,cAAc,eAAeI,UAAS,CAAC;AAAA,EAAA,CACvD;AAED,QAAMJ,SAAQ,WAAW;AAEzB,SAAO,SAAS,KAAK,oBAAoB,EAAE,WAAW,kBAAkB;AAEjE,SAAA;AACT;AAEa,MAAA,kBAAkB,OAAO,QAAgC;AACpE,QAAMA,WAAU,cAAc;AAExB,QAAA,mBAAmBA,SAAQ,gBAAgB,GAAG;AAEpD,QAAMA,SAAQ,WAAW;AAEzB,SAAO,SAAS,KAAK,oBAAoB,EAAE,WAAW,kBAAkB;AAEjE,SAAA;AACT;;;;;;;;AChFa,MAAA,eAAe,OAAO,MAAc,UAAiB;AAChE,QAAM,UAAUR,MAAA,QAAQ,WAAW,MAAM,IAAI;AAG7C,MAAI,SAAS,QAAS;AAElB,MAAA,CAAC,eAAe,IAAI,GAAG;AACnB,UAAA,IAAIP,MAAAA,OAAO,iBAAiB,oBAAoB;AAAA,EAAA;AAGpD,MAAA,eAAe,OAAO,GAAG;AACrB,UAAA,IAAIA,MAAAA,OAAO,iBAAiB,oBAAoB;AAAA,EAAA;AAGxD,QAAMe,WAAU,cAAc;AAEtB,EAAAA,SAAA,WAAW,QAAQ,CAAC,cAAgC;AAC1D,UAAM,SAAS,UAAU;AACzB,UAAM,SAAS,GAAG,OAAO,IAAI,UAAU,SAAS;AAG5C,QAAA,UAAU,aAAa,KAAM;AAEvB,cAAA,OAAO,MAAM,EAAE,OAAOL,KAAAA,KAAK,OAAO,KAAK,IAAI,YAAY,OAAO,CAAC;AAEjE,IAAAK,SAAA,WAAW,QAAQ,CAAC,UAA4B;AAChD,YAAA,gBAAgB,QAAQ,MAAM;AAAA,IAAA,CACrC;AAEO,IAAAA,SAAA,aAAa,QAAQ,CAAC,OAAyB;AAClD,SAAA,gBAAgB,QAAQ,MAAM;AAAA,IAAA,CAClC;AAAA,EAAA,CACF;AAED,QAAMA,SAAQ,WAAW;AAElB,SAAA;AACT;AAKa,MAAA,iBAAiB,OAAO,SAAiB;AAChD,MAAA,CAAC,eAAe,IAAI,GAAG;AACnB,UAAA,IAAIf,MAAAA,OAAO,iBAAiB,oBAAoB;AAAA,EAAA;AAGxD,QAAMe,WAAU,cAAc;AAEtB,EAAAA,SAAA,WAAW,QAAQ,CAAC,cAAc;AACpC,QAAA,UAAU,aAAa,MAAM;AACvB,MAAAA,SAAA,gBAAgB,UAAU,GAAG;AAAA,IAAA;AAAA,EACvC,CACD;AAED,QAAMA,SAAQ,WAAW;AAC3B;AAKA,MAAM,iBAAiB,CAAC,SAAiB;AACvC,QAAM,gBAAgB,OAAO,OAAO,OAAO,UAAU,EAAE;AAAA,IACrD,CAAC,cAAc,UAAU,aAAa;AAAA,EACxC;AAEA,SAAO,gBAAgB;AACzB;;;;;;AClFO,MAAM,qBAAqB;AAAA;AAAA;AAAA,EAIhC;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAEA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AACF;AAGO,MAAM,iBAAiB;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AACF;AAEO,MAAM,mBAAmB,MAAM;AAC7B,SAAA;AAAA,IACL,QAAQ;AAAA,IACR,YAAY;AAAA,EACd;AACF;AAGa,MAAA,sBAAsB,CAAC,SAAiB;AAC7C,QAAA,gBAAgBM,aAAU,IAAI;AAChC,MAAA,eAAe,SAAS,aAAa,GAAG;AACnC,WAAA;AAAA,EAAA;AAIP,MAAA,eACG,OAAO,CAAC,QAAQ,IAAI,SAAS,GAAG,CAAC,EACjC,IAAI,CAAC,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC,EAC7B,KAAK,CAAC,WAAW,cAAc,WAAW,MAAM,CAAC,GACpD;AACO,WAAA;AAAA,EAAA;AAGF,SAAA;AACT;AAGa,MAAA,0BAA0B,CAAC,SAAiB;AACjD,QAAA,gBAAgBA,aAAU,IAAI;AAChC,MAAA,mBAAmB,SAAS,aAAa,GAAG;AACvC,WAAA;AAAA,EAAA;AAIP,MAAA,mBACG,OAAO,CAAC,QAAQ,IAAI,SAAS,GAAG,CAAC,EACjC,IAAI,CAAC,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC,EAC7B,KAAK,CAAC,WAAW,cAAc,WAAW,MAAM,CAAC,GACpD;AACO,WAAA;AAAA,EAAA;AAGF,SAAA;AACT;;;;;;;;;ACvFA,eAAsB,MAAM,KAA+B;AAEzD,QAAM,EAAE,SAAS,UAAA,IAAc,OAAO,aAAa,GAAG;AAEtD,QAAM,YAAYlB,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,OAAO;AAExD,QAAM,qBAAqB,WAAW,wBAAwB,SAAS,CAAC;AACxE,QAAM,aAAa,GAAG;AACxB;AAMA,eAAsB,OAAO,KAA+B;AAC1D,QAAM,EAAE,QAAY,IAAA,OAAO,aAAa,GAAG;AAE3C,QAAM,YAAYA,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,OAAO;AAClD,QAAA,eAAeA,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,WAAW,OAAO;AAGhE,QAAAE,eAAI,KAAK,WAAW,YAAY;AACxC;AAKA,eAAe,aAAa,KAA+B;AACzD,QAAM,EAAE,QAAY,IAAA,OAAO,aAAa,GAAG;AAE3C,QAAM,eAAeF,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,SAAS;AACvD,QAAA,kBAAkBA,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,WAAW,OAAO;AAEnE,QAAAE,eAAI,OAAO,eAAe;AAEhC,QAAM,OAAO,MAAMA,eAAI,QAAQ,YAAY;AACvC,MAAA,KAAK,WAAW,GAAG;AACf,UAAAA,eAAI,OAAO,YAAY;AAAA,EAAA;AAEjC;AAKA,eAAsB,SAAS,KAA+B;AAC5D,QAAM,EAAE,QAAY,IAAA,OAAO,aAAa,GAAG;AAE3C,QAAM,YAAYF,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,OAAO;AAClD,QAAA,eAAeA,gBAAK,KAAK,OAAO,KAAK,IAAI,KAAK,WAAW,OAAO;AAElE,MAAA;AACI,UAAAE,eAAI,OAAO,YAAY;AAAA,EAAA,QACvB;AACA,UAAA,IAAI,MAAM,4CAA4C;AAAA,EAAA;AAGxD,QAAAA,eAAI,OAAO,SAAS;AACpB,QAAAA,eAAI,KAAK,cAAc,SAAS;AACtC,QAAM,aAAa,GAAG;AACxB;AAKA,MAAM,0BAA0B,CAAC,aAAqB;AAKpD,SAAO,OAAO,aAAqB;AACjC,UAAM,WAAWF,gBAAK,SAAS,UAAUA,gBAAK,QAAQ,QAAQ,CAAC;AAE/D,UAAM,eAAe,SAAS,SAAS,GAAG,QAAQ,cAAc;AAC5D,QAAA,aAAa,YAAY,cAAc;AAClC,aAAAE,eAAI,OAAO,QAAQ;AAAA,IAAA;AAAA,EAE9B;AACF;AAMA,MAAM,uBAAuB,OAAO,QAAgB,aAAwC;AAC1F,QAAM,YAAY,MAAMA,eAAI,QAAQ,MAAM;AAE1C,aAAW,YAAY,WAAW;AAChC,UAAM,WAAWF,gBAAK,KAAK,QAAQ,QAAQ;AAE3C,UAAM,OAAO,MAAME,eAAI,KAAK,QAAQ;AAEhC,QAAA,KAAK,eAAe;AAChB,YAAA,qBAAqB,UAAU,QAAQ;AAAA,IAAA,OACxC;AACL,YAAM,SAAS,QAAQ;AAAA,IAAA;AAAA,EACzB;AAGF,QAAM,QAAQ,MAAMA,eAAI,QAAQ,MAAM;AAClC,MAAA,MAAM,WAAW,GAAG;AAChB,UAAAA,eAAI,OAAO,MAAM;AAAA,EAAA;AAE3B;;;;;;;ACvGA,MAAe,WAAA;AAAA,EACb,iBAAiBM;AAAAA,EAAA,YACjBH;AAAAA,EACA,wBAAwBc;AAAAA,EAAA,SACxBP;AAAAA,EACA,eAAe;AACjB;ACEO,SAAS,WACd,MACgE;AAChE,SAAO,OAAO,OAAO,sBAAsB,EAAE,QAAQ,IAAI;AAC3D;ACfA,MAAe,UAAA;AAAA,EACb,iBAAiB,KAAc;AAC7B,QAAI,OAAO,WAAW,SAAS,EAAE,iBAAiB;AAAA,EAAA;AAEtD;ACFO,MAAM,aAAa;AAAA,EACxB,UAAUQ,UAAI,QAAQ;AAAA,EACtB,QAAQA,UAAI,QAAQ;AAAA,EACpB,WAAWA,MAAAA,IAAI,OAAS,EAAA,QAAA,EAAU,SAAS;AAAA,EAC3C,WAAWA,MAAAA,IAAI,SAAS,UAAU,SAAS;AAC7C;AAEO,MAAM,aAAa;AACnB,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAC5B,MAAM,aAAa;AACnB,MAAM,YAAY;AAIlB,MAAM,cAAgC;AAAA,EAC3C,MAAM;AAAA,EACN,SAAS,4CAA4C,UAAU;AAAA,EAC/D,MAAM,CAAC,QAAiB,QAAQ,MAAM,WAAW,KAAK,GAAa;AACrE;AAEO,MAAM,cAAgC;AAAA,EAC3C,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM,CAAC,QAAQ,QAAQ,MAAM,WAAW,KAAK,GAAa;AAC5D;AAEO,MAAM,aAA+B;AAAA,EAC1C,MAAM;AAAA,EACN,SAAS,4CAA4C,SAAS;AAAA,EAC9D,MAAM,CAAC,QAAQ,QAAQ,MAAM,UAAU,KAAK,GAAa;AAC3D;AAEO,MAAM,sBAAwC;AAAA,EACnD,MAAM;AAAA,EACN,SAAS,4CAA4C,mBAAmB;AAAA,EACxE,MAAM,CAAC,QAAQ,QAAQ,MAAM,oBAAoB,KAAK,GAAa;AACrE;AAEO,MAAM,wBAA0C;AAAA,EACrD,MAAM;AAAA,EACN,SAAS,4CAA4C,qBAAqB;AAAA,EAC1E,MAAM,CAAC,QAAQ,QAAQ,MAAM,sBAAsB,KAAK,GAAa;AACvE;AAEa,MAAA,aAAa,CAAC,SAAmC;AAAA,EAC5D,MAAM;AAAA,EACN,SAAS,mBAAmB,GAAG,qCAAqC,UAAU;AAAA,EAC9E,MAAM,MAAM,WAAW,KAAK,GAAG;AACjC;AAEO,MAAM,cAAgC;AAAA,EAC3C,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM,CAAC,QAAQ,QAAQ,MAAM,CAAChB,MAAAA,QAAQ,kBAAkB,GAAa;AACvE;AAEO,MAAM,sBAAwC;AAAA,EACnD,MAAM;AAAA,EACN,SAAS;AAAA,EACT,KAAK,QAAQ;AACX,UAAM,WAAW,CAAC,GAAG,IAAI,IAAI,MAAkB,CAAC;AAEzC,WAAA,SAAS,WAAY,OAAoB;AAAA,EAAA;AAEpD;AAEO,MAAM,uBAAyC;AAAA,EACpD,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM,CAAC,QAAQ,QAAQ,MAAM,CAAC,CAAC,IAAI,OAAO,GAAa;AACzD;AAEO,MAAM,qBAAuC;AAAA,EAClD,MAAM;AAAA,EACN,SAAS;AAAA,EACT,KAAK,KAAK;AACR,QAAI,QAAQ,QAAW;AACd,aAAA;AAAA,IAAA;AAGT,QAAIN,WAAAA,QAAE,SAAS,GAAG,KAAKA,mBAAE,OAAO,GAAG,KAAKA,WAAAA,QAAE,SAAS,GAAG,KAAKA,WAAE,QAAA,QAAQ,GAAG,GAAG;AAClE,aAAA;AAAA,IAAA;AAGL,QAAA;AACF,WAAK,MAAM,GAAa;AAEjB,aAAA;AAAA,aACA,KAAK;AACL,aAAA;AAAA,IAAA;AAAA,EACT;AAEJ;AC/FA,MAAM,0BAA0BsB,UAC7B,OAAO;AAAA,EACN,MAAMA,MAAAA,IAAI,OAAA,EAAS,IAAI,CAAC,EAAE,KAAK,mBAAmB,EAAE,SAAS,eAAe;AAC9E,CAAC,EACA,UAAU;AAEb,MAAeC,4BAAAA,MAAAA,kBAAkB,uBAAuB;ACLxD,MAAe,sBAAA;AAAA,EACb,MAAM,aAAa,KAAc;AACzB,UAAA,OAAO,IAAI,QAAQ;AAErB,QAAA;AACF,YAAM,0BAA0B,IAAI;AAAA,aAC7B,OAAO;AACd,aAAO,IAAI,KAAK,EAAE,MAAA,GAAS,GAAG;AAAA,IAAA;AAG1B,UAAA,EAAE,SAAS,IAAI;AAErB,WAAO,OAAO,aAAa;AAErB,UAAA,2BAA2B,WAAW,sBAAsB;AAElE,UAAM,UAAU,MAAM,yBAAyB,aAAa,MAAM,IAAI;AAEzD,iBAAA,MAAM,OAAO,QAAQ;AAElC,QAAI,KAAK,EAAE,MAAM,QAAA,CAAS;AAAA,EAC5B;AAAA,EAEA,MAAM,eAAe,KAAc;AAC3B,UAAA,EAAE,SAAS,IAAI;AAErB,WAAO,OAAO,aAAa;AAErB,UAAA,2BAA2B,WAAW,sBAAsB;AAE5D,UAAA,yBAAyB,eAAe,IAAI;AAErC,iBAAA,MAAM,OAAO,QAAQ;AAE9B,QAAA,KAAK,EAAE,MAAM;AAAA,EAAA;AAErB;ACjBA,MAAM,2CAA2C;AAAA,EAC/C,MAAM;AAAA,EACN,SAAS;AAAA,EACT,KAAwB,OAAgB;AAChC,UAAA,EAAE,cAAc,KAAK;AACpB,WAAA,EAAE,CAACvB,WAAAA,QAAE,YAAY,SAAS,KAAK,CAACA,WAAE,QAAA,YAAY,KAAK,KAAM,QAAmB;AAAA,EAAA;AAEvF;AAEO,MAAM,mBAAmB,CAC9B,WACA,EAAE,OAAO,WAAW,iBACjB;AACH,SAAOsB,MAAAA,IAAI,OAAO;AAAA,IAChB,MAAMA,MAAAA,IACH,SACA,MAAM,CAAC,GAAG,KAAK,CAAC,EAChB,SAAS;AAAA,IACZ,cAAcA,MAAA,IAAI,QAAQ,EAAE,SAAS;AAAA,IACrC,SAASA,MAAA,IAAI,QAAQ,EAAE,SAAS;AAAA,IAChC,eAAeA,UAAI,OAAO;AAAA,IAC1B,GAAG,aAAa,WAAW,EAAE,WAAW,WAAY,CAAA;AAAA,EAAA,CAC9C;AACV;AAEA,MAAM,eAAe,CAAC,WAA0C,EAAE,WAAW,IAAS,CAAA,MAAO;AAC3F,UAAQ,UAAU,MAAM;AAAA,IAKtB,KAAK,SAAS;AACL,aAAA;AAAA,QACL,UAAUA,UAAI,QAAQ;AAAA,QACtB,UAAU,WAAW;AAAA,QACrB,cAAcA,MACX,IAAA,MAAA,EACA,GAAGA,MAAAA,IAAI,SAAS,MAAM,CAAC,UAAU,UAAU,SAAS,QAAQ,CAAC,CAAC,EAC9D,IAAI,CAAC;AAAA,MACV;AAAA,IAAA;AAAA,IAGF,KAAK,OAAO;AACH,aAAA;AAAA,QACL,UAAU,WAAW;AAAA,QACrB,aAAaA,MAAAA,IACV,OAAA,EACA;AAAA,UACC,OAAO,KAAK,UAAW,EAAE;AAAA,YAAO,CAAC,QAC/B,kBAAkB,SAAStB,WAAAA,QAAE,IAAI,WAAY,GAAG,GAAU,MAAM,CAAC;AAAA,UAAA;AAAA,UAGpE,SAAS;AAAA,QACZ,SAASsB,MAAAA,IACN,OAAA,EACA;AAAA,UACC;AAAA,UACA;AAAA,UACA,SAAU,OAAO;AACT,kBAAA,EAAE,gBAAgB,KAAK;AACtB,mBAAA,CAAC,EAAEtB,WAAE,QAAA,MAAM,WAAW,KAAKA,mBAAE,MAAM,KAAK;AAAA,UAAA;AAAA,QACjD,EAED,KAAK,UAAU;AAAA,QAClB,WAAW,WAAW;AAAA,QACtB,WAAW,WAAW,UAAU,IAAI,GAAG,EAAE,KAAK,wCAAwC;AAAA,QACtF,SAASsB,MAAA,IAAI,OAAO,EAAE,MAAM;AAAA,UAC1B,WAAWA,UAAI,OAAO;AAAA,UACtB,WAAWA,UAAI,QAAQ;AAAA,UACvB,YAAYA,UAAI,QAAQ;AAAA,UACxB,oBAAoBA,MAAI,IAAA,MAAA,EAAQ,GAAGA,MAAAA,IAAI,QAAQ,GAAGA,MAAAA,IAAI,OAAQ,CAAA,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAAA,UAC7E,2BAA2BA,UAAI,QAAQ;AAAA,QACxC,CAAA;AAAA,MACH;AAAA,IAAA;AAAA,IAMF,KAAK;AAAA,IACL,KAAK,QAAQ;AACJ,aAAA;AAAA,QACL,SAASA,UAAI,OAAO;AAAA,QACpB,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,WAAW,WAAW;AAAA,QACtB,WAAW,WAAW;AAAA,QACtB,OAAOA,MAAA,IAAI,OAAO,EAAE,KAAK,oBAAoB;AAAA,MAC/C;AAAA,IAAA;AAAA,IAEF,KAAK,YAAY;AACR,aAAA;AAAA,QACL,SAASA,UAAI,OAAO;AAAA,QACpB,UAAU,WAAW;AAAA,QACrB,WAAW,WAAW;AAAA,QACtB,WAAW,WAAW;AAAA,MACxB;AAAA,IAAA;AAAA,IAEF,KAAK,UAAU;AACN,aAAA;AAAA,QACL,UAAU,WAAW;AAAA,MACvB;AAAA,IAAA;AAAA,IAEF,KAAK,QAAQ;AACJ,aAAA;AAAA,QACL,SAASA,MAAAA,IAAI,QAAQ,KAAK,kBAAkB;AAAA,QAC5C,UAAU,WAAW;AAAA,MACvB;AAAA,IAAA;AAAA,IAEF,KAAK,eAAe;AACX,aAAA;AAAA,QACL,MAAMA,UACH,MAAM,EACN,GAAGA,UAAI,SAAS,KAAK,WAAW,EAAE,SAAS,CAAC,EAC5C,IAAI,CAAC,EACL,KAAK,mBAAmB,EACxB,SAAS;AAAA,QACZ,SAASA,MAAA,IAAI,OAAO,EAAE,KAAK,QAAQ,CAAC,YAAYA,MAAI,IAAA,OAAA,EAAS,MAAM,OAAO,CAAC;AAAA,QAC3E,UAAUA,MAAAA,IAAI,SAAS,KAAK,WAAW;AAAA,QACvC,UAAU,WAAW;AAAA,MACvB;AAAA,IAAA;AAAA,IAEF,KAAK,YAAY;AACR,aAAA;AAAA,QACL,UAAU,WAAW;AAAA,QACrB,WAAW,WAAW;AAAA,QACtB,WAAW,WAAW;AAAA,MACxB;AAAA,IAAA;AAAA,IAEF,KAAK,SAAS;AACL,aAAA;AAAA,QACL,SAASA,MAAA,IAAI,OAAO,EAAE,MAAM;AAAA,QAC5B,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,WAAW,WAAW;AAAA,QACtB,WAAW,WAAW;AAAA,MACxB;AAAA,IAAA;AAAA,IAEF,KAAK,WAAW;AACP,aAAA;AAAA,QACL,SAASA,MAAA,IAAI,OAAO,EAAE,QAAQ;AAAA,QAC9B,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,KAAKA,MAAA,IAAI,OAAO,EAAE,QAAQ;AAAA,QAC1B,KAAKA,MAAAA,IAAI,OAAO,EAAE,QAAQ;AAAA,MAC5B;AAAA,IAAA;AAAA,IAEF,KAAK,cAAc;AACV,aAAA;AAAA,QACL,SAASA,MAAI,IAAA,OAAA,EAAS,SAAS,EAAE,QAAQ,OAAO;AAAA,QAChD,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,KAAKA,MAAI,IAAA,OAAA,EAAS,SAAS,EAAE,QAAQ,OAAO;AAAA,QAC5C,KAAKA,MAAI,IAAA,OAAA,EAAS,SAAS,EAAE,QAAQ,OAAO;AAAA,MAC9C;AAAA,IAAA;AAAA,IAEF,KAAK,SAAS;AACL,aAAA;AAAA,QACL,SAASA,UAAI,OAAO;AAAA,QACpB,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,KAAKA,UAAI,OAAO;AAAA,QAChB,KAAKA,UAAI,OAAO;AAAA,MAClB;AAAA,IAAA;AAAA,IAEF,KAAK,WAAW;AACP,aAAA;AAAA,QACL,SAASA,UAAI,OAAO;AAAA,QACpB,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,KAAKA,UAAI,OAAO;AAAA,QAChB,KAAKA,UAAI,OAAO;AAAA,MAClB;AAAA,IAAA;AAAA,IAEF,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,QAAQ;AACJ,aAAA;AAAA,QACL,SAASA,UAAI,OAAO;AAAA,QACpB,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,MACrB;AAAA,IAAA;AAAA,IAEF,KAAK,WAAW;AACP,aAAA;AAAA,QACL,SAASA,UAAI,QAAQ;AAAA,QACrB,UAAU,WAAW;AAAA,MACvB;AAAA,IAAA;AAAA,IAGF,KAAK,aAAa;AACT,aAAA;AAAA,QACL,UAAU,WAAW;AAAA,QACrB,YAAYA,UAAI,QAAQ;AAAA;AAAA,QAExB,WAAWA,MAAA,IAAI,OAAO,EAAE,SAAS;AAAA,QACjC,KAAKA,UAAI,OAAO;AAAA,QAChB,KAAKA,UAAI,OAAO;AAAA,MAClB;AAAA,IAAA;AAAA,IAGF,KAAK,eAAe;AACX,aAAA;AAAA,QACL,UAAU,WAAW;AAAA,QACrB,YAAYA,MAAAA,IACT,QACA,GAAGA,MAAAA,IAAI,OAAA,EAAS,SAAA,CAAU,EAC1B,KAAK,WAAW,4BAA4B,CAAC,UAAU,MAAM,QAAQ,KAAK,CAAC,EAC3E,IAAI,CAAC;AAAA,QACR,KAAKA,UAAI,OAAO;AAAA,QAChB,KAAKA,UAAI,OAAO;AAAA,MAClB;AAAA,IAAA;AAAA,IAGF,SAAS;AACP,aAAO,CAAC;AAAA,IAAA;AAAA,EACV;AAEJ;AC1OA,MAAM,wBAAwB,CAAC,YAAY,WAAW;AAEtD,MAAM,kBAAkB,CAAC,iBACvB,SAA6B,OAAO;AAElC,MAAI,UAAU,QAAW;AAChB,WAAA;AAAA,EAAA;AAGT,MAAI,KAAK,OAAO,WAAW,SAAS,aAAa;AAC3C,QAAA,CAAC,aAAa,SAAS,KAAK,KAAK,CAACE,GAAAA,YAAY,KAAK,OAAO,eAAe,GAAG;AAC9E,aAAO,KAAK,YAAY;AAAA,QACtB,MAAM,KAAK;AAAA,QACX,SAAS,wCAAwC,sBAAsB,KAAK,IAAI,CAAC;AAAA,MAAA,CAClF;AAAA,IAAA;AAAA,EACH;AAGF,SAAO,aAAa,SAAS,KAAK,IAC9B,OACA,KAAK,YAAY;AAAA,IACf,MAAM,KAAK;AAAA,IACX,SAAS,wCAAwC,aAAa,KAAK,IAAI,CAAC;AAAA,EAAA,CACzE;AACP;AAEW,MAAA,uBAAuB,CAClC,WACA,qBACG;AACH,QAAM,mBAAmB,OAAO,KAAK,OAAO,YAAY,EACrD,OAAO,CAAC,QAAQ,OAAO,aAAa,GAAsB,EAAE,SAAS,UAAU,eAAe,EAC9F,OAAO,CAAC,QAAQ,CAAC,IAAI,WAAW,SAAS,MAAM,KAAK,QAAQ,SAAS,WAAW,EAChF,OAAO,CAAC,YAAY,iBAAiB,CAAC;AAEzC,QAAM,OAAO;AAAA,IACX,MAAMF,UAAI,OAAO,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,SAAS;AAAA,IAChD,UAAUA,MAAAA,IAAI,OAAA,EAAS,KAAK,mBAAmB,gBAAgB,gBAAgB,CAAC,EAAE,SAAS;AAAA,IAC3F,cAAcA,MAAA,IAAI,QAAQ,EAAE,SAAS;AAAA,IACrC,SAASA,MAAA,IAAI,QAAQ,EAAE,SAAS;AAAA,IAChC,eAAeA,UAAI,OAAO;AAAA,EAC5B;AAEA,UAAQ,UAAU,UAAU;AAAA,IAC1B,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,aAAa;AAChB,aAAOA,MAAAA,IAAI,OAAO;AAAA,QAChB,GAAG;AAAA,QACH,QAAQA,MAAI,IAAA,OAAA,EAAS,MAAM,gBAAgB,EAAE,SAAS;AAAA,QACtD,iBAAiBA,MAAI,IAAA,OAAA,EAAS,KAAK,WAAW,EAAE,SAAS;AAAA,MAAA,CAC1D;AAAA,IAAA;AAAA,IAEH,KAAK;AAAA,IACL,KAAK;AAAA,IACL,SAAS;AACP,aAAOA,UAAI,OAAO,EAAE,GAAG,MAAM;AAAA,IAAA;AAAA,EAC/B;AAEJ;ACpDa,MAAA,eAAe,CAC1B,OACA,WACA,EAAE,UAAU,IAAoC,CAAA,MAC7C;AACH,QAAM,QAAQ;AAAA,IACZ,aAAaA,UAAI,OAAO;AAAA,IACxB,SAASA,UAAI,OAAO;AAAA,IACpB,eAAeA,UAAI,OAAO;AAAA,IAC1B,gBAAgBA,MAAI,IAAA,OAAA,EAAS,SAAS,EAAE,KAAK,qBAAqB;AAAA,IAClE,YAAY,0BAA0B,EAAE,OAAO,WAAW,WAAW;AAAA,IACrE,iBAAiBA,UAAI,QAAQ;AAAA,EAC/B;AAEI,MAAA,cAAc,WAAW,cAAc;AACzC,UAAM,OAAOA,UAAI,OAAO,EAAE,MAAM,CAAC,UAAU,aAAa,UAAU,eAAe,CAAC,EAAE,SAAS;AAAA,EAAA;AAG/F,SAAOA,UAAI,OAAO,KAAK,EAAE,UAAU;AACrC;AAEA,MAAM,4BAA4B,CAAC,EAAE,OAAO,WAAW,gBAAuC;AACrF,SAAAA,MAAA,IAAI,KAAK,CAAC,eAAe;AACvB,WAAAA,MAAA,IACJ,SACA;AAAA,MACCtB,WAAAA,QAAE,UAAU,YAAY,CAAC,WAAW,QAAQ;AACtC,YAAA,eAAe,GAAG,GAAG;AACvB,iBAAO,mBAAmB;AAAA,QAAA;AAGxB,YAAA,iBAAiB,KAAK,UAAU,GAAG;AACrC,iBAAO,yBAAyB,GAAG;AAAA,QAAA;AAGjC,YAAA,UAAU,SAAS,YAAY;AACjC,iBAAO,qBAAqB,WAAW,SAAS,EAAE,KAAK,WAAW,GAAG,CAAC;AAAA,QAAA;AAGxE,YAAIA,mBAAE,IAAI,WAAW,MAAM,GAAG;AAC5B,iBAAO,iBAAiB,WAAW,EAAE,OAAO,WAAW,WAAY,CAAA,EAAE;AAAA,YACnE,WAAW,GAAG;AAAA,UAChB;AAAA,QAAA;AAGK,eAAA;AAAA,MACR,CAAA;AAAA,IAAA,EAEF,SAAS,qBAAqB;AAAA,EAAA,CAClC;AACH;AAEA,MAAM,mBAAmB,CAAC,KAAa,eAAoC;AACnE,QAAA,eAAeoB,aAAU,GAAG;AAElC,SAAO,OAAO,KAAK,UAAU,EAAE,KAAK,CAAC,gBAAgB;AAC/C,QAAA,gBAAgB,IAAY,QAAA;AACzB,WAAAA,GAAA,UAAU,WAAW,MAAM;AAAA,EAAA,CACnC;AACH;AAEA,MAAM,iBAAiB,CAAC,QAAgB;AACtC,SAAO,WAAW,SAAS,EAAE,wBAAwB,GAAG;AAC1D;AAEA,MAAM,qBAAqB,MAAM;AACzB,QAAA,gBAAgB,CAAC,GAAG,WAAW,SAAS,EAAE,mBAAmB,UAAU;AAEtE,SAAAE,MAAA,IAAI,MAAM,EAAE,KAAK;AAAA,IACtB,MAAM;AAAA,IACN,SAAS,mCAAmC,cAAc,KAAK,IAAI,CAAC;AAAA,IACpE,MAAM,MAAM;AAAA,EAAA,CACb;AACH;AAEA,MAAM,2BAA2B,CAAC,QAAgB;AACzC,SAAAA,MAAA,IAAI,MAAM,EAAE,KAAK;AAAA,IACtB,MAAM;AAAA,IACN,SAAS,aAAa,GAAG;AAAA,IACzB,MAAM,MAAM;AAAA,EAAA,CACb;AACH;AAEA,MAAM,0BAA0BA,MAAA,IAAI,OAAO,EAAE,KAAK;AAAA,EAChD,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM,MAAM;AACd,CAAC;ACtGY,MAAA,sBAAsB,CACjC,cACyF;AACzF,SAAO,aAAa;AACtB;ACFa,MAAA,sBAAsB,CACjC,SACG;AACH,QAAM,EAAE,eAAe,QAAQ,CAAC;AAEhC,SAAO,KAAK,UAAW,EAAE,QAAQ,CAAC,kBAAkB;AAC5C,UAAA,YAAY,WAAY,aAAa;AAE3C,QAAI,oBAAoB,SAAS,KAAK,UAAU,YAAY,IAAI;AAC9D,gBAAU,UAAU;AAAA,IAAA;AAAA,EACtB,CACD;AACH;AAEa,MAAA,+BAA+B,CAAC,SAAmC;AAC9E,MAAItB,mBAAE,IAAI,MAAM,YAAY,GAAG;AAC7B,WAAO,OAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,cAAc;AACpD,UACE,UAAU,SAAS,SACnB,CAACA,WAAA,QAAE,YAAY,UAAU,WAAW,KACpC,CAACA,WAAAA,QAAE,IAAI,KAAK,YAAY,UAAU,WAAW,GAC7C;AACA,kBAAU,cAAc;AAAA,MAAA;AAAA,IAC1B,CACD;AAAA,EAAA;AAEL;ACrBa,MAAAyB,oBAAkB,CAAC,YAAY,WAAW;AAChD,MAAMC,gBAAc,CAAC,GAAG,eAAe,aAAa,aAAa;AAE3D,MAAA,kBAAkB,aAAaA,eAAaD,mBAAiB;AAAA,EACxE,WAAW,WAAW;AACxB,CAAC,EACE,MAAM;AAAA,EACL,aAAaH,UAAI,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS,sBAAsB;AAAA,EAChE,MAAMA,MAAI,IAAA,OAAA,EAAS,SAAS,EAAE,KAAK,WAAW;AAAA,EAC9C,UAAUA,MAAAA,IAAI,SAAS,WAAW,KAAK,mBAAmB,EAAE,SAAS,mBAAmB;AAC1F,CAAC,EACA,SAAS,EACT,UAAU;AAEA,MAAA,wBAAwBA,MAAAA,IAAI,MAAA,EAAQ;AAAA,EAC/C,gBACG,MAAM;AAAA,IACL,KAAKA,UAAI,OAAO;AAAA,IAChB,QAAQA,UAAI,OAAO;AAAA,EACpB,CAAA,EACA,KAAK;AAAA,IACJ,MAAM;AAAA,IACN,SAAS;AAAA,IACT,KAAK,MAAe;AACd,UAAAtB,mBAAE,IAAI,MAAM,KAAK,KAAKA,mBAAE,IAAI,MAAM,QAAQ,EAAU,QAAA;AACxD,UAAI,CAACA,WAAA,QAAE,IAAI,MAAM,KAAK,KAAK,CAACA,WAAA,QAAE,IAAI,MAAM,QAAQ,EAAU,QAAA;AACnD,aAAA;AAAA,IAAA;AAAA,EACT,CACD,EACA,SAAS,EACT,UAAU;AACf;AAEa,MAAA,uBAAuBsB,UACjC,OAAO;AAAA,EACN,WAAW;AAAA,EACX,YAAY;AACd,CAAC,EACA,UAAU;AAEA,MAAA,yBAAyBC,wBAAkB,oBAAoB;AAE5E,MAAM,6BAA6BD,UAChC,OAAO;AAAA,EACN,WAAW;AAAA,EACX,YAAY;AACd,CAAC,EACA,UAAU;AAEA,MAAA,+BAA+B,CAAC,SAGvC;AACJ,MAAItB,WAAAA,QAAE,IAAI,MAAM,WAAW,KAAK,KAAK,WAAW;AAC9C,wBAAoB,KAAK,SAAS;AAAA,EAAA;AAGhC,MAAAA,WAAA,QAAE,IAAI,MAAM,YAAY,KAAK,MAAM,QAAQ,KAAK,UAAU,GAAG;AAC1D,SAAA,WAAW,QAAQ,CAAC2B,UAAS;AAChC,UAAI3B,mBAAE,IAAI2B,OAAM,KAAK,GAAG;AACtB,4BAAoBA,KAAI;AAAA,MAAA;AAAA,IAC1B,CACD;AAAA,EAAA;AAGI,SAAAJ,MAAA,kBAAkB,0BAA0B,EAAE,IAAI;AAC3D;ACjEA,MAAe,aAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMb,MAAM,cAAc,KAAc;AAC1B,UAAA,mBAAmB,WAAW,YAAY;AAChD,UAAM,gBAAgB,OAAO,KAAK,OAAO,UAAU;AAEnD,UAAM,OAAO,cAAc,IAAI,CAAC,QAAQ;AACtC,aAAO,iBAAiB,gBAAgB,OAAO,WAAW,GAAG,CAAC;AAAA,IAAA,CAC/D;AAEG,QAAA,KAAK,EAAE,MAAM;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,aAAa,KAAc;AACzB,UAAA,EAAE,QAAQ,IAAI;AAEd,UAAA,YAAY,OAAO,WAAW,GAAG;AAEvC,QAAI,CAAC,WAAW;AACd,aAAO,IAAI,KAAK,EAAE,OAAO,qBAAA,GAAwB,GAAG;AAAA,IAAA;AAGhD,UAAA,mBAAmB,WAAW,YAAY;AAEhD,QAAI,KAAK,EAAE,MAAM,iBAAiB,gBAAgB,SAAS,GAAG;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,KAAc;AAC5B,UAAA,OAAO,IAAI,QAAQ;AAErB,QAAA;AACF,YAAM,uBAAuB,IAAI;AAAA,aAC1B,OAAO;AACd,aAAO,IAAI,KAAK,EAAE,MAAA,GAAS,GAAG;AAAA,IAAA;AAG5B,QAAA;AACF,aAAO,OAAO,aAAa;AAErB,YAAA,mBAAmB,WAAW,YAAY;AAE1C,YAAA,YAAY,MAAM,iBAAiB,gBAAgB;AAAA,QACvD,WAAW,KAAK;AAAA,QAChB,YAAY,KAAK;AAAA,MAAA,CAClB;AAEY,mBAAA,MAAM,OAAO,QAAQ;AAE9B,UAAA,KAAK,EAAE,MAAM,EAAE,KAAK,UAAU,MAAM,GAAG,GAAG;AAAA,aACvC,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AACtB,UAAI,KAAK,EAAE,OAAQ,OAAe,WAAW,mBAAmB,GAAG;AAAA,IAAA;AAAA,EAEvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,KAAc;AAC5B,UAAA,EAAE,QAAQ,IAAI;AACd,UAAA,OAAO,IAAI,QAAQ;AAEzB,QAAI,CAACvB,WAAE,QAAA,IAAI,OAAO,YAAY,GAAG,GAAG;AAClC,aAAO,IAAI,KAAK,EAAE,OAAO,qBAAA,GAAwB,GAAG;AAAA,IAAA;AAGlD,QAAA;AACF,YAAM,6BAA6B,IAAI;AAAA,aAChC,OAAO;AACd,aAAO,IAAI,KAAK,EAAE,MAAA,GAAS,GAAG;AAAA,IAAA;AAG5B,QAAA;AACF,aAAO,OAAO,aAAa;AAErB,YAAA,mBAAmB,WAAW,YAAY;AAEhD,YAAM,YAAa,MAAM,iBAAiB,cAAc,KAAK;AAAA,QAC3D,WAAW,KAAK;AAAA,QAChB,YAAY,KAAK;AAAA,MAAA,CAClB;AAEY,mBAAA,MAAM,OAAO,QAAQ;AAE9B,UAAA,KAAK,EAAE,MAAM,EAAE,KAAK,UAAU,IAAA,GAAO;AAAA,aAClC,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AAEtB,UAAI,KAAK,EAAE,OAAQ,OAAe,WAAW,mBAAmB,GAAG;AAAA,IAAA;AAAA,EAEvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,KAAc;AAC5B,UAAA,EAAE,QAAQ,IAAI;AAEpB,QAAI,CAACA,WAAE,QAAA,IAAI,OAAO,YAAY,GAAG,GAAG;AAClC,aAAO,IAAI,KAAK,EAAE,OAAO,qBAAA,GAAwB,GAAG;AAAA,IAAA;AAGlD,QAAA;AACF,aAAO,OAAO,aAAa;AAErB,YAAA,mBAAmB,WAAW,YAAY;AAEhD,YAAM,YAAY,MAAM,iBAAiB,gBAAgB,GAAG;AAE/C,mBAAA,MAAM,OAAO,QAAQ;AAE9B,UAAA,KAAK,EAAE,MAAM,EAAE,KAAK,UAAU,IAAA,GAAO;AAAA,aAClC,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AACtB,UAAI,KAAK,EAAE,OAAQ,OAAe,WAAW,mBAAmB,GAAG;AAAA,IAAA;AAAA,EACrE;AAEJ;AC9GA,MAAM,kBAAkB;AAAA,EACtB,CAAC,UAAU,WAAW,GAAG;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,CAAC,UAAU,eAAe,GAAG;AAAA,IAC3B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;AAKA,MAAM,cAAc,CAAC,GAAG,eAAe,OAAO,aAAa,eAAe,aAAa;AAKvF,MAAM,0BAA0B,CAAC,MAA8B,EAAE,YAAY,MAAM,IAAI,CAAA,MAAO;AAC5F,QAAM,OAAqCY,GAAA;AAAA,IACzC,UAAU;AAAA,IACV;AAAA,IACA;AAAA,EACF;AACA,QAAM,oBAAoB,aAAa,aAAa,gBAAgB,IAAI,KAAK,IAAI;AAAA,IAC/E,WAAW,WAAW;AAAA,EACvB,CAAA,EACE,MAAM;AAAA,IACL,aAAaU,MAAI,IAAA,OAAA,EAAS,IAAI,CAAC,EAAE,SAAS;AAAA,IAC1C,cAAcA,MACX,IAAA,OAAA,EACA,IAAI,CAAC,EACL,KAAK,gBAAgB,SAAS,CAAC,EAC/B,KAAK,kCAAmC,CAAA,EACxC,cACA,SAAS;AAAA,IACZ,YAAYA,MAAAA,IACT,SACA,IAAI,CAAC,EACL,KAAK,gBAAgB,SAAS,CAAC,EAC/B,KAAK,gCAAgC,SAAS,CAAC,EAC/C,KAAK,kCAAmC,CAAA,EACxC,YAAY,EACZ,SAAS;AAAA,EACb,CAAA,EACA;AAAA,IACC;AAAA,IACA;AAAA,IACA,CAAC,UAAU,MAAM,iBAAiB,MAAM;AAAA,EAC1C;AAEF,SAAOA,MAAAA,IACJ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAON,aAAa,kBAAkB,WAAW,UAAU,KAAK;AAAA,IACzD,YAAY;AAAA,EACb,CAAA,EACA,UAAU;AACf;AAKa,MAAA,2BAA2B,CAAC,SAAiC;AACxE,SAAOC,MAAkB,kBAAA,wBAAwB,IAAI,CAAC,EAAE,IAAI;AAC9D;AAKa,MAAA,iCAAiC,CAAC,SAAiC;AAC1E,MAAAJ,GAAA,IAAI,eAAe,IAAI,GAAG;AAC5B,wBAAoB,KAAK,WAAW;AACpC,iCAA6B,KAAK,WAAuC;AAAA,EAAA;AAGvE,MAAAA,GAAA,IAAI,cAAc,IAAI,KAAK,MAAM,QAAQ,KAAK,UAAU,GAAG;AACxD,SAAA,WAAW,QAAQ,CAAC,SAAS;AAC5B,UAAAA,GAAA,IAAI,OAAO,IAAI,GAAG;AACpB,4BAAoB,IAA8B;AAAA,MAAA;AAAA,IACpD,CACD;AAAA,EAAA;AAGI,SAAAI,MAAA,kBAAkB,wBAAwB,MAAM,EAAE,WAAW,KAAM,CAAA,CAAC,EAAE,IAAI;AACnF;AAEA,MAAM,oCAAoC,MAAM;AAC9C,QAAM,gBAAgB,WAAW,SAAS,EAAE,iBAAmB,EAAA;AAExD,SAAA;AAAA,IACL,MAAM;AAAA,IACN,SAAS,sCAAsC,cAAc,KAAK,IAAI,CAAC;AAAA,IACvE,KAAK,OAAgB;AACf,UAAA,OAAO,UAAU,UAAU;AACtB,eAAA;AAAA,MAAA;AAGT,aAAO,CAAC,WAAW,SAAS,EAAE,oBAAoB,KAAK;AAAA,IAAA;AAAA,EAE3D;AACF;AAEA,MAAM,kBAAkB,CAAC,cAAuB;AAExC,QAAA,YAAYK,WAAQ,CAAC,OAAiC;AAC1D,WAAO,CAAC,GAAG,MAAM,cAAc,GAAG,MAAM,UAAU;AAAA,EAAA,CACnD,EAAE,OAAO,YAAmB;AAEtB,SAAA;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IACT,KAAK,OAAgB;AAEnB,UAAI,UAAkB,QAAA;AAGlB,UAAA,OAAO,UAAU,UAAU;AACtB,eAAA;AAAA,MAAA;AAIF,aAAA,UAAU,MAAM,CAAC,aAAaR,aAAU,QAAQ,MAAMA,aAAU,KAAK,CAAC;AAAA,IAAA;AAAA,EAEjF;AACF;AAEA,MAAM,kCAAkC,CAAC,cAAuB;AAC9D,QAAM,YAAY,OAAO,KAAK,OAAO,YAAY,EAAE;AAAA,IACjD,CAAC,QAAQ,OAAO,aAAa,GAA+B,EAAE;AAAA,EAChE;AAEO,SAAA;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IACT,KAAK,OAAgB;AAEnB,UAAI,UAAkB,QAAA;AAGlB,UAAA,OAAO,UAAU,UAAU;AACtB,eAAA;AAAA,MAAA;AAIF,aAAA,UAAU,MAAM,CAAC,aAAaA,aAAU,QAAQ,MAAMA,aAAU,KAAK,CAAC;AAAA,IAAA;AAAA,EAEjF;AACF;AAKA,MAAM,aAAaE,MAAAA,IAAI,OAAA,EAAS,MAAM,CAAC,UAAU,aAAa,UAAU,eAAe,CAAC;AAE3E,MAAA,eAAeC,wBAAkB,UAAU;ACnMxD,MAAe,eAAA;AAAA,EACb,MAAM,gBAAgB,KAAc;AAC5B,UAAA,EAAE,SAAS,IAAI;AAEjB,QAAA;AACF,YAAM,aAAa,IAAI;AAAA,aAChB,OAAO;AACd,aAAO,IAAI,KAAK,EAAE,MAAA,GAAS,GAAG;AAAA,IAAA;AAG1B,UAAA,qBAAqB,WAAW,eAAe;AAErD,UAAMb,gBAAe,OAAO,KAAK,OAAO,YAAY,EACjD;AAAA,MACC,CAAC,QACC,CAAC,QACDV,WAAAA,QAAE,IAAI,OAAO,aAAa,GAA+B,GAAG,QAAQ,gBAAgB,MAClF;AAAA,IAAA,EAEL;AAAA,MAAI,CAAC,QACJ,mBAAmB,kBAAkB,OAAO,aAAa,GAA+B,CAAC;AAAA,IAC3F;AAEF,QAAI,KAAK;AAAA,MACP,MAAMU;AAAA,IAAA,CACP;AAAA,EACH;AAAA,EAEA,eAAe,KAAc;AACrB,UAAA,EAAE,QAAQ,IAAI;AAEd,UAAA,cAAc,OAAO,aAAa,GAAG;AAE3C,QAAI,CAAC,aAAa;AAChB,aAAO,IAAI,KAAK,EAAE,OAAO,uBAAA,GAA0B,GAAG;AAAA,IAAA;AAGlD,UAAA,qBAAqB,WAAW,eAAe;AAErD,QAAI,KAAK,EAAE,MAAM,mBAAmB,kBAAkB,WAAW,GAAG;AAAA,EACtE;AAAA,EAEA,MAAM,kBAAkB,KAAc;AAC9B,UAAA,OAAO,IAAI,QAAQ;AAErB,QAAA;AACF,YAAM,yBAAyB,IAAI;AAAA,aAC5B,OAAO;AACd,aAAO,IAAI,KAAK,EAAE,MAAA,GAAS,GAAG;AAAA,IAAA;AAG5B,QAAA;AACF,aAAO,OAAO,aAAa;AAErB,YAAA,qBAAqB,WAAW,eAAe;AAE/C,YAAA,cAAc,MAAM,mBAAmB,kBAAkB;AAAA,QAC7D,aAAa,KAAK;AAAA,QAClB,YAAY,KAAK;AAAA,MAAA,CAClB;AAED,YAAM,iBAAiB;AAAA,QACrB,iBAAiB;AAAA,UACf,MAAM,YAAY;AAAA,QAAA;AAAA,MAEtB;AAEA,UAAIV,mBAAE,QAAQ,OAAO,IAAI,GAAG;AAC1B,cAAM,OAAO,UAAU,KAAK,6BAA6B,cAAc;AAAA,MAAA,OAClE;AACL,cAAM,OAAO,UAAU,KAAK,wBAAwB,cAAc;AAAA,MAAA;AAGvD,mBAAA,MAAM,OAAO,QAAQ;AAE9B,UAAA,KAAK,EAAE,MAAM,EAAE,KAAK,YAAY,MAAM,GAAG,GAAG;AAAA,aACzC,KAAK;AACL,aAAA,IAAI,MAAM,GAAG;AACd,YAAA,OAAO,UAAU,KAAK,2BAA2B;AAAA,QACrD,iBAAiB,EAAE,OAAQ,IAAc,WAAW,IAAI;AAAA,MAAA,CACzD;AACD,UAAI,KAAK,EAAE,OAAQ,IAAc,WAAW,mBAAmB,GAAG;AAAA,IAAA;AAAA,EAEtE;AAAA,EAEA,MAAM,kBAAkB,KAAc;AAC9B,UAAA,EAAE,QAAQ,IAAI;AACd,UAAA,OAAO,IAAI,QAAQ;AAEzB,QAAI,CAACA,WAAE,QAAA,IAAI,OAAO,cAAc,GAAG,GAAG;AACpC,aAAO,IAAI,KAAK,EAAE,OAAO,uBAAA,GAA0B,GAAG;AAAA,IAAA;AAGpD,QAAA;AACF,YAAM,+BAA+B,IAAI;AAAA,aAClC,OAAO;AACd,aAAO,IAAI,KAAK,EAAE,MAAA,GAAS,GAAG;AAAA,IAAA;AAG5B,QAAA;AACF,aAAO,OAAO,aAAa;AAErB,YAAA,qBAAqB,WAAW,eAAe;AAErD,YAAM,YAAY,MAAM,mBAAmB,gBAAgB,KAAK;AAAA,QAC9D,aAAa,KAAK;AAAA,QAClB,YAAY,KAAK;AAAA,MAAA,CAClB;AAEY,mBAAA,MAAM,OAAO,QAAQ;AAE9B,UAAA,KAAK,EAAE,MAAM,EAAE,KAAK,UAAU,MAAM,GAAG,GAAG;AAAA,aACvC,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AACtB,UAAI,KAAK,EAAE,OAAQ,OAAiB,WAAW,mBAAmB,GAAG;AAAA,IAAA;AAAA,EAEzE;AAAA,EAEA,MAAM,kBAAkB,KAAc;AAC9B,UAAA,EAAE,QAAQ,IAAI;AAEpB,QAAI,CAACA,WAAE,QAAA,IAAI,OAAO,cAAc,GAAG,GAAG;AACpC,aAAO,IAAI,KAAK,EAAE,OAAO,uBAAA,GAA0B,GAAG;AAAA,IAAA;AAGpD,QAAA;AACF,aAAO,OAAO,aAAa;AAErB,YAAA,qBAAqB,WAAW,eAAe;AAErD,YAAM,YAAY,MAAM,mBAAmB,kBAAkB,GAAG;AAEnD,mBAAA,MAAM,OAAO,QAAQ;AAE9B,UAAA,KAAK,EAAE,MAAM,EAAE,KAAK,UAAU,IAAA,GAAO;AAAA,aAClC,OAAO;AACP,aAAA,IAAI,MAAM,KAAK;AACtB,UAAI,KAAK,EAAE,OAAQ,OAAiB,WAAW,mBAAmB,GAAG;AAAA,IAAA;AAAA,EACvE;AAEJ;AClJA,MAAM,eAAe;AAAA,EACnB;AAAA,EACA,wBAAwB;AAAA,EACxB;AAAA,EACA,iBAAiB;AACnB;ACVA,MAAe,QAAA;AAAA,EACb,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IAEJ;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,EAAE,SAAS,CAAC,mCAAmC,EAAE;AAAA,UAAA;AAAA,QAC3D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEJ;AC7KA,MAAe,aAAA;AAAA,EACb,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IAAA;AAAA,EACX;AAEJ;ACrBA,MAAe,SAAA;AAAA,EACb;AAAA,EACA,eAAe;AACjB;ACGA,MAAA,QAAe,OAAO;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EAAA,aACA6B;AAAAA,EACA;AACF;;"}