{"version":3,"file":"Form-aTchNxab.js","sources":["../../admin/src/components/ConfigurationForm/EditFieldForm.tsx","../../admin/src/components/ConfigurationForm/Fields.tsx","../../admin/src/components/ConfigurationForm/Form.tsx"],"sourcesContent":["import {\r\n  useNotification,\r\n  InputRenderer,\r\n  Form,\r\n  InputProps,\r\n  useField,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Grid, Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\r\nimport { useGetInitialDataQuery } from '../../services/init';\r\nimport { capitalise } from '../../utils/strings';\r\nimport { getTranslation } from '../../utils/translations';\r\nimport { FieldTypeIcon } from '../FieldTypeIcon';\r\n\r\nimport { TEMP_FIELD_NAME } from './Fields';\r\n\r\nimport type { ConfigurationFormData } from './Form';\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Constants\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst FIELD_SCHEMA = yup.object().shape({\r\n  label: yup.string().required().nullable(),\r\n  description: yup.string(),\r\n  editable: yup.boolean(),\r\n  size: yup.number().required(),\r\n});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditFieldForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EditFieldFormProps {\r\n  attribute?: Schema.Attribute.AnyAttribute;\r\n  name: string;\r\n  onClose: () => void;\r\n}\r\n\r\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n\r\n  const { value, onChange } =\r\n    useField<ConfigurationFormData['layout'][number]['children'][number]>(name);\r\n\r\n  const { data: mainFieldOptions } = useGetInitialDataQuery(undefined, {\r\n    selectFromResult: (res) => {\r\n      if (attribute?.type !== 'relation' || !res.data) {\r\n        return { data: [] };\r\n      }\r\n\r\n      if ('targetModel' in attribute && typeof attribute.targetModel === 'string') {\r\n        const targetSchema = res.data.contentTypes.find(\r\n          (schema) => schema.uid === attribute.targetModel\r\n        );\r\n\r\n        if (targetSchema) {\r\n          return {\r\n            data: Object.entries(targetSchema.attributes).reduce<\r\n              Array<{ label: string; value: string }>\r\n            >((acc, [key, attribute]) => {\r\n              /**\r\n               * Create the list of attributes from the schema as to which can\r\n               * be our `mainField` and dictate the display name of the schema\r\n               * we're editing.\r\n               */\r\n              if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\r\n                acc.push({\r\n                  label: key,\r\n                  value: key,\r\n                });\r\n              }\r\n\r\n              return acc;\r\n            }, []),\r\n          };\r\n        }\r\n      }\r\n\r\n      return { data: [] };\r\n    },\r\n    skip: attribute?.type !== 'relation',\r\n  });\r\n\r\n  if (!value || value.name === TEMP_FIELD_NAME || !attribute) {\r\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\r\n    console.error(\r\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\r\n    );\r\n\r\n    toggleNotification({\r\n      message: formatMessage({\r\n        id: 'content-manager.containers.edit-settings.modal-form.error',\r\n        defaultMessage: 'An error occurred while trying to open the form.',\r\n      }),\r\n      type: 'danger',\r\n    });\r\n\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Modal.Content>\r\n      <Form\r\n        method=\"PUT\"\r\n        initialValues={value}\r\n        validationSchema={FIELD_SCHEMA}\r\n        onSubmit={(data) => {\r\n          onChange(name, data);\r\n          onClose();\r\n        }}\r\n      >\r\n        <Modal.Header>\r\n          <Flex gap={3}>\r\n            <FieldTypeIcon type={attribute.type} />\r\n            <Modal.Title>\r\n              {formatMessage(\r\n                {\r\n                  id: 'content-manager.containers.edit-settings.modal-form.label',\r\n                  defaultMessage: 'Edit {fieldName}',\r\n                },\r\n                { fieldName: capitalise(value.name) }\r\n              )}\r\n            </Modal.Title>\r\n          </Flex>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Grid.Root gap={4}>\r\n            {[\r\n              {\r\n                name: 'label',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.label'),\r\n                  defaultMessage: 'Label',\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                name: 'description',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.description'),\r\n                  defaultMessage: 'Description',\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                name: 'placeholder',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.placeholder'),\r\n                  defaultMessage: 'Placeholder',\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                name: 'editable',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.editable'),\r\n                  defaultMessage: 'Editable',\r\n                }),\r\n                size: 6,\r\n                type: 'boolean' as const,\r\n              },\r\n              {\r\n                name: 'mainField',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.mainField'),\r\n                  defaultMessage: 'Entry title',\r\n                }),\r\n                hint: formatMessage({\r\n                  id: getTranslation(\r\n                    'containers.SettingPage.edit-settings.modal-form.mainField.hint'\r\n                  ),\r\n                  defaultMessage: 'Set the displayed field',\r\n                }),\r\n                size: 6,\r\n                options: mainFieldOptions,\r\n                type: 'enumeration' as const,\r\n              },\r\n              {\r\n                name: 'size',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.ListSettingsView.modal-form.size'),\r\n                  defaultMessage: 'Size',\r\n                }),\r\n                size: 6,\r\n                options: [\r\n                  { value: '4', label: '33%' },\r\n                  { value: '6', label: '50%' },\r\n                  { value: '8', label: '66%' },\r\n                  { value: '12', label: '100%' },\r\n                ],\r\n                type: 'enumeration' as const,\r\n              },\r\n            ]\r\n              .filter(filterFieldsBasedOnAttributeType(attribute.type))\r\n              .map(({ size, ...field }) => (\r\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                  <InputRenderer {...field} />\r\n                </Grid.Item>\r\n              ))}\r\n          </Grid.Root>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Modal.Close>\r\n            <Button variant=\"tertiary\">\r\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n            </Button>\r\n          </Modal.Close>\r\n          <Button type=\"submit\">\r\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description not all edit fields have the same editable properties, it depends on the type\r\n * e.g. a dynamic zone can only change it's label.\r\n */\r\nconst filterFieldsBasedOnAttributeType = (type: Schema.Attribute.Kind) => (field: InputProps) => {\r\n  switch (type) {\r\n    case 'blocks':\r\n    case 'richtext':\r\n      return field.name !== 'size' && field.name !== 'mainField';\r\n    case 'boolean':\r\n    case 'media':\r\n      return field.name !== 'placeholder' && field.name !== 'mainField';\r\n    case 'component':\r\n    case 'dynamiczone':\r\n      return field.name === 'label' || field.name === 'editable';\r\n    case 'json':\r\n      return field.name !== 'placeholder' && field.name !== 'mainField' && field.name !== 'size';\r\n    case 'relation':\r\n      return true;\r\n    default:\r\n      return field.name !== 'mainField';\r\n  }\r\n};\r\n\r\nexport { EditFieldForm };\r\nexport type { EditFieldFormProps };\r\n","import * as React from 'react';\r\n\r\nimport { useField, useForm } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Modal,\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  IconButton,\r\n  IconButtonComponent,\r\n  Typography,\r\n  useComposedRefs,\r\n  Link,\r\n  Menu,\r\n} from '@strapi/design-system';\r\nimport { Cog, Cross, Drag, Pencil, Plus } from '@strapi/icons';\r\nimport { generateNKeysBetween as generateNKeysBetweenImpl } from 'fractional-indexing';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { ItemTypes } from '../../constants/dragAndDrop';\r\nimport { type UseDragAndDropOptions, useDragAndDrop } from '../../hooks/useDragAndDrop';\r\nimport { getTranslation } from '../../utils/translations';\r\nimport { ComponentIcon } from '../ComponentIcon';\r\n\r\nimport { EditFieldForm, EditFieldFormProps } from './EditFieldForm';\r\n\r\nimport type { ConfigurationFormData, EditFieldSpacerLayout } from './Form';\r\nimport type { EditLayout } from '../../hooks/useDocumentLayout';\r\n\r\ntype FormField = ConfigurationFormData['layout'][number]['children'][number];\r\ntype Field = Omit<ConfigurationFormData['layout'][number]['children'][number], '__temp_key__'>;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Fields\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface FieldsProps extends Pick<EditLayout, 'metadatas'>, Pick<FieldProps, 'components'> {\r\n  attributes: {\r\n    [key: string]: FieldProps['attribute'];\r\n  };\r\n  fieldSizes: Record<string, number>;\r\n  components: EditLayout['components'];\r\n}\r\n\r\nconst Fields = ({ attributes, fieldSizes, components, metadatas = {} }: FieldsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const layout = useForm<ConfigurationFormData['layout']>(\r\n    'Fields',\r\n    (state) => state.values.layout ?? []\r\n  );\r\n  const onChange = useForm('Fields', (state) => state.onChange);\r\n  const addFieldRow = useForm('Fields', (state) => state.addFieldRow);\r\n  const removeFieldRow = useForm('Fields', (state) => state.removeFieldRow);\r\n\r\n  const existingFields = layout.map((row) => row.children.map((field) => field.name)).flat();\r\n\r\n  /**\r\n   * Get the fields that are not already in the layout\r\n   * But also check that they are visible before we give users\r\n   * the option to display them. e.g. `id` is not visible.\r\n   */\r\n  const remainingFields = Object.entries(metadatas).reduce<Field[]>((acc, current) => {\r\n    const [name, { visible, ...field }] = current;\r\n\r\n    if (!existingFields.includes(name) && visible === true) {\r\n      const type = attributes[name]?.type;\r\n      const size = type ? fieldSizes[type] : 12;\r\n\r\n      acc.push({\r\n        ...field,\r\n        label: field.label ?? name,\r\n        name,\r\n        size,\r\n      });\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  const handleMoveField: FieldProps['onMoveField'] = (\r\n    [newRowIndex, newFieldIndex],\r\n    [currentRowIndex, currentFieldIndex]\r\n  ) => {\r\n    /**\r\n     * Because this view has the constraint that the sum of field sizes cannot be greater\r\n     * than 12, we don't use the form's method to move field rows, instead, we calculate\r\n     * the new layout and set the entire form.\r\n     */\r\n    const newLayout = structuredClone(layout);\r\n\r\n    /**\r\n     * Remove field from the current layout space using splice so we have the item\r\n     */\r\n    const [field] = newLayout[currentRowIndex].children.splice(currentFieldIndex, 1);\r\n\r\n    if (!field || field.name === TEMP_FIELD_NAME) {\r\n      return;\r\n    }\r\n\r\n    const newRow = newLayout[newRowIndex].children;\r\n    const [newFieldKey] = generateNKeysBetween(newRow, 1, currentFieldIndex, newFieldIndex);\r\n\r\n    /**\r\n     * Next we inject the field into it's new row at it's specified index, we then remove the spaces\r\n     * if they exist and recalculate into potentially two arrays ONLY if the sizing is now over 12,\r\n     * the row and the rest of the row that couldn't fit.\r\n     *\r\n     * for example, if i have a row of `[{size: 4}, {size: 6}]` and i add `{size: 8}` a index 0,\r\n     * the new array will look like `[{size: 8}, {size: 4}, {size: 6}]` which breaks the limit of 12,\r\n     * so instead we make two arrays for the new rows `[[{size: 8}, {size: 4}], [{size: 6}]]` which we\r\n     * then inject at the original row point with spacers included.\r\n     */\r\n    newRow.splice(newFieldIndex, 0, { ...field, __temp_key__: newFieldKey });\r\n\r\n    if (newLayout[newRowIndex].children.reduce((acc, curr) => acc + curr.size, 0) > 12) {\r\n      const recalculatedRows = chunkArray(\r\n        newLayout[newRowIndex].children.filter((field) => field.name !== TEMP_FIELD_NAME)\r\n      );\r\n\r\n      const rowKeys = generateNKeysBetween(\r\n        newLayout,\r\n        recalculatedRows.length,\r\n        currentRowIndex,\r\n        newRowIndex\r\n      );\r\n\r\n      newLayout.splice(\r\n        newRowIndex,\r\n        1,\r\n        ...recalculatedRows.map((row, index) => ({\r\n          __temp_key__: rowKeys[index],\r\n          children: row,\r\n        }))\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Now we remove our spacers from the rows so we can understand what dead rows exist:\r\n     * - if there's only spacers left\r\n     * - there's nothing in the row, e.g. a size 12 field left it.\r\n     * These rows are then filtered out.\r\n     * After that, we recalculate the spacers for the rows that need them.\r\n     */\r\n    const newLayoutWithSpacers = newLayout\r\n      .map((row) => ({\r\n        ...row,\r\n        children: row.children.filter((field) => field.name !== TEMP_FIELD_NAME),\r\n      }))\r\n      .filter((row) => row.children.length > 0)\r\n      .map((row) => {\r\n        const totalSpaceTaken = row.children.reduce((acc, curr) => acc + curr.size, 0);\r\n\r\n        if (totalSpaceTaken < 12) {\r\n          const [spacerKey] = generateNKeysBetweenImpl(\r\n            row.children.at(-1)?.__temp_key__,\r\n            undefined,\r\n            1\r\n          );\r\n\r\n          return {\r\n            ...row,\r\n            children: [\r\n              ...row.children,\r\n              {\r\n                name: TEMP_FIELD_NAME,\r\n                size: 12 - totalSpaceTaken,\r\n                __temp_key__: spacerKey,\r\n              } satisfies EditFieldSpacerLayout,\r\n            ],\r\n          };\r\n        }\r\n\r\n        return row;\r\n      });\r\n\r\n    onChange('layout', newLayoutWithSpacers);\r\n  };\r\n\r\n  const handleRemoveField =\r\n    (rowIndex: number, fieldIndex: number): FieldProps['onRemoveField'] =>\r\n    () => {\r\n      if (layout[rowIndex].children.length === 1) {\r\n        removeFieldRow(`layout`, rowIndex);\r\n      } else {\r\n        onChange(`layout.${rowIndex}.children`, [\r\n          ...layout[rowIndex].children.slice(0, fieldIndex),\r\n          ...layout[rowIndex].children.slice(fieldIndex + 1),\r\n        ]);\r\n      }\r\n    };\r\n\r\n  const handleAddField = (field: Field) => () => {\r\n    addFieldRow('layout', { children: [field] });\r\n  };\r\n\r\n  return (\r\n    <Flex paddingTop={6} direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n      <Flex alignItems=\"flex-start\" direction=\"column\" justifyContent=\"space-between\">\r\n        <Typography fontWeight=\"bold\">\r\n          {formatMessage({\r\n            id: getTranslation('containers.list.displayedFields'),\r\n            defaultMessage: 'Displayed fields',\r\n          })}\r\n        </Typography>\r\n        <Typography variant=\"pi\" textColor=\"neutral600\">\r\n          {formatMessage({\r\n            id: 'containers.SettingPage.editSettings.description',\r\n            defaultMessage: 'Drag & drop the fields to build the layout',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n      <Box padding={4} hasRadius borderStyle=\"dashed\" borderWidth=\"1px\" borderColor=\"neutral300\">\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          {layout.map((row, rowIndex) => (\r\n            <Grid.Root gap={2} key={row.__temp_key__}>\r\n              {row.children.map(({ size, ...field }, fieldIndex) => (\r\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                  <Field\r\n                    attribute={attributes[field.name]}\r\n                    components={components}\r\n                    index={[rowIndex, fieldIndex]}\r\n                    name={`layout.${rowIndex}.children.${fieldIndex}`}\r\n                    onMoveField={handleMoveField}\r\n                    onRemoveField={handleRemoveField(rowIndex, fieldIndex)}\r\n                  />\r\n                </Grid.Item>\r\n              ))}\r\n            </Grid.Root>\r\n          ))}\r\n          <Menu.Root>\r\n            <Menu.Trigger\r\n              startIcon={<Plus />}\r\n              endIcon={null}\r\n              disabled={remainingFields.length === 0}\r\n              fullWidth\r\n              variant=\"secondary\"\r\n            >\r\n              {formatMessage({\r\n                id: getTranslation('containers.SettingPage.add.field'),\r\n                defaultMessage: 'Insert another field',\r\n              })}\r\n            </Menu.Trigger>\r\n            <Menu.Content>\r\n              {remainingFields.map((field) => (\r\n                <Menu.Item key={field.name} onSelect={handleAddField(field)}>\r\n                  {field.label}\r\n                </Menu.Item>\r\n              ))}\r\n            </Menu.Content>\r\n          </Menu.Root>\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description Small abstraction to solve within an array of fields where you can\r\n * add a field to the beginning or start, move back and forth what it's index range\r\n * should be when calculating it's new temp key\r\n */\r\nconst generateNKeysBetween = <Field extends { __temp_key__: string }>(\r\n  field: Field[],\r\n  count: number,\r\n  currInd: number,\r\n  newInd: number\r\n) => {\r\n  const startKey = currInd > newInd ? field[newInd - 1]?.__temp_key__ : field[newInd]?.__temp_key__;\r\n  const endKey = currInd > newInd ? field[newInd]?.__temp_key__ : field[newInd + 1]?.__temp_key__;\r\n\r\n  return generateNKeysBetweenImpl(startKey, endKey, count);\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description chunks a row of layouts by the max size we allow, 12. It does not add the\r\n * spacers again, that should be added separately.\r\n */\r\nconst chunkArray = (array: FormField[]) => {\r\n  const result: Array<FormField[]> = [];\r\n  let temp: FormField[] = [];\r\n\r\n  array.reduce((acc, field) => {\r\n    if (acc + field.size > 12) {\r\n      result.push(temp);\r\n      temp = [field];\r\n      return field.size;\r\n    } else {\r\n      temp.push(field);\r\n      return acc + field.size;\r\n    }\r\n  }, 0);\r\n\r\n  if (temp.length > 0) {\r\n    result.push(temp);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Field\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface FieldProps extends Pick<EditFieldFormProps, 'name' | 'attribute'> {\r\n  components: EditLayout['components'];\r\n  index: [row: number, index: number];\r\n  onMoveField: UseDragAndDropOptions<number[]>['onMoveItem'];\r\n  onRemoveField: React.MouseEventHandler<HTMLButtonElement>;\r\n}\r\n\r\nconst TEMP_FIELD_NAME = '_TEMP_';\r\n\r\n/**\r\n * Displays a field in the layout with drag options, also\r\n * opens a modal  to edit the details of said field.\r\n */\r\nconst Field = ({ attribute, components, name, index, onMoveField, onRemoveField }: FieldProps) => {\r\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { value } = useField<FormField>(name);\r\n\r\n  const [{ isDragging }, objectRef, dropRef, dragRef, dragPreviewRef] = useDragAndDrop<\r\n    Array<number>\r\n  >(true, {\r\n    dropSensitivity: 'immediate',\r\n    type: ItemTypes.EDIT_FIELD,\r\n    item: { index, label: value?.label, name },\r\n    index,\r\n    onMoveItem: onMoveField,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\r\n  }, [dragPreviewRef]);\r\n\r\n  const composedRefs = useComposedRefs<HTMLSpanElement>(dragRef, objectRef);\r\n\r\n  const handleRemoveField: React.MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    onRemoveField(e);\r\n  };\r\n\r\n  const onEditFieldMeta: React.MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const tempRefs = useComposedRefs<HTMLSpanElement>(dropRef, objectRef);\r\n\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  if (value.name === TEMP_FIELD_NAME) {\r\n    return <Flex tag=\"span\" height=\"100%\" style={{ opacity: 0 }} ref={tempRefs} />;\r\n  }\r\n\r\n  return (\r\n    <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\r\n      <Flex\r\n        borderColor=\"neutral150\"\r\n        background=\"neutral100\"\r\n        hasRadius\r\n        style={{ opacity: isDragging ? 0.5 : 1 }}\r\n        ref={dropRef}\r\n        gap={3}\r\n        cursor=\"pointer\"\r\n        onClick={() => {\r\n          setIsModalOpen(true);\r\n        }}\r\n      >\r\n        <DragButton\r\n          tag=\"span\"\r\n          withTooltip={false}\r\n          label={formatMessage(\r\n            {\r\n              id: getTranslation('components.DraggableCard.move.field'),\r\n              defaultMessage: 'Move {item}',\r\n            },\r\n            { item: value.label }\r\n          )}\r\n          onClick={(e) => e.stopPropagation()}\r\n          ref={composedRefs}\r\n        >\r\n          <Drag />\r\n        </DragButton>\r\n        <Flex direction=\"column\" alignItems=\"flex-start\" grow={1} overflow=\"hidden\">\r\n          <Flex gap={3} justifyContent=\"space-between\" width=\"100%\">\r\n            <Typography ellipsis fontWeight=\"bold\">\r\n              {value.label}\r\n            </Typography>\r\n            <Flex>\r\n              <IconButton\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                background=\"transparent\"\r\n                onClick={onEditFieldMeta}\r\n                withTooltip={false}\r\n                label={formatMessage(\r\n                  {\r\n                    id: getTranslation('components.DraggableCard.edit.field'),\r\n                    defaultMessage: 'Edit {item}',\r\n                  },\r\n                  { item: value.label }\r\n                )}\r\n              >\r\n                <Pencil />\r\n              </IconButton>\r\n              <IconButton\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                onClick={handleRemoveField}\r\n                background=\"transparent\"\r\n                withTooltip={false}\r\n                label={formatMessage(\r\n                  {\r\n                    id: getTranslation('components.DraggableCard.delete.field'),\r\n                    defaultMessage: 'Delete {item}',\r\n                  },\r\n                  { item: value.label }\r\n                )}\r\n              >\r\n                <Cross />\r\n              </IconButton>\r\n            </Flex>\r\n          </Flex>\r\n          {attribute?.type === 'component' ? (\r\n            <Flex\r\n              paddingTop={3}\r\n              paddingRight={3}\r\n              paddingBottom={3}\r\n              paddingLeft={0}\r\n              alignItems=\"flex-start\"\r\n              direction=\"column\"\r\n              gap={2}\r\n              width=\"100%\"\r\n            >\r\n              <Grid.Root gap={4} width=\"100%\">\r\n                {components[attribute.component].layout.map((row) =>\r\n                  row.map(({ size, ...field }) => (\r\n                    <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                      <Flex\r\n                        alignItems=\"center\"\r\n                        background=\"neutral0\"\r\n                        paddingTop={2}\r\n                        paddingBottom={2}\r\n                        paddingLeft={3}\r\n                        paddingRight={3}\r\n                        hasRadius\r\n                        borderColor=\"neutral200\"\r\n                      >\r\n                        <Typography textColor=\"neutral800\">{field.name}</Typography>\r\n                      </Flex>\r\n                    </Grid.Item>\r\n                  ))\r\n                )}\r\n              </Grid.Root>\r\n              <Link\r\n                // used to stop the edit form from appearing when we click here.\r\n                onClick={(e) => e.stopPropagation()}\r\n                startIcon={<Cog />}\r\n                tag={NavLink}\r\n                to={`../components/${attribute.component}/configurations/edit`}\r\n              >\r\n                {formatMessage({\r\n                  id: getTranslation('components.FieldItem.linkToComponentLayout'),\r\n                  defaultMessage: \"Set the component's layout\",\r\n                })}\r\n              </Link>\r\n            </Flex>\r\n          ) : null}\r\n          {attribute?.type === 'dynamiczone' ? (\r\n            <Flex\r\n              paddingTop={3}\r\n              paddingRight={3}\r\n              paddingBottom={3}\r\n              paddingLeft={0}\r\n              alignItems=\"flex-start\"\r\n              gap={2}\r\n              width=\"100%\"\r\n            >\r\n              {attribute?.components.map((uid) => (\r\n                <ComponentLink\r\n                  // used to stop the edit form from appearing when we click here.\r\n                  onClick={(e) => e.stopPropagation()}\r\n                  key={uid}\r\n                  to={`../components/${uid}/configurations/edit`}\r\n                >\r\n                  <ComponentIcon icon={components[uid].settings.icon} />\r\n                  <Typography fontSize={1} textColor=\"neutral600\" fontWeight=\"bold\">\r\n                    {components[uid].settings.displayName}\r\n                  </Typography>\r\n                </ComponentLink>\r\n              ))}\r\n            </Flex>\r\n          ) : null}\r\n        </Flex>\r\n      </Flex>\r\n      {value.name !== TEMP_FIELD_NAME && (\r\n        <EditFieldForm attribute={attribute} name={name} onClose={() => setIsModalOpen(false)} />\r\n      )}\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nconst DragButton = styled<IconButtonComponent<'span'>>(IconButton)`\r\n  height: unset;\r\n  align-self: stretch;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0;\r\n  border: none;\r\n  background-color: transparent;\r\n  border-radius: 0px;\r\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n  cursor: all-scroll;\r\n\r\n  svg {\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst ComponentLink = styled(NavLink)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: ${({ theme }) => theme.spaces[1]};\r\n  padding: ${(props) => props.theme.spaces[2]};\r\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\r\n  background: ${({ theme }) => theme.colors.neutral0};\r\n  width: 14rem;\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  text-decoration: none;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    ${({ theme }) => `\r\n      background-color: ${theme.colors.primary100};\r\n      border-color: ${theme.colors.primary200};\r\n\r\n      ${Typography} {\r\n          color: ${theme.colors.primary600};\r\n      }\r\n    `}\r\n\r\n    /* > ComponentIcon */\r\n    > div:first-child {\r\n      background: ${({ theme }) => theme.colors.primary200};\r\n      color: ${({ theme }) => theme.colors.primary600};\r\n\r\n      svg {\r\n        path {\r\n          fill: ${({ theme }) => theme.colors.primary600};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Fields, TEMP_FIELD_NAME };\r\nexport type { FieldsProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Form,\r\n  FormProps,\r\n  useForm,\r\n  InputRenderer,\r\n  BackButton,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Divider, Flex, Grid, Main, Typography } from '@strapi/design-system';\r\nimport { generateNKeysBetween } from 'fractional-indexing';\r\nimport pipe from 'lodash/fp/pipe';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\r\nimport { capitalise } from '../../utils/strings';\r\nimport { getTranslation } from '../../utils/translations';\r\n\r\nimport { Fields, FieldsProps, TEMP_FIELD_NAME } from './Fields';\r\n\r\nimport type { EditFieldLayout, EditLayout } from '../../hooks/useDocumentLayout';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ConfigurationForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ConfigurationFormProps extends Pick<FieldsProps, 'attributes' | 'fieldSizes'> {\r\n  layout: EditLayout;\r\n  onSubmit: FormProps<ConfigurationFormData>['onSubmit'];\r\n}\r\n\r\n/**\r\n * Every key in EditFieldLayout is turned to optional never and then we overwrite the ones we are using.\r\n */\r\n\r\ntype EditFieldSpacerLayout = {\r\n  [key in keyof Omit<EditFieldLayout, 'name' | 'size'>]?: never;\r\n} & {\r\n  description?: never;\r\n  editable?: never;\r\n  name: '_TEMP_';\r\n  size: number;\r\n  __temp_key__: string;\r\n};\r\n\r\ninterface ConfigurationFormData extends Pick<EditLayout, 'settings'> {\r\n  layout: Array<{\r\n    __temp_key__: string;\r\n    children: Array<\r\n      | (Pick<EditFieldLayout, 'label' | 'size' | 'name' | 'placeholder' | 'mainField'> & {\r\n          description: EditFieldLayout['hint'];\r\n          editable: EditFieldLayout['disabled'];\r\n          __temp_key__: string;\r\n        })\r\n      | EditFieldSpacerLayout\r\n    >;\r\n  }>;\r\n}\r\n\r\nconst ConfigurationForm = ({\r\n  attributes,\r\n  fieldSizes,\r\n  layout: editLayout,\r\n  onSubmit,\r\n}: ConfigurationFormProps) => {\r\n  const { components, settings, layout, metadatas } = editLayout;\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  const initialValues: ConfigurationFormData = React.useMemo(() => {\r\n    const transformations = pipe(\r\n      flattenPanels,\r\n      replaceMainFieldWithNameOnly,\r\n      extractMetadata,\r\n      addTmpSpaceToLayout,\r\n      addTmpKeysToLayout\r\n    );\r\n\r\n    return {\r\n      layout: transformations(layout),\r\n      settings,\r\n    };\r\n  }, [layout, settings]);\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Main>\r\n        <Form initialValues={initialValues} onSubmit={onSubmit} method=\"PUT\">\r\n          <Header name={settings.displayName ?? ''} />\r\n          <Layouts.Content>\r\n            <Flex\r\n              alignItems=\"stretch\"\r\n              background=\"neutral0\"\r\n              direction=\"column\"\r\n              gap={6}\r\n              hasRadius\r\n              shadow=\"tableShadow\"\r\n              paddingTop={6}\r\n              paddingBottom={6}\r\n              paddingLeft={7}\r\n              paddingRight={7}\r\n            >\r\n              <Typography variant=\"delta\" tag=\"h2\">\r\n                {formatMessage({\r\n                  id: getTranslation('containers.SettingPage.settings'),\r\n                  defaultMessage: 'Settings',\r\n                })}\r\n              </Typography>\r\n              <Grid.Root>\r\n                <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <InputRenderer\r\n                    type=\"enumeration\"\r\n                    label={formatMessage({\r\n                      id: getTranslation('containers.SettingPage.editSettings.entry.title'),\r\n                      defaultMessage: 'Entry title',\r\n                    })}\r\n                    hint={formatMessage({\r\n                      id: getTranslation(\r\n                        'containers.SettingPage.editSettings.entry.title.description'\r\n                      ),\r\n                      defaultMessage: 'Set the display field of your entry',\r\n                    })}\r\n                    name=\"settings.mainField\"\r\n                    options={Object.entries(attributes).reduce<\r\n                      Array<{ label: string; value: string }>\r\n                    >((acc, [key, attribute]) => {\r\n                      if (!attribute) {\r\n                        return acc;\r\n                      }\r\n\r\n                      /**\r\n                       * Create the list of attributes from the schema as to which can\r\n                       * be our `mainField` and dictate the display name of the schema\r\n                       * we're editing.\r\n                       */\r\n                      if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\r\n                        acc.push({\r\n                          label: key,\r\n                          value: key,\r\n                        });\r\n                      }\r\n\r\n                      return acc;\r\n                    }, [])}\r\n                  />\r\n                </Grid.Item>\r\n                <Grid.Item\r\n                  paddingTop={6}\r\n                  paddingBottom={6}\r\n                  col={12}\r\n                  s={12}\r\n                  direction=\"column\"\r\n                  alignItems=\"stretch\"\r\n                >\r\n                  <Divider />\r\n                </Grid.Item>\r\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Typography variant=\"delta\" tag=\"h3\">\r\n                    {formatMessage({\r\n                      id: getTranslation('containers.SettingPage.view'),\r\n                      defaultMessage: 'View',\r\n                    })}\r\n                  </Typography>\r\n                </Grid.Item>\r\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Fields\r\n                    attributes={attributes}\r\n                    components={components}\r\n                    fieldSizes={fieldSizes}\r\n                    metadatas={metadatas}\r\n                  />\r\n                </Grid.Item>\r\n              </Grid.Root>\r\n            </Flex>\r\n          </Layouts.Content>\r\n        </Form>\r\n      </Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description Panels don't exist in the layout, so we flatten by one.\r\n */\r\nconst flattenPanels = (layout: EditLayout['layout']): EditLayout['layout'][number] =>\r\n  layout.flat(1);\r\n\r\n/**\r\n * @internal\r\n * @description We don't need the mainField object in the layout, we only need the name.\r\n */\r\nconst replaceMainFieldWithNameOnly = (layout: EditLayout['layout'][number]) =>\r\n  layout.map((row) =>\r\n    row.map((field) => ({\r\n      ...field,\r\n      mainField: field.mainField?.name,\r\n    }))\r\n  );\r\n\r\n/**\r\n * @internal\r\n * @description We extract the metadata values from the field layout, because these are editable by the user.\r\n */\r\nconst extractMetadata = (\r\n  layout: EditLayout['layout'][number]\r\n): Array<Exclude<ConfigurationFormData['layout'], { name: '_TEMP_' }>[number]['children']> => {\r\n  return layout.map((row) =>\r\n    row.map(({ label, disabled, hint, placeholder, size, name, mainField }) => ({\r\n      label,\r\n      editable: !disabled,\r\n      description: hint,\r\n      mainField,\r\n      placeholder,\r\n      size,\r\n      name,\r\n      __temp_key__: '',\r\n    }))\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description Each row of the layout has a max size of 12 (based on bootstrap grid system)\r\n * So in order to offer a better drop zone we add the _TEMP_ div to complete the remaining substract (12 - existing)\r\n */\r\nconst addTmpSpaceToLayout = (\r\n  layout: ReturnType<typeof extractMetadata>\r\n): Array<ConfigurationFormData['layout'][number]['children']> => [\r\n  ...layout.map((row) => {\r\n    const totalSpaceTaken = row.reduce((acc, field) => acc + field.size, 0);\r\n\r\n    if (totalSpaceTaken < 12) {\r\n      return [\r\n        ...row,\r\n        {\r\n          name: TEMP_FIELD_NAME,\r\n          size: 12 - totalSpaceTaken,\r\n          __temp_key__: '',\r\n        } satisfies EditFieldSpacerLayout,\r\n      ];\r\n    }\r\n\r\n    return row;\r\n  }),\r\n];\r\n\r\n/**\r\n * @internal\r\n * @description At this point of the transformations we have Field[][], but each row for the form should have a __temp_key__\r\n * applied. This means we need to change it so `Field` is nested under the children property.\r\n */\r\nconst addTmpKeysToLayout = (\r\n  layout: ReturnType<typeof addTmpSpaceToLayout>\r\n): ConfigurationFormData['layout'] => {\r\n  const keys = generateNKeysBetween(undefined, undefined, layout.length);\r\n\r\n  return layout.map((row, rowIndex) => {\r\n    const fieldKeys = generateNKeysBetween(undefined, undefined, row.length);\r\n\r\n    return {\r\n      __temp_key__: keys[rowIndex],\r\n      children: row.map((field, fieldIndex) => {\r\n        return {\r\n          ...field,\r\n          __temp_key__: fieldKeys[fieldIndex],\r\n        };\r\n      }),\r\n    };\r\n  });\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Header\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderProps {\r\n  name: string;\r\n}\r\n\r\nconst Header = ({ name }: HeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const modified = useForm('Header', (state) => state.modified);\r\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\r\n\r\n  return (\r\n    <Layouts.Header\r\n      title={formatMessage(\r\n        {\r\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\r\n          defaultMessage: `Configure the view - {name}`,\r\n        },\r\n        { name: capitalise(name) }\r\n      )}\r\n      subtitle={formatMessage({\r\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.edit-settings'),\r\n        defaultMessage: 'Customize how the edit view will look like.',\r\n      })}\r\n      navigationAction={<BackButton />}\r\n      primaryAction={\r\n        <Button disabled={!modified} loading={isSubmitting} type=\"submit\">\r\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport { ConfigurationForm };\r\nexport type { ConfigurationFormProps, ConfigurationFormData, EditFieldSpacerLayout };\r\n"],"names":["yup","useIntl","useNotification","useField","useGetInitialDataQuery","attribute","ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD","jsx","Modal","jsxs","Form","Flex","FieldTypeIcon","capitalise","Grid","getTranslation","InputRenderer","Button","useForm","field","index","generateNKeysBetweenImpl","Typography","Box","Menu","Plus","React","useDragAndDrop","ItemTypes","getEmptyImage","useComposedRefs","Drag","IconButton","Pencil","Cross","Link","Cog","NavLink","ComponentIcon","styled","pipe","Layouts","Main","Divider","generateNKeysBetween","BackButton"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAM,eAAeA,eAAI,OAAO,EAAE,MAAM;AAAA,EACtC,OAAOA,eAAI,OAAS,EAAA,SAAA,EAAW,SAAS;AAAA,EACxC,aAAaA,eAAI,OAAO;AAAA,EACxB,UAAUA,eAAI,QAAQ;AAAA,EACtB,MAAMA,eAAI,OAAO,EAAE,SAAS;AAC9B,CAAC;AAYD,MAAM,gBAAgB,CAAC,EAAE,WAAW,MAAM,cAAkC;AACpE,QAAA,EAAE,cAAc,IAAIC,kBAAQ;AAC5B,QAAA,EAAE,mBAAmB,IAAIC,4BAAgB;AAE/C,QAAM,EAAE,OAAO,aACbC,YAAAA,SAAsE,IAAI;AAE5E,QAAM,EAAE,MAAM,iBAAiB,IAAIC,6BAAuB,QAAW;AAAA,IACnE,kBAAkB,CAAC,QAAQ;AACzB,UAAI,WAAW,SAAS,cAAc,CAAC,IAAI,MAAM;AACxC,eAAA,EAAE,MAAM,GAAG;AAAA,MAAA;AAGpB,UAAI,iBAAiB,aAAa,OAAO,UAAU,gBAAgB,UAAU;AACrE,cAAA,eAAe,IAAI,KAAK,aAAa;AAAA,UACzC,CAAC,WAAW,OAAO,QAAQ,UAAU;AAAA,QACvC;AAEA,YAAI,cAAc;AACT,iBAAA;AAAA,YACL,MAAM,OAAO,QAAQ,aAAa,UAAU,EAAE,OAE5C,CAAC,KAAK,CAAC,KAAKC,UAAS,MAAM;AAM3B,kBAAI,CAACC,MAAAA,0CAA0C,SAASD,WAAU,IAAI,GAAG;AACvE,oBAAI,KAAK;AAAA,kBACP,OAAO;AAAA,kBACP,OAAO;AAAA,gBAAA,CACR;AAAA,cAAA;AAGI,qBAAA;AAAA,YAAA,GACN,CAAE,CAAA;AAAA,UACP;AAAA,QAAA;AAAA,MACF;AAGK,aAAA,EAAE,MAAM,GAAG;AAAA,IACpB;AAAA,IACA,MAAM,WAAW,SAAS;AAAA,EAAA,CAC3B;AAED,MAAI,CAAC,SAAS,MAAM,SAAS,mBAAmB,CAAC,WAAW;AAElD,YAAA;AAAA,MACN;AAAA,IACF;AAEmB,uBAAA;AAAA,MACjB,SAAS,cAAc;AAAA,QACrB,IAAI;AAAA,QACJ,gBAAgB;AAAA,MAAA,CACjB;AAAA,MACD,MAAM;AAAA,IAAA,CACP;AAEM,WAAA;AAAA,EAAA;AAIP,SAAAE,2BAAA,IAACC,aAAM,MAAA,SAAN,EACC,UAAAC,2BAAA;AAAA,IAACC,YAAA;AAAA,IAAA;AAAA,MACC,QAAO;AAAA,MACP,eAAe;AAAA,MACf,kBAAkB;AAAA,MAClB,UAAU,CAAC,SAAS;AAClB,iBAAS,MAAM,IAAI;AACX,gBAAA;AAAA,MACV;AAAA,MAEA,UAAA;AAAA,QAAAH,+BAACC,aAAAA,MAAM,QAAN,EACC,UAACC,gCAAAE,aAAAA,MAAA,EAAK,KAAK,GACT,UAAA;AAAA,UAACJ,2BAAAA,IAAAK,cAAAA,eAAA,EAAc,MAAM,UAAU,KAAM,CAAA;AAAA,UACrCL,2BAAAA,IAACC,aAAM,MAAA,OAAN,EACE,UAAA;AAAA,YACC;AAAA,cACE,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAClB;AAAA,YACA,EAAE,WAAWK,MAAAA,WAAW,MAAM,IAAI,EAAE;AAAA,UAAA,EAExC,CAAA;AAAA,QAAA,EAAA,CACF,EACF,CAAA;AAAA,QACAN,2BAAAA,IAACC,mBAAM,MAAN,EACC,yCAACM,aAAK,KAAA,MAAL,EAAU,KAAK,GACb,UAAA;AAAA,UACC;AAAA,YACE,MAAM;AAAA,YACN,OAAO,cAAc;AAAA,cACnB,IAAIC,qBAAe,2CAA2C;AAAA,cAC9D,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,OAAO,cAAc;AAAA,cACnB,IAAIA,qBAAe,iDAAiD;AAAA,cACpE,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,OAAO,cAAc;AAAA,cACnB,IAAIA,qBAAe,iDAAiD;AAAA,cACpE,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,OAAO,cAAc;AAAA,cACnB,IAAIA,qBAAe,8CAA8C;AAAA,cACjE,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,OAAO,cAAc;AAAA,cACnB,IAAIA,qBAAe,+CAA+C;AAAA,cAClE,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM,cAAc;AAAA,cAClB,IAAIA,MAAA;AAAA,gBACF;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM;AAAA,YACN,SAAS;AAAA,YACT,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,OAAO,cAAc;AAAA,cACnB,IAAIA,qBAAe,6CAA6C;AAAA,cAChE,gBAAgB;AAAA,YAAA,CACjB;AAAA,YACD,MAAM;AAAA,YACN,SAAS;AAAA,cACP,EAAE,OAAO,KAAK,OAAO,MAAM;AAAA,cAC3B,EAAE,OAAO,KAAK,OAAO,MAAM;AAAA,cAC3B,EAAE,OAAO,KAAK,OAAO,MAAM;AAAA,cAC3B,EAAE,OAAO,MAAM,OAAO,OAAO;AAAA,YAC/B;AAAA,YACA,MAAM;AAAA,UAAA;AAAA,QACR,EAEC,OAAO,iCAAiC,UAAU,IAAI,CAAC,EACvD,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,MACdR,2BAAAA,IAAAO,aAAAA,KAAK,MAAL,EAA2B,KAAK,MAAM,WAAU,UAAS,YAAW,WACnE,UAAAP,2BAAA,IAACS,YAAe,eAAA,EAAA,GAAG,OAAO,EADZ,GAAA,MAAM,IAEtB,CACD,EACL,CAAA,GACF;AAAA,QACAP,2BAAAA,KAACD,aAAM,MAAA,QAAN,EACC,UAAA;AAAA,UAAAD,2BAAA,IAACC,aAAM,MAAA,OAAN,EACC,UAAAD,+BAACU,aAAAA,UAAO,SAAQ,YACb,UAAc,cAAA,EAAE,IAAI,gCAAgC,gBAAgB,SAAU,CAAA,EACjF,CAAA,GACF;AAAA,UACAV,2BAAAA,IAACU,aAAO,QAAA,EAAA,MAAK,UACV,UAAA,cAAc,EAAE,IAAI,iBAAiB,gBAAgB,SAAU,CAAA,EAClE,CAAA;AAAA,QAAA,EACF,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA,GAEJ;AAEJ;AAOA,MAAM,mCAAmC,CAAC,SAAgC,CAAC,UAAsB;AAC/F,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AACH,aAAO,MAAM,SAAS,UAAU,MAAM,SAAS;AAAA,IACjD,KAAK;AAAA,IACL,KAAK;AACH,aAAO,MAAM,SAAS,iBAAiB,MAAM,SAAS;AAAA,IACxD,KAAK;AAAA,IACL,KAAK;AACH,aAAO,MAAM,SAAS,WAAW,MAAM,SAAS;AAAA,IAClD,KAAK;AACH,aAAO,MAAM,SAAS,iBAAiB,MAAM,SAAS,eAAe,MAAM,SAAS;AAAA,IACtF,KAAK;AACI,aAAA;AAAA,IACT;AACE,aAAO,MAAM,SAAS;AAAA,EAAA;AAE5B;ACzMA,MAAM,SAAS,CAAC,EAAE,YAAY,YAAY,YAAY,YAAY,CAAA,QAAsB;AAChF,QAAA,EAAE,cAAc,IAAIhB,kBAAQ;AAElC,QAAM,SAASiB,YAAA;AAAA,IACb;AAAA,IACA,CAAC,UAAU,MAAM,OAAO,UAAU,CAAA;AAAA,EACpC;AACA,QAAM,WAAWA,YAAAA,QAAQ,UAAU,CAAC,UAAU,MAAM,QAAQ;AAC5D,QAAM,cAAcA,YAAAA,QAAQ,UAAU,CAAC,UAAU,MAAM,WAAW;AAClE,QAAM,iBAAiBA,YAAAA,QAAQ,UAAU,CAAC,UAAU,MAAM,cAAc;AAExE,QAAM,iBAAiB,OAAO,IAAI,CAAC,QAAQ,IAAI,SAAS,IAAI,CAAC,UAAU,MAAM,IAAI,CAAC,EAAE,KAAK;AAOnF,QAAA,kBAAkB,OAAO,QAAQ,SAAS,EAAE,OAAgB,CAAC,KAAK,YAAY;AAClF,UAAM,CAAC,MAAM,EAAE,SAAS,GAAG,MAAA,CAAO,IAAI;AAEtC,QAAI,CAAC,eAAe,SAAS,IAAI,KAAK,YAAY,MAAM;AAChD,YAAA,OAAO,WAAW,IAAI,GAAG;AAC/B,YAAM,OAAO,OAAO,WAAW,IAAI,IAAI;AAEvC,UAAI,KAAK;AAAA,QACP,GAAG;AAAA,QACH,OAAO,MAAM,SAAS;AAAA,QACtB;AAAA,QACA;AAAA,MAAA,CACD;AAAA,IAAA;AAGI,WAAA;AAAA,EACT,GAAG,EAAE;AAEC,QAAA,kBAA6C,CACjD,CAAC,aAAa,aAAa,GAC3B,CAAC,iBAAiB,iBAAiB,MAChC;AAMG,UAAA,YAAY,gBAAgB,MAAM;AAKlC,UAAA,CAAC,KAAK,IAAI,UAAU,eAAe,EAAE,SAAS,OAAO,mBAAmB,CAAC;AAE/E,QAAI,CAAC,SAAS,MAAM,SAAS,iBAAiB;AAC5C;AAAA,IAAA;AAGI,UAAA,SAAS,UAAU,WAAW,EAAE;AACtC,UAAM,CAAC,WAAW,IAAI,qBAAqB,QAAQ,GAAG,mBAAmB,aAAa;AAY/E,WAAA,OAAO,eAAe,GAAG,EAAE,GAAG,OAAO,cAAc,aAAa;AAEvE,QAAI,UAAU,WAAW,EAAE,SAAS,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,MAAM,CAAC,IAAI,IAAI;AAClF,YAAM,mBAAmB;AAAA,QACvB,UAAU,WAAW,EAAE,SAAS,OAAO,CAACC,WAAUA,OAAM,SAAS,eAAe;AAAA,MAClF;AAEA,YAAM,UAAU;AAAA,QACd;AAAA,QACA,iBAAiB;AAAA,QACjB;AAAA,QACA;AAAA,MACF;AAEU,gBAAA;AAAA,QACR;AAAA,QACA;AAAA,QACA,GAAG,iBAAiB,IAAI,CAAC,KAAKC,YAAW;AAAA,UACvC,cAAc,QAAQA,MAAK;AAAA,UAC3B,UAAU;AAAA,QAAA,EACV;AAAA,MACJ;AAAA,IAAA;AAUF,UAAM,uBAAuB,UAC1B,IAAI,CAAC,SAAS;AAAA,MACb,GAAG;AAAA,MACH,UAAU,IAAI,SAAS,OAAO,CAACD,WAAUA,OAAM,SAAS,eAAe;AAAA,IACvE,EAAA,EACD,OAAO,CAAC,QAAQ,IAAI,SAAS,SAAS,CAAC,EACvC,IAAI,CAAC,QAAQ;AACN,YAAA,kBAAkB,IAAI,SAAS,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,MAAM,CAAC;AAE7E,UAAI,kBAAkB,IAAI;AAClB,cAAA,CAAC,SAAS,IAAIE,mBAAA;AAAA,UAClB,IAAI,SAAS,GAAG,EAAE,GAAG;AAAA,UACrB;AAAA,UACA;AAAA,QACF;AAEO,eAAA;AAAA,UACL,GAAG;AAAA,UACH,UAAU;AAAA,YACR,GAAG,IAAI;AAAA,YACP;AAAA,cACE,MAAM;AAAA,cACN,MAAM,KAAK;AAAA,cACX,cAAc;AAAA,YAAA;AAAA,UAChB;AAAA,QAEJ;AAAA,MAAA;AAGK,aAAA;AAAA,IAAA,CACR;AAEH,aAAS,UAAU,oBAAoB;AAAA,EACzC;AAEA,QAAM,oBACJ,CAAC,UAAkB,eACnB,MAAM;AACJ,QAAI,OAAO,QAAQ,EAAE,SAAS,WAAW,GAAG;AAC1C,qBAAe,UAAU,QAAQ;AAAA,IAAA,OAC5B;AACI,eAAA,UAAU,QAAQ,aAAa;AAAA,QACtC,GAAG,OAAO,QAAQ,EAAE,SAAS,MAAM,GAAG,UAAU;AAAA,QAChD,GAAG,OAAO,QAAQ,EAAE,SAAS,MAAM,aAAa,CAAC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAEL;AAEI,QAAA,iBAAiB,CAAC,UAAiB,MAAM;AAC7C,gBAAY,UAAU,EAAE,UAAU,CAAC,KAAK,GAAG;AAAA,EAC7C;AAGE,SAAAZ,gCAACE,aAAAA,QAAK,YAAY,GAAG,WAAU,UAAS,YAAW,WAAU,KAAK,GAChE,UAAA;AAAA,IAAAF,gCAACE,aAAAA,QAAK,YAAW,cAAa,WAAU,UAAS,gBAAe,iBAC9D,UAAA;AAAA,MAACJ,2BAAA,IAAAe,aAAA,YAAA,EAAW,YAAW,QACpB,UAAc,cAAA;AAAA,QACb,IAAIP,qBAAe,iCAAiC;AAAA,QACpD,gBAAgB;AAAA,MACjB,CAAA,GACH;AAAA,qCACCO,aAAAA,YAAW,EAAA,SAAQ,MAAK,WAAU,cAChC,UAAc,cAAA;AAAA,QACb,IAAI;AAAA,QACJ,gBAAgB;AAAA,MAAA,CACjB,EACH,CAAA;AAAA,IAAA,GACF;AAAA,mCACCC,aAAI,KAAA,EAAA,SAAS,GAAG,WAAS,MAAC,aAAY,UAAS,aAAY,OAAM,aAAY,cAC5E,0CAACZ,aAAK,MAAA,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;AAAA,MAAA,OAAO,IAAI,CAAC,KAAK,aACfJ,2BAAA,IAAAO,aAAA,KAAK,MAAL,EAAU,KAAK,GACb,UAAI,IAAA,SAAS,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,GAAS,eACpCP,2BAAAA,IAAAO,aAAAA,KAAK,MAAL,EAA2B,KAAK,MAAM,WAAU,UAAS,YAAW,WACnE,UAAAP,2BAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW,WAAW,MAAM,IAAI;AAAA,UAChC;AAAA,UACA,OAAO,CAAC,UAAU,UAAU;AAAA,UAC5B,MAAM,UAAU,QAAQ,aAAa,UAAU;AAAA,UAC/C,aAAa;AAAA,UACb,eAAe,kBAAkB,UAAU,UAAU;AAAA,QAAA;AAAA,MAAA,KAPzC,MAAM,IAStB,CACD,EAZqB,GAAA,IAAI,YAa5B,CACD;AAAA,MACDE,2BAAAA,KAACe,aAAK,KAAA,MAAL,EACC,UAAA;AAAA,QAAAjB,2BAAA;AAAA,UAACiB,aAAAA,KAAK;AAAA,UAAL;AAAA,YACC,0CAAYC,MAAK,MAAA,EAAA;AAAA,YACjB,SAAS;AAAA,YACT,UAAU,gBAAgB,WAAW;AAAA,YACrC,WAAS;AAAA,YACT,SAAQ;AAAA,YAEP,UAAc,cAAA;AAAA,cACb,IAAIV,qBAAe,kCAAkC;AAAA,cACrD,gBAAgB;AAAA,YACjB,CAAA;AAAA,UAAA;AAAA,QACH;AAAA,QACAR,+BAACiB,aAAAA,KAAK,SAAL,EACE,0BAAgB,IAAI,CAAC,UACnBjB,2BAAA,IAAAiB,kBAAK,MAAL,EAA2B,UAAU,eAAe,KAAK,GACvD,gBAAM,SADO,MAAM,IAEtB,CACD,EACH,CAAA;AAAA,MAAA,EACF,CAAA;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,EAAA,GACF;AAEJ;AAQA,MAAM,uBAAuB,CAC3B,OACA,OACA,SACA,WACG;AACG,QAAA,WAAW,UAAU,SAAS,MAAM,SAAS,CAAC,GAAG,eAAe,MAAM,MAAM,GAAG;AAC/E,QAAA,SAAS,UAAU,SAAS,MAAM,MAAM,GAAG,eAAe,MAAM,SAAS,CAAC,GAAG;AAE5E,SAAAH,wCAAyB,UAAU,QAAQ,KAAK;AACzD;AAOA,MAAM,aAAa,CAAC,UAAuB;AACzC,QAAM,SAA6B,CAAC;AACpC,MAAI,OAAoB,CAAC;AAEnB,QAAA,OAAO,CAAC,KAAK,UAAU;AACvB,QAAA,MAAM,MAAM,OAAO,IAAI;AACzB,aAAO,KAAK,IAAI;AAChB,aAAO,CAAC,KAAK;AACb,aAAO,MAAM;AAAA,IAAA,OACR;AACL,WAAK,KAAK,KAAK;AACf,aAAO,MAAM,MAAM;AAAA,IAAA;AAAA,KAEpB,CAAC;AAEA,MAAA,KAAK,SAAS,GAAG;AACnB,WAAO,KAAK,IAAI;AAAA,EAAA;AAGX,SAAA;AACT;AAaA,MAAM,kBAAkB;AAMxB,MAAM,QAAQ,CAAC,EAAE,WAAW,YAAY,MAAM,OAAAD,SAAO,aAAa,oBAAgC;AAChG,QAAM,CAAC,aAAa,cAAc,IAAIM,iBAAM,SAAS,KAAK;AACpD,QAAA,EAAE,cAAc,IAAIzB,kBAAQ;AAElC,QAAM,EAAE,MAAA,IAAUE,YAAA,SAAoB,IAAI;AAEpC,QAAA,CAAC,EAAE,WAAc,GAAA,WAAW,SAAS,SAAS,cAAc,IAAIwB,eAAA,eAEpE,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,MAAMC,eAAU,UAAA;AAAA,IAChB,MAAM,EAAER,OAAAA,SAAO,OAAO,OAAO,OAAO,KAAK;AAAA,IAAA,OACzCA;AAAAA,IACA,YAAY;AAAA,EAAA,CACb;AAEDM,mBAAM,UAAU,MAAM;AACpB,mBAAeG,qBAAAA,cAAc,GAAG,EAAE,sBAAsB,OAAO;AAAA,EAAA,GAC9D,CAAC,cAAc,CAAC;AAEb,QAAA,eAAeC,aAAAA,gBAAiC,SAAS,SAAS;AAElE,QAAA,oBAAgE,CAAC,MAAM;AAC3E,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,kBAAc,CAAC;AAAA,EACjB;AAEM,QAAA,kBAA8D,CAAC,MAAM;AACzE,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,mBAAe,IAAI;AAAA,EACrB;AAEM,QAAA,WAAWA,aAAAA,gBAAiC,SAAS,SAAS;AAEpE,MAAI,CAAC,OAAO;AACH,WAAA;AAAA,EAAA;AAGL,MAAA,MAAM,SAAS,iBAAiB;AAClC,WAAQvB,2BAAA,IAAAI,aAAA,MAAA,EAAK,KAAI,QAAO,QAAO,QAAO,OAAO,EAAE,SAAS,EAAK,GAAA,KAAK,SAAU,CAAA;AAAA,EAAA;AAG9E,yCACGH,aAAM,MAAA,MAAN,EAAW,MAAM,aAAa,cAAc,gBAC3C,UAAA;AAAA,IAAAC,2BAAA;AAAA,MAACE,aAAA;AAAA,MAAA;AAAA,QACC,aAAY;AAAA,QACZ,YAAW;AAAA,QACX,WAAS;AAAA,QACT,OAAO,EAAE,SAAS,aAAa,MAAM,EAAE;AAAA,QACvC,KAAK;AAAA,QACL,KAAK;AAAA,QACL,QAAO;AAAA,QACP,SAAS,MAAM;AACb,yBAAe,IAAI;AAAA,QACrB;AAAA,QAEA,UAAA;AAAA,UAAAJ,2BAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,KAAI;AAAA,cACJ,aAAa;AAAA,cACb,OAAO;AAAA,gBACL;AAAA,kBACE,IAAIQ,qBAAe,qCAAqC;AAAA,kBACxD,gBAAgB;AAAA,gBAClB;AAAA,gBACA,EAAE,MAAM,MAAM,MAAM;AAAA,cACtB;AAAA,cACA,SAAS,CAAC,MAAM,EAAE,gBAAgB;AAAA,cAClC,KAAK;AAAA,cAEL,yCAACgB,MAAAA,MAAK,CAAA,CAAA;AAAA,YAAA;AAAA,UACR;AAAA,UACAtB,2BAAAA,KAACE,qBAAK,WAAU,UAAS,YAAW,cAAa,MAAM,GAAG,UAAS,UACjE,UAAA;AAAA,YAAAF,gCAACE,aAAAA,QAAK,KAAK,GAAG,gBAAe,iBAAgB,OAAM,QACjD,UAAA;AAAA,cAAAJ,+BAACe,aAAAA,cAAW,UAAQ,MAAC,YAAW,QAC7B,gBAAM,OACT;AAAA,8CACCX,aAAAA,MACC,EAAA,UAAA;AAAA,gBAAAJ,2BAAA;AAAA,kBAACyB,aAAA;AAAA,kBAAA;AAAA,oBACC,MAAK;AAAA,oBACL,SAAQ;AAAA,oBACR,YAAW;AAAA,oBACX,SAAS;AAAA,oBACT,aAAa;AAAA,oBACb,OAAO;AAAA,sBACL;AAAA,wBACE,IAAIjB,qBAAe,qCAAqC;AAAA,wBACxD,gBAAgB;AAAA,sBAClB;AAAA,sBACA,EAAE,MAAM,MAAM,MAAM;AAAA,oBACtB;AAAA,oBAEA,yCAACkB,MAAAA,QAAO,CAAA,CAAA;AAAA,kBAAA;AAAA,gBACV;AAAA,gBACA1B,2BAAA;AAAA,kBAACyB,aAAA;AAAA,kBAAA;AAAA,oBACC,MAAK;AAAA,oBACL,SAAQ;AAAA,oBACR,SAAS;AAAA,oBACT,YAAW;AAAA,oBACX,aAAa;AAAA,oBACb,OAAO;AAAA,sBACL;AAAA,wBACE,IAAIjB,qBAAe,uCAAuC;AAAA,wBAC1D,gBAAgB;AAAA,sBAClB;AAAA,sBACA,EAAE,MAAM,MAAM,MAAM;AAAA,oBACtB;AAAA,oBAEA,yCAACmB,MAAAA,OAAM,CAAA,CAAA;AAAA,kBAAA;AAAA,gBAAA;AAAA,cACT,EACF,CAAA;AAAA,YAAA,GACF;AAAA,YACC,WAAW,SAAS,cACnBzB,2BAAA;AAAA,cAACE,aAAA;AAAA,cAAA;AAAA,gBACC,YAAY;AAAA,gBACZ,cAAc;AAAA,gBACd,eAAe;AAAA,gBACf,aAAa;AAAA,gBACb,YAAW;AAAA,gBACX,WAAU;AAAA,gBACV,KAAK;AAAA,gBACL,OAAM;AAAA,gBAEN,UAAA;AAAA,kBAACJ,2BAAAA,IAAAO,aAAAA,KAAK,MAAL,EAAU,KAAK,GAAG,OAAM,QACtB,UAAW,WAAA,UAAU,SAAS,EAAE,OAAO;AAAA,oBAAI,CAAC,QAC3C,IAAI,IAAI,CAAC,EAAE,MAAM,GAAG,YACjBP,+BAAAO,aAAAA,KAAK,MAAL,EAA2B,KAAK,MAAM,WAAU,UAAS,YAAW,WACnE,UAAAP,2BAAA;AAAA,sBAACI,aAAA;AAAA,sBAAA;AAAA,wBACC,YAAW;AAAA,wBACX,YAAW;AAAA,wBACX,YAAY;AAAA,wBACZ,eAAe;AAAA,wBACf,aAAa;AAAA,wBACb,cAAc;AAAA,wBACd,WAAS;AAAA,wBACT,aAAY;AAAA,wBAEZ,UAACJ,2BAAAA,IAAAe,aAAAA,YAAA,EAAW,WAAU,cAAc,gBAAM,KAAK,CAAA;AAAA,sBAAA;AAAA,oBAAA,EACjD,GAZc,MAAM,IAatB,CACD;AAAA,kBAAA,GAEL;AAAA,kBACAf,2BAAA;AAAA,oBAAC4B,aAAA;AAAA,oBAAA;AAAA,sBAEC,SAAS,CAAC,MAAM,EAAE,gBAAgB;AAAA,sBAClC,0CAAYC,MAAI,KAAA,EAAA;AAAA,sBAChB,KAAKC,eAAA;AAAA,sBACL,IAAI,iBAAiB,UAAU,SAAS;AAAA,sBAEvC,UAAc,cAAA;AAAA,wBACb,IAAItB,qBAAe,4CAA4C;AAAA,wBAC/D,gBAAgB;AAAA,sBACjB,CAAA;AAAA,oBAAA;AAAA,kBAAA;AAAA,gBACH;AAAA,cAAA;AAAA,YAAA,IAEA;AAAA,YACH,WAAW,SAAS,gBACnBR,2BAAA;AAAA,cAACI,aAAA;AAAA,cAAA;AAAA,gBACC,YAAY;AAAA,gBACZ,cAAc;AAAA,gBACd,eAAe;AAAA,gBACf,aAAa;AAAA,gBACb,YAAW;AAAA,gBACX,KAAK;AAAA,gBACL,OAAM;AAAA,gBAEL,UAAW,WAAA,WAAW,IAAI,CAAC,QAC1BF,2BAAA;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBAEC,SAAS,CAAC,MAAM,EAAE,gBAAgB;AAAA,oBAElC,IAAI,iBAAiB,GAAG;AAAA,oBAExB,UAAA;AAAA,sBAAAF,+BAAC+B,cAAAA,iBAAc,MAAM,WAAW,GAAG,EAAE,SAAS,MAAM;AAAA,sBACnD/B,2BAAAA,IAAAe,aAAAA,YAAA,EAAW,UAAU,GAAG,WAAU,cAAa,YAAW,QACxD,UAAW,WAAA,GAAG,EAAE,SAAS,YAC5B,CAAA;AAAA,oBAAA;AAAA,kBAAA;AAAA,kBANK;AAAA,gBAQR,CAAA;AAAA,cAAA;AAAA,YAAA,IAED;AAAA,UAAA,EACN,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,IACC,MAAM,SAAS,mBACbf,2BAAAA,IAAA,eAAA,EAAc,WAAsB,MAAY,SAAS,MAAM,eAAe,KAAK,EAAG,CAAA;AAAA,EAAA,GAE3F;AAEJ;AAEA,MAAM,aAAagC,wBAAoCP,uBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BASrC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASlE,MAAM,gBAAgBO,wBAAOF,sBAAO;AAAA;AAAA;AAAA;AAAA,SAI3B,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA,aAC1B,CAAC,UAAU,MAAM,MAAM,OAAO,CAAC,CAAC;AAAA,sBACvB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,gBAC5C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,QAAQ;AAAA;AAAA,mBAEjC,CAAC,EAAE,YAAY,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,MAK9C,CAAC,EAAE,YAAY;AAAA,0BACK,MAAM,OAAO,UAAU;AAAA,sBAC3B,MAAM,OAAO,UAAU;AAAA;AAAA,QAErCf,uBAAU;AAAA,mBACC,MAAM,OAAO,UAAU;AAAA;AAAA,KAErC;AAAA;AAAA;AAAA;AAAA,oBAIe,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,eAC3C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA,kBAInC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;ACtfxD,MAAM,oBAAoB,CAAC;AAAA,EACzB;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR;AACF,MAA8B;AAC5B,QAAM,EAAE,YAAY,UAAU,QAAQ,UAAc,IAAA;AAE9C,QAAA,EAAE,cAAc,IAAIrB,kBAAQ;AAE5B,QAAA,gBAAuCyB,iBAAM,QAAQ,MAAM;AAC/D,UAAM,kBAAkBc,cAAA;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEO,WAAA;AAAA,MACL,QAAQ,gBAAgB,MAAM;AAAA,MAC9B;AAAA,IACF;AAAA,EAAA,GACC,CAAC,QAAQ,QAAQ,CAAC;AAGnB,SAAAjC,2BAAAA,IAACkC,YAAAA,QAAQ,MAAR,EACC,UAAAlC,2BAAA,IAACmC,mBACC,EAAA,UAAAjC,2BAAA,KAACC,YAAK,MAAA,EAAA,eAA8B,UAAoB,QAAO,OAC7D,UAAA;AAAA,IAAAH,2BAAA,IAAC,QAAO,EAAA,MAAM,SAAS,eAAe,IAAI;AAAA,IAC1CA,2BAAAA,IAACkC,YAAQ,QAAA,SAAR,EACC,UAAAhC,2BAAA;AAAA,MAACE,aAAA;AAAA,MAAA;AAAA,QACC,YAAW;AAAA,QACX,YAAW;AAAA,QACX,WAAU;AAAA,QACV,KAAK;AAAA,QACL,WAAS;AAAA,QACT,QAAO;AAAA,QACP,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,aAAa;AAAA,QACb,cAAc;AAAA,QAEd,UAAA;AAAA,UAAAJ,+BAACe,aAAAA,YAAW,EAAA,SAAQ,SAAQ,KAAI,MAC7B,UAAc,cAAA;AAAA,YACb,IAAIP,qBAAe,iCAAiC;AAAA,YACpD,gBAAgB;AAAA,UACjB,CAAA,GACH;AAAA,UACAN,2BAAAA,KAACK,aAAK,KAAA,MAAL,EACC,UAAA;AAAA,YAACP,2BAAAA,IAAAO,aAAAA,KAAK,MAAL,EAAU,KAAK,GAAG,GAAG,IAAI,WAAU,UAAS,YAAW,WACtD,UAAAP,2BAAA;AAAA,cAACS,YAAA;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAO,cAAc;AAAA,kBACnB,IAAID,qBAAe,iDAAiD;AAAA,kBACpE,gBAAgB;AAAA,gBAAA,CACjB;AAAA,gBACD,MAAM,cAAc;AAAA,kBAClB,IAAIA,MAAA;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,gBAAgB;AAAA,gBAAA,CACjB;AAAA,gBACD,MAAK;AAAA,gBACL,SAAS,OAAO,QAAQ,UAAU,EAAE,OAElC,CAAC,KAAK,CAAC,KAAK,SAAS,MAAM;AAC3B,sBAAI,CAAC,WAAW;AACP,2BAAA;AAAA,kBAAA;AAQT,sBAAI,CAACT,MAAAA,0CAA0C,SAAS,UAAU,IAAI,GAAG;AACvE,wBAAI,KAAK;AAAA,sBACP,OAAO;AAAA,sBACP,OAAO;AAAA,oBAAA,CACR;AAAA,kBAAA;AAGI,yBAAA;AAAA,gBAAA,GACN,CAAE,CAAA;AAAA,cAAA;AAAA,YAAA,GAET;AAAA,YACAC,2BAAA;AAAA,cAACO,aAAAA,KAAK;AAAA,cAAL;AAAA,gBACC,YAAY;AAAA,gBACZ,eAAe;AAAA,gBACf,KAAK;AAAA,gBACL,GAAG;AAAA,gBACH,WAAU;AAAA,gBACV,YAAW;AAAA,gBAEX,yCAAC6B,aAAAA,SAAQ,CAAA,CAAA;AAAA,cAAA;AAAA,YACX;AAAA,2CACC7B,aAAAA,KAAK,MAAL,EAAU,KAAK,IAAI,GAAG,IAAI,WAAU,UAAS,YAAW,WACvD,UAACP,+BAAAe,aAAAA,YAAA,EAAW,SAAQ,SAAQ,KAAI,MAC7B,UAAc,cAAA;AAAA,cACb,IAAIP,qBAAe,6BAA6B;AAAA,cAChD,gBAAgB;AAAA,YAAA,CACjB,GACH,EACF,CAAA;AAAA,YACAR,2BAAAA,IAACO,aAAAA,KAAK,MAAL,EAAU,KAAK,IAAI,GAAG,IAAI,WAAU,UAAS,YAAW,WACvD,UAAAP,2BAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cAAA;AAAA,YAAA,EAEJ,CAAA;AAAA,UAAA,EACF,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAAA,EAEJ,CAAA;AAAA,EAAA,EACF,CAAA,EACF,CAAA,GACF;AAEJ;AAMA,MAAM,gBAAgB,CAAC,WACrB,OAAO,KAAK,CAAC;AAMf,MAAM,+BAA+B,CAAC,WACpC,OAAO;AAAA,EAAI,CAAC,QACV,IAAI,IAAI,CAAC,WAAW;AAAA,IAClB,GAAG;AAAA,IACH,WAAW,MAAM,WAAW;AAAA,EAAA,EAC5B;AACJ;AAMF,MAAM,kBAAkB,CACtB,WAC4F;AAC5F,SAAO,OAAO;AAAA,IAAI,CAAC,QACjB,IAAI,IAAI,CAAC,EAAE,OAAO,UAAU,MAAM,aAAa,MAAM,MAAM,iBAAiB;AAAA,MAC1E;AAAA,MACA,UAAU,CAAC;AAAA,MACX,aAAa;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc;AAAA,IAAA,EACd;AAAA,EACJ;AACF;AAOA,MAAM,sBAAsB,CAC1B,WAC+D;AAAA,EAC/D,GAAG,OAAO,IAAI,CAAC,QAAQ;AACf,UAAA,kBAAkB,IAAI,OAAO,CAAC,KAAK,UAAU,MAAM,MAAM,MAAM,CAAC;AAEtE,QAAI,kBAAkB,IAAI;AACjB,aAAA;AAAA,QACL,GAAG;AAAA,QACH;AAAA,UACE,MAAM;AAAA,UACN,MAAM,KAAK;AAAA,UACX,cAAc;AAAA,QAAA;AAAA,MAElB;AAAA,IAAA;AAGK,WAAA;AAAA,EACR,CAAA;AACH;AAOA,MAAM,qBAAqB,CACzB,WACoC;AACpC,QAAM,OAAOqC,mBAAAA,qBAAqB,QAAW,QAAW,OAAO,MAAM;AAErE,SAAO,OAAO,IAAI,CAAC,KAAK,aAAa;AACnC,UAAM,YAAYA,mBAAAA,qBAAqB,QAAW,QAAW,IAAI,MAAM;AAEhE,WAAA;AAAA,MACL,cAAc,KAAK,QAAQ;AAAA,MAC3B,UAAU,IAAI,IAAI,CAAC,OAAO,eAAe;AAChC,eAAA;AAAA,UACL,GAAG;AAAA,UACH,cAAc,UAAU,UAAU;AAAA,QACpC;AAAA,MACD,CAAA;AAAA,IACH;AAAA,EAAA,CACD;AACH;AAUA,MAAM,SAAS,CAAC,EAAE,WAAwB;AAClC,QAAA,EAAE,cAAc,IAAI3C,kBAAQ;AAClC,QAAM,WAAWiB,YAAAA,QAAQ,UAAU,CAAC,UAAU,MAAM,QAAQ;AAC5D,QAAM,eAAeA,YAAAA,QAAQ,UAAU,CAAC,UAAU,MAAM,YAAY;AAGlE,SAAAX,2BAAA;AAAA,IAACkC,YAAAA,QAAQ;AAAA,IAAR;AAAA,MACC,OAAO;AAAA,QACL;AAAA,UACE,IAAI1B,qBAAe,mDAAmD;AAAA,UACtE,gBAAgB;AAAA,QAClB;AAAA,QACA,EAAE,MAAMF,MAAW,WAAA,IAAI,EAAE;AAAA,MAC3B;AAAA,MACA,UAAU,cAAc;AAAA,QACtB,IAAIE,qBAAe,uEAAuE;AAAA,QAC1F,gBAAgB;AAAA,MAAA,CACjB;AAAA,MACD,iDAAmB8B,YAAW,YAAA,EAAA;AAAA,MAC9B,eACGtC,2BAAA,IAAAU,qBAAA,EAAO,UAAU,CAAC,UAAU,SAAS,cAAc,MAAK,UACtD,wBAAc,EAAE,IAAI,eAAe,gBAAgB,OAAA,CAAQ,EAC9D,CAAA;AAAA,IAAA;AAAA,EAEJ;AAEJ;;;"}