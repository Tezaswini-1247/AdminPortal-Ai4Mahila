{"version":3,"file":"History-Cs6XM6EU.js","sources":["../../admin/src/history/components/VersionInputRenderer.tsx","../../admin/src/history/components/VersionContent.tsx","../../admin/src/history/services/historyVersion.ts","../../admin/src/history/components/VersionHeader.tsx","../../admin/src/history/components/VersionsList.tsx","../../admin/src/history/pages/History.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {\r\n  useStrapiApp,\r\n  useForm,\r\n  InputRenderer as FormInputRenderer,\r\n  useField,\r\n  Form,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Alert, Box, Field, Flex, Link, Tooltip, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { COLLECTION_TYPES } from '../../constants/collections';\r\nimport { useDocumentRBAC } from '../../features/DocumentRBAC';\r\nimport { useDoc } from '../../hooks/useDocument';\r\nimport { useDocLayout } from '../../hooks/useDocumentLayout';\r\nimport { useLazyComponents } from '../../hooks/useLazyComponents';\r\nimport { useTypedSelector } from '../../modules/hooks';\r\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\r\nimport { BlocksInput } from '../../pages/EditView/components/FormInputs/BlocksInput/BlocksInput';\r\nimport { ComponentInput } from '../../pages/EditView/components/FormInputs/Component/Input';\r\nimport {\r\n  DynamicZone,\r\n  useDynamicZone,\r\n} from '../../pages/EditView/components/FormInputs/DynamicZone/Field';\r\nimport { NotAllowedInput } from '../../pages/EditView/components/FormInputs/NotAllowed';\r\nimport { UIDInput } from '../../pages/EditView/components/FormInputs/UID';\r\nimport { Wysiwyg } from '../../pages/EditView/components/FormInputs/Wysiwyg/Field';\r\nimport { useFieldHint } from '../../pages/EditView/components/InputRenderer';\r\nimport { getRelationLabel } from '../../utils/relations';\r\nimport { useHistoryContext } from '../pages/History';\r\n\r\nimport { getRemaingFieldsLayout } from './VersionContent';\r\n\r\nimport type { EditFieldLayout } from '../../hooks/useDocumentLayout';\r\nimport type { RelationsFieldProps } from '../../pages/EditView/components/FormInputs/Relations';\r\nimport type { RelationResult } from '../../services/relations';\r\nimport type { Schema } from '@strapi/types';\r\nimport type { DistributiveOmit } from 'react-redux';\r\n\r\nconst StyledAlert = styled(Alert).attrs({ closeLabel: 'Close', onClose: () => {}, shadow: 'none' })`\r\n  button {\r\n    display: none;\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CustomRelationInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst LinkEllipsis = styled(Link)`\r\n  display: block;\r\n\r\n  & > span {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst CustomRelationInput = (props: RelationsFieldProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const field = useField<\r\n    { results: RelationResult[]; meta: { missingCount: number } } | RelationResult[]\r\n  >(props.name);\r\n\r\n  /**\r\n   * Ideally the server would return the correct shape, however, for admin user relations\r\n   * it sanitizes everything out when it finds an object for the relation value.\r\n   */\r\n  let formattedFieldValue;\r\n  if (field) {\r\n    formattedFieldValue = Array.isArray(field.value)\r\n      ? { results: field.value, meta: { missingCount: 0 } }\r\n      : field.value;\r\n  }\r\n\r\n  if (\r\n    !formattedFieldValue ||\r\n    (formattedFieldValue.results.length === 0 && formattedFieldValue.meta.missingCount === 0)\r\n  ) {\r\n    return (\r\n      <>\r\n        <Field.Label action={props.labelAction}>{props.label}</Field.Label>\r\n        <Box marginTop={1}>\r\n          {/* @ts-expect-error – we dont need closeLabel */}\r\n          <StyledAlert variant=\"default\">\r\n            {formatMessage({\r\n              id: 'content-manager.history.content.no-relations',\r\n              defaultMessage: 'No relations.',\r\n            })}\r\n          </StyledAlert>\r\n        </Box>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const { results, meta } = formattedFieldValue;\r\n\r\n  return (\r\n    <Box>\r\n      <Field.Label>{props.label}</Field.Label>\r\n      {results.length > 0 && (\r\n        <Flex direction=\"column\" gap={2} marginTop={1} alignItems=\"stretch\">\r\n          {results.map((relationData) => {\r\n            // @ts-expect-error - targetModel does exist on the attribute. But it's not typed.\r\n            const { targetModel } = props.attribute;\r\n            const href = `../${COLLECTION_TYPES}/${targetModel}/${relationData.documentId}`;\r\n            const label = getRelationLabel(relationData, props.mainField);\r\n            const isAdminUserRelation = targetModel === 'admin::user';\r\n\r\n            return (\r\n              <Flex\r\n                key={relationData.documentId ?? relationData.id}\r\n                paddingTop={2}\r\n                paddingBottom={2}\r\n                paddingLeft={4}\r\n                paddingRight={4}\r\n                hasRadius\r\n                borderColor=\"neutral200\"\r\n                background=\"neutral150\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <Box minWidth={0} paddingTop={1} paddingBottom={1} paddingRight={4}>\r\n                  <Tooltip label={label}>\r\n                    {isAdminUserRelation ? (\r\n                      <Typography>{label}</Typography>\r\n                    ) : (\r\n                      <LinkEllipsis tag={NavLink} to={href}>\r\n                        {label}\r\n                      </LinkEllipsis>\r\n                    )}\r\n                  </Tooltip>\r\n                </Box>\r\n                <DocumentStatus status={relationData.status as string} />\r\n              </Flex>\r\n            );\r\n          })}\r\n        </Flex>\r\n      )}\r\n      {meta.missingCount > 0 && (\r\n        /* @ts-expect-error – we dont need closeLabel */\r\n        <StyledAlert\r\n          marginTop={1}\r\n          variant=\"warning\"\r\n          title={formatMessage(\r\n            {\r\n              id: 'content-manager.history.content.missing-relations.title',\r\n              defaultMessage:\r\n                '{number, plural, =1 {Missing relation} other {{number} missing relations}}',\r\n            },\r\n            { number: meta.missingCount }\r\n          )}\r\n        >\r\n          {formatMessage(\r\n            {\r\n              id: 'content-manager.history.content.missing-relations.message',\r\n              defaultMessage:\r\n                \"{number, plural, =1 {It has} other {They have}} been deleted and can't be restored.\",\r\n            },\r\n            { number: meta.missingCount }\r\n          )}\r\n        </StyledAlert>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CustomMediaInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst CustomMediaInput = (props: VersionInputRendererProps) => {\r\n  const { value } = useField(props.name);\r\n  const results = value ? value.results : [];\r\n  const meta = value ? value.meta : { missingCount: 0 };\r\n  const { formatMessage } = useIntl();\r\n\r\n  const fields = useStrapiApp('CustomMediaInput', (state) => state.fields);\r\n  const MediaLibrary = fields.media as React.ComponentType<\r\n    VersionInputRendererProps & { multiple: boolean }\r\n  >;\r\n  return (\r\n    <Flex direction=\"column\" gap={2} alignItems=\"stretch\">\r\n      <Form method=\"PUT\" disabled={true} initialValues={{ [props.name]: results }}>\r\n        <MediaLibrary {...props} disabled={true} multiple={results.length > 1} />\r\n      </Form>\r\n      {meta.missingCount > 0 && (\r\n        <StyledAlert\r\n          variant=\"warning\"\r\n          closeLabel=\"Close\"\r\n          onClose={() => {}}\r\n          title={formatMessage(\r\n            {\r\n              id: 'content-manager.history.content.missing-assets.title',\r\n              defaultMessage:\r\n                '{number, plural, =1 {Missing asset} other {{number} missing assets}}',\r\n            },\r\n            { number: meta.missingCount }\r\n          )}\r\n        >\r\n          {formatMessage(\r\n            {\r\n              id: 'content-manager.history.content.missing-assets.message',\r\n              defaultMessage:\r\n                \"{number, plural, =1 {It has} other {They have}} been deleted in the Media Library and can't be restored.\",\r\n            },\r\n            { number: meta.missingCount }\r\n          )}\r\n        </StyledAlert>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\ntype VersionInputRendererProps = DistributiveOmit<EditFieldLayout, 'size'> & {\r\n  /**\r\n   * In the context of content history, deleted fields need to ignore RBAC\r\n   * @default false\r\n   */\r\n  shouldIgnoreRBAC?: boolean;\r\n};\r\n\r\n/**\r\n * Checks if the i18n plugin added a label action to the field and modifies it\r\n * to adapt the wording for the history page.\r\n */\r\nconst getLabelAction = (labelAction: VersionInputRendererProps['labelAction']) => {\r\n  if (!React.isValidElement(labelAction)) {\r\n    return labelAction;\r\n  }\r\n\r\n  // TODO: find a better way to do this rather than access internals\r\n  const labelActionTitleId = labelAction.props.title.id;\r\n\r\n  if (labelActionTitleId === 'i18n.Field.localized') {\r\n    return React.cloneElement(labelAction, {\r\n      ...labelAction.props,\r\n      title: {\r\n        id: 'history.content.localized',\r\n        defaultMessage:\r\n          'This value is specific to this locale. If you restore this version, the content will not be replaced for other locales.',\r\n      },\r\n    });\r\n  }\r\n\r\n  if (labelActionTitleId === 'i18n.Field.not-localized') {\r\n    return React.cloneElement(labelAction, {\r\n      ...labelAction.props,\r\n      title: {\r\n        id: 'history.content.not-localized',\r\n        defaultMessage:\r\n          'This value is common to all locales. If you restore this version and save the changes, the content will be replaced for all locales.',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Label action is unrelated to i18n, don't touch it.\r\n  return labelAction;\r\n};\r\n\r\n/**\r\n * @internal\r\n *\r\n * @description An abstraction around the regular form input renderer designed specifically\r\n * to be used on the History page in the content-manager. It understands how to render specific\r\n * inputs within the context of a history version (i.e. relations, media, ignored RBAC, etc...)\r\n */\r\nconst VersionInputRenderer = ({\r\n  visible,\r\n  hint: providedHint,\r\n  shouldIgnoreRBAC = false,\r\n  labelAction,\r\n  ...props\r\n}: VersionInputRendererProps) => {\r\n  const customLabelAction = getLabelAction(labelAction);\r\n\r\n  const { formatMessage } = useIntl();\r\n  const version = useHistoryContext('VersionContent', (state) => state.selectedVersion);\r\n  const configuration = useHistoryContext('VersionContent', (state) => state.configuration);\r\n  const fieldSizes = useTypedSelector((state) => state['content-manager'].app.fieldSizes);\r\n\r\n  const { id, components } = useDoc();\r\n  const isFormDisabled = useForm('InputRenderer', (state) => state.disabled);\r\n\r\n  const isInDynamicZone = useDynamicZone('isInDynamicZone', (state) => state.isInDynamicZone);\r\n\r\n  const canCreateFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canCreateFields);\r\n  const canReadFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canReadFields);\r\n  const canUpdateFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canUpdateFields);\r\n  const canUserAction = useDocumentRBAC('InputRenderer', (rbac) => rbac.canUserAction);\r\n\r\n  const editableFields = id ? canUpdateFields : canCreateFields;\r\n  const readableFields = id ? canReadFields : canCreateFields;\r\n  /**\r\n   * Component fields are always readable and editable,\r\n   * however the fields within them may not be.\r\n   */\r\n  const canUserReadField = canUserAction(props.name, readableFields, props.type);\r\n  const canUserEditField = canUserAction(props.name, editableFields, props.type);\r\n\r\n  const fields = useStrapiApp('InputRenderer', (app) => app.fields);\r\n  const { lazyComponentStore } = useLazyComponents(\r\n    attributeHasCustomFieldProperty(props.attribute) ? [props.attribute.customField] : undefined\r\n  );\r\n\r\n  const hint = useFieldHint(providedHint, props.attribute);\r\n  const {\r\n    edit: { components: componentsLayout },\r\n  } = useDocLayout();\r\n\r\n  if (!visible) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Don't render the field if the user can't read it.\r\n   */\r\n  if (!shouldIgnoreRBAC && !canUserReadField && !isInDynamicZone) {\r\n    return <NotAllowedInput hint={hint} {...props} />;\r\n  }\r\n\r\n  const fieldIsDisabled =\r\n    (!canUserEditField && !isInDynamicZone) || props.disabled || isFormDisabled;\r\n\r\n  /**\r\n   * Attributes found on the current content-type schema cannot be restored. We handle\r\n   * this by displaying a warning alert to the user instead of the input for that field type.\r\n   */\r\n  const addedAttributes = version.meta.unknownAttributes.added;\r\n  if (Object.keys(addedAttributes).includes(props.name)) {\r\n    return (\r\n      <Flex direction=\"column\" alignItems=\"flex-start\" gap={1}>\r\n        <Field.Label>{props.label}</Field.Label>\r\n        <StyledAlert\r\n          width=\"100%\"\r\n          closeLabel=\"Close\"\r\n          onClose={() => {}}\r\n          variant=\"warning\"\r\n          title={formatMessage({\r\n            id: 'content-manager.history.content.new-field.title',\r\n            defaultMessage: 'New field',\r\n          })}\r\n        >\r\n          {formatMessage({\r\n            id: 'content-manager.history.content.new-field.message',\r\n            defaultMessage:\r\n              \"This field didn't exist when this version was saved. If you restore this version, it will be empty.\",\r\n          })}\r\n        </StyledAlert>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Because a custom field has a unique prop but the type could be confused with either\r\n   * the useField hook or the type of the field we need to handle it separately and first.\r\n   */\r\n  if (attributeHasCustomFieldProperty(props.attribute)) {\r\n    const CustomInput = lazyComponentStore[props.attribute.customField];\r\n\r\n    if (CustomInput) {\r\n      return (\r\n        <CustomInput\r\n          {...props}\r\n          // @ts-expect-error – TODO: fix this type error in the useLazyComponents hook.\r\n          hint={hint}\r\n          labelAction={customLabelAction}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <FormInputRenderer\r\n        {...props}\r\n        hint={hint}\r\n        labelAction={customLabelAction}\r\n        // @ts-expect-error – this workaround lets us display that the custom field is missing.\r\n        type={props.attribute.customField}\r\n        disabled={fieldIsDisabled}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Since media fields use a custom input via the upload plugin provided by the useLibrary hook,\r\n   * we need to handle the them before other custom inputs coming from the useLibrary hook.\r\n   */\r\n  if (props.type === 'media') {\r\n    return (\r\n      <CustomMediaInput {...props} labelAction={customLabelAction} disabled={fieldIsDisabled} />\r\n    );\r\n  }\r\n  /**\r\n   * This is where we handle ONLY the fields from the `useLibrary` hook.\r\n   */\r\n  const addedInputTypes = Object.keys(fields);\r\n  if (!attributeHasCustomFieldProperty(props.attribute) && addedInputTypes.includes(props.type)) {\r\n    const CustomInput = fields[props.type];\r\n    return (\r\n      <CustomInput\r\n        {...props}\r\n        // @ts-expect-error – TODO: fix this type error in the useLibrary hook.\r\n        hint={hint}\r\n        labelAction={customLabelAction}\r\n        disabled={fieldIsDisabled}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * These include the content-manager specific fields, failing that we fall back\r\n   * to the more generic form input renderer.\r\n   */\r\n  switch (props.type) {\r\n    case 'blocks':\r\n      return <BlocksInput {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\r\n    case 'component':\r\n      const { layout } = componentsLayout[props.attribute.component];\r\n      // Components can only have one panel, so only save the first layout item\r\n      const [remainingFieldsLayout] = getRemaingFieldsLayout({\r\n        layout: [layout],\r\n        metadatas: configuration.components[props.attribute.component].metadatas,\r\n        fieldSizes,\r\n        schemaAttributes: components[props.attribute.component].attributes,\r\n      });\r\n\r\n      return (\r\n        <ComponentInput\r\n          {...props}\r\n          layout={[...layout, ...(remainingFieldsLayout || [])]}\r\n          hint={hint}\r\n          labelAction={customLabelAction}\r\n          disabled={fieldIsDisabled}\r\n        >\r\n          {(inputProps) => <VersionInputRenderer {...inputProps} shouldIgnoreRBAC={true} />}\r\n        </ComponentInput>\r\n      );\r\n    case 'dynamiczone':\r\n      return (\r\n        <DynamicZone\r\n          {...props}\r\n          hint={hint}\r\n          labelAction={customLabelAction}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n    case 'relation':\r\n      return (\r\n        <CustomRelationInput\r\n          {...props}\r\n          hint={hint}\r\n          labelAction={customLabelAction}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n    case 'richtext':\r\n      return (\r\n        <Wysiwyg\r\n          {...props}\r\n          hint={hint}\r\n          type={props.type}\r\n          labelAction={customLabelAction}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n    case 'uid':\r\n      return (\r\n        <UIDInput\r\n          {...props}\r\n          hint={hint}\r\n          type={props.type}\r\n          labelAction={customLabelAction}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n    /**\r\n     * Enumerations are a special case because they require options.\r\n     */\r\n    case 'enumeration':\r\n      return (\r\n        <FormInputRenderer\r\n          {...props}\r\n          hint={hint}\r\n          labelAction={customLabelAction}\r\n          options={props.attribute.enum.map((value) => ({ value }))}\r\n          // @ts-expect-error – Temp workaround so we don't forget custom-fields don't work!\r\n          type={props.customField ? 'custom-field' : props.type}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n    default:\r\n      // These props are not needed for the generic form input renderer.\r\n      const { unique: _unique, mainField: _mainField, ...restProps } = props;\r\n      return (\r\n        <FormInputRenderer\r\n          {...restProps}\r\n          hint={hint}\r\n          labelAction={customLabelAction}\r\n          // @ts-expect-error – Temp workaround so we don't forget custom-fields don't work!\r\n          type={props.customField ? 'custom-field' : props.type}\r\n          disabled={fieldIsDisabled}\r\n        />\r\n      );\r\n  }\r\n};\r\n\r\nconst attributeHasCustomFieldProperty = (\r\n  attribute: Schema.Attribute.AnyAttribute\r\n): attribute is Schema.Attribute.AnyAttribute & Schema.Attribute.CustomField<string> =>\r\n  'customField' in attribute && typeof attribute.customField === 'string';\r\n\r\nexport type { VersionInputRendererProps };\r\nexport { VersionInputRenderer };\r\n","import * as React from 'react';\r\n\r\nimport { Form, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box, Divider, Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { Schema } from '@strapi/types';\r\nimport pipe from 'lodash/fp/pipe';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDoc } from '../../hooks/useDocument';\r\nimport { useTypedSelector } from '../../modules/hooks';\r\nimport {\r\n  prepareTempKeys,\r\n  removeFieldsThatDontExistOnSchema,\r\n} from '../../pages/EditView/utils/data';\r\nimport { HistoryContextValue, useHistoryContext } from '../pages/History';\r\n\r\nimport { VersionInputRenderer } from './VersionInputRenderer';\r\n\r\nimport type { Metadatas } from '../../../../shared/contracts/content-types';\r\nimport type { GetInitData } from '../../../../shared/contracts/init';\r\nimport type { ComponentsDictionary, Document } from '../../hooks/useDocument';\r\nimport type { EditFieldLayout } from '../../hooks/useDocumentLayout';\r\n\r\nconst createLayoutFromFields = <T extends EditFieldLayout | UnknownField>(fields: T[]) => {\r\n  return (\r\n    fields\r\n      .reduce<Array<T[]>>((rows, field) => {\r\n        if (field.type === 'dynamiczone') {\r\n          // Dynamic zones take up all the columns in a row\r\n          rows.push([field]);\r\n\r\n          return rows;\r\n        }\r\n\r\n        if (!rows[rows.length - 1]) {\r\n          // Create a new row if there isn't one available\r\n          rows.push([]);\r\n        }\r\n\r\n        // Push fields to the current row, they wrap and handle their own column size\r\n        rows[rows.length - 1].push(field);\r\n\r\n        return rows;\r\n      }, [])\r\n      // Map the rows to panels\r\n      .map((row) => [row])\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * getRemainingFieldsLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface GetRemainingFieldsLayoutOptions\r\n  extends Pick<HistoryContextValue, 'layout'>,\r\n    Pick<GetInitData.Response['data'], 'fieldSizes'> {\r\n  schemaAttributes: HistoryContextValue['schema']['attributes'];\r\n  metadatas: Metadatas;\r\n}\r\n\r\n/**\r\n * Build a layout for the fields that are were deleted from the edit view layout\r\n * via the configure the view page. This layout will be merged with the main one.\r\n * Those fields would be restored if the user restores the history version, which is why it's\r\n * important to show them, even if they're not in the normal layout.\r\n */\r\nfunction getRemaingFieldsLayout({\r\n  layout,\r\n  metadatas,\r\n  schemaAttributes,\r\n  fieldSizes,\r\n}: GetRemainingFieldsLayoutOptions) {\r\n  const fieldsInLayout = layout.flatMap((panel) =>\r\n    panel.flatMap((row) => row.flatMap((field) => field.name))\r\n  );\r\n  const remainingFields = Object.entries(metadatas).reduce<EditFieldLayout[]>(\r\n    (currentRemainingFields, [name, field]) => {\r\n      // Make sure we do not fields that are not visible, e.g. \"id\"\r\n      if (!fieldsInLayout.includes(name) && field.edit.visible === true) {\r\n        const attribute = schemaAttributes[name];\r\n        // @ts-expect-error not sure why attribute causes type error\r\n        currentRemainingFields.push({\r\n          attribute,\r\n          type: attribute.type,\r\n          visible: true,\r\n          disabled: true,\r\n          label: field.edit.label || name,\r\n          name: name,\r\n          size: fieldSizes[attribute.type].default ?? 12,\r\n        });\r\n      }\r\n\r\n      return currentRemainingFields;\r\n    },\r\n    []\r\n  );\r\n\r\n  return createLayoutFromFields(remainingFields);\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * FormPanel\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst FormPanel = ({ panel }: { panel: EditFieldLayout[][] }) => {\r\n  if (panel.some((row) => row.some((field) => field.type === 'dynamiczone'))) {\r\n    const [row] = panel;\r\n    const [field] = row;\r\n\r\n    return (\r\n      <Grid.Root key={field.name} gap={4}>\r\n        <Grid.Item col={12} s={12} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n          <VersionInputRenderer {...field} />\r\n        </Grid.Item>\r\n      </Grid.Root>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      hasRadius\r\n      background=\"neutral0\"\r\n      shadow=\"tableShadow\"\r\n      paddingLeft={6}\r\n      paddingRight={6}\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      borderColor=\"neutral150\"\r\n    >\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n        {panel.map((row, gridRowIndex) => (\r\n          <Grid.Root key={gridRowIndex} gap={4}>\r\n            {row.map(({ size, ...field }) => {\r\n              return (\r\n                <Grid.Item\r\n                  col={size}\r\n                  key={field.name}\r\n                  s={12}\r\n                  xs={12}\r\n                  direction=\"column\"\r\n                  alignItems=\"stretch\"\r\n                >\r\n                  <VersionInputRenderer {...field} />\r\n                </Grid.Item>\r\n              );\r\n            })}\r\n          </Grid.Root>\r\n        ))}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * VersionContent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype UnknownField = EditFieldLayout & { shouldIgnoreRBAC: boolean };\r\n\r\nconst VersionContent = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { fieldSizes } = useTypedSelector((state) => state['content-manager'].app);\r\n  const version = useHistoryContext('VersionContent', (state) => state.selectedVersion);\r\n  const layout = useHistoryContext('VersionContent', (state) => state.layout);\r\n  const configuration = useHistoryContext('VersionContent', (state) => state.configuration);\r\n  const schema = useHistoryContext('VersionContent', (state) => state.schema);\r\n\r\n  // Build a layout for the unknown fields section\r\n  const removedAttributes = version.meta.unknownAttributes.removed;\r\n  const removedAttributesAsFields = Object.entries(removedAttributes).map(\r\n    ([attributeName, attribute]) => {\r\n      const field = {\r\n        attribute,\r\n        shouldIgnoreRBAC: true,\r\n        type: attribute.type,\r\n        visible: true,\r\n        disabled: true,\r\n        label: attributeName,\r\n        name: attributeName,\r\n        size: fieldSizes[attribute.type].default ?? 12,\r\n      } as UnknownField;\r\n\r\n      return field;\r\n    }\r\n  );\r\n  const unknownFieldsLayout = createLayoutFromFields(removedAttributesAsFields);\r\n\r\n  // Build a layout for the fields that are were deleted from the layout\r\n  const remainingFieldsLayout = getRemaingFieldsLayout({\r\n    metadatas: configuration.contentType.metadatas,\r\n    layout,\r\n    schemaAttributes: schema.attributes,\r\n    fieldSizes,\r\n  });\r\n\r\n  const { components } = useDoc();\r\n\r\n  /**\r\n   * Transform the data before passing it to the form so that each field\r\n   * has a uniquely generated key\r\n   */\r\n  const transformedData = React.useMemo(() => {\r\n    const transform =\r\n      (schemaAttributes: Schema.Attributes, components: ComponentsDictionary = {}) =>\r\n      (document: Omit<Document, 'id'>) => {\r\n        const schema = { attributes: schemaAttributes };\r\n        const transformations = pipe(\r\n          removeFieldsThatDontExistOnSchema(schema),\r\n          prepareTempKeys(schema, components)\r\n        );\r\n        return transformations(document);\r\n      };\r\n\r\n    return transform(version.schema, components)(version.data);\r\n  }, [components, version.data, version.schema]);\r\n\r\n  return (\r\n    <Layouts.Content>\r\n      <Box paddingBottom={8}>\r\n        <Form disabled={true} method=\"PUT\" initialValues={transformedData}>\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={6} position=\"relative\">\r\n            {[...layout, ...remainingFieldsLayout].map((panel, index) => {\r\n              return <FormPanel key={index} panel={panel} />;\r\n            })}\r\n          </Flex>\r\n        </Form>\r\n      </Box>\r\n      {removedAttributesAsFields.length > 0 && (\r\n        <>\r\n          <Divider />\r\n          <Box paddingTop={8}>\r\n            <Flex direction=\"column\" alignItems=\"flex-start\" paddingBottom={6} gap={1}>\r\n              <Typography variant=\"delta\">\r\n                {formatMessage({\r\n                  id: 'content-manager.history.content.unknown-fields.title',\r\n                  defaultMessage: 'Unknown fields',\r\n                })}\r\n              </Typography>\r\n              <Typography variant=\"pi\">\r\n                {formatMessage(\r\n                  {\r\n                    id: 'content-manager.history.content.unknown-fields.message',\r\n                    defaultMessage:\r\n                      'These fields have been deleted or renamed in the Content-Type Builder. <b>These fields will not be restored.</b>',\r\n                  },\r\n                  {\r\n                    b: (chunks: React.ReactNode) => (\r\n                      <Typography variant=\"pi\" fontWeight=\"bold\">\r\n                        {chunks}\r\n                      </Typography>\r\n                    ),\r\n                  }\r\n                )}\r\n              </Typography>\r\n            </Flex>\r\n            <Form disabled={true} method=\"PUT\" initialValues={version.data}>\r\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6} position=\"relative\">\r\n                {unknownFieldsLayout.map((panel, index) => {\r\n                  return <FormPanel key={index} panel={panel} />;\r\n                })}\r\n              </Flex>\r\n            </Form>\r\n          </Box>\r\n        </>\r\n      )}\r\n    </Layouts.Content>\r\n  );\r\n};\r\n\r\nexport { VersionContent, getRemaingFieldsLayout };\r\n","import { Data } from '@strapi/types';\r\n\r\nimport {\r\n  GetHistoryVersions,\r\n  RestoreHistoryVersion,\r\n} from '../../../../shared/contracts/history-versions';\r\nimport { COLLECTION_TYPES } from '../../constants/collections';\r\nimport { contentManagerApi } from '../../services/api';\r\n\r\ninterface RestoreVersion extends RestoreHistoryVersion.Request {\r\n  documentId: Data.ID;\r\n  collectionType?: string;\r\n}\r\n\r\nconst historyVersionsApi = contentManagerApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getHistoryVersions: builder.query<\r\n      GetHistoryVersions.Response,\r\n      GetHistoryVersions.Request['query']\r\n    >({\r\n      query(params) {\r\n        return {\r\n          url: `/content-manager/history-versions`,\r\n          method: 'GET',\r\n          config: {\r\n            params,\r\n          },\r\n        };\r\n      },\r\n      providesTags: ['HistoryVersion'],\r\n    }),\r\n    restoreVersion: builder.mutation<RestoreHistoryVersion.Response, RestoreVersion>({\r\n      query({ params, body }) {\r\n        return {\r\n          url: `/content-manager/history-versions/${params.versionId}/restore`,\r\n          method: 'PUT',\r\n          data: body,\r\n        };\r\n      },\r\n      invalidatesTags: (_res, _error, { documentId, collectionType, params }) => {\r\n        return [\r\n          'HistoryVersion',\r\n          {\r\n            type: 'Document',\r\n            id:\r\n              collectionType === COLLECTION_TYPES\r\n                ? `${params.contentType}_${documentId}`\r\n                : params.contentType,\r\n          },\r\n        ];\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nconst { useGetHistoryVersionsQuery, useRestoreVersionMutation } = historyVersionsApi;\r\n\r\nexport { useGetHistoryVersionsQuery, useRestoreVersionMutation };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  ConfirmDialog,\r\n  useNotification,\r\n  useQueryParams,\r\n  useTracking,\r\n  useRBAC,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Typography, Flex, Link, Dialog } from '@strapi/design-system';\r\nimport { ArrowLeft, WarningCircle } from '@strapi/icons';\r\nimport { UID } from '@strapi/types';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useNavigate, useParams, type To } from 'react-router-dom';\r\n\r\nimport { PERMISSIONS } from '../../constants/plugin';\r\nimport { useHistoryContext } from '../pages/History';\r\nimport { useRestoreVersionMutation } from '../services/historyVersion';\r\n\r\ninterface VersionHeaderProps {\r\n  headerId: string;\r\n}\r\n\r\nexport const VersionHeader = ({ headerId }: VersionHeaderProps) => {\r\n  const [isConfirmDialogOpen, setIsConfirmDialogOpen] = React.useState(false);\r\n  const navigate = useNavigate();\r\n  const { formatMessage, formatDate } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { toggleNotification } = useNotification();\r\n  const [{ query }] = useQueryParams<{\r\n    plugins?: Record<string, unknown>;\r\n  }>();\r\n  const { collectionType, slug } = useParams<{ collectionType: string; slug: UID.ContentType }>();\r\n  const [restoreVersion, { isLoading }] = useRestoreVersionMutation();\r\n  const { allowedActions } = useRBAC(PERMISSIONS.map((action) => ({ action, subject: slug })));\r\n\r\n  const version = useHistoryContext('VersionHeader', (state) => state.selectedVersion);\r\n  const mainField = useHistoryContext('VersionHeader', (state) => state.mainField);\r\n  const schema = useHistoryContext('VersionHeader', (state) => state.schema);\r\n  const isCurrentVersion = useHistoryContext(\r\n    'VersionHeader',\r\n    (state) => state.page === 1 && state.versions.data[0].id === state.selectedVersion.id\r\n  );\r\n\r\n  const mainFieldValue = version.data[mainField];\r\n\r\n  const getNextNavigation = (): To => {\r\n    const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\r\n\r\n    return {\r\n      pathname: '..',\r\n      search: pluginsQueryParams,\r\n    };\r\n  };\r\n\r\n  const handleRestore = async () => {\r\n    try {\r\n      const response = await restoreVersion({\r\n        documentId: version.relatedDocumentId,\r\n        collectionType,\r\n        params: {\r\n          versionId: version.id,\r\n          contentType: version.contentType,\r\n        },\r\n        body: { contentType: version.contentType },\r\n      });\r\n\r\n      if ('data' in response) {\r\n        navigate(getNextNavigation(), { relative: 'path' });\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          title: formatMessage({\r\n            id: 'content-manager.restore.success.title',\r\n            defaultMessage: 'Version restored.',\r\n          }),\r\n          message: formatMessage({\r\n            id: 'content-manager.restore.success.message',\r\n            defaultMessage: 'A past version of the content was restored.',\r\n          }),\r\n        });\r\n\r\n        trackUsage('didRestoreHistoryVersion');\r\n      }\r\n\r\n      if ('error' in response) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: 'content-manager.history.restore.error.message',\r\n            defaultMessage: 'Could not restore version.',\r\n          }),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root open={isConfirmDialogOpen} onOpenChange={setIsConfirmDialogOpen}>\r\n      <Layouts.BaseHeader\r\n        id={headerId}\r\n        title={formatDate(new Date(version.createdAt), {\r\n          year: 'numeric',\r\n          month: 'numeric',\r\n          day: 'numeric',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        })}\r\n        subtitle={\r\n          <Typography variant=\"epsilon\" textColor=\"neutral600\">\r\n            {formatMessage(\r\n              {\r\n                id: 'content-manager.history.version.subtitle',\r\n                defaultMessage:\r\n                  '{hasLocale, select, true {{subtitle}, in {locale}} other {{subtitle}}}',\r\n              },\r\n              {\r\n                hasLocale: Boolean(version.locale),\r\n                subtitle: `${mainFieldValue || ''} (${schema.info.singularName})`.trim(),\r\n                locale: version.locale?.name,\r\n              }\r\n            )}\r\n          </Typography>\r\n        }\r\n        navigationAction={\r\n          <Link\r\n            startIcon={<ArrowLeft />}\r\n            tag={NavLink}\r\n            to={getNextNavigation()}\r\n            relative=\"path\"\r\n            isExternal={false}\r\n          >\r\n            {formatMessage({\r\n              id: 'global.back',\r\n              defaultMessage: 'Back',\r\n            })}\r\n          </Link>\r\n        }\r\n        sticky={false}\r\n        primaryAction={\r\n          <Dialog.Trigger>\r\n            <Button\r\n              disabled={!allowedActions.canUpdate || isCurrentVersion}\r\n              onClick={() => {\r\n                setIsConfirmDialogOpen(true);\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'content-manager.history.restore.confirm.button',\r\n                defaultMessage: 'Restore',\r\n              })}\r\n            </Button>\r\n          </Dialog.Trigger>\r\n        }\r\n      />\r\n      <ConfirmDialog\r\n        onConfirm={handleRestore}\r\n        endAction={\r\n          <Button variant=\"secondary\" onClick={handleRestore} loading={isLoading}>\r\n            {formatMessage({\r\n              id: 'content-manager.history.restore.confirm.button',\r\n              defaultMessage: 'Restore',\r\n            })}\r\n          </Button>\r\n        }\r\n      >\r\n        <Flex\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          gap={2}\r\n          textAlign=\"center\"\r\n        >\r\n          <Flex justifyContent=\"center\">\r\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          </Flex>\r\n          <Typography>\r\n            {formatMessage({\r\n              id: 'content-manager.history.restore.confirm.title',\r\n              defaultMessage: 'Are you sure you want to restore this version?',\r\n            })}\r\n          </Typography>\r\n          <Typography>\r\n            {formatMessage(\r\n              {\r\n                id: 'content-manager.history.restore.confirm.message',\r\n                defaultMessage:\r\n                  \"{isDraft, select, true {The restored content will override your draft.} other {The restored content won't be published, it will override the draft and be saved as pending changes. You'll be able to publish the changes at anytime.}}\",\r\n              },\r\n              {\r\n                isDraft: version.status === 'draft',\r\n              }\r\n            )}\r\n          </Typography>\r\n        </Flex>\r\n      </ConfirmDialog>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { RelativeTime } from '../../components/RelativeTime';\r\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\r\nimport { getDisplayName } from '../../utils/users';\r\nimport { useHistoryContext } from '../pages/History';\r\n\r\nimport type { HistoryVersions } from '../../../../shared/contracts';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BlueText\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BlueText = (children: React.ReactNode) => (\r\n  <Typography textColor=\"primary600\" variant=\"pi\">\r\n    {children}\r\n  </Typography>\r\n);\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * VersionCard\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface VersionCardProps {\r\n  version: HistoryVersions.HistoryVersionDataResponse;\r\n  isCurrent: boolean;\r\n}\r\n\r\nconst VersionCard = ({ version, isCurrent }: VersionCardProps) => {\r\n  const { formatDate, formatMessage } = useIntl();\r\n  const [{ query }] = useQueryParams<{ id?: string }>();\r\n  const isActive = query.id === version.id.toString();\r\n  const author = version.createdBy && getDisplayName(version.createdBy);\r\n\r\n  return (\r\n    <Flex\r\n      direction=\"column\"\r\n      alignItems=\"flex-start\"\r\n      gap={3}\r\n      hasRadius\r\n      borderWidth=\"1px\"\r\n      borderStyle=\"solid\"\r\n      borderColor={isActive ? 'primary600' : 'neutral200'}\r\n      color=\"neutral800\"\r\n      padding={5}\r\n      tag={Link}\r\n      to={`?${stringify({ ...query, id: version.id })}`}\r\n      style={{ textDecoration: 'none' }}\r\n    >\r\n      <Flex direction=\"column\" gap={1} alignItems=\"flex-start\">\r\n        <Typography tag=\"h3\" fontWeight=\"semiBold\">\r\n          {formatDate(version.createdAt, {\r\n            day: 'numeric',\r\n            month: 'numeric',\r\n            year: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n          })}\r\n        </Typography>\r\n        <Typography tag=\"p\" variant=\"pi\" textColor=\"neutral600\">\r\n          {formatMessage(\r\n            {\r\n              id: 'content-manager.history.sidebar.versionDescription',\r\n              defaultMessage:\r\n                '{distanceToNow}{isAnonymous, select, true {} other { by {author}}}{isCurrent, select, true { <b>(current)</b>} other {}}',\r\n            },\r\n            {\r\n              distanceToNow: <RelativeTime timestamp={new Date(version.createdAt)} />,\r\n              author,\r\n              isAnonymous: !Boolean(version.createdBy),\r\n              isCurrent,\r\n              b: BlueText,\r\n            }\r\n          )}\r\n        </Typography>\r\n      </Flex>\r\n      {version.status && <DocumentStatus status={version.status} size=\"XS\" />}\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PaginationButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface PaginationButtonProps {\r\n  page: number;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst PaginationButton = ({ page, children }: PaginationButtonProps) => {\r\n  const [{ query }] = useQueryParams<{ id?: string }>();\r\n\r\n  // Remove the id from the pagination link, so that the history page can redirect\r\n  // to the id of the first history version in the new page once it's loaded\r\n  const { id: _id, ...queryRest } = query;\r\n\r\n  return (\r\n    <Link to={{ search: stringify({ ...queryRest, page }) }} style={{ textDecoration: 'none' }}>\r\n      <Typography variant=\"omega\" textColor=\"primary600\">\r\n        {children}\r\n      </Typography>\r\n    </Link>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * VersionsList\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst VersionsList = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { versions, page } = useHistoryContext('VersionsList', (state) => ({\r\n    versions: state.versions,\r\n    page: state.page,\r\n  }));\r\n\r\n  return (\r\n    <Flex\r\n      shrink={0}\r\n      direction=\"column\"\r\n      alignItems=\"stretch\"\r\n      width=\"320px\"\r\n      height=\"100vh\"\r\n      background=\"neutral0\"\r\n      borderColor=\"neutral200\"\r\n      borderWidth=\"0 0 0 1px\"\r\n      borderStyle=\"solid\"\r\n      tag=\"aside\"\r\n    >\r\n      <Flex\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        padding={4}\r\n        borderColor=\"neutral200\"\r\n        borderWidth=\"0 0 1px\"\r\n        borderStyle=\"solid\"\r\n        tag=\"header\"\r\n      >\r\n        <Typography tag=\"h2\" variant=\"omega\" fontWeight=\"semiBold\">\r\n          {formatMessage({\r\n            id: 'content-manager.history.sidebar.title',\r\n            defaultMessage: 'Versions',\r\n          })}\r\n        </Typography>\r\n        <Box background=\"neutral150\" hasRadius padding={1}>\r\n          <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n            {versions.meta.pagination.total}\r\n          </Typography>\r\n        </Box>\r\n      </Flex>\r\n      <Box flex={1} overflow=\"auto\">\r\n        {versions.meta.pagination.page > 1 && (\r\n          <Box paddingTop={4} textAlign=\"center\">\r\n            <PaginationButton page={page - 1}>\r\n              {formatMessage({\r\n                id: 'content-manager.history.sidebar.show-newer',\r\n                defaultMessage: 'Show newer versions',\r\n              })}\r\n            </PaginationButton>\r\n          </Box>\r\n        )}\r\n        <Flex direction=\"column\" gap={3} padding={4} tag=\"ul\" alignItems=\"stretch\">\r\n          {versions.data.map((version, index) => (\r\n            <li\r\n              key={version.id}\r\n              aria-label={formatMessage({\r\n                id: 'content-manager.history.sidebar.title.version-card.aria-label',\r\n                defaultMessage: 'Version card',\r\n              })}\r\n            >\r\n              <VersionCard version={version} isCurrent={page === 1 && index === 0} />\r\n            </li>\r\n          ))}\r\n        </Flex>\r\n        {versions.meta.pagination.page < versions.meta.pagination.pageCount && (\r\n          <Box paddingBottom={4} textAlign=\"center\">\r\n            <PaginationButton page={page + 1}>\r\n              {formatMessage({\r\n                id: 'content-manager.history.sidebar.show-older',\r\n                defaultMessage: 'Show older versions',\r\n              })}\r\n            </PaginationButton>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { VersionsList };\r\n","import * as React from 'react';\r\n\r\nimport { useQueryParams, Page, createContext, useRBAC } from '@strapi/admin/strapi-admin';\r\nimport { Box, Flex, FocusTrap, Main, Portal, Link } from '@strapi/design-system';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate, useParams, NavLink } from 'react-router-dom';\r\n\r\nimport { COLLECTION_TYPES } from '../../constants/collections';\r\nimport { PERMISSIONS } from '../../constants/plugin';\r\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\r\nimport { useDocument } from '../../hooks/useDocument';\r\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\r\nimport { useGetContentTypeConfigurationQuery } from '../../services/contentTypes';\r\nimport { buildValidParams } from '../../utils/api';\r\nimport { VersionContent } from '../components/VersionContent';\r\nimport { VersionHeader } from '../components/VersionHeader';\r\nimport { VersionsList } from '../components/VersionsList';\r\nimport { useGetHistoryVersionsQuery } from '../services/historyVersion';\r\n\r\nimport type {\r\n  ContentType,\r\n  FindContentTypeConfiguration,\r\n} from '../../../../shared/contracts/content-types';\r\nimport type {\r\n  HistoryVersionDataResponse,\r\n  GetHistoryVersions,\r\n} from '../../../../shared/contracts/history-versions';\r\nimport type { UID } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HistoryProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HistoryContextValue {\r\n  contentType: UID.ContentType;\r\n  id?: string; // null for single types\r\n  layout: EditLayout['layout'];\r\n  configuration: FindContentTypeConfiguration.Response['data'];\r\n  selectedVersion: HistoryVersionDataResponse;\r\n  // Errors are handled outside of the provider, so we exclude errors from the response type\r\n  versions: Extract<GetHistoryVersions.Response, { data: Array<HistoryVersionDataResponse> }>;\r\n  page: number;\r\n  mainField: string;\r\n  schema: ContentType;\r\n}\r\n\r\nconst [HistoryProvider, useHistoryContext] = createContext<HistoryContextValue>('HistoryPage');\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HistoryPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst HistoryPage = () => {\r\n  const headerId = React.useId();\r\n  const { formatMessage } = useIntl();\r\n  const {\r\n    slug,\r\n    id: documentId,\r\n    collectionType,\r\n  } = useParams<{\r\n    collectionType: string;\r\n    slug: UID.ContentType;\r\n    id: string;\r\n  }>();\r\n\r\n  const { isLoading: isLoadingDocument, schema } = useDocument({\r\n    collectionType: collectionType!,\r\n    model: slug!,\r\n  });\r\n\r\n  const {\r\n    isLoading: isLoadingLayout,\r\n    edit: {\r\n      layout,\r\n      settings: { displayName, mainField },\r\n    },\r\n  } = useDocumentLayout(slug!);\r\n  const { data: configuration, isLoading: isLoadingConfiguration } =\r\n    useGetContentTypeConfigurationQuery(slug!);\r\n\r\n  // Parse state from query params\r\n  const [{ query }] = useQueryParams<{\r\n    page?: number;\r\n    id?: string;\r\n    plugins?: Record<string, unknown>;\r\n  }>();\r\n  const { id: selectedVersionId, ...queryWithoutId } = query;\r\n  const validQueryParamsWithoutId = buildValidParams(queryWithoutId);\r\n  const page = validQueryParamsWithoutId.page ? Number(validQueryParamsWithoutId.page) : 1;\r\n\r\n  const versionsResponse = useGetHistoryVersionsQuery(\r\n    {\r\n      contentType: slug!,\r\n      ...(documentId ? { documentId } : {}),\r\n      // Omit id since it's not needed by the endpoint and caused extra refetches\r\n      ...validQueryParamsWithoutId,\r\n    },\r\n    { refetchOnMountOrArgChange: true }\r\n  );\r\n\r\n  /**\r\n   * When the page is first mounted, if there's already data in the cache, RTK has a fullfilled\r\n   * status for the first render, right before it triggers a new request. This means the code\r\n   * briefly reaches the part that redirects to the first history version (if none is set).\r\n   * But since that data is stale, that means auto-selecting a version that may not be the most\r\n   * recent. To avoid this, we identify through requestId if the query is stale despite the\r\n   * fullfilled status, and show the loader in that case.\r\n   * This means we essentially don't want cache. We always refetch when the page mounts, and\r\n   * we always show the loader until we have the most recent data. That's fine for this page.\r\n   */\r\n  const initialRequestId = React.useRef(versionsResponse.requestId);\r\n  const isStaleRequest = versionsResponse.requestId === initialRequestId.current;\r\n\r\n  /**\r\n   * Ensure that we have the necessary data to render the page:\r\n   * - slug for single types\r\n   * - slug _and_ documentId for collection types\r\n   */\r\n  if (!slug || (collectionType === COLLECTION_TYPES && !documentId)) {\r\n    return <Navigate to=\"/content-manager\" />;\r\n  }\r\n\r\n  if (\r\n    isLoadingDocument ||\r\n    isLoadingLayout ||\r\n    versionsResponse.isFetching ||\r\n    isStaleRequest ||\r\n    isLoadingConfiguration\r\n  ) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  // It was a success, handle empty data\r\n  if (!versionsResponse.isError && !versionsResponse.data?.data?.length) {\r\n    return (\r\n      <>\r\n        <Page.NoData\r\n          action={\r\n            <Link\r\n              tag={NavLink}\r\n              to={`/content-manager/${collectionType}/${slug}${documentId ? `/${documentId}` : ''}`}\r\n            >\r\n              {formatMessage({\r\n                id: 'global.back',\r\n                defaultMessage: 'Back',\r\n              })}\r\n            </Link>\r\n          }\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  // We have data, handle selected version\r\n  if (versionsResponse.data?.data?.length && !selectedVersionId) {\r\n    return (\r\n      <Navigate\r\n        to={{ search: stringify({ ...query, id: versionsResponse.data.data[0].id }) }}\r\n        replace\r\n      />\r\n    );\r\n  }\r\n\r\n  const selectedVersion = versionsResponse.data?.data?.find(\r\n    (version) => version.id.toString() === selectedVersionId\r\n  );\r\n  if (\r\n    versionsResponse.isError ||\r\n    !layout ||\r\n    !schema ||\r\n    !selectedVersion ||\r\n    !configuration ||\r\n    // This should not happen as it's covered by versionsResponse.isError, but we need it for TS\r\n    versionsResponse.data.error\r\n  ) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          {\r\n            id: 'content-manager.history.page-title',\r\n            defaultMessage: '{contentType} history',\r\n          },\r\n          {\r\n            contentType: displayName,\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <HistoryProvider\r\n        contentType={slug}\r\n        id={documentId}\r\n        schema={schema}\r\n        layout={layout}\r\n        configuration={configuration}\r\n        selectedVersion={selectedVersion}\r\n        versions={versionsResponse.data}\r\n        page={page}\r\n        mainField={mainField}\r\n      >\r\n        <Flex direction=\"row\" alignItems=\"flex-start\">\r\n          <Main\r\n            grow={1}\r\n            height=\"100vh\"\r\n            background=\"neutral100\"\r\n            paddingBottom={6}\r\n            overflow=\"auto\"\r\n            labelledBy={headerId}\r\n          >\r\n            <VersionHeader headerId={headerId} />\r\n            <VersionContent />\r\n          </Main>\r\n          <VersionsList />\r\n        </Flex>\r\n      </HistoryProvider>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedHistoryPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedHistoryPageImpl = () => {\r\n  const { slug } = useParams<{\r\n    slug: string;\r\n  }>();\r\n  const {\r\n    permissions = [],\r\n    isLoading,\r\n    error,\r\n  } = useRBAC(PERMISSIONS.map((action) => ({ action, subject: slug })));\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error || !slug) {\r\n    return (\r\n      <Box\r\n        height=\"100vh\"\r\n        width=\"100vw\"\r\n        position=\"fixed\"\r\n        top={0}\r\n        left={0}\r\n        zIndex={2}\r\n        background=\"neutral0\"\r\n      >\r\n        <Page.Error />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      height=\"100vh\"\r\n      width=\"100vw\"\r\n      position=\"fixed\"\r\n      top={0}\r\n      left={0}\r\n      zIndex={2}\r\n      background=\"neutral0\"\r\n    >\r\n      <Page.Protect permissions={permissions}>\r\n        {({ permissions }) => (\r\n          <DocumentRBAC permissions={permissions}>\r\n            <HistoryPage />\r\n          </DocumentRBAC>\r\n        )}\r\n      </Page.Protect>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ProtectedHistoryPage = () => {\r\n  return (\r\n    <Portal>\r\n      <FocusTrap>\r\n        <ProtectedHistoryPageImpl />\r\n      </FocusTrap>\r\n    </Portal>\r\n  );\r\n};\r\n\r\nexport { ProtectedHistoryPage, HistoryProvider, useHistoryContext };\r\nexport type { HistoryContextValue };\r\n"],"names":["styled","Alert","Link","useIntl","useField","jsxs","Fragment","jsx","Field","Box","Flex","COLLECTION_TYPES","getRelationLabel","Tooltip","Typography","NavLink","DocumentStatus","useStrapiApp","Form","React","useTypedSelector","useDoc","useForm","useDynamicZone","useDocumentRBAC","useLazyComponents","useFieldHint","useDocLayout","NotAllowedInput","FormInputRenderer","BlocksInput","ComponentInput","DynamicZone","Wysiwyg","UIDInput","Grid","components","schema","pipe","removeFieldsThatDontExistOnSchema","prepareTempKeys","Layouts","index","Divider","contentManagerApi","useNavigate","useTracking","useNotification","useQueryParams","useParams","useRBAC","PERMISSIONS","stringify","Dialog","ArrowLeft","Button","ConfirmDialog","WarningCircle","getDisplayName","RelativeTime","createContext","useDocument","useDocumentLayout","useGetContentTypeConfigurationQuery","buildValidParams","Navigate","Page","Main","permissions","DocumentRBAC","Portal","FocusTrap"],"mappings":"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"}