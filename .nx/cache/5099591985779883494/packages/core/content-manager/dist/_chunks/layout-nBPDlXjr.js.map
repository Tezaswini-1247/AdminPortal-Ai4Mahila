{"version":3,"file":"layout-nBPDlXjr.js","sources":["../../admin/src/components/DragLayer.tsx","../../admin/src/components/DragPreviews/ComponentDragPreview.tsx","../../admin/src/components/DragPreviews/RelationDragPreview.tsx","../../admin/src/components/LeftMenu.tsx","../../admin/src/hooks/useContentManagerInitData.ts","../../admin/src/layout.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport { DragLayerMonitor, XYCoord, useDragLayer } from 'react-dnd';\r\n\r\nfunction getStyle(\r\n  initialOffset: XYCoord | null,\r\n  currentOffset: XYCoord | null,\r\n  mouseOffset: XYCoord | null\r\n) {\r\n  if (!initialOffset || !currentOffset || !mouseOffset) {\r\n    return { display: 'none' };\r\n  }\r\n\r\n  const { x, y } = mouseOffset;\r\n\r\n  return {\r\n    transform: `translate(${x}px, ${y}px)`,\r\n  };\r\n}\r\n\r\nexport interface DragLayerProps {\r\n  renderItem: (item: {\r\n    /**\r\n     * TODO: it'd be great if we could make this a union where the type infers the item.\r\n     */\r\n    item: any;\r\n    type: ReturnType<DragLayerMonitor['getItemType']>;\r\n  }) => React.ReactNode;\r\n}\r\n\r\nconst DragLayer = ({ renderItem }: DragLayerProps) => {\r\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\r\n    (monitor) => ({\r\n      item: monitor.getItem(),\r\n      itemType: monitor.getItemType(),\r\n      initialOffset: monitor.getInitialSourceClientOffset(),\r\n      currentOffset: monitor.getSourceClientOffset(),\r\n      isDragging: monitor.isDragging(),\r\n      mouseOffset: monitor.getClientOffset(),\r\n    })\r\n  );\r\n\r\n  if (!isDragging) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      height=\"100%\"\r\n      left={0}\r\n      position=\"fixed\"\r\n      pointerEvents=\"none\"\r\n      top={0}\r\n      zIndex={100}\r\n      width=\"100%\"\r\n    >\r\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\r\n        {renderItem({ type: itemType, item })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { DragLayer };\r\n","import { Flex, FlexComponent, IconButton, Typography } from '@strapi/design-system';\r\nimport { CaretDown, Drag, Trash } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\ninterface ComponentDragPreviewProps {\r\n  displayedValue: string;\r\n}\r\n\r\nconst ComponentDragPreview = ({ displayedValue }: ComponentDragPreviewProps) => {\r\n  return (\r\n    <Flex\r\n      background=\"neutral0\"\r\n      borderColor=\"neutral200\"\r\n      justifyContent=\"space-between\"\r\n      gap={3}\r\n      padding={3}\r\n      width=\"30rem\"\r\n    >\r\n      <ToggleButton type=\"button\">\r\n        <Flex gap={6}>\r\n          <DropdownIconWrapper\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            background=\"neutral200\"\r\n            height=\"3.2rem\"\r\n            width=\"3.2rem\"\r\n          >\r\n            <CaretDown />\r\n          </DropdownIconWrapper>\r\n\r\n          <Flex maxWidth=\"15rem\">\r\n            <Typography textColor=\"neutral700\" ellipsis>\r\n              {displayedValue}\r\n            </Typography>\r\n          </Flex>\r\n        </Flex>\r\n      </ToggleButton>\r\n\r\n      <Flex gap={2}>\r\n        <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\r\n          <Trash />\r\n        </IconButton>\r\n\r\n        <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\r\n          <Drag />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst DropdownIconWrapper = styled<FlexComponent>(Flex)`\r\n  border-radius: 50%;\r\n\r\n  svg {\r\n    height: 0.6rem;\r\n    width: 1.1rem;\r\n    > path {\r\n      fill: ${({ theme }) => theme.colors.neutral600};\r\n    }\r\n  }\r\n`;\r\n\r\n// TODO: we shouldn't have to reset a whole button\r\nconst ToggleButton = styled.button`\r\n  border: none;\r\n  background: transparent;\r\n  display: block;\r\n  width: 100%;\r\n  text-align: unset;\r\n  padding: 0;\r\n`;\r\n\r\nexport { ComponentDragPreview };\r\nexport type { ComponentDragPreviewProps };\r\n","import { Box, Flex, IconButton, Typography } from '@strapi/design-system';\r\nimport { Cross, Drag } from '@strapi/icons';\r\n\r\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\r\nimport {\r\n  DisconnectButton,\r\n  LinkEllipsis,\r\n  FlexWrapper,\r\n} from '../../pages/EditView/components/FormInputs/Relations';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\ninterface RelationDragPreviewProps {\r\n  status?: string;\r\n  displayedValue: string;\r\n  id: Data.ID;\r\n  index: number;\r\n  width: number;\r\n}\r\n\r\nconst RelationDragPreview = ({ status, displayedValue, width }: RelationDragPreviewProps) => {\r\n  return (\r\n    <Box style={{ width }}>\r\n      <Flex\r\n        paddingTop={2}\r\n        paddingBottom={2}\r\n        paddingLeft={2}\r\n        paddingRight={4}\r\n        hasRadius\r\n        borderWidth={1}\r\n        background=\"neutral0\"\r\n        borderColor=\"neutral200\"\r\n        justifyContent=\"space-between\"\r\n        gap={4}\r\n      >\r\n        <FlexWrapper gap={1}>\r\n          <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\r\n            <Drag />\r\n          </IconButton>\r\n          <Flex width=\"100%\" minWidth={0} justifyContent=\"space-between\">\r\n            <Box minWidth={0} paddingTop={1} paddingBottom={1} paddingRight={4}>\r\n              <LinkEllipsis href=\"\">\r\n                <Typography textColor=\"primary600\" ellipsis>\r\n                  {displayedValue}\r\n                </Typography>\r\n              </LinkEllipsis>\r\n            </Box>\r\n            {status ? <DocumentStatus status={status} /> : null}\r\n          </Flex>\r\n        </FlexWrapper>\r\n        <DisconnectButton type=\"button\">\r\n          <Cross width=\"12px\" />\r\n        </DisconnectButton>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { RelationDragPreview };\r\nexport type { RelationDragPreviewProps };\r\n","import * as React from 'react';\r\n\r\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  useCollator,\r\n  useFilter,\r\n  SubNav,\r\n  SubNavHeader,\r\n  SubNavLink,\r\n  SubNavSection,\r\n  SubNavSections,\r\n} from '@strapi/design-system';\r\nimport { parse, stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useContentTypeSchema } from '../hooks/useContentTypeSchema';\r\nimport { useTypedSelector } from '../modules/hooks';\r\nimport { getTranslation } from '../utils/translations';\r\n\r\nimport type { ContentManagerLink } from '../hooks/useContentManagerInitData';\r\n\r\nconst SubNavLinkCustom = styled(SubNavLink)`\r\n  div {\r\n    width: inherit;\r\n    span:nth-child(2) {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      width: inherit;\r\n    }\r\n  }\r\n`;\r\n\r\nconst LeftMenu = () => {\r\n  const [search, setSearch] = React.useState('');\r\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\r\n  const { formatMessage, locale } = useIntl();\r\n\r\n  const collectionTypeLinks = useTypedSelector(\r\n    (state) => state['content-manager'].app.collectionTypeLinks\r\n  );\r\n\r\n  const singleTypeLinks = useTypedSelector((state) => state['content-manager'].app.singleTypeLinks);\r\n  const { schemas } = useContentTypeSchema();\r\n\r\n  const { startsWith } = useFilter(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const menu = React.useMemo(\r\n    () =>\r\n      [\r\n        {\r\n          id: 'collectionTypes',\r\n          title: formatMessage({\r\n            id: getTranslation('components.LeftMenu.collection-types'),\r\n            defaultMessage: 'Collection Types',\r\n          }),\r\n          searchable: true,\r\n          links: collectionTypeLinks,\r\n        },\r\n        {\r\n          id: 'singleTypes',\r\n          title: formatMessage({\r\n            id: getTranslation('components.LeftMenu.single-types'),\r\n            defaultMessage: 'Single Types',\r\n          }),\r\n          searchable: true,\r\n          links: singleTypeLinks,\r\n        },\r\n      ].map((section) => ({\r\n        ...section,\r\n        links: section.links\r\n          /**\r\n           * Filter by the search value\r\n           */\r\n          .filter((link) => startsWith(link.title, search))\r\n          /**\r\n           * Sort correctly using the language\r\n           */\r\n          .sort((a, b) => formatter.compare(a.title, b.title))\r\n          /**\r\n           * Apply the formated strings to the links from react-intl\r\n           */\r\n          .map((link) => {\r\n            return {\r\n              ...link,\r\n              title: formatMessage({ id: link.title, defaultMessage: link.title }),\r\n            };\r\n          }),\r\n      })),\r\n    [collectionTypeLinks, search, singleTypeLinks, startsWith, formatMessage, formatter]\r\n  );\r\n\r\n  const handleClear = () => {\r\n    setSearch('');\r\n  };\r\n\r\n  const handleChangeSearch = ({ target: { value } }: { target: { value: string } }) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const label = formatMessage({\r\n    id: getTranslation('header.name'),\r\n    defaultMessage: 'Content Manager',\r\n  });\r\n\r\n  const getPluginsParamsForLink = (link: ContentManagerLink) => {\r\n    const schema = schemas.find((schema) => schema.uid === link.uid);\r\n    const isI18nEnabled = Boolean((schema?.pluginOptions?.i18n as any)?.localized);\r\n\r\n    // The search params have the i18n plugin\r\n    if (query.plugins && 'i18n' in query.plugins) {\r\n      // Prepare removal of i18n from the plugins search params\r\n      const { i18n, ...restPlugins } = query.plugins;\r\n\r\n      // i18n is not enabled, remove it from the plugins search params\r\n      if (!isI18nEnabled) {\r\n        return restPlugins;\r\n      }\r\n\r\n      // i18n is enabled, put the plugins search params back together\r\n      return { i18n, ...restPlugins };\r\n    }\r\n\r\n    return query.plugins;\r\n  };\r\n\r\n  return (\r\n    <SubNav aria-label={label}>\r\n      <SubNavHeader\r\n        label={label}\r\n        searchable\r\n        value={search}\r\n        onChange={handleChangeSearch}\r\n        onClear={handleClear}\r\n        searchLabel={formatMessage({\r\n          id: 'content-manager.components.LeftMenu.Search.label',\r\n          defaultMessage: 'Search for a content type',\r\n        })}\r\n      />\r\n      <SubNavSections>\r\n        {menu.map((section) => {\r\n          return (\r\n            <SubNavSection\r\n              key={section.id}\r\n              label={section.title}\r\n              badgeLabel={section.links.length.toString()}\r\n            >\r\n              {section.links.map((link) => {\r\n                return (\r\n                  <SubNavLinkCustom\r\n                    tag={NavLink}\r\n                    key={link.uid}\r\n                    to={{\r\n                      pathname: link.to,\r\n                      search: stringify({\r\n                        ...parse(link.search ?? ''),\r\n                        plugins: getPluginsParamsForLink(link),\r\n                      }),\r\n                    }}\r\n                    width=\"100%\"\r\n                  >\r\n                    {link.title}\r\n                  </SubNavLinkCustom>\r\n                );\r\n              })}\r\n            </SubNavSection>\r\n          );\r\n        })}\r\n      </SubNavSections>\r\n    </SubNav>\r\n  );\r\n};\r\n\r\nexport { LeftMenu };\r\n","import { useEffect } from 'react';\r\n\r\nimport {\r\n  useAuth,\r\n  type Permission,\r\n  useNotification,\r\n  useStrapiApp,\r\n  useAPIErrorHandler,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { useNotifyAT } from '@strapi/design-system';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../constants/collections';\r\nimport { HOOKS } from '../constants/hooks';\r\nimport { AppState, setInitialData } from '../modules/app';\r\nimport { useTypedDispatch, useTypedSelector } from '../modules/hooks';\r\nimport { useGetAllContentTypeSettingsQuery } from '../services/contentTypes';\r\nimport { useGetInitialDataQuery } from '../services/init';\r\nimport { getTranslation } from '../utils/translations';\r\n\r\nimport type { Component } from '../../../shared/contracts/components';\r\nimport type {\r\n  ContentType,\r\n  FindContentTypesSettings,\r\n} from '../../../shared/contracts/content-types';\r\nimport type { GetInitData } from '../../../shared/contracts/init';\r\n\r\nconst { MUTATE_COLLECTION_TYPES_LINKS, MUTATE_SINGLE_TYPES_LINKS } = HOOKS;\r\n\r\ninterface ContentManagerLink {\r\n  permissions: Permission[];\r\n  search: string | null;\r\n  kind: string;\r\n  title: string;\r\n  to: string;\r\n  uid: string;\r\n  name: string;\r\n  isDisplayed: boolean;\r\n}\r\n\r\nconst useContentManagerInitData = (): AppState => {\r\n  const { toggleNotification } = useNotification();\r\n  const dispatch = useTypedDispatch();\r\n  const runHookWaterfall = useStrapiApp(\r\n    'useContentManagerInitData',\r\n    (state) => state.runHookWaterfall\r\n  );\r\n  const { notifyStatus } = useNotifyAT();\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\r\n  const checkUserHasPermissions = useAuth(\r\n    'useContentManagerInitData',\r\n    (state) => state.checkUserHasPermissions\r\n  );\r\n\r\n  const state = useTypedSelector((state) => state['content-manager'].app);\r\n\r\n  const initialDataQuery = useGetInitialDataQuery(undefined, {\r\n    /**\r\n     * TODO: remove this when the CTB has been refactored to use redux-toolkit-query\r\n     * and it can invalidate the cache on mutation\r\n     */\r\n    refetchOnMountOrArgChange: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (initialDataQuery.data) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: getTranslation('App.schemas.data-loaded'),\r\n          defaultMessage: 'The schemas have been successfully loaded.',\r\n        })\r\n      );\r\n    }\r\n  }, [formatMessage, initialDataQuery.data, notifyStatus]);\r\n\r\n  useEffect(() => {\r\n    if (initialDataQuery.error) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(initialDataQuery.error) });\r\n    }\r\n  }, [formatAPIError, initialDataQuery.error, toggleNotification]);\r\n\r\n  const contentTypeSettingsQuery = useGetAllContentTypeSettingsQuery();\r\n\r\n  useEffect(() => {\r\n    if (contentTypeSettingsQuery.error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(contentTypeSettingsQuery.error),\r\n      });\r\n    }\r\n  }, [formatAPIError, contentTypeSettingsQuery.error, toggleNotification]);\r\n\r\n  const formatData = async (\r\n    components: Component[],\r\n    contentTypes: ContentType[],\r\n    fieldSizes: GetInitData.Response['data']['fieldSizes'],\r\n    contentTypeConfigurations: FindContentTypesSettings.Response['data']\r\n  ) => {\r\n    /**\r\n     * We group these by the two types we support. We do with an object because we can use default\r\n     * values of arrays to make sure we always have an array to manipulate further on if, for example,\r\n     * a user has not made any single types.\r\n     *\r\n     * This means we have to manually add new content types to this hook if we add a new type – but\r\n     * the safety is worth it.\r\n     */\r\n    const { collectionType: collectionTypeLinks, singleType: singleTypeLinks } =\r\n      contentTypes.reduce<{\r\n        collectionType: ContentType[];\r\n        singleType: ContentType[];\r\n      }>(\r\n        (acc, model) => {\r\n          acc[model.kind].push(model);\r\n          return acc;\r\n        },\r\n        {\r\n          collectionType: [],\r\n          singleType: [],\r\n        }\r\n      );\r\n    const collectionTypeSectionLinks = generateLinks(\r\n      collectionTypeLinks,\r\n      'collectionTypes',\r\n      contentTypeConfigurations\r\n    );\r\n    const singleTypeSectionLinks = generateLinks(singleTypeLinks, 'singleTypes');\r\n\r\n    // Collection Types verifications\r\n    const collectionTypeLinksPermissions = await Promise.all(\r\n      collectionTypeSectionLinks.map(({ permissions }) => checkUserHasPermissions(permissions))\r\n    );\r\n\r\n    const authorizedCollectionTypeLinks = collectionTypeSectionLinks.filter(\r\n      (_, index) => collectionTypeLinksPermissions[index].length > 0\r\n    );\r\n\r\n    // Single Types verifications\r\n    const singleTypeLinksPermissions = await Promise.all(\r\n      singleTypeSectionLinks.map(({ permissions }) => checkUserHasPermissions(permissions))\r\n    );\r\n    const authorizedSingleTypeLinks = singleTypeSectionLinks.filter(\r\n      (_, index) => singleTypeLinksPermissions[index].length > 0\r\n    );\r\n    const { ctLinks } = runHookWaterfall(MUTATE_COLLECTION_TYPES_LINKS, {\r\n      ctLinks: authorizedCollectionTypeLinks,\r\n      models: contentTypes,\r\n    });\r\n    const { stLinks } = runHookWaterfall(MUTATE_SINGLE_TYPES_LINKS, {\r\n      stLinks: authorizedSingleTypeLinks,\r\n      models: contentTypes,\r\n    });\r\n\r\n    dispatch(\r\n      setInitialData({\r\n        authorizedCollectionTypeLinks: ctLinks,\r\n        authorizedSingleTypeLinks: stLinks,\r\n        components,\r\n        contentTypeSchemas: contentTypes,\r\n        fieldSizes,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (initialDataQuery.data && contentTypeSettingsQuery.data) {\r\n      formatData(\r\n        initialDataQuery.data.components,\r\n        initialDataQuery.data.contentTypes,\r\n        initialDataQuery.data.fieldSizes,\r\n        contentTypeSettingsQuery.data\r\n      );\r\n    }\r\n  }, [initialDataQuery.data, contentTypeSettingsQuery.data]);\r\n\r\n  return { ...state };\r\n};\r\n\r\nconst generateLinks = (\r\n  links: ContentType[],\r\n  type: 'collectionTypes' | 'singleTypes',\r\n  configurations: FindContentTypesSettings.Response['data'] = []\r\n) => {\r\n  return links\r\n    .filter((link) => link.isDisplayed)\r\n    .map((link) => {\r\n      const collectionTypesPermissions = [\r\n        { action: 'plugin::content-manager.explorer.create', subject: link.uid },\r\n        { action: 'plugin::content-manager.explorer.read', subject: link.uid },\r\n      ];\r\n      const singleTypesPermissions = [\r\n        { action: 'plugin::content-manager.explorer.read', subject: link.uid },\r\n      ];\r\n      const permissions =\r\n        type === 'collectionTypes' ? collectionTypesPermissions : singleTypesPermissions;\r\n\r\n      const currentContentTypeConfig = configurations.find(({ uid }) => uid === link.uid);\r\n\r\n      let search = null;\r\n\r\n      if (currentContentTypeConfig) {\r\n        const searchParams = {\r\n          page: 1,\r\n          pageSize: currentContentTypeConfig.settings.pageSize,\r\n          sort: `${currentContentTypeConfig.settings.defaultSortBy}:${currentContentTypeConfig.settings.defaultSortOrder}`,\r\n        };\r\n\r\n        search = stringify(searchParams, { encode: false });\r\n      }\r\n\r\n      return {\r\n        permissions,\r\n        search,\r\n        kind: link.kind,\r\n        title: link.info.displayName,\r\n        to: `/content-manager/${link.kind === 'collectionType' ? COLLECTION_TYPES : SINGLE_TYPES}/${\r\n          link.uid\r\n        }`,\r\n        uid: link.uid,\r\n        // Used for the list item key in the helper plugin\r\n        name: link.uid,\r\n        isDisplayed: link.isDisplayed,\r\n      } satisfies ContentManagerLink;\r\n    });\r\n};\r\n\r\nexport { useContentManagerInitData };\r\nexport type { ContentManagerLink };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { Page, useGuidedTour, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate, Outlet, useLocation, useMatch } from 'react-router-dom';\r\n\r\nimport { DragLayer, DragLayerProps } from './components/DragLayer';\r\nimport { CardDragPreview } from './components/DragPreviews/CardDragPreview';\r\nimport { ComponentDragPreview } from './components/DragPreviews/ComponentDragPreview';\r\nimport { RelationDragPreview } from './components/DragPreviews/RelationDragPreview';\r\nimport { LeftMenu } from './components/LeftMenu';\r\nimport { ItemTypes } from './constants/dragAndDrop';\r\nimport { useContentManagerInitData } from './hooks/useContentManagerInitData';\r\nimport { getTranslation } from './utils/translations';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Layout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Layout = () => {\r\n  const contentTypeMatch = useMatch('/content-manager/:kind/:uid/*');\r\n\r\n  const { isLoading, collectionTypeLinks, models, singleTypeLinks } = useContentManagerInitData();\r\n  const authorisedModels = [...collectionTypeLinks, ...singleTypeLinks].sort((a, b) =>\r\n    a.title.localeCompare(b.title)\r\n  );\r\n\r\n  const { pathname } = useLocation();\r\n  const { formatMessage } = useIntl();\r\n  const startSection = useGuidedTour('Layout', (state) => state.startSection);\r\n  const startSectionRef = React.useRef(startSection);\r\n\r\n  React.useEffect(() => {\r\n    if (startSectionRef.current) {\r\n      startSectionRef.current('contentManager');\r\n    }\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Page.Title>\r\n          {formatMessage({\r\n            id: getTranslation('plugin.name'),\r\n            defaultMessage: 'Content Manager',\r\n          })}\r\n        </Page.Title>\r\n        <Page.Loading />\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Array of models that are displayed in the content manager\r\n  const supportedModelsToDisplay = models.filter(({ isDisplayed }) => isDisplayed);\r\n\r\n  // Redirect the user to the 403 page\r\n  if (\r\n    authorisedModels.length === 0 &&\r\n    supportedModelsToDisplay.length > 0 &&\r\n    pathname !== '/content-manager/403'\r\n  ) {\r\n    return <Navigate to=\"/403\" />;\r\n  }\r\n\r\n  // Redirect the user to the create content type page\r\n  if (supportedModelsToDisplay.length === 0 && pathname !== '/no-content-types') {\r\n    return <Navigate to=\"/no-content-types\" />;\r\n  }\r\n\r\n  if (!contentTypeMatch && authorisedModels.length > 0) {\r\n    return (\r\n      <Navigate\r\n        to={{\r\n          pathname: authorisedModels[0].to,\r\n          search: authorisedModels[0].search ?? '',\r\n        }}\r\n        replace\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage({\r\n          id: getTranslation('plugin.name'),\r\n          defaultMessage: 'Content Manager',\r\n        })}\r\n      </Page.Title>\r\n      <Layouts.Root sideNav={<LeftMenu />}>\r\n        <DragLayer renderItem={renderDraglayerItem} />\r\n        <Outlet />\r\n      </Layouts.Root>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * renderDraglayerItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nfunction renderDraglayerItem({ type, item }: Parameters<DragLayerProps['renderItem']>[0]) {\r\n  if (!type || (type && typeof type !== 'string')) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Because a user may have multiple relations / dynamic zones / repeable fields in the same content type,\r\n   * we append the fieldName for the item type to make them unique, however, we then want to extract that\r\n   * first type to apply the correct preview.\r\n   */\r\n  const [actualType] = type.split('_');\r\n\r\n  switch (actualType) {\r\n    case ItemTypes.EDIT_FIELD:\r\n    case ItemTypes.FIELD:\r\n      return <CardDragPreview label={item.label} />;\r\n    case ItemTypes.COMPONENT:\r\n    case ItemTypes.DYNAMIC_ZONE:\r\n      return <ComponentDragPreview displayedValue={item.displayedValue} />;\r\n\r\n    case ItemTypes.RELATION:\r\n      return <RelationDragPreview {...item} />;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport { Layout };\r\n"],"names":["useDragLayer","jsx","Box","jsxs","Flex","CaretDown","Typography","IconButton","Trash","Drag","styled","FlexWrapper","LinkEllipsis","DocumentStatus","DisconnectButton","Cross","SubNavLink","React","useQueryParams","useIntl","useTypedSelector","useContentTypeSchema","useFilter","useCollator","getTranslation","schema","SubNav","SubNavHeader","SubNavSections","SubNavSection","NavLink","stringify","parse","HOOKS","useNotification","useTypedDispatch","useStrapiApp","state","useNotifyAT","useAPIErrorHandler","useAuth","useGetInitialDataQuery","useEffect","useGetAllContentTypeSettingsQuery","index","setInitialData","COLLECTION_TYPES","SINGLE_TYPES","useMatch","useLocation","useGuidedTour","Fragment","Page","Navigate","Layouts","Outlet","ItemTypes","CardDragPreview"],"mappings":"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"}