{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { join } from 'node:path';\r\nimport nodePlop from 'node-plop';\r\n\r\n// Starts the Plop CLI programmatically\r\nexport const runCLI = async () => {\r\n  const { Plop, run } = await import('plop');\r\n\r\n  Plop.prepare(\r\n    {\r\n      configPath: join(__dirname, 'plopfile.js'),\r\n    },\r\n    (env) => {\r\n      const argv = process.argv.slice(2); // Extract command-line arguments\r\n      Plop.execute(env, argv, (env, argv) => run(env, argv, true)); // Pass the third argument 'true' for passArgsBeforeDashes\r\n    }\r\n  );\r\n};\r\n\r\n// Runs a generator programmatically without prompts\r\nexport const generate = async <T extends Record<string, any>>(\r\n  generatorName: string,\r\n  options: T,\r\n  { dir = process.cwd(), plopFile = 'plopfile.js' } = {}\r\n) => {\r\n  const plop = nodePlop(join(__dirname, plopFile), {\r\n    destBasePath: join(dir, 'src'),\r\n    force: false,\r\n  });\r\n\r\n  const generator = plop.getGenerator(generatorName);\r\n  await generator.runActions(options satisfies T, {\r\n    onSuccess() {},\r\n    onFailure() {},\r\n    onComment() {},\r\n  });\r\n};\r\n"],"names":["join","env","argv","nodePlop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,MAAM,SAAS,YAAY;AAChC,QAAM,EAAE,MAAM,QAAQ,MAAM,OAAO,MAAM;AAEpC,OAAA;AAAA,IACH;AAAA,MACE,YAAYA,UAAAA,KAAK,WAAW,aAAa;AAAA,IAC3C;AAAA,IACA,CAAC,QAAQ;AACP,YAAM,OAAO,QAAQ,KAAK,MAAM,CAAC;AAC5B,WAAA,QAAQ,KAAK,MAAM,CAACC,MAAKC,UAAS,IAAID,MAAKC,OAAM,IAAI,CAAC;AAAA,IAAA;AAAA,EAE/D;AACF;AAGO,MAAM,WAAW,OACtB,eACA,SACA,EAAE,MAAM,QAAQ,OAAO,WAAW,cAAc,IAAI,CAAA,MACjD;AACH,QAAM,OAAOC,kBAAA,QAASH,UAAK,KAAA,WAAW,QAAQ,GAAG;AAAA,IAC/C,cAAcA,UAAAA,KAAK,KAAK,KAAK;AAAA,IAC7B,OAAO;AAAA,EAAA,CACR;AAEK,QAAA,YAAY,KAAK,aAAa,aAAa;AAC3C,QAAA,UAAU,WAAW,SAAqB;AAAA,IAC9C,YAAY;AAAA,IAAC;AAAA,IACb,YAAY;AAAA,IAAC;AAAA,IACb,YAAY;AAAA,IAAA;AAAA,EAAC,CACd;AACH;;;"}