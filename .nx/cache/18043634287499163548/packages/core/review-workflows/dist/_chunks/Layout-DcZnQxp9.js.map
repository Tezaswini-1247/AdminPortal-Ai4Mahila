{"version":3,"file":"Layout-DcZnQxp9.js","sources":["../../admin/src/routes/settings/hooks/useReviewWorkflows.ts","../../admin/src/routes/settings/constants.ts","../../admin/src/routes/settings/components/StageDragPreview.tsx","../../admin/src/routes/settings/components/Layout.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { useAPIErrorHandler, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { type MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport {\r\n  GetWorkflowsParams,\r\n  useCreateWorkflowMutation,\r\n  useDeleteWorkflowMutation,\r\n  useGetWorkflowsQuery,\r\n  useUpdateWorkflowMutation,\r\n} from '../../../services/settings';\r\n\r\nimport type { Create, Update } from '../../../../../shared/contracts/review-workflows';\r\n\r\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\r\n  id: 'notification.error',\r\n  defaultMessage: 'An error occurred, please try again',\r\n} satisfies MessageDescriptor;\r\n\r\ntype UseReviewWorkflowsArgs = GetWorkflowsParams & {\r\n  skip?: boolean;\r\n};\r\n\r\nconst useReviewWorkflows = (params: UseReviewWorkflowsArgs = {}) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { skip = false, ...queryParams } = params;\r\n\r\n  const { data, isLoading, error } = useGetWorkflowsQuery(\r\n    {\r\n      populate: ['stages', 'stageRequiredToPublish'],\r\n      ...queryParams,\r\n    },\r\n    {\r\n      skip,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const [createWorkflow] = useCreateWorkflowMutation();\r\n  const create = React.useCallback(\r\n    async (data: Create.Request['body']['data']) => {\r\n      try {\r\n        const res = await createWorkflow({ data });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return res;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'actions.created', defaultMessage: 'Created workflow' }),\r\n        });\r\n\r\n        return res;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [createWorkflow, formatAPIError, formatMessage, toggleNotification]\r\n  );\r\n\r\n  const [updateWorkflow] = useUpdateWorkflowMutation();\r\n  const update = React.useCallback(\r\n    async (id: string, data: Update.Request['body']['data']) => {\r\n      try {\r\n        const res = await updateWorkflow({ id, data });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return res;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'actions.updated', defaultMessage: 'Updated workflow' }),\r\n        });\r\n\r\n        return res;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [formatAPIError, formatMessage, toggleNotification, updateWorkflow]\r\n  );\r\n\r\n  const [deleteWorkflow] = useDeleteWorkflowMutation();\r\n  const deleteAction = React.useCallback(\r\n    async (id: string) => {\r\n      try {\r\n        const res = await deleteWorkflow({ id });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'actions.deleted', defaultMessage: 'Deleted workflow' }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [deleteWorkflow, formatAPIError, formatMessage, toggleNotification]\r\n  );\r\n\r\n  const { workflows = [], meta } = data ?? {};\r\n\r\n  return {\r\n    // meta contains e.g. the total of all workflows. we can not use\r\n    // the pagination object here, because the list is not paginated.\r\n    meta,\r\n    workflows,\r\n    isLoading,\r\n    error,\r\n    create,\r\n    delete: deleteAction,\r\n    update,\r\n  };\r\n};\r\n\r\nexport { useReviewWorkflows };\r\n","export type DragDropTypes = 'stage';\r\n\r\nexport const DRAG_DROP_TYPES: Record<Uppercase<DragDropTypes>, DragDropTypes> = {\r\n  STAGE: 'stage',\r\n};\r\n","import { Flex, Typography } from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\n\r\ninterface StageDragPreviewType {\r\n  name: string | null;\r\n}\r\n\r\nconst StageDragPreview = ({ name }: StageDragPreviewType) => {\r\n  return (\r\n    <Flex\r\n      background=\"primary100\"\r\n      borderStyle=\"dashed\"\r\n      borderColor=\"primary600\"\r\n      borderWidth=\"1px\"\r\n      gap={3}\r\n      hasRadius\r\n      padding={3}\r\n      shadow=\"tableShadow\"\r\n      width=\"30rem\"\r\n    >\r\n      <Flex\r\n        alignItems=\"center\"\r\n        background=\"neutral200\"\r\n        borderRadius=\"50%\"\r\n        height={6}\r\n        justifyContent=\"center\"\r\n        width={6}\r\n      >\r\n        <CaretDown width=\"0.8rem\" fill=\"neutral600\" />\r\n      </Flex>\r\n\r\n      <Typography fontWeight=\"bold\">{name}</Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { StageDragPreview };\r\nexport type { StageDragPreviewType };\r\n","import * as React from 'react';\r\n\r\nimport { Page, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box } from '@strapi/design-system';\r\nimport { XYCoord, useDragLayer } from 'react-dnd';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { DRAG_DROP_TYPES } from '../constants';\r\n\r\nimport { StageDragPreview } from './StageDragPreview';\r\n\r\nfunction getStyle(\r\n  initialOffset: XYCoord | null,\r\n  currentOffset: XYCoord | null,\r\n  mouseOffset: XYCoord | null\r\n) {\r\n  if (!initialOffset || !currentOffset || !mouseOffset) {\r\n    return { display: 'none' };\r\n  }\r\n\r\n  const { x, y } = mouseOffset;\r\n\r\n  return {\r\n    transform: `translate(${x}px, ${y}px)`,\r\n  };\r\n}\r\n\r\nconst DragLayerRendered = () => {\r\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\r\n    (monitor) => ({\r\n      item: monitor.getItem(),\r\n      itemType: monitor.getItemType(),\r\n      initialOffset: monitor.getInitialSourceClientOffset(),\r\n      currentOffset: monitor.getSourceClientOffset(),\r\n      isDragging: monitor.isDragging(),\r\n      mouseOffset: monitor.getClientOffset(),\r\n    })\r\n  );\r\n\r\n  if (!isDragging || itemType !== DRAG_DROP_TYPES.STAGE) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      height=\"100%\"\r\n      left={0}\r\n      position=\"fixed\"\r\n      pointerEvents=\"none\"\r\n      top={0}\r\n      zIndex={100}\r\n      width=\"100%\"\r\n    >\r\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\r\n        <StageDragPreview name={typeof item.item === 'string' ? item.item : null} />;\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Root: React.FC<React.PropsWithChildren> = ({ children }) => {\r\n  return (\r\n    <Page.Main>\r\n      <Layouts.Content>{children}</Layouts.Content>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\ninterface HeaderProps {\r\n  title: string;\r\n  navigationAction?: React.ReactNode;\r\n  primaryAction?: React.ReactNode;\r\n  secondaryAction?: React.ReactNode;\r\n  subtitle?: React.ReactNode;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ title, subtitle, navigationAction, primaryAction }) => {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: title,\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.BaseHeader\r\n        navigationAction={navigationAction}\r\n        primaryAction={primaryAction}\r\n        title={title}\r\n        subtitle={subtitle}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport { DragLayerRendered, Header, Root };\r\n"],"names":["useNotification","useIntl","useAPIErrorHandler","useGetWorkflowsQuery","React","useCreateWorkflowMutation","data","useUpdateWorkflowMutation","useDeleteWorkflowMutation","jsxs","Flex","jsx","CaretDown","Typography","useDragLayer","Box","Page","Layouts","Fragment"],"mappings":"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"}