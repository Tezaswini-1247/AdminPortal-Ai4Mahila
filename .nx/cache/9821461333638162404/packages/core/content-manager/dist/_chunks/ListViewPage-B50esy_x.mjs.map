{"version":3,"file":"ListViewPage-B50esy_x.mjs","sources":["../../admin/src/pages/ListView/components/Filters.tsx","../../admin/src/pages/ListView/components/TableCells/CellValue.tsx","../../admin/src/pages/ListView/components/TableCells/Components.tsx","../../admin/src/pages/ListView/components/TableCells/Media.tsx","../../admin/src/pages/ListView/components/TableCells/Relations.tsx","../../admin/src/pages/ListView/components/TableCells/CellContent.tsx","../../admin/src/pages/ListView/components/ViewSettingsMenu.tsx","../../admin/src/pages/ListView/ListViewPage.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {\r\n  Filters,\r\n  useField,\r\n  useAuth,\r\n  useTracking,\r\n  useQueryParams,\r\n  useAdminUsers,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Combobox, ComboboxOption, useCollator } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { CREATOR_FIELDS } from '../../../constants/attributes';\r\nimport { useContentTypeSchema } from '../../../hooks/useContentTypeSchema';\r\nimport { useDebounce } from '../../../hooks/useDebounce';\r\nimport { Schema } from '../../../hooks/useDocument';\r\nimport { useGetContentTypeConfigurationQuery } from '../../../services/contentTypes';\r\nimport { getMainField } from '../../../utils/attributes';\r\nimport { getDisplayName } from '../../../utils/users';\r\n\r\n/**\r\n * If new attributes are added, this list needs to be updated.\r\n */\r\nconst NOT_ALLOWED_FILTERS = [\r\n  'json',\r\n  'component',\r\n  'media',\r\n  'richtext',\r\n  'dynamiczone',\r\n  'password',\r\n  'blocks',\r\n];\r\nconst DEFAULT_ALLOWED_FILTERS = ['createdAt', 'updatedAt'];\r\nconst USER_FILTER_ATTRIBUTES = [...CREATOR_FIELDS, 'strapi_assignee'];\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Filters\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface FiltersProps {\r\n  disabled?: boolean;\r\n  schema: Schema;\r\n}\r\n\r\nconst FiltersImpl = ({ disabled, schema }: FiltersProps) => {\r\n  const { attributes, uid: model, options } = schema;\r\n  const { formatMessage, locale } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const allPermissions = useAuth('FiltersImpl', (state) => state.permissions);\r\n  const [{ query }] = useQueryParams<Filters.Query>();\r\n  const { schemas } = useContentTypeSchema();\r\n\r\n  const canReadAdminUsers = React.useMemo(\r\n    () =>\r\n      allPermissions.filter(\r\n        (permission) => permission.action === 'admin::users.read' && permission.subject === null\r\n      ).length > 0,\r\n    [allPermissions]\r\n  );\r\n\r\n  const selectedUserIds = (query?.filters?.$and ?? []).reduce<string[]>((acc, filter) => {\r\n    const [key, value] = Object.entries(filter)[0];\r\n    if (typeof value.id !== 'object') {\r\n      return acc;\r\n    }\r\n\r\n    const id = value.id.$eq || value.id.$ne;\r\n\r\n    if (id && USER_FILTER_ATTRIBUTES.includes(key) && !acc.includes(id)) {\r\n      acc.push(id);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  const { data: userData, isLoading: isLoadingAdminUsers } = useAdminUsers(\r\n    { filters: { id: { $in: selectedUserIds } } },\r\n    {\r\n      // fetch the list of admin users only if the filter contains users and the\r\n      // current user has permissions to display users\r\n      skip: selectedUserIds.length === 0 || !canReadAdminUsers,\r\n    }\r\n  );\r\n\r\n  const { users = [] } = userData ?? {};\r\n\r\n  const { metadata } = useGetContentTypeConfigurationQuery(model, {\r\n    selectFromResult: ({ data }) => ({ metadata: data?.contentType.metadatas ?? {} }),\r\n  });\r\n\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const displayedFilters = React.useMemo(() => {\r\n    const [{ properties: { fields = [] } = { fields: [] } }] = allPermissions.filter(\r\n      (permission) =>\r\n        permission.action === 'plugin::content-manager.explorer.read' &&\r\n        permission.subject === model\r\n    );\r\n\r\n    const allowedFields = fields.filter((field) => {\r\n      const attribute = attributes[field] ?? {};\r\n\r\n      return attribute.type && !NOT_ALLOWED_FILTERS.includes(attribute.type);\r\n    });\r\n\r\n    return (\r\n      [\r\n        'id',\r\n        ...allowedFields,\r\n        ...DEFAULT_ALLOWED_FILTERS,\r\n        ...(canReadAdminUsers ? CREATOR_FIELDS : []),\r\n      ]\r\n        .map((name) => {\r\n          const attribute = attributes[name];\r\n\r\n          if (NOT_ALLOWED_FILTERS.includes(attribute.type)) {\r\n            return null;\r\n          }\r\n\r\n          const { mainField: mainFieldName = '', label } = metadata[name].list;\r\n\r\n          let filter: Filters.Filter = {\r\n            name,\r\n            label: label ?? '',\r\n            mainField: getMainField(attribute, mainFieldName, { schemas, components: {} }),\r\n            // @ts-expect-error â€“ TODO: this is filtered out above in the `allowedFields` call but TS complains, is there a better way to solve this?\r\n            type: attribute.type,\r\n          };\r\n\r\n          if (\r\n            attribute.type === 'relation' &&\r\n            'target' in attribute &&\r\n            attribute.target === 'admin::user'\r\n          ) {\r\n            filter = {\r\n              ...filter,\r\n              input: AdminUsersFilter,\r\n              options: users.map((user) => ({\r\n                label: getDisplayName(user),\r\n                value: user.id.toString(),\r\n              })),\r\n              operators: [\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'components.FilterOptions.FILTER_TYPES.$eq',\r\n                    defaultMessage: 'is',\r\n                  }),\r\n                  value: '$eq',\r\n                },\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'components.FilterOptions.FILTER_TYPES.$ne',\r\n                    defaultMessage: 'is not',\r\n                  }),\r\n                  value: '$ne',\r\n                },\r\n              ],\r\n              mainField: {\r\n                name: 'id',\r\n                type: 'integer',\r\n              },\r\n            };\r\n          }\r\n\r\n          if (attribute.type === 'enumeration') {\r\n            filter = {\r\n              ...filter,\r\n              options: attribute.enum.map((value) => ({\r\n                label: value,\r\n                value,\r\n              })),\r\n            };\r\n          }\r\n\r\n          return filter;\r\n        })\r\n        .filter(Boolean) as Filters.Filter[]\r\n    ).toSorted((a, b) => formatter.compare(a.label, b.label));\r\n  }, [\r\n    allPermissions,\r\n    canReadAdminUsers,\r\n    model,\r\n    attributes,\r\n    metadata,\r\n    schemas,\r\n    users,\r\n    formatMessage,\r\n    formatter,\r\n  ]);\r\n\r\n  const onOpenChange = (isOpen: boolean) => {\r\n    if (isOpen) {\r\n      trackUsage('willFilterEntries');\r\n    }\r\n  };\r\n\r\n  const handleFilterChange: Filters.Props['onChange'] = (data) => {\r\n    const attribute = attributes[data.name];\r\n\r\n    if (attribute) {\r\n      trackUsage('didFilterEntries', {\r\n        useRelation: attribute.type === 'relation',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Filters.Root\r\n      disabled={disabled}\r\n      options={displayedFilters}\r\n      onOpenChange={onOpenChange}\r\n      onChange={handleFilterChange}\r\n    >\r\n      <Filters.Trigger />\r\n      <Filters.Popover />\r\n      <Filters.List />\r\n    </Filters.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AdminUsersFilter\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst AdminUsersFilter = ({ name }: Filters.ValueInputProps) => {\r\n  const [pageSize, setPageSize] = React.useState(10);\r\n  const [search, setSearch] = React.useState('');\r\n  const { formatMessage } = useIntl();\r\n\r\n  const debouncedSearch = useDebounce(search, 300);\r\n\r\n  const { data, isLoading } = useAdminUsers({\r\n    pageSize,\r\n    _q: debouncedSearch,\r\n  });\r\n  const field = useField(name);\r\n\r\n  const handleOpenChange = (isOpen?: boolean) => {\r\n    if (!isOpen) {\r\n      setPageSize(10);\r\n    }\r\n  };\r\n\r\n  const { users = [], pagination } = data ?? {};\r\n  const { pageCount = 1, page = 1 } = pagination ?? {};\r\n\r\n  return (\r\n    <Combobox\r\n      value={field.value}\r\n      aria-label={formatMessage({\r\n        id: 'content-manager.components.Filters.usersSelect.label',\r\n        defaultMessage: 'Search and select a user to filter',\r\n      })}\r\n      onOpenChange={handleOpenChange}\r\n      onChange={(value) => field.onChange(name, value)}\r\n      loading={isLoading}\r\n      onLoadMore={() => setPageSize(pageSize + 10)}\r\n      hasMoreItems={page < pageCount}\r\n      onInputChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(e.currentTarget.value);\r\n      }}\r\n    >\r\n      {users.map((user) => {\r\n        return (\r\n          <ComboboxOption key={user.id} value={user.id.toString()}>\r\n            {getDisplayName(user)}\r\n          </ComboboxOption>\r\n        );\r\n      })}\r\n    </Combobox>\r\n  );\r\n};\r\n\r\nexport { FiltersImpl as Filters };\r\nexport type { FiltersProps };\r\n","import parseISO from 'date-fns/parseISO';\r\nimport toString from 'lodash/toString';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\ninterface CellValueProps {\r\n  type: Schema.Attribute.Kind | 'custom';\r\n  value: any;\r\n}\r\n\r\nconst CellValue = ({ type, value }: CellValueProps) => {\r\n  const { formatDate, formatTime, formatNumber } = useIntl();\r\n  let formattedValue = value;\r\n\r\n  if (type === 'date') {\r\n    formattedValue = formatDate(parseISO(value), { dateStyle: 'full' });\r\n  }\r\n\r\n  if (type === 'datetime') {\r\n    formattedValue = formatDate(value, { dateStyle: 'full', timeStyle: 'short' });\r\n  }\r\n\r\n  if (type === 'time') {\r\n    const [hour, minute, second] = value.split(':');\r\n    const date = new Date();\r\n    date.setHours(hour);\r\n    date.setMinutes(minute);\r\n    date.setSeconds(second);\r\n\r\n    formattedValue = formatTime(date, {\r\n      timeStyle: 'short',\r\n    });\r\n  }\r\n\r\n  if (['float', 'decimal'].includes(type)) {\r\n    formattedValue = formatNumber(value, {\r\n      // Should be kept in sync with the corresponding value\r\n      // in the design-system/NumberInput: https://github.com/strapi/design-system/blob/main/packages/strapi-design-system/src/NumberInput/NumberInput.js#L53\r\n      maximumFractionDigits: 20,\r\n    });\r\n  }\r\n\r\n  if (['integer', 'biginteger'].includes(type)) {\r\n    formattedValue = formatNumber(value, { maximumFractionDigits: 0 });\r\n  }\r\n\r\n  return toString(formattedValue);\r\n};\r\n\r\nexport { CellValue };\r\nexport type { CellValueProps };\r\n","import { Badge, Tooltip, Typography, Menu } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { CellContentProps } from './CellContent';\r\nimport { CellValue } from './CellValue';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SingleComponent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface SingleComponentProps extends Pick<CellContentProps, 'mainField'> {\r\n  content: Schema.Attribute.Value<Schema.Attribute.Component<`${string}.${string}`, false>>;\r\n}\r\n\r\nconst SingleComponent = ({ content, mainField }: SingleComponentProps) => {\r\n  if (!mainField) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Tooltip label={content[mainField.name]}>\r\n      <Typography maxWidth=\"25rem\" textColor=\"neutral800\" ellipsis>\r\n        <CellValue type={mainField.type} value={content[mainField.name]} />\r\n      </Typography>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RepeatableComponent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface RepeatableComponentProps extends Pick<CellContentProps, 'mainField'> {\r\n  content: Schema.Attribute.Value<Schema.Attribute.Component<`${string}.${string}`, true>>;\r\n}\r\n\r\nconst RepeatableComponent = ({ content, mainField }: RepeatableComponentProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!mainField) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Menu.Root>\r\n      <Menu.Trigger onClick={(e) => e.stopPropagation()}>\r\n        <Badge>{content.length}</Badge>\r\n        {formatMessage(\r\n          {\r\n            id: 'content-manager.containers.list.items',\r\n            defaultMessage: '{number, plural, =0 {items} one {item} other {items}}',\r\n          },\r\n          { number: content.length }\r\n        )}\r\n      </Menu.Trigger>\r\n      <Menu.Content>\r\n        {content.map((item) => (\r\n          <Menu.Item key={item.id} disabled>\r\n            <Typography maxWidth=\"50rem\" ellipsis>\r\n              <CellValue type={mainField.type} value={item[mainField.name]} />\r\n            </Typography>\r\n          </Menu.Item>\r\n        ))}\r\n      </Menu.Content>\r\n    </Menu.Root>\r\n  );\r\n};\r\n\r\nexport { SingleComponent, RepeatableComponent };\r\nexport type { SingleComponentProps, RepeatableComponentProps };\r\n","import * as React from 'react';\r\n\r\nimport { Avatar, Flex, Tooltip, Typography, TypographyComponent } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { prefixFileUrlWithBackendUrl } from '../../../../utils/urls';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\ninterface MediaFile {\r\n  id?: Data.ID;\r\n  alternativeText?: string;\r\n  ext: string;\r\n  formats: {\r\n    thumbnail?: {\r\n      url?: string;\r\n    };\r\n  };\r\n  mime: string;\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Media\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface MediaSingleProps extends MediaFile {}\r\n\r\nconst getFileExtension = (ext: string) => (ext && ext[0] === '.' ? ext.substring(1) : ext);\r\n\r\nconst MediaSingle = ({ url, mime, alternativeText, name, ext, formats }: MediaSingleProps) => {\r\n  const fileURL = prefixFileUrlWithBackendUrl(url)!;\r\n\r\n  if (mime.includes('image')) {\r\n    const thumbnail = formats?.thumbnail?.url;\r\n    const mediaURL = prefixFileUrlWithBackendUrl(thumbnail) || fileURL;\r\n\r\n    return (\r\n      <Avatar.Item\r\n        src={mediaURL}\r\n        alt={alternativeText || name}\r\n        fallback={alternativeText || name}\r\n        preview\r\n      />\r\n    );\r\n  }\r\n\r\n  const fileExtension = getFileExtension(ext);\r\n  const fileName = name.length > 100 ? `${name.substring(0, 100)}...` : name;\r\n\r\n  return (\r\n    <Tooltip description={fileName}>\r\n      <FileWrapper>{fileExtension}</FileWrapper>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nconst FileWrapper = ({ children }: { children: React.ReactNode }) => {\r\n  return (\r\n    <Flex\r\n      tag=\"span\"\r\n      position=\"relative\"\r\n      borderRadius=\"50%\"\r\n      width=\"26px\"\r\n      height=\"26px\"\r\n      borderColor=\"neutral200\"\r\n      background=\"neutral150\"\r\n      paddingLeft=\"1px\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <FileTypography variant=\"sigma\" textColor=\"neutral600\">\r\n        {children}\r\n      </FileTypography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst FileTypography = styled<TypographyComponent>(Typography)`\r\n  font-size: 0.9rem;\r\n  line-height: 0.9rem;\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * MediaMultiple\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface MediaMultipleProps {\r\n  content: MediaFile[];\r\n}\r\n\r\nconst MediaMultiple = ({ content }: MediaMultipleProps) => {\r\n  return (\r\n    <Avatar.Group>\r\n      {content.map((file, index) => {\r\n        const key = `${file.id}${index}`;\r\n\r\n        if (index === 3) {\r\n          const remainingFiles = `+${content.length - 3}`;\r\n\r\n          return <FileWrapper key={key}>{remainingFiles}</FileWrapper>;\r\n        }\r\n\r\n        if (index > 3) {\r\n          return null;\r\n        }\r\n\r\n        return <MediaSingle key={key} {...file} />;\r\n      })}\r\n    </Avatar.Group>\r\n  );\r\n};\r\n\r\nexport { MediaMultiple, MediaSingle };\r\nexport type { MediaMultipleProps, MediaSingleProps };\r\n","import * as React from 'react';\r\n\r\nimport { Typography, Loader, useNotifyAT, Menu } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDoc } from '../../../../hooks/useDocument';\r\nimport { useGetRelationsQuery } from '../../../../services/relations';\r\nimport { getRelationLabel } from '../../../../utils/relations';\r\nimport { getTranslation } from '../../../../utils/translations';\r\n\r\nimport type { CellContentProps } from './CellContent';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RelationSingle\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface RelationSingleProps extends Pick<CellContentProps, 'mainField' | 'content'> {}\r\n\r\nconst RelationSingle = ({ mainField, content }: RelationSingleProps) => {\r\n  return (\r\n    <Typography maxWidth=\"50rem\" textColor=\"neutral800\" ellipsis>\r\n      {getRelationLabel(content, mainField)}\r\n    </Typography>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RelationMultiple\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface RelationMultipleProps\r\n  extends Pick<CellContentProps, 'mainField' | 'content' | 'name' | 'rowId'> {}\r\n\r\n/**\r\n * TODO: fix this component â€“ tracking issue https://strapi-inc.atlassian.net/browse/CONTENT-2184\r\n */\r\nconst RelationMultiple = ({ mainField, content, rowId, name }: RelationMultipleProps) => {\r\n  const { model } = useDoc();\r\n  const { formatMessage } = useIntl();\r\n  const { notifyStatus } = useNotifyAT();\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  const [targetField] = name.split('.');\r\n\r\n  const { data, isLoading } = useGetRelationsQuery(\r\n    {\r\n      model,\r\n      id: rowId,\r\n      targetField,\r\n    },\r\n    {\r\n      skip: !isOpen,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const contentCount = Array.isArray(content) ? content.length : content.count;\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: getTranslation('DynamicTable.relation-loaded'),\r\n          defaultMessage: 'Relations have been loaded',\r\n        })\r\n      );\r\n    }\r\n  }, [data, formatMessage, notifyStatus]);\r\n\r\n  return (\r\n    <Menu.Root onOpenChange={(isOpen) => setIsOpen(isOpen)}>\r\n      <Menu.Trigger onClick={(e) => e.stopPropagation()}>\r\n        <Typography style={{ cursor: 'pointer' }} textColor=\"neutral800\" fontWeight=\"regular\">\r\n          {contentCount > 0\r\n            ? formatMessage(\r\n                {\r\n                  id: 'content-manager.containers.list.items',\r\n                  defaultMessage: '{number} {number, plural, =0 {items} one {item} other {items}}',\r\n                },\r\n                { number: contentCount }\r\n              )\r\n            : '-'}\r\n        </Typography>\r\n      </Menu.Trigger>\r\n      <Menu.Content>\r\n        {isLoading && (\r\n          <Menu.Item disabled>\r\n            <Loader small>\r\n              {formatMessage({\r\n                id: getTranslation('ListViewTable.relation-loading'),\r\n                defaultMessage: 'Relations are loading',\r\n              })}\r\n            </Loader>\r\n          </Menu.Item>\r\n        )}\r\n        {data?.results && (\r\n          <>\r\n            {data.results.map((entry) => (\r\n              <Menu.Item key={entry.documentId} disabled>\r\n                <Typography maxWidth=\"50rem\" ellipsis>\r\n                  {getRelationLabel(entry, mainField)}\r\n                </Typography>\r\n              </Menu.Item>\r\n            ))}\r\n\r\n            {data?.pagination && data?.pagination.total > 10 && (\r\n              <Menu.Item\r\n                aria-disabled\r\n                aria-label={formatMessage({\r\n                  id: getTranslation('ListViewTable.relation-more'),\r\n                  defaultMessage: 'This relation contains more entities than displayed',\r\n                })}\r\n              >\r\n                <Typography>â€¦</Typography>\r\n              </Menu.Item>\r\n            )}\r\n          </>\r\n        )}\r\n      </Menu.Content>\r\n    </Menu.Root>\r\n  );\r\n};\r\n\r\nexport { RelationSingle, RelationMultiple };\r\nexport type { RelationSingleProps, RelationMultipleProps };\r\n","import { Tooltip, Typography } from '@strapi/design-system';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nimport { CellValue } from './CellValue';\r\nimport { SingleComponent, RepeatableComponent } from './Components';\r\nimport { MediaSingle, MediaMultiple } from './Media';\r\nimport { RelationMultiple, RelationSingle } from './Relations';\r\n\r\nimport type { ListFieldLayout } from '../../../../hooks/useDocumentLayout';\r\nimport type { Schema, Data } from '@strapi/types';\r\n\r\ninterface CellContentProps extends Omit<ListFieldLayout, 'cellFormatter'> {\r\n  content: Schema.Attribute.Value<Schema.Attribute.AnyAttribute>;\r\n  rowId: Data.ID;\r\n}\r\n\r\nconst CellContent = ({ content, mainField, attribute, rowId, name }: CellContentProps) => {\r\n  if (!hasContent(content, mainField, attribute)) {\r\n    return (\r\n      <Typography\r\n        textColor=\"neutral800\"\r\n        paddingLeft={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\r\n        paddingRight={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\r\n      >\r\n        -\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  switch (attribute.type) {\r\n    case 'media':\r\n      if (!attribute.multiple) {\r\n        return <MediaSingle {...content} />;\r\n      }\r\n\r\n      return <MediaMultiple content={content} />;\r\n\r\n    case 'relation': {\r\n      if (isSingleRelation(attribute.relation)) {\r\n        return <RelationSingle mainField={mainField} content={content} />;\r\n      }\r\n\r\n      return <RelationMultiple rowId={rowId} mainField={mainField} content={content} name={name} />;\r\n    }\r\n\r\n    case 'component':\r\n      if (attribute.repeatable) {\r\n        return <RepeatableComponent mainField={mainField} content={content} />;\r\n      }\r\n\r\n      return <SingleComponent mainField={mainField} content={content} />;\r\n\r\n    case 'string':\r\n      return (\r\n        <Tooltip description={content}>\r\n          <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\r\n            <CellValue type={attribute.type} value={content} />\r\n          </Typography>\r\n        </Tooltip>\r\n      );\r\n\r\n    default:\r\n      return (\r\n        <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\r\n          <CellValue type={attribute.type} value={content} />\r\n        </Typography>\r\n      );\r\n  }\r\n};\r\n\r\nconst hasContent = (\r\n  content: CellContentProps['content'],\r\n  mainField: CellContentProps['mainField'],\r\n  attribute: CellContentProps['attribute']\r\n) => {\r\n  if (attribute.type === 'component') {\r\n    // Repeatable fields show the ID as fallback, in case the mainField\r\n    // doesn't have any content\r\n    if (attribute.repeatable || !mainField) {\r\n      return content?.length > 0;\r\n    }\r\n\r\n    const value = content?.[mainField.name];\r\n\r\n    // relations, media ... show the id as fallback\r\n    if (mainField.name === 'id' && ![undefined, null].includes(value)) {\r\n      return true;\r\n    }\r\n\r\n    return !isEmpty(value);\r\n  }\r\n\r\n  if (attribute.type === 'relation') {\r\n    if (isSingleRelation(attribute.relation)) {\r\n      return !isEmpty(content);\r\n    }\r\n\r\n    if (Array.isArray(content)) {\r\n      return content.length > 0;\r\n    }\r\n\r\n    return content?.count > 0;\r\n  }\r\n\r\n  /*\r\n      Biginteger fields need to be treated as strings, as `isNumber`\r\n      doesn't deal with them.\r\n  */\r\n  if (['integer', 'decimal', 'float', 'number'].includes(attribute.type)) {\r\n    return typeof content === 'number';\r\n  }\r\n\r\n  if (attribute.type === 'boolean') {\r\n    return content !== null;\r\n  }\r\n\r\n  return !isEmpty(content);\r\n};\r\n\r\nconst isSingleRelation = (\r\n  type: Extract<CellContentProps['attribute'], { type: 'relation' }>['relation']\r\n) => ['oneToOne', 'manyToOne', 'oneToOneMorph'].includes(type);\r\n\r\nexport { CellContent };\r\nexport type { CellContentProps };\r\n","import * as React from 'react';\r\n\r\nimport { useTracking, useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Flex,\r\n  IconButton,\r\n  Popover,\r\n  Checkbox,\r\n  TextButton,\r\n  Typography,\r\n  useCollator,\r\n  LinkButton,\r\n} from '@strapi/design-system';\r\nimport { Cog, ListPlus } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { useDocumentLayout } from '../../../hooks/useDocumentLayout';\r\nimport { useTypedSelector } from '../../../modules/hooks';\r\nimport { checkIfAttributeIsDisplayable } from '../../../utils/attributes';\r\n\r\ninterface ViewSettingsMenuProps extends FieldPickerProps {}\r\n\r\nconst ViewSettingsMenu = (props: ViewSettingsMenuProps) => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations ?? []\r\n  );\r\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\r\n  const { formatMessage } = useIntl();\r\n  const {\r\n    allowedActions: { canConfigureView },\r\n  } = useRBAC(permissions);\r\n\r\n  return (\r\n    <Popover.Root>\r\n      <Popover.Trigger>\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: 'components.ViewSettings.tooltip',\r\n            defaultMessage: 'View Settings',\r\n          })}\r\n        >\r\n          <Cog />\r\n        </IconButton>\r\n      </Popover.Trigger>\r\n      <Popover.Content side=\"bottom\" align=\"end\" sideOffset={4}>\r\n        <Flex alignItems=\"stretch\" direction=\"column\" padding={3} gap={3}>\r\n          {canConfigureView ? (\r\n            <LinkButton\r\n              size=\"S\"\r\n              startIcon={<ListPlus />}\r\n              variant=\"secondary\"\r\n              tag={NavLink}\r\n              to={{\r\n                pathname: 'configurations/list',\r\n                search: query.plugins\r\n                  ? stringify({ plugins: query.plugins }, { encode: false })\r\n                  : '',\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'app.links.configure-view',\r\n                defaultMessage: 'Configure the view',\r\n              })}\r\n            </LinkButton>\r\n          ) : null}\r\n          <FieldPicker {...props} />\r\n        </Flex>\r\n      </Popover.Content>\r\n    </Popover.Root>\r\n  );\r\n};\r\n\r\ninterface FieldPickerProps {\r\n  headers?: string[];\r\n  setHeaders: (headers: string[]) => void;\r\n  resetHeaders: () => void;\r\n}\r\n\r\nconst FieldPicker = ({ headers = [], resetHeaders, setHeaders }: FieldPickerProps) => {\r\n  const { trackUsage } = useTracking();\r\n  const { formatMessage, locale } = useIntl();\r\n\r\n  const { schema, model } = useDoc();\r\n  const { list } = useDocumentLayout(model);\r\n\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const attributes = schema?.attributes ?? {};\r\n\r\n  const columns = Object.keys(attributes)\r\n    .filter((name) => checkIfAttributeIsDisplayable(attributes[name]))\r\n    .map((name) => ({\r\n      name,\r\n      label: list.metadatas[name]?.label ?? '',\r\n    }))\r\n    .sort((a, b) => formatter.compare(a.label, b.label));\r\n\r\n  const handleChange = (name: string) => {\r\n    trackUsage('didChangeDisplayedFields');\r\n\r\n    /**\r\n     * create an array of the new headers, if the new name exists it should be removed,\r\n     * otherwise it should be added\r\n     */\r\n    const newHeaders = headers.includes(name)\r\n      ? headers.filter((header) => header !== name)\r\n      : [...headers, name];\r\n\r\n    setHeaders(newHeaders);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    resetHeaders();\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      tag=\"fieldset\"\r\n      direction=\"column\"\r\n      alignItems=\"stretch\"\r\n      gap={3}\r\n      borderWidth={0}\r\n      maxHeight={'240px'}\r\n      overflow={'scroll'}\r\n    >\r\n      <Flex justifyContent=\"space-between\">\r\n        <Typography tag=\"legend\" variant=\"pi\" fontWeight=\"bold\">\r\n          {formatMessage({\r\n            id: 'containers.list.displayedFields',\r\n            defaultMessage: 'Displayed fields',\r\n          })}\r\n        </Typography>\r\n\r\n        <TextButton onClick={handleReset}>\r\n          {formatMessage({\r\n            id: 'app.components.Button.reset',\r\n            defaultMessage: 'Reset',\r\n          })}\r\n        </TextButton>\r\n      </Flex>\r\n\r\n      <Flex direction=\"column\" alignItems=\"stretch\">\r\n        {columns.map((header) => {\r\n          const isActive = headers.includes(header.name);\r\n\r\n          return (\r\n            <Flex\r\n              wrap=\"wrap\"\r\n              gap={2}\r\n              background={isActive ? 'primary100' : 'transparent'}\r\n              hasRadius\r\n              padding={2}\r\n              key={header.name}\r\n            >\r\n              <Checkbox\r\n                onCheckedChange={() => handleChange(header.name)}\r\n                checked={isActive}\r\n                name={header.name}\r\n              >\r\n                <Typography fontSize={1}>{header.label}</Typography>\r\n              </Checkbox>\r\n            </Flex>\r\n          );\r\n        })}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { ViewSettingsMenu };\r\nexport type { ViewSettingsMenuProps, FieldPickerProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  Page,\r\n  Pagination,\r\n  SearchInput,\r\n  Table,\r\n  BackButton,\r\n  useNotification,\r\n  useStrapiApp,\r\n  useTracking,\r\n  useAPIErrorHandler,\r\n  useQueryParams,\r\n  useRBAC,\r\n  Layouts,\r\n  useTable,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Typography, ButtonProps } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, Link as ReactRouterLink, useParams } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { InjectionZone } from '../../components/InjectionZone';\r\nimport { HOOKS } from '../../constants/hooks';\r\nimport { PERMISSIONS } from '../../constants/plugin';\r\nimport { DocumentRBAC, useDocumentRBAC } from '../../features/DocumentRBAC';\r\nimport { useDoc } from '../../hooks/useDocument';\r\nimport {\r\n  ListFieldLayout,\r\n  convertListLayoutToFieldLayouts,\r\n  useDocumentLayout,\r\n} from '../../hooks/useDocumentLayout';\r\nimport { usePrev } from '../../hooks/usePrev';\r\nimport { useGetAllDocumentsQuery } from '../../services/documents';\r\nimport { buildValidParams } from '../../utils/api';\r\nimport { getTranslation } from '../../utils/translations';\r\nimport { getDisplayName } from '../../utils/users';\r\nimport { DocumentStatus } from '../EditView/components/DocumentStatus';\r\n\r\nimport { BulkActionsRenderer } from './components/BulkActions/Actions';\r\nimport { Filters } from './components/Filters';\r\nimport { TableActions } from './components/TableActions';\r\nimport { CellContent } from './components/TableCells/CellContent';\r\nimport { ViewSettingsMenu } from './components/ViewSettingsMenu';\r\n\r\nimport type { Modules } from '@strapi/types';\r\n\r\nconst { INJECT_COLUMN_IN_TABLE } = HOOKS;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListViewPage\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\r\n  overflow-wrap: anywhere;\r\n`;\r\n\r\nconst ListViewPage = () => {\r\n  const { trackUsage } = useTracking();\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\r\n\r\n  const { collectionType, model, schema } = useDoc();\r\n  const { list } = useDocumentLayout(model);\r\n\r\n  const [displayedHeaders, setDisplayedHeaders] = React.useState<ListFieldLayout[]>([]);\r\n\r\n  const listLayout = usePrev(list.layout);\r\n  React.useEffect(() => {\r\n    /**\r\n     * ONLY update the displayedHeaders if the document\r\n     * layout has actually changed in value.\r\n     */\r\n    if (!isEqual(listLayout, list.layout)) {\r\n      setDisplayedHeaders(list.layout);\r\n    }\r\n  }, [list.layout, listLayout]);\r\n\r\n  const handleSetHeaders = (headers: string[]) => {\r\n    setDisplayedHeaders(\r\n      convertListLayoutToFieldLayouts(headers, schema!.attributes, list.metadatas)\r\n    );\r\n  };\r\n\r\n  const [{ query }] = useQueryParams<{\r\n    plugins?: Record<string, unknown>;\r\n    page?: string;\r\n    pageSize?: string;\r\n    sort?: string;\r\n  }>({\r\n    page: '1',\r\n    pageSize: list.settings.pageSize.toString(),\r\n    sort: list.settings.defaultSortBy\r\n      ? `${list.settings.defaultSortBy}:${list.settings.defaultSortOrder}`\r\n      : '',\r\n  });\r\n\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  const { data, error, isFetching } = useGetAllDocumentsQuery({\r\n    model,\r\n    params,\r\n  });\r\n\r\n  /**\r\n   * If the API returns an error, display a notification\r\n   */\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const { results = [], pagination } = data ?? {};\r\n\r\n  React.useEffect(() => {\r\n    if (pagination && pagination.pageCount > 0 && pagination.page > pagination.pageCount) {\r\n      navigate(\r\n        {\r\n          search: stringify({\r\n            ...query,\r\n            page: pagination.pageCount,\r\n          }),\r\n        },\r\n        { replace: true }\r\n      );\r\n    }\r\n  }, [pagination, formatMessage, query, navigate]);\r\n\r\n  const { canCreate } = useDocumentRBAC('ListViewPage', ({ canCreate }) => ({\r\n    canCreate,\r\n  }));\r\n\r\n  const runHookWaterfall = useStrapiApp('ListViewPage', ({ runHookWaterfall }) => runHookWaterfall);\r\n  /**\r\n   * Run the waterfall and then inject our additional table headers.\r\n   */\r\n  const tableHeaders = React.useMemo(() => {\r\n    const headers = runHookWaterfall(INJECT_COLUMN_IN_TABLE, {\r\n      displayedHeaders,\r\n      layout: list,\r\n    });\r\n\r\n    const formattedHeaders = headers.displayedHeaders.map<ListFieldLayout>((header) => {\r\n      /**\r\n       * When the header label is a string, it is an attribute on the current content-type:\r\n       * Use the attribute name value to compute the translation.\r\n       * Otherwise, it should be a  translation object coming from a plugin that injects into the table (ie i18n, content-releases, review-workflows):\r\n       * Use the translation object as is.\r\n       */\r\n      const translation =\r\n        typeof header.label === 'string'\r\n          ? {\r\n              id: `content-manager.content-types.${model}.${header.name}`,\r\n              defaultMessage: header.label,\r\n            }\r\n          : header.label;\r\n\r\n      return {\r\n        ...header,\r\n        label: formatMessage(translation),\r\n        name: `${header.name}${header.mainField?.name ? `.${header.mainField.name}` : ''}`,\r\n      };\r\n    });\r\n\r\n    if (schema?.options?.draftAndPublish) {\r\n      formattedHeaders.push({\r\n        attribute: {\r\n          type: 'custom',\r\n        },\r\n        name: 'status',\r\n        label: formatMessage({\r\n          id: getTranslation(`containers.list.table-headers.status`),\r\n          defaultMessage: 'status',\r\n        }),\r\n        searchable: false,\r\n        sortable: false,\r\n      } satisfies ListFieldLayout);\r\n    }\r\n\r\n    return formattedHeaders;\r\n  }, [\r\n    displayedHeaders,\r\n    formatMessage,\r\n    list,\r\n    runHookWaterfall,\r\n    schema?.options?.draftAndPublish,\r\n    model,\r\n  ]);\r\n\r\n  if (isFetching) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  const contentTypeTitle = schema?.info.displayName ?? 'Untitled';\r\n\r\n  const handleRowClick = (id: Modules.Documents.ID) => () => {\r\n    trackUsage('willEditEntryFromList');\r\n    navigate({\r\n      pathname: id.toString(),\r\n      search: stringify({ plugins: query.plugins }),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page.Main>\r\n      <Page.Title>{`${contentTypeTitle}`}</Page.Title>\r\n      <LayoutsHeaderCustom\r\n        primaryAction={canCreate ? <CreateButton /> : null}\r\n        subtitle={formatMessage(\r\n          {\r\n            id: getTranslation('pages.ListView.header-subtitle'),\r\n            defaultMessage:\r\n              '{number, plural, =0 {# entries} one {# entry} other {# entries}} found',\r\n          },\r\n          { number: pagination?.total }\r\n        )}\r\n        title={contentTypeTitle}\r\n        navigationAction={<BackButton />}\r\n      />\r\n      <Layouts.Action\r\n        endActions={\r\n          <>\r\n            <InjectionZone area=\"listView.actions\" />\r\n            <ViewSettingsMenu\r\n              setHeaders={handleSetHeaders}\r\n              resetHeaders={() => setDisplayedHeaders(list.layout)}\r\n              headers={displayedHeaders.map((header) => header.name)}\r\n            />\r\n          </>\r\n        }\r\n        startActions={\r\n          <>\r\n            {list.settings.searchable && (\r\n              <SearchInput\r\n                disabled={results.length === 0}\r\n                label={formatMessage(\r\n                  { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\r\n                  { target: contentTypeTitle }\r\n                )}\r\n                placeholder={formatMessage({\r\n                  id: 'global.search',\r\n                  defaultMessage: 'Search',\r\n                })}\r\n                trackedEvent=\"didSearch\"\r\n              />\r\n            )}\r\n            {list.settings.filterable && schema ? (\r\n              <Filters disabled={results.length === 0} schema={schema} />\r\n            ) : null}\r\n          </>\r\n        }\r\n      />\r\n      <Layouts.Content>\r\n        <Flex gap={4} direction=\"column\" alignItems=\"stretch\">\r\n          <Table.Root rows={results} headers={tableHeaders} isLoading={isFetching}>\r\n            <TableActionsBar />\r\n            <Table.Content>\r\n              <Table.Head>\r\n                <Table.HeaderCheckboxCell />\r\n                {tableHeaders.map((header: ListFieldLayout) => (\r\n                  <Table.HeaderCell key={header.name} {...header} />\r\n                ))}\r\n              </Table.Head>\r\n              <Table.Loading />\r\n              <Table.Empty action={canCreate ? <CreateButton variant=\"secondary\" /> : null} />\r\n              <Table.Body>\r\n                {results.map((row) => {\r\n                  return (\r\n                    <Table.Row\r\n                      cursor=\"pointer\"\r\n                      key={row.id}\r\n                      onClick={handleRowClick(row.documentId)}\r\n                    >\r\n                      <Table.CheckboxCell id={row.id} />\r\n                      {tableHeaders.map(({ cellFormatter, ...header }) => {\r\n                        if (header.name === 'status') {\r\n                          const { status } = row;\r\n\r\n                          return (\r\n                            <Table.Cell key={header.name}>\r\n                              <DocumentStatus status={status} maxWidth={'min-content'} />\r\n                            </Table.Cell>\r\n                          );\r\n                        }\r\n                        if (['createdBy', 'updatedBy'].includes(header.name.split('.')[0])) {\r\n                          // Display the users full name\r\n                          // Some entries doesn't have a user assigned as creator/updater (ex: entries created through content API)\r\n                          // In this case, we display a dash\r\n                          return (\r\n                            <Table.Cell key={header.name}>\r\n                              <Typography textColor=\"neutral800\">\r\n                                {row[header.name.split('.')[0]]\r\n                                  ? getDisplayName(row[header.name.split('.')[0]])\r\n                                  : '-'}\r\n                              </Typography>\r\n                            </Table.Cell>\r\n                          );\r\n                        }\r\n                        if (typeof cellFormatter === 'function') {\r\n                          return (\r\n                            <Table.Cell key={header.name}>\r\n                              {/* @ts-expect-error â€“ TODO: fix this TS error */}\r\n                              {cellFormatter(row, header, { collectionType, model })}\r\n                            </Table.Cell>\r\n                          );\r\n                        }\r\n                        return (\r\n                          <Table.Cell key={header.name}>\r\n                            <CellContent\r\n                              content={row[header.name.split('.')[0]]}\r\n                              rowId={row.documentId}\r\n                              {...header}\r\n                            />\r\n                          </Table.Cell>\r\n                        );\r\n                      })}\r\n                      {/* we stop propogation here to allow the menu to trigger it's events without triggering the row redirect */}\r\n                      <ActionsCell onClick={(e) => e.stopPropagation()}>\r\n                        <TableActions document={row} />\r\n                      </ActionsCell>\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n              </Table.Body>\r\n            </Table.Content>\r\n          </Table.Root>\r\n          <Pagination.Root\r\n            {...pagination}\r\n            onPageSizeChange={() => trackUsage('willChangeNumberOfEntriesPerPage')}\r\n          >\r\n            <Pagination.PageSize />\r\n            <Pagination.Links />\r\n          </Pagination.Root>\r\n        </Flex>\r\n      </Layouts.Content>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nconst ActionsCell = styled(Table.Cell)`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TableActionsBar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst TableActionsBar = () => {\r\n  const selectRow = useTable('TableActionsBar', (state) => state.selectRow);\r\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\r\n  const locale = query?.plugins?.i18n?.locale;\r\n  const prevLocale = usePrev(locale);\r\n\r\n  // TODO: find a better way to reset the selected rows when the locale changes across all the app\r\n  React.useEffect(() => {\r\n    if (prevLocale !== locale) {\r\n      selectRow([]);\r\n    }\r\n  }, [selectRow, prevLocale, locale]);\r\n\r\n  return (\r\n    <Table.ActionBar>\r\n      <BulkActionsRenderer />\r\n    </Table.ActionBar>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CreateButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CreateButtonProps extends Pick<ButtonProps, 'variant'> {}\r\n\r\nconst CreateButton = ({ variant }: CreateButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const [{ query }] = useQueryParams<{ plugins: object }>();\r\n\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      tag={ReactRouterLink}\r\n      onClick={() => {\r\n        trackUsage('willCreateEntry', { status: 'draft' });\r\n      }}\r\n      startIcon={<Plus />}\r\n      style={{ textDecoration: 'none' }}\r\n      to={{\r\n        pathname: 'create',\r\n        search: stringify({ plugins: query.plugins }),\r\n      }}\r\n      minWidth=\"max-content\"\r\n      marginLeft={2}\r\n    >\r\n      {formatMessage({\r\n        id: getTranslation('HeaderLayout.button.label-add-entry'),\r\n        defaultMessage: 'Create new entry',\r\n      })}\r\n    </Button>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListViewPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListViewPage = () => {\r\n  const { slug = '' } = useParams<{\r\n    slug: string;\r\n  }>();\r\n  const {\r\n    permissions = [],\r\n    isLoading,\r\n    error,\r\n  } = useRBAC(\r\n    PERMISSIONS.map((action) => ({\r\n      action,\r\n      subject: slug,\r\n    }))\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error || !slug) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      {({ permissions }) => (\r\n        <DocumentRBAC permissions={permissions}>\r\n          <ListViewPage />\r\n        </DocumentRBAC>\r\n      )}\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListViewPage, ProtectedListViewPage };\r\n"],"names":["isOpen","canCreate","runHookWaterfall","Filters","ReactRouterLink","permissions"],"mappings":"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"}