{"version":3,"file":"Preview-DH1h7kJ6.js","sources":["../../admin/src/preview/components/PreviewContent.tsx","../../admin/src/preview/components/PreviewHeader.tsx","../../admin/src/preview/pages/Preview.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { usePreviewContext } from '../pages/Preview';\r\n\r\nconst PreviewContent = () => {\r\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box\r\n      src={previewUrl}\r\n      title={formatMessage({\r\n        id: 'content-manager.preview.panel.title',\r\n        defaultMessage: 'Preview',\r\n      })}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      borderWidth={0}\r\n      tag=\"iframe\"\r\n    />\r\n  );\r\n};\r\n\r\nexport { PreviewContent };\r\n","import * as React from 'react';\r\n\r\nimport { useClipboard, useNotification, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  type BoxProps,\r\n  Flex,\r\n  IconButton,\r\n  Tabs,\r\n  Typography,\r\n  Grid,\r\n} from '@strapi/design-system';\r\nimport { Cross, Link as LinkIcon } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { type MessageDescriptor, useIntl } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\r\nimport { getDocumentStatus } from '../../pages/EditView/EditViewPage';\r\nimport { usePreviewContext } from '../pages/Preview';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ClosePreviewButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ClosePreviewButton = () => {\r\n  const [{ query }] = useQueryParams<{\r\n    plugins?: Record<string, unknown>;\r\n  }>();\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <IconButton\r\n      tag={Link}\r\n      relative=\"path\"\r\n      to={{\r\n        pathname: '..',\r\n        search: stringify({ plugins: query.plugins }, { encode: false }),\r\n      }}\r\n      label={formatMessage({\r\n        id: 'content-manager.preview.header.close',\r\n        defaultMessage: 'Close preview',\r\n      })}\r\n    >\r\n      <Cross />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Status\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Status = () => {\r\n  // Get status\r\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\r\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\r\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\r\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\r\n\r\n  if (!hasDraftAndPublished) {\r\n    return null;\r\n  }\r\n\r\n  const status = getDocumentStatus(document, meta);\r\n\r\n  return <DocumentStatus status={status} size=\"XS\" />;\r\n};\r\n\r\nconst PreviewTabs = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  // URL query params\r\n  const [{ query }, setQuery] = useQueryParams<{ status: 'draft' | 'published' }>();\r\n\r\n  // Get status\r\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\r\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\r\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\r\n  const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;\r\n  const documentStatus = getDocumentStatus(document, meta);\r\n\r\n  const handleTabChange = (status: string) => {\r\n    if (status === 'published' || status === 'draft') {\r\n      setQuery({ status }, 'push', true);\r\n    }\r\n  };\r\n\r\n  if (!hasDraftAndPublish) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tabs.Root variant=\"simple\" value={query.status || 'draft'} onValueChange={handleTabChange}>\r\n        <Tabs.List\r\n          aria-label={formatMessage({\r\n            id: 'preview.tabs.label',\r\n            defaultMessage: 'Document status',\r\n          })}\r\n        >\r\n          <StatusTab value=\"draft\">\r\n            {formatMessage({\r\n              id: 'content-manager.containers.List.draft',\r\n              defaultMessage: 'draft',\r\n            })}\r\n          </StatusTab>\r\n          <StatusTab value=\"published\" disabled={documentStatus === 'draft'}>\r\n            {formatMessage({\r\n              id: 'content-manager.containers.List.published',\r\n              defaultMessage: 'published',\r\n            })}\r\n          </StatusTab>\r\n        </Tabs.List>\r\n      </Tabs.Root>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PreviewHeader\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PreviewHeader = () => {\r\n  // Get main field\r\n  const mainField = usePreviewContext('PreviewHeader', (state) => state.mainField);\r\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\r\n  const title = document[mainField];\r\n\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { copy } = useClipboard();\r\n\r\n  const handleCopyLink = () => {\r\n    copy(window.location.href);\r\n    toggleNotification({\r\n      message: formatMessage({\r\n        id: 'content-manager.preview.copy.success',\r\n        defaultMessage: 'Copied preview link',\r\n      }),\r\n      type: 'success',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid.Root\r\n      gap={3}\r\n      gridCols={3}\r\n      paddingLeft={2}\r\n      paddingRight={2}\r\n      background=\"neutral0\"\r\n      borderColor=\"neutral150\"\r\n      tag=\"header\"\r\n    >\r\n      {/* Title and status */}\r\n      <Grid.Item xs={1} paddingTop={2} paddingBottom={2} gap={3}>\r\n        <ClosePreviewButton />\r\n        <PreviewTitle tag=\"h1\" fontWeight={600} fontSize={2} maxWidth=\"200px\">\r\n          {title}\r\n        </PreviewTitle>\r\n        <Status />\r\n      </Grid.Item>\r\n      {/* Tabs */}\r\n      <Grid.Item xs={1} marginBottom=\"-1px\" alignItems=\"end\" margin=\"auto\">\r\n        <PreviewTabs />\r\n      </Grid.Item>\r\n      {/* Copy link */}\r\n      <Grid.Item xs={1} justifyContent=\"end\" paddingTop={2} paddingBottom={2}>\r\n        <IconButton\r\n          type=\"button\"\r\n          label={formatMessage({\r\n            id: 'preview.copy.label',\r\n            defaultMessage: 'Copy preview link',\r\n          })}\r\n          onClick={handleCopyLink}\r\n        >\r\n          <LinkIcon />\r\n        </IconButton>\r\n      </Grid.Item>\r\n    </Grid.Root>\r\n  );\r\n};\r\n\r\nconst PreviewTitle = styled(Typography)`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst StatusTab = styled(Tabs.Trigger)`\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport { PreviewHeader };\r\n","import * as React from 'react';\r\n\r\nimport { Page, useQueryParams, useRBAC, createContext } from '@strapi/admin/strapi-admin';\r\nimport { Box, Flex, FocusTrap, Portal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\r\nimport { COLLECTION_TYPES } from '../../constants/collections';\r\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\r\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\r\nimport { useDocumentLayout } from '../../hooks/useDocumentLayout';\r\nimport { buildValidParams } from '../../utils/api';\r\nimport { PreviewContent } from '../components/PreviewContent';\r\nimport { PreviewHeader } from '../components/PreviewHeader';\r\nimport { useGetPreviewUrlQuery } from '../services/preview';\r\n\r\nimport type { UID } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PreviewProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface PreviewContextValue {\r\n  url: string;\r\n  mainField: string;\r\n  document: NonNullable<ReturnType<UseDocument>['document']>;\r\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\r\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\r\n}\r\n\r\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PreviewPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PreviewPage = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  // Read all the necessary data from the URL to find the right preview URL\r\n  const {\r\n    slug: model,\r\n    id: documentId,\r\n    collectionType,\r\n  } = useParams<{\r\n    slug: UID.ContentType;\r\n    id: string;\r\n    collectionType: string;\r\n  }>();\r\n  const [{ query }] = useQueryParams<{\r\n    plugins?: Record<string, unknown>;\r\n  }>();\r\n\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  if (!collectionType) {\r\n    throw new Error('Could not find collectionType in url params');\r\n  }\r\n\r\n  if (!model) {\r\n    throw new Error('Could not find model in url params');\r\n  }\r\n\r\n  // Only collection types must have a documentId\r\n  if (collectionType === COLLECTION_TYPES && !documentId) {\r\n    throw new Error('Could not find documentId in url params');\r\n  }\r\n\r\n  const previewUrlResponse = useGetPreviewUrlQuery({\r\n    params: {\r\n      contentType: model,\r\n    },\r\n    query: {\r\n      documentId,\r\n      locale: params.locale,\r\n      status: params.status as GetPreviewUrl.Request['query']['status'],\r\n    },\r\n  });\r\n\r\n  const documentResponse = useDocument({\r\n    model,\r\n    collectionType,\r\n    documentId,\r\n    params,\r\n  });\r\n\r\n  const documentLayoutResponse = useDocumentLayout(model);\r\n\r\n  if (\r\n    documentResponse.isLoading ||\r\n    previewUrlResponse.isLoading ||\r\n    documentLayoutResponse.isLoading\r\n  ) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (\r\n    previewUrlResponse.error ||\r\n    documentLayoutResponse.error ||\r\n    !documentResponse.document ||\r\n    !documentResponse.meta ||\r\n    !documentResponse.schema\r\n  ) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  if (!previewUrlResponse.data?.data?.url) {\r\n    return <Page.NoData />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          {\r\n            id: 'content-manager.preview.page-title',\r\n            defaultMessage: '{contentType} preview',\r\n          },\r\n          {\r\n            contentType: documentLayoutResponse.edit.settings.displayName,\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <PreviewProvider\r\n        url={previewUrlResponse.data.data.url}\r\n        mainField={documentLayoutResponse.edit.settings.mainField}\r\n        document={documentResponse.document}\r\n        meta={documentResponse.meta}\r\n        schema={documentResponse.schema}\r\n      >\r\n        <Flex direction=\"column\" height=\"100%\" alignItems={'stretch'}>\r\n          <PreviewHeader />\r\n          <PreviewContent />\r\n        </Flex>\r\n      </PreviewProvider>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedPreviewPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedPreviewPageImpl = () => {\r\n  const { slug: model } = useParams<{\r\n    slug: string;\r\n  }>();\r\n  const {\r\n    permissions = [],\r\n    isLoading,\r\n    error,\r\n  } = useRBAC([{ action: 'plugin::content-manager.explorer.read', subject: model }]);\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (error || !model) {\r\n    return (\r\n      <Box\r\n        height=\"100vh\"\r\n        width=\"100vw\"\r\n        position=\"fixed\"\r\n        top={0}\r\n        left={0}\r\n        zIndex={2}\r\n        background=\"neutral0\"\r\n      >\r\n        <Page.Error />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      height=\"100vh\"\r\n      width=\"100vw\"\r\n      position=\"fixed\"\r\n      top={0}\r\n      left={0}\r\n      zIndex={2}\r\n      background=\"neutral0\"\r\n    >\r\n      <Page.Protect permissions={permissions}>\r\n        {({ permissions }) => (\r\n          <DocumentRBAC permissions={permissions}>\r\n            <PreviewPage />\r\n          </DocumentRBAC>\r\n        )}\r\n      </Page.Protect>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ProtectedPreviewPage = () => {\r\n  return (\r\n    <Portal>\r\n      <FocusTrap>\r\n        <ProtectedPreviewPageImpl />\r\n      </FocusTrap>\r\n    </Portal>\r\n  );\r\n};\r\n\r\nexport { ProtectedPreviewPage, usePreviewContext };\r\n"],"names":["useIntl","jsx","Box","useQueryParams","IconButton","Link","stringify","Cross","getDocumentStatus","DocumentStatus","Fragment","Tabs","jsxs","useNotification","useClipboard","Grid","LinkIcon","styled","Typography","createContext","useParams","React","buildValidParams","COLLECTION_TYPES","useGetPreviewUrlQuery","useDocument","useDocumentLayout","Page","Flex","useRBAC","permissions","DocumentRBAC","Portal","FocusTrap"],"mappings":"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"}