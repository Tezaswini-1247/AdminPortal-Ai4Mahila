{"version":3,"file":"index-BN1pPa5v.js","sources":["../../admin/src/constants/plugin.ts","../../admin/src/components/InjectionZone.tsx","../../admin/src/constants/attributes.ts","../../admin/src/constants/collections.ts","../../admin/src/features/DocumentRBAC.tsx","../../admin/src/services/api.ts","../../admin/src/services/documents.ts","../../admin/src/utils/api.ts","../../admin/src/utils/validation.ts","../../admin/src/services/init.ts","../../admin/src/hooks/useContentTypeSchema.ts","../../admin/src/constants/hooks.ts","../../admin/src/services/contentTypes.ts","../../admin/src/utils/attributes.ts","../../admin/src/hooks/useDocumentLayout.ts","../../admin/src/hooks/useDocument.ts","../../admin/src/utils/translations.ts","../../admin/src/hooks/useDocumentActions.ts","../../admin/src/history/routes.tsx","../../admin/src/preview/routes.tsx","../../admin/src/router.tsx","../../admin/src/pages/EditView/components/DocumentActions.tsx","../../admin/src/components/RelativeTime.tsx","../../admin/src/utils/users.ts","../../admin/src/utils/strings.ts","../../admin/src/pages/EditView/components/DocumentStatus.tsx","../../admin/src/pages/EditView/components/Header.tsx","../../admin/src/pages/EditView/components/Panels.tsx","../../admin/src/pages/ListView/components/BulkActions/ConfirmBulkActionDialog.tsx","../../admin/src/pages/ListView/components/BulkActions/PublishAction.tsx","../../admin/src/pages/ListView/components/BulkActions/Actions.tsx","../../admin/src/pages/ListView/components/AutoCloneFailureModal.tsx","../../admin/src/pages/ListView/components/TableActions.tsx","../../admin/src/content-manager.ts","../../admin/src/history/components/HistoryAction.tsx","../../admin/src/history/index.ts","../../admin/src/modules/app.ts","../../admin/src/modules/reducers.ts","../../admin/src/preview/services/preview.ts","../../admin/src/preview/components/PreviewSidePanel.tsx","../../admin/src/preview/constants.ts","../../admin/src/preview/index.ts","../../admin/src/index.ts"],"sourcesContent":["const PLUGIN_ID = 'content-manager';\r\n\r\nconst PERMISSIONS = [\r\n  'plugin::content-manager.explorer.create',\r\n  'plugin::content-manager.explorer.read',\r\n  'plugin::content-manager.explorer.update',\r\n  'plugin::content-manager.explorer.delete',\r\n  'plugin::content-manager.explorer.publish',\r\n];\r\n\r\nexport { PLUGIN_ID, PERMISSIONS };\r\n","import { useStrapiApp, InjectionZoneComponent } from '@strapi/admin/strapi-admin';\r\n\r\nimport { PLUGIN_ID } from '../constants/plugin';\r\n\r\nconst INJECTION_ZONES = {\r\n  editView: { informations: [], 'right-links': [] },\r\n  listView: {\r\n    actions: [],\r\n    deleteModalAdditionalInfos: [],\r\n    publishModalAdditionalInfos: [],\r\n    unpublishModalAdditionalInfos: [],\r\n  },\r\n} satisfies InjectionZones;\r\n\r\ninterface InjectionZones {\r\n  editView: {\r\n    informations: InjectionZoneComponent[];\r\n    'right-links': InjectionZoneComponent[];\r\n  };\r\n  listView: {\r\n    actions: InjectionZoneComponent[];\r\n    deleteModalAdditionalInfos: InjectionZoneComponent[];\r\n    publishModalAdditionalInfos: InjectionZoneComponent[];\r\n    unpublishModalAdditionalInfos: InjectionZoneComponent[];\r\n  };\r\n}\r\n\r\ntype InjectionZoneArea =\r\n  | 'editView.informations'\r\n  | 'editView.right-links'\r\n  | 'listView.actions'\r\n  | 'listView.unpublishModalAdditionalInfos'\r\n  | 'listView.deleteModalAdditionalInfos'\r\n  | 'listView.publishModalAdditionalInfos'\r\n  | 'listView.deleteModalAdditionalInfos';\r\n\r\ntype InjectionZoneModule = InjectionZoneArea extends `${infer Word}.${string}` ? Word : never;\r\ntype InjectionZoneContainer = InjectionZoneArea extends `${string}.${infer Word}.${string}`\r\n  ? Word\r\n  : never;\r\ntype InjectionZoneBlock = InjectionZoneArea extends `${string}.${string}.${infer Word}`\r\n  ? Word\r\n  : never;\r\n\r\n/**\r\n * You can't know what this component props will be because it's generic and used everywhere\r\n * e.g. content-manager edit view, we just send the slug but we might not in the listView,\r\n * therefore, people should type it themselves on the components they render.\r\n */\r\nconst InjectionZone = ({ area, ...props }: { area: InjectionZoneArea; [key: string]: unknown }) => {\r\n  const components = useInjectionZone(area);\r\n\r\n  return (\r\n    <>\r\n      {components.map((component) => (\r\n        <component.Component key={component.name} {...props} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const useInjectionZone = (area: InjectionZoneArea) => {\r\n  const getPlugin = useStrapiApp('useInjectionZone', (state) => state.getPlugin);\r\n  const contentManagerPlugin = getPlugin(PLUGIN_ID);\r\n  const [page, position] = area.split('.') as [InjectionZoneContainer, InjectionZoneBlock];\r\n\r\n  return contentManagerPlugin.getInjectedComponents(page, position);\r\n};\r\n\r\nexport { InjectionZone, INJECTION_ZONES };\r\n\r\nexport type {\r\n  InjectionZoneArea,\r\n  InjectionZoneComponent,\r\n  InjectionZones,\r\n  InjectionZoneModule,\r\n  InjectionZoneContainer,\r\n  InjectionZoneBlock,\r\n};\r\n","const ID = 'id';\r\n\r\nconst CREATED_BY_ATTRIBUTE_NAME = 'createdBy';\r\nconst UPDATED_BY_ATTRIBUTE_NAME = 'updatedBy';\r\n\r\nconst CREATOR_FIELDS = [CREATED_BY_ATTRIBUTE_NAME, UPDATED_BY_ATTRIBUTE_NAME];\r\n\r\nconst PUBLISHED_BY_ATTRIBUTE_NAME = 'publishedBy';\r\nconst CREATED_AT_ATTRIBUTE_NAME = 'createdAt';\r\nconst UPDATED_AT_ATTRIBUTE_NAME = 'updatedAt';\r\nconst PUBLISHED_AT_ATTRIBUTE_NAME = 'publishedAt';\r\n\r\nconst DOCUMENT_META_FIELDS = [\r\n  ID,\r\n  ...CREATOR_FIELDS,\r\n  PUBLISHED_BY_ATTRIBUTE_NAME,\r\n  CREATED_AT_ATTRIBUTE_NAME,\r\n  UPDATED_AT_ATTRIBUTE_NAME,\r\n  PUBLISHED_AT_ATTRIBUTE_NAME,\r\n];\r\n\r\n/**\r\n * List of attribute types that cannot be used as the main field.\r\n * Not sure the name could be any clearer.\r\n */\r\nconst ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD = [\r\n  'dynamiczone',\r\n  'json',\r\n  'text',\r\n  'relation',\r\n  'component',\r\n  'boolean',\r\n  'media',\r\n  'password',\r\n  'richtext',\r\n  'timestamp',\r\n  'blocks',\r\n];\r\n\r\nexport {\r\n  ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD,\r\n  CREATED_AT_ATTRIBUTE_NAME,\r\n  UPDATED_AT_ATTRIBUTE_NAME,\r\n  PUBLISHED_AT_ATTRIBUTE_NAME,\r\n  CREATED_BY_ATTRIBUTE_NAME,\r\n  UPDATED_BY_ATTRIBUTE_NAME,\r\n  PUBLISHED_BY_ATTRIBUTE_NAME,\r\n  CREATOR_FIELDS,\r\n  DOCUMENT_META_FIELDS,\r\n};\r\n","const SINGLE_TYPES = 'single-types';\r\nconst COLLECTION_TYPES = 'collection-types';\r\n\r\nexport { SINGLE_TYPES, COLLECTION_TYPES };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useRBAC,\r\n  useAuth,\r\n  type Permission,\r\n  createContext,\r\n  Page,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/**\r\n * The boolean values indicate the global actions a user can perform on the document.\r\n * The `string[]` values tell us specifically which fields the actions can be performed on,\r\n * for example, if the `canReadFields` array is empty, than no fields can be read by the user.\r\n * This can happen even if the user can read the document.\r\n */\r\ninterface DocumentRBACContextValue {\r\n  canCreate?: boolean;\r\n  canCreateFields: string[];\r\n  canDelete?: boolean;\r\n  canPublish?: boolean;\r\n  canRead?: boolean;\r\n  canReadFields: string[];\r\n  canUpdate?: boolean;\r\n  canUpdateFields: string[];\r\n  canUserAction: (\r\n    fieldName: string,\r\n    fieldsUserCanAction: string[],\r\n    fieldType: Schema.Attribute.Kind\r\n  ) => boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst [DocumentRBACProvider, useDocumentRBAC] = createContext<DocumentRBACContextValue>(\r\n  'DocumentRBAC',\r\n  {\r\n    canCreate: false,\r\n    canCreateFields: [],\r\n    canDelete: false,\r\n    canPublish: false,\r\n    canRead: false,\r\n    canReadFields: [],\r\n    canUpdate: false,\r\n    canUpdateFields: [],\r\n    canUserAction: () => false,\r\n    isLoading: false,\r\n  }\r\n);\r\n\r\ninterface DocumentRBACProps {\r\n  children: React.ReactNode;\r\n  permissions: Permission[] | null;\r\n}\r\n\r\n/**\r\n * @internal This component is not meant to be used outside of the Content Manager plugin.\r\n * It depends on knowing the slug/model of the content-type using the params of the URL.\r\n * If you do use the hook outside of the context, we default to `false` for all actions.\r\n *\r\n * It then creates an list of `can{Action}` that are passed to the context for consumption\r\n * within the app to enforce RBAC.\r\n */\r\nconst DocumentRBAC = ({ children, permissions }: DocumentRBACProps) => {\r\n  const { slug } = useParams<{ slug: string }>();\r\n\r\n  if (!slug) {\r\n    throw new Error('Cannot find the slug param in the URL');\r\n  }\r\n  const [{ rawQuery }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n\r\n  const userPermissions = useAuth('DocumentRBAC', (state) => state.permissions);\r\n\r\n  const contentTypePermissions = React.useMemo(() => {\r\n    const contentTypePermissions = userPermissions.filter(\r\n      (permission) => permission.subject === slug\r\n    );\r\n    return contentTypePermissions.reduce<Record<string, Permission[]>>((acc, permission) => {\r\n      const [action] = permission.action.split('.').slice(-1);\r\n      return { ...acc, [action]: [permission] };\r\n    }, {});\r\n  }, [slug, userPermissions]);\r\n\r\n  const { isLoading, allowedActions } = useRBAC(\r\n    contentTypePermissions,\r\n    permissions ?? undefined,\r\n    // TODO: useRBAC context should be typed and built differently\r\n    // We are passing raw query as context to the hook so that it can\r\n    // rely on the locale provided from DocumentRBAC for its permission calculations.\r\n    rawQuery\r\n  );\r\n\r\n  const canCreateFields =\r\n    !isLoading && allowedActions.canCreate\r\n      ? extractAndDedupeFields(contentTypePermissions.create)\r\n      : [];\r\n\r\n  const canReadFields =\r\n    !isLoading && allowedActions.canRead ? extractAndDedupeFields(contentTypePermissions.read) : [];\r\n\r\n  const canUpdateFields =\r\n    !isLoading && allowedActions.canUpdate\r\n      ? extractAndDedupeFields(contentTypePermissions.update)\r\n      : [];\r\n\r\n  /**\r\n   * @description Checks if the user can perform an action on a field based on the field names\r\n   * provided as the second argument.\r\n   */\r\n  const canUserAction: DocumentRBACContextValue['canUserAction'] = React.useCallback(\r\n    (fieldName, fieldsUserCanAction, fieldType) => {\r\n      const name = removeNumericalStrings(fieldName.split('.'));\r\n\r\n      const componentFieldNames = fieldsUserCanAction\r\n        // filter out fields that aren't components (components are dot separated)\r\n        .filter((field) => field.split('.').length > 1);\r\n\r\n      if (fieldType === 'component') {\r\n        // check if the field name is within any of those arrays\r\n        return componentFieldNames.some((field) => {\r\n          return field.includes(name.join('.'));\r\n        });\r\n      }\r\n\r\n      /**\r\n       * The field is within a component.\r\n       */\r\n      if (name.length > 1) {\r\n        return componentFieldNames.includes(name.join('.'));\r\n      }\r\n\r\n      /**\r\n       * just a regular field\r\n       */\r\n      return fieldsUserCanAction.includes(fieldName);\r\n    },\r\n    []\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <DocumentRBACProvider\r\n      isLoading={isLoading}\r\n      canCreateFields={canCreateFields}\r\n      canReadFields={canReadFields}\r\n      canUpdateFields={canUpdateFields}\r\n      canUserAction={canUserAction}\r\n      {...allowedActions}\r\n    >\r\n      {children}\r\n    </DocumentRBACProvider>\r\n  );\r\n};\r\n\r\n/**\r\n * @internal it's really small, but it's used three times in a row and DRY for something this straight forward.\r\n */\r\nconst extractAndDedupeFields = (permissions: Permission[] = []) =>\r\n  permissions\r\n    .flatMap((permission) => permission.properties?.fields)\r\n    .filter(\r\n      (field, index, arr): field is string =>\r\n        arr.indexOf(field) === index && typeof field === 'string'\r\n    );\r\n\r\n/**\r\n * @internal removes numerical strings from arrays.\r\n * @example\r\n * ```ts\r\n * const name = 'a.0.b';\r\n * const res = removeNumericalStrings(name.split('.'));\r\n * console.log(res); // ['a', 'b']\r\n * ```\r\n */\r\nconst removeNumericalStrings = (arr: string[]) => arr.filter((item) => isNaN(Number(item)));\r\n\r\nexport { DocumentRBAC, useDocumentRBAC, DocumentRBACContextValue, DocumentRBACProps };\r\n","import { adminApi } from '@strapi/admin/strapi-admin';\r\n\r\nconst contentManagerApi = adminApi.enhanceEndpoints({\r\n  addTagTypes: [\r\n    'ComponentConfiguration',\r\n    'ContentTypesConfiguration',\r\n    'ContentTypeSettings',\r\n    'Document',\r\n    'InitialData',\r\n    'HistoryVersion',\r\n    'Relations',\r\n    'UidAvailability',\r\n  ],\r\n});\r\n\r\nexport { contentManagerApi };\r\n","/**\r\n * Related to fetching the actual content of a collection type or single type.\r\n */\r\nimport { stringify } from 'qs';\r\n\r\nimport { SINGLE_TYPES } from '../constants/collections';\r\n\r\nimport { contentManagerApi } from './api';\r\n\r\nimport type {\r\n  Clone,\r\n  Create,\r\n  Delete,\r\n  Find,\r\n  FindOne,\r\n  BulkDelete,\r\n  BulkPublish,\r\n  BulkUnpublish,\r\n  Discard,\r\n  CountDraftRelations,\r\n  CountManyEntriesDraftRelations,\r\n  Publish,\r\n  Unpublish,\r\n  Update,\r\n} from '../../../shared/contracts/collection-types';\r\n\r\nconst documentApi = contentManagerApi.injectEndpoints({\r\n  overrideExisting: true,\r\n  endpoints: (builder) => ({\r\n    autoCloneDocument: builder.mutation<Clone.Response, Clone.Params & { query?: string }>({\r\n      query: ({ model, sourceId, query }) => ({\r\n        url: `/content-manager/collection-types/${model}/auto-clone/${sourceId}`,\r\n        method: 'POST',\r\n        config: {\r\n          params: query,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, error, { model }) => {\r\n        if (error) {\r\n          return [];\r\n        }\r\n\r\n        return [{ type: 'Document', id: `${model}_LIST` }];\r\n      },\r\n    }),\r\n    cloneDocument: builder.mutation<\r\n      Clone.Response,\r\n      Clone.Params & {\r\n        data: Clone.Request['body'];\r\n        params?: Clone.Request['query'];\r\n      }\r\n    >({\r\n      query: ({ model, sourceId, data, params }) => ({\r\n        url: `/content-manager/collection-types/${model}/clone/${sourceId}`,\r\n        method: 'POST',\r\n        data,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, _error, { model }) => [\r\n        { type: 'Document', id: `${model}_LIST` },\r\n        { type: 'UidAvailability', id: model },\r\n      ],\r\n    }),\r\n    /**\r\n     * Creates a new collection-type document. This should ONLY be used for collection-types.\r\n     * single-types should always be using `updateDocument` since they always exist.\r\n     */\r\n    createDocument: builder.mutation<\r\n      Create.Response,\r\n      Create.Params & {\r\n        data: Create.Request['body'];\r\n        params?: Create.Request['query'];\r\n      }\r\n    >({\r\n      query: ({ model, data, params }) => ({\r\n        url: `/content-manager/collection-types/${model}`,\r\n        method: 'POST',\r\n        data,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (result, _error, { model }) => [\r\n        { type: 'Document', id: `${model}_LIST` },\r\n        'Relations',\r\n        { type: 'UidAvailability', id: model },\r\n      ],\r\n    }),\r\n    deleteDocument: builder.mutation<\r\n      Delete.Response,\r\n      Pick<Delete.Params, 'model'> &\r\n        Pick<Partial<Delete.Params>, 'documentId'> & {\r\n          collectionType: string;\r\n          params?: Find.Request['query'];\r\n        }\r\n    >({\r\n      query: ({ collectionType, model, documentId, params }) => ({\r\n        url: `/content-manager/${collectionType}/${model}${\r\n          collectionType !== SINGLE_TYPES && documentId ? `/${documentId}` : ''\r\n        }`,\r\n        method: 'DELETE',\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, _error, { collectionType, model }) => [\r\n        { type: 'Document', id: collectionType !== SINGLE_TYPES ? `${model}_LIST` : model },\r\n      ],\r\n    }),\r\n    deleteManyDocuments: builder.mutation<\r\n      BulkDelete.Response,\r\n      BulkDelete.Params & BulkDelete.Request['body'] & { params?: Find.Request['query'] }\r\n    >({\r\n      query: ({ model, params, ...body }) => ({\r\n        url: `/content-manager/collection-types/${model}/actions/bulkDelete`,\r\n        method: 'POST',\r\n        data: body,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_res, _error, { model }) => [{ type: 'Document', id: `${model}_LIST` }],\r\n    }),\r\n    discardDocument: builder.mutation<\r\n      Discard.Response,\r\n      Pick<Discard.Params, 'model'> &\r\n        Partial<Pick<Discard.Params, 'documentId'>> & {\r\n          collectionType: string;\r\n          params?: Find.Request['query'] & {\r\n            [key: string]: any;\r\n          };\r\n        }\r\n    >({\r\n      query: ({ collectionType, model, documentId, params }) => ({\r\n        url: documentId\r\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/discard`\r\n          : `/content-manager/${collectionType}/${model}/actions/discard`,\r\n        method: 'POST',\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\r\n        return [\r\n          {\r\n            type: 'Document',\r\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\r\n          },\r\n          { type: 'Document', id: `${model}_LIST` },\r\n          'Relations',\r\n          { type: 'UidAvailability', id: model },\r\n        ];\r\n      },\r\n    }),\r\n    /**\r\n     * Gets all documents of a collection type or single type.\r\n     * By passing different params you can get different results e.g. only published documents or 'es' documents.\r\n     */\r\n    getAllDocuments: builder.query<\r\n      Find.Response,\r\n      Find.Params & {\r\n        params?: Find.Request['query'] & {\r\n          [key: string]: any;\r\n        };\r\n      }\r\n    >({\r\n      query: ({ model, params }) => ({\r\n        url: `/content-manager/collection-types/${model}`,\r\n        method: 'GET',\r\n        config: {\r\n          params: stringify(params, { encode: true }),\r\n        },\r\n      }),\r\n      providesTags: (result, _error, arg) => {\r\n        return [\r\n          { type: 'Document', id: `ALL_LIST` },\r\n          { type: 'Document', id: `${arg.model}_LIST` },\r\n          ...(result?.results.map(({ documentId }) => ({\r\n            type: 'Document' as const,\r\n            id: `${arg.model}_${documentId}`,\r\n          })) ?? []),\r\n        ];\r\n      },\r\n    }),\r\n    getDraftRelationCount: builder.query<\r\n      CountDraftRelations.Response,\r\n      {\r\n        collectionType: string;\r\n        model: string;\r\n        /**\r\n         * You don't pass the documentId if the document is a single-type\r\n         */\r\n        documentId?: string;\r\n        params?: CountDraftRelations.Request['query'];\r\n      }\r\n    >({\r\n      query: ({ collectionType, model, documentId, params }) => ({\r\n        url: documentId\r\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/countDraftRelations`\r\n          : `/content-manager/${collectionType}/${model}/actions/countDraftRelations`,\r\n        method: 'GET',\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n    }),\r\n    getDocument: builder.query<\r\n      FindOne.Response,\r\n      Pick<FindOne.Params, 'model'> &\r\n        Partial<Pick<FindOne.Params, 'documentId'>> & {\r\n          collectionType: string;\r\n          params?: FindOne.Request['query'];\r\n        }\r\n    >({\r\n      // @ts-expect-error – TODO: fix ts error where data unknown doesn't work with response via an assertion?\r\n      queryFn: async (\r\n        { collectionType, model, documentId, params },\r\n        _api,\r\n        _extraOpts,\r\n        baseQuery\r\n      ) => {\r\n        const res = await baseQuery({\r\n          url: `/content-manager/${collectionType}/${model}${documentId ? `/${documentId}` : ''}`,\r\n          method: 'GET',\r\n          config: {\r\n            params,\r\n          },\r\n        });\r\n\r\n        /**\r\n         * To stop the query from locking itself in multiple retries, we intercept the error here and manage correctly.\r\n         * This is because single-types don't have a list view and fetching them with the route `/single-types/:model`\r\n         * never returns a list, just a single document but this won't exist if you've not made one before.\r\n         */\r\n        if (res.error && res.error.name === 'NotFoundError' && collectionType === SINGLE_TYPES) {\r\n          return { data: { document: undefined }, error: undefined };\r\n        }\r\n\r\n        return res;\r\n      },\r\n      providesTags: (result, _error, { collectionType, model, documentId }) => {\r\n        return [\r\n          // we prefer the result's id because we don't fetch single-types with an ID.\r\n          {\r\n            type: 'Document',\r\n            id:\r\n              collectionType !== SINGLE_TYPES\r\n                ? `${model}_${result && 'documentId' in result ? result.documentId : documentId}`\r\n                : model,\r\n          },\r\n          // Make it easy to invalidate all individual documents queries for a model\r\n          {\r\n            type: 'Document',\r\n            id: `${model}_ALL_ITEMS`,\r\n          },\r\n        ];\r\n      },\r\n    }),\r\n    getManyDraftRelationCount: builder.query<\r\n      CountManyEntriesDraftRelations.Response['data'],\r\n      CountManyEntriesDraftRelations.Request['query'] & {\r\n        model: string;\r\n      }\r\n    >({\r\n      query: ({ model, ...params }) => ({\r\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\r\n        method: 'GET',\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\r\n    }),\r\n    /**\r\n     * This endpoint will either create or update documents at the same time as publishing.\r\n     */\r\n    publishDocument: builder.mutation<\r\n      Publish.Response,\r\n      Pick<Publish.Params, 'model'> &\r\n        Partial<Pick<Publish.Params, 'documentId'>> & {\r\n          collectionType: string;\r\n          data: Publish.Request['body'];\r\n          params?: Publish.Request['query'];\r\n        }\r\n    >({\r\n      query: ({ collectionType, model, documentId, params, data }) => ({\r\n        url: documentId\r\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/publish`\r\n          : `/content-manager/${collectionType}/${model}/actions/publish`,\r\n        method: 'POST',\r\n        data,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\r\n        return [\r\n          {\r\n            type: 'Document',\r\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\r\n          },\r\n          { type: 'Document', id: `${model}_LIST` },\r\n          'Relations',\r\n        ];\r\n      },\r\n    }),\r\n    publishManyDocuments: builder.mutation<\r\n      BulkPublish.Response,\r\n      BulkPublish.Params & BulkPublish.Request['body'] & { params?: BulkPublish.Request['query'] }\r\n    >({\r\n      query: ({ model, params, ...body }) => ({\r\n        url: `/content-manager/collection-types/${model}/actions/bulkPublish`,\r\n        method: 'POST',\r\n        data: body,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_res, _error, { model, documentIds }) =>\r\n        documentIds.map((id) => ({ type: 'Document', id: `${model}_${id}` })),\r\n    }),\r\n    updateDocument: builder.mutation<\r\n      Update.Response,\r\n      Pick<Update.Params, 'model'> &\r\n        Partial<Pick<Update.Params, 'documentId'>> & {\r\n          collectionType: string;\r\n          data: Update.Request['body'];\r\n          params?: Update.Request['query'];\r\n        }\r\n    >({\r\n      query: ({ collectionType, model, documentId, data, params }) => ({\r\n        url: `/content-manager/${collectionType}/${model}${documentId ? `/${documentId}` : ''}`,\r\n        method: 'PUT',\r\n        data,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\r\n        return [\r\n          {\r\n            type: 'Document',\r\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\r\n          },\r\n          'Relations',\r\n          { type: 'UidAvailability', id: model },\r\n        ];\r\n      },\r\n      async onQueryStarted({ data, ...patch }, { dispatch, queryFulfilled }) {\r\n        // Optimistically update the cache with the new data\r\n        const patchResult = dispatch(\r\n          documentApi.util.updateQueryData('getDocument', patch, (draft) => {\r\n            Object.assign(draft.data, data);\r\n          })\r\n        );\r\n        try {\r\n          await queryFulfilled;\r\n        } catch {\r\n          // Rollback the optimistic update if there's an error\r\n          patchResult.undo();\r\n        }\r\n      },\r\n    }),\r\n    unpublishDocument: builder.mutation<\r\n      Unpublish.Response,\r\n      Pick<Unpublish.Params, 'model'> &\r\n        Partial<Pick<Unpublish.Params, 'documentId'>> & {\r\n          collectionType: string;\r\n          params?: Unpublish.Request['query'];\r\n          data: Unpublish.Request['body'];\r\n        }\r\n    >({\r\n      query: ({ collectionType, model, documentId, params, data }) => ({\r\n        url: documentId\r\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/unpublish`\r\n          : `/content-manager/${collectionType}/${model}/actions/unpublish`,\r\n        method: 'POST',\r\n        data,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\r\n        return [\r\n          {\r\n            type: 'Document',\r\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\r\n          },\r\n        ];\r\n      },\r\n    }),\r\n    unpublishManyDocuments: builder.mutation<\r\n      BulkUnpublish.Response,\r\n      Pick<BulkUnpublish.Params, 'model'> &\r\n        BulkUnpublish.Request['body'] & {\r\n          params?: BulkUnpublish.Request['query'];\r\n        }\r\n    >({\r\n      query: ({ model, params, ...body }) => ({\r\n        url: `/content-manager/collection-types/${model}/actions/bulkUnpublish`,\r\n        method: 'POST',\r\n        data: body,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      invalidatesTags: (_res, _error, { model, documentIds }) =>\r\n        documentIds.map((id) => ({ type: 'Document', id: `${model}_${id}` })),\r\n    }),\r\n  }),\r\n});\r\n\r\nconst {\r\n  useAutoCloneDocumentMutation,\r\n  useCloneDocumentMutation,\r\n  useCreateDocumentMutation,\r\n  useDeleteDocumentMutation,\r\n  useDeleteManyDocumentsMutation,\r\n  useDiscardDocumentMutation,\r\n  useGetAllDocumentsQuery,\r\n  useLazyGetDocumentQuery,\r\n  useGetDocumentQuery,\r\n  useLazyGetDraftRelationCountQuery,\r\n  useGetManyDraftRelationCountQuery,\r\n  usePublishDocumentMutation,\r\n  usePublishManyDocumentsMutation,\r\n  useUpdateDocumentMutation,\r\n  useUnpublishDocumentMutation,\r\n  useUnpublishManyDocumentsMutation,\r\n} = documentApi;\r\n\r\nexport {\r\n  useAutoCloneDocumentMutation,\r\n  useCloneDocumentMutation,\r\n  useCreateDocumentMutation,\r\n  useDeleteDocumentMutation,\r\n  useDeleteManyDocumentsMutation,\r\n  useDiscardDocumentMutation,\r\n  useGetAllDocumentsQuery,\r\n  useLazyGetDocumentQuery,\r\n  useGetDocumentQuery,\r\n  useLazyGetDraftRelationCountQuery as useGetDraftRelationCountQuery,\r\n  useGetManyDraftRelationCountQuery,\r\n  usePublishDocumentMutation,\r\n  usePublishManyDocumentsMutation,\r\n  useUpdateDocumentMutation,\r\n  useUnpublishDocumentMutation,\r\n  useUnpublishManyDocumentsMutation,\r\n};\r\n","import { SerializedError } from '@reduxjs/toolkit';\r\nimport { ApiError, type UnknownApiError } from '@strapi/admin/strapi-admin';\r\n\r\ninterface Query {\r\n  plugins?: Record<string, unknown>;\r\n  _q?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * This type extracts the plugin options from the query\r\n * and appends them to the root of the query\r\n */\r\ntype TransformedQuery<TQuery extends Query> = Omit<TQuery, 'plugins'> & {\r\n  [key: string]: string;\r\n};\r\n\r\n/**\r\n * @description\r\n * Creates a valid query params object for get requests\r\n * ie. plugins[18n][locale]=en becomes locale=en\r\n */\r\nconst buildValidParams = <TQuery extends Query>(query: TQuery): TransformedQuery<TQuery> => {\r\n  if (!query) return query;\r\n\r\n  // Extract pluginOptions from the query, they shouldn't be part of the URL\r\n  const { plugins: _, ...validQueryParams } = {\r\n    ...query,\r\n    ...Object.values(query?.plugins ?? {}).reduce<Record<string, string>>(\r\n      (acc, current) => Object.assign(acc, current),\r\n      {}\r\n    ),\r\n  };\r\n\r\n  return validQueryParams;\r\n};\r\n\r\ntype BaseQueryError = ApiError | UnknownApiError;\r\n\r\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\r\n  return error.name !== undefined;\r\n};\r\n\r\nexport { isBaseQueryError, buildValidParams };\r\nexport type { BaseQueryError, UnknownApiError };\r\n","import { translatedErrors } from '@strapi/admin/strapi-admin';\r\nimport pipe from 'lodash/fp/pipe';\r\nimport * as yup from 'yup';\r\n\r\nimport { DOCUMENT_META_FIELDS } from '../constants/attributes';\r\n\r\nimport type { ComponentsDictionary, Schema } from '../hooks/useDocument';\r\nimport type { Schema as SchemaUtils } from '@strapi/types';\r\nimport type { ObjectShape } from 'yup/lib/object';\r\n\r\ntype AnySchema =\r\n  | yup.StringSchema\r\n  | yup.NumberSchema\r\n  | yup.BooleanSchema\r\n  | yup.DateSchema\r\n  | yup.ArraySchema<any>\r\n  | yup.ObjectSchema<any>;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * createYupSchema\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ValidationOptions {\r\n  status: 'draft' | 'published' | null;\r\n}\r\n\r\nconst arrayValidator = (attribute: Schema['attributes'][string], options: ValidationOptions) => ({\r\n  message: translatedErrors.required,\r\n  test(value: unknown) {\r\n    if (options.status === 'draft') {\r\n      return true;\r\n    }\r\n\r\n    if (!attribute.required) {\r\n      return true;\r\n    }\r\n\r\n    if (!value) {\r\n      return false;\r\n    }\r\n\r\n    if (Array.isArray(value) && value.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n});\r\n\r\n/**\r\n * TODO: should we create a Map to store these based on the hash of the schema?\r\n */\r\nconst createYupSchema = (\r\n  attributes: Schema['attributes'] = {},\r\n  components: ComponentsDictionary = {},\r\n  options: ValidationOptions = { status: null }\r\n): yup.ObjectSchema<any> => {\r\n  const createModelSchema = (attributes: Schema['attributes']): yup.ObjectSchema<any> =>\r\n    yup\r\n      .object()\r\n      .shape(\r\n        Object.entries(attributes).reduce<ObjectShape>((acc, [name, attribute]) => {\r\n          if (DOCUMENT_META_FIELDS.includes(name)) {\r\n            return acc;\r\n          }\r\n\r\n          /**\r\n           * These validations won't apply to every attribute\r\n           * and that's okay, in that case we just return the\r\n           * schema as it was passed.\r\n           */\r\n          const validations = [\r\n            addNullableValidation,\r\n            addRequiredValidation,\r\n            addMinLengthValidation,\r\n            addMaxLengthValidation,\r\n            addMinValidation,\r\n            addMaxValidation,\r\n            addRegexValidation,\r\n          ].map((fn) => fn(attribute, options));\r\n\r\n          const transformSchema = pipe(...validations);\r\n\r\n          switch (attribute.type) {\r\n            case 'component': {\r\n              const { attributes } = components[attribute.component];\r\n\r\n              if (attribute.repeatable) {\r\n                return {\r\n                  ...acc,\r\n                  [name]: transformSchema(\r\n                    yup.array().of(createModelSchema(attributes).nullable(false))\r\n                  ).test(arrayValidator(attribute, options)),\r\n                };\r\n              } else {\r\n                return {\r\n                  ...acc,\r\n                  [name]: transformSchema(createModelSchema(attributes).nullable()),\r\n                };\r\n              }\r\n            }\r\n            case 'dynamiczone':\r\n              return {\r\n                ...acc,\r\n                [name]: transformSchema(\r\n                  yup.array().of(\r\n                    yup.lazy(\r\n                      (\r\n                        data: SchemaUtils.Attribute.Value<SchemaUtils.Attribute.DynamicZone>[number]\r\n                      ) => {\r\n                        const attributes = components?.[data?.__component]?.attributes;\r\n\r\n                        const validation = yup\r\n                          .object()\r\n                          .shape({\r\n                            __component: yup.string().required().oneOf(Object.keys(components)),\r\n                          })\r\n                          .nullable(false);\r\n                        if (!attributes) {\r\n                          return validation;\r\n                        }\r\n\r\n                        return validation.concat(createModelSchema(attributes));\r\n                      }\r\n                    ) as unknown as yup.ObjectSchema<any>\r\n                  )\r\n                ).test(arrayValidator(attribute, options)),\r\n              };\r\n            case 'relation':\r\n              return {\r\n                ...acc,\r\n                [name]: transformSchema(\r\n                  yup.lazy((value) => {\r\n                    if (!value) {\r\n                      return yup.mixed().nullable(true);\r\n                    } else if (Array.isArray(value)) {\r\n                      // If a relation value is an array, we expect\r\n                      // an array of objects with {id} properties, representing the related entities.\r\n                      return yup.array().of(\r\n                        yup.object().shape({\r\n                          id: yup.number().required(),\r\n                        })\r\n                      );\r\n                    } else if (typeof value === 'object') {\r\n                      // A realtion value can also be an object. Some API\r\n                      // repsonses return the number of entities in the relation\r\n                      // as { count: x }\r\n                      return yup.object();\r\n                    } else {\r\n                      return yup\r\n                        .mixed()\r\n                        .test(\r\n                          'type-error',\r\n                          'Relation values must be either null, an array of objects with {id} or an object.',\r\n                          () => false\r\n                        );\r\n                    }\r\n                  })\r\n                ),\r\n              };\r\n            default:\r\n              return {\r\n                ...acc,\r\n                [name]: transformSchema(createAttributeSchema(attribute)),\r\n              };\r\n          }\r\n        }, {})\r\n      )\r\n      /**\r\n       * TODO: investigate why an undefined object fails a check of `nullable`.\r\n       */\r\n      .default(null);\r\n\r\n  return createModelSchema(attributes);\r\n};\r\n\r\nconst createAttributeSchema = (\r\n  attribute: Exclude<\r\n    SchemaUtils.Attribute.AnyAttribute,\r\n    { type: 'dynamiczone' } | { type: 'component' } | { type: 'relation' }\r\n  >\r\n) => {\r\n  switch (attribute.type) {\r\n    case 'biginteger':\r\n      return yup.string().matches(/^-?\\d*$/);\r\n    case 'boolean':\r\n      return yup.boolean();\r\n    case 'blocks':\r\n      return yup.mixed().test('isBlocks', translatedErrors.json, (value) => {\r\n        if (!value || Array.isArray(value)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    case 'decimal':\r\n    case 'float':\r\n    case 'integer':\r\n      return yup.number();\r\n    case 'email':\r\n      return yup.string().email(translatedErrors.email);\r\n    case 'enumeration':\r\n      return yup.string().oneOf([...attribute.enum, null]);\r\n    case 'json':\r\n      return yup.mixed().test('isJSON', translatedErrors.json, (value) => {\r\n        /**\r\n         * We don't want to validate the JSON field if it's empty.\r\n         */\r\n        if (!value || (typeof value === 'string' && value.length === 0)) {\r\n          return true;\r\n        }\r\n\r\n        // If the value was created via content API and wasn't changed, then it's still an object\r\n        if (typeof value === 'object') {\r\n          try {\r\n            JSON.stringify(value);\r\n            return true;\r\n          } catch (err) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        try {\r\n          JSON.parse(value);\r\n\r\n          return true;\r\n        } catch (err) {\r\n          return false;\r\n        }\r\n      });\r\n    case 'password':\r\n    case 'richtext':\r\n    case 'string':\r\n    case 'text':\r\n      return yup.string();\r\n    case 'uid':\r\n      return yup.string().matches(/^[A-Za-z0-9-_.~]*$/);\r\n    default:\r\n      /**\r\n       * This allows any value.\r\n       */\r\n      return yup.mixed();\r\n  }\r\n};\r\n\r\n// Helper function to return schema.nullable() if it exists, otherwise return schema\r\nconst nullableSchema = <TSchema extends AnySchema>(schema: TSchema) => {\r\n  return schema?.nullable\r\n    ? schema.nullable()\r\n    : // In some cases '.nullable' will not be available on the schema.\r\n      // e.g. when the schema has been built using yup.lazy (e.g. for relations).\r\n      // In these cases we should just return the schema as it is.\r\n      schema;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Validators\r\n * -----------------------------------------------------------------------------------------------*/\r\n/**\r\n * Our validator functions can be preped with the\r\n * attribute and then have the schema piped through them.\r\n */\r\ntype ValidationFn = (\r\n  attribute: Schema['attributes'][string],\r\n  options: ValidationOptions\r\n) => <TSchema extends AnySchema>(schema: TSchema) => TSchema;\r\n\r\nconst addNullableValidation: ValidationFn = () => (schema) => {\r\n  return nullableSchema(schema);\r\n};\r\n\r\nconst addRequiredValidation: ValidationFn = (attribute, options) => (schema) => {\r\n  if (options.status === 'draft' || !attribute.required) {\r\n    return schema;\r\n  }\r\n\r\n  if (attribute.required && 'required' in schema) {\r\n    return schema.required(translatedErrors.required);\r\n  }\r\n\r\n  return schema;\r\n};\r\n\r\nconst addMinLengthValidation: ValidationFn =\r\n  (attribute, options) =>\r\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\r\n    // Skip minLength validation for draft\r\n    if (options.status === 'draft') {\r\n      return schema;\r\n    }\r\n\r\n    if (\r\n      'minLength' in attribute &&\r\n      attribute.minLength &&\r\n      Number.isInteger(attribute.minLength) &&\r\n      'min' in schema\r\n    ) {\r\n      return schema.min(attribute.minLength, {\r\n        ...translatedErrors.minLength,\r\n        values: {\r\n          min: attribute.minLength,\r\n        },\r\n      }) as TSchema;\r\n    }\r\n\r\n    return schema;\r\n  };\r\n\r\nconst addMaxLengthValidation: ValidationFn =\r\n  (attribute) =>\r\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\r\n    if (\r\n      'maxLength' in attribute &&\r\n      attribute.maxLength &&\r\n      Number.isInteger(attribute.maxLength) &&\r\n      'max' in schema\r\n    ) {\r\n      return schema.max(attribute.maxLength, {\r\n        ...translatedErrors.maxLength,\r\n        values: {\r\n          max: attribute.maxLength,\r\n        },\r\n      }) as TSchema;\r\n    }\r\n\r\n    return schema;\r\n  };\r\n\r\nconst addMinValidation: ValidationFn =\r\n  (attribute, options) =>\r\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\r\n    // do not validate min for draft\r\n    if (options.status === 'draft') {\r\n      return schema;\r\n    }\r\n\r\n    if ('min' in attribute && 'min' in schema) {\r\n      const min = toInteger(attribute.min);\r\n\r\n      if (min) {\r\n        return schema.min(min, {\r\n          ...translatedErrors.min,\r\n          values: {\r\n            min,\r\n          },\r\n        }) as TSchema;\r\n      }\r\n    }\r\n\r\n    return schema;\r\n  };\r\n\r\nconst addMaxValidation: ValidationFn =\r\n  (attribute) =>\r\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\r\n    if ('max' in attribute) {\r\n      const max = toInteger(attribute.max);\r\n\r\n      if ('max' in schema && max) {\r\n        return schema.max(max, {\r\n          ...translatedErrors.max,\r\n          values: {\r\n            max,\r\n          },\r\n        }) as TSchema;\r\n      }\r\n    }\r\n\r\n    return schema;\r\n  };\r\n\r\nconst toInteger = (val?: string | number): number | undefined => {\r\n  if (typeof val === 'number' || val === undefined) {\r\n    return val;\r\n  } else {\r\n    const num = Number(val);\r\n    return isNaN(num) ? undefined : num;\r\n  }\r\n};\r\n\r\nconst addRegexValidation: ValidationFn =\r\n  (attribute) =>\r\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\r\n    if ('regex' in attribute && attribute.regex && 'matches' in schema) {\r\n      return schema.matches(new RegExp(attribute.regex), {\r\n        message: {\r\n          id: translatedErrors.regex.id,\r\n          defaultMessage: 'The value does not match the defined pattern.',\r\n        },\r\n\r\n        excludeEmptyString: !attribute.required,\r\n      }) as TSchema;\r\n    }\r\n\r\n    return schema;\r\n  };\r\n\r\nexport { createYupSchema };\r\n","import { contentManagerApi } from './api';\r\n\r\nimport type { GetInitData } from '../../../shared/contracts/init';\r\n\r\nconst initApi = contentManagerApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getInitialData: builder.query<GetInitData.Response['data'], void>({\r\n      query: () => '/content-manager/init',\r\n      transformResponse: (response: GetInitData.Response) => response.data,\r\n      providesTags: ['InitialData'],\r\n    }),\r\n  }),\r\n});\r\n\r\nconst { useGetInitialDataQuery } = initApi;\r\n\r\nexport { useGetInitialDataQuery };\r\n","import * as React from 'react';\r\n\r\nimport { useNotification, useAPIErrorHandler } from '@strapi/admin/strapi-admin';\r\n\r\nimport { useGetInitialDataQuery } from '../services/init';\r\n\r\nimport type { Component } from '../../../shared/contracts/components';\r\nimport type { ContentType } from '../../../shared/contracts/content-types';\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useContentTypeSchema\r\n * -----------------------------------------------------------------------------------------------*/\r\ntype ComponentsDictionary = Record<string, Component>;\r\n\r\n/**\r\n * @internal\r\n * @description Given a model UID, return the schema and the schemas\r\n * of the associated components within said model's schema. A wrapper\r\n * implementation around the `useGetInitialDataQuery` with a unique\r\n * `selectFromResult` function to memoize the calculation.\r\n *\r\n * If no model is provided, the hook will return all the schemas.\r\n */\r\nconst useContentTypeSchema = (model?: string) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { data, error, isLoading, isFetching } = useGetInitialDataQuery(undefined);\r\n\r\n  const { components, contentType, contentTypes } = React.useMemo(() => {\r\n    const contentType = data?.contentTypes.find((ct) => ct.uid === model);\r\n\r\n    const componentsByKey = data?.components.reduce<ComponentsDictionary>((acc, component) => {\r\n      acc[component.uid] = component;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    const components = extractContentTypeComponents(contentType?.attributes, componentsByKey);\r\n\r\n    return {\r\n      components: Object.keys(components).length === 0 ? undefined : components,\r\n      contentType,\r\n      contentTypes: data?.contentTypes ?? [],\r\n    };\r\n  }, [model, data]);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [toggleNotification, error, formatAPIError]);\r\n\r\n  return {\r\n    // This must be memoized to avoid inifiinite re-renders where the empty object is different everytime.\r\n    components: React.useMemo(() => components ?? {}, [components]),\r\n    schema: contentType,\r\n    schemas: contentTypes,\r\n    isLoading: isLoading || isFetching,\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * extractContentTypeComponents\r\n * -----------------------------------------------------------------------------------------------*/\r\n/**\r\n * @internal\r\n * @description Extracts the components used in a content type's attributes recursively.\r\n */\r\nconst extractContentTypeComponents = (\r\n  attributes: ContentType['attributes'] = {},\r\n  allComponents: ComponentsDictionary = {}\r\n): ComponentsDictionary => {\r\n  const getComponents = (attributes: Schema.Attribute.AnyAttribute[]) => {\r\n    return attributes.reduce<string[]>((acc, attribute) => {\r\n      /**\r\n       * If the attribute is a component or dynamiczone, we need to recursively\r\n       * extract the component UIDs from its attributes.\r\n       */\r\n      if (attribute.type === 'component') {\r\n        const componentAttributes = Object.values(\r\n          allComponents[attribute.component]?.attributes ?? {}\r\n        );\r\n\r\n        acc.push(attribute.component, ...getComponents(componentAttributes));\r\n      } else if (attribute.type === 'dynamiczone') {\r\n        acc.push(\r\n          ...attribute.components,\r\n          /**\r\n           * Dynamic zones have an array of components, so we flatMap over them\r\n           * performing the same search as above.\r\n           */\r\n          ...attribute.components.flatMap((componentUid) => {\r\n            const componentAttributes = Object.values(\r\n              allComponents[componentUid]?.attributes ?? {}\r\n            );\r\n\r\n            return getComponents(componentAttributes);\r\n          })\r\n        );\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n  };\r\n\r\n  const componentUids = getComponents(Object.values(attributes));\r\n\r\n  const uniqueComponentUids = [...new Set(componentUids)];\r\n\r\n  const componentsByKey = uniqueComponentUids.reduce<ComponentsDictionary>((acc, uid) => {\r\n    acc[uid] = allComponents[uid];\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  return componentsByKey;\r\n};\r\n\r\nexport { useContentTypeSchema, extractContentTypeComponents };\r\nexport type { ComponentsDictionary };\r\n","export const HOOKS = {\r\n  /**\r\n   * Hook that allows to mutate the displayed headers of the list view table\r\n   * @constant\r\n   * @type {string}\r\n   */\r\n  INJECT_COLUMN_IN_TABLE: 'Admin/CM/pages/ListView/inject-column-in-table',\r\n\r\n  /**\r\n   * Hook that allows to mutate the CM's collection types links pre-set filters\r\n   * @constant\r\n   * @type {string}\r\n   */\r\n  MUTATE_COLLECTION_TYPES_LINKS: 'Admin/CM/pages/App/mutate-collection-types-links',\r\n\r\n  /**\r\n   * Hook that allows to mutate the CM's edit view layout\r\n   * @constant\r\n   * @type {string}\r\n   */\r\n  MUTATE_EDIT_VIEW_LAYOUT: 'Admin/CM/pages/EditView/mutate-edit-view-layout',\r\n\r\n  /**\r\n   * Hook that allows to mutate the CM's single types links pre-set filters\r\n   * @constant\r\n   * @type {string}\r\n   */\r\n  MUTATE_SINGLE_TYPES_LINKS: 'Admin/CM/pages/App/mutate-single-types-links',\r\n};\r\n","import {\r\n  FindContentTypeConfiguration,\r\n  UpdateContentTypeConfiguration,\r\n  FindContentTypesSettings,\r\n} from '../../../shared/contracts/content-types';\r\n\r\nimport { contentManagerApi } from './api';\r\n\r\nconst contentTypesApi = contentManagerApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getContentTypeConfiguration: builder.query<\r\n      FindContentTypeConfiguration.Response['data'],\r\n      string\r\n    >({\r\n      query: (uid) => ({\r\n        url: `/content-manager/content-types/${uid}/configuration`,\r\n        method: 'GET',\r\n      }),\r\n      transformResponse: (response: FindContentTypeConfiguration.Response) => response.data,\r\n      providesTags: (_result, _error, uid) => [\r\n        { type: 'ContentTypesConfiguration', id: uid },\r\n        { type: 'ContentTypeSettings', id: 'LIST' },\r\n      ],\r\n    }),\r\n    getAllContentTypeSettings: builder.query<FindContentTypesSettings.Response['data'], void>({\r\n      query: () => '/content-manager/content-types-settings',\r\n      transformResponse: (response: FindContentTypesSettings.Response) => response.data,\r\n      providesTags: [{ type: 'ContentTypeSettings', id: 'LIST' }],\r\n    }),\r\n    updateContentTypeConfiguration: builder.mutation<\r\n      UpdateContentTypeConfiguration.Response['data'],\r\n      UpdateContentTypeConfiguration.Request['body'] & {\r\n        uid: string;\r\n      }\r\n    >({\r\n      query: ({ uid, ...body }) => ({\r\n        url: `/content-manager/content-types/${uid}/configuration`,\r\n        method: 'PUT',\r\n        data: body,\r\n      }),\r\n      transformResponse: (response: UpdateContentTypeConfiguration.Response) => response.data,\r\n      invalidatesTags: (_result, _error, { uid }) => [\r\n        { type: 'ContentTypesConfiguration', id: uid },\r\n        { type: 'ContentTypeSettings', id: 'LIST' },\r\n        // Is this necessary?\r\n        { type: 'InitialData' },\r\n      ],\r\n    }),\r\n  }),\r\n});\r\n\r\nconst {\r\n  useGetContentTypeConfigurationQuery,\r\n  useGetAllContentTypeSettingsQuery,\r\n  useUpdateContentTypeConfigurationMutation,\r\n} = contentTypesApi;\r\n\r\nexport {\r\n  useGetContentTypeConfigurationQuery,\r\n  useGetAllContentTypeSettingsQuery,\r\n  useUpdateContentTypeConfigurationMutation,\r\n};\r\n","import type { ComponentsDictionary, Schema } from '../hooks/useDocument';\r\nimport type { Schema as SchemaUtils } from '@strapi/types';\r\n\r\nconst checkIfAttributeIsDisplayable = (attribute: SchemaUtils.Attribute.AnyAttribute) => {\r\n  const { type } = attribute;\r\n\r\n  if (type === 'relation') {\r\n    return !attribute.relation.toLowerCase().includes('morph');\r\n  }\r\n\r\n  return !['json', 'dynamiczone', 'richtext', 'password', 'blocks'].includes(type) && !!type;\r\n};\r\n\r\ninterface MainField {\r\n  name: string;\r\n  type: SchemaUtils.Attribute.Kind | 'custom';\r\n}\r\n\r\n/**\r\n * @internal\r\n * @description given an attribute, content-type schemas & component schemas, find the mainField name & type.\r\n * If the attribute does not need a `mainField` then we return undefined. If we do not find the type\r\n * of the field, we assume it's a string #sensible-defaults\r\n */\r\nconst getMainField = (\r\n  attribute: SchemaUtils.Attribute.AnyAttribute,\r\n  mainFieldName: string | undefined,\r\n  { schemas, components }: { schemas: Schema[]; components: ComponentsDictionary }\r\n): MainField | undefined => {\r\n  if (!mainFieldName) {\r\n    return undefined;\r\n  }\r\n\r\n  const mainFieldType =\r\n    attribute.type === 'component'\r\n      ? components[attribute.component].attributes[mainFieldName].type\r\n      : // @ts-expect-error – `targetModel` does exist on the attribute for a relation.\r\n        schemas.find((schema) => schema.uid === attribute.targetModel)?.attributes[mainFieldName]\r\n          .type;\r\n\r\n  return {\r\n    name: mainFieldName,\r\n    type: mainFieldType ?? 'string',\r\n  };\r\n};\r\n\r\nexport { checkIfAttributeIsDisplayable, getMainField };\r\nexport type { MainField };\r\n","import * as React from 'react';\r\n\r\nimport { SerializedError } from '@reduxjs/toolkit';\r\nimport {\r\n  useNotification,\r\n  useStrapiApp,\r\n  useAPIErrorHandler,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\n\r\nimport { HOOKS } from '../constants/hooks';\r\nimport { useGetContentTypeConfigurationQuery } from '../services/contentTypes';\r\nimport { BaseQueryError } from '../utils/api';\r\nimport { getMainField } from '../utils/attributes';\r\n\r\nimport { useContentTypeSchema } from './useContentTypeSchema';\r\nimport {\r\n  type ComponentsDictionary,\r\n  type Document,\r\n  type Schema,\r\n  useDoc,\r\n  useDocument,\r\n} from './useDocument';\r\n\r\nimport type { ComponentConfiguration } from '../../../shared/contracts/components';\r\nimport type {\r\n  Metadatas,\r\n  FindContentTypeConfiguration,\r\n  Settings,\r\n} from '../../../shared/contracts/content-types';\r\nimport type { Filters, InputProps, Table } from '@strapi/admin/strapi-admin';\r\nimport type { Schema as SchemaUtils } from '@strapi/types';\r\n\r\ntype LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;\r\n\r\ninterface LayoutSettings extends Settings {\r\n  displayName?: string;\r\n  icon?: never;\r\n}\r\n\r\ninterface ListFieldLayout\r\n  extends Table.Header<Document, ListFieldLayout>,\r\n    Pick<Filters.Filter, 'mainField'> {\r\n  attribute: SchemaUtils.Attribute.AnyAttribute | { type: 'custom' };\r\n}\r\n\r\ninterface ListLayout {\r\n  layout: ListFieldLayout[];\r\n  components?: never;\r\n  metadatas: {\r\n    [K in keyof Metadatas]: Metadatas[K]['list'];\r\n  };\r\n  options: LayoutOptions;\r\n  settings: LayoutSettings;\r\n}\r\ninterface EditFieldSharedProps\r\n  extends Omit<InputProps, 'hint' | 'label' | 'type'>,\r\n    Pick<Filters.Filter, 'mainField'> {\r\n  hint?: string;\r\n  label: string;\r\n  size: number;\r\n  unique?: boolean;\r\n  visible?: boolean;\r\n}\r\n\r\n/**\r\n * Map over all the types in Attribute Types and use that to create a union of new types where the attribute type\r\n * is under the property attribute and the type is under the property type.\r\n */\r\ntype EditFieldLayout = {\r\n  [K in SchemaUtils.Attribute.Kind]: EditFieldSharedProps & {\r\n    attribute: Extract<SchemaUtils.Attribute.AnyAttribute, { type: K }>;\r\n    type: K;\r\n  };\r\n}[SchemaUtils.Attribute.Kind];\r\n\r\ninterface EditLayout {\r\n  layout: Array<Array<EditFieldLayout[]>>;\r\n  components: {\r\n    [uid: string]: {\r\n      layout: Array<EditFieldLayout[]>;\r\n      settings: ComponentConfiguration['settings'] & {\r\n        displayName?: string;\r\n        icon?: string;\r\n      };\r\n    };\r\n  };\r\n  metadatas: {\r\n    [K in keyof Metadatas]: Metadatas[K]['edit'];\r\n  };\r\n  options: LayoutOptions;\r\n  settings: LayoutSettings;\r\n}\r\n\r\ntype UseDocumentLayout = (model: string) => {\r\n  error?: BaseQueryError | SerializedError;\r\n  isLoading: boolean;\r\n  /**\r\n   * This is the layout for the edit view,\r\n   */\r\n  edit: EditLayout;\r\n  list: ListLayout;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useDocumentLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst DEFAULT_SETTINGS = {\r\n  bulkable: false,\r\n  filterable: false,\r\n  searchable: false,\r\n  pagination: false,\r\n  defaultSortBy: '',\r\n  defaultSortOrder: 'asc',\r\n  mainField: 'id',\r\n  pageSize: 10,\r\n};\r\n\r\n/**\r\n * @alpha\r\n * @description This hook is used to get the layouts for either the edit view or list view of a specific content-type\r\n * including the layouts for the components used in the content-type. It also runs the mutation hook waterfall so the data\r\n * is consistent wherever it is used. It's a light wrapper around the `useDocument` hook, but provides the `skip` option a document\r\n * is not fetched, however, it does fetch the schemas & components if they do not already exist in the cache.\r\n *\r\n * If the fetch fails, it will display a notification to the user.\r\n *\r\n * @example\r\n * ```tsx\r\n * const { model } = useParams<{ model: string }>();\r\n * const { edit: { schema: layout } } = useDocumentLayout(model);\r\n *\r\n * return layout.map(panel => panel.map(row => row.map(field => <Field.Root {...field} />)))\r\n * ```\r\n *\r\n */\r\nconst useDocumentLayout: UseDocumentLayout = (model) => {\r\n  const { schema, components } = useDocument({ model, collectionType: '' }, { skip: true });\r\n  const [{ query }] = useQueryParams();\r\n  const runHookWaterfall = useStrapiApp('useDocumentLayout', (state) => state.runHookWaterfall);\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const { isLoading: isLoadingSchemas, schemas } = useContentTypeSchema();\r\n\r\n  const {\r\n    data,\r\n    isLoading: isLoadingConfigs,\r\n    error,\r\n    isFetching: isFetchingConfigs,\r\n  } = useGetContentTypeConfigurationQuery(model);\r\n\r\n  const isLoading = isLoadingSchemas || isFetchingConfigs || isLoadingConfigs;\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const editLayout = React.useMemo(\r\n    () =>\r\n      data && !isLoading\r\n        ? formatEditLayout(data, { schemas, schema, components })\r\n        : ({\r\n            layout: [],\r\n            components: {},\r\n            metadatas: {},\r\n            options: {},\r\n            settings: DEFAULT_SETTINGS,\r\n          } as EditLayout),\r\n    [data, isLoading, schemas, schema, components]\r\n  );\r\n\r\n  const listLayout = React.useMemo(() => {\r\n    return data && !isLoading\r\n      ? formatListLayout(data, { schemas, schema, components })\r\n      : ({\r\n          layout: [],\r\n          metadatas: {},\r\n          options: {},\r\n          settings: DEFAULT_SETTINGS,\r\n        } as ListLayout);\r\n  }, [data, isLoading, schemas, schema, components]);\r\n\r\n  const { layout: edit } = React.useMemo(\r\n    () =>\r\n      runHookWaterfall(HOOKS.MUTATE_EDIT_VIEW_LAYOUT, {\r\n        layout: editLayout,\r\n        query,\r\n      }),\r\n    [editLayout, query, runHookWaterfall]\r\n  );\r\n\r\n  return {\r\n    error,\r\n    isLoading,\r\n    edit,\r\n    list: listLayout,\r\n  } satisfies ReturnType<UseDocumentLayout>;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useDocLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal this hook uses the internal useDoc hook, as such it shouldn't be used outside of the\r\n * content-manager because it won't work as intended.\r\n */\r\nconst useDocLayout = () => {\r\n  const { model } = useDoc();\r\n  return useDocumentLayout(model);\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * formatEditLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\ntype LayoutData = FindContentTypeConfiguration.Response['data'];\r\n\r\n/**\r\n * @internal\r\n * @description takes the configuration data, the schema & the components used in the schema and formats the edit view\r\n * versions of the schema & components. This is then used to render the edit view of the content-type.\r\n */\r\nconst formatEditLayout = (\r\n  data: LayoutData,\r\n  {\r\n    schemas,\r\n    schema,\r\n    components,\r\n  }: { schemas: Schema[]; schema?: Schema; components: ComponentsDictionary }\r\n): EditLayout => {\r\n  let currentPanelIndex = 0;\r\n  /**\r\n   * The fields arranged by the panels, new panels are made for dynamic zones only.\r\n   */\r\n  const panelledEditAttributes = convertEditLayoutToFieldLayouts(\r\n    data.contentType.layouts.edit,\r\n    schema?.attributes,\r\n    data.contentType.metadatas,\r\n    { configurations: data.components, schemas: components },\r\n    schemas\r\n  ).reduce<Array<EditFieldLayout[][]>>((panels, row) => {\r\n    if (row.some((field) => field.type === 'dynamiczone')) {\r\n      panels.push([row]);\r\n      currentPanelIndex += 2;\r\n    } else {\r\n      if (!panels[currentPanelIndex]) {\r\n        panels.push([row]);\r\n      } else {\r\n        panels[currentPanelIndex].push(row);\r\n      }\r\n    }\r\n\r\n    return panels;\r\n  }, []);\r\n\r\n  const componentEditAttributes = Object.entries(data.components).reduce<EditLayout['components']>(\r\n    (acc, [uid, configuration]) => {\r\n      acc[uid] = {\r\n        layout: convertEditLayoutToFieldLayouts(\r\n          configuration.layouts.edit,\r\n          components[uid].attributes,\r\n          configuration.metadatas,\r\n          { configurations: data.components, schemas: components }\r\n        ),\r\n        settings: {\r\n          ...configuration.settings,\r\n          icon: components[uid].info.icon,\r\n          displayName: components[uid].info.displayName,\r\n        },\r\n      };\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n\r\n  const editMetadatas = Object.entries(data.contentType.metadatas).reduce<EditLayout['metadatas']>(\r\n    (acc, [attribute, metadata]) => {\r\n      return {\r\n        ...acc,\r\n        [attribute]: metadata.edit,\r\n      };\r\n    },\r\n    {}\r\n  );\r\n\r\n  return {\r\n    layout: panelledEditAttributes,\r\n    components: componentEditAttributes,\r\n    metadatas: editMetadatas,\r\n    settings: {\r\n      ...data.contentType.settings,\r\n      displayName: schema?.info.displayName,\r\n    },\r\n    options: {\r\n      ...schema?.options,\r\n      ...schema?.pluginOptions,\r\n      ...data.contentType.options,\r\n    },\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * convertEditLayoutToFieldLayouts\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal\r\n * @description takes the edit layout from either a content-type or a component\r\n * and formats it into a generic object that can be used to correctly render\r\n * the form fields.\r\n */\r\nconst convertEditLayoutToFieldLayouts = (\r\n  rows: LayoutData['contentType']['layouts']['edit'],\r\n  attributes: Schema['attributes'] = {},\r\n  metadatas: Metadatas,\r\n  components?: {\r\n    configurations: Record<string, ComponentConfiguration>;\r\n    schemas: ComponentsDictionary;\r\n  },\r\n  schemas: Schema[] = []\r\n) => {\r\n  return rows.map((row) =>\r\n    row\r\n      .map((field) => {\r\n        const attribute = attributes[field.name];\r\n\r\n        if (!attribute) {\r\n          return null;\r\n        }\r\n\r\n        const { edit: metadata } = metadatas[field.name];\r\n\r\n        const settings: Partial<Settings> =\r\n          attribute.type === 'component' && components\r\n            ? components.configurations[attribute.component].settings\r\n            : {};\r\n\r\n        return {\r\n          attribute,\r\n          disabled: !metadata.editable,\r\n          hint: metadata.description,\r\n          label: metadata.label ?? '',\r\n          name: field.name,\r\n          // @ts-expect-error – mainField does exist on the metadata for a relation.\r\n          mainField: getMainField(attribute, metadata.mainField || settings.mainField, {\r\n            schemas,\r\n            components: components?.schemas ?? {},\r\n          }),\r\n          placeholder: metadata.placeholder ?? '',\r\n          required: attribute.required ?? false,\r\n          size: field.size,\r\n          unique: 'unique' in attribute ? attribute.unique : false,\r\n          visible: metadata.visible ?? true,\r\n          type: attribute.type,\r\n        };\r\n      })\r\n      .filter((field) => field !== null)\r\n  ) as EditFieldLayout[][];\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * formatListLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal\r\n * @description takes the complete configuration data, the schema & the components used in the schema and\r\n * formats a list view layout for the content-type. This is much simpler than the edit view layout as there\r\n * are less options to consider.\r\n */\r\nconst formatListLayout = (\r\n  data: LayoutData,\r\n  {\r\n    schemas,\r\n    schema,\r\n    components,\r\n  }: { schemas: Schema[]; schema?: Schema; components: ComponentsDictionary }\r\n): ListLayout => {\r\n  const listMetadatas = Object.entries(data.contentType.metadatas).reduce<ListLayout['metadatas']>(\r\n    (acc, [attribute, metadata]) => {\r\n      return {\r\n        ...acc,\r\n        [attribute]: metadata.list,\r\n      };\r\n    },\r\n    {}\r\n  );\r\n  /**\r\n   * The fields arranged by the panels, new panels are made for dynamic zones only.\r\n   */\r\n  const listAttributes = convertListLayoutToFieldLayouts(\r\n    data.contentType.layouts.list,\r\n    schema?.attributes,\r\n    listMetadatas,\r\n    { configurations: data.components, schemas: components },\r\n    schemas\r\n  );\r\n\r\n  return {\r\n    layout: listAttributes,\r\n    settings: { ...data.contentType.settings, displayName: schema?.info.displayName },\r\n    metadatas: listMetadatas,\r\n    options: {\r\n      ...schema?.options,\r\n      ...schema?.pluginOptions,\r\n      ...data.contentType.options,\r\n    },\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * convertListLayoutToFieldLayouts\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal\r\n * @description takes the columns from the list view configuration and formats them into a generic object\r\n * combinining metadata and attribute data.\r\n *\r\n * @note We do use this to reformat the list of strings when updating the displayed headers for the list view.\r\n */\r\nconst convertListLayoutToFieldLayouts = (\r\n  columns: LayoutData['contentType']['layouts']['list'],\r\n  attributes: Schema['attributes'] = {},\r\n  metadatas: ListLayout['metadatas'],\r\n  components?: {\r\n    configurations: Record<string, ComponentConfiguration>;\r\n    schemas: ComponentsDictionary;\r\n  },\r\n  schemas: Schema[] = []\r\n) => {\r\n  return columns\r\n    .map((name) => {\r\n      const attribute = attributes[name];\r\n\r\n      if (!attribute) {\r\n        return null;\r\n      }\r\n\r\n      const metadata = metadatas[name];\r\n\r\n      const settings: Partial<Settings> =\r\n        attribute.type === 'component' && components\r\n          ? components.configurations[attribute.component].settings\r\n          : {};\r\n\r\n      return {\r\n        attribute,\r\n        label: metadata.label ?? '',\r\n        mainField: getMainField(attribute, metadata.mainField || settings.mainField, {\r\n          schemas,\r\n          components: components?.schemas ?? {},\r\n        }),\r\n        name: name,\r\n        searchable: metadata.searchable ?? true,\r\n        sortable: metadata.sortable ?? true,\r\n      } satisfies ListFieldLayout;\r\n    })\r\n    .filter((field) => field !== null) as ListFieldLayout[];\r\n};\r\n\r\nexport {\r\n  useDocLayout,\r\n  useDocumentLayout,\r\n  convertListLayoutToFieldLayouts,\r\n  convertEditLayoutToFieldLayouts,\r\n  DEFAULT_SETTINGS,\r\n};\r\nexport type { EditLayout, EditFieldLayout, ListLayout, ListFieldLayout, UseDocumentLayout };\r\n","/**\r\n * This hook doesn't use a context provider because we fetch directly from the server,\r\n * this sounds expensive but actually, it's really not. Because we have redux-toolkit-query\r\n * being a cache layer so if nothing invalidates the cache, we don't fetch again.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  useNotification,\r\n  useAPIErrorHandler,\r\n  useQueryParams,\r\n  FormErrors,\r\n  getYupValidationErrors,\r\n  useForm,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Modules } from '@strapi/types';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ValidationError } from 'yup';\r\n\r\nimport { SINGLE_TYPES } from '../constants/collections';\r\nimport { useGetDocumentQuery } from '../services/documents';\r\nimport { buildValidParams } from '../utils/api';\r\nimport { createYupSchema } from '../utils/validation';\r\n\r\nimport { useContentTypeSchema, ComponentsDictionary } from './useContentTypeSchema';\r\nimport { useDocumentLayout } from './useDocumentLayout';\r\n\r\nimport type { FindOne } from '../../../shared/contracts/collection-types';\r\nimport type { ContentType } from '../../../shared/contracts/content-types';\r\n\r\ninterface UseDocumentArgs {\r\n  collectionType: string;\r\n  model: string;\r\n  documentId?: string;\r\n  params?: object;\r\n}\r\n\r\ntype UseDocumentOpts = Parameters<typeof useGetDocumentQuery>[1];\r\n\r\ntype Document = FindOne.Response['data'];\r\n\r\ntype Schema = ContentType;\r\n\r\ntype UseDocument = (\r\n  args: UseDocumentArgs,\r\n  opts?: UseDocumentOpts\r\n) => {\r\n  /**\r\n   * These are the schemas of the components used in the content type, organised\r\n   * by their uid.\r\n   */\r\n  components: ComponentsDictionary;\r\n  document?: Document;\r\n  meta?: FindOne.Response['meta'];\r\n  isLoading: boolean;\r\n  /**\r\n   * This is the schema of the content type, it is not the same as the layout.\r\n   */\r\n  schema?: Schema;\r\n  schemas?: Schema[];\r\n  validate: (document: Document) => null | FormErrors;\r\n  hasError?: boolean;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useDocument\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @alpha\r\n * @public\r\n * @description Returns a document based on the model, collection type & id passed as arguments.\r\n * Also extracts its schema from the redux cache to be used for creating a validation schema.\r\n * @example\r\n * ```tsx\r\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\r\n *\r\n * if(!model || !collectionType) return null;\r\n *\r\n * const { document, isLoading, validate } = useDocument({ documentId: id, model, collectionType, params: { locale: 'en-GB' } })\r\n * const { update } = useDocumentActions()\r\n *\r\n * const onSubmit = async (document: Document) => {\r\n *  const errors = validate(document);\r\n *\r\n *  if(errors) {\r\n *      // handle errors\r\n *  }\r\n *\r\n *  await update({ collectionType, model, id }, document)\r\n * }\r\n * ```\r\n *\r\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document} for more information\r\n */\r\nconst useDocument: UseDocument = (args, opts) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const {\r\n    currentData: data,\r\n    isLoading: isLoadingDocument,\r\n    isFetching: isFetchingDocument,\r\n    error,\r\n  } = useGetDocumentQuery(args, {\r\n    ...opts,\r\n    skip: (!args.documentId && args.collectionType !== SINGLE_TYPES) || opts?.skip,\r\n  });\r\n\r\n  const {\r\n    components,\r\n    schema,\r\n    schemas,\r\n    isLoading: isLoadingSchema,\r\n  } = useContentTypeSchema(args.model);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [toggleNotification, error, formatAPIError, args.collectionType]);\r\n\r\n  const validationSchema = React.useMemo(() => {\r\n    if (!schema) {\r\n      return null;\r\n    }\r\n\r\n    return createYupSchema(schema.attributes, components);\r\n  }, [schema, components]);\r\n\r\n  const validate = React.useCallback(\r\n    (document: Modules.Documents.AnyDocument): FormErrors | null => {\r\n      if (!validationSchema) {\r\n        throw new Error(\r\n          'There is no validation schema generated, this is likely due to the schema not being loaded yet.'\r\n        );\r\n      }\r\n\r\n      try {\r\n        validationSchema.validateSync(document, { abortEarly: false, strict: true });\r\n        return null;\r\n      } catch (error) {\r\n        if (error instanceof ValidationError) {\r\n          return getYupValidationErrors(error);\r\n        }\r\n\r\n        throw error;\r\n      }\r\n    },\r\n    [validationSchema]\r\n  );\r\n\r\n  const isLoading = isLoadingDocument || isFetchingDocument || isLoadingSchema;\r\n  const hasError = !!error;\r\n\r\n  return {\r\n    components,\r\n    document: data?.data,\r\n    meta: data?.meta,\r\n    isLoading,\r\n    hasError,\r\n    schema,\r\n    schemas,\r\n    validate,\r\n  } satisfies ReturnType<UseDocument>;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useDoc\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal this hook uses the router to extract the model, collection type & id from the url.\r\n * therefore, it shouldn't be used outside of the content-manager because it won't work as intended.\r\n */\r\nconst useDoc = () => {\r\n  const { id, slug, collectionType, origin } = useParams<{\r\n    id: string;\r\n    origin: string;\r\n    slug: string;\r\n    collectionType: string;\r\n  }>();\r\n  const [{ query }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  if (!collectionType) {\r\n    throw new Error('Could not find collectionType in url params');\r\n  }\r\n\r\n  if (!slug) {\r\n    throw new Error('Could not find model in url params');\r\n  }\r\n\r\n  const document = useDocument(\r\n    { documentId: origin || id, model: slug, collectionType, params },\r\n    {\r\n      skip: id === 'create' || (!origin && !id && collectionType !== SINGLE_TYPES),\r\n    }\r\n  );\r\n\r\n  const returnId = origin || id === 'create' ? undefined : id;\r\n\r\n  return {\r\n    collectionType,\r\n    model: slug,\r\n    id: returnId,\r\n    ...document,\r\n  };\r\n};\r\n\r\n/**\r\n * @public\r\n * @experimental\r\n * Content manager context hooks for plugin development.\r\n * Make sure to use this hook inside the content manager.\r\n */\r\nconst useContentManagerContext = () => {\r\n  const {\r\n    collectionType,\r\n    model,\r\n    id,\r\n    components,\r\n    isLoading: isLoadingDoc,\r\n    schema,\r\n    schemas,\r\n  } = useDoc();\r\n\r\n  const layout = useDocumentLayout(model);\r\n\r\n  const form = useForm('useContentManagerContext', (state) => state);\r\n\r\n  const isSingleType = collectionType === SINGLE_TYPES;\r\n  const slug = model;\r\n  const isCreatingEntry = id === 'create';\r\n\r\n  const {} = useContentTypeSchema();\r\n\r\n  const isLoading = isLoadingDoc || layout.isLoading;\r\n  const error = layout.error;\r\n\r\n  return {\r\n    error,\r\n    isLoading,\r\n\r\n    // Base metadata\r\n    model,\r\n    collectionType,\r\n    id,\r\n    slug,\r\n    isCreatingEntry,\r\n    isSingleType,\r\n    hasDraftAndPublish: schema?.options?.draftAndPublish ?? false,\r\n\r\n    // All schema infos\r\n    components,\r\n    contentType: schema,\r\n    contentTypes: schemas,\r\n\r\n    // Form state\r\n    form,\r\n\r\n    // layout infos\r\n    layout,\r\n  };\r\n};\r\n\r\nexport { useDocument, useDoc, useContentManagerContext };\r\nexport type { UseDocument, UseDocumentArgs, Document, Schema, ComponentsDictionary };\r\n","type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nconst getTranslation = (id: string) => `content-manager.${id}`;\r\n\r\nexport { getTranslation, prefixPluginTranslations };\r\n","import * as React from 'react';\r\n\r\nimport { SerializedError } from '@reduxjs/toolkit';\r\nimport {\r\n  useNotification,\r\n  useTracking,\r\n  type TrackingEvent,\r\n  useAPIErrorHandler,\r\n  useGuidedTour,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { useIntl, type MessageDescriptor } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {\r\n  useAutoCloneDocumentMutation,\r\n  useCloneDocumentMutation,\r\n  useCreateDocumentMutation,\r\n  useDeleteDocumentMutation,\r\n  useDeleteManyDocumentsMutation,\r\n  useDiscardDocumentMutation,\r\n  useLazyGetDocumentQuery,\r\n  usePublishDocumentMutation,\r\n  usePublishManyDocumentsMutation,\r\n  useUnpublishDocumentMutation,\r\n  useUnpublishManyDocumentsMutation,\r\n  useUpdateDocumentMutation,\r\n} from '../services/documents';\r\nimport { BaseQueryError } from '../utils/api';\r\nimport { getTranslation } from '../utils/translations';\r\n\r\nimport type { Document } from './useDocument';\r\nimport type {\r\n  AutoClone,\r\n  Clone,\r\n  Create,\r\n  Delete,\r\n  BulkDelete,\r\n  Discard,\r\n  FindOne,\r\n  Publish,\r\n  BulkPublish,\r\n  Update,\r\n  Unpublish,\r\n  BulkUnpublish,\r\n} from '../../../shared/contracts/collection-types';\r\n\r\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\r\n  id: 'notification.error',\r\n  defaultMessage: 'An error occurred, please try again',\r\n} satisfies MessageDescriptor;\r\n\r\ntype OperationResponse<TResponse extends { data: any; meta?: any; error?: any }> =\r\n  | Pick<TResponse, 'data'>\r\n  | Pick<TResponse, 'data' | 'meta'>\r\n  | { error: BaseQueryError | SerializedError };\r\n\r\ntype BulkOperationResponse<TResponse extends { data: any; error?: any }> =\r\n  | Pick<TResponse, 'data'>\r\n  | { error: BaseQueryError | SerializedError };\r\n\r\ntype UseDocumentActions = () => {\r\n  /**\r\n   * @description Attempts to clone a document based on the provided sourceId.\r\n   * This will return a list of the fields as an error if it's unable to clone.\r\n   * You most likely want to use the `clone` action instead.\r\n   */\r\n  autoClone: (args: {\r\n    model: string;\r\n    sourceId: string;\r\n  }) => Promise<OperationResponse<AutoClone.Response>>;\r\n  clone: (\r\n    args: {\r\n      model: string;\r\n      documentId: string;\r\n      params?: object;\r\n    },\r\n    document: Omit<Document, 'id'>,\r\n    trackerProperty?: Extract<\r\n      TrackingEvent,\r\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\r\n    >['properties']\r\n  ) => Promise<OperationResponse<Clone.Response>>;\r\n  create: (\r\n    args: {\r\n      model: string;\r\n      params?: object;\r\n    },\r\n    document: Omit<Document, 'id'>,\r\n    trackerProperty?: Extract<\r\n      TrackingEvent,\r\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\r\n    >['properties']\r\n  ) => Promise<OperationResponse<Create.Response>>;\r\n  delete: (\r\n    args: {\r\n      collectionType: string;\r\n      model: string;\r\n      documentId?: string;\r\n      params?: object;\r\n    },\r\n    trackerProperty?: Extract<\r\n      TrackingEvent,\r\n      { name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry' }\r\n    >['properties']\r\n  ) => Promise<OperationResponse<Delete.Response>>;\r\n  deleteMany: (args: {\r\n    model: string;\r\n    documentIds: string[];\r\n    params?: object;\r\n  }) => Promise<BulkOperationResponse<BulkDelete.Response>>;\r\n  discard: (args: {\r\n    collectionType: string;\r\n    model: string;\r\n    documentId?: string;\r\n    params?: object;\r\n  }) => Promise<OperationResponse<Discard.Response>>;\r\n  getDocument: (args: {\r\n    collectionType: string;\r\n    model: string;\r\n    documentId?: string;\r\n    params?: object;\r\n  }) => Promise<FindOne.Response | undefined>;\r\n  publish: (\r\n    args: {\r\n      collectionType: string;\r\n      model: string;\r\n      documentId?: string;\r\n      params?: object;\r\n    },\r\n    document: Partial<Document>\r\n  ) => Promise<OperationResponse<Publish.Response>>;\r\n  publishMany: (args: {\r\n    model: string;\r\n    documentIds: string[];\r\n    params?: object;\r\n  }) => Promise<BulkOperationResponse<BulkPublish.Response>>;\r\n  update: (\r\n    args: {\r\n      collectionType: string;\r\n      model: string;\r\n      documentId?: string;\r\n      params?: object;\r\n    },\r\n    document: Partial<Document>,\r\n    trackerProperty?: Extract<\r\n      TrackingEvent,\r\n      { name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry' }\r\n    >['properties']\r\n  ) => Promise<OperationResponse<Update.Response>>;\r\n  unpublish: (\r\n    args: {\r\n      collectionType: string;\r\n      model: string;\r\n      documentId?: string;\r\n      params?: object;\r\n    },\r\n    discardDraft?: boolean\r\n  ) => Promise<OperationResponse<Unpublish.Response>>;\r\n  unpublishMany: (args: {\r\n    model: string;\r\n    documentIds: string[];\r\n    params?: object;\r\n  }) => Promise<BulkOperationResponse<BulkUnpublish.Response>>;\r\n};\r\n\r\ntype IUseDocumentActs = ReturnType<UseDocumentActions>;\r\n\r\n/**\r\n * @alpha\r\n * @public\r\n * @description Contains all the operations that can be performed on a single document.\r\n * Designed to be able to be used anywhere within a Strapi app. The hooks will handle\r\n * notifications should the operation fail, however the response is always returned incase\r\n * the user needs to handle side-effects.\r\n * @example\r\n * ```tsx\r\n * import { Form } from '@strapi/admin/admin';\r\n *\r\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\r\n * const { update } = useDocumentActions();\r\n *\r\n * const handleSubmit = async (data) => {\r\n *  await update({ collectionType, model, documentId: id }, data);\r\n * }\r\n *\r\n * return <Form method=\"PUT\" onSubmit={handleSubmit} />\r\n * ```\r\n *\r\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document-operations} for more information\r\n */\r\nconst useDocumentActions: UseDocumentActions = () => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const navigate = useNavigate();\r\n  const setCurrentStep = useGuidedTour('useDocumentActions', (state) => state.setCurrentStep);\r\n\r\n  const [deleteDocument] = useDeleteDocumentMutation();\r\n  const _delete: IUseDocumentActs['delete'] = React.useCallback(\r\n    async ({ collectionType, model, documentId, params }, trackerProperty) => {\r\n      try {\r\n        trackUsage('willDeleteEntry', trackerProperty);\r\n\r\n        const res = await deleteDocument({\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.delete'),\r\n            defaultMessage: 'Deleted document',\r\n          }),\r\n        });\r\n\r\n        trackUsage('didDeleteEntry', trackerProperty);\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        trackUsage('didNotDeleteEntry', { error: err, ...trackerProperty });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [trackUsage, deleteDocument, toggleNotification, formatMessage, formatAPIError]\r\n  );\r\n\r\n  const [deleteManyDocuments] = useDeleteManyDocumentsMutation();\r\n\r\n  const deleteMany: IUseDocumentActs['deleteMany'] = React.useCallback(\r\n    async ({ model, documentIds, params }) => {\r\n      try {\r\n        trackUsage('willBulkDeleteEntries');\r\n\r\n        const res = await deleteManyDocuments({\r\n          model,\r\n          documentIds,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          title: formatMessage({\r\n            id: getTranslation('success.records.delete'),\r\n            defaultMessage: 'Successfully deleted.',\r\n          }),\r\n          message: '',\r\n        });\r\n\r\n        trackUsage('didBulkDeleteEntries');\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        trackUsage('didNotBulkDeleteEntries');\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [trackUsage, deleteManyDocuments, toggleNotification, formatMessage, formatAPIError]\r\n  );\r\n\r\n  const [discardDocument] = useDiscardDocumentMutation();\r\n  const discard: IUseDocumentActs['discard'] = React.useCallback(\r\n    async ({ collectionType, model, documentId, params }) => {\r\n      try {\r\n        const res = await discardDocument({\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'content-manager.success.record.discard',\r\n            defaultMessage: 'Changes discarded',\r\n          }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [discardDocument, formatAPIError, formatMessage, toggleNotification]\r\n  );\r\n\r\n  const [publishDocument] = usePublishDocumentMutation();\r\n  const publish: IUseDocumentActs['publish'] = React.useCallback(\r\n    async ({ collectionType, model, documentId, params }, data) => {\r\n      try {\r\n        trackUsage('willPublishEntry');\r\n\r\n        const res = await publishDocument({\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          data,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n          return { error: res.error };\r\n        }\r\n\r\n        trackUsage('didPublishEntry');\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.publish'),\r\n            defaultMessage: 'Published document',\r\n          }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [trackUsage, publishDocument, toggleNotification, formatMessage, formatAPIError]\r\n  );\r\n\r\n  const [publishManyDocuments] = usePublishManyDocumentsMutation();\r\n  const publishMany: IUseDocumentActs['publishMany'] = React.useCallback(\r\n    async ({ model, documentIds, params }) => {\r\n      try {\r\n        // TODO Confirm tracking events for bulk publish?\r\n\r\n        const res = await publishManyDocuments({\r\n          model,\r\n          documentIds,\r\n          params,\r\n        });\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n          return { error: res.error };\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.publish'),\r\n            defaultMessage: 'Published document',\r\n          }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n        throw err;\r\n      }\r\n    },\r\n    [\r\n      // trackUsage,\r\n      publishManyDocuments,\r\n      toggleNotification,\r\n      formatMessage,\r\n      formatAPIError,\r\n    ]\r\n  );\r\n\r\n  const [updateDocument] = useUpdateDocumentMutation();\r\n  const update: IUseDocumentActs['update'] = React.useCallback(\r\n    async ({ collectionType, model, documentId, params }, data, trackerProperty) => {\r\n      try {\r\n        trackUsage('willEditEntry', trackerProperty);\r\n\r\n        const res = await updateDocument({\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          data,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n\r\n          trackUsage('didNotEditEntry', { error: res.error, ...trackerProperty });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        trackUsage('didEditEntry', trackerProperty);\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.save'),\r\n            defaultMessage: 'Saved document',\r\n          }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        trackUsage('didNotEditEntry', { error: err, ...trackerProperty });\r\n\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [trackUsage, updateDocument, toggleNotification, formatMessage, formatAPIError]\r\n  );\r\n\r\n  const [unpublishDocument] = useUnpublishDocumentMutation();\r\n  const unpublish: IUseDocumentActs['unpublish'] = React.useCallback(\r\n    async ({ collectionType, model, documentId, params }, discardDraft = false) => {\r\n      try {\r\n        trackUsage('willUnpublishEntry');\r\n\r\n        const res = await unpublishDocument({\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          params,\r\n          data: {\r\n            discardDraft,\r\n          },\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        trackUsage('didUnpublishEntry');\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.unpublish'),\r\n            defaultMessage: 'Unpublished document',\r\n          }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [trackUsage, unpublishDocument, toggleNotification, formatMessage, formatAPIError]\r\n  );\r\n\r\n  const [unpublishManyDocuments] = useUnpublishManyDocumentsMutation();\r\n  const unpublishMany: IUseDocumentActs['unpublishMany'] = React.useCallback(\r\n    async ({ model, documentIds, params }) => {\r\n      try {\r\n        trackUsage('willBulkUnpublishEntries');\r\n\r\n        const res = await unpublishManyDocuments({\r\n          model,\r\n          documentIds,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        trackUsage('didBulkUnpublishEntries');\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          title: formatMessage({\r\n            id: getTranslation('success.records.unpublish'),\r\n            defaultMessage: 'Successfully unpublished.',\r\n          }),\r\n          message: '',\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        trackUsage('didNotBulkUnpublishEntries');\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [trackUsage, unpublishManyDocuments, toggleNotification, formatMessage, formatAPIError]\r\n  );\r\n\r\n  const [createDocument] = useCreateDocumentMutation();\r\n  const create: IUseDocumentActs['create'] = React.useCallback(\r\n    async ({ model, params }, data, trackerProperty) => {\r\n      try {\r\n        const res = await createDocument({\r\n          model,\r\n          data,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n\r\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        trackUsage('didCreateEntry', trackerProperty);\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.save'),\r\n            defaultMessage: 'Saved document',\r\n          }),\r\n        });\r\n\r\n        setCurrentStep('contentManager.success');\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [createDocument, formatAPIError, formatMessage, toggleNotification, trackUsage]\r\n  );\r\n\r\n  const [autoCloneDocument] = useAutoCloneDocumentMutation();\r\n  const autoClone: IUseDocumentActs['autoClone'] = React.useCallback(\r\n    async ({ model, sourceId }) => {\r\n      try {\r\n        const res = await autoCloneDocument({\r\n          model,\r\n          sourceId,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          return { error: res.error };\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.clone'),\r\n            defaultMessage: 'Cloned document',\r\n          }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [autoCloneDocument, formatMessage, toggleNotification]\r\n  );\r\n\r\n  const [cloneDocument] = useCloneDocumentMutation();\r\n  const clone: IUseDocumentActs['clone'] = React.useCallback(\r\n    async ({ model, documentId, params }, body, trackerProperty) => {\r\n      try {\r\n        const { id: _id, ...restBody } = body;\r\n\r\n        /**\r\n         * If we're cloning we want to post directly to this endpoint\r\n         * so that the relations even if they're not listed in the EditView\r\n         * are correctly attached to the entry.\r\n         */\r\n        const res = await cloneDocument({\r\n          model,\r\n          sourceId: documentId,\r\n          data: restBody,\r\n          params,\r\n        });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\r\n\r\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\r\n\r\n          return { error: res.error };\r\n        }\r\n\r\n        trackUsage('didCreateEntry', trackerProperty);\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: getTranslation('success.record.clone'),\r\n            defaultMessage: 'Cloned document',\r\n          }),\r\n        });\r\n\r\n        // Redirect to normal edit view\r\n        navigate(`../../${res.data.data.documentId}`, { relative: 'path' });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [cloneDocument, trackUsage, toggleNotification, formatMessage, formatAPIError, navigate]\r\n  );\r\n\r\n  const [getDoc] = useLazyGetDocumentQuery();\r\n  const getDocument: IUseDocumentActs['getDocument'] = React.useCallback(\r\n    async (args) => {\r\n      const { data } = await getDoc(args);\r\n\r\n      return data;\r\n    },\r\n    [getDoc]\r\n  );\r\n\r\n  return {\r\n    autoClone,\r\n    clone,\r\n    create,\r\n    delete: _delete,\r\n    deleteMany,\r\n    discard,\r\n    getDocument,\r\n    publish,\r\n    publishMany,\r\n    unpublish,\r\n    unpublishMany,\r\n    update,\r\n  } satisfies IUseDocumentActs;\r\n};\r\n\r\nexport { useDocumentActions };\r\nexport type { UseDocumentActions, OperationResponse };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { type PathRouteProps } from 'react-router-dom';\r\n\r\nconst ProtectedHistoryPage = React.lazy(() =>\r\n  import('./pages/History').then((mod) => ({ default: mod.ProtectedHistoryPage }))\r\n);\r\n\r\n/**\r\n * These routes will be merged with the rest of the Content Manager routes\r\n */\r\nconst routes: PathRouteProps[] = [\r\n  {\r\n    path: ':collectionType/:slug/:id/history',\r\n    Component: ProtectedHistoryPage,\r\n  },\r\n  {\r\n    path: ':collectionType/:slug/history',\r\n    Component: ProtectedHistoryPage,\r\n  },\r\n];\r\n\r\nexport { routes };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport type { PathRouteProps } from 'react-router-dom';\r\n\r\nconst ProtectedPreviewPage = React.lazy(() =>\r\n  import('./pages/Preview').then((mod) => ({ default: mod.ProtectedPreviewPage }))\r\n);\r\n\r\nconst routes: PathRouteProps[] = [\r\n  {\r\n    path: ':collectionType/:slug/:id/preview',\r\n    Component: ProtectedPreviewPage,\r\n  },\r\n  {\r\n    path: ':collectionType/:slug/preview',\r\n    Component: ProtectedPreviewPage,\r\n  },\r\n];\r\n\r\nexport { routes };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport { lazy } from 'react';\r\n\r\nimport { Navigate, PathRouteProps, useParams } from 'react-router-dom';\r\n\r\nimport { COLLECTION_TYPES, SINGLE_TYPES } from './constants/collections';\r\nimport { routes as historyRoutes } from './history/routes';\r\nimport { routes as previewRoutes } from './preview/routes';\r\n\r\nconst ProtectedEditViewPage = lazy(() =>\r\n  import('./pages/EditView/EditViewPage').then((mod) => ({ default: mod.ProtectedEditViewPage }))\r\n);\r\nconst ProtectedListViewPage = lazy(() =>\r\n  import('./pages/ListView/ListViewPage').then((mod) => ({ default: mod.ProtectedListViewPage }))\r\n);\r\nconst ProtectedListConfiguration = lazy(() =>\r\n  import('./pages/ListConfiguration/ListConfigurationPage').then((mod) => ({\r\n    default: mod.ProtectedListConfiguration,\r\n  }))\r\n);\r\nconst ProtectedEditConfigurationPage = lazy(() =>\r\n  import('./pages/EditConfigurationPage').then((mod) => ({\r\n    default: mod.ProtectedEditConfigurationPage,\r\n  }))\r\n);\r\nconst ProtectedComponentConfigurationPage = lazy(() =>\r\n  import('./pages/ComponentConfigurationPage').then((mod) => ({\r\n    default: mod.ProtectedComponentConfigurationPage,\r\n  }))\r\n);\r\nconst NoPermissions = lazy(() =>\r\n  import('./pages/NoPermissionsPage').then((mod) => ({ default: mod.NoPermissions }))\r\n);\r\nconst NoContentType = lazy(() =>\r\n  import('./pages/NoContentTypePage').then((mod) => ({ default: mod.NoContentType }))\r\n);\r\n\r\nconst CollectionTypePages = () => {\r\n  const { collectionType } = useParams<{ collectionType: string }>();\r\n\r\n  /**\r\n   * We only support two types of collections.\r\n   */\r\n  if (collectionType !== COLLECTION_TYPES && collectionType !== SINGLE_TYPES) {\r\n    return <Navigate to=\"/404\" />;\r\n  }\r\n\r\n  return collectionType === COLLECTION_TYPES ? (\r\n    <ProtectedListViewPage />\r\n  ) : (\r\n    <ProtectedEditViewPage />\r\n  );\r\n};\r\n\r\nconst CLONE_RELATIVE_PATH = ':collectionType/:slug/clone/:origin';\r\nconst CLONE_PATH = `/content-manager/${CLONE_RELATIVE_PATH}`;\r\nconst LIST_RELATIVE_PATH = ':collectionType/:slug';\r\nconst LIST_PATH = `/content-manager/collection-types/:slug`;\r\n\r\nconst routes: PathRouteProps[] = [\r\n  {\r\n    path: LIST_RELATIVE_PATH,\r\n    element: <CollectionTypePages />,\r\n  },\r\n  {\r\n    path: ':collectionType/:slug/:id',\r\n    Component: ProtectedEditViewPage,\r\n  },\r\n  {\r\n    path: CLONE_RELATIVE_PATH,\r\n    Component: ProtectedEditViewPage,\r\n  },\r\n  {\r\n    path: ':collectionType/:slug/configurations/list',\r\n    Component: ProtectedListConfiguration,\r\n  },\r\n  {\r\n    path: 'components/:slug/configurations/edit',\r\n    Component: ProtectedComponentConfigurationPage,\r\n  },\r\n  {\r\n    path: ':collectionType/:slug/configurations/edit',\r\n    Component: ProtectedEditConfigurationPage,\r\n  },\r\n  {\r\n    path: '403',\r\n    Component: NoPermissions,\r\n  },\r\n  {\r\n    path: 'no-content-types',\r\n    Component: NoContentType,\r\n  },\r\n  ...historyRoutes,\r\n  ...previewRoutes,\r\n];\r\n\r\nexport { routes, CLONE_PATH, LIST_PATH };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useForm,\r\n  useNotification,\r\n  NotificationConfig,\r\n  useAPIErrorHandler,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Flex,\r\n  Modal,\r\n  Radio,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Menu,\r\n  ButtonProps,\r\n} from '@strapi/design-system';\r\nimport { Cross, More, WarningCircle } from '@strapi/icons';\r\nimport mapValues from 'lodash/fp/mapValues';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\r\nimport { DefaultTheme, styled } from 'styled-components';\r\n\r\nimport { PUBLISHED_AT_ATTRIBUTE_NAME } from '../../../constants/attributes';\r\nimport { SINGLE_TYPES } from '../../../constants/collections';\r\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\r\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\r\nimport { useGetDraftRelationCountQuery } from '../../../services/documents';\r\nimport { isBaseQueryError, buildValidParams } from '../../../utils/api';\r\nimport { getTranslation } from '../../../utils/translations';\r\n\r\nimport type { RelationsFormValue } from './FormInputs/Relations';\r\nimport type { DocumentActionComponent } from '../../../content-manager';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Types\r\n * -----------------------------------------------------------------------------------------------*/\r\ntype DocumentActionPosition = 'panel' | 'header' | 'table-row';\r\n\r\ninterface DocumentActionDescription {\r\n  label: string;\r\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\r\n  icon?: React.ReactNode;\r\n  /**\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * @default 'panel'\r\n   * @description Where the action should be rendered.\r\n   */\r\n  position?: DocumentActionPosition | DocumentActionPosition[];\r\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\r\n  /**\r\n   * @default 'secondary'\r\n   */\r\n  variant?: ButtonProps['variant'];\r\n}\r\n\r\ninterface DialogOptions {\r\n  type: 'dialog';\r\n  title: string;\r\n  content?: React.ReactNode;\r\n  variant?: ButtonProps['variant'];\r\n  onConfirm?: () => void | Promise<void>;\r\n  onCancel?: () => void | Promise<void>;\r\n}\r\n\r\ninterface NotificationOptions {\r\n  type: 'notification';\r\n  title: string;\r\n  link?: {\r\n    label: string;\r\n    url: string;\r\n    target?: string;\r\n  };\r\n  content?: string;\r\n  onClose?: () => void;\r\n  status?: NotificationConfig['type'];\r\n  timeout?: number;\r\n}\r\n\r\ninterface ModalOptions {\r\n  type: 'modal';\r\n  title: string;\r\n  content: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\r\n  footer?: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\r\n  onClose?: () => void;\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActions\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface Action extends DocumentActionDescription {\r\n  id: string;\r\n}\r\n\r\ninterface DocumentActionsProps {\r\n  actions: Action[];\r\n}\r\n\r\nconst DocumentActions = ({ actions }: DocumentActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [primaryAction, secondaryAction, ...restActions] = actions.filter((action) => {\r\n    if (action.position === undefined) {\r\n      return true;\r\n    }\r\n\r\n    const positions = Array.isArray(action.position) ? action.position : [action.position];\r\n    return positions.includes('panel');\r\n  });\r\n\r\n  if (!primaryAction) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\r\n      <Flex gap={2}>\r\n        <DocumentActionButton {...primaryAction} variant={primaryAction.variant || 'default'} />\r\n        {restActions.length > 0 ? (\r\n          <DocumentActionsMenu\r\n            actions={restActions}\r\n            label={formatMessage({\r\n              id: 'content-manager.containers.edit.panels.default.more-actions',\r\n              defaultMessage: 'More document actions',\r\n            })}\r\n          />\r\n        ) : null}\r\n      </Flex>\r\n      {secondaryAction ? (\r\n        <DocumentActionButton\r\n          {...secondaryAction}\r\n          variant={secondaryAction.variant || 'secondary'}\r\n        />\r\n      ) : null}\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActionButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DocumentActionButtonProps extends Action {}\r\n\r\nconst DocumentActionButton = (action: DocumentActionButtonProps) => {\r\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\r\n  const { toggleNotification } = useNotification();\r\n\r\n  const handleClick = (action: Action) => async (e: React.MouseEvent) => {\r\n    const { onClick = () => false, dialog, id } = action;\r\n\r\n    const muteDialog = await onClick(e);\r\n\r\n    if (dialog && !muteDialog) {\r\n      switch (dialog.type) {\r\n        case 'notification':\r\n          toggleNotification({\r\n            title: dialog.title,\r\n            message: dialog.content,\r\n            type: dialog.status,\r\n            timeout: dialog.timeout,\r\n            onClose: dialog.onClose,\r\n          });\r\n          break;\r\n        case 'dialog':\r\n        case 'modal':\r\n          e.preventDefault();\r\n          setDialogId(id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setDialogId(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        flex=\"auto\"\r\n        startIcon={action.icon}\r\n        disabled={action.disabled}\r\n        onClick={handleClick(action)}\r\n        justifyContent=\"center\"\r\n        variant={action.variant || 'default'}\r\n        paddingTop=\"7px\"\r\n        paddingBottom=\"7px\"\r\n      >\r\n        {action.label}\r\n      </Button>\r\n      {action.dialog?.type === 'dialog' ? (\r\n        <DocumentActionConfirmDialog\r\n          {...action.dialog}\r\n          variant={action.dialog?.variant ?? action.variant}\r\n          isOpen={dialogId === action.id}\r\n          onClose={handleClose}\r\n        />\r\n      ) : null}\r\n      {action.dialog?.type === 'modal' ? (\r\n        <DocumentActionModal\r\n          {...action.dialog}\r\n          onModalClose={handleClose}\r\n          isOpen={dialogId === action.id}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActionMenu\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface DocumentActionsMenuProps {\r\n  actions: Action[];\r\n  children?: React.ReactNode;\r\n  label?: string;\r\n  variant?: 'ghost' | 'tertiary';\r\n}\r\n\r\nconst MenuItem = styled(Menu.Item)<{ isVariantDanger?: boolean; isDisabled?: boolean }>`\r\n  &:hover {\r\n    background: ${({ theme, isVariantDanger, isDisabled }) =>\r\n      isVariantDanger && !isDisabled ? theme.colors.danger100 : 'neutral'};\r\n  }\r\n`;\r\n\r\nconst DocumentActionsMenu = ({\r\n  actions,\r\n  children,\r\n  label,\r\n  variant = 'tertiary',\r\n}: DocumentActionsMenuProps) => {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const isDisabled = actions.every((action) => action.disabled) || actions.length === 0;\r\n\r\n  const handleClick = (action: Action) => async (e: React.SyntheticEvent) => {\r\n    const { onClick = () => false, dialog, id } = action;\r\n\r\n    const muteDialog = await onClick(e);\r\n\r\n    if (dialog && !muteDialog) {\r\n      switch (dialog.type) {\r\n        case 'notification':\r\n          toggleNotification({\r\n            title: dialog.title,\r\n            message: dialog.content,\r\n            type: dialog.status,\r\n            timeout: dialog.timeout,\r\n            onClose: dialog.onClose,\r\n          });\r\n          break;\r\n        case 'dialog':\r\n        case 'modal':\r\n          setDialogId(id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setDialogId(null);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Menu.Root open={isOpen} onOpenChange={setIsOpen}>\r\n      <Menu.Trigger\r\n        disabled={isDisabled}\r\n        size=\"S\"\r\n        endIcon={null}\r\n        paddingTop=\"4px\"\r\n        paddingLeft=\"7px\"\r\n        paddingRight=\"7px\"\r\n        variant={variant}\r\n      >\r\n        <More aria-hidden focusable={false} />\r\n        <VisuallyHidden tag=\"span\">\r\n          {label ||\r\n            formatMessage({\r\n              id: 'content-manager.containers.edit.panels.default.more-actions',\r\n              defaultMessage: 'More document actions',\r\n            })}\r\n        </VisuallyHidden>\r\n      </Menu.Trigger>\r\n      <Menu.Content maxHeight={undefined} popoverPlacement=\"bottom-end\">\r\n        {actions.map((action) => {\r\n          return (\r\n            <MenuItem\r\n              disabled={action.disabled}\r\n              /* @ts-expect-error – TODO: this is an error in the DS where it is most likely a synthetic event, not regular. */\r\n              onSelect={handleClick(action)}\r\n              display=\"block\"\r\n              key={action.id}\r\n              isVariantDanger={action.variant === 'danger'}\r\n              isDisabled={action.disabled}\r\n            >\r\n              <Flex justifyContent=\"space-between\" gap={4}>\r\n                <Flex\r\n                  color={!action.disabled ? convertActionVariantToColor(action.variant) : 'inherit'}\r\n                  gap={2}\r\n                  tag=\"span\"\r\n                >\r\n                  <Flex\r\n                    tag=\"span\"\r\n                    color={\r\n                      !action.disabled ? convertActionVariantToIconColor(action.variant) : 'inherit'\r\n                    }\r\n                  >\r\n                    {action.icon}\r\n                  </Flex>\r\n                  {action.label}\r\n                </Flex>\r\n              </Flex>\r\n            </MenuItem>\r\n          );\r\n        })}\r\n        {children}\r\n      </Menu.Content>\r\n      {actions.map((action) => {\r\n        return (\r\n          <React.Fragment key={action.id}>\r\n            {action.dialog?.type === 'dialog' ? (\r\n              <DocumentActionConfirmDialog\r\n                {...action.dialog}\r\n                variant={action.variant}\r\n                isOpen={dialogId === action.id}\r\n                onClose={handleClose}\r\n              />\r\n            ) : null}\r\n            {action.dialog?.type === 'modal' ? (\r\n              <DocumentActionModal\r\n                {...action.dialog}\r\n                onModalClose={handleClose}\r\n                isOpen={dialogId === action.id}\r\n              />\r\n            ) : null}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </Menu.Root>\r\n  );\r\n};\r\n\r\nconst convertActionVariantToColor = (\r\n  variant: DocumentActionDescription['variant'] = 'secondary'\r\n): keyof DefaultTheme['colors'] | undefined => {\r\n  switch (variant) {\r\n    case 'danger':\r\n      return 'danger600';\r\n    case 'secondary':\r\n      return undefined;\r\n    case 'success':\r\n      return 'success600';\r\n    default:\r\n      return 'primary600';\r\n  }\r\n};\r\n\r\nconst convertActionVariantToIconColor = (\r\n  variant: DocumentActionDescription['variant'] = 'secondary'\r\n): keyof DefaultTheme['colors'] | undefined => {\r\n  switch (variant) {\r\n    case 'danger':\r\n      return 'danger600';\r\n    case 'secondary':\r\n      return 'neutral500';\r\n    case 'success':\r\n      return 'success600';\r\n    default:\r\n      return 'primary600';\r\n  }\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActionConfirmDialog\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DocumentActionConfirmDialogProps extends DialogOptions, Pick<Action, 'variant'> {\r\n  onClose: () => void;\r\n  isOpen: Dialog.Props['open'];\r\n}\r\n\r\nconst DocumentActionConfirmDialog = ({\r\n  onClose,\r\n  onCancel,\r\n  onConfirm,\r\n  title,\r\n  content,\r\n  isOpen,\r\n  variant = 'secondary',\r\n}: DocumentActionConfirmDialogProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleClose = async () => {\r\n    if (onCancel) {\r\n      await onCancel();\r\n    }\r\n\r\n    onClose();\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n    if (onConfirm) {\r\n      await onConfirm();\r\n    }\r\n\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\r\n      <Dialog.Content>\r\n        <Dialog.Header>{title}</Dialog.Header>\r\n        <Dialog.Body>{content}</Dialog.Body>\r\n        <Dialog.Footer>\r\n          <Dialog.Cancel>\r\n            <Button variant=\"tertiary\" fullWidth>\r\n              {formatMessage({\r\n                id: 'app.components.Button.cancel',\r\n                defaultMessage: 'Cancel',\r\n              })}\r\n            </Button>\r\n          </Dialog.Cancel>\r\n          <Button onClick={handleConfirm} variant={variant} fullWidth>\r\n            {formatMessage({\r\n              id: 'app.components.Button.confirm',\r\n              defaultMessage: 'Confirm',\r\n            })}\r\n          </Button>\r\n        </Dialog.Footer>\r\n      </Dialog.Content>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActionModal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DocumentActionModalProps extends ModalOptions {\r\n  onModalClose: () => void;\r\n  isOpen?: boolean;\r\n}\r\n\r\nconst DocumentActionModal = ({\r\n  isOpen,\r\n  title,\r\n  onClose,\r\n  footer: Footer,\r\n  content: Content,\r\n  onModalClose,\r\n}: DocumentActionModalProps) => {\r\n  const handleClose = () => {\r\n    if (onClose) {\r\n      onClose();\r\n    }\r\n\r\n    onModalClose();\r\n  };\r\n\r\n  return (\r\n    <Modal.Root open={isOpen} onOpenChange={handleClose}>\r\n      <Modal.Content>\r\n        <Modal.Header>\r\n          <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        {typeof Content === 'function' ? (\r\n          <Content onClose={handleClose} />\r\n        ) : (\r\n          <Modal.Body>{Content}</Modal.Body>\r\n        )}\r\n        {typeof Footer === 'function' ? <Footer onClose={handleClose} /> : Footer}\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nconst transformData = (data: Record<string, any>): any => {\r\n  if (Array.isArray(data)) {\r\n    return data.map(transformData);\r\n  }\r\n\r\n  if (typeof data === 'object' && data !== null) {\r\n    if ('apiData' in data) {\r\n      return data.apiData;\r\n    }\r\n\r\n    return mapValues(transformData)(data);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActionComponents\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PublishAction: DocumentActionComponent = ({\r\n  activeTab,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n  meta,\r\n  document,\r\n}) => {\r\n  const { schema } = useDoc();\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\r\n  const isListView = useMatch(LIST_PATH) !== null;\r\n  const isCloning = useMatch(CLONE_PATH) !== null;\r\n  const { id } = useParams();\r\n  const { formatMessage } = useIntl();\r\n  const canPublish = useDocumentRBAC('PublishAction', ({ canPublish }) => canPublish);\r\n  const { publish } = useDocumentActions();\r\n  const [\r\n    countDraftRelations,\r\n    { isLoading: isLoadingDraftRelations, isError: isErrorDraftRelations },\r\n  ] = useGetDraftRelationCountQuery();\r\n  const [localCountOfDraftRelations, setLocalCountOfDraftRelations] = React.useState(0);\r\n  const [serverCountOfDraftRelations, setServerCountOfDraftRelations] = React.useState(0);\r\n\r\n  const [{ query, rawQuery }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  const modified = useForm('PublishAction', ({ modified }) => modified);\r\n  const setSubmitting = useForm('PublishAction', ({ setSubmitting }) => setSubmitting);\r\n  const isSubmitting = useForm('PublishAction', ({ isSubmitting }) => isSubmitting);\r\n  const validate = useForm('PublishAction', (state) => state.validate);\r\n  const setErrors = useForm('PublishAction', (state) => state.setErrors);\r\n  const formValues = useForm('PublishAction', ({ values }) => values);\r\n\r\n  React.useEffect(() => {\r\n    if (isErrorDraftRelations) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: getTranslation('error.records.fetch-draft-relatons'),\r\n          defaultMessage: 'An error occurred while fetching draft relations on this document.',\r\n        }),\r\n      });\r\n    }\r\n  }, [isErrorDraftRelations, toggleNotification, formatMessage]);\r\n\r\n  React.useEffect(() => {\r\n    const localDraftRelations = new Set();\r\n\r\n    /**\r\n     * Extracts draft relations from the provided data object.\r\n     * It checks for a connect array of relations.\r\n     * If a relation has a status of 'draft', its id is added to the localDraftRelations set.\r\n     */\r\n    const extractDraftRelations = (data: Omit<RelationsFormValue, 'disconnect'>) => {\r\n      const relations = data.connect || [];\r\n      relations.forEach((relation) => {\r\n        if (relation.status === 'draft') {\r\n          localDraftRelations.add(relation.id);\r\n        }\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Recursively traverses the provided data object to extract draft relations from arrays within 'connect' keys.\r\n     * If the data is an object, it looks for 'connect' keys to pass their array values to extractDraftRelations.\r\n     * It recursively calls itself for any non-null objects it contains.\r\n     */\r\n    const traverseAndExtract = (data: { [field: string]: any }) => {\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        if (key === 'connect' && Array.isArray(value)) {\r\n          extractDraftRelations({ connect: value });\r\n        } else if (typeof value === 'object' && value !== null) {\r\n          traverseAndExtract(value);\r\n        }\r\n      });\r\n    };\r\n\r\n    if (!documentId || modified) {\r\n      traverseAndExtract(formValues);\r\n      setLocalCountOfDraftRelations(localDraftRelations.size);\r\n    }\r\n  }, [documentId, modified, formValues, setLocalCountOfDraftRelations]);\r\n\r\n  React.useEffect(() => {\r\n    if (!document || !document.documentId || isListView) {\r\n      return;\r\n    }\r\n\r\n    const fetchDraftRelationsCount = async () => {\r\n      const { data, error } = await countDraftRelations({\r\n        collectionType,\r\n        model,\r\n        documentId,\r\n        params,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      if (data) {\r\n        setServerCountOfDraftRelations(data.data);\r\n      }\r\n    };\r\n\r\n    fetchDraftRelationsCount();\r\n  }, [isListView, document, documentId, countDraftRelations, collectionType, model, params]);\r\n\r\n  const isDocumentPublished =\r\n    (document?.[PUBLISHED_AT_ATTRIBUTE_NAME] ||\r\n      meta?.availableStatus.some((doc) => doc[PUBLISHED_AT_ATTRIBUTE_NAME] !== null)) &&\r\n    document?.status !== 'modified';\r\n\r\n  if (!schema?.options?.draftAndPublish) {\r\n    return null;\r\n  }\r\n\r\n  const performPublish = async () => {\r\n    setSubmitting(true);\r\n\r\n    try {\r\n      const { errors } = await validate(true, {\r\n        status: 'published',\r\n      });\r\n\r\n      if (errors) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: 'content-manager.validation.error',\r\n            defaultMessage:\r\n              'There are validation errors in your document. Please fix them before saving.',\r\n          }),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      const res = await publish(\r\n        {\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          params,\r\n        },\r\n        transformData(formValues)\r\n      );\r\n\r\n      if ('data' in res && collectionType !== SINGLE_TYPES) {\r\n        /**\r\n         * TODO: refactor the router so we can just do `../${res.data.documentId}` instead of this.\r\n         */\r\n        if (id === 'create') {\r\n          navigate({\r\n            pathname: `../${collectionType}/${model}/${res.data.documentId}`,\r\n            search: rawQuery,\r\n          });\r\n        }\r\n      } else if (\r\n        'error' in res &&\r\n        isBaseQueryError(res.error) &&\r\n        res.error.name === 'ValidationError'\r\n      ) {\r\n        setErrors(formatValidationErrors(res.error));\r\n      }\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const totalDraftRelations = localCountOfDraftRelations + serverCountOfDraftRelations;\r\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\r\n  // see RFC \"Count draft relations\" in Notion\r\n  const enableDraftRelationsCount = false;\r\n  const hasDraftRelations = enableDraftRelationsCount && totalDraftRelations > 0;\r\n\r\n  return {\r\n    /**\r\n     * Disabled when:\r\n     *  - currently if you're cloning a document we don't support publish & clone at the same time.\r\n     *  - the form is submitting\r\n     *  - the active tab is the published tab\r\n     *  - the document is already published & not modified\r\n     *  - the document is being created & not modified\r\n     *  - the user doesn't have the permission to publish\r\n     */\r\n    disabled:\r\n      isCloning ||\r\n      isSubmitting ||\r\n      isLoadingDraftRelations ||\r\n      activeTab === 'published' ||\r\n      (!modified && isDocumentPublished) ||\r\n      (!modified && !document?.documentId) ||\r\n      !canPublish,\r\n    label: formatMessage({\r\n      id: 'app.utils.publish',\r\n      defaultMessage: 'Publish',\r\n    }),\r\n    onClick: async () => {\r\n      if (hasDraftRelations) {\r\n        // In this case we need to show the user a confirmation dialog.\r\n        // Return from the onClick and let the dialog handle the process.\r\n        return;\r\n      }\r\n\r\n      await performPublish();\r\n    },\r\n    dialog: hasDraftRelations\r\n      ? {\r\n          type: 'dialog',\r\n          variant: 'danger',\r\n          footer: null,\r\n          title: formatMessage({\r\n            id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.title`),\r\n            defaultMessage: 'Confirmation',\r\n          }),\r\n          content: formatMessage(\r\n            {\r\n              id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\r\n              defaultMessage:\r\n                'This entry is related to {count, plural, one {# draft entry} other {# draft entries}}. Publishing it could leave broken links in your app.',\r\n            },\r\n            {\r\n              count: totalDraftRelations,\r\n            }\r\n          ),\r\n          onConfirm: async () => {\r\n            await performPublish();\r\n          },\r\n        }\r\n      : undefined,\r\n  };\r\n};\r\n\r\nPublishAction.type = 'publish';\r\nPublishAction.position = 'panel';\r\n\r\nconst UpdateAction: DocumentActionComponent = ({\r\n  activeTab,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\r\n  const cloneMatch = useMatch(CLONE_PATH);\r\n  const isCloning = cloneMatch !== null;\r\n  const { formatMessage } = useIntl();\r\n  const { create, update, clone } = useDocumentActions();\r\n  const [{ query, rawQuery }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  const isSubmitting = useForm('UpdateAction', ({ isSubmitting }) => isSubmitting);\r\n  const modified = useForm('UpdateAction', ({ modified }) => modified);\r\n  const setSubmitting = useForm('UpdateAction', ({ setSubmitting }) => setSubmitting);\r\n  const document = useForm('UpdateAction', ({ values }) => values);\r\n  const validate = useForm('UpdateAction', (state) => state.validate);\r\n  const setErrors = useForm('UpdateAction', (state) => state.setErrors);\r\n  const resetForm = useForm('PublishAction', ({ resetForm }) => resetForm);\r\n\r\n  return {\r\n    /**\r\n     * Disabled when:\r\n     * - the form is submitting\r\n     * - the document is not modified & we're not cloning (you can save a clone entity straight away)\r\n     * - the active tab is the published tab\r\n     */\r\n    disabled: isSubmitting || (!modified && !isCloning) || activeTab === 'published',\r\n    label: formatMessage({\r\n      id: 'global.save',\r\n      defaultMessage: 'Save',\r\n    }),\r\n    onClick: async () => {\r\n      setSubmitting(true);\r\n\r\n      try {\r\n        const { errors } = await validate(true, {\r\n          status: 'draft',\r\n        });\r\n\r\n        if (errors) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatMessage({\r\n              id: 'content-manager.validation.error',\r\n              defaultMessage:\r\n                'There are validation errors in your document. Please fix them before saving.',\r\n            }),\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        if (isCloning) {\r\n          const res = await clone(\r\n            {\r\n              model,\r\n              documentId: cloneMatch.params.origin!,\r\n              params,\r\n            },\r\n            transformData(document)\r\n          );\r\n\r\n          if ('data' in res) {\r\n            navigate(\r\n              {\r\n                pathname: `../${res.data.documentId}`,\r\n                search: rawQuery,\r\n              },\r\n              { relative: 'path' }\r\n            );\r\n          } else if (\r\n            'error' in res &&\r\n            isBaseQueryError(res.error) &&\r\n            res.error.name === 'ValidationError'\r\n          ) {\r\n            setErrors(formatValidationErrors(res.error));\r\n          }\r\n        } else if (documentId || collectionType === SINGLE_TYPES) {\r\n          const res = await update(\r\n            {\r\n              collectionType,\r\n              model,\r\n              documentId,\r\n              params,\r\n            },\r\n            transformData(document)\r\n          );\r\n\r\n          if (\r\n            'error' in res &&\r\n            isBaseQueryError(res.error) &&\r\n            res.error.name === 'ValidationError'\r\n          ) {\r\n            setErrors(formatValidationErrors(res.error));\r\n          } else {\r\n            resetForm();\r\n          }\r\n        } else {\r\n          const res = await create(\r\n            {\r\n              model,\r\n              params,\r\n            },\r\n            transformData(document)\r\n          );\r\n\r\n          if ('data' in res && collectionType !== SINGLE_TYPES) {\r\n            navigate(\r\n              {\r\n                pathname: `../${res.data.documentId}`,\r\n                search: rawQuery,\r\n              },\r\n              { replace: true, relative: 'path' }\r\n            );\r\n          } else if (\r\n            'error' in res &&\r\n            isBaseQueryError(res.error) &&\r\n            res.error.name === 'ValidationError'\r\n          ) {\r\n            setErrors(formatValidationErrors(res.error));\r\n          }\r\n        }\r\n      } finally {\r\n        setSubmitting(false);\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nUpdateAction.type = 'update';\r\nUpdateAction.position = 'panel';\r\n\r\nconst UNPUBLISH_DRAFT_OPTIONS = {\r\n  KEEP: 'keep',\r\n  DISCARD: 'discard',\r\n};\r\n\r\nconst UnpublishAction: DocumentActionComponent = ({\r\n  activeTab,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n  document,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n  const { schema } = useDoc();\r\n  const canPublish = useDocumentRBAC('UnpublishAction', ({ canPublish }) => canPublish);\r\n  const { unpublish } = useDocumentActions();\r\n  const [{ query }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n  const { toggleNotification } = useNotification();\r\n  const [shouldKeepDraft, setShouldKeepDraft] = React.useState(true);\r\n\r\n  const isDocumentModified = document?.status === 'modified';\r\n\r\n  const handleChange = (value: string) => {\r\n    setShouldKeepDraft(value === UNPUBLISH_DRAFT_OPTIONS.KEEP);\r\n  };\r\n\r\n  if (!schema?.options?.draftAndPublish) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    disabled:\r\n      !canPublish ||\r\n      activeTab === 'published' ||\r\n      (document?.status !== 'published' && document?.status !== 'modified'),\r\n    label: formatMessage({\r\n      id: 'app.utils.unpublish',\r\n      defaultMessage: 'Unpublish',\r\n    }),\r\n    icon: <Cross />,\r\n    onClick: async () => {\r\n      /**\r\n       * return if there's no id & we're in a collection type, or the status modified\r\n       * for either collection type because we use a dialog to handle the process in\r\n       * the latter case.\r\n       */\r\n      if ((!documentId && collectionType !== SINGLE_TYPES) || isDocumentModified) {\r\n        if (!documentId) {\r\n          // This should never, ever, happen.\r\n          console.error(\r\n            \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\r\n          );\r\n\r\n          toggleNotification({\r\n            message: formatMessage({\r\n              id: 'content-manager.actions.unpublish.error',\r\n              defaultMessage: 'An error occurred while trying to unpublish the document.',\r\n            }),\r\n            type: 'danger',\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      await unpublish({\r\n        collectionType,\r\n        model,\r\n        documentId,\r\n        params,\r\n      });\r\n    },\r\n    dialog: isDocumentModified\r\n      ? {\r\n          type: 'dialog',\r\n          title: formatMessage({\r\n            id: 'app.components.ConfirmDialog.title',\r\n            defaultMessage: 'Confirmation',\r\n          }),\r\n          content: (\r\n            <Flex alignItems=\"flex-start\" direction=\"column\" gap={6}>\r\n              <Flex width=\"100%\" direction=\"column\" gap={2}>\r\n                <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n                <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\r\n                  {formatMessage({\r\n                    id: 'content-manager.actions.unpublish.dialog.body',\r\n                    defaultMessage: 'Are you sure?',\r\n                  })}\r\n                </Typography>\r\n              </Flex>\r\n              <Radio.Group\r\n                defaultValue={UNPUBLISH_DRAFT_OPTIONS.KEEP}\r\n                name=\"discard-options\"\r\n                aria-label={formatMessage({\r\n                  id: 'content-manager.actions.unpublish.dialog.radio-label',\r\n                  defaultMessage: 'Choose an option to unpublish the document.',\r\n                })}\r\n                onValueChange={handleChange}\r\n              >\r\n                <Radio.Item checked={shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.KEEP}>\r\n                  {formatMessage({\r\n                    id: 'content-manager.actions.unpublish.dialog.option.keep-draft',\r\n                    defaultMessage: 'Keep draft',\r\n                  })}\r\n                </Radio.Item>\r\n                <Radio.Item checked={!shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.DISCARD}>\r\n                  {formatMessage({\r\n                    id: 'content-manager.actions.unpublish.dialog.option.replace-draft',\r\n                    defaultMessage: 'Replace draft',\r\n                  })}\r\n                </Radio.Item>\r\n              </Radio.Group>\r\n            </Flex>\r\n          ),\r\n          onConfirm: async () => {\r\n            if (!documentId && collectionType !== SINGLE_TYPES) {\r\n              // This should never, ever, happen.\r\n              console.error(\r\n                \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\r\n              );\r\n\r\n              toggleNotification({\r\n                message: formatMessage({\r\n                  id: 'content-manager.actions.unpublish.error',\r\n                  defaultMessage: 'An error occurred while trying to unpublish the document.',\r\n                }),\r\n                type: 'danger',\r\n              });\r\n            }\r\n\r\n            await unpublish(\r\n              {\r\n                collectionType,\r\n                model,\r\n                documentId,\r\n                params,\r\n              },\r\n              !shouldKeepDraft\r\n            );\r\n          },\r\n        }\r\n      : undefined,\r\n    variant: 'danger',\r\n    position: ['panel', 'table-row'],\r\n  };\r\n};\r\n\r\nUnpublishAction.type = 'unpublish';\r\nUnpublishAction.position = 'panel';\r\n\r\nconst DiscardAction: DocumentActionComponent = ({\r\n  activeTab,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n  document,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n  const { schema } = useDoc();\r\n  const canUpdate = useDocumentRBAC('DiscardAction', ({ canUpdate }) => canUpdate);\r\n  const { discard } = useDocumentActions();\r\n  const [{ query }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  if (!schema?.options?.draftAndPublish) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    disabled: !canUpdate || activeTab === 'published' || document?.status !== 'modified',\r\n    label: formatMessage({\r\n      id: 'content-manager.actions.discard.label',\r\n      defaultMessage: 'Discard changes',\r\n    }),\r\n    icon: <Cross />,\r\n    position: ['panel', 'table-row'],\r\n    variant: 'danger',\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: 'app.components.ConfirmDialog.title',\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: (\r\n        <Flex direction=\"column\" gap={2}>\r\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\r\n            {formatMessage({\r\n              id: 'content-manager.actions.discard.dialog.body',\r\n              defaultMessage: 'Are you sure?',\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n      ),\r\n      onConfirm: async () => {\r\n        await discard({\r\n          collectionType,\r\n          model,\r\n          documentId,\r\n          params,\r\n        });\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nDiscardAction.type = 'discard';\r\nDiscardAction.position = 'panel';\r\n\r\nconst DEFAULT_ACTIONS = [PublishAction, UpdateAction, UnpublishAction, DiscardAction];\r\n\r\nexport { DocumentActions, DocumentActionsMenu, DocumentActionButton, DEFAULT_ACTIONS };\r\nexport type {\r\n  DocumentActionDescription,\r\n  DocumentActionPosition,\r\n  DialogOptions,\r\n  NotificationOptions,\r\n  ModalOptions,\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\r\n\r\ninterface CustomInterval {\r\n  unit: keyof Duration;\r\n  text: string;\r\n  threshold: number;\r\n}\r\n\r\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\r\n  timestamp: Date;\r\n  customIntervals?: CustomInterval[];\r\n}\r\n\r\n/**\r\n * Displays the relative time between a given timestamp and the current time.\r\n * You can display a custom message for given time intervals by passing an array of custom intervals.\r\n *\r\n * @example\r\n * ```jsx\r\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\r\n * <RelativeTime\r\n *  timestamp={new Date('2021-01-01')}\r\n *  customIntervals={[\r\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\r\n *  ]}\r\n * ```\r\n */\r\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\r\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\r\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\r\n\r\n    /**\r\n     * TODO: make this auto-update, like a clock.\r\n     */\r\n    const interval = intervalToDuration({\r\n      start: timestamp,\r\n      end: Date.now(),\r\n      // see https://github.com/date-fns/date-fns/issues/2891 – No idea why it's all partial it returns it every time.\r\n    }) as Required<Duration>;\r\n\r\n    const unit =\r\n      intervals.find((intervalUnit) => {\r\n        return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\r\n      }) ?? 'seconds';\r\n\r\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\r\n\r\n    // Display custom text if interval is less than the threshold\r\n    const customInterval = customIntervals.find(\r\n      (custom) => interval[custom.unit] < custom.threshold\r\n    );\r\n\r\n    const displayText = customInterval\r\n      ? customInterval.text\r\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\r\n\r\n    return (\r\n      <time\r\n        ref={forwardedRef}\r\n        dateTime={timestamp.toISOString()}\r\n        role=\"time\"\r\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\r\n        {...restProps}\r\n      >\r\n        {displayText}\r\n      </time>\r\n    );\r\n  }\r\n);\r\n\r\nexport { RelativeTime };\r\nexport type { CustomInterval, RelativeTimeProps };\r\n","import type { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\r\n\r\n/**\r\n * Retrieves the display name of an admin panel user\r\n */\r\nconst getDisplayName = ({\r\n  firstname,\r\n  lastname,\r\n  username,\r\n  email,\r\n}: Partial<\r\n  Pick<SanitizedAdminUser, 'firstname' | 'lastname' | 'username' | 'email'>\r\n> = {}): string => {\r\n  if (username) {\r\n    return username;\r\n  }\r\n\r\n  // firstname is not required if the user is created with a username\r\n  if (firstname) {\r\n    return `${firstname} ${lastname ?? ''}`.trim();\r\n  }\r\n\r\n  return email ?? '';\r\n};\r\n\r\nexport { getDisplayName };\r\n","const capitalise = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nexport { capitalise };\r\n","import { Status, StatusProps, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { capitalise } from '../../../utils/strings';\r\n\r\ninterface DocumentStatusProps extends Omit<StatusProps, 'children' | 'variant'> {\r\n  /**\r\n   * The status of the document (draft, published, etc.)\r\n   * @default 'draft'\r\n   */\r\n  status?: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @description Displays the status of a document (draft, published, etc.)\r\n * and automatically calculates the appropriate variant for the status.\r\n */\r\nconst DocumentStatus = ({ status = 'draft', size = 'S', ...restProps }: DocumentStatusProps) => {\r\n  const statusVariant =\r\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Status {...restProps} size={size} variant={statusVariant}>\r\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\r\n        {formatMessage({\r\n          id: `content-manager.containers.List.${status}`,\r\n          defaultMessage: capitalise(status),\r\n        })}\r\n      </Typography>\r\n    </Status>\r\n  );\r\n};\r\n\r\nexport { DocumentStatus };\r\nexport type { DocumentStatusProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  DescriptionComponentRenderer,\r\n  useForm,\r\n  BackButton,\r\n  useNotification,\r\n  useStrapiApp,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n} from '@strapi/design-system';\r\nimport { ListPlus, Pencil, Trash, WarningCircle } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\r\n\r\nimport { RelativeTime } from '../../../components/RelativeTime';\r\nimport {\r\n  CREATED_AT_ATTRIBUTE_NAME,\r\n  CREATED_BY_ATTRIBUTE_NAME,\r\n  PUBLISHED_AT_ATTRIBUTE_NAME,\r\n  PUBLISHED_BY_ATTRIBUTE_NAME,\r\n  UPDATED_AT_ATTRIBUTE_NAME,\r\n  UPDATED_BY_ATTRIBUTE_NAME,\r\n} from '../../../constants/attributes';\r\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../constants/collections';\r\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\r\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\r\nimport { getDisplayName } from '../../../utils/users';\r\n\r\nimport { DocumentActionsMenu } from './DocumentActions';\r\nimport { DocumentStatus } from './DocumentStatus';\r\n\r\nimport type { ContentManagerPlugin, DocumentActionComponent } from '../../../content-manager';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Header\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderProps {\r\n  isCreating?: boolean;\r\n  status?: 'draft' | 'published' | 'modified';\r\n  title?: string;\r\n}\r\n\r\nconst Header = ({ isCreating, status, title: documentTitle = 'Untitled' }: HeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const isCloning = useMatch(CLONE_PATH) !== null;\r\n  const params = useParams<{ collectionType: string; slug: string }>();\r\n\r\n  const title = isCreating\r\n    ? formatMessage({\r\n        id: 'content-manager.containers.edit.title.new',\r\n        defaultMessage: 'Create an entry',\r\n      })\r\n    : documentTitle;\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingTop={6} paddingBottom={4} gap={2}>\r\n      <BackButton\r\n        fallback={\r\n          params.collectionType === SINGLE_TYPES\r\n            ? undefined\r\n            : `../${COLLECTION_TYPES}/${params.slug}`\r\n        }\r\n      />\r\n      <Flex width=\"100%\" justifyContent=\"space-between\" gap=\"80px\" alignItems=\"flex-start\">\r\n        <Typography variant=\"alpha\" tag=\"h1\">\r\n          {title}\r\n        </Typography>\r\n        <HeaderToolbar />\r\n      </Flex>\r\n      {status ? (\r\n        <Box marginTop={1}>\r\n          <DocumentStatus status={isCloning ? 'draft' : status} />\r\n        </Box>\r\n      ) : null}\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderToolbar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DialogOptions {\r\n  type: 'dialog';\r\n  title: string;\r\n  content?: React.ReactNode;\r\n  footer?: React.ReactNode;\r\n}\r\n\r\ninterface HeaderActionDescription {\r\n  disabled?: boolean;\r\n  label: string;\r\n  icon?: React.ReactNode;\r\n  type?: 'icon' | 'default';\r\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\r\n  dialog?: DialogOptions;\r\n  options?: Array<{\r\n    disabled?: boolean;\r\n    label: string;\r\n    startIcon?: React.ReactNode;\r\n    textValue?: string;\r\n    value: string;\r\n  }>;\r\n  onSelect?: (value: string) => void;\r\n  value?: string;\r\n  customizeContent?: (value: string) => React.ReactNode;\r\n}\r\n\r\n/**\r\n * @description Contains the document actions that have `position: header`, if there are\r\n * none we still render the menu because we render the information about the document there.\r\n */\r\nconst HeaderToolbar = () => {\r\n  const { formatMessage } = useIntl();\r\n  const isCloning = useMatch(CLONE_PATH) !== null;\r\n  const [\r\n    {\r\n      query: { status = 'draft' },\r\n    },\r\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\r\n  const { model, id, document, meta, collectionType } = useDoc();\r\n  const plugins = useStrapiApp('HeaderToolbar', (state) => state.plugins);\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      <DescriptionComponentRenderer\r\n        props={{\r\n          activeTab: status,\r\n          model,\r\n          documentId: id,\r\n          document: isCloning ? undefined : document,\r\n          meta: isCloning ? undefined : meta,\r\n          collectionType,\r\n        }}\r\n        descriptions={(\r\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\r\n        ).getHeaderActions()}\r\n      >\r\n        {(actions) => {\r\n          if (actions.length > 0) {\r\n            return <HeaderActions actions={actions} />;\r\n          } else {\r\n            return null;\r\n          }\r\n        }}\r\n      </DescriptionComponentRenderer>\r\n      <DescriptionComponentRenderer\r\n        props={{\r\n          activeTab: status,\r\n          model,\r\n          documentId: id,\r\n          document: isCloning ? undefined : document,\r\n          meta: isCloning ? undefined : meta,\r\n          collectionType,\r\n        }}\r\n        descriptions={(\r\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\r\n        ).getDocumentActions('header')}\r\n      >\r\n        {(actions) => {\r\n          const headerActions = actions.filter((action) => {\r\n            const positions = Array.isArray(action.position) ? action.position : [action.position];\r\n            return positions.includes('header');\r\n          });\r\n\r\n          return (\r\n            <DocumentActionsMenu\r\n              actions={headerActions}\r\n              label={formatMessage({\r\n                id: 'content-manager.containers.edit.header.more-actions',\r\n                defaultMessage: 'More actions',\r\n              })}\r\n            >\r\n              <Information activeTab={status} />\r\n            </DocumentActionsMenu>\r\n          );\r\n        }}\r\n      </DescriptionComponentRenderer>\r\n    </Flex>\r\n  );\r\n};\r\n\r\ninterface InformationProps {\r\n  activeTab: 'draft' | 'published';\r\n}\r\n\r\nconst Information = ({ activeTab }: InformationProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { document, meta } = useDoc();\r\n\r\n  if (!document || !document.id) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Because in the backend separate entries are made for draft and published\r\n   * documents, the creator fields are different for each of them. For example,\r\n   * you could make your draft in January and then publish it for the first time\r\n   * in Feb. This would make the createdAt value for the published entry in Feb\r\n   * but really we want to show the document as a whole. The draft entry will also\r\n   * never have the publishedAt values.\r\n   *\r\n   * So, we decipher which document to show the creator for based on the activeTab.\r\n   */\r\n\r\n  const createAndUpdateDocument =\r\n    activeTab === 'draft'\r\n      ? document\r\n      : meta?.availableStatus.find((status) => status.publishedAt === null);\r\n\r\n  const publishDocument =\r\n    activeTab === 'published'\r\n      ? document\r\n      : meta?.availableStatus.find((status) => status.publishedAt !== null);\r\n\r\n  const creator = createAndUpdateDocument?.[CREATED_BY_ATTRIBUTE_NAME]\r\n    ? getDisplayName(createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME])\r\n    : null;\r\n\r\n  const updator = createAndUpdateDocument?.[UPDATED_BY_ATTRIBUTE_NAME]\r\n    ? getDisplayName(createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME])\r\n    : null;\r\n\r\n  const information: Array<{ isDisplayed?: boolean; label: string; value: React.ReactNode }> = [\r\n    {\r\n      isDisplayed: !!publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME],\r\n      label: formatMessage({\r\n        id: 'content-manager.containers.edit.information.last-published.label',\r\n        defaultMessage: 'Published',\r\n      }),\r\n      value: formatMessage(\r\n        {\r\n          id: 'content-manager.containers.edit.information.last-published.value',\r\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\r\n        },\r\n        {\r\n          time: (\r\n            <RelativeTime timestamp={new Date(publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME])} />\r\n          ),\r\n          isAnonymous: !publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME],\r\n          author: publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME]\r\n            ? getDisplayName(publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME])\r\n            : null,\r\n        }\r\n      ),\r\n    },\r\n    {\r\n      isDisplayed: !!createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME],\r\n      label: formatMessage({\r\n        id: 'content-manager.containers.edit.information.last-draft.label',\r\n        defaultMessage: 'Updated',\r\n      }),\r\n      value: formatMessage(\r\n        {\r\n          id: 'content-manager.containers.edit.information.last-draft.value',\r\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\r\n        },\r\n        {\r\n          time: (\r\n            <RelativeTime\r\n              timestamp={new Date(createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME])}\r\n            />\r\n          ),\r\n          isAnonymous: !updator,\r\n          author: updator,\r\n        }\r\n      ),\r\n    },\r\n    {\r\n      isDisplayed: !!createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME],\r\n      label: formatMessage({\r\n        id: 'content-manager.containers.edit.information.document.label',\r\n        defaultMessage: 'Created',\r\n      }),\r\n      value: formatMessage(\r\n        {\r\n          id: 'content-manager.containers.edit.information.document.value',\r\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\r\n        },\r\n        {\r\n          time: (\r\n            <RelativeTime\r\n              timestamp={new Date(createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME])}\r\n            />\r\n          ),\r\n          isAnonymous: !creator,\r\n          author: creator,\r\n        }\r\n      ),\r\n    },\r\n  ].filter((info) => info.isDisplayed);\r\n\r\n  return (\r\n    <Flex\r\n      borderWidth=\"1px 0 0 0\"\r\n      borderStyle=\"solid\"\r\n      borderColor=\"neutral150\"\r\n      direction=\"column\"\r\n      marginTop={2}\r\n      tag=\"dl\"\r\n      padding={5}\r\n      gap={3}\r\n      alignItems=\"flex-start\"\r\n      /**\r\n       * The menu content has a padding of 4px, but we want our divider (the border top applied) to\r\n       * be flush with the menu content. So we need to adjust the margin & width to account for the padding.\r\n       */\r\n      marginLeft=\"-0.4rem\"\r\n      marginRight=\"-0.4rem\"\r\n      width=\"calc(100% + 8px)\"\r\n    >\r\n      {information.map((info) => (\r\n        <Flex gap={1} direction=\"column\" alignItems=\"flex-start\" key={info.label}>\r\n          <Typography tag=\"dt\" variant=\"pi\" fontWeight=\"bold\">\r\n            {info.label}\r\n          </Typography>\r\n          <Typography tag=\"dd\" variant=\"pi\" textColor=\"neutral600\">\r\n            {info.value}\r\n          </Typography>\r\n        </Flex>\r\n      ))}\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderActions\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderActionsProps {\r\n  actions: Array<HeaderActionDescription & { id: string }>;\r\n}\r\n\r\nconst HeaderActions = ({ actions }: HeaderActionsProps) => {\r\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\r\n\r\n  const handleClick =\r\n    (action: HeaderActionDescription & { id: string }) => async (e: React.MouseEvent) => {\r\n      if (!('options' in action)) {\r\n        const { onClick = () => false, dialog, id } = action;\r\n\r\n        const muteDialog = await onClick(e);\r\n\r\n        if (dialog && !muteDialog) {\r\n          e.preventDefault();\r\n          setDialogId(id);\r\n        }\r\n      }\r\n    };\r\n\r\n  const handleClose = () => {\r\n    setDialogId(null);\r\n  };\r\n\r\n  return (\r\n    <Flex gap={1}>\r\n      {actions.map((action) => {\r\n        if (action.options) {\r\n          return (\r\n            <SingleSelect\r\n              key={action.id}\r\n              size=\"S\"\r\n              // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\r\n              onChange={action.onSelect}\r\n              aria-label={action.label}\r\n              {...action}\r\n            >\r\n              {action.options.map(({ label, ...option }) => (\r\n                <SingleSelectOption key={option.value} {...option}>\r\n                  {label}\r\n                </SingleSelectOption>\r\n              ))}\r\n            </SingleSelect>\r\n          );\r\n        } else {\r\n          if (action.type === 'icon') {\r\n            return (\r\n              <React.Fragment key={action.id}>\r\n                <IconButton\r\n                  disabled={action.disabled}\r\n                  label={action.label}\r\n                  size=\"S\"\r\n                  onClick={handleClick(action)}\r\n                >\r\n                  {action.icon}\r\n                </IconButton>\r\n                {action.dialog ? (\r\n                  <HeaderActionDialog\r\n                    {...action.dialog}\r\n                    isOpen={dialogId === action.id}\r\n                    onClose={handleClose}\r\n                  />\r\n                ) : null}\r\n              </React.Fragment>\r\n            );\r\n          }\r\n        }\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderActionDialog\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface HeaderActionDialogProps {\r\n  onClose: () => void;\r\n  onCancel?: () => Promise<void>;\r\n  title: string;\r\n  content?: React.ReactNode | ((props: { onClose: () => void }) => React.ReactNode);\r\n  isOpen: boolean;\r\n}\r\n\r\nconst HeaderActionDialog = ({\r\n  onClose,\r\n  onCancel,\r\n  title,\r\n  content: Content,\r\n  isOpen,\r\n}: HeaderActionDialogProps) => {\r\n  const handleClose = async () => {\r\n    if (onCancel) {\r\n      await onCancel();\r\n    }\r\n\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\r\n      <Dialog.Content>\r\n        <Dialog.Header>{title}</Dialog.Header>\r\n        {typeof Content === 'function' ? <Content onClose={handleClose} /> : Content}\r\n      </Dialog.Content>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DocumentActionComponents\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ConfigureTheViewAction: DocumentActionComponent = ({ collectionType, model }) => {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: 'app.links.configure-view',\r\n      defaultMessage: 'Configure the view',\r\n    }),\r\n    icon: <ListPlus />,\r\n    onClick: () => {\r\n      navigate(`../${collectionType}/${model}/configurations/edit`);\r\n    },\r\n    position: 'header',\r\n  };\r\n};\r\n\r\nConfigureTheViewAction.type = 'configure-the-view';\r\nConfigureTheViewAction.position = 'header';\r\n\r\nconst EditTheModelAction: DocumentActionComponent = ({ model }) => {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: 'content-manager.link-to-ctb',\r\n      defaultMessage: 'Edit the model',\r\n    }),\r\n    icon: <Pencil />,\r\n    onClick: () => {\r\n      navigate(`/plugins/content-type-builder/content-types/${model}`);\r\n    },\r\n    position: 'header',\r\n  };\r\n};\r\n\r\nEditTheModelAction.type = 'edit-the-model';\r\nEditTheModelAction.position = 'header';\r\n\r\nconst DeleteAction: DocumentActionComponent = ({ documentId, model, collectionType, document }) => {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const listViewPathMatch = useMatch(LIST_PATH);\r\n  const canDelete = useDocumentRBAC('DeleteAction', (state) => state.canDelete);\r\n  const { delete: deleteAction } = useDocumentActions();\r\n  const { toggleNotification } = useNotification();\r\n  const setSubmitting = useForm('DeleteAction', (state) => state.setSubmitting);\r\n  const isLocalized = document?.locale != null;\r\n\r\n  return {\r\n    disabled: !canDelete || !document,\r\n    label: formatMessage(\r\n      {\r\n        id: 'content-manager.actions.delete.label',\r\n        defaultMessage: 'Delete entry{isLocalized, select, true { (all locales)} other {}}',\r\n      },\r\n      { isLocalized }\r\n    ),\r\n    icon: <Trash />,\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: 'app.components.ConfirmDialog.title',\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: (\r\n        <Flex direction=\"column\" gap={2}>\r\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\r\n            {formatMessage({\r\n              id: 'content-manager.actions.delete.dialog.body',\r\n              defaultMessage: 'Are you sure?',\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n      ),\r\n      onConfirm: async () => {\r\n        /**\r\n         * If we have a match, we're in the list view\r\n         * and therefore not in a form and shouldn't be\r\n         * trying to set the submitting value.\r\n         */\r\n        if (!listViewPathMatch) {\r\n          setSubmitting(true);\r\n        }\r\n        try {\r\n          if (!documentId && collectionType !== SINGLE_TYPES) {\r\n            console.error(\r\n              \"You're trying to delete a document without an id, this is likely a bug with Strapi. Please open an issue.\"\r\n            );\r\n\r\n            toggleNotification({\r\n              message: formatMessage({\r\n                id: 'content-manager.actions.delete.error',\r\n                defaultMessage: 'An error occurred while trying to delete the document.',\r\n              }),\r\n              type: 'danger',\r\n            });\r\n\r\n            return;\r\n          }\r\n\r\n          const res = await deleteAction({\r\n            documentId,\r\n            model,\r\n            collectionType,\r\n            params: {\r\n              locale: '*',\r\n            },\r\n          });\r\n\r\n          if (!('error' in res)) {\r\n            navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\r\n          }\r\n        } finally {\r\n          if (!listViewPathMatch) {\r\n            setSubmitting(false);\r\n          }\r\n        }\r\n      },\r\n    },\r\n    variant: 'danger',\r\n    position: ['header', 'table-row'],\r\n  };\r\n};\r\n\r\nDeleteAction.type = 'delete';\r\nDeleteAction.position = ['header', 'table-row'];\r\n\r\nconst DEFAULT_HEADER_ACTIONS = [EditTheModelAction, ConfigureTheViewAction, DeleteAction];\r\n\r\nexport { Header, DEFAULT_HEADER_ACTIONS };\r\nexport type { HeaderProps, HeaderActionDescription };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useQueryParams,\r\n  useStrapiApp,\r\n  DescriptionComponentRenderer,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMatch } from 'react-router-dom';\r\n\r\nimport { InjectionZone } from '../../../components/InjectionZone';\r\nimport { useDoc } from '../../../hooks/useDocument';\r\nimport { CLONE_PATH } from '../../../router';\r\n\r\nimport { DocumentActions } from './DocumentActions';\r\n\r\nimport type {\r\n  ContentManagerPlugin,\r\n  DocumentActionProps,\r\n  PanelComponent,\r\n  PanelComponentProps,\r\n} from '../../../content-manager';\r\n\r\ninterface PanelDescription {\r\n  title: string;\r\n  content: React.ReactNode;\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Panels\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Panels = () => {\r\n  const isCloning = useMatch(CLONE_PATH) !== null;\r\n  const [\r\n    {\r\n      query: { status },\r\n    },\r\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\r\n    status: 'draft',\r\n  });\r\n  const { model, id, document, meta, collectionType } = useDoc();\r\n  const plugins = useStrapiApp('Panels', (state) => state.plugins);\r\n\r\n  const props = {\r\n    activeTab: status,\r\n    model,\r\n    documentId: id,\r\n    document: isCloning ? undefined : document,\r\n    meta: isCloning ? undefined : meta,\r\n    collectionType,\r\n  } satisfies PanelComponentProps;\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <DescriptionComponentRenderer\r\n        props={props}\r\n        descriptions={(\r\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\r\n        ).getEditViewSidePanels()}\r\n      >\r\n        {(panels) =>\r\n          panels.map(({ content, id, ...description }) => (\r\n            <Panel key={id} {...description}>\r\n              {content}\r\n            </Panel>\r\n          ))\r\n        }\r\n      </DescriptionComponentRenderer>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Default Action Panels (CE)\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ActionsPanel: PanelComponent = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return {\r\n    title: formatMessage({\r\n      id: 'content-manager.containers.edit.panels.default.title',\r\n      defaultMessage: 'Entry',\r\n    }),\r\n    content: <ActionsPanelContent />,\r\n  };\r\n};\r\n\r\nActionsPanel.type = 'actions';\r\n\r\nconst ActionsPanelContent = () => {\r\n  const isCloning = useMatch(CLONE_PATH) !== null;\r\n  const [\r\n    {\r\n      query: { status = 'draft' },\r\n    },\r\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\r\n  const { model, id, document, meta, collectionType } = useDoc();\r\n  const plugins = useStrapiApp('ActionsPanel', (state) => state.plugins);\r\n\r\n  const props = {\r\n    activeTab: status,\r\n    model,\r\n    documentId: id,\r\n    document: isCloning ? undefined : document,\r\n    meta: isCloning ? undefined : meta,\r\n    collectionType,\r\n  } satisfies DocumentActionProps;\r\n\r\n  return (\r\n    <Flex direction=\"column\" gap={2} width=\"100%\">\r\n      <DescriptionComponentRenderer\r\n        props={props}\r\n        descriptions={(\r\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\r\n        ).getDocumentActions('panel')}\r\n      >\r\n        {(actions) => <DocumentActions actions={actions} />}\r\n      </DescriptionComponentRenderer>\r\n      <InjectionZone area=\"editView.right-links\" slug={model} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Panel\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface PanelProps extends Pick<PanelDescription, 'title'> {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Panel = React.forwardRef<any, PanelProps>(({ children, title }, ref) => {\r\n  return (\r\n    <Flex\r\n      ref={ref}\r\n      tag=\"aside\"\r\n      aria-labelledby=\"additional-information\"\r\n      background=\"neutral0\"\r\n      borderColor=\"neutral150\"\r\n      hasRadius\r\n      paddingBottom={4}\r\n      paddingLeft={4}\r\n      paddingRight={4}\r\n      paddingTop={4}\r\n      shadow=\"tableShadow\"\r\n      gap={3}\r\n      direction=\"column\"\r\n      justifyContent=\"stretch\"\r\n      alignItems=\"flex-start\"\r\n    >\r\n      <Typography tag=\"h2\" variant=\"sigma\" textTransform=\"uppercase\" textColor=\"neutral600\">\r\n        {title}\r\n      </Typography>\r\n      {children}\r\n    </Flex>\r\n  );\r\n});\r\n\r\nexport { Panels, ActionsPanel };\r\nexport type { PanelDescription };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useTable,\r\n  useNotification,\r\n  useAPIErrorHandler,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Dialog, Typography } from '@strapi/design-system';\r\nimport { Check, WarningCircle } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDoc } from '../../../../hooks/useDocument';\r\nimport { useGetManyDraftRelationCountQuery } from '../../../../services/documents';\r\nimport { getTranslation } from '../../../../utils/translations';\r\n\r\nimport { Emphasis } from './Actions';\r\n\r\ninterface ConfirmBulkActionDialogProps {\r\n  endAction: React.ReactNode;\r\n  onToggleDialog: () => void;\r\n  isOpen?: boolean;\r\n  dialogBody: React.ReactNode;\r\n}\r\n\r\nconst ConfirmBulkActionDialog = ({\r\n  onToggleDialog,\r\n  isOpen = false,\r\n  dialogBody,\r\n  endAction,\r\n}: ConfirmBulkActionDialogProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Dialog.Root open={isOpen}>\r\n      <Dialog.Content>\r\n        <Dialog.Header>\r\n          {formatMessage({\r\n            id: 'app.components.ConfirmDialog.title',\r\n            defaultMessage: 'Confirmation',\r\n          })}\r\n        </Dialog.Header>\r\n        <Dialog.Body>\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n            <Flex justifyContent=\"center\">\r\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n            </Flex>\r\n            {dialogBody}\r\n          </Flex>\r\n        </Dialog.Body>\r\n        <Dialog.Footer>\r\n          <Dialog.Cancel>\r\n            <Button fullWidth onClick={onToggleDialog} variant=\"tertiary\">\r\n              {formatMessage({\r\n                id: 'app.components.Button.cancel',\r\n                defaultMessage: 'Cancel',\r\n              })}\r\n            </Button>\r\n          </Dialog.Cancel>\r\n          {endAction}\r\n        </Dialog.Footer>\r\n      </Dialog.Content>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BoldChunk\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ConfirmDialogPublishAll\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ConfirmDialogPublishAllProps\r\n  extends Pick<ConfirmBulkActionDialogProps, 'isOpen' | 'onToggleDialog'> {\r\n  isConfirmButtonLoading?: boolean;\r\n  onConfirm: () => void;\r\n}\r\n\r\nconst ConfirmDialogPublishAll = ({\r\n  isOpen,\r\n  onToggleDialog,\r\n  isConfirmButtonLoading = false,\r\n  onConfirm,\r\n}: ConfirmDialogPublishAllProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const selectedEntries = useTable('ConfirmDialogPublishAll', (state) => state.selectedRows);\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\r\n  const { model, schema } = useDoc();\r\n  const [{ query }] = useQueryParams<{\r\n    plugins?: {\r\n      i18n?: {\r\n        locale?: string;\r\n      };\r\n    };\r\n  }>();\r\n\r\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\r\n  // see RFC \"Count draft relations\" in Notion\r\n  const enableDraftRelationsCount = false;\r\n\r\n  const {\r\n    data: countDraftRelations = 0,\r\n    isLoading,\r\n    error,\r\n  } = useGetManyDraftRelationCountQuery(\r\n    {\r\n      model,\r\n      documentIds: selectedEntries.map((entry) => entry.documentId),\r\n      locale: query?.plugins?.i18n?.locale,\r\n    },\r\n    {\r\n      skip: !enableDraftRelationsCount || selectedEntries.length === 0,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  if (error) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ConfirmBulkActionDialog\r\n      isOpen={isOpen && !isLoading}\r\n      onToggleDialog={onToggleDialog}\r\n      dialogBody={\r\n        <>\r\n          <Typography id=\"confirm-description\" textAlign=\"center\">\r\n            {countDraftRelations > 0 &&\r\n              formatMessage(\r\n                {\r\n                  id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\r\n                  defaultMessage:\r\n                    '<b>{count} {count, plural, one { relation } other { relations } } out of {entities} { entities, plural, one { entry } other { entries } } {count, plural, one { is } other { are } }</b> not published yet and might lead to unexpected behavior. ',\r\n                },\r\n                {\r\n                  b: BoldChunk,\r\n                  count: countDraftRelations,\r\n                  entities: selectedEntries.length,\r\n                }\r\n              )}\r\n            {formatMessage({\r\n              id: getTranslation('popUpWarning.bodyMessage.contentType.publish.all'),\r\n              defaultMessage: 'Are you sure you want to publish these entries?',\r\n            })}\r\n          </Typography>\r\n          {schema?.pluginOptions &&\r\n            'i18n' in schema.pluginOptions &&\r\n            schema?.pluginOptions.i18n && (\r\n              <Typography textColor=\"danger500\" textAlign=\"center\">\r\n                {formatMessage(\r\n                  {\r\n                    id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\r\n                    defaultMessage:\r\n                      'This will publish the active locale versions <em>(from Internationalization)</em>',\r\n                  },\r\n                  {\r\n                    em: Emphasis,\r\n                  }\r\n                )}\r\n              </Typography>\r\n            )}\r\n        </>\r\n      }\r\n      endAction={\r\n        <Button\r\n          onClick={onConfirm}\r\n          variant=\"secondary\"\r\n          startIcon={<Check />}\r\n          loading={isConfirmButtonLoading}\r\n        >\r\n          {formatMessage({\r\n            id: 'app.utils.publish',\r\n            defaultMessage: 'Publish',\r\n          })}\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport { ConfirmDialogPublishAll, ConfirmBulkActionDialog };\r\nexport type { ConfirmDialogPublishAllProps, ConfirmBulkActionDialogProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useQueryParams,\r\n  Table,\r\n  useTable,\r\n  getYupValidationErrors,\r\n  FormErrors,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Modal,\r\n  IconButton,\r\n  Flex,\r\n  Tooltip,\r\n  Loader,\r\n  TypographyComponent,\r\n} from '@strapi/design-system';\r\nimport { Pencil, CrossCircle, CheckCircle, ArrowsCounterClockwise } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\nimport { ValidationError } from 'yup';\r\n\r\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\r\nimport { useContentTypeSchema } from '../../../../hooks/useContentTypeSchema';\r\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\r\nimport { useDocLayout } from '../../../../hooks/useDocumentLayout';\r\nimport { contentManagerApi } from '../../../../services/api';\r\nimport {\r\n  useGetAllDocumentsQuery,\r\n  usePublishManyDocumentsMutation,\r\n} from '../../../../services/documents';\r\nimport { buildValidParams } from '../../../../utils/api';\r\nimport { getTranslation } from '../../../../utils/translations';\r\nimport { createYupSchema } from '../../../../utils/validation';\r\nimport { DocumentStatus } from '../../../EditView/components/DocumentStatus';\r\n\r\nimport { ConfirmDialogPublishAll, ConfirmDialogPublishAllProps } from './ConfirmBulkActionDialog';\r\n\r\nimport type { BulkActionComponent } from '../../../../content-manager';\r\nimport type { Document } from '../../../../hooks/useDocument';\r\n\r\nconst TypographyMaxWidth = styled<TypographyComponent>(Typography)`\r\n  max-width: 300px;\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EntryValidationText\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst formatErrorMessages = (errors: FormErrors, parentKey: string, formatMessage: any) => {\r\n  const messages: string[] = [];\r\n\r\n  Object.entries(errors).forEach(([key, value]) => {\r\n    const currentKey = parentKey ? `${parentKey}.${key}` : key;\r\n\r\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\r\n      if ('id' in value && 'defaultMessage' in value) {\r\n        messages.push(\r\n          formatMessage(\r\n            {\r\n              id: `${value.id}.withField`,\r\n              defaultMessage: value.defaultMessage,\r\n            },\r\n            { field: currentKey }\r\n          )\r\n        );\r\n      } else {\r\n        messages.push(\r\n          ...formatErrorMessages(\r\n            // @ts-expect-error TODO: check why value is not compatible with FormErrors\r\n            value,\r\n            currentKey,\r\n            formatMessage\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      messages.push(\r\n        formatMessage(\r\n          {\r\n            id: `${value}.withField`,\r\n            defaultMessage: value,\r\n          },\r\n          { field: currentKey }\r\n        )\r\n      );\r\n    }\r\n  });\r\n\r\n  return messages;\r\n};\r\n\r\ninterface EntryValidationTextProps {\r\n  validationErrors?: FormErrors;\r\n  status: string;\r\n}\r\n\r\nconst EntryValidationText = ({ validationErrors, status }: EntryValidationTextProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (validationErrors) {\r\n    const validationErrorsMessages = formatErrorMessages(validationErrors, '', formatMessage).join(\r\n      ' '\r\n    );\r\n\r\n    return (\r\n      <Flex gap={2}>\r\n        <CrossCircle fill=\"danger600\" />\r\n        <Tooltip description={validationErrorsMessages}>\r\n          <TypographyMaxWidth textColor=\"danger600\" variant=\"omega\" fontWeight=\"semiBold\" ellipsis>\r\n            {validationErrorsMessages}\r\n          </TypographyMaxWidth>\r\n        </Tooltip>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (status === 'published') {\r\n    return (\r\n      <Flex gap={2}>\r\n        <CheckCircle fill=\"success600\" />\r\n        <Typography textColor=\"success600\" fontWeight=\"bold\">\r\n          {formatMessage({\r\n            id: 'content-manager.bulk-publish.already-published',\r\n            defaultMessage: 'Already Published',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  if (status === 'modified') {\r\n    return (\r\n      <Flex gap={2}>\r\n        <ArrowsCounterClockwise fill=\"alternative600\" />\r\n        <Typography>\r\n          {formatMessage({\r\n            id: 'content-manager.bulk-publish.modified',\r\n            defaultMessage: 'Ready to publish changes',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      <CheckCircle fill=\"success600\" />\r\n      <Typography>\r\n        {formatMessage({\r\n          id: 'app.utils.ready-to-publish',\r\n          defaultMessage: 'Ready to publish',\r\n        })}\r\n      </Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectedEntriesTableContent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface SelectedEntriesTableContentProps {\r\n  isPublishing?: boolean;\r\n  rowsToDisplay?: TableRow[];\r\n  entriesToPublish?: TableRow['documentId'][];\r\n  validationErrors: Record<string, EntryValidationTextProps['validationErrors']>;\r\n}\r\n\r\nconst TABLE_HEADERS = [\r\n  { name: 'id', label: 'id' },\r\n  { name: 'name', label: 'name' },\r\n  { name: 'status', label: 'status' },\r\n  { name: 'publicationStatus', label: 'Publication status' },\r\n];\r\n\r\nconst SelectedEntriesTableContent = ({\r\n  isPublishing,\r\n  rowsToDisplay = [],\r\n  entriesToPublish = [],\r\n  validationErrors = {},\r\n}: SelectedEntriesTableContentProps) => {\r\n  const { pathname } = useLocation();\r\n  const { formatMessage } = useIntl();\r\n\r\n  const {\r\n    list: {\r\n      settings: { mainField },\r\n    },\r\n  } = useDocLayout();\r\n\r\n  const shouldDisplayMainField = mainField != null && mainField !== 'id';\r\n\r\n  return (\r\n    <Table.Content>\r\n      <Table.Head>\r\n        <Table.HeaderCheckboxCell />\r\n        {TABLE_HEADERS.filter((head) => head.name !== 'name' || shouldDisplayMainField).map(\r\n          (head) => (\r\n            <Table.HeaderCell key={head.name} {...head} />\r\n          )\r\n        )}\r\n      </Table.Head>\r\n      <Table.Loading />\r\n      <Table.Body>\r\n        {rowsToDisplay.map((row, index) => (\r\n          <Table.Row key={row.id}>\r\n            <Table.CheckboxCell id={row.id} />\r\n            <Table.Cell>\r\n              <Typography>{row.id}</Typography>\r\n            </Table.Cell>\r\n            {shouldDisplayMainField && (\r\n              <Table.Cell>\r\n                <Typography>{row[mainField as keyof TableRow]}</Typography>\r\n              </Table.Cell>\r\n            )}\r\n            <Table.Cell>\r\n              <DocumentStatus status={row.status} maxWidth={'min-content'} />\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n              {isPublishing && entriesToPublish.includes(row.documentId) ? (\r\n                <Flex gap={2}>\r\n                  <Typography>\r\n                    {formatMessage({\r\n                      id: 'content-manager.success.record.publishing',\r\n                      defaultMessage: 'Publishing...',\r\n                    })}\r\n                  </Typography>\r\n                  <Loader small />\r\n                </Flex>\r\n              ) : (\r\n                <EntryValidationText\r\n                  validationErrors={validationErrors[row.documentId]}\r\n                  status={row.status}\r\n                />\r\n              )}\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n              <Flex>\r\n                <IconButton\r\n                  tag={Link}\r\n                  to={{\r\n                    pathname: `${pathname}/${row.documentId}`,\r\n                    search: row.locale && `?plugins[i18n][locale]=${row.locale}`,\r\n                  }}\r\n                  state={{ from: pathname }}\r\n                  label={formatMessage({\r\n                    id: 'content-manager.bulk-publish.edit',\r\n                    defaultMessage: 'Edit',\r\n                  })}\r\n                  target=\"_blank\"\r\n                  marginLeft=\"auto\"\r\n                  variant=\"ghost\"\r\n                >\r\n                  <Pencil width={'1.6rem'} height={'1.6rem'} />\r\n                </IconButton>\r\n              </Flex>\r\n            </Table.Cell>\r\n          </Table.Row>\r\n        ))}\r\n      </Table.Body>\r\n    </Table.Content>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BoldChunk\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectedEntriesModalContent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TableRow extends Document {}\r\n\r\ninterface SelectedEntriesModalContentProps {\r\n  listViewSelectedEntries: TableRow[];\r\n  toggleModal: ConfirmDialogPublishAllProps['onToggleDialog'];\r\n  setListViewSelectedDocuments: (documents: TableRow[]) => void;\r\n  model: string;\r\n}\r\n\r\nconst SelectedEntriesModalContent = ({\r\n  listViewSelectedEntries,\r\n  toggleModal,\r\n  setListViewSelectedDocuments,\r\n  model,\r\n}: SelectedEntriesModalContentProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { schema, components } = useContentTypeSchema(model);\r\n  const documentIds = listViewSelectedEntries.map(({ documentId }) => documentId);\r\n\r\n  // We want to keep the selected entries order same as the list view\r\n  const [{ query }] = useQueryParams<{ sort?: string; plugins?: Record<string, any> }>();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  // Fetch the documents based on the selected entries and update the modal table\r\n  const { data, isLoading, isFetching, refetch } = useGetAllDocumentsQuery(\r\n    {\r\n      model,\r\n      params: {\r\n        page: '1',\r\n        pageSize: documentIds.length.toString(),\r\n        sort: query.sort,\r\n        filters: {\r\n          documentId: {\r\n            $in: documentIds,\r\n          },\r\n        },\r\n        locale: query.plugins?.i18n?.locale,\r\n      },\r\n    },\r\n    {\r\n      selectFromResult: ({ data, ...restRes }) => ({ data: data?.results ?? [], ...restRes }),\r\n    }\r\n  );\r\n\r\n  // Validate the entries based on the schema to show errors if any\r\n  const { rows, validationErrors } = React.useMemo(() => {\r\n    if (data.length > 0 && schema) {\r\n      const validate = createYupSchema(\r\n        schema.attributes,\r\n        components,\r\n        // Since this is the \"Publish\" action, the validation\r\n        // schema must enforce the rules for published entities\r\n        { status: 'published' }\r\n      );\r\n      const validationErrors: Record<TableRow['documentId'], FormErrors> = {};\r\n      const rows = data.map((entry: Document) => {\r\n        try {\r\n          validate.validateSync(entry, { abortEarly: false });\r\n\r\n          return entry;\r\n        } catch (e) {\r\n          if (e instanceof ValidationError) {\r\n            validationErrors[entry.documentId] = getYupValidationErrors(e);\r\n          }\r\n\r\n          return entry;\r\n        }\r\n      });\r\n\r\n      return { rows, validationErrors };\r\n    }\r\n\r\n    return {\r\n      rows: [],\r\n      validationErrors: {},\r\n    };\r\n  }, [components, data, schema]);\r\n\r\n  const [publishedCount, setPublishedCount] = React.useState(0);\r\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\r\n\r\n  const { publishMany: bulkPublishAction } = useDocumentActions();\r\n  const [, { isLoading: isSubmittingForm }] = usePublishManyDocumentsMutation();\r\n\r\n  const selectedRows = useTable('publishAction', (state) => state.selectedRows);\r\n\r\n  // Filter selected entries from the updated modal table rows\r\n  const selectedEntries = rows.filter((entry) =>\r\n    selectedRows.some((selectedEntry) => selectedEntry.documentId === entry.documentId)\r\n  );\r\n\r\n  const entriesToPublish = selectedEntries\r\n    .filter((entry) => !validationErrors[entry.documentId])\r\n    .map((entry) => entry.documentId);\r\n\r\n  const selectedEntriesWithErrorsCount = selectedEntries.filter(\r\n    ({ documentId }) => validationErrors[documentId]\r\n  ).length;\r\n  const selectedEntriesPublished = selectedEntries.filter(\r\n    ({ status }) => status === 'published'\r\n  ).length;\r\n  const selectedEntriesWithNoErrorsCount =\r\n    selectedEntries.length - selectedEntriesWithErrorsCount - selectedEntriesPublished;\r\n\r\n  const toggleDialog = () => setIsDialogOpen((prev) => !prev);\r\n\r\n  const handleConfirmBulkPublish = async () => {\r\n    toggleDialog();\r\n\r\n    const res = await bulkPublishAction({ model: model, documentIds: entriesToPublish, params });\r\n    if (!('error' in res)) {\r\n      // @ts-expect-error TODO: check with BE why response is not consistent with other actions\r\n      setPublishedCount(res.count);\r\n\r\n      const unpublishedEntries = rows.filter((row) => {\r\n        return !entriesToPublish.includes(row.documentId);\r\n      });\r\n      // Keep selection of the entries in list view that were not published\r\n      setListViewSelectedDocuments(unpublishedEntries);\r\n    }\r\n  };\r\n\r\n  const getFormattedCountMessage = () => {\r\n    if (publishedCount) {\r\n      return formatMessage(\r\n        {\r\n          id: getTranslation('containers.list.selectedEntriesModal.publishedCount'),\r\n          defaultMessage:\r\n            '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} published. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.',\r\n        },\r\n        {\r\n          publishedCount,\r\n          withErrorsCount: selectedEntriesWithErrorsCount,\r\n          b: BoldChunk,\r\n        }\r\n      );\r\n    }\r\n\r\n    return formatMessage(\r\n      {\r\n        id: getTranslation('containers.list.selectedEntriesModal.selectedCount'),\r\n        defaultMessage:\r\n          '<b>{alreadyPublishedCount}</b> {alreadyPublishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{readyToPublishCount}</b> {readyToPublishCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.',\r\n      },\r\n      {\r\n        readyToPublishCount: selectedEntriesWithNoErrorsCount,\r\n        withErrorsCount: selectedEntriesWithErrorsCount,\r\n        alreadyPublishedCount: selectedEntriesPublished,\r\n        b: BoldChunk,\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal.Body>\r\n        <Typography>{getFormattedCountMessage()}</Typography>\r\n        <Box marginTop={5}>\r\n          <SelectedEntriesTableContent\r\n            isPublishing={isSubmittingForm}\r\n            rowsToDisplay={rows}\r\n            entriesToPublish={entriesToPublish}\r\n            validationErrors={validationErrors}\r\n          />\r\n        </Box>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={toggleModal} variant=\"tertiary\">\r\n          {formatMessage({\r\n            id: 'app.components.Button.cancel',\r\n            defaultMessage: 'Cancel',\r\n          })}\r\n        </Button>\r\n        <Flex gap={2}>\r\n          <Button onClick={refetch} variant=\"tertiary\" loading={isFetching}>\r\n            {formatMessage({ id: 'app.utils.refresh', defaultMessage: 'Refresh' })}\r\n          </Button>\r\n          <Button\r\n            onClick={toggleDialog}\r\n            disabled={\r\n              selectedEntries.length === 0 ||\r\n              selectedEntries.length === selectedEntriesWithErrorsCount ||\r\n              selectedEntriesPublished === selectedEntries.length ||\r\n              isLoading\r\n            }\r\n            loading={isSubmittingForm}\r\n          >\r\n            {formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' })}\r\n          </Button>\r\n        </Flex>\r\n      </Modal.Footer>\r\n      <ConfirmDialogPublishAll\r\n        isOpen={isDialogOpen}\r\n        onToggleDialog={toggleDialog}\r\n        isConfirmButtonLoading={isSubmittingForm}\r\n        onConfirm={handleConfirmBulkPublish}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PublishAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PublishAction: BulkActionComponent = ({ documents, model }) => {\r\n  const { formatMessage } = useIntl();\r\n  // Publish button visibility\r\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\r\n  const showPublishButton =\r\n    hasPublishPermission && documents.some(({ status }) => status !== 'published');\r\n\r\n  const setListViewSelectedDocuments = useTable('publishAction', (state) => state.selectRow);\r\n\r\n  const refetchList = () => {\r\n    contentManagerApi.util.invalidateTags([{ type: 'Document', id: `${model}_LIST` }]);\r\n  };\r\n\r\n  if (!showPublishButton) return null;\r\n\r\n  return {\r\n    actionType: 'publish',\r\n    variant: 'tertiary',\r\n    label: formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' }),\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: getTranslation('containers.ListPage.selectedEntriesModal.title'),\r\n        defaultMessage: 'Publish entries',\r\n      }),\r\n      content: ({ onClose }) => {\r\n        return (\r\n          <Table.Root rows={documents} defaultSelectedRows={documents} headers={TABLE_HEADERS}>\r\n            <SelectedEntriesModalContent\r\n              listViewSelectedEntries={documents}\r\n              toggleModal={() => {\r\n                onClose();\r\n                refetchList();\r\n              }}\r\n              setListViewSelectedDocuments={setListViewSelectedDocuments}\r\n              model={model}\r\n            />\r\n          </Table.Root>\r\n        );\r\n      },\r\n      onClose: () => {\r\n        refetchList();\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport { PublishAction, SelectedEntriesModalContent };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  useStrapiApp,\r\n  DescriptionComponentRenderer,\r\n  useTable,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Box, ButtonProps, Flex, Typography } from '@strapi/design-system';\r\nimport { WarningCircle } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\r\nimport { useDoc } from '../../../../hooks/useDocument';\r\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\r\nimport { buildValidParams } from '../../../../utils/api';\r\nimport { getTranslation } from '../../../../utils/translations';\r\nimport {\r\n  DialogOptions,\r\n  DocumentActionButton,\r\n  ModalOptions,\r\n  NotificationOptions,\r\n} from '../../../EditView/components/DocumentActions';\r\n\r\nimport { PublishAction } from './PublishAction';\r\n\r\nimport type { BulkActionComponent, ContentManagerPlugin } from '../../../../content-manager';\r\n\r\ninterface BulkActionDescription {\r\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\r\n  disabled?: boolean;\r\n  icon?: React.ReactNode;\r\n  label: string;\r\n  onClick?: (event: React.SyntheticEvent) => void;\r\n  /**\r\n   * @default 'default'\r\n   */\r\n  type?: 'icon' | 'default';\r\n  /**\r\n   * @default 'secondary'\r\n   */\r\n  variant?: ButtonProps['variant'];\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkActionsRenderer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BulkActionsRenderer = () => {\r\n  const plugins = useStrapiApp('BulkActionsRenderer', (state) => state.plugins);\r\n\r\n  const { model, collectionType } = useDoc();\r\n  const { selectedRows } = useTable('BulkActionsRenderer', (state) => state);\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      <DescriptionComponentRenderer\r\n        props={{\r\n          model,\r\n          collectionType,\r\n          documents: selectedRows,\r\n        }}\r\n        descriptions={(\r\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\r\n        ).getBulkActions()}\r\n      >\r\n        {(actions) => actions.map((action) => <DocumentActionButton key={action.id} {...action} />)}\r\n      </DescriptionComponentRenderer>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DefaultBulkActions\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst DeleteAction: BulkActionComponent = ({ documents, model }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { schema: contentType } = useDoc();\r\n  const selectRow = useTable('DeleteAction', (state) => state.selectRow);\r\n  const hasI18nEnabled = Boolean(contentType?.pluginOptions?.i18n);\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n  const hasDeletePermission = useDocumentRBAC('deleteAction', (state) => state.canDelete);\r\n  const { deleteMany: bulkDeleteAction } = useDocumentActions();\r\n  const documentIds = documents.map(({ documentId }) => documentId);\r\n\r\n  const handleConfirmBulkDelete = async () => {\r\n    const res = await bulkDeleteAction({\r\n      documentIds,\r\n      model,\r\n      params,\r\n    });\r\n    if (!('error' in res)) {\r\n      selectRow([]);\r\n    }\r\n  };\r\n\r\n  if (!hasDeletePermission) return null;\r\n\r\n  return {\r\n    variant: 'danger-light',\r\n    label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: 'app.components.ConfirmDialog.title',\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: (\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          <Flex justifyContent=\"center\">\r\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          </Flex>\r\n          <Typography id=\"confirm-description\" textAlign=\"center\">\r\n            {formatMessage({\r\n              id: 'popUpWarning.bodyMessage.contentType.delete.all',\r\n              defaultMessage: 'Are you sure you want to delete these entries?',\r\n            })}\r\n          </Typography>\r\n          {hasI18nEnabled && (\r\n            <Box textAlign=\"center\" padding={3}>\r\n              <Typography textColor=\"danger500\">\r\n                {formatMessage(\r\n                  {\r\n                    id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\r\n                    defaultMessage:\r\n                      'This will delete the active locale versions <em>(from Internationalization)</em>',\r\n                  },\r\n                  {\r\n                    em: Emphasis,\r\n                  }\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Flex>\r\n      ),\r\n      onConfirm: handleConfirmBulkDelete,\r\n    },\r\n  };\r\n};\r\n\r\nDeleteAction.type = 'delete';\r\n\r\nconst UnpublishAction: BulkActionComponent = ({ documents, model }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { schema } = useDoc();\r\n  const selectRow = useTable('UnpublishAction', (state) => state.selectRow);\r\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\r\n  const hasI18nEnabled = Boolean(schema?.pluginOptions?.i18n);\r\n  const hasDraftAndPublishEnabled = Boolean(schema?.options?.draftAndPublish);\r\n  const { unpublishMany: bulkUnpublishAction } = useDocumentActions();\r\n  const documentIds = documents.map(({ documentId }) => documentId);\r\n  const [{ query }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n\r\n  const handleConfirmBulkUnpublish = async () => {\r\n    const data = await bulkUnpublishAction({ documentIds, model, params });\r\n    if (!('error' in data)) {\r\n      selectRow([]);\r\n    }\r\n  };\r\n\r\n  const showUnpublishButton =\r\n    hasDraftAndPublishEnabled &&\r\n    hasPublishPermission &&\r\n    documents.some((entry) => entry.status === 'published' || entry.status === 'modified');\r\n\r\n  if (!showUnpublishButton) return null;\r\n\r\n  return {\r\n    variant: 'tertiary',\r\n    label: formatMessage({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' }),\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: 'app.components.ConfirmDialog.title',\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: (\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n          <Flex justifyContent=\"center\">\r\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          </Flex>\r\n          <Typography id=\"confirm-description\" textAlign=\"center\">\r\n            {formatMessage({\r\n              id: 'popUpWarning.bodyMessage.contentType.unpublish.all',\r\n              defaultMessage: 'Are you sure you want to unpublish these entries?',\r\n            })}\r\n          </Typography>\r\n          {hasI18nEnabled && (\r\n            <Box textAlign=\"center\" padding={3}>\r\n              <Typography textColor=\"danger500\">\r\n                {formatMessage(\r\n                  {\r\n                    id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\r\n                    defaultMessage:\r\n                      'This will unpublish the active locale versions <em>(from Internationalization)</em>',\r\n                  },\r\n                  {\r\n                    em: Emphasis,\r\n                  }\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Flex>\r\n      ),\r\n      confirmButton: formatMessage({\r\n        id: 'app.utils.unpublish',\r\n        defaultMessage: 'Unpublish',\r\n      }),\r\n      onConfirm: handleConfirmBulkUnpublish,\r\n    },\r\n  };\r\n};\r\n\r\nUnpublishAction.type = 'unpublish';\r\n\r\nconst Emphasis = (chunks: React.ReactNode) => (\r\n  <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\r\n    {chunks}\r\n  </Typography>\r\n);\r\n\r\nconst DEFAULT_BULK_ACTIONS: BulkActionComponent[] = [PublishAction, UnpublishAction, DeleteAction];\r\n\r\nexport { DEFAULT_BULK_ACTIONS, BulkActionsRenderer, Emphasis };\r\nexport type { BulkActionDescription };\r\n","import { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { ChevronRight } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTranslation } from '../../../utils/translations';\r\n\r\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\r\n\r\ntype Reason = ProhibitedCloningField[1];\r\n\r\ninterface AutoCloneFailureModalBodyProps {\r\n  prohibitedFields: ProhibitedCloningField[];\r\n}\r\n\r\nconst AutoCloneFailureModalBody = ({ prohibitedFields }: AutoCloneFailureModalBodyProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const getDefaultErrorMessage = (reason: Reason) => {\r\n    switch (reason) {\r\n      case 'relation':\r\n        return 'Duplicating the relation could remove it from the original entry.';\r\n      case 'unique':\r\n        return 'Identical values in a unique field are not allowed';\r\n      default:\r\n        return reason;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"beta\">\r\n        {formatMessage({\r\n          id: getTranslation('containers.list.autoCloneModal.title'),\r\n          defaultMessage: \"This entry can't be duplicated directly.\",\r\n        })}\r\n      </Typography>\r\n      <Box marginTop={2}>\r\n        <Typography textColor=\"neutral600\">\r\n          {formatMessage({\r\n            id: getTranslation('containers.list.autoCloneModal.description'),\r\n            defaultMessage:\r\n              \"A new entry will be created with the same content, but you'll have to change the following fields to save it.\",\r\n          })}\r\n        </Typography>\r\n      </Box>\r\n      <Flex marginTop={6} gap={2} direction=\"column\" alignItems=\"stretch\">\r\n        {prohibitedFields.map(([fieldPath, reason]) => (\r\n          <Flex\r\n            direction=\"column\"\r\n            gap={2}\r\n            alignItems=\"flex-start\"\r\n            borderColor=\"neutral200\"\r\n            hasRadius\r\n            padding={6}\r\n            key={fieldPath.join()}\r\n          >\r\n            <Flex direction=\"row\" tag=\"ol\">\r\n              {fieldPath.map((pathSegment, index) => (\r\n                <Typography fontWeight=\"semiBold\" tag=\"li\" key={index}>\r\n                  {pathSegment}\r\n                  {index !== fieldPath.length - 1 && (\r\n                    <ChevronRight\r\n                      fill=\"neutral500\"\r\n                      height=\"0.8rem\"\r\n                      width=\"0.8rem\"\r\n                      style={{ margin: '0 0.8rem' }}\r\n                    />\r\n                  )}\r\n                </Typography>\r\n              ))}\r\n            </Flex>\r\n            <Typography tag=\"p\" textColor=\"neutral600\">\r\n              {formatMessage({\r\n                id: getTranslation(`containers.list.autoCloneModal.error.${reason}`),\r\n                defaultMessage: getDefaultErrorMessage(reason),\r\n              })}\r\n            </Typography>\r\n          </Flex>\r\n        ))}\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { AutoCloneFailureModalBody };\r\nexport type { AutoCloneFailureModalBodyProps };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  DescriptionComponentRenderer,\r\n  useNotification,\r\n  useStrapiApp,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, LinkButton, Modal } from '@strapi/design-system';\r\nimport { Duplicate, Pencil } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\r\nimport { Document, useDoc } from '../../../hooks/useDocument';\r\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\r\nimport { isBaseQueryError } from '../../../utils/api';\r\nimport { DocumentActionsMenu } from '../../EditView/components/DocumentActions';\r\n\r\nimport { AutoCloneFailureModalBody } from './AutoCloneFailureModal';\r\n\r\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\r\nimport type {\r\n  ContentManagerPlugin,\r\n  DocumentActionComponent,\r\n  DocumentActionProps,\r\n} from '../../../content-manager';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TableActions\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TableActionsProps {\r\n  document: Document;\r\n}\r\n\r\nconst TableActions = ({ document }: TableActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { model, collectionType } = useDoc();\r\n  const plugins = useStrapiApp('TableActions', (state) => state.plugins);\r\n\r\n  const props: DocumentActionProps = {\r\n    activeTab: null,\r\n    model,\r\n    documentId: document.documentId,\r\n    collectionType,\r\n    document,\r\n  };\r\n\r\n  return (\r\n    <DescriptionComponentRenderer\r\n      props={props}\r\n      descriptions={(plugins['content-manager'].apis as ContentManagerPlugin['config']['apis'])\r\n        .getDocumentActions('table-row')\r\n        // We explicitly remove the PublishAction from description so we never render it and we don't make unnecessary requests.\r\n        .filter((action) => action.name !== 'PublishAction')}\r\n    >\r\n      {(actions) => {\r\n        const tableRowActions = actions.filter((action) => {\r\n          const positions = Array.isArray(action.position) ? action.position : [action.position];\r\n          return positions.includes('table-row');\r\n        });\r\n\r\n        return (\r\n          <DocumentActionsMenu\r\n            actions={tableRowActions}\r\n            label={formatMessage({\r\n              id: 'content-manager.containers.list.table.row-actions',\r\n              defaultMessage: 'Row action',\r\n            })}\r\n            variant=\"ghost\"\r\n          />\r\n        );\r\n      }}\r\n    </DescriptionComponentRenderer>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TableActionComponents\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst EditAction: DocumentActionComponent = ({ documentId }) => {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const { canRead } = useDocumentRBAC('EditAction', ({ canRead }) => ({ canRead }));\r\n  const { toggleNotification } = useNotification();\r\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\r\n\r\n  return {\r\n    disabled: !canRead,\r\n    icon: <StyledPencil />,\r\n    label: formatMessage({\r\n      id: 'content-manager.actions.edit.label',\r\n      defaultMessage: 'Edit',\r\n    }),\r\n    position: 'table-row',\r\n    onClick: async () => {\r\n      if (!documentId) {\r\n        console.error(\r\n          \"You're trying to edit a document without an id, this is likely a bug with Strapi. Please open an issue.\"\r\n        );\r\n\r\n        toggleNotification({\r\n          message: formatMessage({\r\n            id: 'content-manager.actions.edit.error',\r\n            defaultMessage: 'An error occurred while trying to edit the document.',\r\n          }),\r\n          type: 'danger',\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      navigate({\r\n        pathname: documentId,\r\n        search: stringify({\r\n          plugins: query.plugins,\r\n        }),\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nEditAction.type = 'edit';\r\nEditAction.position = 'table-row';\r\n\r\n/**\r\n * Because the icon system is completely broken, we have to do\r\n * this to remove the fill from the cog.\r\n */\r\nconst StyledPencil = styled(Pencil)`\r\n  path {\r\n    fill: currentColor;\r\n  }\r\n`;\r\n\r\nconst CloneAction: DocumentActionComponent = ({ model, documentId }) => {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const { canCreate } = useDocumentRBAC('CloneAction', ({ canCreate }) => ({ canCreate }));\r\n  const { toggleNotification } = useNotification();\r\n  const { autoClone } = useDocumentActions();\r\n  const [prohibitedFields, setProhibitedFields] = React.useState<ProhibitedCloningField[]>([]);\r\n\r\n  return {\r\n    disabled: !canCreate,\r\n    icon: <StyledDuplicate />,\r\n    label: formatMessage({\r\n      id: 'content-manager.actions.clone.label',\r\n      defaultMessage: 'Duplicate',\r\n    }),\r\n    position: 'table-row',\r\n    onClick: async () => {\r\n      if (!documentId) {\r\n        console.error(\r\n          \"You're trying to clone a document in the table without an id, this is likely a bug with Strapi. Please open an issue.\"\r\n        );\r\n\r\n        toggleNotification({\r\n          message: formatMessage({\r\n            id: 'content-manager.actions.clone.error',\r\n            defaultMessage: 'An error occurred while trying to clone the document.',\r\n          }),\r\n          type: 'danger',\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      const res = await autoClone({ model, sourceId: documentId });\r\n\r\n      if ('data' in res) {\r\n        navigate(res.data.documentId);\r\n\r\n        /**\r\n         * We return true because we don't need to show a modal anymore.\r\n         */\r\n        return true;\r\n      }\r\n\r\n      if (\r\n        isBaseQueryError(res.error) &&\r\n        res.error.details &&\r\n        typeof res.error.details === 'object' &&\r\n        'prohibitedFields' in res.error.details &&\r\n        Array.isArray(res.error.details.prohibitedFields)\r\n      ) {\r\n        const prohibitedFields = res.error.details.prohibitedFields as ProhibitedCloningField[];\r\n\r\n        setProhibitedFields(prohibitedFields);\r\n      }\r\n    },\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: 'content-manager.containers.list.autoCloneModal.header',\r\n        defaultMessage: 'Duplicate',\r\n      }),\r\n      content: <AutoCloneFailureModalBody prohibitedFields={prohibitedFields} />,\r\n      footer: ({ onClose }) => {\r\n        return (\r\n          <Modal.Footer>\r\n            <Button onClick={onClose} variant=\"tertiary\">\r\n              {formatMessage({\r\n                id: 'cancel',\r\n                defaultMessage: 'Cancel',\r\n              })}\r\n            </Button>\r\n            <LinkButton\r\n              tag={NavLink}\r\n              to={{\r\n                pathname: `clone/${documentId}`,\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'content-manager.containers.list.autoCloneModal.create',\r\n                defaultMessage: 'Create',\r\n              })}\r\n            </LinkButton>\r\n          </Modal.Footer>\r\n        );\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nCloneAction.type = 'clone';\r\nCloneAction.position = 'table-row';\r\n\r\n/**\r\n * Because the icon system is completely broken, we have to do\r\n * this to remove the fill from the cog.\r\n */\r\nconst StyledDuplicate = styled(Duplicate)`\r\n  path {\r\n    fill: currentColor;\r\n  }\r\n`;\r\n\r\nconst DEFAULT_TABLE_ROW_ACTIONS = [EditAction, CloneAction];\r\n\r\nexport { TableActions, DEFAULT_TABLE_ROW_ACTIONS };\r\n","/* eslint-disable check-file/filename-naming-convention */\r\nimport { INJECTION_ZONES } from './components/InjectionZone';\r\nimport { PLUGIN_ID } from './constants/plugin';\r\nimport {\r\n  DEFAULT_ACTIONS,\r\n  type DocumentActionPosition,\r\n  type DocumentActionDescription,\r\n} from './pages/EditView/components/DocumentActions';\r\nimport {\r\n  DEFAULT_HEADER_ACTIONS,\r\n  type HeaderActionDescription,\r\n} from './pages/EditView/components/Header';\r\nimport { ActionsPanel, type PanelDescription } from './pages/EditView/components/Panels';\r\nimport {\r\n  DEFAULT_BULK_ACTIONS,\r\n  type BulkActionDescription,\r\n} from './pages/ListView/components/BulkActions/Actions';\r\nimport { DEFAULT_TABLE_ROW_ACTIONS } from './pages/ListView/components/TableActions';\r\n\r\nimport type { Document } from './hooks/useDocument';\r\nimport type { DocumentMetadata } from '../../shared/contracts/collection-types';\r\nimport type { DescriptionComponent, PluginConfig } from '@strapi/admin/strapi-admin';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Configuration Types\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype DescriptionReducer<Config extends object> = (prev: Config[]) => Config[];\r\n\r\ninterface EditViewContext {\r\n  /**\r\n   * This will ONLY be null, if the content-type\r\n   * does not have draft & published enabled.\r\n   */\r\n  activeTab: 'draft' | 'published' | null;\r\n  /**\r\n   * Will be either 'single-types' | 'collection-types'\r\n   */\r\n  collectionType: string;\r\n  /**\r\n   * this will be undefined if someone is creating an entry.\r\n   */\r\n  document?: Document;\r\n  /**\r\n   * this will be undefined if someone is creating an entry.\r\n   */\r\n  documentId?: string;\r\n  /**\r\n   * this will be undefined if someone is creating an entry.\r\n   */\r\n  meta?: DocumentMetadata;\r\n  /**\r\n   * The current content-type's model.\r\n   */\r\n  model: string;\r\n}\r\n\r\ninterface ListViewContext {\r\n  /**\r\n   * Will be either 'single-types' | 'collection-types'\r\n   */\r\n  collectionType: string;\r\n  /**\r\n   * The current selected documents in the table\r\n   */\r\n  documents: Document[];\r\n  /**\r\n   * The current content-type's model.\r\n   */\r\n  model: string;\r\n}\r\n\r\ninterface PanelComponentProps extends EditViewContext {}\r\n\r\ninterface PanelComponent extends DescriptionComponent<PanelComponentProps, PanelDescription> {\r\n  /**\r\n   * The defaults are added by Strapi only, if you're providing your own component,\r\n   * you do not need to provide this.\r\n   */\r\n  type?: 'actions' | 'releases';\r\n}\r\n\r\ninterface DocumentActionProps extends EditViewContext {}\r\n\r\ninterface DocumentActionComponent\r\n  extends DescriptionComponent<DocumentActionProps, DocumentActionDescription> {\r\n  type?:\r\n    | 'clone'\r\n    | 'configure-the-view'\r\n    | 'delete'\r\n    | 'discard'\r\n    | 'edit'\r\n    | 'edit-the-model'\r\n    | 'history'\r\n    | 'publish'\r\n    | 'unpublish'\r\n    | 'update';\r\n  position?: DocumentActionDescription['position'];\r\n}\r\n\r\ninterface HeaderActionProps extends EditViewContext {}\r\n\r\ninterface HeaderActionComponent\r\n  extends DescriptionComponent<HeaderActionProps, HeaderActionDescription> {}\r\n\r\ninterface BulkActionComponentProps extends ListViewContext {}\r\n\r\ninterface BulkActionComponent\r\n  extends DescriptionComponent<BulkActionComponentProps, BulkActionDescription> {\r\n  type?: 'delete' | 'publish' | 'unpublish';\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ContentManager plugin\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nclass ContentManagerPlugin {\r\n  /**\r\n   * The following properties are the stored ones provided by any plugins registering with\r\n   * the content-manager. The function calls however, need to be called at runtime in the\r\n   * application, so instead we collate them and run them later with the complete list incl.\r\n   * ones already registered & the context of the view.\r\n   */\r\n  bulkActions: BulkActionComponent[] = [...DEFAULT_BULK_ACTIONS];\r\n  documentActions: DocumentActionComponent[] = [\r\n    ...DEFAULT_ACTIONS,\r\n    ...DEFAULT_TABLE_ROW_ACTIONS,\r\n    ...DEFAULT_HEADER_ACTIONS,\r\n  ];\r\n  editViewSidePanels: PanelComponent[] = [ActionsPanel];\r\n  headerActions: HeaderActionComponent[] = [];\r\n\r\n  constructor() {}\r\n\r\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent>): void;\r\n  addEditViewSidePanel(panels: PanelComponent[]): void;\r\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[]) {\r\n    if (Array.isArray(panels)) {\r\n      this.editViewSidePanels = [...this.editViewSidePanels, ...panels];\r\n    } else if (typeof panels === 'function') {\r\n      this.editViewSidePanels = panels(this.editViewSidePanels);\r\n    } else {\r\n      throw new Error(\r\n        `Expected the \\`panels\\` passed to \\`addEditViewSidePanel\\` to be an array or a function, but received ${getPrintableType(\r\n          panels\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  addDocumentAction(actions: DescriptionReducer<DocumentActionComponent>): void;\r\n  addDocumentAction(actions: DocumentActionComponent[]): void;\r\n  addDocumentAction(\r\n    actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[]\r\n  ) {\r\n    if (Array.isArray(actions)) {\r\n      this.documentActions = [...this.documentActions, ...actions];\r\n    } else if (typeof actions === 'function') {\r\n      this.documentActions = actions(this.documentActions);\r\n    } else {\r\n      throw new Error(\r\n        `Expected the \\`actions\\` passed to \\`addDocumentAction\\` to be an array or a function, but received ${getPrintableType(\r\n          actions\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent>): void;\r\n  addDocumentHeaderAction(actions: HeaderActionComponent[]): void;\r\n  addDocumentHeaderAction(\r\n    actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[]\r\n  ) {\r\n    if (Array.isArray(actions)) {\r\n      this.headerActions = [...this.headerActions, ...actions];\r\n    } else if (typeof actions === 'function') {\r\n      this.headerActions = actions(this.headerActions);\r\n    } else {\r\n      throw new Error(\r\n        `Expected the \\`actions\\` passed to \\`addDocumentHeaderAction\\` to be an array or a function, but received ${getPrintableType(\r\n          actions\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent>): void;\r\n  addBulkAction(actions: BulkActionComponent[]): void;\r\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[]) {\r\n    if (Array.isArray(actions)) {\r\n      this.bulkActions = [...this.bulkActions, ...actions];\r\n    } else if (typeof actions === 'function') {\r\n      this.bulkActions = actions(this.bulkActions);\r\n    } else {\r\n      throw new Error(\r\n        `Expected the \\`actions\\` passed to \\`addBulkAction\\` to be an array or a function, but received ${getPrintableType(\r\n          actions\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  get config() {\r\n    return {\r\n      id: PLUGIN_ID,\r\n      name: 'Content Manager',\r\n      injectionZones: INJECTION_ZONES,\r\n      apis: {\r\n        addBulkAction: this.addBulkAction.bind(this),\r\n        addDocumentAction: this.addDocumentAction.bind(this),\r\n        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),\r\n        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),\r\n        getBulkActions: () => this.bulkActions,\r\n        getDocumentActions: (position?: DocumentActionPosition) => {\r\n          /**\r\n           * When possible, pre-filter the actions by the components static position property.\r\n           * This avoids rendering the actions in multiple places where they weren't displayed,\r\n           * which wasn't visible but created issues with useEffect for instance.\r\n           * The response should still be filtered by the position, as the static property is new\r\n           * and not mandatory to avoid a breaking change.\r\n           */\r\n          if (position) {\r\n            return this.documentActions.filter(\r\n              (action) =>\r\n                action.position == undefined || [action.position].flat().includes(position)\r\n            );\r\n          }\r\n\r\n          return this.documentActions;\r\n        },\r\n        getEditViewSidePanels: () => this.editViewSidePanels,\r\n        getHeaderActions: () => this.headerActions,\r\n      },\r\n    } satisfies PluginConfig;\r\n  }\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * getPrintableType\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal\r\n * @description Gets the human-friendly printable type name for the given value, for instance it will yield\r\n * `array` instead of `object`, as the native `typeof` operator would do.\r\n */\r\nconst getPrintableType = (value: unknown): string => {\r\n  const nativeType = typeof value;\r\n\r\n  if (nativeType === 'object') {\r\n    if (value === null) return 'null';\r\n    if (Array.isArray(value)) return 'array';\r\n    if (value instanceof Object && value.constructor.name !== 'Object') {\r\n      return value.constructor.name;\r\n    }\r\n  }\r\n\r\n  return nativeType;\r\n};\r\n\r\nexport { ContentManagerPlugin };\r\nexport type {\r\n  EditViewContext,\r\n  ListViewContext,\r\n  BulkActionComponent,\r\n  BulkActionComponentProps,\r\n  BulkActionDescription,\r\n  DescriptionComponent,\r\n  DescriptionReducer,\r\n  PanelComponentProps,\r\n  PanelComponent,\r\n  PanelDescription,\r\n  DocumentActionComponent,\r\n  DocumentActionDescription,\r\n  DocumentActionProps,\r\n  HeaderActionComponent,\r\n  HeaderActionDescription,\r\n  HeaderActionProps,\r\n};\r\n","import { useQueryParams, useTracking } from '@strapi/admin/strapi-admin';\r\nimport { ClockCounterClockwise } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nimport type { DocumentActionComponent } from '../../content-manager';\r\n\r\nconst HistoryAction: DocumentActionComponent = ({ model, document }) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const { pathname } = useLocation();\r\n  const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\r\n\r\n  if (!window.strapi.features.isEnabled('cms-content-history')) {\r\n    return null;\r\n  }\r\n\r\n  const handleOnClick = () => {\r\n    const destination = { pathname: 'history', search: pluginsQueryParams };\r\n    trackUsage('willNavigate', {\r\n      from: pathname,\r\n      to: `${pathname}/${destination.pathname}`,\r\n    });\r\n    navigate(destination);\r\n  };\r\n\r\n  return {\r\n    icon: <ClockCounterClockwise />,\r\n    label: formatMessage({\r\n      id: 'content-manager.history.document-action',\r\n      defaultMessage: 'Content History',\r\n    }),\r\n    onClick: handleOnClick,\r\n    disabled:\r\n      /**\r\n       * The user is creating a new document.\r\n       * It hasn't been saved yet, so there's no history to go to\r\n       */\r\n      !document ||\r\n      /**\r\n       * The document has been created but the current dimension has never been saved.\r\n       * For example, the user is creating a new locale in an existing document,\r\n       * so there's no history for the document in that locale\r\n       */\r\n      !document.id ||\r\n      /**\r\n       * History is only available for content types created by the user.\r\n       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,\r\n       * which start with `admin::` or `plugin::`\r\n       */\r\n      !model.startsWith('api::'),\r\n    position: 'header',\r\n  };\r\n};\r\n\r\nHistoryAction.type = 'history';\r\nHistoryAction.position = 'header';\r\n\r\nexport { HistoryAction };\r\n","/* eslint-disable check-file/no-index */\r\n\r\nimport { type ContentManagerPlugin } from '../content-manager';\r\n\r\nimport { HistoryAction } from './components/HistoryAction';\r\n\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\nimport type { Plugin } from '@strapi/types';\r\n\r\nconst historyAdmin: Partial<Plugin.Config.AdminInput> = {\r\n  bootstrap(app: StrapiApp) {\r\n    const { addDocumentAction } = app.getPlugin('content-manager').apis as {\r\n      addDocumentAction: ContentManagerPlugin['addDocumentAction'];\r\n    };\r\n\r\n    /**\r\n     * Register the document action here using the public API, and not by setting the action in the\r\n     * Content Manager directly, because this API lets us control the order of the actions array.\r\n     * We want history to be the last non-delete action in the array.\r\n     */\r\n    addDocumentAction((actions) => {\r\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\r\n      actions.splice(indexOfDeleteAction, 0, HistoryAction);\r\n      return actions;\r\n    });\r\n  },\r\n};\r\n\r\nexport { historyAdmin };\r\n","import { createSlice, type PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { GetInitData } from '../../../shared/contracts/init';\r\n\r\nimport type { ContentManagerLink } from '../hooks/useContentManagerInitData';\r\n\r\ninterface AppState {\r\n  collectionTypeLinks: ContentManagerLink[];\r\n  components: GetInitData.Response['data']['components'];\r\n  fieldSizes: GetInitData.Response['data']['fieldSizes'];\r\n  models: GetInitData.Response['data']['contentTypes'];\r\n  singleTypeLinks: ContentManagerLink[];\r\n  isLoading: boolean;\r\n}\r\n\r\nconst initialState: AppState = {\r\n  collectionTypeLinks: [],\r\n  components: [],\r\n  fieldSizes: {},\r\n  models: [],\r\n  singleTypeLinks: [],\r\n  isLoading: true,\r\n};\r\n\r\nconst appSlice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    setInitialData(\r\n      state,\r\n      action: PayloadAction<{\r\n        authorizedCollectionTypeLinks: AppState['collectionTypeLinks'];\r\n        authorizedSingleTypeLinks: AppState['singleTypeLinks'];\r\n        components: AppState['components'];\r\n        contentTypeSchemas: AppState['models'];\r\n        fieldSizes: AppState['fieldSizes'];\r\n      }>\r\n    ) {\r\n      const {\r\n        authorizedCollectionTypeLinks,\r\n        authorizedSingleTypeLinks,\r\n        components,\r\n        contentTypeSchemas,\r\n        fieldSizes,\r\n      } = action.payload;\r\n      state.collectionTypeLinks = authorizedCollectionTypeLinks.filter(\r\n        ({ isDisplayed }) => isDisplayed\r\n      );\r\n      state.singleTypeLinks = authorizedSingleTypeLinks.filter(({ isDisplayed }) => isDisplayed);\r\n      state.components = components;\r\n      state.models = contentTypeSchemas;\r\n      state.fieldSizes = fieldSizes;\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = appSlice;\r\nconst { setInitialData } = actions;\r\n\r\nexport { reducer, setInitialData };\r\nexport type { AppState };\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport { reducer as appReducer } from './app';\r\n\r\nconst reducer = combineReducers({\r\n  app: appReducer,\r\n});\r\n\r\ntype State = ReturnType<typeof reducer>;\r\n\r\nexport { reducer };\r\nexport type { State };\r\n","import { GetPreviewUrl } from '../../../../shared/contracts/preview';\r\nimport { contentManagerApi } from '../../services/api';\r\n\r\nconst previewApi = contentManagerApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getPreviewUrl: builder.query<GetPreviewUrl.Response, GetPreviewUrl.Request>({\r\n      query({ query, params }) {\r\n        return {\r\n          url: `/content-manager/preview/url/${params.contentType}`,\r\n          method: 'GET',\r\n          config: {\r\n            params: query,\r\n          },\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nconst { useGetPreviewUrlQuery } = previewApi;\r\n\r\nexport { useGetPreviewUrlQuery };\r\n","import * as React from 'react';\r\n\r\nimport { useQueryParams, useTracking, useForm } from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Tooltip, type TooltipProps } from '@strapi/design-system';\r\nimport { UID } from '@strapi/types';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport { useGetPreviewUrlQuery } from '../services/preview';\r\n\r\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\r\n\r\ninterface ConditionalTooltipProps {\r\n  isShown: boolean;\r\n  label: TooltipProps['label'];\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ConditionalTooltip = ({ isShown, label, children }: ConditionalTooltipProps) => {\r\n  if (isShown) {\r\n    return <Tooltip label={label}>{children}</Tooltip>;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nconst PreviewSidePanel: PanelComponent = ({ model, documentId, document }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { pathname } = useLocation();\r\n  const [{ query }] = useQueryParams();\r\n  const isModified = useForm('PreviewSidePanel', (state) => state.modified);\r\n\r\n  /**\r\n   * The preview URL isn't used in this component, we just fetch it to know if preview is enabled\r\n   * for the content type. If it's not, the panel is not displayed. If it is, we display a link to\r\n   * /preview, and the URL will already be loaded in the RTK query cache.\r\n   */\r\n  const { data, error } = useGetPreviewUrlQuery({\r\n    params: {\r\n      contentType: model as UID.ContentType,\r\n    },\r\n    query: {\r\n      documentId,\r\n      locale: document?.locale,\r\n      status: document?.status,\r\n    },\r\n  });\r\n\r\n  if (!data?.data?.url || error) {\r\n    return null;\r\n  }\r\n\r\n  const trackNavigation = () => {\r\n    // Append /preview to the current URL\r\n    const destinationPathname = pathname.replace(/\\/$/, '') + '/preview';\r\n    trackUsage('willNavigate', { from: pathname, to: destinationPathname });\r\n  };\r\n\r\n  return {\r\n    title: formatMessage({ id: 'content-manager.preview.panel.title', defaultMessage: 'Preview' }),\r\n    content: (\r\n      <Flex gap={2} width=\"100%\">\r\n        <ConditionalTooltip\r\n          label={formatMessage({\r\n            id: 'content-manager.preview.panel.button-disabled-tooltip',\r\n            defaultMessage: 'Please save to open the preview',\r\n          })}\r\n          isShown={isModified}\r\n        >\r\n          <Button\r\n            variant=\"tertiary\"\r\n            tag={Link}\r\n            to={{ pathname: 'preview', search: stringify(query, { encode: false }) }}\r\n            onClick={trackNavigation}\r\n            flex=\"auto\"\r\n            disabled={isModified}\r\n          >\r\n            {formatMessage({\r\n              id: 'content-manager.preview.panel.button',\r\n              defaultMessage: 'Open preview',\r\n            })}\r\n          </Button>\r\n        </ConditionalTooltip>\r\n      </Flex>\r\n    ),\r\n  };\r\n};\r\n\r\nexport { PreviewSidePanel };\r\n","export const FEATURE_ID = 'preview';\r\n","/* eslint-disable check-file/no-index */\r\n\r\nimport { PreviewSidePanel } from './components/PreviewSidePanel';\r\nimport { FEATURE_ID } from './constants';\r\n\r\nimport type { ContentManagerPlugin } from '../content-manager';\r\nimport type { PluginDefinition } from '@strapi/admin/strapi-admin';\r\n\r\nconst previewAdmin = {\r\n  bootstrap(app) {\r\n    // TODO: Add license registry check when it's available\r\n    if (!window.strapi.future.isEnabled(FEATURE_ID)) {\r\n      return;\r\n    }\r\n\r\n    const contentManagerPluginApis = app.getPlugin('content-manager')\r\n      .apis as ContentManagerPlugin['config']['apis'];\r\n\r\n    contentManagerPluginApis.addEditViewSidePanel([PreviewSidePanel]);\r\n  },\r\n} satisfies Partial<PluginDefinition>;\r\n\r\nexport { previewAdmin };\r\n","import { Feather } from '@strapi/icons';\r\n\r\nimport { PLUGIN_ID } from './constants/plugin';\r\nimport { ContentManagerPlugin } from './content-manager';\r\nimport { historyAdmin } from './history';\r\nimport { reducer } from './modules/reducers';\r\nimport { previewAdmin } from './preview';\r\nimport { routes } from './router';\r\nimport { prefixPluginTranslations } from './utils/translations';\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default {\r\n  register(app: any) {\r\n    const cm = new ContentManagerPlugin();\r\n\r\n    app.addReducers({\r\n      [PLUGIN_ID]: reducer,\r\n    });\r\n\r\n    app.addMenuLink({\r\n      to: PLUGIN_ID,\r\n      icon: Feather,\r\n      intlLabel: {\r\n        id: `content-manager.plugin.name`,\r\n        defaultMessage: 'Content Manager',\r\n      },\r\n      permissions: [],\r\n      position: 1,\r\n    });\r\n\r\n    app.router.addRoute({\r\n      path: 'content-manager/*',\r\n      lazy: async () => {\r\n        const { Layout } = await import('./layout');\r\n\r\n        return {\r\n          Component: Layout,\r\n        };\r\n      },\r\n      children: routes,\r\n    });\r\n\r\n    app.registerPlugin(cm.config);\r\n  },\r\n  bootstrap(app: any) {\r\n    if (typeof historyAdmin.bootstrap === 'function') {\r\n      historyAdmin.bootstrap(app);\r\n    }\r\n    if (typeof previewAdmin.bootstrap === 'function') {\r\n      previewAdmin.bootstrap(app);\r\n    }\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, PLUGIN_ID),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\nexport * from './exports';\r\n"],"names":["jsx","Fragment","useStrapiApp","createContext","useParams","useQueryParams","useAuth","React","contentTypePermissions","useRBAC","Page","index","adminApi","stringify","translatedErrors","attributes","yup","pipe","useNotification","useAPIErrorHandler","contentType","components","error","ValidationError","getYupValidationErrors","useForm","useIntl","useTracking","useNavigate","useGuidedTour","routes","lazy","Navigate","historyRoutes","previewRoutes","actions","jsxs","Flex","action","Button","styled","Menu","More","VisuallyHidden","Dialog","Modal","mapValues","PublishAction","useMatch","canPublish","useGetDraftRelationCountQuery","modified","setSubmitting","isSubmitting","resetForm","UnpublishAction","Cross","WarningCircle","Typography","Radio","canUpdate","intervalToDuration","isPast","Status","BackButton","Box","DescriptionComponentRenderer","SingleSelect","SingleSelectOption","IconButton","ListPlus","Pencil","DeleteAction","Trash","id","BoldChunk","useTable","Check","CrossCircle","Tooltip","CheckCircle","ArrowsCounterClockwise","useLocation","Table","Loader","Link","data","validationErrors","rows","ChevronRight","canRead","canCreate","prohibitedFields","LinkButton","NavLink","Duplicate","ClockCounterClockwise","createSlice","reducer","combineReducers","appReducer","Feather"],"mappings":"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"}