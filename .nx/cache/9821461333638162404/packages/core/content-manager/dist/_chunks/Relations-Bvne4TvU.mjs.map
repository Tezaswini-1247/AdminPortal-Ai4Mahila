{"version":3,"file":"Relations-Bvne4TvU.mjs","sources":["../../admin/src/pages/EditView/components/FormInputs/ComponentContext.tsx","../../admin/src/pages/EditView/components/FormInputs/Relations.tsx"],"sourcesContent":["import { createContext } from '@strapi/admin/strapi-admin';\r\n\r\ninterface ComponentContextValue {\r\n  /**\r\n   * The id of the component. It will be undefined if the component\r\n   * has not been created in the database yet. This could be on a new\r\n   * or existing entry.\r\n   */\r\n  id?: number;\r\n  /**\r\n   * The level of the component. This is used to determine the nesting\r\n   * of the component. The default is set to -1 so that the base level is 0\r\n   * for the top level component, and increases by 1 for each level of nesting.\r\n   */\r\n  level: number;\r\n  /**\r\n   * The uid of the component. This is used to determine the type of the\r\n   * component. Within an attribute, it is normally the `component` value.\r\n   * It will be undefined if the hook is not called within the confines\r\n   * of a provider.\r\n   */\r\n  uid?: string;\r\n  /**\r\n   * The type of component parent. It will be undefined if the hook\r\n   * is not called within the confines of a provider.\r\n   */\r\n  type?: 'dynamiczone' | 'repeatable' | 'component';\r\n}\r\n\r\n/**\r\n * We use this component to wrap any individual component field in the Edit View,\r\n * this could be a component field in a dynamic zone, a component within a repeatable space,\r\n * or even nested components.\r\n *\r\n * We primarily need this to provide the component id to the components so that they can\r\n * correctly fetch their relations.\r\n */\r\nconst [ComponentProvider, useComponent] = createContext<ComponentContextValue>('ComponentContext', {\r\n  id: undefined,\r\n  level: -1,\r\n  uid: undefined,\r\n  type: undefined,\r\n});\r\n\r\nexport { ComponentProvider, useComponent };\r\n","import * as React from 'react';\r\n\r\nimport {\r\n  type InputProps,\r\n  useField,\r\n  useForm,\r\n  useNotification,\r\n  useFocusInputField,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Box,\r\n  Combobox,\r\n  ComboboxOption,\r\n  Flex,\r\n  IconButton,\r\n  TextButton,\r\n  Tooltip,\r\n  Typography,\r\n  VisuallyHidden,\r\n  useComposedRefs,\r\n  Link,\r\n  Field,\r\n  FlexComponent,\r\n  BoxComponent,\r\n} from '@strapi/design-system';\r\nimport { Cross, Drag, ArrowClockwise } from '@strapi/icons';\r\nimport { generateNKeysBetween } from 'fractional-indexing';\r\nimport pipe from 'lodash/fp/pipe';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { RelationDragPreviewProps } from '../../../../components/DragPreviews/RelationDragPreview';\r\nimport { COLLECTION_TYPES } from '../../../../constants/collections';\r\nimport { ItemTypes } from '../../../../constants/dragAndDrop';\r\nimport { useDoc } from '../../../../hooks/useDocument';\r\nimport { type EditFieldLayout } from '../../../../hooks/useDocumentLayout';\r\nimport {\r\n  DROP_SENSITIVITY,\r\n  UseDragAndDropOptions,\r\n  useDragAndDrop,\r\n} from '../../../../hooks/useDragAndDrop';\r\nimport {\r\n  useGetRelationsQuery,\r\n  useLazySearchRelationsQuery,\r\n  RelationResult,\r\n} from '../../../../services/relations';\r\nimport { buildValidParams } from '../../../../utils/api';\r\nimport { getRelationLabel } from '../../../../utils/relations';\r\nimport { getTranslation } from '../../../../utils/translations';\r\nimport { DocumentStatus } from '../DocumentStatus';\r\n\r\nimport { useComponent } from './ComponentContext';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/**\r\n * Remove a relation, whether it's been already saved or not.\r\n * It's used both in RelationsList, where the \"remove relation\" button is, and in the input,\r\n * because we sometimes need to remove a previous relation when selecting a new one.\r\n */\r\nfunction useHandleDisconnect(fieldName: string, consumerName: string) {\r\n  const field = useField(fieldName);\r\n  const removeFieldRow = useForm(consumerName, (state) => state.removeFieldRow);\r\n  const addFieldRow = useForm(consumerName, (state) => state.addFieldRow);\r\n\r\n  const handleDisconnect: ListItemProps['data']['handleDisconnect'] = (relation) => {\r\n    if (field.value && field.value.connect) {\r\n      /**\r\n       * A relation will exist in the `connect` array _if_ it has\r\n       * been added without saving. In this case, we just remove it\r\n       * from the connect array\r\n       */\r\n      const indexOfRelationInConnectArray = field.value.connect.findIndex(\r\n        (rel: NonNullable<RelationsFormValue['connect']>[number]) => rel.id === relation.id\r\n      );\r\n\r\n      if (indexOfRelationInConnectArray >= 0) {\r\n        removeFieldRow(`${fieldName}.connect`, indexOfRelationInConnectArray);\r\n        return;\r\n      }\r\n    }\r\n\r\n    addFieldRow(`${fieldName}.disconnect`, {\r\n      id: relation.id,\r\n      apiData: {\r\n        id: relation.id,\r\n        documentId: relation.documentId,\r\n        locale: relation.locale,\r\n      },\r\n    });\r\n  };\r\n\r\n  return handleDisconnect;\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RelationsField\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst RELATIONS_TO_DISPLAY = 5;\r\nconst ONE_WAY_RELATIONS = ['oneWay', 'oneToOne', 'manyToOne', 'oneToManyMorph', 'oneToOneMorph'];\r\n\r\ntype RelationPosition =\r\n  | (Pick<RelationResult, 'status' | 'locale'> & {\r\n      before: string;\r\n      end?: never;\r\n    })\r\n  | { end: boolean; before?: never; status?: never; locale?: never };\r\n\r\ninterface Relation extends Pick<RelationResult, 'documentId' | 'id' | 'locale' | 'status'> {\r\n  href: string;\r\n  label: string;\r\n  position?: RelationPosition;\r\n  __temp_key__: string;\r\n}\r\n\r\ninterface RelationsFieldProps\r\n  extends Omit<Extract<EditFieldLayout, { type: 'relation' }>, 'size' | 'hint'>,\r\n    Pick<InputProps, 'hint'> {}\r\n\r\nexport interface RelationsFormValue {\r\n  connect?: Relation[];\r\n  disconnect?: Pick<Relation, 'id'>[];\r\n}\r\n\r\n/**\r\n * TODO: we get a rather ugly flash when we remove a single relation from the list leaving\r\n * no other relations when we press save. The initial relation re-renders, probably because\r\n * of the lag in the Form cleaning it's \"disconnect\" array, whilst our data has not been invalidated.\r\n *\r\n * Could we invalidate relation data on the document actions? Should we?\r\n */\r\n\r\n/**\r\n * @internal\r\n * @description The relations field holds a lot of domain logic for handling relations which is rather complicated\r\n * At present we do not expose this to plugin developers, however, they are able to overwrite it themselves should\r\n * they wish to do so.\r\n */\r\nconst RelationsField = React.forwardRef<HTMLDivElement, RelationsFieldProps>(\r\n  ({ disabled, label, ...props }, ref) => {\r\n    const [currentPage, setCurrentPage] = React.useState(1);\r\n    const { document, model: documentModel } = useDoc();\r\n    const documentId = document?.documentId;\r\n    const { formatMessage } = useIntl();\r\n    const [{ query }] = useQueryParams();\r\n    const params = buildValidParams(query);\r\n\r\n    const isMorph = props.attribute.relation.toLowerCase().includes('morph');\r\n    const isDisabled = isMorph || disabled;\r\n\r\n    const { componentId, componentUID } = useComponent('RelationsField', ({ uid, id }) => ({\r\n      componentId: id,\r\n      componentUID: uid,\r\n    }));\r\n\r\n    const isSubmitting = useForm('RelationsList', (state) => state.isSubmitting);\r\n\r\n    React.useEffect(() => {\r\n      setCurrentPage(1);\r\n    }, [isSubmitting]);\r\n\r\n    /**\r\n     * We'll always have a documentId in a created entry, so we look for a componentId first.\r\n     * Same with `uid` and `documentModel`.\r\n     */\r\n    const id = componentId ? componentId.toString() : documentId;\r\n    const model = componentUID ?? documentModel;\r\n\r\n    /**\r\n     * The `name` prop is a complete path to the field, e.g. `field1.field2.field3`.\r\n     * Where the above example would a nested field within two components, however\r\n     * we only require the field on the component not the complete path since we query\r\n     * individual components. Therefore we split the string and take the last item.\r\n     */\r\n    const [targetField] = props.name.split('.').slice(-1);\r\n\r\n    const { data, isLoading, isFetching } = useGetRelationsQuery(\r\n      {\r\n        model,\r\n        targetField,\r\n        // below we don't run the query if there is no id.\r\n        id: id!,\r\n        params: {\r\n          ...params,\r\n          pageSize: RELATIONS_TO_DISPLAY,\r\n          page: currentPage,\r\n        },\r\n      },\r\n      {\r\n        refetchOnMountOrArgChange: true,\r\n        skip: !id,\r\n        selectFromResult: (result) => {\r\n          return {\r\n            ...result,\r\n            data: {\r\n              ...result.data,\r\n              results: result.data?.results ? result.data.results : [],\r\n            },\r\n          };\r\n        },\r\n      }\r\n    );\r\n\r\n    const handleLoadMore = () => {\r\n      setCurrentPage((prev) => prev + 1);\r\n    };\r\n\r\n    const field = useField(props.name);\r\n\r\n    const isFetchingMoreRelations = isLoading || isFetching;\r\n\r\n    const realServerRelationsCount =\r\n      'pagination' in data && data.pagination ? data.pagination.total : 0;\r\n\r\n    /**\r\n     * Items that are already connected, but reordered would be in\r\n     * this list, so to get an accurate figure, we remove them.\r\n     */\r\n    const relationsConnected =\r\n      (field.value?.connect ?? []).filter(\r\n        (rel: Relation) => data.results.findIndex((relation) => relation.id === rel.id) === -1\r\n      ).length ?? 0;\r\n    const relationsDisconnected = field.value?.disconnect?.length ?? 0;\r\n\r\n    const relationsCount = realServerRelationsCount + relationsConnected - relationsDisconnected;\r\n\r\n    /**\r\n     * This is it, the source of truth for reordering in conjunction with partial loading & updating\r\n     * of relations. Relations on load are given __temp_key__ when fetched, because we don't want to\r\n     * create brand new keys everytime the data updates, just keep adding them onto the newly loaded ones.\r\n     */\r\n    const relations = React.useMemo(() => {\r\n      const ctx = {\r\n        field: field.value,\r\n        // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\r\n        href: `../${COLLECTION_TYPES}/${props.attribute.targetModel}`,\r\n        mainField: props.mainField,\r\n      };\r\n\r\n      /**\r\n       * Tidy up our data.\r\n       */\r\n      const transformations = pipe(\r\n        removeConnected(ctx),\r\n        removeDisconnected(ctx),\r\n        addLabelAndHref(ctx)\r\n      );\r\n\r\n      const transformedRels = transformations([...data.results]);\r\n\r\n      /**\r\n       * THIS IS CRUCIAL. If you don't sort by the __temp_key__ which comes from fractional indexing\r\n       * then the list will be in the wrong order.\r\n       */\r\n      return [...transformedRels, ...(field.value?.connect ?? [])].sort((a, b) => {\r\n        if (a.__temp_key__ < b.__temp_key__) return -1;\r\n        if (a.__temp_key__ > b.__temp_key__) return 1;\r\n        return 0;\r\n      });\r\n    }, [\r\n      data.results,\r\n      field.value,\r\n      // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\r\n      props.attribute.targetModel,\r\n      props.mainField,\r\n    ]);\r\n\r\n    const handleDisconnect = useHandleDisconnect(props.name, 'RelationsField');\r\n\r\n    const handleConnect: RelationsInputProps['onChange'] = (relation) => {\r\n      const [lastItemInList] = relations.slice(-1);\r\n\r\n      const item = {\r\n        id: relation.id,\r\n        apiData: {\r\n          id: relation.id,\r\n          documentId: relation.documentId,\r\n          locale: relation.locale,\r\n        },\r\n        status: relation.status,\r\n        /**\r\n         * If there's a last item, that's the first key we use to generate out next one.\r\n         */\r\n        __temp_key__: generateNKeysBetween(lastItemInList?.__temp_key__ ?? null, null, 1)[0],\r\n        // Fallback to `id` if there is no `mainField` value, which will overwrite the above `id` property with the exact same data.\r\n        [props.mainField?.name ?? 'documentId']: relation[props.mainField?.name ?? 'documentId'],\r\n        label: getRelationLabel(relation, props.mainField),\r\n        // @ts-expect-error – targetModel does exist on the attribute, but it's not typed.\r\n        href: `../${COLLECTION_TYPES}/${props.attribute.targetModel}/${relation.documentId}?${relation.locale ? `plugins[i18n][locale]=${relation.locale}` : ''}`,\r\n      };\r\n\r\n      if (ONE_WAY_RELATIONS.includes(props.attribute.relation)) {\r\n        // Remove any existing relation so they can be replaced with the new one\r\n        field.value?.connect?.forEach(handleDisconnect);\r\n        relations.forEach(handleDisconnect);\r\n\r\n        field.onChange(`${props.name}.connect`, [item]);\r\n      } else {\r\n        field.onChange(`${props.name}.connect`, [...(field.value?.connect ?? []), item]);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Flex\r\n        ref={ref}\r\n        direction=\"column\"\r\n        gap={3}\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"stretch\"\r\n        wrap=\"wrap\"\r\n      >\r\n        <StyledFlex direction=\"column\" alignItems=\"start\" gap={2} width=\"100%\">\r\n          <RelationsInput\r\n            disabled={isDisabled}\r\n            // NOTE: we should not default to using the documentId if the component is being created (componentUID is undefined)\r\n            id={componentUID ? (componentId ? `${componentId}` : '') : documentId}\r\n            label={`${label} ${relationsCount > 0 ? `(${relationsCount})` : ''}`}\r\n            model={model}\r\n            onChange={handleConnect}\r\n            {...props}\r\n          />\r\n          {'pagination' in data &&\r\n          data.pagination &&\r\n          data.pagination.pageCount > data.pagination.page ? (\r\n            <TextButton\r\n              disabled={isFetchingMoreRelations}\r\n              onClick={handleLoadMore}\r\n              loading={isFetchingMoreRelations}\r\n              startIcon={<ArrowClockwise />}\r\n              // prevent the label from line-wrapping\r\n              shrink={0}\r\n            >\r\n              {formatMessage({\r\n                id: getTranslation('relation.loadMore'),\r\n                defaultMessage: 'Load More',\r\n              })}\r\n            </TextButton>\r\n          ) : null}\r\n        </StyledFlex>\r\n        <RelationsList\r\n          data={relations}\r\n          serverData={data.results}\r\n          disabled={isDisabled}\r\n          name={props.name}\r\n          isLoading={isFetchingMoreRelations}\r\n          relationType={props.attribute.relation}\r\n        />\r\n      </Flex>\r\n    );\r\n  }\r\n);\r\n\r\n/**\r\n * TODO: this can be removed once we stop shipping Inputs with\r\n * labels wrapped round in DS@2.\r\n */\r\nconst StyledFlex = styled<FlexComponent>(Flex)`\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Relation Transformations\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TransformationContext extends Pick<RelationsFieldProps, 'mainField'> {\r\n  field?: RelationsFormValue;\r\n  href: string;\r\n}\r\n\r\n/**\r\n * If it's in the connected array, it can get out of our data array,\r\n * we'll be putting it back in later and sorting it anyway.\r\n */\r\nconst removeConnected =\r\n  ({ field }: TransformationContext) =>\r\n  (relations: RelationResult[]) => {\r\n    return relations.filter((relation) => {\r\n      const connectedRelations = field?.connect ?? [];\r\n\r\n      return connectedRelations.findIndex((rel) => rel.id === relation.id) === -1;\r\n    });\r\n  };\r\n\r\n/**\r\n * @description Removes relations that are in the `disconnect` array of the field\r\n */\r\nconst removeDisconnected =\r\n  ({ field }: TransformationContext) =>\r\n  (relations: RelationResult[]): RelationResult[] =>\r\n    relations.filter((relation) => {\r\n      const disconnectedRelations = field?.disconnect ?? [];\r\n\r\n      return disconnectedRelations.findIndex((rel) => rel.id === relation.id) === -1;\r\n    });\r\n\r\n/**\r\n * @description Adds a label and href to the relation object we use this to render\r\n * a better UI where we can link to the relation and display a human-readable label.\r\n */\r\nconst addLabelAndHref =\r\n  ({ mainField, href }: TransformationContext) =>\r\n  (relations: RelationResult[]): Relation[] =>\r\n    relations.map((relation) => {\r\n      return {\r\n        ...relation,\r\n        // Fallback to `id` if there is no `mainField` value, which will overwrite the above `documentId` property with the exact same data.\r\n        [mainField?.name ?? 'documentId']: relation[mainField?.name ?? 'documentId'],\r\n        label: getRelationLabel(relation, mainField),\r\n        href: `${href}/${relation.documentId}?${relation.locale ? `plugins[i18n][locale]=${relation.locale}` : ''}`,\r\n      };\r\n    });\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RelationsInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface RelationsInputProps extends Omit<RelationsFieldProps, 'type'> {\r\n  id?: string;\r\n  model: string;\r\n  onChange: (\r\n    relation: Pick<RelationResult, 'documentId' | 'id' | 'locale' | 'status'> & {\r\n      [key: string]: any;\r\n    }\r\n  ) => void;\r\n}\r\n\r\n/**\r\n * @description Contains all the logic for the combobox that can search\r\n * for relations and then add them to the field's connect array.\r\n */\r\nconst RelationsInput = ({\r\n  hint,\r\n  id,\r\n  model,\r\n  label,\r\n  labelAction,\r\n  name,\r\n  mainField,\r\n  placeholder,\r\n  required,\r\n  unique: _unique,\r\n  'aria-label': _ariaLabel,\r\n  onChange,\r\n  ...props\r\n}: RelationsInputProps) => {\r\n  const [textValue, setTextValue] = React.useState<string | undefined>('');\r\n  const [searchParams, setSearchParams] = React.useState({\r\n    _q: '',\r\n    page: 1,\r\n  });\r\n  const { toggleNotification } = useNotification();\r\n  const [{ query }] = useQueryParams();\r\n\r\n  const { formatMessage } = useIntl();\r\n  const fieldRef = useFocusInputField<HTMLInputElement>(name);\r\n  const field = useField<RelationsFormValue>(name);\r\n\r\n  const [searchForTrigger, { data, isLoading }] = useLazySearchRelationsQuery();\r\n\r\n  /**\r\n   * Because we're using a lazy query, we need to trigger the search\r\n   * when the component mounts and when the search params change.\r\n   * We also need to trigger the search when the field value changes\r\n   * so that we can filter out the relations that are already connected.\r\n   */\r\n  React.useEffect(() => {\r\n    /**\r\n     * The `name` prop is a complete path to the field, e.g. `field1.field2.field3`.\r\n     * Where the above example would a nested field within two components, however\r\n     * we only require the field on the component not the complete path since we query\r\n     * individual components. Therefore we split the string and take the last item.\r\n     */\r\n    const [targetField] = name.split('.').slice(-1);\r\n\r\n    searchForTrigger({\r\n      model,\r\n      targetField,\r\n      params: {\r\n        ...buildValidParams(query),\r\n        id: id ?? '',\r\n        pageSize: 10,\r\n        idsToInclude: field.value?.disconnect?.map((rel) => rel.id.toString()) ?? [],\r\n        idsToOmit: field.value?.connect?.map((rel) => rel.id.toString()) ?? [],\r\n        ...searchParams,\r\n      },\r\n    });\r\n  }, [\r\n    field.value?.connect,\r\n    field.value?.disconnect,\r\n    id,\r\n    model,\r\n    name,\r\n    query,\r\n    searchForTrigger,\r\n    searchParams,\r\n  ]);\r\n\r\n  const handleSearch = async (search: string) => {\r\n    setSearchParams((s) => ({ ...s, _q: search, page: 1 }));\r\n  };\r\n\r\n  const hasNextPage = data?.pagination ? data.pagination.page < data.pagination.pageCount : false;\r\n\r\n  const options = data?.results ?? [];\r\n\r\n  const handleChange = (relationId?: string) => {\r\n    if (!relationId) {\r\n      return;\r\n    }\r\n\r\n    const relation = options.find((opt) => opt.id.toString() === relationId);\r\n\r\n    if (!relation) {\r\n      // This is very unlikely to happen, but it ensures we don't have any data for.\r\n      console.error(\r\n        \"You've tried to add a relation with an id that does not exist in the options you can see, this is likely a bug with Strapi. Please open an issue.\"\r\n      );\r\n\r\n      toggleNotification({\r\n        message: formatMessage({\r\n          id: getTranslation('relation.error-adding-relation'),\r\n          defaultMessage: 'An error occurred while trying to add the relation.',\r\n        }),\r\n        type: 'danger',\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * You need to give this relation a correct _temp_key_ but\r\n     * this component doesn't know about those ones, you can't rely\r\n     * on the connect array because that doesn't hold items that haven't\r\n     * moved. So use a callback to fill in the gaps when connecting.\r\n     *\r\n     */\r\n    onChange(relation);\r\n  };\r\n\r\n  const handleLoadMore = () => {\r\n    if (!data || !data.pagination) {\r\n      return;\r\n    } else if (data.pagination.page < data.pagination.pageCount) {\r\n      setSearchParams((s) => ({ ...s, page: s.page + 1 }));\r\n    }\r\n  };\r\n\r\n  React.useLayoutEffect(() => {\r\n    setTextValue('');\r\n  }, [field.value]);\r\n\r\n  return (\r\n    <Field.Root error={field.error} hint={hint} name={name} required={required}>\r\n      <Field.Label action={labelAction}>{label}</Field.Label>\r\n      <Combobox\r\n        ref={fieldRef}\r\n        name={name}\r\n        autocomplete=\"list\"\r\n        placeholder={\r\n          placeholder ||\r\n          formatMessage({\r\n            id: getTranslation('relation.add'),\r\n            defaultMessage: 'Add relation',\r\n          })\r\n        }\r\n        hasMoreItems={hasNextPage}\r\n        loading={isLoading}\r\n        onOpenChange={() => {\r\n          handleSearch(textValue ?? '');\r\n        }}\r\n        noOptionsMessage={() =>\r\n          formatMessage({\r\n            id: getTranslation('relation.notAvailable'),\r\n            defaultMessage: 'No relations available',\r\n          })\r\n        }\r\n        loadingMessage={formatMessage({\r\n          id: getTranslation('relation.isLoading'),\r\n          defaultMessage: 'Relations are loading',\r\n        })}\r\n        onLoadMore={handleLoadMore}\r\n        textValue={textValue}\r\n        onChange={handleChange}\r\n        onTextValueChange={(text) => {\r\n          setTextValue(text);\r\n        }}\r\n        onInputChange={(event) => {\r\n          handleSearch(event.currentTarget.value);\r\n        }}\r\n        {...props}\r\n      >\r\n        {options.map((opt) => {\r\n          const textValue = getRelationLabel(opt, mainField);\r\n\r\n          return (\r\n            <ComboboxOption key={opt.id} value={opt.id.toString()} textValue={textValue}>\r\n              <Flex gap={2} justifyContent=\"space-between\">\r\n                <Typography ellipsis>{textValue}</Typography>\r\n                {opt.status ? <DocumentStatus status={opt.status} /> : null}\r\n              </Flex>\r\n            </ComboboxOption>\r\n          );\r\n        })}\r\n      </Combobox>\r\n      <Field.Error />\r\n      <Field.Hint />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RelationsList\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst RELATION_ITEM_HEIGHT = 50;\r\nconst RELATION_GUTTER = 4;\r\n\r\ninterface RelationsListProps extends Pick<RelationsFieldProps, 'disabled' | 'name'> {\r\n  data: Relation[];\r\n  isLoading?: boolean;\r\n  relationType: Schema.Attribute.RelationKind.Any;\r\n  /**\r\n   * The existing relations connected on the server. We need these to diff against.\r\n   */\r\n  serverData: RelationResult[];\r\n}\r\n\r\nconst RelationsList = ({\r\n  data,\r\n  serverData,\r\n  disabled,\r\n  name,\r\n  isLoading,\r\n  relationType,\r\n}: RelationsListProps) => {\r\n  const ariaDescriptionId = React.useId();\r\n  const { formatMessage } = useIntl();\r\n  const listRef = React.useRef<FixedSizeList>(null);\r\n  const outerListRef = React.useRef<HTMLUListElement>(null);\r\n  const [overflow, setOverflow] = React.useState<'top' | 'bottom' | 'top-bottom'>();\r\n  const [liveText, setLiveText] = React.useState('');\r\n  const field = useField(name);\r\n\r\n  React.useEffect(() => {\r\n    if (data.length <= RELATIONS_TO_DISPLAY) {\r\n      return setOverflow(undefined);\r\n    }\r\n\r\n    const handleNativeScroll = (e: Event) => {\r\n      const el = e.target as HTMLUListElement;\r\n      const parentScrollContainerHeight = (el.parentNode as HTMLDivElement).scrollHeight;\r\n      const maxScrollBottom = el.scrollHeight - el.scrollTop;\r\n\r\n      if (el.scrollTop === 0) {\r\n        return setOverflow('bottom');\r\n      }\r\n\r\n      if (maxScrollBottom === parentScrollContainerHeight) {\r\n        return setOverflow('top');\r\n      }\r\n\r\n      return setOverflow('top-bottom');\r\n    };\r\n\r\n    const outerListRefCurrent = outerListRef?.current;\r\n\r\n    if (!isLoading && data.length > 0 && outerListRefCurrent) {\r\n      outerListRef.current.addEventListener('scroll', handleNativeScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (outerListRefCurrent) {\r\n        outerListRefCurrent.removeEventListener('scroll', handleNativeScroll);\r\n      }\r\n    };\r\n  }, [isLoading, data.length]);\r\n\r\n  const getItemPos = (index: number) => `${index + 1} of ${data.length}`;\r\n\r\n  const handleMoveItem: UseDragAndDropOptions['onMoveItem'] = (newIndex, oldIndex) => {\r\n    const item = data[oldIndex];\r\n\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: getTranslation('dnd.reorder'),\r\n          defaultMessage: '{item}, moved. New position in list: {position}.',\r\n        },\r\n        {\r\n          item: item.label ?? item.documentId,\r\n          position: getItemPos(newIndex),\r\n        }\r\n      )\r\n    );\r\n\r\n    /**\r\n     * Splicing mutates the array, so we need to create a new array\r\n     */\r\n    const newData = [...data];\r\n    const currentRow = data[oldIndex];\r\n\r\n    const startKey =\r\n      oldIndex > newIndex ? newData[newIndex - 1]?.__temp_key__ : newData[newIndex]?.__temp_key__;\r\n    const endKey =\r\n      oldIndex > newIndex ? newData[newIndex]?.__temp_key__ : newData[newIndex + 1]?.__temp_key__;\r\n\r\n    /**\r\n     * We're moving the relation between two other relations, so\r\n     * we need to generate a new key that keeps the order\r\n     */\r\n    const [newKey] = generateNKeysBetween(startKey, endKey, 1);\r\n\r\n    newData.splice(oldIndex, 1);\r\n    newData.splice(newIndex, 0, { ...currentRow, __temp_key__: newKey });\r\n\r\n    /**\r\n     * Now we diff against the server to understand what's different so we\r\n     * can keep the connect array nice and tidy. It also needs reversing because\r\n     * we reverse the relations from the server in the first place.\r\n     */\r\n    const connectedRelations = newData\r\n      .reduce<Relation[]>((acc, relation, currentIndex, array) => {\r\n        const relationOnServer = serverData.find((oldRelation) => oldRelation.id === relation.id);\r\n\r\n        const relationInFront = array[currentIndex + 1];\r\n\r\n        if (!relationOnServer || relationOnServer.__temp_key__ !== relation.__temp_key__) {\r\n          const position = relationInFront\r\n            ? {\r\n                before: relationInFront.documentId,\r\n                locale: relationInFront.locale,\r\n                status:\r\n                  'publishedAt' in relationInFront && relationInFront.publishedAt\r\n                    ? 'published'\r\n                    : 'draft',\r\n              }\r\n            : { end: true };\r\n\r\n          const relationWithPosition: Relation = {\r\n            ...relation,\r\n            ...{\r\n              apiData: {\r\n                id: relation.id,\r\n                documentId: relation.documentId,\r\n                locale: relation.locale,\r\n                position,\r\n              },\r\n            },\r\n          };\r\n\r\n          return [...acc, relationWithPosition];\r\n        }\r\n\r\n        return acc;\r\n      }, [])\r\n      .toReversed();\r\n\r\n    field.onChange(`${name}.connect`, connectedRelations);\r\n  };\r\n\r\n  const handleGrabItem: UseDragAndDropOptions['onGrabItem'] = (index) => {\r\n    const item = data[index];\r\n\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: getTranslation('dnd.grab-item'),\r\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\r\n        },\r\n        {\r\n          item: item.label ?? item.documentId,\r\n          position: getItemPos(index),\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDropItem: UseDragAndDropOptions['onDropItem'] = (index) => {\r\n    const { href: _href, label, ...item } = data[index];\r\n\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: getTranslation('dnd.drop-item'),\r\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\r\n        },\r\n        {\r\n          item: label ?? item.documentId,\r\n          position: getItemPos(index),\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCancel: UseDragAndDropOptions['onCancel'] = (index) => {\r\n    const item = data[index];\r\n\r\n    setLiveText(\r\n      formatMessage(\r\n        {\r\n          id: getTranslation('dnd.cancel-item'),\r\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\r\n        },\r\n        {\r\n          item: item.label ?? item.documentId,\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDisconnect = useHandleDisconnect(name, 'RelationsList');\r\n\r\n  /**\r\n   * These relation types will only ever have one item\r\n   * in their list, so you can't reorder a single item!\r\n   */\r\n  const canReorder = !ONE_WAY_RELATIONS.includes(relationType);\r\n\r\n  const dynamicListHeight =\r\n    data.length > RELATIONS_TO_DISPLAY\r\n      ? Math.min(data.length, RELATIONS_TO_DISPLAY) * (RELATION_ITEM_HEIGHT + RELATION_GUTTER) +\r\n        RELATION_ITEM_HEIGHT / 2\r\n      : Math.min(data.length, RELATIONS_TO_DISPLAY) * (RELATION_ITEM_HEIGHT + RELATION_GUTTER);\r\n\r\n  return (\r\n    <ShadowBox $overflowDirection={overflow}>\r\n      <VisuallyHidden id={ariaDescriptionId}>\r\n        {formatMessage({\r\n          id: getTranslation('dnd.instructions'),\r\n          defaultMessage: `Press spacebar to grab and re-order`,\r\n        })}\r\n      </VisuallyHidden>\r\n      <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\r\n      {/* @ts-expect-error – width is expected, but we've not needed to pass it before. */}\r\n      <FixedSizeList\r\n        height={dynamicListHeight}\r\n        ref={listRef}\r\n        outerRef={outerListRef}\r\n        itemCount={data.length}\r\n        itemSize={RELATION_ITEM_HEIGHT + RELATION_GUTTER}\r\n        itemData={{\r\n          ariaDescribedBy: ariaDescriptionId,\r\n          canDrag: canReorder,\r\n          disabled,\r\n          handleCancel,\r\n          handleDropItem,\r\n          handleGrabItem,\r\n          handleMoveItem,\r\n          name,\r\n          handleDisconnect,\r\n          relations: data,\r\n        }}\r\n        itemKey={(index) => data[index].id}\r\n        innerElementType=\"ol\"\r\n      >\r\n        {ListItem}\r\n      </FixedSizeList>\r\n    </ShadowBox>\r\n  );\r\n};\r\n\r\nconst ShadowBox = styled<BoxComponent>(Box)<{\r\n  $overflowDirection?: 'top-bottom' | 'top' | 'bottom';\r\n}>`\r\n  position: relative;\r\n  overflow: hidden;\r\n  flex: 1;\r\n\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 4px;\r\n    z-index: 1;\r\n  }\r\n\r\n  &:before {\r\n    /* TODO: as for DS Table component we would need this to be handled by the DS theme */\r\n    content: '';\r\n    background: linear-gradient(rgba(3, 3, 5, 0.2) 0%, rgba(0, 0, 0, 0) 100%);\r\n    top: 0;\r\n    opacity: ${({ $overflowDirection }) =>\r\n      $overflowDirection === 'top-bottom' || $overflowDirection === 'top' ? 1 : 0};\r\n    transition: opacity 0.2s ease-in-out;\r\n  }\r\n\r\n  &:after {\r\n    /* TODO: as for DS Table component we would need this to be handled by the DS theme */\r\n    content: '';\r\n    background: linear-gradient(0deg, rgba(3, 3, 5, 0.2) 0%, rgba(0, 0, 0, 0) 100%);\r\n    bottom: 0;\r\n    opacity: ${({ $overflowDirection }) =>\r\n      $overflowDirection === 'top-bottom' || $overflowDirection === 'bottom' ? 1 : 0};\r\n    transition: opacity 0.2s ease-in-out;\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ListItemProps extends Pick<ListChildComponentProps, 'style' | 'index'> {\r\n  data: {\r\n    ariaDescribedBy: string;\r\n    canDrag?: boolean;\r\n    disabled?: boolean;\r\n    handleCancel: UseDragAndDropOptions['onCancel'];\r\n    handleDropItem: UseDragAndDropOptions['onDropItem'];\r\n    handleGrabItem: UseDragAndDropOptions['onGrabItem'];\r\n    handleMoveItem: UseDragAndDropOptions['onMoveItem'];\r\n    handleDisconnect: (relation: Relation) => void;\r\n    name: string;\r\n    relations: Relation[];\r\n  };\r\n}\r\n\r\nconst ListItem = ({ data, index, style }: ListItemProps) => {\r\n  const {\r\n    ariaDescribedBy,\r\n    canDrag = false,\r\n    disabled = false,\r\n    handleCancel,\r\n    handleDisconnect,\r\n    handleDropItem,\r\n    handleGrabItem,\r\n    handleMoveItem,\r\n    name,\r\n    relations,\r\n  } = data;\r\n  const { formatMessage } = useIntl();\r\n\r\n  const { href, id, label, status } = relations[index];\r\n\r\n  const [{ handlerId, isDragging, handleKeyDown }, relationRef, dropRef, dragRef, dragPreviewRef] =\r\n    useDragAndDrop<number, Omit<RelationDragPreviewProps, 'width'>, HTMLDivElement>(\r\n      canDrag && !disabled,\r\n      {\r\n        type: `${ItemTypes.RELATION}_${name}`,\r\n        index,\r\n        item: {\r\n          displayedValue: label,\r\n          status,\r\n          id: id,\r\n          index,\r\n        },\r\n        onMoveItem: handleMoveItem,\r\n        onDropItem: handleDropItem,\r\n        onGrabItem: handleGrabItem,\r\n        onCancel: handleCancel,\r\n        dropSensitivity: DROP_SENSITIVITY.REGULAR,\r\n      }\r\n    );\r\n\r\n  const composedRefs = useComposedRefs<HTMLDivElement>(relationRef, dragRef);\r\n\r\n  React.useEffect(() => {\r\n    dragPreviewRef(getEmptyImage());\r\n  }, [dragPreviewRef]);\r\n\r\n  return (\r\n    <Box\r\n      style={style}\r\n      tag=\"li\"\r\n      ref={dropRef}\r\n      aria-describedby={ariaDescribedBy}\r\n      cursor={canDrag ? 'all-scroll' : 'default'}\r\n    >\r\n      {isDragging ? (\r\n        <RelationItemPlaceholder />\r\n      ) : (\r\n        <Flex\r\n          paddingTop={2}\r\n          paddingBottom={2}\r\n          paddingLeft={canDrag ? 2 : 4}\r\n          paddingRight={4}\r\n          hasRadius\r\n          borderColor=\"neutral200\"\r\n          background={disabled ? 'neutral150' : 'neutral0'}\r\n          justifyContent=\"space-between\"\r\n          ref={composedRefs}\r\n          data-handler-id={handlerId}\r\n        >\r\n          <FlexWrapper gap={1}>\r\n            {canDrag ? (\r\n              <IconButton\r\n                tag=\"div\"\r\n                role=\"button\"\r\n                tabIndex={0}\r\n                withTooltip={false}\r\n                label={formatMessage({\r\n                  id: getTranslation('components.RelationInput.icon-button-aria-label'),\r\n                  defaultMessage: 'Drag',\r\n                })}\r\n                variant=\"ghost\"\r\n                onKeyDown={handleKeyDown}\r\n                disabled={disabled}\r\n              >\r\n                <Drag />\r\n              </IconButton>\r\n            ) : null}\r\n            <Flex width=\"100%\" minWidth={0} justifyContent=\"space-between\">\r\n              <Box minWidth={0} paddingTop={1} paddingBottom={1} paddingRight={4}>\r\n                <Tooltip description={label}>\r\n                  {href ? (\r\n                    <LinkEllipsis tag={NavLink} to={href} isExternal={false}>\r\n                      {label}\r\n                    </LinkEllipsis>\r\n                  ) : (\r\n                    <Typography textColor={disabled ? 'neutral600' : 'primary600'} ellipsis>\r\n                      {label}\r\n                    </Typography>\r\n                  )}\r\n                </Tooltip>\r\n              </Box>\r\n              {status ? <DocumentStatus status={status} /> : null}\r\n            </Flex>\r\n          </FlexWrapper>\r\n          <Box paddingLeft={4}>\r\n            <IconButton\r\n              onClick={() => handleDisconnect(relations[index])}\r\n              disabled={disabled}\r\n              label={formatMessage({\r\n                id: getTranslation('relation.disconnect'),\r\n                defaultMessage: 'Remove',\r\n              })}\r\n              variant=\"ghost\"\r\n              size=\"S\"\r\n            >\r\n              <Cross />\r\n            </IconButton>\r\n          </Box>\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst FlexWrapper = styled<FlexComponent>(Flex)`\r\n  width: 100%;\r\n  /* Used to prevent endAction to be pushed out of container */\r\n  min-width: 0;\r\n\r\n  & > div[role='button'] {\r\n    cursor: all-scroll;\r\n  }\r\n`;\r\n\r\nconst DisconnectButton = styled.button`\r\n  svg path {\r\n    fill: ${({ theme, disabled }) =>\r\n      disabled ? theme.colors.neutral600 : theme.colors.neutral500};\r\n  }\r\n\r\n  &:hover svg path,\r\n  &:focus svg path {\r\n    fill: ${({ theme, disabled }) => !disabled && theme.colors.neutral600};\r\n  }\r\n`;\r\n\r\nconst LinkEllipsis = styled(Link)`\r\n  display: block;\r\n\r\n  & > span {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst RelationItemPlaceholder = () => (\r\n  <Box\r\n    paddingTop={2}\r\n    paddingBottom={2}\r\n    paddingLeft={4}\r\n    paddingRight={4}\r\n    hasRadius\r\n    borderStyle=\"dashed\"\r\n    borderColor=\"primary600\"\r\n    borderWidth=\"1px\"\r\n    background=\"primary100\"\r\n    height={`calc(100% - ${RELATION_GUTTER}px)`}\r\n  />\r\n);\r\n\r\nconst MemoizedRelationsField = React.memo(RelationsField);\r\n\r\nexport { MemoizedRelationsField as RelationsInput, FlexWrapper, DisconnectButton, LinkEllipsis };\r\nexport type { RelationsFieldProps };\r\n"],"names":["id","textValue"],"mappings":"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"}