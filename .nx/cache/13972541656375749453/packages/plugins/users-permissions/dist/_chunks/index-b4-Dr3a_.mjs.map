{"version":3,"file":"index-b4-Dr3a_.mjs","sources":["../../admin/src/components/FormModal/Input/index.jsx","../../admin/src/components/FormModal/index.jsx","../../admin/src/pages/Providers/utils/forms.js","../../admin/src/pages/Providers/index.jsx"],"sourcesContent":["/**\r\n *\r\n * Input\r\n *\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { TextInput, Toggle, Field } from '@strapi/design-system';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst Input = ({\r\n  description,\r\n  disabled,\r\n  intlLabel,\r\n  error,\r\n  name,\r\n  onChange,\r\n  placeholder,\r\n  providerToEditName,\r\n  type,\r\n  value,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n  const inputValue =\r\n    name === 'noName'\r\n      ? `${window.strapi.backendURL}/api/connect/${providerToEditName}/callback`\r\n      : value;\r\n\r\n  const label = formatMessage(\r\n    { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n    { provider: providerToEditName, ...intlLabel.values }\r\n  );\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { provider: providerToEditName, ...description.values }\r\n      )\r\n    : '';\r\n\r\n  if (type === 'bool') {\r\n    return (\r\n      <Field.Root hint={hint} name={name}>\r\n        <Field.Label>{label}</Field.Label>\r\n        <Toggle\r\n          aria-label={name}\r\n          checked={value}\r\n          disabled={disabled}\r\n          offLabel={formatMessage({\r\n            id: 'app.components.ToggleCheckbox.off-label',\r\n            defaultMessage: 'Off',\r\n          })}\r\n          onLabel={formatMessage({\r\n            id: 'app.components.ToggleCheckbox.on-label',\r\n            defaultMessage: 'On',\r\n          })}\r\n          onChange={(e) => {\r\n            onChange({ target: { name, value: e.target.checked } });\r\n          }}\r\n        />\r\n        <Field.Hint />\r\n      </Field.Root>\r\n    );\r\n  }\r\n\r\n  const formattedPlaceholder = placeholder\r\n    ? formatMessage(\r\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\r\n        { ...placeholder.values }\r\n      )\r\n    : '';\r\n\r\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\r\n\r\n  return (\r\n    <Field.Root error={errorMessage} name={name}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <TextInput\r\n        disabled={disabled}\r\n        onChange={onChange}\r\n        placeholder={formattedPlaceholder}\r\n        type={type}\r\n        value={inputValue}\r\n      />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nInput.defaultProps = {\r\n  description: null,\r\n  disabled: false,\r\n  error: '',\r\n  placeholder: null,\r\n  value: '',\r\n};\r\n\r\nInput.propTypes = {\r\n  description: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    defaultMessage: PropTypes.string.isRequired,\r\n    values: PropTypes.object,\r\n  }),\r\n  disabled: PropTypes.bool,\r\n  error: PropTypes.string,\r\n  intlLabel: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    defaultMessage: PropTypes.string.isRequired,\r\n    values: PropTypes.object,\r\n  }).isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    defaultMessage: PropTypes.string.isRequired,\r\n    values: PropTypes.object,\r\n  }),\r\n  providerToEditName: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  value: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n};\r\n\r\nexport default Input;\r\n","/**\r\n *\r\n * FormModal\r\n *\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { Button, Flex, Grid, Modal, Breadcrumbs, Crumb } from '@strapi/design-system';\r\nimport { Form, Formik } from 'formik';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport Input from './Input';\r\n\r\nconst FormModal = ({\r\n  headerBreadcrumbs,\r\n  initialData,\r\n  isSubmiting,\r\n  layout,\r\n  isOpen,\r\n  onSubmit,\r\n  onToggle,\r\n  providerToEditName,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Modal.Root open={isOpen} onOpenChange={onToggle}>\r\n      <Modal.Content>\r\n        <Modal.Header>\r\n          <Breadcrumbs label={headerBreadcrumbs.join(', ')}>\r\n            {headerBreadcrumbs.map((crumb, index, arr) => (\r\n              <Crumb isCurrent={index === arr.length - 1} key={crumb}>\r\n                {crumb}\r\n              </Crumb>\r\n            ))}\r\n          </Breadcrumbs>\r\n        </Modal.Header>\r\n        <Formik\r\n          onSubmit={(values) => onSubmit(values)}\r\n          initialValues={initialData}\r\n          validationSchema={layout.schema}\r\n          validateOnChange={false}\r\n        >\r\n          {({ errors, handleChange, values }) => {\r\n            return (\r\n              <Form>\r\n                <Modal.Body>\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n                    <Grid.Root gap={5}>\r\n                      {layout.form.map((row) => {\r\n                        return row.map((input) => {\r\n                          return (\r\n                            <Grid.Item\r\n                              key={input.name}\r\n                              col={input.size}\r\n                              xs={12}\r\n                              direction=\"column\"\r\n                              alignItems=\"stretch\"\r\n                            >\r\n                              <Input\r\n                                {...input}\r\n                                error={errors[input.name]}\r\n                                onChange={handleChange}\r\n                                value={values[input.name]}\r\n                                providerToEditName={providerToEditName}\r\n                              />\r\n                            </Grid.Item>\r\n                          );\r\n                        });\r\n                      })}\r\n                    </Grid.Root>\r\n                  </Flex>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\r\n                    {formatMessage({\r\n                      id: 'app.components.Button.cancel',\r\n                      defaultMessage: 'Cancel',\r\n                    })}\r\n                  </Button>\r\n                  <Button type=\"submit\" loading={isSubmiting}>\r\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nFormModal.defaultProps = {\r\n  initialData: null,\r\n  providerToEditName: null,\r\n};\r\n\r\nFormModal.propTypes = {\r\n  headerBreadcrumbs: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  initialData: PropTypes.object,\r\n  layout: PropTypes.shape({\r\n    form: PropTypes.arrayOf(PropTypes.array),\r\n    schema: PropTypes.object,\r\n  }).isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  isSubmiting: PropTypes.bool.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n  providerToEditName: PropTypes.string,\r\n};\r\n\r\nexport default FormModal;\r\n","import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils';\n\nconst callbackLabel = {\n  id: getTrad('PopUpForm.Providers.redirectURL.front-end.label'),\n  defaultMessage: 'The redirect URL to your front-end app',\n};\nconst callbackPlaceholder = {\n  id: 'http://www.client-app.com',\n  defaultMessage: 'http://www.client-app.com',\n};\nconst enabledDescription = {\n  id: getTrad('PopUpForm.Providers.enabled.description'),\n  defaultMessage: \"If disabled, users won't be able to use this provider.\",\n};\nconst enabledLabel = {\n  id: getTrad('PopUpForm.Providers.enabled.label'),\n  defaultMessage: 'Enable',\n};\nconst keyLabel = { id: getTrad('PopUpForm.Providers.key.label'), defaultMessage: 'Client ID' };\nconst hintLabel = {\n  id: getTrad('PopUpForm.Providers.redirectURL.label'),\n  defaultMessage: 'The redirect URL to add in your {provider} application configurations',\n};\nconst textPlaceholder = {\n  id: getTrad('PopUpForm.Providers.key.placeholder'),\n  defaultMessage: 'TEXT',\n};\n\nconst secretLabel = {\n  id: getTrad('PopUpForm.Providers.secret.label'),\n  defaultMessage: 'Client Secret',\n};\n\nconst CALLBACK_REGEX = /^$|^[a-z][a-z0-9+.-]*:\\/\\/[^\\s/$.?#](?:[^\\s]*[^\\s/$.?#])?$/i;\nconst SUBDOMAIN_REGEX = /^(([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+)(:\\d+)?(\\/\\S*)?$/i;\n\nconst forms = {\n  email: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          // TODO check if still needed\n          // validations: {\n          //   required: true,\n          // },\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required.id),\n    }),\n  },\n  providers: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: keyLabel,\n          name: 'key',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: secretLabel,\n          name: 'secret',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: callbackLabel,\n          placeholder: callbackPlaceholder,\n          name: 'callback',\n          type: 'text',\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: hintLabel,\n          name: 'noName',\n          type: 'text',\n          validations: {},\n          size: 12,\n          disabled: true,\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required.id),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup\n          .string()\n          .matches(CALLBACK_REGEX, translatedErrors.regex.id)\n          .required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n    }),\n  },\n  providersWithSubdomain: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: keyLabel,\n          name: 'key',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: secretLabel,\n          name: 'secret',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: {\n            id: getTrad({ id: 'PopUpForm.Providers.jwksurl.label' }),\n            defaultMessage: 'JWKS URL',\n          },\n          name: 'jwksurl',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: false,\n          },\n        },\n      ],\n\n      [\n        {\n          intlLabel: {\n            id: getTrad('PopUpForm.Providers.subdomain.label'),\n            defaultMessage: 'Host URI (Subdomain)',\n          },\n          name: 'subdomain',\n          type: 'text',\n          placeholder: {\n            id: getTrad('PopUpForm.Providers.subdomain.placeholder'),\n            defaultMessage: 'my.subdomain.com',\n          },\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: callbackLabel,\n          placeholder: callbackPlaceholder,\n          name: 'callback',\n          type: 'text',\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: hintLabel,\n          name: 'noName',\n          type: 'text',\n          validations: {},\n          size: 12,\n          disabled: true,\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required.id),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      subdomain: yup.string().when('enabled', {\n        is: true,\n        then: yup\n          .string()\n          .matches(SUBDOMAIN_REGEX, translatedErrors.regex.id)\n          .required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup\n          .string()\n          .matches(CALLBACK_REGEX, translatedErrors.regex.id)\n          .required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n    }),\n  },\n};\n\nexport default forms;\n","import * as React from 'react';\r\n\r\nimport { useTracking, Layouts } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  IconButton,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n  useCollator,\r\n} from '@strapi/design-system';\r\nimport { Pencil } from '@strapi/icons';\r\nimport {\r\n  Page,\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useFetchClient,\r\n  useRBAC,\r\n} from '@strapi/strapi/admin';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\r\n\r\nimport FormModal from '../../components/FormModal';\r\nimport { PERMISSIONS } from '../../constants';\r\nimport { getTrad } from '../../utils';\r\n\r\nimport forms from './utils/forms';\r\n\r\nexport const ProvidersPage = () => {\r\n  const { formatMessage, locale } = useIntl();\r\n  const queryClient = useQueryClient();\r\n  const { trackUsage } = useTracking();\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [providerToEditName, setProviderToEditName] = React.useState(null);\r\n  const { toggleNotification } = useNotification();\r\n  const { get, put } = useFetchClient();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const {\r\n    isLoading: isLoadingPermissions,\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC({ update: PERMISSIONS.updateProviders });\r\n\r\n  const { isLoading: isLoadingData, data } = useQuery(\r\n    ['users-permissions', 'get-providers'],\r\n    async () => {\r\n      const { data } = await get('/users-permissions/providers');\r\n\r\n      return data;\r\n    },\r\n    {\r\n      initialData: {},\r\n    }\r\n  );\r\n\r\n  const submitMutation = useMutation((body) => put('/users-permissions/providers', body), {\r\n    async onSuccess() {\r\n      await queryClient.invalidateQueries(['users-permissions', 'get-providers']);\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: getTrad('notification.success.submit') }),\r\n      });\r\n\r\n      trackUsage('didEditAuthenticationProvider');\r\n\r\n      handleToggleModal();\r\n    },\r\n    onError(error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    },\r\n    refetchActive: false,\r\n  });\r\n\r\n  const providers = Object.entries(data)\r\n    .reduce((acc, [name, provider]) => {\r\n      const { icon, enabled, subdomain } = provider;\r\n\r\n      acc.push({\r\n        name,\r\n        icon: icon === 'envelope' ? ['fas', 'envelope'] : ['fab', icon],\r\n        enabled,\r\n        subdomain,\r\n      });\r\n\r\n      return acc;\r\n    }, [])\r\n    .sort((a, b) => formatter.compare(a.name, b.name));\r\n\r\n  const isLoading = isLoadingData || isLoadingPermissions;\r\n\r\n  const isProviderWithSubdomain = React.useMemo(() => {\r\n    if (!providerToEditName) {\r\n      return false;\r\n    }\r\n\r\n    const providerToEdit = providers.find((obj) => obj.name === providerToEditName);\r\n\r\n    return !!providerToEdit?.subdomain;\r\n  }, [providers, providerToEditName]);\r\n\r\n  const layoutToRender = React.useMemo(() => {\r\n    if (providerToEditName === 'email') {\r\n      return forms.email;\r\n    }\r\n\r\n    if (isProviderWithSubdomain) {\r\n      return forms.providersWithSubdomain;\r\n    }\r\n\r\n    return forms.providers;\r\n  }, [providerToEditName, isProviderWithSubdomain]);\r\n\r\n  const handleToggleModal = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleClickEdit = (provider) => {\r\n    if (canUpdate) {\r\n      setProviderToEditName(provider.name);\r\n      handleToggleModal();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values) => {\r\n    trackUsage('willEditAuthenticationProvider');\r\n\r\n    submitMutation.mutate({ providers: { ...data, [providerToEditName]: values } });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: formatMessage({\r\n              id: getTrad('HeaderNav.link.providers'),\r\n              defaultMessage: 'Providers',\r\n            }),\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main>\r\n        <Layouts.Header\r\n          title={formatMessage({\r\n            id: getTrad('HeaderNav.link.providers'),\r\n            defaultMessage: 'Providers',\r\n          })}\r\n        />\r\n        <Layouts.Content>\r\n          <Table colCount={3} rowCount={providers.length + 1}>\r\n            <Thead>\r\n              <Tr>\r\n                <Th>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                    {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\r\n                  </Typography>\r\n                </Th>\r\n                <Th>\r\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                    {formatMessage({ id: getTrad('Providers.status'), defaultMessage: 'Status' })}\r\n                  </Typography>\r\n                </Th>\r\n                <Th>\r\n                  <Typography variant=\"sigma\">\r\n                    <VisuallyHidden>\r\n                      {formatMessage({\r\n                        id: 'global.settings',\r\n                        defaultMessage: 'Settings',\r\n                      })}\r\n                    </VisuallyHidden>\r\n                  </Typography>\r\n                </Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {providers.map((provider) => (\r\n                <Tr\r\n                  key={provider.name}\r\n                  onClick={() => (canUpdate ? handleClickEdit(provider) : undefined)}\r\n                >\r\n                  <Td width=\"45%\">\r\n                    <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\r\n                      {provider.name}\r\n                    </Typography>\r\n                  </Td>\r\n                  <Td width=\"65%\">\r\n                    <Typography\r\n                      textColor={provider.enabled ? 'success600' : 'danger600'}\r\n                      data-testid={`enable-${provider.name}`}\r\n                    >\r\n                      {provider.enabled\r\n                        ? formatMessage({\r\n                            id: 'global.enabled',\r\n                            defaultMessage: 'Enabled',\r\n                          })\r\n                        : formatMessage({\r\n                            id: 'global.disabled',\r\n                            defaultMessage: 'Disabled',\r\n                          })}\r\n                    </Typography>\r\n                  </Td>\r\n                  <Td onClick={(e) => e.stopPropagation()}>\r\n                    {canUpdate && (\r\n                      <IconButton\r\n                        onClick={() => handleClickEdit(provider)}\r\n                        variant=\"ghost\"\r\n                        label=\"Edit\"\r\n                      >\r\n                        <Pencil />\r\n                      </IconButton>\r\n                    )}\r\n                  </Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </Table>\r\n        </Layouts.Content>\r\n      </Page.Main>\r\n      <FormModal\r\n        initialData={data[providerToEditName]}\r\n        isOpen={isOpen}\r\n        isSubmiting={submitMutation.isLoading}\r\n        layout={layoutToRender}\r\n        headerBreadcrumbs={[\r\n          formatMessage({\r\n            id: getTrad('PopUpForm.header.edit.providers'),\r\n            defaultMessage: 'Edit Provider',\r\n          }),\r\n          upperFirst(providerToEditName),\r\n        ]}\r\n        onToggle={handleToggleModal}\r\n        onSubmit={handleSubmit}\r\n        providerToEditName={providerToEditName}\r\n      />\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\nconst ProtectedProvidersPage = () => (\r\n  <Page.Protect permissions={PERMISSIONS.readProviders}>\r\n    <ProvidersPage />\r\n  </Page.Protect>\r\n);\r\n\r\nexport default ProtectedProvidersPage;\r\n"],"names":["data"],"mappings":";;;;;;;;;;;;;;AAYA,MAAM,QAAQ,CAAC;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACE,QAAA,EAAE,cAAc,IAAI,QAAQ;AAC5B,QAAA,aACJ,SAAS,WACL,GAAG,OAAO,OAAO,UAAU,gBAAgB,kBAAkB,cAC7D;AAEN,QAAM,QAAQ;AAAA,IACZ,EAAE,IAAI,UAAU,IAAI,gBAAgB,UAAU,eAAe;AAAA,IAC7D,EAAE,UAAU,oBAAoB,GAAG,UAAU,OAAO;AAAA,EACtD;AACA,QAAM,OAAO,cACT;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,UAAU,oBAAoB,GAAG,YAAY,OAAO;AAAA,EAAA,IAExD;AAEJ,MAAI,SAAS,QAAQ;AACnB,WACG,qBAAA,MAAM,MAAN,EAAW,MAAY,MACtB,UAAA;AAAA,MAAC,oBAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,MACpB;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,cAAY;AAAA,UACZ,SAAS;AAAA,UACT;AAAA,UACA,UAAU,cAAc;AAAA,YACtB,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAAA,CACjB;AAAA,UACD,SAAS,cAAc;AAAA,YACrB,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAAA,CACjB;AAAA,UACD,UAAU,CAAC,MAAM;AACN,qBAAA,EAAE,QAAQ,EAAE,MAAM,OAAO,EAAE,OAAO,QAAQ,GAAG;AAAA,UAAA;AAAA,QACxD;AAAA,MACF;AAAA,MACA,oBAAC,MAAM,MAAN,CAAW,CAAA;AAAA,IAAA,GACd;AAAA,EAAA;AAIJ,QAAM,uBAAuB,cACzB;AAAA,IACE,EAAE,IAAI,YAAY,IAAI,gBAAgB,YAAY,eAAe;AAAA,IACjE,EAAE,GAAG,YAAY,OAAO;AAAA,EAAA,IAE1B;AAEE,QAAA,eAAe,QAAQ,cAAc,EAAE,IAAI,OAAO,gBAAgB,MAAO,CAAA,IAAI;AAEnF,8BACG,MAAM,MAAN,EAAW,OAAO,cAAc,MAC/B,UAAA;AAAA,IAAC,oBAAA,MAAM,OAAN,EAAa,UAAM,MAAA,CAAA;AAAA,IACpB;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA,aAAa;AAAA,QACb;AAAA,QACA,OAAO;AAAA,MAAA;AAAA,IACT;AAAA,IACA,oBAAC,MAAM,OAAN,CAAY,CAAA;AAAA,EAAA,GACf;AAEJ;AAEA,MAAM,eAAe;AAAA,EACnB,aAAa;AAAA,EACb,UAAU;AAAA,EACV,OAAO;AAAA,EACP,aAAa;AAAA,EACb,OAAO;AACT;AAEA,MAAM,YAAY;AAAA,EAChB,aAAa,UAAU,MAAM;AAAA,IAC3B,IAAI,UAAU,OAAO;AAAA,IACrB,gBAAgB,UAAU,OAAO;AAAA,IACjC,QAAQ,UAAU;AAAA,EAAA,CACnB;AAAA,EACD,UAAU,UAAU;AAAA,EACpB,OAAO,UAAU;AAAA,EACjB,WAAW,UAAU,MAAM;AAAA,IACzB,IAAI,UAAU,OAAO;AAAA,IACrB,gBAAgB,UAAU,OAAO;AAAA,IACjC,QAAQ,UAAU;AAAA,EACnB,CAAA,EAAE;AAAA,EACH,MAAM,UAAU,OAAO;AAAA,EACvB,UAAU,UAAU,KAAK;AAAA,EACzB,aAAa,UAAU,MAAM;AAAA,IAC3B,IAAI,UAAU,OAAO;AAAA,IACrB,gBAAgB,UAAU,OAAO;AAAA,IACjC,QAAQ,UAAU;AAAA,EAAA,CACnB;AAAA,EACD,oBAAoB,UAAU,OAAO;AAAA,EACrC,MAAM,UAAU,OAAO;AAAA,EACvB,OAAO,UAAU,UAAU,CAAC,UAAU,MAAM,UAAU,MAAM,CAAC;AAC/D;AC1GA,MAAM,YAAY,CAAC;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACE,QAAA,EAAE,cAAc,IAAI,QAAQ;AAGhC,SAAA,oBAAC,MAAM,MAAN,EAAW,MAAM,QAAQ,cAAc,UACtC,UAAA,qBAAC,MAAM,SAAN,EACC,UAAA;AAAA,IAAC,oBAAA,MAAM,QAAN,EACC,UAAC,oBAAA,aAAA,EAAY,OAAO,kBAAkB,KAAK,IAAI,GAC5C,UAAA,kBAAkB,IAAI,CAAC,OAAO,OAAO,QACpC,oBAAC,OAAM,EAAA,WAAW,UAAU,IAAI,SAAS,GACtC,UAD8C,MAAA,GAAA,KAEjD,CACD,EACH,CAAA,GACF;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAU,CAAC,WAAW,SAAS,MAAM;AAAA,QACrC,eAAe;AAAA,QACf,kBAAkB,OAAO;AAAA,QACzB,kBAAkB;AAAA,QAEjB,UAAC,CAAA,EAAE,QAAQ,cAAc,aAAa;AACrC,sCACG,MACC,EAAA,UAAA;AAAA,YAAC,oBAAA,MAAM,MAAN,EACC,UAAA,oBAAC,QAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAC,oBAAA,KAAK,MAAL,EAAU,KAAK,GACb,UAAO,OAAA,KAAK,IAAI,CAAC,QAAQ;AACjB,qBAAA,IAAI,IAAI,CAAC,UAAU;AAEtB,uBAAA;AAAA,kBAAC,KAAK;AAAA,kBAAL;AAAA,oBAEC,KAAK,MAAM;AAAA,oBACX,IAAI;AAAA,oBACJ,WAAU;AAAA,oBACV,YAAW;AAAA,oBAEX,UAAA;AAAA,sBAAC;AAAA,sBAAA;AAAA,wBACE,GAAG;AAAA,wBACJ,OAAO,OAAO,MAAM,IAAI;AAAA,wBACxB,UAAU;AAAA,wBACV,OAAO,OAAO,MAAM,IAAI;AAAA,wBACxB;AAAA,sBAAA;AAAA,oBAAA;AAAA,kBACF;AAAA,kBAZK,MAAM;AAAA,gBAab;AAAA,cAAA,CAEH;AAAA,YAAA,CACF,EACH,CAAA,EACF,CAAA,GACF;AAAA,YACA,qBAAC,MAAM,QAAN,EACC,UAAA;AAAA,cAAA,oBAAC,UAAO,SAAQ,YAAW,SAAS,UAAU,MAAK,UAChD,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cACjB,CAAA,GACH;AAAA,cACC,oBAAA,QAAA,EAAO,MAAK,UAAS,SAAS,aAC5B,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAQ,CAAA,EAC9D,CAAA;AAAA,YAAA,EACF,CAAA;AAAA,UAAA,GACF;AAAA,QAAA;AAAA,MAEJ;AAAA,IAAA;AAAA,EACF,EAAA,CACF,EACF,CAAA;AAEJ;AAEA,UAAU,eAAe;AAAA,EACvB,aAAa;AAAA,EACb,oBAAoB;AACtB;AAEA,UAAU,YAAY;AAAA,EACpB,mBAAmB,UAAU,QAAQ,UAAU,MAAM,EAAE;AAAA,EACvD,aAAa,UAAU;AAAA,EACvB,QAAQ,UAAU,MAAM;AAAA,IACtB,MAAM,UAAU,QAAQ,UAAU,KAAK;AAAA,IACvC,QAAQ,UAAU;AAAA,EACnB,CAAA,EAAE;AAAA,EACH,QAAQ,UAAU,KAAK;AAAA,EACvB,aAAa,UAAU,KAAK;AAAA,EAC5B,UAAU,UAAU,KAAK;AAAA,EACzB,UAAU,UAAU,KAAK;AAAA,EACzB,oBAAoB,UAAU;AAChC;AC3GA,MAAM,gBAAgB;AAAA,EACpB,IAAI,QAAQ,iDAAiD;AAAA,EAC7D,gBAAgB;AAClB;AACA,MAAM,sBAAsB;AAAA,EAC1B,IAAI;AAAA,EACJ,gBAAgB;AAClB;AACA,MAAM,qBAAqB;AAAA,EACzB,IAAI,QAAQ,yCAAyC;AAAA,EACrD,gBAAgB;AAClB;AACA,MAAM,eAAe;AAAA,EACnB,IAAI,QAAQ,mCAAmC;AAAA,EAC/C,gBAAgB;AAClB;AACA,MAAM,WAAW,EAAE,IAAI,QAAQ,+BAA+B,GAAG,gBAAgB,YAAa;AAC9F,MAAM,YAAY;AAAA,EAChB,IAAI,QAAQ,uCAAuC;AAAA,EACnD,gBAAgB;AAClB;AACA,MAAM,kBAAkB;AAAA,EACtB,IAAI,QAAQ,qCAAqC;AAAA,EACjD,gBAAgB;AAClB;AAEA,MAAM,cAAc;AAAA,EAClB,IAAI,QAAQ,kCAAkC;AAAA,EAC9C,gBAAgB;AAClB;AAEA,MAAM,iBAAiB;AACvB,MAAM,kBAAkB;AAExB,MAAM,QAAQ;AAAA,EACZ,OAAO;AAAA,IACL,MAAM;AAAA,MACJ;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,QAKP;AAAA,MACF;AAAA,IACF;AAAA,IACD,QAAQ,IAAI,OAAQ,EAAC,MAAM;AAAA,MACzB,SAAS,IAAI,KAAM,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,IAC/D,CAAK;AAAA,EACF;AAAA,EACD,WAAW;AAAA,IACT,MAAM;AAAA,MACJ;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa,CAAE;AAAA,UACf,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACD,QAAQ,IAAI,OAAQ,EAAC,MAAM;AAAA,MACzB,SAAS,IAAI,KAAM,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,MACzD,KAAK,IAAI,SAAS,KAAK,WAAW;AAAA,QAChC,IAAI;AAAA,QACJ,MAAM,IAAI,OAAQ,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxD,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,MACD,QAAQ,IAAI,SAAS,KAAK,WAAW;AAAA,QACnC,IAAI;AAAA,QACJ,MAAM,IAAI,OAAQ,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxD,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,MACD,UAAU,IAAI,SAAS,KAAK,WAAW;AAAA,QACrC,IAAI;AAAA,QACJ,MAAM,IACH,OAAM,EACN,QAAQ,gBAAgB,iBAAiB,MAAM,EAAE,EACjD,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxC,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,IACP,CAAK;AAAA,EACF;AAAA,EACD,wBAAwB;AAAA,IACtB,MAAM;AAAA,MACJ;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,YACT,IAAI,QAAQ,EAAE,IAAI,oCAAmC,CAAE;AAAA,YACvD,gBAAgB;AAAA,UACjB;AAAA,UACD,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MAED;AAAA,QACE;AAAA,UACE,WAAW;AAAA,YACT,IAAI,QAAQ,qCAAqC;AAAA,YACjD,gBAAgB;AAAA,UACjB;AAAA,UACD,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,YACX,IAAI,QAAQ,2CAA2C;AAAA,YACvD,gBAAgB;AAAA,UACjB;AAAA,UACD,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,YACX,UAAU;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACD;AAAA,QACE;AAAA,UACE,WAAW;AAAA,UACX,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa,CAAE;AAAA,UACf,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACD,QAAQ,IAAI,OAAQ,EAAC,MAAM;AAAA,MACzB,SAAS,IAAI,KAAM,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,MACzD,KAAK,IAAI,SAAS,KAAK,WAAW;AAAA,QAChC,IAAI;AAAA,QACJ,MAAM,IAAI,OAAQ,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxD,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,MACD,QAAQ,IAAI,SAAS,KAAK,WAAW;AAAA,QACnC,IAAI;AAAA,QACJ,MAAM,IAAI,OAAQ,EAAC,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxD,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,MACD,WAAW,IAAI,SAAS,KAAK,WAAW;AAAA,QACtC,IAAI;AAAA,QACJ,MAAM,IACH,OAAM,EACN,QAAQ,iBAAiB,iBAAiB,MAAM,EAAE,EAClD,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxC,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,MACD,UAAU,IAAI,SAAS,KAAK,WAAW;AAAA,QACrC,IAAI;AAAA,QACJ,MAAM,IACH,OAAM,EACN,QAAQ,gBAAgB,iBAAiB,MAAM,EAAE,EACjD,SAAS,iBAAiB,SAAS,EAAE;AAAA,QACxC,WAAW,IAAI,OAAQ;AAAA,MAC/B,CAAO;AAAA,IACP,CAAK;AAAA,EACF;AACH;AC3OO,MAAM,gBAAgB,MAAM;AACjC,QAAM,EAAE,eAAe,OAAO,IAAI,QAAQ;AAC1C,QAAM,cAAc,eAAe;AAC7B,QAAA,EAAE,WAAW,IAAI,YAAY;AACnC,QAAM,CAAC,QAAQ,SAAS,IAAI,MAAM,SAAS,KAAK;AAChD,QAAM,CAAC,oBAAoB,qBAAqB,IAAI,MAAM,SAAS,IAAI;AACjE,QAAA,EAAE,mBAAmB,IAAI,gBAAgB;AAC/C,QAAM,EAAE,KAAK,IAAI,IAAI,eAAe;AAC9B,QAAA,EAAE,eAAe,IAAI,mBAAmB;AACxC,QAAA,YAAY,YAAY,QAAQ;AAAA,IACpC,aAAa;AAAA,EAAA,CACd;AAEK,QAAA;AAAA,IACJ,WAAW;AAAA,IACX,gBAAgB,EAAE,UAAU;AAAA,MAC1B,QAAQ,EAAE,QAAQ,YAAY,iBAAiB;AAEnD,QAAM,EAAE,WAAW,eAAe,KAAS,IAAA;AAAA,IACzC,CAAC,qBAAqB,eAAe;AAAA,IACrC,YAAY;AACV,YAAM,EAAE,MAAAA,MAAS,IAAA,MAAM,IAAI,8BAA8B;AAElDA,aAAAA;AAAAA,IACT;AAAA,IACA;AAAA,MACE,aAAa,CAAA;AAAA,IAAC;AAAA,EAElB;AAEA,QAAM,iBAAiB,YAAY,CAAC,SAAS,IAAI,gCAAgC,IAAI,GAAG;AAAA,IACtF,MAAM,YAAY;AAChB,YAAM,YAAY,kBAAkB,CAAC,qBAAqB,eAAe,CAAC;AAEvD,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc,EAAE,IAAI,QAAQ,6BAA6B,EAAG,CAAA;AAAA,MAAA,CACtE;AAED,iBAAW,+BAA+B;AAExB,wBAAA;AAAA,IACpB;AAAA,IACA,QAAQ,OAAO;AACM,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,KAAK;AAAA,MAAA,CAC9B;AAAA,IACH;AAAA,IACA,eAAe;AAAA,EAAA,CAChB;AAEK,QAAA,YAAY,OAAO,QAAQ,IAAI,EAClC,OAAO,CAAC,KAAK,CAAC,MAAM,QAAQ,MAAM;AACjC,UAAM,EAAE,MAAM,SAAS,UAAc,IAAA;AAErC,QAAI,KAAK;AAAA,MACP;AAAA,MACA,MAAM,SAAS,aAAa,CAAC,OAAO,UAAU,IAAI,CAAC,OAAO,IAAI;AAAA,MAC9D;AAAA,MACA;AAAA,IAAA,CACD;AAEM,WAAA;AAAA,EACN,GAAA,EAAE,EACJ,KAAK,CAAC,GAAG,MAAM,UAAU,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC;AAEnD,QAAM,YAAY,iBAAiB;AAE7B,QAAA,0BAA0B,MAAM,QAAQ,MAAM;AAClD,QAAI,CAAC,oBAAoB;AAChB,aAAA;AAAA,IAAA;AAGT,UAAM,iBAAiB,UAAU,KAAK,CAAC,QAAQ,IAAI,SAAS,kBAAkB;AAEvE,WAAA,CAAC,CAAC,gBAAgB;AAAA,EAAA,GACxB,CAAC,WAAW,kBAAkB,CAAC;AAE5B,QAAA,iBAAiB,MAAM,QAAQ,MAAM;AACzC,QAAI,uBAAuB,SAAS;AAClC,aAAO,MAAM;AAAA,IAAA;AAGf,QAAI,yBAAyB;AAC3B,aAAO,MAAM;AAAA,IAAA;AAGf,WAAO,MAAM;AAAA,EAAA,GACZ,CAAC,oBAAoB,uBAAuB,CAAC;AAEhD,QAAM,oBAAoB,MAAM;AACpB,cAAA,CAAC,SAAS,CAAC,IAAI;AAAA,EAC3B;AAEM,QAAA,kBAAkB,CAAC,aAAa;AACpC,QAAI,WAAW;AACb,4BAAsB,SAAS,IAAI;AACjB,wBAAA;AAAA,IAAA;AAAA,EAEtB;AAEM,QAAA,eAAe,OAAO,WAAW;AACrC,eAAW,gCAAgC;AAE5B,mBAAA,OAAO,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,kBAAkB,GAAG,OAAO,GAAG;AAAA,EAChF;AAEA,MAAI,WAAW;AACN,WAAA,oBAAC,KAAK,SAAL,EAAa;AAAA,EAAA;AAIrB,SAAA,qBAAC,QAAQ,MAAR,EACC,UAAA;AAAA,IAAC,oBAAA,KAAK,OAAL,EACE,UAAA;AAAA,MACC,EAAE,IAAI,sBAAsB,gBAAgB,oBAAoB;AAAA,MAChE;AAAA,QACE,MAAM,cAAc;AAAA,UAClB,IAAI,QAAQ,0BAA0B;AAAA,UACtC,gBAAgB;AAAA,QACjB,CAAA;AAAA,MAAA;AAAA,IACH,GAEJ;AAAA,IACA,qBAAC,KAAK,MAAL,EACC,UAAA;AAAA,MAAA;AAAA,QAAC,QAAQ;AAAA,QAAR;AAAA,UACC,OAAO,cAAc;AAAA,YACnB,IAAI,QAAQ,0BAA0B;AAAA,YACtC,gBAAgB;AAAA,UACjB,CAAA;AAAA,QAAA;AAAA,MACH;AAAA,MACA,oBAAC,QAAQ,SAAR,EACC,UAAA,qBAAC,OAAM,EAAA,UAAU,GAAG,UAAU,UAAU,SAAS,GAC/C,UAAA;AAAA,QAAC,oBAAA,OAAA,EACC,+BAAC,IACC,EAAA,UAAA;AAAA,UAAA,oBAAC,IACC,EAAA,UAAA,oBAAC,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,8BACC,IACC,EAAA,UAAA,oBAAC,cAAW,SAAQ,SAAQ,WAAU,cACnC,UAAA,cAAc,EAAE,IAAI,QAAQ,kBAAkB,GAAG,gBAAgB,SAAS,CAAC,EAC9E,CAAA,GACF;AAAA,UACA,oBAAC,MACC,UAAC,oBAAA,YAAA,EAAW,SAAQ,SAClB,UAAA,oBAAC,kBACE,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAAA,CACjB,EACH,CAAA,EAAA,CACF,EACF,CAAA;AAAA,QAAA,EAAA,CACF,EACF,CAAA;AAAA,QACC,oBAAA,OAAA,EACE,UAAU,UAAA,IAAI,CAAC,aACd;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,SAAS,MAAO,YAAY,gBAAgB,QAAQ,IAAI;AAAA,YAExD,UAAA;AAAA,cAAC,oBAAA,IAAA,EAAG,OAAM,OACR,UAAC,oBAAA,YAAA,EAAW,YAAW,YAAW,WAAU,cACzC,UAAS,SAAA,KACZ,CAAA,GACF;AAAA,cACA,oBAAC,IAAG,EAAA,OAAM,OACR,UAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,WAAW,SAAS,UAAU,eAAe;AAAA,kBAC7C,eAAa,UAAU,SAAS,IAAI;AAAA,kBAEnC,UAAA,SAAS,UACN,cAAc;AAAA,oBACZ,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBACjB,CAAA,IACD,cAAc;AAAA,oBACZ,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBACjB,CAAA;AAAA,gBAAA;AAAA,cAAA,GAET;AAAA,cACA,oBAAC,MAAG,SAAS,CAAC,MAAM,EAAE,mBACnB,UACC,aAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,SAAS,MAAM,gBAAgB,QAAQ;AAAA,kBACvC,SAAQ;AAAA,kBACR,OAAM;AAAA,kBAEN,8BAAC,QAAO,CAAA,CAAA;AAAA,gBAAA;AAAA,cAAA,EAGd,CAAA;AAAA,YAAA;AAAA,UAAA;AAAA,UAlCK,SAAS;AAAA,QAAA,CAoCjB,EACH,CAAA;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,IAAA,GACF;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,aAAa,KAAK,kBAAkB;AAAA,QACpC;AAAA,QACA,aAAa,eAAe;AAAA,QAC5B,QAAQ;AAAA,QACR,mBAAmB;AAAA,UACjB,cAAc;AAAA,YACZ,IAAI,QAAQ,iCAAiC;AAAA,YAC7C,gBAAgB;AAAA,UAAA,CACjB;AAAA,UACD,WAAW,kBAAkB;AAAA,QAC/B;AAAA,QACA,UAAU;AAAA,QACV,UAAU;AAAA,QACV;AAAA,MAAA;AAAA,IAAA;AAAA,EACF,GACF;AAEJ;AAEM,MAAA,yBAAyB,MAC7B,oBAAC,KAAK,SAAL,EAAa,aAAa,YAAY,eACrC,UAAC,oBAAA,eAAA,CAAc,CAAA,EACjB,CAAA;"}